// Code generated by mockery. DO NOT EDIT.

// This file can be generated by running: make gen-mock-repo

package mock_services

import (
	context "context"

	epb "github.com/manabie-com/backend/pkg/manabuf/eureka/v1"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// EurekaStudentEventLogModifierSvc is an autogenerated mock type for the EurekaStudentEventLogModifierSvc type
type EurekaStudentEventLogModifierSvc struct {
	mock.Mock
}

// CreateStudentEventLogs provides a mock function with given fields: ctx, req, opts
func (_m *EurekaStudentEventLogModifierSvc) CreateStudentEventLogs(ctx context.Context, req *epb.CreateStudentEventLogsRequest, opts ...grpc.CallOption) (*epb.CreateStudentEventLogsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *epb.CreateStudentEventLogsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *epb.CreateStudentEventLogsRequest, ...grpc.CallOption) *epb.CreateStudentEventLogsResponse); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*epb.CreateStudentEventLogsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *epb.CreateStudentEventLogsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewEurekaStudentEventLogModifierSvc interface {
	mock.TestingT
	Cleanup(func())
}

// NewEurekaStudentEventLogModifierSvc creates a new instance of EurekaStudentEventLogModifierSvc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEurekaStudentEventLogModifierSvc(t mockConstructorTestingTNewEurekaStudentEventLogModifierSvc) *EurekaStudentEventLogModifierSvc {
	mock := &EurekaStudentEventLogModifierSvc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
