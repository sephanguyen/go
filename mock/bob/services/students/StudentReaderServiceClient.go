// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	bpb "github.com/manabie-com/backend/pkg/manabuf/bob/v1"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// StudentReaderServiceClient is an autogenerated mock type for the StudentReaderServiceClient type
type StudentReaderServiceClient struct {
	mock.Mock
}

// FindStudent provides a mock function with given fields: ctx, in, opts
func (_m *StudentReaderServiceClient) FindStudent(ctx context.Context, in *bpb.FindStudentRequest, opts ...grpc.CallOption) (*bpb.FindStudentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *bpb.FindStudentResponse
	if rf, ok := ret.Get(0).(func(context.Context, *bpb.FindStudentRequest, ...grpc.CallOption) *bpb.FindStudentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bpb.FindStudentResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *bpb.FindStudentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListSchoolIDsByStudentIDs provides a mock function with given fields: ctx, in, opts
func (_m *StudentReaderServiceClient) GetListSchoolIDsByStudentIDs(ctx context.Context, in *bpb.GetListSchoolIDsByStudentIDsRequest, opts ...grpc.CallOption) (*bpb.GetListSchoolIDsByStudentIDsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *bpb.GetListSchoolIDsByStudentIDsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *bpb.GetListSchoolIDsByStudentIDsRequest, ...grpc.CallOption) *bpb.GetListSchoolIDsByStudentIDsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bpb.GetListSchoolIDsByStudentIDsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *bpb.GetListSchoolIDsByStudentIDsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveLearningProgress provides a mock function with given fields: ctx, in, opts
func (_m *StudentReaderServiceClient) RetrieveLearningProgress(ctx context.Context, in *bpb.RetrieveLearningProgressRequest, opts ...grpc.CallOption) (*bpb.RetrieveLearningProgressResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *bpb.RetrieveLearningProgressResponse
	if rf, ok := ret.Get(0).(func(context.Context, *bpb.RetrieveLearningProgressRequest, ...grpc.CallOption) *bpb.RetrieveLearningProgressResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bpb.RetrieveLearningProgressResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *bpb.RetrieveLearningProgressRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveStat provides a mock function with given fields: ctx, in, opts
func (_m *StudentReaderServiceClient) RetrieveStat(ctx context.Context, in *bpb.RetrieveStatRequest, opts ...grpc.CallOption) (*bpb.RetrieveStatResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *bpb.RetrieveStatResponse
	if rf, ok := ret.Get(0).(func(context.Context, *bpb.RetrieveStatRequest, ...grpc.CallOption) *bpb.RetrieveStatResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bpb.RetrieveStatResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *bpb.RetrieveStatRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveStudentAssociatedToParentAccount provides a mock function with given fields: ctx, in, opts
func (_m *StudentReaderServiceClient) RetrieveStudentAssociatedToParentAccount(ctx context.Context, in *bpb.RetrieveStudentAssociatedToParentAccountRequest, opts ...grpc.CallOption) (*bpb.RetrieveStudentAssociatedToParentAccountResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *bpb.RetrieveStudentAssociatedToParentAccountResponse
	if rf, ok := ret.Get(0).(func(context.Context, *bpb.RetrieveStudentAssociatedToParentAccountRequest, ...grpc.CallOption) *bpb.RetrieveStudentAssociatedToParentAccountResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bpb.RetrieveStudentAssociatedToParentAccountResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *bpb.RetrieveStudentAssociatedToParentAccountRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveStudentProfile provides a mock function with given fields: ctx, in, opts
func (_m *StudentReaderServiceClient) RetrieveStudentProfile(ctx context.Context, in *bpb.RetrieveStudentProfileRequest, opts ...grpc.CallOption) (*bpb.RetrieveStudentProfileResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *bpb.RetrieveStudentProfileResponse
	if rf, ok := ret.Get(0).(func(context.Context, *bpb.RetrieveStudentProfileRequest, ...grpc.CallOption) *bpb.RetrieveStudentProfileResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bpb.RetrieveStudentProfileResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *bpb.RetrieveStudentProfileRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
