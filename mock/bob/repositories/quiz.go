// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/bob/entities"
	"github.com/manabie-com/backend/internal/bob/repositories"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockQuizRepo struct {
	mock.Mock
}

func (r *MockQuizRepo) Create(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.Quiz) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockQuizRepo) DeleteByExternalID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Int4) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockQuizRepo) GetByExternalID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Int4) (*entities.Quiz, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.Quiz), args.Error(1)
}

func (r *MockQuizRepo) GetByExternalIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 pgtype.Text) (entities.Quizzes, error) {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Get(0).(entities.Quizzes), args.Error(1)
}

func (r *MockQuizRepo) GetOptions(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text) ([]*entities.QuizOption, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.QuizOption), args.Error(1)
}

func (r *MockQuizRepo) Retrieve(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (*entities.Quiz, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.Quiz), args.Error(1)
}

func (r *MockQuizRepo) Search(arg1 context.Context, arg2 database.QueryExecer, arg3 repositories.QuizFilter) (entities.Quizzes, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entities.Quizzes), args.Error(1)
}

func (r *MockQuizRepo) Upsert(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.Quiz) ([]*entities.Quiz, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.Quiz), args.Error(1)
}
