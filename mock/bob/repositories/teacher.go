// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/bob/entities"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockTeacherRepo struct {
	mock.Mock
}

func (r *MockTeacherRepo) Create(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.Teacher) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockTeacherRepo) CreateMultiple(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.Teacher) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockTeacherRepo) FindByID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (*entities.Teacher, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.Teacher), args.Error(1)
}

func (r *MockTeacherRepo) FindRegardlessDeletion(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (*entities.Teacher, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.Teacher), args.Error(1)
}

func (r *MockTeacherRepo) GetTeacherHasSchoolIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 []int32) (*entities.Teacher, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.Teacher), args.Error(1)
}

func (r *MockTeacherRepo) IsInSchool(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 pgtype.Int4) (bool, error) {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Get(0).(bool), args.Error(1)
}

func (r *MockTeacherRepo) Retrieve(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 ...string) ([]entities.Teacher, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]entities.Teacher), args.Error(1)
}

func (r *MockTeacherRepo) SoftDelete(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockTeacherRepo) Update(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.Teacher) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
