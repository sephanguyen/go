// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/bob/entities"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockStudentOrderRepo struct {
	mock.Mock
}

func (r *MockStudentOrderRepo) CheckTransactionIDExist(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) bool {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(bool)
}

func (r *MockStudentOrderRepo) Create(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.StudentOrder) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudentOrderRepo) Find(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text, arg5 pgtype.Int4Array) (*entities.StudentOrder, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.StudentOrder), args.Error(1)
}

func (r *MockStudentOrderRepo) FindByGateway(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text, arg5 pgtype.Text) (*entities.StudentOrder, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.StudentOrder), args.Error(1)
}

func (r *MockStudentOrderRepo) FindOrderByPromotionCode(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text) (*entities.StudentOrder, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.StudentOrder), args.Error(1)
}

func (r *MockStudentOrderRepo) FindOrdersByPromotionCodeAndStatuses(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text, arg5 pgtype.TextArray) ([]*entities.StudentOrder, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudentOrder), args.Error(1)
}

func (r *MockStudentOrderRepo) Get(arg1 context.Context, arg2 database.QueryExecer, arg3 int32) (*entities.StudentOrder, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.StudentOrder), args.Error(1)
}

func (r *MockStudentOrderRepo) ListOrderForProcessing(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Timestamptz, arg4 pgtype.Text, arg5 pgtype.Text) ([]*entities.StudentOrder, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudentOrder), args.Error(1)
}

func (r *MockStudentOrderRepo) Retrieve(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 pgtype.TextArray) ([]*entities.StudentOrder, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudentOrder), args.Error(1)
}

func (r *MockStudentOrderRepo) Update(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.StudentOrder) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudentOrderRepo) UpdatePaymentResponse(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Int4, arg4 pgtype.Text, arg5 pgtype.Text, arg6 pgtype.Text) (int64, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5, arg6)
	return args.Get(0).(int64), args.Error(1)
}

func (r *MockStudentOrderRepo) UpdateReferenceNumber(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Int4, arg4 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockStudentOrderRepo) UpdateStatus(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Int4Array, arg4 pgtype.Text, arg5 pgtype.Text) (int64, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Get(0).(int64), args.Error(1)
}
