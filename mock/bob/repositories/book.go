// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/bob/entities"
	"github.com/manabie-com/backend/internal/bob/repositories"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockBookRepo struct {
	mock.Mock
}

func (r *MockBookRepo) FindByID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 ...repositories.QueryEnhancer) (*entities.Book, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.Book), args.Error(1)
}

func (r *MockBookRepo) FindByIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) (map[string]*entities.Book, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(map[string]*entities.Book), args.Error(1)
}

func (r *MockBookRepo) FindWithFilter(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 uint32, arg5 uint32) ([]*entities.Book, int, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)

	if args.Get(0) == nil {
		return nil, args.Get(1).(int), args.Error(2)
	}
	return args.Get(0).([]*entities.Book), args.Get(1).(int), args.Error(2)
}

func (r *MockBookRepo) ListBooks(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.ListBooksArgs) ([]*entities.Book, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.Book), args.Error(1)
}

func (r *MockBookRepo) RetrieveBookTreeByTopicIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*repositories.BookTreeInfo, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*repositories.BookTreeInfo), args.Error(1)
}

func (r *MockBookRepo) SoftDelete(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockBookRepo) UpdateCurrentChapterDisplayOrder(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Int4, arg4 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockBookRepo) Upsert(arg1 context.Context, arg2 database.Ext, arg3 []*entities.Book) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
