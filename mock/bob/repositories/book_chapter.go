// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/bob/entities"
	"github.com/manabie-com/backend/internal/bob/repositories"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockBookChapterRepo struct {
	mock.Mock
}

func (r *MockBookChapterRepo) FindByBookIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) (map[string][]*entities.BookChapter, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(map[string][]*entities.BookChapter), args.Error(1)
}

func (r *MockBookChapterRepo) FindByIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*entities.BookChapter, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.BookChapter), args.Error(1)
}

func (r *MockBookChapterRepo) RetrieveContentStructuresByLOs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) (map[string][]repositories.ContentStructure, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(map[string][]repositories.ContentStructure), args.Error(1)
}

func (r *MockBookChapterRepo) RetrieveContentStructuresByTopics(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) (map[string][]repositories.ContentStructure, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(map[string][]repositories.ContentStructure), args.Error(1)
}

func (r *MockBookChapterRepo) SoftDelete(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockBookChapterRepo) SoftDeleteByChapterIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockBookChapterRepo) Upsert(arg1 context.Context, arg2 database.Ext, arg3 []*entities.BookChapter) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
