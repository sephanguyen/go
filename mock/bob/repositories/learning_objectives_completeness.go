// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"
	entities_bob "github.com/manabie-com/backend/internal/bob/entities"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/bob/repositories"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockStudentsLearningObjectivesCompletenessRepo struct {
	mock.Mock
}

func (r *MockStudentsLearningObjectivesCompletenessRepo) CountTotalLOsFinished(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 *pgtype.Timestamptz, arg5 *pgtype.Timestamptz) (int, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Get(0).(int), args.Error(1)
}

func (r *MockStudentsLearningObjectivesCompletenessRepo) Create(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities_bob.StudentsLearningObjectivesCompleteness) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudentsLearningObjectivesCompletenessRepo) DailyLOFinished(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 *pgtype.Timestamptz, arg5 *pgtype.Timestamptz) ([]*repositories.DailyLOFinished, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*repositories.DailyLOFinished), args.Error(1)
}

func (r *MockStudentsLearningObjectivesCompletenessRepo) Find(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.TextArray) (map[pgtype.Text]*entities_bob.StudentsLearningObjectivesCompleteness, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(map[pgtype.Text]*entities_bob.StudentsLearningObjectivesCompleteness), args.Error(1)
}

func (r *MockStudentsLearningObjectivesCompletenessRepo) RetrieveFinishedLOs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) ([]*entities_bob.StudentsLearningObjectivesCompleteness, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities_bob.StudentsLearningObjectivesCompleteness), args.Error(1)
}

func (r *MockStudentsLearningObjectivesCompletenessRepo) TotalLOFinished(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 *pgtype.Timestamptz, arg5 *pgtype.Timestamptz) (int, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Get(0).(int), args.Error(1)
}

func (r *MockStudentsLearningObjectivesCompletenessRepo) UpsertLOCompleteness(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities_bob.StudentsLearningObjectivesCompleteness) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
