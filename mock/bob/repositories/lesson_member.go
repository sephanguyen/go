// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/bob/entities"
	"github.com/manabie-com/backend/internal/bob/repositories"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockLessonMemberRepo struct {
	mock.Mock
}

func (r *MockLessonMemberRepo) CourseAccessible(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) ([]string, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]string), args.Error(1)
}

func (r *MockLessonMemberRepo) Find(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) ([]*entities.LessonMember, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.LessonMember), args.Error(1)
}

func (r *MockLessonMemberRepo) GetLessonMemberStates(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (entities.LessonMemberStates, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entities.LessonMemberStates), args.Error(1)
}

func (r *MockLessonMemberRepo) GetLessonMemberStatesByUser(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text) (entities.LessonMemberStates, error) {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Get(0).(entities.LessonMemberStates), args.Error(1)
}

func (r *MockLessonMemberRepo) GetLessonMemberStatesWithParams(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.MemberStatesFilter) (entities.LessonMemberStates, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entities.LessonMemberStates), args.Error(1)
}

func (r *MockLessonMemberRepo) GetLessonMembersInLesson(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (entities.LessonMembers, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entities.LessonMembers), args.Error(1)
}

func (r *MockLessonMemberRepo) GetLessonMembersInLessons(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) (entities.LessonMembers, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entities.LessonMembers), args.Error(1)
}

func (r *MockLessonMemberRepo) ListStudentsByLessonID(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.ListStudentsByLessonArgs) ([]*entities.User, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.User), args.Error(1)
}

func (r *MockLessonMemberRepo) SoftDelete(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockLessonMemberRepo) UpdateFieldsQueue(arg1 *pgx.Batch, arg2 *entities.LessonMember, arg3 entities.UpdateLessonMemberFields) {
	_ = r.Called(arg1, arg2, arg3)
	return
}

func (r *MockLessonMemberRepo) UpdateLessonMembersFields(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.LessonMember, arg4 entities.UpdateLessonMemberFields) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockLessonMemberRepo) UpsertAllLessonMemberStateByStateType(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text, arg5 *entities.StateValue) error {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Error(0)
}

func (r *MockLessonMemberRepo) UpsertLessonMemberState(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.LessonMemberState) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLessonMemberRepo) UpsertMultiLessonMemberStateByState(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text, arg5 pgtype.TextArray, arg6 *entities.StateValue) error {
	args := r.Called(arg1, arg2, arg3, arg4, arg5, arg6)
	return args.Error(0)
}

func (r *MockLessonMemberRepo) UpsertQueue(arg1 *pgx.Batch, arg2 *entities.LessonMember) {
	_ = r.Called(arg1, arg2)
	return
}
