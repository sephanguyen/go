// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/bob/entities"
	"github.com/manabie-com/backend/internal/bob/repositories"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockClassMemberRepo struct {
	mock.Mock
}

func (r *MockClassMemberRepo) ClassJoinNotIn(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Int4Array) ([]int32, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]int32), args.Error(1)
}

func (r *MockClassMemberRepo) Count(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Int4Array, arg4 pgtype.Text) (map[pgtype.Int4]pgtype.Int8, error) {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Get(0).(map[pgtype.Int4]pgtype.Int8), args.Error(1)
}

func (r *MockClassMemberRepo) Create(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.ClassMember) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockClassMemberRepo) Find(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.FindClassMemberFilter) ([]*entities.ClassMember, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.ClassMember), args.Error(1)
}

func (r *MockClassMemberRepo) FindActiveStudentMember(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Int4) ([]string, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]string), args.Error(1)
}

func (r *MockClassMemberRepo) FindByClassIDsAndUserIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 pgtype.TextArray) ([]*entities.ClassMemberV2, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.ClassMemberV2), args.Error(1)
}

func (r *MockClassMemberRepo) FindByIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Int4, arg4 pgtype.TextArray, arg5 pgtype.Text) ([]*entities.ClassMember, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.ClassMember), args.Error(1)
}

func (r *MockClassMemberRepo) FindByUserIDsAndCourseIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 pgtype.TextArray) ([]*entities.ClassMemberV2, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.ClassMemberV2), args.Error(1)
}

func (r *MockClassMemberRepo) FindOwner(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Int4Array) (map[pgtype.Int4][]pgtype.Text, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(map[pgtype.Int4][]pgtype.Text), args.Error(1)
}

func (r *MockClassMemberRepo) FindUsersClass(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) ([]int32, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]int32), args.Error(1)
}

func (r *MockClassMemberRepo) Get(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Int4, arg4 pgtype.Text, arg5 pgtype.Text) (*entities.ClassMember, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.ClassMember), args.Error(1)
}

func (r *MockClassMemberRepo) InClass(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.TextArray) ([]string, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]string), args.Error(1)
}

func (r *MockClassMemberRepo) IsOwner(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Int4, arg4 pgtype.Text) (bool, error) {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Get(0).(bool), args.Error(1)
}

func (r *MockClassMemberRepo) UpdateStatus(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Int4, arg4 pgtype.TextArray, arg5 pgtype.Text) ([]*entities.ClassMember, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.ClassMember), args.Error(1)
}
