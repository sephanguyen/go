// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/bob/entities"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockStudentTopicCompletenessRepo struct {
	mock.Mock
}

func (r *MockStudentTopicCompletenessRepo) RetrieveByStudentID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 *pgtype.Text) ([]*entities.StudentTopicCompleteness, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudentTopicCompleteness), args.Error(1)
}

func (r *MockStudentTopicCompletenessRepo) RetrieveByStudentIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 *pgtype.TextArray) (map[string][]*entities.StudentTopicCompleteness, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(map[string][]*entities.StudentTopicCompleteness), args.Error(1)
}

func (r *MockStudentTopicCompletenessRepo) RetrieveCompletedByStudentIDWeeklies(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 *pgtype.Timestamptz, arg5 *pgtype.Timestamptz) ([]*entities.StudentTopicCompleteness, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudentTopicCompleteness), args.Error(1)
}

func (r *MockStudentTopicCompletenessRepo) Upsert(arg1 context.Context, arg2 database.Ext, arg3 []*entities.StudentTopicCompleteness) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
