// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/bob/entities"
	"github.com/manabie-com/backend/internal/bob/repositories"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockTopicRepo struct {
	mock.Mock
}

func (r *MockTopicRepo) BulkImport(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.Topic) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockTopicRepo) BulkUpsertWithoutDisplayOrder(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.Topic) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockTopicRepo) Create(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.Topic) (string, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(string), args.Error(1)
}

func (r *MockTopicRepo) DuplicateTopics(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 pgtype.TextArray) ([]*entities.CopiedTopic, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.CopiedTopic), args.Error(1)
}

func (r *MockTopicRepo) FindByBookIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 pgtype.TextArray, arg5 pgtype.Int4, arg6 pgtype.Int4) ([]*entities.Topic, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5, arg6)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.Topic), args.Error(1)
}

func (r *MockTopicRepo) FindByChapterIds(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) ([]*entities.Topic, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.Topic), args.Error(1)
}

func (r *MockTopicRepo) GetTopicFromLoId(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (*entities.Topic, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.Topic), args.Error(1)
}

func (r *MockTopicRepo) Retrieve(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string, arg5 string, arg6 string, arg7 int) ([]*entities.Topic, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.Topic), args.Error(1)
}

func (r *MockTopicRepo) RetrieveBookTopic(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*entities.BookTopic, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.BookTopic), args.Error(1)
}

func (r *MockTopicRepo) RetrieveByID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 ...repositories.QueryEnhancer) (*entities.Topic, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.Topic), args.Error(1)
}

func (r *MockTopicRepo) RetrieveByIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*entities.Topic, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.Topic), args.Error(1)
}

func (r *MockTopicRepo) UpdateLODisplayOrderCounter(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Int4) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockTopicRepo) UpdateTotalLOs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
