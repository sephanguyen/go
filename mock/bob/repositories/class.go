// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/bob/entities"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockClassRepo struct {
	mock.Mock
}

func (r *MockClassRepo) Create(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.Class) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockClassRepo) FindByCode(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (*entities.Class, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.Class), args.Error(1)
}

func (r *MockClassRepo) FindByID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Int4) (*entities.Class, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.Class), args.Error(1)
}

func (r *MockClassRepo) FindByIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Int4Array) ([]*entities.Class, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.Class), args.Error(1)
}

func (r *MockClassRepo) FindJoined(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) ([]*entities.Class, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.Class), args.Error(1)
}

func (r *MockClassRepo) GetNextID(arg1 context.Context, arg2 database.QueryExecer) (*pgtype.Int4, error) {
	args := r.Called(arg1, arg2)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*pgtype.Int4), args.Error(1)
}

func (r *MockClassRepo) Update(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.Class) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockClassRepo) UpdateClassCode(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Int4, arg4 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}
