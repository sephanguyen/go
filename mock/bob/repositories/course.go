// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/bob/entities"
	"github.com/manabie-com/backend/internal/bob/repositories"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockCourseRepo struct {
	mock.Mock
}

func (r *MockCourseRepo) CountCourses(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.CourseQuery) (int, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(int), args.Error(1)
}

func (r *MockCourseRepo) Create(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.Course) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockCourseRepo) FindByID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (*entities.Course, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.Course), args.Error(1)
}

func (r *MockCourseRepo) FindByIDs(arg1 context.Context, arg2 database.Ext, arg3 pgtype.TextArray) (map[pgtype.Text]*entities.Course, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(map[pgtype.Text]*entities.Course), args.Error(1)
}

func (r *MockCourseRepo) FindByLessonID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (entities.Courses, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entities.Courses), args.Error(1)
}

func (r *MockCourseRepo) FindSchoolIDsOnCourses(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) ([]int32, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]int32), args.Error(1)
}

func (r *MockCourseRepo) GetPresetStudyPlanIDsByCourseIDs(arg1 context.Context, arg2 database.Ext, arg3 pgtype.TextArray) ([]string, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]string), args.Error(1)
}

func (r *MockCourseRepo) QueryRetrieveCourses(arg1 *repositories.CourseQuery, arg2 bool) (string, []interface{}, error) {
	args := r.Called(arg1, arg2)

	if args.Get(1) == nil {
		return args.Get(0).(string), nil, args.Error(2)
	}
	return args.Get(0).(string), args.Get(1).([]interface{}), args.Error(2)
}

func (r *MockCourseRepo) RetrieveByIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) (entities.Courses, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entities.Courses), args.Error(1)
}

func (r *MockCourseRepo) RetrieveCourses(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.CourseQuery) (entities.Courses, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entities.Courses), args.Error(1)
}

func (r *MockCourseRepo) SoftDelete(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockCourseRepo) UpdateAcademicYear(arg1 context.Context, arg2 database.Ext, arg3 []*repositories.UpdateAcademicYearOpts) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockCourseRepo) UpdateStartAndEndDate(arg1 context.Context, arg2 database.Ext, arg3 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockCourseRepo) Upsert(arg1 context.Context, arg2 database.Ext, arg3 []*entities.Course) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockCourseRepo) UpsertV2(arg1 context.Context, arg2 database.Ext, arg3 []*entities.Course) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
