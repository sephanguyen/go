// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/bob/entities"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockLearningObjectiveRepo struct {
	mock.Mock
}

func (r *MockLearningObjectiveRepo) BulkImport(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.LearningObjective) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLearningObjectiveRepo) Create(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.LearningObjective) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLearningObjectiveRepo) DuplicateLearningObjectives(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 pgtype.TextArray) ([]*entities.CopiedLearningObjective, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.CopiedLearningObjective), args.Error(1)
}

func (r *MockLearningObjectiveRepo) FindInQuestionTagLo(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) (map[pgtype.Text]*entities.LearningObjective, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(map[pgtype.Text]*entities.LearningObjective), args.Error(1)
}

func (r *MockLearningObjectiveRepo) FindInQuizSet(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) (map[pgtype.Text]*entities.LearningObjective, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(map[pgtype.Text]*entities.LearningObjective), args.Error(1)
}

func (r *MockLearningObjectiveRepo) RetrieveBookLoByIntervalTime(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) ([]*entities.BookLearningObjective, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.BookLearningObjective), args.Error(1)
}

func (r *MockLearningObjectiveRepo) RetrieveByIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*entities.LearningObjective, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.LearningObjective), args.Error(1)
}

func (r *MockLearningObjectiveRepo) RetrieveByTopicIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*entities.LearningObjective, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.LearningObjective), args.Error(1)
}

func (r *MockLearningObjectiveRepo) SuggestByLOName(arg1 context.Context, arg2 database.QueryExecer, arg3 string) ([]*entities.LearningObjective, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.LearningObjective), args.Error(1)
}

func (r *MockLearningObjectiveRepo) UpdateDisplayOrders(arg1 context.Context, arg2 database.QueryExecer, arg3 map[pgtype.Text]pgtype.Int2) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
