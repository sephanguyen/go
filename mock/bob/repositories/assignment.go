// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/bob/entities"
	"github.com/manabie-com/backend/internal/bob/repositories"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockAssignmentRepo struct {
	mock.Mock
}

func (r *MockAssignmentRepo) DeleteAssignment(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockAssignmentRepo) ExecQueueAssignment(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.Assignment) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockAssignmentRepo) ExecQueueStudentAssignment(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.StudentAssignment) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockAssignmentRepo) FindAssignmentByIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*entities.Assignment, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.Assignment), args.Error(1)
}

func (r *MockAssignmentRepo) FindByTopicID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (*entities.Assignment, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.Assignment), args.Error(1)
}

func (r *MockAssignmentRepo) FindClassAssignment(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Int4, arg4 bool, arg5 int, arg6 int) (*repositories.AssignmentPagination, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5, arg6)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*repositories.AssignmentPagination), args.Error(1)
}

func (r *MockAssignmentRepo) FindStudentAssignmentWithStudyPlan(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) ([]string, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]string), args.Error(1)
}

func (r *MockAssignmentRepo) FindStudentCompletedAssignmentWeeklies(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 *pgtype.Timestamptz, arg5 *pgtype.Timestamptz) ([]*repositories.AssignmentWithTopic, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*repositories.AssignmentWithTopic), args.Error(1)
}

func (r *MockAssignmentRepo) FindStudentOverdueAssignment(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) ([]*repositories.AssignmentWithTopic, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*repositories.AssignmentWithTopic), args.Error(1)
}

func (r *MockAssignmentRepo) RetrieveByTopicIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*entities.Assignment, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.Assignment), args.Error(1)
}

func (r *MockAssignmentRepo) RetrieveStudentAssignment(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 *pgtype.Timestamptz, arg5 *pgtype.Timestamptz, arg6 bool, arg7 pgtype.Text) ([]repositories.Topic, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5, arg6, arg7)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]repositories.Topic), args.Error(1)
}

func (r *MockAssignmentRepo) RetrieveStudentAssignmentByTopic(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.TextArray) ([]string, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]string), args.Error(1)
}
