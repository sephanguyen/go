// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/bob/entities"
	"github.com/manabie-com/backend/internal/bob/repositories"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockLessonRepo struct {
	mock.Mock
}

func (r *MockLessonRepo) CountLesson(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.ListLessonArgs) (int64, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(int64), args.Error(1)
}

func (r *MockLessonRepo) Create(arg1 context.Context, arg2 database.Ext, arg3 *entities.Lesson) (*entities.Lesson, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.Lesson), args.Error(1)
}

func (r *MockLessonRepo) DecreaseNumberOfStreaming(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockLessonRepo) Delete(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLessonRepo) DeleteLessonCourses(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLessonRepo) DeleteLessonMembers(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLessonRepo) DeleteLessonTeachers(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLessonRepo) EndLiveLesson(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Timestamptz) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockLessonRepo) Find(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.LessonFilter) ([]*entities.Lesson, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.Lesson), args.Error(1)
}

func (r *MockLessonRepo) FindByID(arg1 context.Context, arg2 database.Ext, arg3 pgtype.Text) (*entities.Lesson, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.Lesson), args.Error(1)
}

func (r *MockLessonRepo) FindEarliestAndLatestTimeLessonByCourses(arg1 context.Context, arg2 database.Ext, arg3 pgtype.TextArray) (*entities.CourseAvailableRanges, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.CourseAvailableRanges), args.Error(1)
}

func (r *MockLessonRepo) FindLessonJoined(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 *pgtype.TextArray, arg5 *pgtype.Timestamptz, arg6 *pgtype.Timestamptz, arg7 int32, arg8 int32, arg9 pgtype.Text) ([]*repositories.LessonWithTime, pgtype.Int8, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

	if args.Get(0) == nil {
		return nil, args.Get(1).(pgtype.Int8), args.Error(2)
	}
	return args.Get(0).([]*repositories.LessonWithTime), args.Get(1).(pgtype.Int8), args.Error(2)
}

func (r *MockLessonRepo) FindLessonJoinedV2(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.LessonJoinedV2Filter, arg4 int32, arg5 int32) ([]*repositories.LessonWithTime, pgtype.Int8, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)

	if args.Get(0) == nil {
		return nil, args.Get(1).(pgtype.Int8), args.Error(2)
	}
	return args.Get(0).([]*repositories.LessonWithTime), args.Get(1).(pgtype.Int8), args.Error(2)
}

func (r *MockLessonRepo) FindLessonJoinedWithLocations(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 *pgtype.TextArray, arg5 *pgtype.Timestamptz, arg6 *pgtype.Timestamptz, arg7 *pgtype.TextArray, arg8 int32, arg9 int32, arg10 pgtype.Text) ([]*repositories.LessonWithTime, pgtype.Int8, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)

	if args.Get(0) == nil {
		return nil, args.Get(1).(pgtype.Int8), args.Error(2)
	}
	return args.Get(0).([]*repositories.LessonWithTime), args.Get(1).(pgtype.Int8), args.Error(2)
}

func (r *MockLessonRepo) FindLessonWithTime(arg1 context.Context, arg2 database.QueryExecer, arg3 *pgtype.TextArray, arg4 *pgtype.Timestamptz, arg5 *pgtype.Timestamptz, arg6 int32, arg7 int32, arg8 pgtype.Text) ([]*repositories.LessonWithTime, pgtype.Int8, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

	if args.Get(0) == nil {
		return nil, args.Get(1).(pgtype.Int8), args.Error(2)
	}
	return args.Get(0).([]*repositories.LessonWithTime), args.Get(1).(pgtype.Int8), args.Error(2)
}

func (r *MockLessonRepo) FindLessonWithTimeAndLocations(arg1 context.Context, arg2 database.QueryExecer, arg3 *pgtype.TextArray, arg4 *pgtype.Timestamptz, arg5 *pgtype.Timestamptz, arg6 *pgtype.TextArray, arg7 int32, arg8 int32, arg9 pgtype.Text) ([]*repositories.LessonWithTime, pgtype.Int8, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)

	if args.Get(0) == nil {
		return nil, args.Get(1).(pgtype.Int8), args.Error(2)
	}
	return args.Get(0).([]*repositories.LessonWithTime), args.Get(1).(pgtype.Int8), args.Error(2)
}

func (r *MockLessonRepo) FindPreviousPageOffset(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.ListLessonArgs) (string, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(string), args.Error(1)
}

func (r *MockLessonRepo) GetCourseIDsOfLesson(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (pgtype.TextArray, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(pgtype.TextArray), args.Error(1)
}

func (r *MockLessonRepo) GetLearnerIDsOfLesson(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (pgtype.TextArray, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(pgtype.TextArray), args.Error(1)
}

func (r *MockLessonRepo) GetStreamingLearners(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 ...repositories.QueryEnhancer) ([]string, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]string), args.Error(1)
}

func (r *MockLessonRepo) GetTeacherIDsOfLesson(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (pgtype.TextArray, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(pgtype.TextArray), args.Error(1)
}

func (r *MockLessonRepo) GetTeachersOfLessons(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*entities.LessonsTeachers, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.LessonsTeachers), args.Error(1)
}

func (r *MockLessonRepo) GrantRecordingPermission(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.JSONB) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockLessonRepo) IncreaseNumberOfStreaming(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text, arg5 int) error {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Error(0)
}

func (r *MockLessonRepo) Retrieve(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.ListLessonArgs) ([]*entities.Lesson, uint32, string, uint32, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Get(1).(uint32), args.Get(2).(string), args.Get(3).(uint32), args.Error(4)
	}
	return args.Get(0).([]*entities.Lesson), args.Get(1).(uint32), args.Get(2).(string), args.Get(3).(uint32), args.Error(4)
}

func (r *MockLessonRepo) StopRecording(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text, arg5 pgtype.JSONB) error {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Error(0)
}

func (r *MockLessonRepo) Update(arg1 context.Context, arg2 database.Ext, arg3 *entities.Lesson) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLessonRepo) UpdateLessonRoomState(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.JSONB) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockLessonRepo) UpdateRoomID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockLessonRepo) UpsertLessonCourses(arg1 context.Context, arg2 database.Ext, arg3 pgtype.Text, arg4 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockLessonRepo) UpsertLessonMembers(arg1 context.Context, arg2 database.Ext, arg3 pgtype.Text, arg4 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockLessonRepo) UpsertLessonTeachers(arg1 context.Context, arg2 database.Ext, arg3 pgtype.Text, arg4 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}
