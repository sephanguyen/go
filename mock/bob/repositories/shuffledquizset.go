// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/bob/entities"
	"github.com/manabie-com/backend/internal/bob/repositories"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockShuffledQuizSetRepo struct {
	mock.Mock
}

func (r *MockShuffledQuizSetRepo) CalculateHigestSubmissionScore(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*repositories.CalculateHighestScoreResponse, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*repositories.CalculateHighestScoreResponse), args.Error(1)
}

func (r *MockShuffledQuizSetRepo) Get(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Int8, arg5 pgtype.Int8) (*entities.ShuffledQuizSet, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.ShuffledQuizSet), args.Error(1)
}

func (r *MockShuffledQuizSetRepo) GetByStudyPlanItems(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) (entities.ShuffledQuizSets, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entities.ShuffledQuizSets), args.Error(1)
}

func (r *MockShuffledQuizSetRepo) GetExternalIDsFromSubmissionHistory(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 bool) (pgtype.TextArray, error) {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Get(0).(pgtype.TextArray), args.Error(1)
}

func (r *MockShuffledQuizSetRepo) GetLoID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (pgtype.Text, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(pgtype.Text), args.Error(1)
}

func (r *MockShuffledQuizSetRepo) GetQuizIdx(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text) (pgtype.Int4, error) {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Get(0).(pgtype.Int4), args.Error(1)
}

func (r *MockShuffledQuizSetRepo) GetScore(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (pgtype.Int4, pgtype.Int4, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(pgtype.Int4), args.Get(1).(pgtype.Int4), args.Error(2)
}

func (r *MockShuffledQuizSetRepo) GetSeed(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (pgtype.Text, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(pgtype.Text), args.Error(1)
}

func (r *MockShuffledQuizSetRepo) GetStudentID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (pgtype.Text, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(pgtype.Text), args.Error(1)
}

func (r *MockShuffledQuizSetRepo) GetSubmissionHistory(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Int4, arg5 pgtype.Int4) (map[pgtype.Text]pgtype.JSONB, []pgtype.Text, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)

	if args.Get(1) == nil {
		return args.Get(0).(map[pgtype.Text]pgtype.JSONB), nil, args.Error(2)
	}
	return args.Get(0).(map[pgtype.Text]pgtype.JSONB), args.Get(1).([]pgtype.Text), args.Error(2)
}

func (r *MockShuffledQuizSetRepo) IsFinishedQuizTest(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (pgtype.Bool, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(pgtype.Bool), args.Error(1)
}

func (r *MockShuffledQuizSetRepo) ListExternalIDsFromSubmissionHistory(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 bool) (map[string][]string, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(map[string][]string), args.Error(1)
}

func (r *MockShuffledQuizSetRepo) Retrieve(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*entities.ShuffledQuizSet, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.ShuffledQuizSet), args.Error(1)
}

func (r *MockShuffledQuizSetRepo) UpdateSubmissionHistory(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.JSONB) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockShuffledQuizSetRepo) UpdateTotalCorrectness(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
