// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/bob/entities"
	"github.com/manabie-com/backend/internal/bob/repositories"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockStudentRepo struct {
	mock.Mock
}

func (r *MockStudentRepo) Create(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.Student) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudentRepo) CreateEn(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.Student) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudentRepo) Find(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (*entities.Student, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.Student), args.Error(1)
}

func (r *MockStudentRepo) FindByPhone(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (*entities.Student, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.Student), args.Error(1)
}

func (r *MockStudentRepo) FindStudentProfilesByIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*entities.Student, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.Student), args.Error(1)
}

func (r *MockStudentRepo) FindStudents(arg1 context.Context, arg2 database.QueryExecer, arg3 repositories.FindStudentFilter) ([]*entities.Student, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.Student), args.Error(1)
}

func (r *MockStudentRepo) GetCountryByStudent(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (string, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(string), args.Error(1)
}

func (r *MockStudentRepo) GetStudentsByParentID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) ([]*entities.User, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.User), args.Error(1)
}

func (r *MockStudentRepo) Retrieve(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]repositories.StudentProfile, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]repositories.StudentProfile), args.Error(1)
}

func (r *MockStudentRepo) SoftDelete(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudentRepo) TotalQuestionLimit(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (uint, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(uint), args.Error(1)
}

func (r *MockStudentRepo) Update(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.Student) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudentRepo) UpdateStudentProfile(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.Student) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudentRepo) UpdateV2(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.Student) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
