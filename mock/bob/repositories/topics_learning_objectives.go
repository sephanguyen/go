// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/bob/entities"
	"github.com/manabie-com/backend/internal/bob/repositories"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockTopicsLearningObjectivesRepo struct {
	mock.Mock
}

func (r *MockTopicsLearningObjectivesRepo) BulkImport(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.TopicsLearningObjectives) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockTopicsLearningObjectivesRepo) BulkUpdateDisplayOrder(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.TopicsLearningObjectives) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockTopicsLearningObjectivesRepo) Create(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.TopicsLearningObjectives) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockTopicsLearningObjectivesRepo) RetrieveByLoIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*repositories.TopicLearningObjective, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*repositories.TopicLearningObjective), args.Error(1)
}

func (r *MockTopicsLearningObjectivesRepo) RetrieveByTopicIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*repositories.TopicLearningObjective, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*repositories.TopicLearningObjective), args.Error(1)
}

func (r *MockTopicsLearningObjectivesRepo) SoftDeleteByLoIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockTopicsLearningObjectivesRepo) SoftDeleteByTopicID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockTopicsLearningObjectivesRepo) SoftDeleteByTopicIDAndLoID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}
