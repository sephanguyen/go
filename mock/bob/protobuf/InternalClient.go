// Code generated by mockery v2.0.0-alpha.2. DO NOT EDIT.

package mocks_protobuf

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/manabie-com/backend/pkg/genproto/bob"
)

// InternalClient is an autogenerated mock type for the InternalClient type
type InternalClient struct {
	mock.Mock
}

// ProcessArchivedStudentQuestion provides a mock function with given fields: ctx, in, opts
func (_m *InternalClient) ProcessArchivedStudentQuestion(ctx context.Context, in *pb.ProcessArchivedStudentQuestionRequest, opts ...grpc.CallOption) (*pb.ProcessArchivedStudentQuestionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.ProcessArchivedStudentQuestionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.ProcessArchivedStudentQuestionRequest, ...grpc.CallOption) *pb.ProcessArchivedStudentQuestionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.ProcessArchivedStudentQuestionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.ProcessArchivedStudentQuestionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessTimeOutSolvedStudentQuestion provides a mock function with given fields: ctx, in, opts
func (_m *InternalClient) ProcessTimeOutSolvedStudentQuestion(ctx context.Context, in *pb.ProcessTimeOutSolvedStudentQuestionRequest, opts ...grpc.CallOption) (*pb.ProcessTimeOutSolvedStudentQuestionResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.ProcessTimeOutSolvedStudentQuestionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.ProcessTimeOutSolvedStudentQuestionRequest, ...grpc.CallOption) *pb.ProcessTimeOutSolvedStudentQuestionResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.ProcessTimeOutSolvedStudentQuestionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.ProcessTimeOutSolvedStudentQuestionRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveTopicIcon provides a mock function with given fields: ctx, in, opts
func (_m *InternalClient) RetrieveTopicIcon(ctx context.Context, in *pb.RetrieveTopicIconRequest, opts ...grpc.CallOption) (*pb.RetrieveTopicIconResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.RetrieveTopicIconResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.RetrieveTopicIconRequest, ...grpc.CallOption) *pb.RetrieveTopicIconResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.RetrieveTopicIconResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.RetrieveTopicIconRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
