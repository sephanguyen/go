// Code generated by mockery v2.0.0-alpha.2. DO NOT EDIT.

package mocks_protobuf

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/manabie-com/backend/pkg/genproto/bob"
)

// UserServiceClient is an autogenerated mock type for the UserServiceClient type
type UserServiceClient struct {
	mock.Mock
}

// CheckProfile provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) CheckProfile(ctx context.Context, in *pb.CheckProfileRequest, opts ...grpc.CallOption) (*pb.CheckProfileResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.CheckProfileResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CheckProfileRequest, ...grpc.CallOption) *pb.CheckProfileResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.CheckProfileResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.CheckProfileRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClaimsUserAuth provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) ClaimsUserAuth(ctx context.Context, in *pb.ClaimsUserAuthRequest, opts ...grpc.CallOption) (*pb.ClaimsUserAuthResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.ClaimsUserAuthResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.ClaimsUserAuthRequest, ...grpc.CallOption) *pb.ClaimsUserAuthResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.ClaimsUserAuthResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.ClaimsUserAuthRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBasicProfile provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) GetBasicProfile(ctx context.Context, in *pb.GetBasicProfileRequest, opts ...grpc.CallOption) (*pb.GetBasicProfileResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetBasicProfileResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetBasicProfileRequest, ...grpc.CallOption) *pb.GetBasicProfileResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetBasicProfileResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetBasicProfileRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCoachProfile provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) GetCoachProfile(ctx context.Context, in *pb.GetCoachProfileRequest, opts ...grpc.CallOption) (*pb.GetCoachProfileResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetCoachProfileResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetCoachProfileRequest, ...grpc.CallOption) *pb.GetCoachProfileResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetCoachProfileResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetCoachProfileRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCoachProfiles provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) GetCoachProfiles(ctx context.Context, in *pb.GetCoachProfilesRequest, opts ...grpc.CallOption) (*pb.GetCoachProfilesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetCoachProfilesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetCoachProfilesRequest, ...grpc.CallOption) *pb.GetCoachProfilesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetCoachProfilesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetCoachProfilesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentUserProfile provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) GetCurrentUserProfile(ctx context.Context, in *pb.GetCurrentUserProfileRequest, opts ...grpc.CallOption) (*pb.GetCurrentUserProfileResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetCurrentUserProfileResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetCurrentUserProfileRequest, ...grpc.CallOption) *pb.GetCurrentUserProfileResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetCurrentUserProfileResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetCurrentUserProfileRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeacherProfiles provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) GetTeacherProfiles(ctx context.Context, in *pb.GetTeacherProfilesRequest, opts ...grpc.CallOption) (*pb.GetTeacherProfilesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetTeacherProfilesResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetTeacherProfilesRequest, ...grpc.CallOption) *pb.GetTeacherProfilesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetTeacherProfilesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetTeacherProfilesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTutorProfile provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) GetTutorProfile(ctx context.Context, in *pb.GetTutorProfileRequest, opts ...grpc.CallOption) (*pb.GetTutorProfileResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.GetTutorProfileResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetTutorProfileRequest, ...grpc.CallOption) *pb.GetTutorProfileResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetTutorProfileResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetTutorProfileRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTutorStatus provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) UpdateTutorStatus(ctx context.Context, in *pb.UpdateTutorStatusRequest, opts ...grpc.CallOption) (*pb.UpdateTutorStatusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.UpdateTutorStatusResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpdateTutorStatusRequest, ...grpc.CallOption) *pb.UpdateTutorStatusResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.UpdateTutorStatusResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.UpdateTutorStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserDeviceToken provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) UpdateUserDeviceToken(ctx context.Context, in *pb.UpdateUserDeviceTokenRequest, opts ...grpc.CallOption) (*pb.UpdateUserDeviceTokenResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.UpdateUserDeviceTokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpdateUserDeviceTokenRequest, ...grpc.CallOption) *pb.UpdateUserDeviceTokenResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.UpdateUserDeviceTokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.UpdateUserDeviceTokenRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserProfile provides a mock function with given fields: ctx, in, opts
func (_m *UserServiceClient) UpdateUserProfile(ctx context.Context, in *pb.UpdateUserProfileRequest, opts ...grpc.CallOption) (*pb.UpdateUserProfileResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.UpdateUserProfileResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UpdateUserProfileRequest, ...grpc.CallOption) *pb.UpdateUserProfileResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.UpdateUserProfileResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.UpdateUserProfileRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
