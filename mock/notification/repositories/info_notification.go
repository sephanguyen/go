// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/notification/entities"
	"github.com/manabie-com/backend/internal/notification/repositories"
)

type MockInfoNotificationRepo struct {
	mock.Mock
}

func (r *MockInfoNotificationRepo) CountTotalNotificationForStatus(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.FindNotificationFilter) (map[string]uint32, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(map[string]uint32), args.Error(1)
}

func (r *MockInfoNotificationRepo) DiscardNotification(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockInfoNotificationRepo) Find(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.FindNotificationFilter) (entities.InfoNotifications, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entities.InfoNotifications), args.Error(1)
}

func (r *MockInfoNotificationRepo) IsNotificationDeleted(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (bool, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(bool), args.Error(1)
}

func (r *MockInfoNotificationRepo) SetSentAt(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockInfoNotificationRepo) SetStatus(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockInfoNotificationRepo) UpdateNotification(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 map[string]interface{}) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockInfoNotificationRepo) Upsert(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.InfoNotification) (string, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(string), args.Error(1)
}
