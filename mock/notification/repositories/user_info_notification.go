// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/notification/entities"
	"github.com/manabie-com/backend/internal/notification/repositories"
)

type MockUsersInfoNotificationRepo struct {
	mock.Mock
}

func (r *MockUsersInfoNotificationRepo) CountByStatus(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text) (int, int, error) {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Get(0).(int), args.Get(1).(int), args.Error(2)
}

func (r *MockUsersInfoNotificationRepo) Find(arg1 context.Context, arg2 database.QueryExecer, arg3 repositories.FindUserNotificationFilter) (entities.UserInfoNotifications, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entities.UserInfoNotifications), args.Error(1)
}

func (r *MockUsersInfoNotificationRepo) FindUserIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 repositories.FindUserNotificationFilter) (map[string]entities.UserInfoNotifications, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(map[string]entities.UserInfoNotifications), args.Error(1)
}

func (r *MockUsersInfoNotificationRepo) GetNotificationIDWithFullyQnStatus(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 pgtype.Text) ([]string, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]string), args.Error(1)
}

func (r *MockUsersInfoNotificationRepo) SetQuestionnareStatusAndSubmittedAt(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string, arg5 pgtype.Timestamptz) error {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Error(0)
}

func (r *MockUsersInfoNotificationRepo) SetStatus(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.TextArray, arg5 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Error(0)
}

func (r *MockUsersInfoNotificationRepo) SetStatusByNotificationIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.TextArray, arg5 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Error(0)
}

func (r *MockUsersInfoNotificationRepo) SoftDeleteByNotificationID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockUsersInfoNotificationRepo) UpdateUnreadUser(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockUsersInfoNotificationRepo) Upsert(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.UserInfoNotification) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
