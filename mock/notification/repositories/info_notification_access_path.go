// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/notification/entities"
	"github.com/manabie-com/backend/internal/notification/repositories"
)

type MockInfoNotificationAccessPathRepo struct {
	mock.Mock
}

func (r *MockInfoNotificationAccessPathRepo) BulkUpsert(arg1 context.Context, arg2 database.QueryExecer, arg3 entities.InfoNotificationAccessPaths) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockInfoNotificationAccessPathRepo) GetByNotificationIDAndNotInLocationIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 []string) (entities.InfoNotificationAccessPaths, error) {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Get(0).(entities.InfoNotificationAccessPaths), args.Error(1)
}

func (r *MockInfoNotificationAccessPathRepo) GetLocationIDsByNotificationID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) ([]string, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]string), args.Error(1)
}

func (r *MockInfoNotificationAccessPathRepo) SoftDelete(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.SoftDeleteNotificationAccessPathFilter) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockInfoNotificationAccessPathRepo) Upsert(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.InfoNotificationAccessPath) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
