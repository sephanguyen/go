// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/notification/entities"
	"github.com/manabie-com/backend/internal/notification/repositories"
)

type MockQuestionnaireRepo struct {
	mock.Mock
}

func (r *MockQuestionnaireRepo) FindByID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) (*entities.Questionnaire, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.Questionnaire), args.Error(1)
}

func (r *MockQuestionnaireRepo) FindQuestionnaireCSVResponders(arg1 context.Context, arg2 database.QueryExecer, arg3 string) ([]*repositories.QuestionnaireCSVResponder, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*repositories.QuestionnaireCSVResponder), args.Error(1)
}

func (r *MockQuestionnaireRepo) FindQuestionnaireResponders(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.FindQuestionnaireRespondersFilter) (uint32, []*repositories.QuestionnaireResponder, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(1) == nil {
		return args.Get(0).(uint32), nil, args.Error(2)
	}
	return args.Get(0).(uint32), args.Get(1).([]*repositories.QuestionnaireResponder), args.Error(2)
}

func (r *MockQuestionnaireRepo) FindQuestionsByQnID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) (entities.QuestionnaireQuestions, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entities.QuestionnaireQuestions), args.Error(1)
}

func (r *MockQuestionnaireRepo) FindUserAnswers(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.FindUserAnswersFilter) (entities.QuestionnaireUserAnswers, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entities.QuestionnaireUserAnswers), args.Error(1)
}

func (r *MockQuestionnaireRepo) SoftDelete(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockQuestionnaireRepo) Upsert(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.Questionnaire) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
