// Code generated by mockery. DO NOT EDIT.

// This file can be generated by running: make gen-mock-repo

package mock_infra

import (
	context "context"

	entities "github.com/manabie-com/backend/internal/notification/entities"

	mock "github.com/stretchr/testify/mock"

	types "github.com/gogo/protobuf/types"

	utils "github.com/manabie-com/backend/internal/notification/services/utils"
)

// PushNotificationService is an autogenerated mock type for the PushNotificationService type
type PushNotificationService struct {
	mock.Mock
}

// PushNotificationForUser provides a mock function with given fields: ctx, users, notification, notificationMsg
func (_m *PushNotificationService) PushNotificationForUser(ctx context.Context, users entities.UserDeviceTokens, notification *entities.InfoNotification, notificationMsg *entities.InfoNotificationMsg) (int, int, error) {
	ret := _m.Called(ctx, users, notification, notificationMsg)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, entities.UserDeviceTokens, *entities.InfoNotification, *entities.InfoNotificationMsg) int); ok {
		r0 = rf(ctx, users, notification, notificationMsg)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, entities.UserDeviceTokens, *entities.InfoNotification, *entities.InfoNotificationMsg) int); ok {
		r1 = rf(ctx, users, notification, notificationMsg)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, entities.UserDeviceTokens, *entities.InfoNotification, *entities.InfoNotificationMsg) error); ok {
		r2 = rf(ctx, users, notification, notificationMsg)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RetrievePushedMessages provides a mock function with given fields: ctx, deviceToken, limit, since
func (_m *PushNotificationService) RetrievePushedMessages(ctx context.Context, deviceToken string, limit int, since *types.Timestamp) ([]utils.RetrievedPushNotificationMsg, error) {
	ret := _m.Called(ctx, deviceToken, limit, since)

	var r0 []utils.RetrievedPushNotificationMsg
	if rf, ok := ret.Get(0).(func(context.Context, string, int, *types.Timestamp) []utils.RetrievedPushNotificationMsg); ok {
		r0 = rf(ctx, deviceToken, limit, since)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]utils.RetrievedPushNotificationMsg)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int, *types.Timestamp) error); ok {
		r1 = rf(ctx, deviceToken, limit, since)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPushNotificationService interface {
	mock.TestingT
	Cleanup(func())
}

// NewPushNotificationService creates a new instance of PushNotificationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPushNotificationService(t mockConstructorTestingTNewPushNotificationService) *PushNotificationService {
	mock := &PushNotificationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
