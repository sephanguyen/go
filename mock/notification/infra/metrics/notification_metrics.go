// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	metrics "github.com/manabie-com/backend/internal/notification/infra/metrics"
	mock "github.com/stretchr/testify/mock"

	prometheus "github.com/prometheus/client_golang/prometheus"
)

// NotificationMetrics is an autogenerated mock type for the NotificationMetrics type
type NotificationMetrics struct {
	mock.Mock
}

// GetCollectors provides a mock function with given fields:
func (_m *NotificationMetrics) GetCollectors() []prometheus.Collector {
	ret := _m.Called()

	var r0 []prometheus.Collector
	if rf, ok := ret.Get(0).(func() []prometheus.Collector); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]prometheus.Collector)
		}
	}

	return r0
}

// InitCounterValue provides a mock function with given fields:
func (_m *NotificationMetrics) InitCounterValue() {
	_m.Called()
}

// RecordNotificationCreated provides a mock function with given fields: infoNotificationCount
func (_m *NotificationMetrics) RecordNotificationCreated(infoNotificationCount float64) {
	_m.Called(infoNotificationCount)
}

// RecordPushNotificationErrors provides a mock function with given fields: status, numErr
func (_m *NotificationMetrics) RecordPushNotificationErrors(status metrics.PushedNotificationStatus, numErr float64) {
	_m.Called(status, numErr)
}

// RecordSystemNotificationCreated provides a mock function with given fields: count
func (_m *NotificationMetrics) RecordSystemNotificationCreated(count float64) {
	_m.Called(count)
}

// RecordSystemNotificationError provides a mock function with given fields: count
func (_m *NotificationMetrics) RecordSystemNotificationError(count float64) {
	_m.Called(count)
}

// RecordUserNotificationCreated provides a mock function with given fields: userNotificationCount
func (_m *NotificationMetrics) RecordUserNotificationCreated(userNotificationCount float64) {
	_m.Called(userNotificationCount)
}

type mockConstructorTestingTNewNotificationMetrics interface {
	mock.TestingT
	Cleanup(func())
}

// NewNotificationMetrics creates a new instance of NotificationMetrics. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNotificationMetrics(t mockConstructorTestingTNewNotificationMetrics) *NotificationMetrics {
	mock := &NotificationMetrics{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
