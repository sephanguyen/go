// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/notification/modules/tagmgmt/entities"
	"github.com/manabie-com/backend/internal/notification/modules/tagmgmt/repositories"
)

type MockTagRepo struct {
	mock.Mock
}

func (r *MockTagRepo) BulkUpsert(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.Tag) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockTagRepo) CheckTagIDsExist(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) (bool, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(bool), args.Error(1)
}

func (r *MockTagRepo) DoesTagNameExist(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (bool, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(bool), args.Error(1)
}

func (r *MockTagRepo) FindByFilter(arg1 context.Context, arg2 database.QueryExecer, arg3 repositories.FindTagFilter) (entities.Tags, uint32, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entities.Tags), args.Get(1).(uint32), args.Error(2)
}

func (r *MockTagRepo) FindByID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (*entities.Tag, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.Tag), args.Error(1)
}

func (r *MockTagRepo) FindDuplicateTagNames(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.Tag) (map[string]string, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(map[string]string), args.Error(1)
}

func (r *MockTagRepo) FindTagIDsNotExist(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]string, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]string), args.Error(1)
}

func (r *MockTagRepo) SoftDelete(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockTagRepo) Upsert(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.Tag) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
