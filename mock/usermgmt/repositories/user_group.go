// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/usermgmt/modules/user/core/entity"
)

type MockUserGroupRepo struct {
	mock.Mock
}

func (r *MockUserGroupRepo) CreateMultiple(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entity.UserGroup) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockUserGroupRepo) DeactivateMultiple(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockUserGroupRepo) UpdateOrigin(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Bool) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockUserGroupRepo) UpdateStatus(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockUserGroupRepo) Upsert(arg1 context.Context, arg2 database.QueryExecer, arg3 *entity.UserGroup) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockUserGroupRepo) UpsertMultiple(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entity.UserGroup) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
