// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/usermgmt/modules/user/core/aggregate"
	"github.com/manabie-com/backend/internal/usermgmt/modules/user/core/entity"
)

type MockDomainStudentRepo struct {
	mock.Mock
}

func (r *MockDomainStudentRepo) GetByEmails(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) ([]entity.DomainStudent, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]entity.DomainStudent), args.Error(1)
}

func (r *MockDomainStudentRepo) GetByIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) ([]entity.DomainStudent, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]entity.DomainStudent), args.Error(1)
}

func (r *MockDomainStudentRepo) GetUsersByExternalUserIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) (entity.Users, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entity.Users), args.Error(1)
}

func (r *MockDomainStudentRepo) UpsertMultiple(arg1 context.Context, arg2 database.QueryExecer, arg3 bool, arg4 ...aggregate.DomainStudent) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}
