// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/usermgmt/modules/user/core/entity"
	"github.com/manabie-com/backend/internal/usermgmt/modules/user/core/valueobj"
	"github.com/manabie-com/backend/internal/usermgmt/pkg/field"
)

type MockDomainStudentParentRelationshipRepo struct {
	mock.Mock
}

func (r *MockDomainStudentParentRelationshipRepo) AssignParentForStudents(arg1 context.Context, arg2 database.QueryExecer, arg3 valueobj.HasOrganizationID, arg4 field.String, arg5 valueobj.HasUserID, arg6 ...valueobj.HasStudentID) error {
	args := r.Called(arg1, arg2, arg3, arg4, arg5, arg6)
	return args.Error(0)
}

func (r *MockDomainStudentParentRelationshipRepo) AssignParentsToStudent(arg1 context.Context, arg2 database.QueryExecer, arg3 valueobj.HasOrganizationID, arg4 field.String, arg5 valueobj.HasUserID, arg6 ...valueobj.HasUserID) error {
	args := r.Called(arg1, arg2, arg3, arg4, arg5, arg6)
	return args.Error(0)
}

func (r *MockDomainStudentParentRelationshipRepo) GetByParentIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) (entity.DomainStudentParentRelationships, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entity.DomainStudentParentRelationships), args.Error(1)
}

func (r *MockDomainStudentParentRelationshipRepo) GetByStudentIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) (entity.DomainStudentParentRelationships, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entity.DomainStudentParentRelationships), args.Error(1)
}

func (r *MockDomainStudentParentRelationshipRepo) SoftDeleteByParentIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockDomainStudentParentRelationshipRepo) SoftDeleteByStudentIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
