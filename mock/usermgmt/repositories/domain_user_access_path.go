// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/usermgmt/modules/user/core/entity"
	"github.com/manabie-com/backend/internal/usermgmt/pkg/field"
)

type MockDomainUserAccessPathRepo struct {
	mock.Mock
}

func (r *MockDomainUserAccessPathRepo) GetByUserID(arg1 context.Context, arg2 database.QueryExecer, arg3 field.String) (entity.DomainUserAccessPaths, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entity.DomainUserAccessPaths), args.Error(1)
}

func (r *MockDomainUserAccessPathRepo) GetByUserIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) (entity.DomainUserAccessPaths, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entity.DomainUserAccessPaths), args.Error(1)
}

func (r *MockDomainUserAccessPathRepo) SoftDeleteByUserIDAndLocationIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string, arg5 []string) error {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Error(0)
}

func (r *MockDomainUserAccessPathRepo) SoftDeleteByUserIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockDomainUserAccessPathRepo) UpsertMultiple(arg1 context.Context, arg2 database.QueryExecer, arg3 ...entity.DomainUserAccessPath) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
