// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"
	"time"

	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/usermgmt/modules/user/core/entity"
)

type MockDomainEnrollmentStatusHistoryRepo struct {
	mock.Mock
}

func (r *MockDomainEnrollmentStatusHistoryRepo) BulkInsert(arg1 context.Context, arg2 database.QueryExecer, arg3 entity.DomainEnrollmentStatusHistories) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockDomainEnrollmentStatusHistoryRepo) Create(arg1 context.Context, arg2 database.QueryExecer, arg3 entity.DomainEnrollmentStatusHistory) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockDomainEnrollmentStatusHistoryRepo) DeactivateEnrollmentStatus(arg1 context.Context, arg2 database.QueryExecer, arg3 entity.DomainEnrollmentStatusHistory, arg4 time.Time) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockDomainEnrollmentStatusHistoryRepo) GetByStudentID(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 bool) ([]entity.DomainEnrollmentStatusHistory, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]entity.DomainEnrollmentStatusHistory), args.Error(1)
}

func (r *MockDomainEnrollmentStatusHistoryRepo) GetByStudentIDAndLocationID(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string, arg5 bool) (entity.DomainEnrollmentStatusHistories, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Get(0).(entity.DomainEnrollmentStatusHistories), args.Error(1)
}

func (r *MockDomainEnrollmentStatusHistoryRepo) GetByStudentIDLocationIDEnrollmentStatusStartDateAndEndDate(arg1 context.Context, arg2 database.QueryExecer, arg3 entity.DomainEnrollmentStatusHistory) ([]entity.DomainEnrollmentStatusHistory, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]entity.DomainEnrollmentStatusHistory), args.Error(1)
}

func (r *MockDomainEnrollmentStatusHistoryRepo) GetByStudentIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) (entity.DomainEnrollmentStatusHistories, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entity.DomainEnrollmentStatusHistories), args.Error(1)
}

func (r *MockDomainEnrollmentStatusHistoryRepo) GetInactiveAndActiveStudents(arg1 context.Context, arg2 database.QueryExecer, arg3 []string, arg4 []string) ([]entity.DomainEnrollmentStatusHistory, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]entity.DomainEnrollmentStatusHistory), args.Error(1)
}

func (r *MockDomainEnrollmentStatusHistoryRepo) GetLatestEnrollmentStudentOfLocation(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string) ([]entity.DomainEnrollmentStatusHistory, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]entity.DomainEnrollmentStatusHistory), args.Error(1)
}

func (r *MockDomainEnrollmentStatusHistoryRepo) GetOutDateEnrollmentStatus(arg1 context.Context, arg2 database.QueryExecer, arg3 string) ([]entity.DomainEnrollmentStatusHistory, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]entity.DomainEnrollmentStatusHistory), args.Error(1)
}

func (r *MockDomainEnrollmentStatusHistoryRepo) GetSameStartDateEnrollmentStatusHistory(arg1 context.Context, arg2 database.QueryExecer, arg3 entity.DomainEnrollmentStatusHistory) (entity.DomainEnrollmentStatusHistories, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entity.DomainEnrollmentStatusHistories), args.Error(1)
}

func (r *MockDomainEnrollmentStatusHistoryRepo) SoftDeleteEnrollments(arg1 context.Context, arg2 database.QueryExecer, arg3 entity.DomainEnrollmentStatusHistory) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockDomainEnrollmentStatusHistoryRepo) Update(arg1 context.Context, arg2 database.QueryExecer, arg3 entity.DomainEnrollmentStatusHistory, arg4 entity.DomainEnrollmentStatusHistory) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockDomainEnrollmentStatusHistoryRepo) UpdateStudentStatusBasedEnrollmentStatus(arg1 context.Context, arg2 database.QueryExecer, arg3 []string, arg4 []string) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}
