// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/usermgmt/modules/user/core/entity"
)

type MockDomainUserRepo struct {
	mock.Mock
}

func (r *MockDomainUserRepo) GetByEmails(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) (entity.Users, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entity.Users), args.Error(1)
}

func (r *MockDomainUserRepo) GetByEmailsInsensitiveCase(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) (entity.Users, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entity.Users), args.Error(1)
}

func (r *MockDomainUserRepo) GetByExternalUserIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) (entity.Users, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entity.Users), args.Error(1)
}

func (r *MockDomainUserRepo) GetByIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) (entity.Users, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entity.Users), args.Error(1)
}

func (r *MockDomainUserRepo) GetByUserNames(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) (entity.Users, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entity.Users), args.Error(1)
}

func (r *MockDomainUserRepo) GetUserRoles(arg1 context.Context, arg2 database.QueryExecer, arg3 string) (entity.DomainRoles, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entity.DomainRoles), args.Error(1)
}

func (r *MockDomainUserRepo) UpdateActivation(arg1 context.Context, arg2 database.QueryExecer, arg3 entity.Users) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockDomainUserRepo) UpdateEmail(arg1 context.Context, arg2 database.QueryExecer, arg3 entity.User) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockDomainUserRepo) UpsertMultiple(arg1 context.Context, arg2 database.QueryExecer, arg3 bool, arg4 ...entity.User) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}
