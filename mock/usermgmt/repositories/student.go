// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/usermgmt/modules/user/adapter/postgres/repository"
	"github.com/manabie-com/backend/internal/usermgmt/modules/user/core/entity"
)

type MockStudentRepo struct {
	mock.Mock
}

func (r *MockStudentRepo) Create(arg1 context.Context, arg2 database.QueryExecer, arg3 *entity.LegacyStudent) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudentRepo) CreateMultiple(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entity.LegacyStudent) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudentRepo) Find(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (*entity.LegacyStudent, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entity.LegacyStudent), args.Error(1)
}

func (r *MockStudentRepo) FindStudentProfilesByIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*entity.LegacyStudent, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entity.LegacyStudent), args.Error(1)
}

func (r *MockStudentRepo) GetStudentsByParentID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) ([]*entity.LegacyUser, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entity.LegacyUser), args.Error(1)
}

func (r *MockStudentRepo) Retrieve(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]repository.StudentProfile, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]repository.StudentProfile), args.Error(1)
}

func (r *MockStudentRepo) SoftDelete(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudentRepo) Update(arg1 context.Context, arg2 database.QueryExecer, arg3 *entity.LegacyStudent) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
