// Code generated by mockgen. DO NOT EDIT.
package mock_service

import (
	"context"

	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/usermgmt/modules/user/core/aggregate"
	"github.com/manabie-com/backend/internal/usermgmt/modules/user/core/entity"
	"github.com/manabie-com/backend/internal/usermgmt/modules/user/core/valueobj"
	"github.com/manabie-com/backend/internal/usermgmt/pkg/unleash"
)

type MockDomainParent struct {
	mock.Mock
}

func (r *MockDomainParent) DomainParentsToUpsert(arg1 context.Context, arg2 database.Ext, arg3 bool, arg4 ...aggregate.DomainParent) ([]aggregate.DomainParent, []aggregate.DomainParent, []aggregate.DomainParent, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Get(1).([]aggregate.DomainParent), args.Get(2).([]aggregate.DomainParent), args.Error(3)
	}

	if args.Get(1) == nil {
		return nil, nil, args.Get(2).([]aggregate.DomainParent), args.Error(3)
	}

	if args.Get(2) == nil {
		return nil, nil, nil, args.Error(3)
	}
	return args.Get(0).([]aggregate.DomainParent), args.Get(1).([]aggregate.DomainParent), args.Get(2).([]aggregate.DomainParent), args.Error(3)
}

func (r *MockDomainParent) GetStudentsAccessPaths(arg1 context.Context, arg2 []string) (entity.DomainUserAccessPaths, error) {
	args := r.Called(arg1, arg2)
	return args.Get(0).(entity.DomainUserAccessPaths), args.Error(1)
}

func (r *MockDomainParent) GetTagsByExternalIDs(arg1 context.Context, arg2 []string) (entity.DomainTags, error) {
	args := r.Called(arg1, arg2)
	return args.Get(0).(entity.DomainTags), args.Error(1)
}

func (r *MockDomainParent) GetUsersByEmails(arg1 context.Context, arg2 []string) (entity.Users, error) {
	args := r.Called(arg1, arg2)
	return args.Get(0).(entity.Users), args.Error(1)
}

func (r *MockDomainParent) GetUsersByExternalIDs(arg1 context.Context, arg2 []string) (entity.Users, error) {
	args := r.Called(arg1, arg2)
	return args.Get(0).(entity.Users), args.Error(1)
}

func (r *MockDomainParent) IsAuthUsernameConfigEnabled(arg1 context.Context) (bool, error) {
	args := r.Called(arg1)
	return args.Get(0).(bool), args.Error(1)
}

func (r *MockDomainParent) IsFeatureUserNameStudentParentEnabled(arg1 valueobj.HasOrganizationID) bool {
	args := r.Called(arg1)
	return args.Get(0).(bool)
}

func (r *MockDomainParent) UpsertMultiple(arg1 context.Context, arg2 unleash.DomainParentFeatureOption, arg3 ...aggregate.DomainParent) ([]aggregate.DomainParent, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]aggregate.DomainParent), args.Error(1)
}

func (r *MockDomainParent) UpsertMultipleParentsInTx(arg1 context.Context, arg2 database.Tx, arg3 aggregate.DomainParents, arg4 aggregate.DomainParents, arg5 aggregate.DomainParents, arg6 unleash.DomainParentFeatureOption) ([]aggregate.DomainParent, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5, arg6)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]aggregate.DomainParent), args.Error(1)
}

func (r *MockDomainParent) UpsertMultipleWithChildren(arg1 context.Context, arg2 unleash.DomainParentFeatureOption, arg3 ...aggregate.DomainParentWithChildren) ([]aggregate.DomainParent, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]aggregate.DomainParent), args.Error(1)
}
