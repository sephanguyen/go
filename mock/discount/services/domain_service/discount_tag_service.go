// Code generated by mockgen. DO NOT EDIT.
package mock_services

import (
	"context"
	"time"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/discount/entities"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockDiscountTagService struct {
	mock.Mock
}

func (r *MockDiscountTagService) CreateUserDiscountTag(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.UserDiscountTag) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockDiscountTagService) RetrieveActiveDiscountTagIDsByDateAndUserID(arg1 context.Context, arg2 database.QueryExecer, arg3 time.Time, arg4 string) ([]string, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]string), args.Error(1)
}

func (r *MockDiscountTagService) RetrieveDiscountEligibilityOfStudentProduct(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string, arg5 string) ([]*entities.UserDiscountTag, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.UserDiscountTag), args.Error(1)
}

func (r *MockDiscountTagService) RetrieveDiscountTagByDiscountTagID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) (*entities.DiscountTag, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.DiscountTag), args.Error(1)
}

func (r *MockDiscountTagService) RetrieveDiscountTagIDsByDiscountType(arg1 context.Context, arg2 database.QueryExecer, arg3 string) ([]string, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]string), args.Error(1)
}

func (r *MockDiscountTagService) RetrieveDiscountTagsWithActivityOnDate(arg1 context.Context, arg2 database.QueryExecer, arg3 time.Time) ([]*entities.UserDiscountTag, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.UserDiscountTag), args.Error(1)
}

func (r *MockDiscountTagService) RetrieveEligibleDiscountTagsOfStudent(arg1 context.Context, arg2 database.QueryExecer, arg3 string) ([]*entities.UserDiscountTag, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.UserDiscountTag), args.Error(1)
}

func (r *MockDiscountTagService) RetrieveEligibleDiscountTagsOfStudentInLocation(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string) ([]*entities.UserDiscountTag, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.UserDiscountTag), args.Error(1)
}

func (r *MockDiscountTagService) RetrieveUserIDsWithActivityOnDate(arg1 context.Context, arg2 database.QueryExecer, arg3 time.Time) ([]string, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]string), args.Error(1)
}

func (r *MockDiscountTagService) SoftDeleteUserDiscountTagsByTypesAndUserID(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockDiscountTagService) UpdateDiscountTagOfStudentIDWithTimeSegment(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string, arg5 []string, arg6 []entities.TimestampSegment) error {
	args := r.Called(arg1, arg2, arg3, arg4, arg5, arg6)
	return args.Error(0)
}
