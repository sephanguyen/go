// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/payment/entities"
)

type MockStudentProductRepo struct {
	mock.Mock
}

func (r *MockStudentProductRepo) CountStudentProductIDsByStudentIDAndLocationIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 []string) (int, error) {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Get(0).(int), args.Error(1)
}

func (r *MockStudentProductRepo) Create(arg1 context.Context, arg2 database.QueryExecer, arg3 entities.StudentProduct) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudentProductRepo) GetActiveOperationFeeOfStudent(arg1 context.Context, arg2 database.QueryExecer, arg3 string) ([]entities.StudentProduct, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]entities.StudentProduct), args.Error(1)
}

func (r *MockStudentProductRepo) GetActiveRecurringProductsOfStudentInLocation(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string, arg5 []string) ([]entities.StudentProduct, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]entities.StudentProduct), args.Error(1)
}

func (r *MockStudentProductRepo) GetByID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) (entities.StudentProduct, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entities.StudentProduct), args.Error(1)
}

func (r *MockStudentProductRepo) GetByIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) ([]entities.StudentProduct, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]entities.StudentProduct), args.Error(1)
}

func (r *MockStudentProductRepo) GetByStudentIDAndLocationIDsWithPaging(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 []string, arg5 int64, arg6 int64) ([]*entities.StudentProduct, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5, arg6)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudentProduct), args.Error(1)
}

func (r *MockStudentProductRepo) GetIgnoreStudentProductIDOfRecurringProductsOfStudentInLocation(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string) ([]string, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]string), args.Error(1)
}

func (r *MockStudentProductRepo) GetLatestEndDateStudentProductWithProductIDAndStudentID(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string) ([]*entities.StudentProduct, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudentProduct), args.Error(1)
}

func (r *MockStudentProductRepo) GetStudentProductAssociatedByStudentProductID(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) ([]*entities.StudentProduct, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudentProduct), args.Error(1)
}

func (r *MockStudentProductRepo) GetStudentProductByStudentProductID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) (entities.StudentProduct, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entities.StudentProduct), args.Error(1)
}

func (r *MockStudentProductRepo) GetStudentProductForUpdateByStudentProductID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) (entities.StudentProduct, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entities.StudentProduct), args.Error(1)
}

func (r *MockStudentProductRepo) GetStudentProductIDsByRootStudentProductID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) ([]*entities.StudentProduct, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudentProduct), args.Error(1)
}

func (r *MockStudentProductRepo) GetStudentProductsByStudentProductLabelForUpdate(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) ([]*entities.StudentProduct, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudentProduct), args.Error(1)
}

func (r *MockStudentProductRepo) GetUniqueProductsByStudentID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) ([]*entities.StudentProduct, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudentProduct), args.Error(1)
}

func (r *MockStudentProductRepo) GetUniqueProductsByStudentIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) ([]*entities.StudentProduct, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudentProduct), args.Error(1)
}

func (r *MockStudentProductRepo) Update(arg1 context.Context, arg2 database.QueryExecer, arg3 entities.StudentProduct) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudentProductRepo) UpdateStatusStudentProductAndResetStudentProductLabel(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockStudentProductRepo) UpdateWithVersionNumber(arg1 context.Context, arg2 database.QueryExecer, arg3 entities.StudentProduct, arg4 int32) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}
