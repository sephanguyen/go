// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/payment/entities"
)

type MockBillItemRepo struct {
	mock.Mock
}

func (r *MockBillItemRepo) CountBillItemByOrderID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) (int, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(int), args.Error(1)
}

func (r *MockBillItemRepo) CountBillItemByStudentIDAndLocationIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 []string) (int, error) {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Get(0).(int), args.Error(1)
}

func (r *MockBillItemRepo) Create(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.BillItem) (pgtype.Int4, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(pgtype.Int4), args.Error(1)
}

func (r *MockBillItemRepo) GetAllFirstBillItemDistinctByOrderIDAndUniqueByProductID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) ([]*entities.BillItem, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.BillItem), args.Error(1)
}

func (r *MockBillItemRepo) GetBillItemByOrderIDAndPaging(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 int64, arg5 int64) ([]*entities.BillItem, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.BillItem), args.Error(1)
}

func (r *MockBillItemRepo) GetBillItemByStudentIDAndLocationIDsPaging(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 []string, arg5 int64, arg6 int64) ([]*entities.BillItem, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5, arg6)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.BillItem), args.Error(1)
}

func (r *MockBillItemRepo) GetBillItemByStudentProductIDAndPeriodID(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string) (entities.BillItem, error) {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Get(0).(entities.BillItem), args.Error(1)
}

func (r *MockBillItemRepo) GetBillItemInfoByOrderIDAndUniqueByProductID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) ([]*entities.BillItem, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.BillItem), args.Error(1)
}

func (r *MockBillItemRepo) GetBillItemsByOrderIDAndProductID(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string) ([]entities.BillItem, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]entities.BillItem), args.Error(1)
}

func (r *MockBillItemRepo) GetBillingItemsThatNeedToBeBilled(arg1 context.Context, arg2 database.QueryExecer) ([]*entities.BillItem, error) {
	args := r.Called(arg1, arg2)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.BillItem), args.Error(1)
}

func (r *MockBillItemRepo) GetByOrderIDAndProductIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 []string) ([]entities.BillItem, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]entities.BillItem), args.Error(1)
}

func (r *MockBillItemRepo) GetExportStudentBilling(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) ([]*entities.BillItem, []string, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Get(1).([]string), args.Error(2)
	}

	if args.Get(1) == nil {
		return nil, nil, args.Error(2)
	}
	return args.Get(0).([]*entities.BillItem), args.Get(1).([]string), args.Error(2)
}

func (r *MockBillItemRepo) GetLatestBillItemByStudentProductID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) (entities.BillItem, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entities.BillItem), args.Error(1)
}

func (r *MockBillItemRepo) GetLatestBillItemByStudentProductIDForStudentBilling(arg1 context.Context, arg2 database.QueryExecer, arg3 string) (entities.BillItem, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entities.BillItem), args.Error(1)
}

func (r *MockBillItemRepo) GetPastBillItemsByStudentProductIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string, arg4 string) ([]*entities.BillItem, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.BillItem), args.Error(1)
}

func (r *MockBillItemRepo) GetPresentAndFutureBillItemsByStudentProductIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string, arg4 string) ([]*entities.BillItem, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.BillItem), args.Error(1)
}

func (r *MockBillItemRepo) GetPresentBillingByStudentProductID(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string) ([]*entities.BillItem, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.BillItem), args.Error(1)
}

func (r *MockBillItemRepo) GetRecurringBillItemsForScheduledGenerationOfNextBillItems(arg1 context.Context, arg2 database.QueryExecer) ([]*entities.BillItem, error) {
	args := r.Called(arg1, arg2)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.BillItem), args.Error(1)
}

func (r *MockBillItemRepo) GetUpcomingBillingByStudentProductID(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string) (*entities.BillItem, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.BillItem), args.Error(1)
}

func (r *MockBillItemRepo) SetNonLatestBillItemByStudentProductID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockBillItemRepo) UpdateBillingStatusByBillItemSequenceNumberAndReturnOrderID(arg1 context.Context, arg2 database.QueryExecer, arg3 int32, arg4 string) (string, error) {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Get(0).(string), args.Error(1)
}

func (r *MockBillItemRepo) UpdateReviewFlagByOrderID(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 bool) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockBillItemRepo) VoidBillItemByOrderID(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}
