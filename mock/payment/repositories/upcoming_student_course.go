// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/payment/entities"
)

type MockUpcomingStudentCourseRepo struct {
	mock.Mock
}

func (r *MockUpcomingStudentCourseRepo) GetAllUpcomingStudentCourseByUpcomingStudentPackageID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) ([]entities.StudentCourse, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]entities.StudentCourse), args.Error(1)
}

func (r *MockUpcomingStudentCourseRepo) GetUpcomingStudentCoursesByStudentPackageIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) ([]entities.UpcomingStudentCourse, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]entities.UpcomingStudentCourse), args.Error(1)
}

func (r *MockUpcomingStudentCourseRepo) GetUpcomingStudentCoursesByUpcomingStudentPackageID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) ([]entities.UpcomingStudentCourse, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]entities.UpcomingStudentCourse), args.Error(1)
}

func (r *MockUpcomingStudentCourseRepo) InsertMulti(arg1 context.Context, arg2 database.QueryExecer, arg3 []entities.UpcomingStudentCourse) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockUpcomingStudentCourseRepo) SoftDeleteByStudentPackageIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockUpcomingStudentCourseRepo) UpdateExecuteError(arg1 context.Context, arg2 database.QueryExecer, arg3 entities.UpcomingStudentCourse) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockUpcomingStudentCourseRepo) UpdateExecuteStatus(arg1 context.Context, arg2 database.QueryExecer, arg3 entities.UpcomingStudentCourse) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
