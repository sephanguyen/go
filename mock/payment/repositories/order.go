// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/payment/entities"
	"github.com/manabie-com/backend/internal/payment/repositories"
)

type MockOrderRepo struct {
	mock.Mock
}

func (r *MockOrderRepo) CountOrderByStudentIDAndLocationIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 []string) (int, error) {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Get(0).(int), args.Error(1)
}

func (r *MockOrderRepo) Create(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.Order) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockOrderRepo) GetAll(arg1 context.Context, arg2 database.QueryExecer) ([]*entities.Order, error) {
	args := r.Called(arg1, arg2)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.Order), args.Error(1)
}

func (r *MockOrderRepo) GetLatestOrderByStudentIDAndLocationID(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string) (entities.Order, error) {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Get(0).(entities.Order), args.Error(1)
}

func (r *MockOrderRepo) GetLatestOrderByStudentIDAndLocationIDAndOrderType(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string, arg5 string) (entities.Order, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Get(0).(entities.Order), args.Error(1)
}

func (r *MockOrderRepo) GetOrderByIDForUpdate(arg1 context.Context, arg2 database.QueryExecer, arg3 string) (entities.Order, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entities.Order), args.Error(1)
}

func (r *MockOrderRepo) GetOrderByStudentIDAndLocationIDForResume(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string) (string, error) {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Get(0).(string), args.Error(1)
}

func (r *MockOrderRepo) GetOrderByStudentIDAndLocationIDsPaging(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 []string, arg5 int64, arg6 int64) ([]*entities.Order, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5, arg6)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.Order), args.Error(1)
}

func (r *MockOrderRepo) GetOrderStatsByFilter(arg1 context.Context, arg2 database.QueryExecer, arg3 repositories.OrderListFilter) (entities.OrderStats, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entities.OrderStats), args.Error(1)
}

func (r *MockOrderRepo) GetOrderTypeByOrderID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) (string, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(string), args.Error(1)
}

func (r *MockOrderRepo) GetOrdersByFilter(arg1 context.Context, arg2 database.QueryExecer, arg3 repositories.OrderListFilter) ([]entities.Order, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]entities.Order), args.Error(1)
}

func (r *MockOrderRepo) UpdateIsReviewFlagByOrderID(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 bool, arg5 int32) error {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Error(0)
}

func (r *MockOrderRepo) UpdateOrderStatusByOrderID(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockOrderRepo) UpdateOrderStatusByOrderIDAndVersion(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string, arg5 int32) error {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Error(0)
}
