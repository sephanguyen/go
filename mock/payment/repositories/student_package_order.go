// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"
	"time"

	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/payment/entities"
)

type MockStudentPackageOrderRepo struct {
	mock.Mock
}

func (r *MockStudentPackageOrderRepo) Create(arg1 context.Context, arg2 database.QueryExecer, arg3 entities.StudentPackageOrder) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudentPackageOrderRepo) GetByStudentPackageIDAndOrderID(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string) (*entities.StudentPackageOrder, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.StudentPackageOrder), args.Error(1)
}

func (r *MockStudentPackageOrderRepo) GetByStudentPackageOrderID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) (*entities.StudentPackageOrder, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.StudentPackageOrder), args.Error(1)
}

func (r *MockStudentPackageOrderRepo) GetStudentPackageOrderByTimeAndStudentPackageID(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 time.Time) (*entities.StudentPackageOrder, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.StudentPackageOrder), args.Error(1)
}

func (r *MockStudentPackageOrderRepo) GetStudentPackageOrdersByStudentPackageID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) ([]*entities.StudentPackageOrder, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudentPackageOrder), args.Error(1)
}

func (r *MockStudentPackageOrderRepo) ResetCurrentPosition(arg1 context.Context, arg2 database.QueryExecer, arg3 string) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudentPackageOrderRepo) RevertByID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudentPackageOrderRepo) SetCurrentStudentPackageByID(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 bool) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockStudentPackageOrderRepo) SoftDeleteByID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudentPackageOrderRepo) Update(arg1 context.Context, arg2 database.QueryExecer, arg3 entities.StudentPackageOrder) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudentPackageOrderRepo) UpdateExecuteError(arg1 context.Context, arg2 database.QueryExecer, arg3 entities.StudentPackageOrder) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudentPackageOrderRepo) UpdateExecuteStatus(arg1 context.Context, arg2 database.QueryExecer, arg3 entities.StudentPackageOrder) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudentPackageOrderRepo) Upsert(arg1 context.Context, arg2 database.QueryExecer, arg3 entities.StudentPackageOrder) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
