// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"
	"time"

	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/payment/entities"
)

type MockUpcomingStudentPackageRepo struct {
	mock.Mock
}

func (r *MockUpcomingStudentPackageRepo) GetAllUpcomingStudentPackagesByStartDate(arg1 context.Context, arg2 database.QueryExecer, arg3 time.Time) ([]entities.UpcomingStudentPackage, []entities.StudentPackages, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Get(1).([]entities.StudentPackages), args.Error(2)
	}

	if args.Get(1) == nil {
		return nil, nil, args.Error(2)
	}
	return args.Get(0).([]entities.UpcomingStudentPackage), args.Get(1).([]entities.StudentPackages), args.Error(2)
}

func (r *MockUpcomingStudentPackageRepo) GetUpcomingStudentPackagesByStudentPackageIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) ([]entities.UpcomingStudentPackage, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]entities.UpcomingStudentPackage), args.Error(1)
}

func (r *MockUpcomingStudentPackageRepo) GetUpcomingStudentPackagesForCronjob(arg1 context.Context, arg2 database.QueryExecer) ([]entities.UpcomingStudentPackage, error) {
	args := r.Called(arg1, arg2)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]entities.UpcomingStudentPackage), args.Error(1)
}

func (r *MockUpcomingStudentPackageRepo) Insert(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.UpcomingStudentPackage) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockUpcomingStudentPackageRepo) RevertDeleteByID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockUpcomingStudentPackageRepo) SoftDeleteByID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockUpcomingStudentPackageRepo) SoftDeleteByStudentPackageIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockUpcomingStudentPackageRepo) UpdateExecuteError(arg1 context.Context, arg2 database.QueryExecer, arg3 entities.UpcomingStudentPackage) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockUpcomingStudentPackageRepo) UpdateExecuteStatus(arg1 context.Context, arg2 database.QueryExecer, arg3 entities.UpcomingStudentPackage) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockUpcomingStudentPackageRepo) Upsert(arg1 context.Context, arg2 database.QueryExecer, arg3 entities.UpcomingStudentPackage) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
