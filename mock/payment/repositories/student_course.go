// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"
	"time"

	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/payment/entities"
)

type MockStudentCourseRepo struct {
	mock.Mock
}

func (r *MockStudentCourseRepo) CancelByStudentPackageIDAndCourseID(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockStudentCourseRepo) GetByStudentIDAndCourseIDAndLocationID(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string, arg5 string) (entities.StudentCourse, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Get(0).(entities.StudentCourse), args.Error(1)
}

func (r *MockStudentCourseRepo) GetStudentCoursesByStudentPackageIDForUpdate(arg1 context.Context, arg2 database.QueryExecer, arg3 string) ([]entities.StudentCourse, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]entities.StudentCourse), args.Error(1)
}

func (r *MockStudentCourseRepo) GetStudentCoursesByStudentPackageIDsForUpdate(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) ([]entities.StudentCourse, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]entities.StudentCourse), args.Error(1)
}

func (r *MockStudentCourseRepo) SoftDeleteByStudentPackageIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string, arg4 time.Time) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockStudentCourseRepo) UpdateTimeByID(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string, arg5 time.Time) error {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Error(0)
}

func (r *MockStudentCourseRepo) UpsertStudentCourse(arg1 context.Context, arg2 database.QueryExecer, arg3 entities.StudentCourse) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudentCourseRepo) UpsertStudentCourseData(arg1 context.Context, arg2 database.QueryExecer, arg3 []entities.StudentCourse) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudentCourseRepo) VoidStudentCoursesByStudentPackageID(arg1 context.Context, arg2 database.QueryExecer, arg3 time.Time, arg4 string) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}
