// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"
	"time"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/payment/entities"
)

type MockStudentPackageRepo struct {
	mock.Mock
}

func (r *MockStudentPackageRepo) CancelByID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudentPackageRepo) GetByID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) (entities.StudentPackages, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entities.StudentPackages), args.Error(1)
}

func (r *MockStudentPackageRepo) GetStudentPackageForUpsert(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.StudentPackages) (pgtype.Text, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(pgtype.Text), args.Error(1)
}

func (r *MockStudentPackageRepo) GetStudentPackagesForCronjobByDay(arg1 context.Context, arg2 database.QueryExecer, arg3 int) ([]entities.StudentPackages, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]entities.StudentPackages), args.Error(1)
}

func (r *MockStudentPackageRepo) Insert(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.StudentPackages) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudentPackageRepo) SoftDeleteByIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string, arg4 time.Time) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockStudentPackageRepo) Update(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.StudentPackages) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudentPackageRepo) UpdateTimeByID(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 time.Time) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockStudentPackageRepo) Upsert(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.StudentPackages) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
