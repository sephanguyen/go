// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"

	pmpb "github.com/manabie-com/backend/pkg/manabuf/payment/v1"

	utils "github.com/manabie-com/backend/internal/payment/utils"
)

// IStudentProductServiceForCreateOrder is an autogenerated mock type for the IStudentProductServiceForCreateOrder type
type IStudentProductServiceForCreateOrder struct {
	mock.Mock
}

// CreateAssociatedStudentProduct provides a mock function with given fields: ctx, db, associatedProducts, mapKeyWithOrderItemData
func (_m *IStudentProductServiceForCreateOrder) CreateAssociatedStudentProduct(ctx context.Context, db database.QueryExecer, associatedProducts []*pmpb.ProductAssociation, mapKeyWithOrderItemData map[string]utils.OrderItemData) error {
	ret := _m.Called(ctx, db, associatedProducts, mapKeyWithOrderItemData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, []*pmpb.ProductAssociation, map[string]utils.OrderItemData) error); ok {
		r0 = rf(ctx, db, associatedProducts, mapKeyWithOrderItemData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAssociatedStudentProductByAssociatedStudentProductID provides a mock function with given fields: ctx, db, orderItemData
func (_m *IStudentProductServiceForCreateOrder) CreateAssociatedStudentProductByAssociatedStudentProductID(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) error {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateStudentProduct provides a mock function with given fields: ctx, db, orderItemData
func (_m *IStudentProductServiceForCreateOrder) CreateStudentProduct(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) (entities.StudentProduct, error) {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 entities.StudentProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) (entities.StudentProduct, error)); ok {
		return rf(ctx, db, orderItemData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) entities.StudentProduct); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Get(0).(entities.StudentProduct)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r1 = rf(ctx, db, orderItemData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAssociatedStudentProductByAssociatedStudentProductID provides a mock function with given fields: ctx, db, orderItemData
func (_m *IStudentProductServiceForCreateOrder) DeleteAssociatedStudentProductByAssociatedStudentProductID(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) error {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetStudentProductByStudentProductID provides a mock function with given fields: ctx, db, studentProductID
func (_m *IStudentProductServiceForCreateOrder) GetStudentProductByStudentProductID(ctx context.Context, db database.QueryExecer, studentProductID string) (entities.StudentProduct, error) {
	ret := _m.Called(ctx, db, studentProductID)

	var r0 entities.StudentProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) (entities.StudentProduct, error)); ok {
		return rf(ctx, db, studentProductID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) entities.StudentProduct); ok {
		r0 = rf(ctx, db, studentProductID)
	} else {
		r0 = ret.Get(0).(entities.StudentProduct)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, string) error); ok {
		r1 = rf(ctx, db, studentProductID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MutationStudentProductForCancelOrder provides a mock function with given fields: ctx, db, orderItemData
func (_m *IStudentProductServiceForCreateOrder) MutationStudentProductForCancelOrder(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) (entities.StudentProduct, entities.StudentProduct, error) {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 entities.StudentProduct
	var r1 entities.StudentProduct
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) (entities.StudentProduct, entities.StudentProduct, error)); ok {
		return rf(ctx, db, orderItemData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) entities.StudentProduct); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Get(0).(entities.StudentProduct)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, utils.OrderItemData) entities.StudentProduct); ok {
		r1 = rf(ctx, db, orderItemData)
	} else {
		r1 = ret.Get(1).(entities.StudentProduct)
	}

	if rf, ok := ret.Get(2).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r2 = rf(ctx, db, orderItemData)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MutationStudentProductForGraduateOrder provides a mock function with given fields: ctx, db, orderItemData
func (_m *IStudentProductServiceForCreateOrder) MutationStudentProductForGraduateOrder(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) (entities.StudentProduct, error) {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 entities.StudentProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) (entities.StudentProduct, error)); ok {
		return rf(ctx, db, orderItemData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) entities.StudentProduct); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Get(0).(entities.StudentProduct)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r1 = rf(ctx, db, orderItemData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MutationStudentProductForLOAOrder provides a mock function with given fields: ctx, db, orderItemData
func (_m *IStudentProductServiceForCreateOrder) MutationStudentProductForLOAOrder(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) (entities.StudentProduct, error) {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 entities.StudentProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) (entities.StudentProduct, error)); ok {
		return rf(ctx, db, orderItemData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) entities.StudentProduct); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Get(0).(entities.StudentProduct)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r1 = rf(ctx, db, orderItemData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MutationStudentProductForResumeOrder provides a mock function with given fields: ctx, db, orderItemData
func (_m *IStudentProductServiceForCreateOrder) MutationStudentProductForResumeOrder(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) (entities.StudentProduct, error) {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 entities.StudentProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) (entities.StudentProduct, error)); ok {
		return rf(ctx, db, orderItemData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) entities.StudentProduct); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Get(0).(entities.StudentProduct)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r1 = rf(ctx, db, orderItemData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MutationStudentProductForUpdateOrder provides a mock function with given fields: ctx, db, orderItemData
func (_m *IStudentProductServiceForCreateOrder) MutationStudentProductForUpdateOrder(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) (entities.StudentProduct, entities.StudentProduct, error) {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 entities.StudentProduct
	var r1 entities.StudentProduct
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) (entities.StudentProduct, entities.StudentProduct, error)); ok {
		return rf(ctx, db, orderItemData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) entities.StudentProduct); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Get(0).(entities.StudentProduct)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, utils.OrderItemData) entities.StudentProduct); ok {
		r1 = rf(ctx, db, orderItemData)
	} else {
		r1 = ret.Get(1).(entities.StudentProduct)
	}

	if rf, ok := ret.Get(2).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r2 = rf(ctx, db, orderItemData)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MutationStudentProductForWithdrawalOrder provides a mock function with given fields: ctx, db, orderItemData
func (_m *IStudentProductServiceForCreateOrder) MutationStudentProductForWithdrawalOrder(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) (entities.StudentProduct, error) {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 entities.StudentProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) (entities.StudentProduct, error)); ok {
		return rf(ctx, db, orderItemData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) entities.StudentProduct); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Get(0).(entities.StudentProduct)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r1 = rf(ctx, db, orderItemData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateProductSettingForCreateOrder provides a mock function with given fields: ctx, db, orderItemData
func (_m *IStudentProductServiceForCreateOrder) ValidateProductSettingForCreateOrder(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) error {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateProductSettingForLOAOrder provides a mock function with given fields: ctx, db, orderItemData
func (_m *IStudentProductServiceForCreateOrder) ValidateProductSettingForLOAOrder(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) error {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIStudentProductServiceForCreateOrder interface {
	mock.TestingT
	Cleanup(func())
}

// NewIStudentProductServiceForCreateOrder creates a new instance of IStudentProductServiceForCreateOrder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIStudentProductServiceForCreateOrder(t mockConstructorTestingTNewIStudentProductServiceForCreateOrder) *IStudentProductServiceForCreateOrder {
	mock := &IStudentProductServiceForCreateOrder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
