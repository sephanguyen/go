// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"

	pmpb "github.com/manabie-com/backend/pkg/manabuf/payment/v1"

	utils "github.com/manabie-com/backend/internal/payment/utils"
)

// IStudentProductServiceForCreateOrder is an autogenerated mock type for the IStudentProductServiceForCreateOrder type
type IStudentProductServiceForCreateOrder struct {
	mock.Mock
}

type IStudentProductServiceForCreateOrder_Expecter struct {
	mock *mock.Mock
}

func (_m *IStudentProductServiceForCreateOrder) EXPECT() *IStudentProductServiceForCreateOrder_Expecter {
	return &IStudentProductServiceForCreateOrder_Expecter{mock: &_m.Mock}
}

// CreateAssociatedStudentProduct provides a mock function with given fields: ctx, db, associatedProducts, mapKeyWithOrderItemData
func (_m *IStudentProductServiceForCreateOrder) CreateAssociatedStudentProduct(ctx context.Context, db database.QueryExecer, associatedProducts []*pmpb.ProductAssociation, mapKeyWithOrderItemData map[string]utils.OrderItemData) error {
	ret := _m.Called(ctx, db, associatedProducts, mapKeyWithOrderItemData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, []*pmpb.ProductAssociation, map[string]utils.OrderItemData) error); ok {
		r0 = rf(ctx, db, associatedProducts, mapKeyWithOrderItemData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IStudentProductServiceForCreateOrder_CreateAssociatedStudentProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAssociatedStudentProduct'
type IStudentProductServiceForCreateOrder_CreateAssociatedStudentProduct_Call struct {
	*mock.Call
}

// CreateAssociatedStudentProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - associatedProducts []*pmpb.ProductAssociation
//   - mapKeyWithOrderItemData map[string]utils.OrderItemData
func (_e *IStudentProductServiceForCreateOrder_Expecter) CreateAssociatedStudentProduct(ctx interface{}, db interface{}, associatedProducts interface{}, mapKeyWithOrderItemData interface{}) *IStudentProductServiceForCreateOrder_CreateAssociatedStudentProduct_Call {
	return &IStudentProductServiceForCreateOrder_CreateAssociatedStudentProduct_Call{Call: _e.mock.On("CreateAssociatedStudentProduct", ctx, db, associatedProducts, mapKeyWithOrderItemData)}
}

func (_c *IStudentProductServiceForCreateOrder_CreateAssociatedStudentProduct_Call) Run(run func(ctx context.Context, db database.QueryExecer, associatedProducts []*pmpb.ProductAssociation, mapKeyWithOrderItemData map[string]utils.OrderItemData)) *IStudentProductServiceForCreateOrder_CreateAssociatedStudentProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].([]*pmpb.ProductAssociation), args[3].(map[string]utils.OrderItemData))
	})
	return _c
}

func (_c *IStudentProductServiceForCreateOrder_CreateAssociatedStudentProduct_Call) Return(err error) *IStudentProductServiceForCreateOrder_CreateAssociatedStudentProduct_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IStudentProductServiceForCreateOrder_CreateAssociatedStudentProduct_Call) RunAndReturn(run func(context.Context, database.QueryExecer, []*pmpb.ProductAssociation, map[string]utils.OrderItemData) error) *IStudentProductServiceForCreateOrder_CreateAssociatedStudentProduct_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAssociatedStudentProductByAssociatedStudentProductID provides a mock function with given fields: ctx, db, orderItemData
func (_m *IStudentProductServiceForCreateOrder) CreateAssociatedStudentProductByAssociatedStudentProductID(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) error {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IStudentProductServiceForCreateOrder_CreateAssociatedStudentProductByAssociatedStudentProductID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAssociatedStudentProductByAssociatedStudentProductID'
type IStudentProductServiceForCreateOrder_CreateAssociatedStudentProductByAssociatedStudentProductID_Call struct {
	*mock.Call
}

// CreateAssociatedStudentProductByAssociatedStudentProductID is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - orderItemData utils.OrderItemData
func (_e *IStudentProductServiceForCreateOrder_Expecter) CreateAssociatedStudentProductByAssociatedStudentProductID(ctx interface{}, db interface{}, orderItemData interface{}) *IStudentProductServiceForCreateOrder_CreateAssociatedStudentProductByAssociatedStudentProductID_Call {
	return &IStudentProductServiceForCreateOrder_CreateAssociatedStudentProductByAssociatedStudentProductID_Call{Call: _e.mock.On("CreateAssociatedStudentProductByAssociatedStudentProductID", ctx, db, orderItemData)}
}

func (_c *IStudentProductServiceForCreateOrder_CreateAssociatedStudentProductByAssociatedStudentProductID_Call) Run(run func(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData)) *IStudentProductServiceForCreateOrder_CreateAssociatedStudentProductByAssociatedStudentProductID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(utils.OrderItemData))
	})
	return _c
}

func (_c *IStudentProductServiceForCreateOrder_CreateAssociatedStudentProductByAssociatedStudentProductID_Call) Return(err error) *IStudentProductServiceForCreateOrder_CreateAssociatedStudentProductByAssociatedStudentProductID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IStudentProductServiceForCreateOrder_CreateAssociatedStudentProductByAssociatedStudentProductID_Call) RunAndReturn(run func(context.Context, database.QueryExecer, utils.OrderItemData) error) *IStudentProductServiceForCreateOrder_CreateAssociatedStudentProductByAssociatedStudentProductID_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStudentProduct provides a mock function with given fields: ctx, db, orderItemData
func (_m *IStudentProductServiceForCreateOrder) CreateStudentProduct(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) (entities.StudentProduct, error) {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 entities.StudentProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) (entities.StudentProduct, error)); ok {
		return rf(ctx, db, orderItemData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) entities.StudentProduct); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Get(0).(entities.StudentProduct)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r1 = rf(ctx, db, orderItemData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IStudentProductServiceForCreateOrder_CreateStudentProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStudentProduct'
type IStudentProductServiceForCreateOrder_CreateStudentProduct_Call struct {
	*mock.Call
}

// CreateStudentProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - orderItemData utils.OrderItemData
func (_e *IStudentProductServiceForCreateOrder_Expecter) CreateStudentProduct(ctx interface{}, db interface{}, orderItemData interface{}) *IStudentProductServiceForCreateOrder_CreateStudentProduct_Call {
	return &IStudentProductServiceForCreateOrder_CreateStudentProduct_Call{Call: _e.mock.On("CreateStudentProduct", ctx, db, orderItemData)}
}

func (_c *IStudentProductServiceForCreateOrder_CreateStudentProduct_Call) Run(run func(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData)) *IStudentProductServiceForCreateOrder_CreateStudentProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(utils.OrderItemData))
	})
	return _c
}

func (_c *IStudentProductServiceForCreateOrder_CreateStudentProduct_Call) Return(studentProduct entities.StudentProduct, err error) *IStudentProductServiceForCreateOrder_CreateStudentProduct_Call {
	_c.Call.Return(studentProduct, err)
	return _c
}

func (_c *IStudentProductServiceForCreateOrder_CreateStudentProduct_Call) RunAndReturn(run func(context.Context, database.QueryExecer, utils.OrderItemData) (entities.StudentProduct, error)) *IStudentProductServiceForCreateOrder_CreateStudentProduct_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAssociatedStudentProductByAssociatedStudentProductID provides a mock function with given fields: ctx, db, orderItemData
func (_m *IStudentProductServiceForCreateOrder) DeleteAssociatedStudentProductByAssociatedStudentProductID(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) error {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IStudentProductServiceForCreateOrder_DeleteAssociatedStudentProductByAssociatedStudentProductID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAssociatedStudentProductByAssociatedStudentProductID'
type IStudentProductServiceForCreateOrder_DeleteAssociatedStudentProductByAssociatedStudentProductID_Call struct {
	*mock.Call
}

// DeleteAssociatedStudentProductByAssociatedStudentProductID is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - orderItemData utils.OrderItemData
func (_e *IStudentProductServiceForCreateOrder_Expecter) DeleteAssociatedStudentProductByAssociatedStudentProductID(ctx interface{}, db interface{}, orderItemData interface{}) *IStudentProductServiceForCreateOrder_DeleteAssociatedStudentProductByAssociatedStudentProductID_Call {
	return &IStudentProductServiceForCreateOrder_DeleteAssociatedStudentProductByAssociatedStudentProductID_Call{Call: _e.mock.On("DeleteAssociatedStudentProductByAssociatedStudentProductID", ctx, db, orderItemData)}
}

func (_c *IStudentProductServiceForCreateOrder_DeleteAssociatedStudentProductByAssociatedStudentProductID_Call) Run(run func(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData)) *IStudentProductServiceForCreateOrder_DeleteAssociatedStudentProductByAssociatedStudentProductID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(utils.OrderItemData))
	})
	return _c
}

func (_c *IStudentProductServiceForCreateOrder_DeleteAssociatedStudentProductByAssociatedStudentProductID_Call) Return(err error) *IStudentProductServiceForCreateOrder_DeleteAssociatedStudentProductByAssociatedStudentProductID_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IStudentProductServiceForCreateOrder_DeleteAssociatedStudentProductByAssociatedStudentProductID_Call) RunAndReturn(run func(context.Context, database.QueryExecer, utils.OrderItemData) error) *IStudentProductServiceForCreateOrder_DeleteAssociatedStudentProductByAssociatedStudentProductID_Call {
	_c.Call.Return(run)
	return _c
}

// MutationStudentProductForCancelOrder provides a mock function with given fields: ctx, db, orderItemData
func (_m *IStudentProductServiceForCreateOrder) MutationStudentProductForCancelOrder(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) (entities.StudentProduct, entities.StudentProduct, error) {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 entities.StudentProduct
	var r1 entities.StudentProduct
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) (entities.StudentProduct, entities.StudentProduct, error)); ok {
		return rf(ctx, db, orderItemData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) entities.StudentProduct); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Get(0).(entities.StudentProduct)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, utils.OrderItemData) entities.StudentProduct); ok {
		r1 = rf(ctx, db, orderItemData)
	} else {
		r1 = ret.Get(1).(entities.StudentProduct)
	}

	if rf, ok := ret.Get(2).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r2 = rf(ctx, db, orderItemData)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IStudentProductServiceForCreateOrder_MutationStudentProductForCancelOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MutationStudentProductForCancelOrder'
type IStudentProductServiceForCreateOrder_MutationStudentProductForCancelOrder_Call struct {
	*mock.Call
}

// MutationStudentProductForCancelOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - orderItemData utils.OrderItemData
func (_e *IStudentProductServiceForCreateOrder_Expecter) MutationStudentProductForCancelOrder(ctx interface{}, db interface{}, orderItemData interface{}) *IStudentProductServiceForCreateOrder_MutationStudentProductForCancelOrder_Call {
	return &IStudentProductServiceForCreateOrder_MutationStudentProductForCancelOrder_Call{Call: _e.mock.On("MutationStudentProductForCancelOrder", ctx, db, orderItemData)}
}

func (_c *IStudentProductServiceForCreateOrder_MutationStudentProductForCancelOrder_Call) Run(run func(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData)) *IStudentProductServiceForCreateOrder_MutationStudentProductForCancelOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(utils.OrderItemData))
	})
	return _c
}

func (_c *IStudentProductServiceForCreateOrder_MutationStudentProductForCancelOrder_Call) Return(studentProduct entities.StudentProduct, rootStudentProduct entities.StudentProduct, err error) *IStudentProductServiceForCreateOrder_MutationStudentProductForCancelOrder_Call {
	_c.Call.Return(studentProduct, rootStudentProduct, err)
	return _c
}

func (_c *IStudentProductServiceForCreateOrder_MutationStudentProductForCancelOrder_Call) RunAndReturn(run func(context.Context, database.QueryExecer, utils.OrderItemData) (entities.StudentProduct, entities.StudentProduct, error)) *IStudentProductServiceForCreateOrder_MutationStudentProductForCancelOrder_Call {
	_c.Call.Return(run)
	return _c
}

// MutationStudentProductForGraduateOrder provides a mock function with given fields: ctx, db, orderItemData
func (_m *IStudentProductServiceForCreateOrder) MutationStudentProductForGraduateOrder(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) (entities.StudentProduct, error) {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 entities.StudentProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) (entities.StudentProduct, error)); ok {
		return rf(ctx, db, orderItemData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) entities.StudentProduct); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Get(0).(entities.StudentProduct)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r1 = rf(ctx, db, orderItemData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IStudentProductServiceForCreateOrder_MutationStudentProductForGraduateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MutationStudentProductForGraduateOrder'
type IStudentProductServiceForCreateOrder_MutationStudentProductForGraduateOrder_Call struct {
	*mock.Call
}

// MutationStudentProductForGraduateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - orderItemData utils.OrderItemData
func (_e *IStudentProductServiceForCreateOrder_Expecter) MutationStudentProductForGraduateOrder(ctx interface{}, db interface{}, orderItemData interface{}) *IStudentProductServiceForCreateOrder_MutationStudentProductForGraduateOrder_Call {
	return &IStudentProductServiceForCreateOrder_MutationStudentProductForGraduateOrder_Call{Call: _e.mock.On("MutationStudentProductForGraduateOrder", ctx, db, orderItemData)}
}

func (_c *IStudentProductServiceForCreateOrder_MutationStudentProductForGraduateOrder_Call) Run(run func(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData)) *IStudentProductServiceForCreateOrder_MutationStudentProductForGraduateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(utils.OrderItemData))
	})
	return _c
}

func (_c *IStudentProductServiceForCreateOrder_MutationStudentProductForGraduateOrder_Call) Return(studentProduct entities.StudentProduct, err error) *IStudentProductServiceForCreateOrder_MutationStudentProductForGraduateOrder_Call {
	_c.Call.Return(studentProduct, err)
	return _c
}

func (_c *IStudentProductServiceForCreateOrder_MutationStudentProductForGraduateOrder_Call) RunAndReturn(run func(context.Context, database.QueryExecer, utils.OrderItemData) (entities.StudentProduct, error)) *IStudentProductServiceForCreateOrder_MutationStudentProductForGraduateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// MutationStudentProductForPauseOrder provides a mock function with given fields: ctx, db, orderItemData
func (_m *IStudentProductServiceForCreateOrder) MutationStudentProductForPauseOrder(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) (entities.StudentProduct, error) {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 entities.StudentProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) (entities.StudentProduct, error)); ok {
		return rf(ctx, db, orderItemData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) entities.StudentProduct); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Get(0).(entities.StudentProduct)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r1 = rf(ctx, db, orderItemData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IStudentProductServiceForCreateOrder_MutationStudentProductForPauseOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MutationStudentProductForLOAOrder'
type IStudentProductServiceForCreateOrder_MutationStudentProductForPauseOrder_Call struct {
	*mock.Call
}

// MutationStudentProductForPauseOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - orderItemData utils.OrderItemData
func (_e *IStudentProductServiceForCreateOrder_Expecter) MutationStudentProductForPauseOrder(ctx interface{}, db interface{}, orderItemData interface{}) *IStudentProductServiceForCreateOrder_MutationStudentProductForPauseOrder_Call {
	return &IStudentProductServiceForCreateOrder_MutationStudentProductForPauseOrder_Call{Call: _e.mock.On("MutationStudentProductForLOAOrder", ctx, db, orderItemData)}
}

func (_c *IStudentProductServiceForCreateOrder_MutationStudentProductForPauseOrder_Call) Run(run func(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData)) *IStudentProductServiceForCreateOrder_MutationStudentProductForPauseOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(utils.OrderItemData))
	})
	return _c
}

func (_c *IStudentProductServiceForCreateOrder_MutationStudentProductForPauseOrder_Call) Return(studentProduct entities.StudentProduct, err error) *IStudentProductServiceForCreateOrder_MutationStudentProductForPauseOrder_Call {
	_c.Call.Return(studentProduct, err)
	return _c
}

func (_c *IStudentProductServiceForCreateOrder_MutationStudentProductForPauseOrder_Call) RunAndReturn(run func(context.Context, database.QueryExecer, utils.OrderItemData) (entities.StudentProduct, error)) *IStudentProductServiceForCreateOrder_MutationStudentProductForPauseOrder_Call {
	_c.Call.Return(run)
	return _c
}

// MutationStudentProductForResumeOrder provides a mock function with given fields: ctx, db, orderItemData
func (_m *IStudentProductServiceForCreateOrder) MutationStudentProductForResumeOrder(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) (entities.StudentProduct, error) {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 entities.StudentProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) (entities.StudentProduct, error)); ok {
		return rf(ctx, db, orderItemData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) entities.StudentProduct); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Get(0).(entities.StudentProduct)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r1 = rf(ctx, db, orderItemData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IStudentProductServiceForCreateOrder_MutationStudentProductForResumeOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MutationStudentProductForResumeOrder'
type IStudentProductServiceForCreateOrder_MutationStudentProductForResumeOrder_Call struct {
	*mock.Call
}

// MutationStudentProductForResumeOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - orderItemData utils.OrderItemData
func (_e *IStudentProductServiceForCreateOrder_Expecter) MutationStudentProductForResumeOrder(ctx interface{}, db interface{}, orderItemData interface{}) *IStudentProductServiceForCreateOrder_MutationStudentProductForResumeOrder_Call {
	return &IStudentProductServiceForCreateOrder_MutationStudentProductForResumeOrder_Call{Call: _e.mock.On("MutationStudentProductForResumeOrder", ctx, db, orderItemData)}
}

func (_c *IStudentProductServiceForCreateOrder_MutationStudentProductForResumeOrder_Call) Run(run func(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData)) *IStudentProductServiceForCreateOrder_MutationStudentProductForResumeOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(utils.OrderItemData))
	})
	return _c
}

func (_c *IStudentProductServiceForCreateOrder_MutationStudentProductForResumeOrder_Call) Return(studentProduct entities.StudentProduct, err error) *IStudentProductServiceForCreateOrder_MutationStudentProductForResumeOrder_Call {
	_c.Call.Return(studentProduct, err)
	return _c
}

func (_c *IStudentProductServiceForCreateOrder_MutationStudentProductForResumeOrder_Call) RunAndReturn(run func(context.Context, database.QueryExecer, utils.OrderItemData) (entities.StudentProduct, error)) *IStudentProductServiceForCreateOrder_MutationStudentProductForResumeOrder_Call {
	_c.Call.Return(run)
	return _c
}

// MutationStudentProductForUpdateOrder provides a mock function with given fields: ctx, db, orderItemData
func (_m *IStudentProductServiceForCreateOrder) MutationStudentProductForUpdateOrder(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) (entities.StudentProduct, entities.StudentProduct, error) {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 entities.StudentProduct
	var r1 entities.StudentProduct
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) (entities.StudentProduct, entities.StudentProduct, error)); ok {
		return rf(ctx, db, orderItemData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) entities.StudentProduct); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Get(0).(entities.StudentProduct)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, utils.OrderItemData) entities.StudentProduct); ok {
		r1 = rf(ctx, db, orderItemData)
	} else {
		r1 = ret.Get(1).(entities.StudentProduct)
	}

	if rf, ok := ret.Get(2).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r2 = rf(ctx, db, orderItemData)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IStudentProductServiceForCreateOrder_MutationStudentProductForUpdateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MutationStudentProductForUpdateOrder'
type IStudentProductServiceForCreateOrder_MutationStudentProductForUpdateOrder_Call struct {
	*mock.Call
}

// MutationStudentProductForUpdateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - orderItemData utils.OrderItemData
func (_e *IStudentProductServiceForCreateOrder_Expecter) MutationStudentProductForUpdateOrder(ctx interface{}, db interface{}, orderItemData interface{}) *IStudentProductServiceForCreateOrder_MutationStudentProductForUpdateOrder_Call {
	return &IStudentProductServiceForCreateOrder_MutationStudentProductForUpdateOrder_Call{Call: _e.mock.On("MutationStudentProductForUpdateOrder", ctx, db, orderItemData)}
}

func (_c *IStudentProductServiceForCreateOrder_MutationStudentProductForUpdateOrder_Call) Run(run func(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData)) *IStudentProductServiceForCreateOrder_MutationStudentProductForUpdateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(utils.OrderItemData))
	})
	return _c
}

func (_c *IStudentProductServiceForCreateOrder_MutationStudentProductForUpdateOrder_Call) Return(studentProduct entities.StudentProduct, rootStudentProduct entities.StudentProduct, err error) *IStudentProductServiceForCreateOrder_MutationStudentProductForUpdateOrder_Call {
	_c.Call.Return(studentProduct, rootStudentProduct, err)
	return _c
}

func (_c *IStudentProductServiceForCreateOrder_MutationStudentProductForUpdateOrder_Call) RunAndReturn(run func(context.Context, database.QueryExecer, utils.OrderItemData) (entities.StudentProduct, entities.StudentProduct, error)) *IStudentProductServiceForCreateOrder_MutationStudentProductForUpdateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// MutationStudentProductForWithdrawalOrder provides a mock function with given fields: ctx, db, orderItemData
func (_m *IStudentProductServiceForCreateOrder) MutationStudentProductForWithdrawalOrder(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) (entities.StudentProduct, error) {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 entities.StudentProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) (entities.StudentProduct, error)); ok {
		return rf(ctx, db, orderItemData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) entities.StudentProduct); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Get(0).(entities.StudentProduct)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r1 = rf(ctx, db, orderItemData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IStudentProductServiceForCreateOrder_MutationStudentProductForWithdrawalOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MutationStudentProductForWithdrawalOrder'
type IStudentProductServiceForCreateOrder_MutationStudentProductForWithdrawalOrder_Call struct {
	*mock.Call
}

// MutationStudentProductForWithdrawalOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - orderItemData utils.OrderItemData
func (_e *IStudentProductServiceForCreateOrder_Expecter) MutationStudentProductForWithdrawalOrder(ctx interface{}, db interface{}, orderItemData interface{}) *IStudentProductServiceForCreateOrder_MutationStudentProductForWithdrawalOrder_Call {
	return &IStudentProductServiceForCreateOrder_MutationStudentProductForWithdrawalOrder_Call{Call: _e.mock.On("MutationStudentProductForWithdrawalOrder", ctx, db, orderItemData)}
}

func (_c *IStudentProductServiceForCreateOrder_MutationStudentProductForWithdrawalOrder_Call) Run(run func(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData)) *IStudentProductServiceForCreateOrder_MutationStudentProductForWithdrawalOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(utils.OrderItemData))
	})
	return _c
}

func (_c *IStudentProductServiceForCreateOrder_MutationStudentProductForWithdrawalOrder_Call) Return(studentProduct entities.StudentProduct, err error) *IStudentProductServiceForCreateOrder_MutationStudentProductForWithdrawalOrder_Call {
	_c.Call.Return(studentProduct, err)
	return _c
}

func (_c *IStudentProductServiceForCreateOrder_MutationStudentProductForWithdrawalOrder_Call) RunAndReturn(run func(context.Context, database.QueryExecer, utils.OrderItemData) (entities.StudentProduct, error)) *IStudentProductServiceForCreateOrder_MutationStudentProductForWithdrawalOrder_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateProductSettingForCreateOrder provides a mock function with given fields: ctx, db, orderItemData
func (_m *IStudentProductServiceForCreateOrder) ValidateProductSettingForCreateOrder(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) error {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IStudentProductServiceForCreateOrder_ValidateProductSettingForCreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateProductSettingForCreateOrder'
type IStudentProductServiceForCreateOrder_ValidateProductSettingForCreateOrder_Call struct {
	*mock.Call
}

// ValidateProductSettingForCreateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - orderItemData utils.OrderItemData
func (_e *IStudentProductServiceForCreateOrder_Expecter) ValidateProductSettingForCreateOrder(ctx interface{}, db interface{}, orderItemData interface{}) *IStudentProductServiceForCreateOrder_ValidateProductSettingForCreateOrder_Call {
	return &IStudentProductServiceForCreateOrder_ValidateProductSettingForCreateOrder_Call{Call: _e.mock.On("ValidateProductSettingForCreateOrder", ctx, db, orderItemData)}
}

func (_c *IStudentProductServiceForCreateOrder_ValidateProductSettingForCreateOrder_Call) Run(run func(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData)) *IStudentProductServiceForCreateOrder_ValidateProductSettingForCreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(utils.OrderItemData))
	})
	return _c
}

func (_c *IStudentProductServiceForCreateOrder_ValidateProductSettingForCreateOrder_Call) Return(err error) *IStudentProductServiceForCreateOrder_ValidateProductSettingForCreateOrder_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IStudentProductServiceForCreateOrder_ValidateProductSettingForCreateOrder_Call) RunAndReturn(run func(context.Context, database.QueryExecer, utils.OrderItemData) error) *IStudentProductServiceForCreateOrder_ValidateProductSettingForCreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateProductSettingForLOAOrder provides a mock function with given fields: ctx, db, orderItemData
func (_m *IStudentProductServiceForCreateOrder) ValidateProductSettingForLOAOrder(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) error {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IStudentProductServiceForCreateOrder_ValidateProductSettingForLOAOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateProductSettingForLOAOrder'
type IStudentProductServiceForCreateOrder_ValidateProductSettingForLOAOrder_Call struct {
	*mock.Call
}

// ValidateProductSettingForLOAOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - orderItemData utils.OrderItemData
func (_e *IStudentProductServiceForCreateOrder_Expecter) ValidateProductSettingForLOAOrder(ctx interface{}, db interface{}, orderItemData interface{}) *IStudentProductServiceForCreateOrder_ValidateProductSettingForLOAOrder_Call {
	return &IStudentProductServiceForCreateOrder_ValidateProductSettingForLOAOrder_Call{Call: _e.mock.On("ValidateProductSettingForLOAOrder", ctx, db, orderItemData)}
}

func (_c *IStudentProductServiceForCreateOrder_ValidateProductSettingForLOAOrder_Call) Run(run func(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData)) *IStudentProductServiceForCreateOrder_ValidateProductSettingForLOAOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(utils.OrderItemData))
	})
	return _c
}

func (_c *IStudentProductServiceForCreateOrder_ValidateProductSettingForLOAOrder_Call) Return(err error) *IStudentProductServiceForCreateOrder_ValidateProductSettingForLOAOrder_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IStudentProductServiceForCreateOrder_ValidateProductSettingForLOAOrder_Call) RunAndReturn(run func(context.Context, database.QueryExecer, utils.OrderItemData) error) *IStudentProductServiceForCreateOrder_ValidateProductSettingForLOAOrder_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIStudentProductServiceForCreateOrder interface {
	mock.TestingT
	Cleanup(func())
}

// NewIStudentProductServiceForCreateOrder creates a new instance of IStudentProductServiceForCreateOrder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIStudentProductServiceForCreateOrder(t mockConstructorTestingTNewIStudentProductServiceForCreateOrder) *IStudentProductServiceForCreateOrder {
	mock := &IStudentProductServiceForCreateOrder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
