// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	mock "github.com/stretchr/testify/mock"

	npb "github.com/manabie-com/backend/pkg/manabuf/nats/v1"

	utils "github.com/manabie-com/backend/internal/payment/utils"
)

// IStudentPackageForCreateOrder is an autogenerated mock type for the IStudentPackageForCreateOrder type
type IStudentPackageForCreateOrder struct {
	mock.Mock
}

type IStudentPackageForCreateOrder_Expecter struct {
	mock *mock.Mock
}

func (_m *IStudentPackageForCreateOrder) EXPECT() *IStudentPackageForCreateOrder_Expecter {
	return &IStudentPackageForCreateOrder_Expecter{mock: &_m.Mock}
}

// UpsertStudentPackageAndStudentCourse provides a mock function with given fields: ctx, db, orderItemData
func (_m *IStudentPackageForCreateOrder) UpsertStudentPackageAndStudentCourse(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) (*npb.EventStudentPackage, error) {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 *npb.EventStudentPackage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) (*npb.EventStudentPackage, error)); ok {
		return rf(ctx, db, orderItemData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) *npb.EventStudentPackage); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*npb.EventStudentPackage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r1 = rf(ctx, db, orderItemData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IStudentPackageForCreateOrder_UpsertStudentPackageAndStudentCourse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertStudentPackageAndStudentCourse'
type IStudentPackageForCreateOrder_UpsertStudentPackageAndStudentCourse_Call struct {
	*mock.Call
}

// UpsertStudentPackageAndStudentCourse is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - orderItemData utils.OrderItemData
func (_e *IStudentPackageForCreateOrder_Expecter) UpsertStudentPackageAndStudentCourse(ctx interface{}, db interface{}, orderItemData interface{}) *IStudentPackageForCreateOrder_UpsertStudentPackageAndStudentCourse_Call {
	return &IStudentPackageForCreateOrder_UpsertStudentPackageAndStudentCourse_Call{Call: _e.mock.On("MutationStudentPackageForCreateOrder", ctx, db, orderItemData)}
}

func (_c *IStudentPackageForCreateOrder_UpsertStudentPackageAndStudentCourse_Call) Run(run func(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData)) *IStudentPackageForCreateOrder_UpsertStudentPackageAndStudentCourse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(utils.OrderItemData))
	})
	return _c
}

func (_c *IStudentPackageForCreateOrder_UpsertStudentPackageAndStudentCourse_Call) Return(eventMessage *npb.EventStudentPackage, err error) *IStudentPackageForCreateOrder_UpsertStudentPackageAndStudentCourse_Call {
	_c.Call.Return(eventMessage, err)
	return _c
}

func (_c *IStudentPackageForCreateOrder_UpsertStudentPackageAndStudentCourse_Call) RunAndReturn(run func(context.Context, database.QueryExecer, utils.OrderItemData) (*npb.EventStudentPackage, error)) *IStudentPackageForCreateOrder_UpsertStudentPackageAndStudentCourse_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIStudentPackageForCreateOrder interface {
	mock.TestingT
	Cleanup(func())
}

// NewIStudentPackageForCreateOrder creates a new instance of IStudentPackageForCreateOrder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIStudentPackageForCreateOrder(t mockConstructorTestingTNewIStudentPackageForCreateOrder) *IStudentPackageForCreateOrder {
	mock := &IStudentPackageForCreateOrder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
