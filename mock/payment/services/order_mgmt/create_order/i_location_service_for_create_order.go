// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	mock "github.com/stretchr/testify/mock"
)

// ILocationServiceForCreateOrder is an autogenerated mock type for the ILocationServiceForCreateOrder type
type ILocationServiceForCreateOrder struct {
	mock.Mock
}

type ILocationServiceForCreateOrder_Expecter struct {
	mock *mock.Mock
}

func (_m *ILocationServiceForCreateOrder) EXPECT() *ILocationServiceForCreateOrder_Expecter {
	return &ILocationServiceForCreateOrder_Expecter{mock: &_m.Mock}
}

// GetLocationNameByID provides a mock function with given fields: ctx, db, locationID
func (_m *ILocationServiceForCreateOrder) GetLocationNameByID(ctx context.Context, db database.QueryExecer, locationID string) (string, error) {
	ret := _m.Called(ctx, db, locationID)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) (string, error)); ok {
		return rf(ctx, db, locationID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) string); ok {
		r0 = rf(ctx, db, locationID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, string) error); ok {
		r1 = rf(ctx, db, locationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ILocationServiceForCreateOrder_GetLocationNameByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocationNameByID'
type ILocationServiceForCreateOrder_GetLocationNameByID_Call struct {
	*mock.Call
}

// GetLocationNameByID is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - locationID string
func (_e *ILocationServiceForCreateOrder_Expecter) GetLocationNameByID(ctx interface{}, db interface{}, locationID interface{}) *ILocationServiceForCreateOrder_GetLocationNameByID_Call {
	return &ILocationServiceForCreateOrder_GetLocationNameByID_Call{Call: _e.mock.On("GetLocationNameByID", ctx, db, locationID)}
}

func (_c *ILocationServiceForCreateOrder_GetLocationNameByID_Call) Run(run func(ctx context.Context, db database.QueryExecer, locationID string)) *ILocationServiceForCreateOrder_GetLocationNameByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(string))
	})
	return _c
}

func (_c *ILocationServiceForCreateOrder_GetLocationNameByID_Call) Return(locationName string, err error) *ILocationServiceForCreateOrder_GetLocationNameByID_Call {
	_c.Call.Return(locationName, err)
	return _c
}

func (_c *ILocationServiceForCreateOrder_GetLocationNameByID_Call) RunAndReturn(run func(context.Context, database.QueryExecer, string) (string, error)) *ILocationServiceForCreateOrder_GetLocationNameByID_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewILocationServiceForCreateOrder interface {
	mock.TestingT
	Cleanup(func())
}

// NewILocationServiceForCreateOrder creates a new instance of ILocationServiceForCreateOrder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewILocationServiceForCreateOrder(t mockConstructorTestingTNewILocationServiceForCreateOrder) *ILocationServiceForCreateOrder {
	mock := &ILocationServiceForCreateOrder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
