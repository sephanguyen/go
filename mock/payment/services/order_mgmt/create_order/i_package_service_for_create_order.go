// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	mock "github.com/stretchr/testify/mock"

	utils "github.com/manabie-com/backend/internal/payment/utils"
)

// IPackageServiceForCreateOrder is an autogenerated mock type for the IPackageServiceForCreateOrder type
type IPackageServiceForCreateOrder struct {
	mock.Mock
}

type IPackageServiceForCreateOrder_Expecter struct {
	mock *mock.Mock
}

func (_m *IPackageServiceForCreateOrder) EXPECT() *IPackageServiceForCreateOrder_Expecter {
	return &IPackageServiceForCreateOrder_Expecter{mock: &_m.Mock}
}

// VerifyPackageDataAndUpsertRelateData provides a mock function with given fields: ctx, db, orderItemData
func (_m *IPackageServiceForCreateOrder) VerifyPackageDataAndUpsertRelateData(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) (utils.PackageInfo, error) {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 utils.PackageInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) (utils.PackageInfo, error)); ok {
		return rf(ctx, db, orderItemData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) utils.PackageInfo); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Get(0).(utils.PackageInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r1 = rf(ctx, db, orderItemData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IPackageServiceForCreateOrder_VerifyPackageDataAndUpsertRelateData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyPackageDataAndUpsertRelateData'
type IPackageServiceForCreateOrder_VerifyPackageDataAndUpsertRelateData_Call struct {
	*mock.Call
}

// VerifyPackageDataAndUpsertRelateData is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - orderItemData utils.OrderItemData
func (_e *IPackageServiceForCreateOrder_Expecter) VerifyPackageDataAndUpsertRelateData(ctx interface{}, db interface{}, orderItemData interface{}) *IPackageServiceForCreateOrder_VerifyPackageDataAndUpsertRelateData_Call {
	return &IPackageServiceForCreateOrder_VerifyPackageDataAndUpsertRelateData_Call{Call: _e.mock.On("VerifyPackageDataAndUpsertRelateData", ctx, db, orderItemData)}
}

func (_c *IPackageServiceForCreateOrder_VerifyPackageDataAndUpsertRelateData_Call) Run(run func(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData)) *IPackageServiceForCreateOrder_VerifyPackageDataAndUpsertRelateData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(utils.OrderItemData))
	})
	return _c
}

func (_c *IPackageServiceForCreateOrder_VerifyPackageDataAndUpsertRelateData_Call) Return(packageInfo utils.PackageInfo, err error) *IPackageServiceForCreateOrder_VerifyPackageDataAndUpsertRelateData_Call {
	_c.Call.Return(packageInfo, err)
	return _c
}

func (_c *IPackageServiceForCreateOrder_VerifyPackageDataAndUpsertRelateData_Call) RunAndReturn(run func(context.Context, database.QueryExecer, utils.OrderItemData) (utils.PackageInfo, error)) *IPackageServiceForCreateOrder_VerifyPackageDataAndUpsertRelateData_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIPackageServiceForCreateOrder interface {
	mock.TestingT
	Cleanup(func())
}

// NewIPackageServiceForCreateOrder creates a new instance of IPackageServiceForCreateOrder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIPackageServiceForCreateOrder(t mockConstructorTestingTNewIPackageServiceForCreateOrder) *IPackageServiceForCreateOrder {
	mock := &IPackageServiceForCreateOrder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
