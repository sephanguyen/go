// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"

	pmpb "github.com/manabie-com/backend/pkg/manabuf/payment/v1"

	utils "github.com/manabie-com/backend/internal/payment/utils"
)

// IProductServiceForCreateOrder is an autogenerated mock type for the IProductServiceForCreateOrder type
type IProductServiceForCreateOrder struct {
	mock.Mock
}

type IProductServiceForCreateOrder_Expecter struct {
	mock *mock.Mock
}

func (_m *IProductServiceForCreateOrder) EXPECT() *IProductServiceForCreateOrder_Expecter {
	return &IProductServiceForCreateOrder_Expecter{mock: &_m.Mock}
}

// VerifiedProductReturnProductInfoAndBillingType provides a mock function with given fields: ctx, db, orderItemData
func (_m *IProductServiceForCreateOrder) VerifiedProductReturnProductInfoAndBillingType(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) (entities.Product, bool, bool, pmpb.ProductType, entities.ProductSetting, error) {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 entities.Product
	var r1 bool
	var r2 bool
	var r3 pmpb.ProductType
	var r4 entities.ProductSetting
	var r5 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) (entities.Product, bool, bool, pmpb.ProductType, entities.ProductSetting, error)); ok {
		return rf(ctx, db, orderItemData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) entities.Product); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Get(0).(entities.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, utils.OrderItemData) bool); ok {
		r1 = rf(ctx, db, orderItemData)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, database.QueryExecer, utils.OrderItemData) bool); ok {
		r2 = rf(ctx, db, orderItemData)
	} else {
		r2 = ret.Get(2).(bool)
	}

	if rf, ok := ret.Get(3).(func(context.Context, database.QueryExecer, utils.OrderItemData) pmpb.ProductType); ok {
		r3 = rf(ctx, db, orderItemData)
	} else {
		r3 = ret.Get(3).(pmpb.ProductType)
	}

	if rf, ok := ret.Get(4).(func(context.Context, database.QueryExecer, utils.OrderItemData) entities.ProductSetting); ok {
		r4 = rf(ctx, db, orderItemData)
	} else {
		r4 = ret.Get(4).(entities.ProductSetting)
	}

	if rf, ok := ret.Get(5).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r5 = rf(ctx, db, orderItemData)
	} else {
		r5 = ret.Error(5)
	}

	return r0, r1, r2, r3, r4, r5
}

// IProductServiceForCreateOrder_VerifiedProductReturnProductInfoAndBillingType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifiedProductReturnProductInfoAndBillingType'
type IProductServiceForCreateOrder_VerifiedProductReturnProductInfoAndBillingType_Call struct {
	*mock.Call
}

// VerifiedProductReturnProductInfoAndBillingType is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - orderItemData utils.OrderItemData
func (_e *IProductServiceForCreateOrder_Expecter) VerifiedProductReturnProductInfoAndBillingType(ctx interface{}, db interface{}, orderItemData interface{}) *IProductServiceForCreateOrder_VerifiedProductReturnProductInfoAndBillingType_Call {
	return &IProductServiceForCreateOrder_VerifiedProductReturnProductInfoAndBillingType_Call{Call: _e.mock.On("VerifiedProductReturnProductInfoAndBillingType", ctx, db, orderItemData)}
}

func (_c *IProductServiceForCreateOrder_VerifiedProductReturnProductInfoAndBillingType_Call) Run(run func(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData)) *IProductServiceForCreateOrder_VerifiedProductReturnProductInfoAndBillingType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(utils.OrderItemData))
	})
	return _c
}

func (_c *IProductServiceForCreateOrder_VerifiedProductReturnProductInfoAndBillingType_Call) Return(productInfo entities.Product, isOneTimeProduct bool, isDisableProRatingFlag bool, productType pmpb.ProductType, productSetting entities.ProductSetting, err error) *IProductServiceForCreateOrder_VerifiedProductReturnProductInfoAndBillingType_Call {
	_c.Call.Return(productInfo, isOneTimeProduct, isDisableProRatingFlag, productType, productSetting, err)
	return _c
}

func (_c *IProductServiceForCreateOrder_VerifiedProductReturnProductInfoAndBillingType_Call) RunAndReturn(run func(context.Context, database.QueryExecer, utils.OrderItemData) (entities.Product, bool, bool, pmpb.ProductType, entities.ProductSetting, error)) *IProductServiceForCreateOrder_VerifiedProductReturnProductInfoAndBillingType_Call {
	_c.Call.Return(run)
	return _c
}

// VerifiedProductWithStudentInfoReturnProductInfoAndBillingType provides a mock function with given fields: ctx, db, orderItemData
func (_m *IProductServiceForCreateOrder) VerifiedProductWithStudentInfoReturnProductInfoAndBillingType(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) (entities.Product, bool, bool, pmpb.ProductType, string, entities.ProductSetting, error) {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 entities.Product
	var r1 bool
	var r2 bool
	var r3 pmpb.ProductType
	var r4 string
	var r5 entities.ProductSetting
	var r6 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) (entities.Product, bool, bool, pmpb.ProductType, string, entities.ProductSetting, error)); ok {
		return rf(ctx, db, orderItemData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) entities.Product); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Get(0).(entities.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, utils.OrderItemData) bool); ok {
		r1 = rf(ctx, db, orderItemData)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, database.QueryExecer, utils.OrderItemData) bool); ok {
		r2 = rf(ctx, db, orderItemData)
	} else {
		r2 = ret.Get(2).(bool)
	}

	if rf, ok := ret.Get(3).(func(context.Context, database.QueryExecer, utils.OrderItemData) pmpb.ProductType); ok {
		r3 = rf(ctx, db, orderItemData)
	} else {
		r3 = ret.Get(3).(pmpb.ProductType)
	}

	if rf, ok := ret.Get(4).(func(context.Context, database.QueryExecer, utils.OrderItemData) string); ok {
		r4 = rf(ctx, db, orderItemData)
	} else {
		r4 = ret.Get(4).(string)
	}

	if rf, ok := ret.Get(5).(func(context.Context, database.QueryExecer, utils.OrderItemData) entities.ProductSetting); ok {
		r5 = rf(ctx, db, orderItemData)
	} else {
		r5 = ret.Get(5).(entities.ProductSetting)
	}

	if rf, ok := ret.Get(6).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r6 = rf(ctx, db, orderItemData)
	} else {
		r6 = ret.Error(6)
	}

	return r0, r1, r2, r3, r4, r5, r6
}

// IProductServiceForCreateOrder_VerifiedProductWithStudentInfoReturnProductInfoAndBillingType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifiedProductWithStudentInfoReturnProductInfoAndBillingType'
type IProductServiceForCreateOrder_VerifiedProductWithStudentInfoReturnProductInfoAndBillingType_Call struct {
	*mock.Call
}

// VerifiedProductWithStudentInfoReturnProductInfoAndBillingType is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - orderItemData utils.OrderItemData
func (_e *IProductServiceForCreateOrder_Expecter) VerifiedProductWithStudentInfoReturnProductInfoAndBillingType(ctx interface{}, db interface{}, orderItemData interface{}) *IProductServiceForCreateOrder_VerifiedProductWithStudentInfoReturnProductInfoAndBillingType_Call {
	return &IProductServiceForCreateOrder_VerifiedProductWithStudentInfoReturnProductInfoAndBillingType_Call{Call: _e.mock.On("VerifiedProductWithStudentInfoReturnProductInfoAndBillingType", ctx, db, orderItemData)}
}

func (_c *IProductServiceForCreateOrder_VerifiedProductWithStudentInfoReturnProductInfoAndBillingType_Call) Run(run func(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData)) *IProductServiceForCreateOrder_VerifiedProductWithStudentInfoReturnProductInfoAndBillingType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(utils.OrderItemData))
	})
	return _c
}

func (_c *IProductServiceForCreateOrder_VerifiedProductWithStudentInfoReturnProductInfoAndBillingType_Call) Return(productInfo entities.Product, isOneTimeProduct bool, isDisableProRatingFlag bool, productType pmpb.ProductType, gradeName string, productSetting entities.ProductSetting, err error) *IProductServiceForCreateOrder_VerifiedProductWithStudentInfoReturnProductInfoAndBillingType_Call {
	_c.Call.Return(productInfo, isOneTimeProduct, isDisableProRatingFlag, productType, gradeName, productSetting, err)
	return _c
}

func (_c *IProductServiceForCreateOrder_VerifiedProductWithStudentInfoReturnProductInfoAndBillingType_Call) RunAndReturn(run func(context.Context, database.QueryExecer, utils.OrderItemData) (entities.Product, bool, bool, pmpb.ProductType, string, entities.ProductSetting, error)) *IProductServiceForCreateOrder_VerifiedProductWithStudentInfoReturnProductInfoAndBillingType_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIProductServiceForCreateOrder interface {
	mock.TestingT
	Cleanup(func())
}

// NewIProductServiceForCreateOrder creates a new instance of IProductServiceForCreateOrder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIProductServiceForCreateOrder(t mockConstructorTestingTNewIProductServiceForCreateOrder) *IProductServiceForCreateOrder {
	mock := &IProductServiceForCreateOrder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
