// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	mock "github.com/stretchr/testify/mock"

	utils "github.com/manabie-com/backend/internal/payment/utils"
)

// ISubscriptionServiceForCreateOrder is an autogenerated mock type for the ISubscriptionServiceForCreateOrder type
type ISubscriptionServiceForCreateOrder struct {
	mock.Mock
}

type ISubscriptionServiceForCreateOrder_Expecter struct {
	mock *mock.Mock
}

func (_m *ISubscriptionServiceForCreateOrder) EXPECT() *ISubscriptionServiceForCreateOrder_Expecter {
	return &ISubscriptionServiceForCreateOrder_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function with given fields: ctx, db, message
func (_m *ISubscriptionServiceForCreateOrder) Publish(ctx context.Context, db database.QueryExecer, message utils.MessageSyncData) error {
	ret := _m.Called(ctx, db, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.MessageSyncData) error); ok {
		r0 = rf(ctx, db, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ISubscriptionServiceForCreateOrder_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type ISubscriptionServiceForCreateOrder_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - message utils.MessageSyncData
func (_e *ISubscriptionServiceForCreateOrder_Expecter) Publish(ctx interface{}, db interface{}, message interface{}) *ISubscriptionServiceForCreateOrder_Publish_Call {
	return &ISubscriptionServiceForCreateOrder_Publish_Call{Call: _e.mock.On("Publish", ctx, db, message)}
}

func (_c *ISubscriptionServiceForCreateOrder_Publish_Call) Run(run func(ctx context.Context, db database.QueryExecer, message utils.MessageSyncData)) *ISubscriptionServiceForCreateOrder_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(utils.MessageSyncData))
	})
	return _c
}

func (_c *ISubscriptionServiceForCreateOrder_Publish_Call) Return(err error) *ISubscriptionServiceForCreateOrder_Publish_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ISubscriptionServiceForCreateOrder_Publish_Call) RunAndReturn(run func(context.Context, database.QueryExecer, utils.MessageSyncData) error) *ISubscriptionServiceForCreateOrder_Publish_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewISubscriptionServiceForCreateOrder interface {
	mock.TestingT
	Cleanup(func())
}

// NewISubscriptionServiceForCreateOrder creates a new instance of ISubscriptionServiceForCreateOrder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewISubscriptionServiceForCreateOrder(t mockConstructorTestingTNewISubscriptionServiceForCreateOrder) *ISubscriptionServiceForCreateOrder {
	mock := &ISubscriptionServiceForCreateOrder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
