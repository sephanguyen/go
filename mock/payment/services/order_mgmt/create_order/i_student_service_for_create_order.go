// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"

	utils "github.com/manabie-com/backend/internal/payment/utils"
)

// IStudentServiceForCreateOrder is an autogenerated mock type for the IStudentServiceForCreateOrder type
type IStudentServiceForCreateOrder struct {
	mock.Mock
}

type IStudentServiceForCreateOrder_Expecter struct {
	mock *mock.Mock
}

func (_m *IStudentServiceForCreateOrder) EXPECT() *IStudentServiceForCreateOrder_Expecter {
	return &IStudentServiceForCreateOrder_Expecter{mock: &_m.Mock}
}

// GetStudentAndNameByID provides a mock function with given fields: ctx, db, studentID
func (_m *IStudentServiceForCreateOrder) GetStudentAndNameByID(ctx context.Context, db database.QueryExecer, studentID string) (entities.Student, string, error) {
	ret := _m.Called(ctx, db, studentID)

	var r0 entities.Student
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) (entities.Student, string, error)); ok {
		return rf(ctx, db, studentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) entities.Student); ok {
		r0 = rf(ctx, db, studentID)
	} else {
		r0 = ret.Get(0).(entities.Student)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, string) string); ok {
		r1 = rf(ctx, db, studentID)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, database.QueryExecer, string) error); ok {
		r2 = rf(ctx, db, studentID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IStudentServiceForCreateOrder_GetStudentAndNameByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStudentAndNameByID'
type IStudentServiceForCreateOrder_GetStudentAndNameByID_Call struct {
	*mock.Call
}

// GetStudentAndNameByID is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - studentID string
func (_e *IStudentServiceForCreateOrder_Expecter) GetStudentAndNameByID(ctx interface{}, db interface{}, studentID interface{}) *IStudentServiceForCreateOrder_GetStudentAndNameByID_Call {
	return &IStudentServiceForCreateOrder_GetStudentAndNameByID_Call{Call: _e.mock.On("GetStudentAndNameByID", ctx, db, studentID)}
}

func (_c *IStudentServiceForCreateOrder_GetStudentAndNameByID_Call) Run(run func(ctx context.Context, db database.QueryExecer, studentID string)) *IStudentServiceForCreateOrder_GetStudentAndNameByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(string))
	})
	return _c
}

func (_c *IStudentServiceForCreateOrder_GetStudentAndNameByID_Call) Return(student entities.Student, studentName string, err error) *IStudentServiceForCreateOrder_GetStudentAndNameByID_Call {
	_c.Call.Return(student, studentName, err)
	return _c
}

func (_c *IStudentServiceForCreateOrder_GetStudentAndNameByID_Call) RunAndReturn(run func(context.Context, database.QueryExecer, string) (entities.Student, string, error)) *IStudentServiceForCreateOrder_GetStudentAndNameByID_Call {
	_c.Call.Return(run)
	return _c
}

// IsEnrolledInLocation provides a mock function with given fields: ctx, db, orderItemData
func (_m *IStudentServiceForCreateOrder) IsEnrolledInLocation(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) (bool, error) {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) (bool, error)); ok {
		return rf(ctx, db, orderItemData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) bool); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r1 = rf(ctx, db, orderItemData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IStudentServiceForCreateOrder_IsEnrolledInLocation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEnrolledInLocation'
type IStudentServiceForCreateOrder_IsEnrolledInLocation_Call struct {
	*mock.Call
}

// IsEnrolledInLocation is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - orderItemData utils.OrderItemData
func (_e *IStudentServiceForCreateOrder_Expecter) IsEnrolledInLocation(ctx interface{}, db interface{}, orderItemData interface{}) *IStudentServiceForCreateOrder_IsEnrolledInLocation_Call {
	return &IStudentServiceForCreateOrder_IsEnrolledInLocation_Call{Call: _e.mock.On("IsEnrolledInLocation", ctx, db, orderItemData)}
}

func (_c *IStudentServiceForCreateOrder_IsEnrolledInLocation_Call) Run(run func(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData)) *IStudentServiceForCreateOrder_IsEnrolledInLocation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(utils.OrderItemData))
	})
	return _c
}

func (_c *IStudentServiceForCreateOrder_IsEnrolledInLocation_Call) Return(isEnrolledInLocation bool, err error) *IStudentServiceForCreateOrder_IsEnrolledInLocation_Call {
	_c.Call.Return(isEnrolledInLocation, err)
	return _c
}

func (_c *IStudentServiceForCreateOrder_IsEnrolledInLocation_Call) RunAndReturn(run func(context.Context, database.QueryExecer, utils.OrderItemData) (bool, error)) *IStudentServiceForCreateOrder_IsEnrolledInLocation_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateStudentStatusForEnrollment provides a mock function with given fields: ctx, db, orderItemData
func (_m *IStudentServiceForCreateOrder) ValidateStudentStatusForEnrollment(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) error {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IStudentServiceForCreateOrder_ValidateStudentStatusForEnrollment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateStudentStatusForEnrollment'
type IStudentServiceForCreateOrder_ValidateStudentStatusForEnrollment_Call struct {
	*mock.Call
}

// ValidateStudentStatusForEnrollment is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - orderItemData utils.OrderItemData
func (_e *IStudentServiceForCreateOrder_Expecter) ValidateStudentStatusForEnrollment(ctx interface{}, db interface{}, orderItemData interface{}) *IStudentServiceForCreateOrder_ValidateStudentStatusForEnrollment_Call {
	return &IStudentServiceForCreateOrder_ValidateStudentStatusForEnrollment_Call{Call: _e.mock.On("ValidateStudentStatusForEnrollment", ctx, db, orderItemData)}
}

func (_c *IStudentServiceForCreateOrder_ValidateStudentStatusForEnrollment_Call) Run(run func(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData)) *IStudentServiceForCreateOrder_ValidateStudentStatusForEnrollment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(utils.OrderItemData))
	})
	return _c
}

func (_c *IStudentServiceForCreateOrder_ValidateStudentStatusForEnrollment_Call) Return(err error) *IStudentServiceForCreateOrder_ValidateStudentStatusForEnrollment_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IStudentServiceForCreateOrder_ValidateStudentStatusForEnrollment_Call) RunAndReturn(run func(context.Context, database.QueryExecer, utils.OrderItemData) error) *IStudentServiceForCreateOrder_ValidateStudentStatusForEnrollment_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIStudentServiceForCreateOrder interface {
	mock.TestingT
	Cleanup(func())
}

// NewIStudentServiceForCreateOrder creates a new instance of IStudentServiceForCreateOrder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIStudentServiceForCreateOrder(t mockConstructorTestingTNewIStudentServiceForCreateOrder) *IStudentServiceForCreateOrder {
	mock := &IStudentServiceForCreateOrder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
