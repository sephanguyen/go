// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"

	pmpb "github.com/manabie-com/backend/pkg/manabuf/payment/v1"
)

// IOrderServiceForCreateOrder is an autogenerated mock type for the IOrderServiceForCreateOrder type
type IOrderServiceForCreateOrder struct {
	mock.Mock
}

type IOrderServiceForCreateOrder_Expecter struct {
	mock *mock.Mock
}

func (_m *IOrderServiceForCreateOrder) EXPECT() *IOrderServiceForCreateOrder_Expecter {
	return &IOrderServiceForCreateOrder_Expecter{mock: &_m.Mock}
}

// CreateOrder provides a mock function with given fields: ctx, db, req, studentName, orderStatus
func (_m *IOrderServiceForCreateOrder) CreateOrder(ctx context.Context, db database.QueryExecer, req *pmpb.CreateOrderRequest, studentName string, orderStatus pmpb.OrderStatus) (entities.Order, error) {
	ret := _m.Called(ctx, db, req, studentName, orderStatus)

	var r0 entities.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, *pmpb.CreateOrderRequest, string, pmpb.OrderStatus) (entities.Order, error)); ok {
		return rf(ctx, db, req, studentName, orderStatus)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, *pmpb.CreateOrderRequest, string, pmpb.OrderStatus) entities.Order); ok {
		r0 = rf(ctx, db, req, studentName, orderStatus)
	} else {
		r0 = ret.Get(0).(entities.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, *pmpb.CreateOrderRequest, string, pmpb.OrderStatus) error); ok {
		r1 = rf(ctx, db, req, studentName, orderStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOrderServiceForCreateOrder_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type IOrderServiceForCreateOrder_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - req *pmpb.CreateOrderRequest
//   - studentName string
//   - orderStatus pmpb.OrderStatus
func (_e *IOrderServiceForCreateOrder_Expecter) CreateOrder(ctx interface{}, db interface{}, req interface{}, studentName interface{}, orderStatus interface{}) *IOrderServiceForCreateOrder_CreateOrder_Call {
	return &IOrderServiceForCreateOrder_CreateOrder_Call{Call: _e.mock.On("CreateOrder", ctx, db, req, studentName, orderStatus)}
}

func (_c *IOrderServiceForCreateOrder_CreateOrder_Call) Run(run func(ctx context.Context, db database.QueryExecer, req *pmpb.CreateOrderRequest, studentName string, orderStatus pmpb.OrderStatus)) *IOrderServiceForCreateOrder_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(*pmpb.CreateOrderRequest), args[3].(string), args[4].(pmpb.OrderStatus))
	})
	return _c
}

func (_c *IOrderServiceForCreateOrder_CreateOrder_Call) Return(order entities.Order, err error) *IOrderServiceForCreateOrder_CreateOrder_Call {
	_c.Call.Return(order, err)
	return _c
}

func (_c *IOrderServiceForCreateOrder_CreateOrder_Call) RunAndReturn(run func(context.Context, database.QueryExecer, *pmpb.CreateOrderRequest, string, pmpb.OrderStatus) (entities.Order, error)) *IOrderServiceForCreateOrder_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIOrderServiceForCreateOrder interface {
	mock.TestingT
	Cleanup(func())
}

// NewIOrderServiceForCreateOrder creates a new instance of IOrderServiceForCreateOrder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIOrderServiceForCreateOrder(t mockConstructorTestingTNewIOrderServiceForCreateOrder) *IOrderServiceForCreateOrder {
	mock := &IOrderServiceForCreateOrder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
