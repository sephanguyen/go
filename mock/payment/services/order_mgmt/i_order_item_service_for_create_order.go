// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"

	utils "github.com/manabie-com/backend/internal/payment/utils"
)

// IOrderItemServiceForCreateOrder is an autogenerated mock type for the IOrderItemServiceForCreateOrder type
type IOrderItemServiceForCreateOrder struct {
	mock.Mock
}

// CreateOrderItem provides a mock function with given fields: ctx, db, orderItemData
func (_m *IOrderItemServiceForCreateOrder) CreateOrderItem(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) (entities.OrderItem, error) {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 entities.OrderItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) (entities.OrderItem, error)); ok {
		return rf(ctx, db, orderItemData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) entities.OrderItem); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Get(0).(entities.OrderItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r1 = rf(ctx, db, orderItemData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIOrderItemServiceForCreateOrder interface {
	mock.TestingT
	Cleanup(func())
}

// NewIOrderItemServiceForCreateOrder creates a new instance of IOrderItemServiceForCreateOrder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIOrderItemServiceForCreateOrder(t mockConstructorTestingTNewIOrderItemServiceForCreateOrder) *IOrderItemServiceForCreateOrder {
	mock := &IOrderItemServiceForCreateOrder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
