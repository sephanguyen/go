// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"
)

// IOrderServiceForVoidOrder is an autogenerated mock type for the IOrderServiceForVoidOrder type
type IOrderServiceForVoidOrder struct {
	mock.Mock
}

// GetOrderByID provides a mock function with given fields: ctx, db, orderID
func (_m *IOrderServiceForVoidOrder) GetOrderByID(ctx context.Context, db database.QueryExecer, orderID string) (entities.Order, error) {
	ret := _m.Called(ctx, db, orderID)

	var r0 entities.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) (entities.Order, error)); ok {
		return rf(ctx, db, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) entities.Order); ok {
		r0 = rf(ctx, db, orderID)
	} else {
		r0 = ret.Get(0).(entities.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, string) error); ok {
		r1 = rf(ctx, db, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VoidOrderReturnOrderAndStudentProductIDs provides a mock function with given fields: ctx, db, orderID, orderVersionNumber
func (_m *IOrderServiceForVoidOrder) VoidOrderReturnOrderAndStudentProductIDs(ctx context.Context, db database.QueryExecer, orderID string, orderVersionNumber int32) (entities.Order, []string, error) {
	ret := _m.Called(ctx, db, orderID, orderVersionNumber)

	var r0 entities.Order
	var r1 []string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, int32) (entities.Order, []string, error)); ok {
		return rf(ctx, db, orderID, orderVersionNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, int32) entities.Order); ok {
		r0 = rf(ctx, db, orderID, orderVersionNumber)
	} else {
		r0 = ret.Get(0).(entities.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, string, int32) []string); ok {
		r1 = rf(ctx, db, orderID, orderVersionNumber)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, database.QueryExecer, string, int32) error); ok {
		r2 = rf(ctx, db, orderID, orderVersionNumber)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewIOrderServiceForVoidOrder interface {
	mock.TestingT
	Cleanup(func())
}

// NewIOrderServiceForVoidOrder creates a new instance of IOrderServiceForVoidOrder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIOrderServiceForVoidOrder(t mockConstructorTestingTNewIOrderServiceForVoidOrder) *IOrderServiceForVoidOrder {
	mock := &IOrderServiceForVoidOrder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
