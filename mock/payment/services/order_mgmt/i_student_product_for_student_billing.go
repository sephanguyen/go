// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"
)

// IStudentProductForStudentBilling is an autogenerated mock type for the IStudentProductForStudentBilling type
type IStudentProductForStudentBilling struct {
	mock.Mock
}

// GetStudentAssociatedProductByStudentProductID provides a mock function with given fields: ctx, db, studentProductID, from, limit
func (_m *IStudentProductForStudentBilling) GetStudentAssociatedProductByStudentProductID(ctx context.Context, db database.Ext, studentProductID string, from int64, limit int64) ([]string, []*entities.StudentProduct, int, error) {
	ret := _m.Called(ctx, db, studentProductID, from, limit)

	var r0 []string
	var r1 []*entities.StudentProduct
	var r2 int
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string, int64, int64) ([]string, []*entities.StudentProduct, int, error)); ok {
		return rf(ctx, db, studentProductID, from, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string, int64, int64) []string); ok {
		r0 = rf(ctx, db, studentProductID, from, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.Ext, string, int64, int64) []*entities.StudentProduct); ok {
		r1 = rf(ctx, db, studentProductID, from, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*entities.StudentProduct)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, database.Ext, string, int64, int64) int); ok {
		r2 = rf(ctx, db, studentProductID, from, limit)
	} else {
		r2 = ret.Get(2).(int)
	}

	if rf, ok := ret.Get(3).(func(context.Context, database.Ext, string, int64, int64) error); ok {
		r3 = rf(ctx, db, studentProductID, from, limit)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetStudentProductByStudentIDAndLocationIDs provides a mock function with given fields: ctx, db, studentID, locations, from, limit
func (_m *IStudentProductForStudentBilling) GetStudentProductByStudentIDAndLocationIDs(ctx context.Context, db database.Ext, studentID string, locations []string, from int64, limit int64) ([]string, []*entities.StudentProduct, int, error) {
	ret := _m.Called(ctx, db, studentID, locations, from, limit)

	var r0 []string
	var r1 []*entities.StudentProduct
	var r2 int
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string, []string, int64, int64) ([]string, []*entities.StudentProduct, int, error)); ok {
		return rf(ctx, db, studentID, locations, from, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string, []string, int64, int64) []string); ok {
		r0 = rf(ctx, db, studentID, locations, from, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.Ext, string, []string, int64, int64) []*entities.StudentProduct); ok {
		r1 = rf(ctx, db, studentID, locations, from, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*entities.StudentProduct)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, database.Ext, string, []string, int64, int64) int); ok {
		r2 = rf(ctx, db, studentID, locations, from, limit)
	} else {
		r2 = ret.Get(2).(int)
	}

	if rf, ok := ret.Get(3).(func(context.Context, database.Ext, string, []string, int64, int64) error); ok {
		r3 = rf(ctx, db, studentID, locations, from, limit)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

type mockConstructorTestingTNewIStudentProductForStudentBilling interface {
	mock.TestingT
	Cleanup(func())
}

// NewIStudentProductForStudentBilling creates a new instance of IStudentProductForStudentBilling. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIStudentProductForStudentBilling(t mockConstructorTestingTNewIStudentProductForStudentBilling) *IStudentProductForStudentBilling {
	mock := &IStudentProductForStudentBilling{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
