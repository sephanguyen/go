// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// IStudentProductServiceForUniqueProduct is an autogenerated mock type for the IStudentProductServiceForUniqueProduct type
type IStudentProductServiceForUniqueProduct struct {
	mock.Mock
}

type IStudentProductServiceForUniqueProduct_Expecter struct {
	mock *mock.Mock
}

func (_m *IStudentProductServiceForUniqueProduct) EXPECT() *IStudentProductServiceForUniqueProduct_Expecter {
	return &IStudentProductServiceForUniqueProduct_Expecter{mock: &_m.Mock}
}

// EndDateOfUniqueRecurringProduct provides a mock function with given fields: ctx, db, productID, endTime
func (_m *IStudentProductServiceForUniqueProduct) EndDateOfUniqueRecurringProduct(ctx context.Context, db database.QueryExecer, productID string, endTime time.Time) (time.Time, error) {
	ret := _m.Called(ctx, db, productID, endTime)

	var r0 time.Time
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, time.Time) (time.Time, error)); ok {
		return rf(ctx, db, productID, endTime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, time.Time) time.Time); ok {
		r0 = rf(ctx, db, productID, endTime)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, string, time.Time) error); ok {
		r1 = rf(ctx, db, productID, endTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IStudentProductServiceForUniqueProduct_EndDateOfUniqueRecurringProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EndDateOfUniqueRecurringProduct'
type IStudentProductServiceForUniqueProduct_EndDateOfUniqueRecurringProduct_Call struct {
	*mock.Call
}

// EndDateOfUniqueRecurringProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - productID string
//   - endTime time.Time
func (_e *IStudentProductServiceForUniqueProduct_Expecter) EndDateOfUniqueRecurringProduct(ctx interface{}, db interface{}, productID interface{}, endTime interface{}) *IStudentProductServiceForUniqueProduct_EndDateOfUniqueRecurringProduct_Call {
	return &IStudentProductServiceForUniqueProduct_EndDateOfUniqueRecurringProduct_Call{Call: _e.mock.On("EndDateOfUniqueRecurringProduct", ctx, db, productID, endTime)}
}

func (_c *IStudentProductServiceForUniqueProduct_EndDateOfUniqueRecurringProduct_Call) Run(run func(ctx context.Context, db database.QueryExecer, productID string, endTime time.Time)) *IStudentProductServiceForUniqueProduct_EndDateOfUniqueRecurringProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(string), args[3].(time.Time))
	})
	return _c
}

func (_c *IStudentProductServiceForUniqueProduct_EndDateOfUniqueRecurringProduct_Call) Return(endTimeOfUniqueProduct time.Time, err error) *IStudentProductServiceForUniqueProduct_EndDateOfUniqueRecurringProduct_Call {
	_c.Call.Return(endTimeOfUniqueProduct, err)
	return _c
}

func (_c *IStudentProductServiceForUniqueProduct_EndDateOfUniqueRecurringProduct_Call) RunAndReturn(run func(context.Context, database.QueryExecer, string, time.Time) (time.Time, error)) *IStudentProductServiceForUniqueProduct_EndDateOfUniqueRecurringProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetUniqueProductsByStudentID provides a mock function with given fields: ctx, db, studentID
func (_m *IStudentProductServiceForUniqueProduct) GetUniqueProductsByStudentID(ctx context.Context, db database.QueryExecer, studentID string) ([]*entities.StudentProduct, error) {
	ret := _m.Called(ctx, db, studentID)

	var r0 []*entities.StudentProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) ([]*entities.StudentProduct, error)); ok {
		return rf(ctx, db, studentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) []*entities.StudentProduct); ok {
		r0 = rf(ctx, db, studentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.StudentProduct)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, string) error); ok {
		r1 = rf(ctx, db, studentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IStudentProductServiceForUniqueProduct_GetUniqueProductsByStudentID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUniqueProductsByStudentID'
type IStudentProductServiceForUniqueProduct_GetUniqueProductsByStudentID_Call struct {
	*mock.Call
}

// GetUniqueProductsByStudentID is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - studentID string
func (_e *IStudentProductServiceForUniqueProduct_Expecter) GetUniqueProductsByStudentID(ctx interface{}, db interface{}, studentID interface{}) *IStudentProductServiceForUniqueProduct_GetUniqueProductsByStudentID_Call {
	return &IStudentProductServiceForUniqueProduct_GetUniqueProductsByStudentID_Call{Call: _e.mock.On("GetUniqueProductsByStudentID", ctx, db, studentID)}
}

func (_c *IStudentProductServiceForUniqueProduct_GetUniqueProductsByStudentID_Call) Run(run func(ctx context.Context, db database.QueryExecer, studentID string)) *IStudentProductServiceForUniqueProduct_GetUniqueProductsByStudentID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(string))
	})
	return _c
}

func (_c *IStudentProductServiceForUniqueProduct_GetUniqueProductsByStudentID_Call) Return(studentProductOfUniqueProducts []*entities.StudentProduct, err error) *IStudentProductServiceForUniqueProduct_GetUniqueProductsByStudentID_Call {
	_c.Call.Return(studentProductOfUniqueProducts, err)
	return _c
}

func (_c *IStudentProductServiceForUniqueProduct_GetUniqueProductsByStudentID_Call) RunAndReturn(run func(context.Context, database.QueryExecer, string) ([]*entities.StudentProduct, error)) *IStudentProductServiceForUniqueProduct_GetUniqueProductsByStudentID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUniqueProductsByStudentIDs provides a mock function with given fields: ctx, db, studentID
func (_m *IStudentProductServiceForUniqueProduct) GetUniqueProductsByStudentIDs(ctx context.Context, db database.QueryExecer, studentID []string) (map[string][]*entities.StudentProduct, error) {
	ret := _m.Called(ctx, db, studentID)

	var r0 map[string][]*entities.StudentProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, []string) (map[string][]*entities.StudentProduct, error)); ok {
		return rf(ctx, db, studentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, []string) map[string][]*entities.StudentProduct); ok {
		r0 = rf(ctx, db, studentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]*entities.StudentProduct)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, []string) error); ok {
		r1 = rf(ctx, db, studentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IStudentProductServiceForUniqueProduct_GetUniqueProductsByStudentIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUniqueProductsByStudentIDs'
type IStudentProductServiceForUniqueProduct_GetUniqueProductsByStudentIDs_Call struct {
	*mock.Call
}

// GetUniqueProductsByStudentIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - studentID []string
func (_e *IStudentProductServiceForUniqueProduct_Expecter) GetUniqueProductsByStudentIDs(ctx interface{}, db interface{}, studentID interface{}) *IStudentProductServiceForUniqueProduct_GetUniqueProductsByStudentIDs_Call {
	return &IStudentProductServiceForUniqueProduct_GetUniqueProductsByStudentIDs_Call{Call: _e.mock.On("GetUniqueProductsByStudentIDs", ctx, db, studentID)}
}

func (_c *IStudentProductServiceForUniqueProduct_GetUniqueProductsByStudentIDs_Call) Run(run func(ctx context.Context, db database.QueryExecer, studentID []string)) *IStudentProductServiceForUniqueProduct_GetUniqueProductsByStudentIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].([]string))
	})
	return _c
}

func (_c *IStudentProductServiceForUniqueProduct_GetUniqueProductsByStudentIDs_Call) Return(mapStudentIDAndStudentProducts map[string][]*entities.StudentProduct, err error) *IStudentProductServiceForUniqueProduct_GetUniqueProductsByStudentIDs_Call {
	_c.Call.Return(mapStudentIDAndStudentProducts, err)
	return _c
}

func (_c *IStudentProductServiceForUniqueProduct_GetUniqueProductsByStudentIDs_Call) RunAndReturn(run func(context.Context, database.QueryExecer, []string) (map[string][]*entities.StudentProduct, error)) *IStudentProductServiceForUniqueProduct_GetUniqueProductsByStudentIDs_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIStudentProductServiceForUniqueProduct interface {
	mock.TestingT
	Cleanup(func())
}

// NewIStudentProductServiceForUniqueProduct creates a new instance of IStudentProductServiceForUniqueProduct. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIStudentProductServiceForUniqueProduct(t mockConstructorTestingTNewIStudentProductServiceForUniqueProduct) *IStudentProductServiceForUniqueProduct {
	mock := &IStudentProductServiceForUniqueProduct{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
