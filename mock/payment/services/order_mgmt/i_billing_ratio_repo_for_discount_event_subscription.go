// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// IBillingRatioRepoForDiscountEventSubscription is an autogenerated mock type for the IBillingRatioRepoForDiscountEventSubscription type
type IBillingRatioRepoForDiscountEventSubscription struct {
	mock.Mock
}

// GetFirstRatioByBillingSchedulePeriodIDAndFromTime provides a mock function with given fields: ctx, db, billingSchedulePeriodID, from
func (_m *IBillingRatioRepoForDiscountEventSubscription) GetFirstRatioByBillingSchedulePeriodIDAndFromTime(ctx context.Context, db database.QueryExecer, billingSchedulePeriodID string, from time.Time) (entities.BillingRatio, error) {
	ret := _m.Called(ctx, db, billingSchedulePeriodID, from)

	var r0 entities.BillingRatio
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, time.Time) (entities.BillingRatio, error)); ok {
		return rf(ctx, db, billingSchedulePeriodID, from)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, time.Time) entities.BillingRatio); ok {
		r0 = rf(ctx, db, billingSchedulePeriodID, from)
	} else {
		r0 = ret.Get(0).(entities.BillingRatio)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, string, time.Time) error); ok {
		r1 = rf(ctx, db, billingSchedulePeriodID, from)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIBillingRatioRepoForDiscountEventSubscription interface {
	mock.TestingT
	Cleanup(func())
}

// NewIBillingRatioRepoForDiscountEventSubscription creates a new instance of IBillingRatioRepoForDiscountEventSubscription. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIBillingRatioRepoForDiscountEventSubscription(t mockConstructorTestingTNewIBillingRatioRepoForDiscountEventSubscription) *IBillingRatioRepoForDiscountEventSubscription {
	mock := &IBillingRatioRepoForDiscountEventSubscription{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
