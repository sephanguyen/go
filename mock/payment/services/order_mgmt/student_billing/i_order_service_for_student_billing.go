// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"
)

// IOrderServiceForStudentBilling is an autogenerated mock type for the IOrderServiceForStudentBilling type
type IOrderServiceForStudentBilling struct {
	mock.Mock
}

type IOrderServiceForStudentBilling_Expecter struct {
	mock *mock.Mock
}

func (_m *IOrderServiceForStudentBilling) EXPECT() *IOrderServiceForStudentBilling_Expecter {
	return &IOrderServiceForStudentBilling_Expecter{mock: &_m.Mock}
}

// GetOrderTypeByOrderID provides a mock function with given fields: ctx, db, orderID
func (_m *IOrderServiceForStudentBilling) GetOrderTypeByOrderID(ctx context.Context, db database.Ext, orderID string) (string, error) {
	ret := _m.Called(ctx, db, orderID)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string) (string, error)); ok {
		return rf(ctx, db, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string) string); ok {
		r0 = rf(ctx, db, orderID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.Ext, string) error); ok {
		r1 = rf(ctx, db, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOrderServiceForStudentBilling_GetOrderTypeByOrderID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderTypeByOrderID'
type IOrderServiceForStudentBilling_GetOrderTypeByOrderID_Call struct {
	*mock.Call
}

// GetOrderTypeByOrderID is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.Ext
//   - orderID string
func (_e *IOrderServiceForStudentBilling_Expecter) GetOrderTypeByOrderID(ctx interface{}, db interface{}, orderID interface{}) *IOrderServiceForStudentBilling_GetOrderTypeByOrderID_Call {
	return &IOrderServiceForStudentBilling_GetOrderTypeByOrderID_Call{Call: _e.mock.On("GetOrderTypeByOrderID", ctx, db, orderID)}
}

func (_c *IOrderServiceForStudentBilling_GetOrderTypeByOrderID_Call) Run(run func(ctx context.Context, db database.Ext, orderID string)) *IOrderServiceForStudentBilling_GetOrderTypeByOrderID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.Ext), args[2].(string))
	})
	return _c
}

func (_c *IOrderServiceForStudentBilling_GetOrderTypeByOrderID_Call) Return(orderType string, err error) *IOrderServiceForStudentBilling_GetOrderTypeByOrderID_Call {
	_c.Call.Return(orderType, err)
	return _c
}

func (_c *IOrderServiceForStudentBilling_GetOrderTypeByOrderID_Call) RunAndReturn(run func(context.Context, database.Ext, string) (string, error)) *IOrderServiceForStudentBilling_GetOrderTypeByOrderID_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrdersByStudentIDAndLocationIDs provides a mock function with given fields: ctx, db, studentID, locationIDs, from, limit
func (_m *IOrderServiceForStudentBilling) GetOrdersByStudentIDAndLocationIDs(ctx context.Context, db database.Ext, studentID string, locationIDs []string, from int64, limit int64) ([]*entities.Order, int, error) {
	ret := _m.Called(ctx, db, studentID, locationIDs, from, limit)

	var r0 []*entities.Order
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string, []string, int64, int64) ([]*entities.Order, int, error)); ok {
		return rf(ctx, db, studentID, locationIDs, from, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string, []string, int64, int64) []*entities.Order); ok {
		r0 = rf(ctx, db, studentID, locationIDs, from, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.Ext, string, []string, int64, int64) int); ok {
		r1 = rf(ctx, db, studentID, locationIDs, from, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, database.Ext, string, []string, int64, int64) error); ok {
		r2 = rf(ctx, db, studentID, locationIDs, from, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IOrderServiceForStudentBilling_GetOrdersByStudentIDAndLocationIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrdersByStudentIDAndLocationIDs'
type IOrderServiceForStudentBilling_GetOrdersByStudentIDAndLocationIDs_Call struct {
	*mock.Call
}

// GetOrdersByStudentIDAndLocationIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.Ext
//   - studentID string
//   - locationIDs []string
//   - from int64
//   - limit int64
func (_e *IOrderServiceForStudentBilling_Expecter) GetOrdersByStudentIDAndLocationIDs(ctx interface{}, db interface{}, studentID interface{}, locationIDs interface{}, from interface{}, limit interface{}) *IOrderServiceForStudentBilling_GetOrdersByStudentIDAndLocationIDs_Call {
	return &IOrderServiceForStudentBilling_GetOrdersByStudentIDAndLocationIDs_Call{Call: _e.mock.On("GetOrdersByStudentIDAndLocationIDs", ctx, db, studentID, locationIDs, from, limit)}
}

func (_c *IOrderServiceForStudentBilling_GetOrdersByStudentIDAndLocationIDs_Call) Run(run func(ctx context.Context, db database.Ext, studentID string, locationIDs []string, from int64, limit int64)) *IOrderServiceForStudentBilling_GetOrdersByStudentIDAndLocationIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.Ext), args[2].(string), args[3].([]string), args[4].(int64), args[5].(int64))
	})
	return _c
}

func (_c *IOrderServiceForStudentBilling_GetOrdersByStudentIDAndLocationIDs_Call) Return(orderInfo []*entities.Order, total int, err error) *IOrderServiceForStudentBilling_GetOrdersByStudentIDAndLocationIDs_Call {
	_c.Call.Return(orderInfo, total, err)
	return _c
}

func (_c *IOrderServiceForStudentBilling_GetOrdersByStudentIDAndLocationIDs_Call) RunAndReturn(run func(context.Context, database.Ext, string, []string, int64, int64) ([]*entities.Order, int, error)) *IOrderServiceForStudentBilling_GetOrdersByStudentIDAndLocationIDs_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIOrderServiceForStudentBilling interface {
	mock.TestingT
	Cleanup(func())
}

// NewIOrderServiceForStudentBilling creates a new instance of IOrderServiceForStudentBilling. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIOrderServiceForStudentBilling(t mockConstructorTestingTNewIOrderServiceForStudentBilling) *IOrderServiceForStudentBilling {
	mock := &IOrderServiceForStudentBilling{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
