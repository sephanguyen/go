// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"
)

// IMaterialServiceForStudentBilling is an autogenerated mock type for the IMaterialServiceForStudentBilling type
type IMaterialServiceForStudentBilling struct {
	mock.Mock
}

type IMaterialServiceForStudentBilling_Expecter struct {
	mock *mock.Mock
}

func (_m *IMaterialServiceForStudentBilling) EXPECT() *IMaterialServiceForStudentBilling_Expecter {
	return &IMaterialServiceForStudentBilling_Expecter{mock: &_m.Mock}
}

// GetMaterialByID provides a mock function with given fields: ctx, db, materialID
func (_m *IMaterialServiceForStudentBilling) GetMaterialByID(ctx context.Context, db database.QueryExecer, materialID string) (entities.Material, error) {
	ret := _m.Called(ctx, db, materialID)

	var r0 entities.Material
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) (entities.Material, error)); ok {
		return rf(ctx, db, materialID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) entities.Material); ok {
		r0 = rf(ctx, db, materialID)
	} else {
		r0 = ret.Get(0).(entities.Material)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, string) error); ok {
		r1 = rf(ctx, db, materialID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IMaterialServiceForStudentBilling_GetMaterialByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMaterialByID'
type IMaterialServiceForStudentBilling_GetMaterialByID_Call struct {
	*mock.Call
}

// GetMaterialByID is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - materialID string
func (_e *IMaterialServiceForStudentBilling_Expecter) GetMaterialByID(ctx interface{}, db interface{}, materialID interface{}) *IMaterialServiceForStudentBilling_GetMaterialByID_Call {
	return &IMaterialServiceForStudentBilling_GetMaterialByID_Call{Call: _e.mock.On("GetMaterialByID", ctx, db, materialID)}
}

func (_c *IMaterialServiceForStudentBilling_GetMaterialByID_Call) Run(run func(ctx context.Context, db database.QueryExecer, materialID string)) *IMaterialServiceForStudentBilling_GetMaterialByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(string))
	})
	return _c
}

func (_c *IMaterialServiceForStudentBilling_GetMaterialByID_Call) Return(material entities.Material, err error) *IMaterialServiceForStudentBilling_GetMaterialByID_Call {
	_c.Call.Return(material, err)
	return _c
}

func (_c *IMaterialServiceForStudentBilling_GetMaterialByID_Call) RunAndReturn(run func(context.Context, database.QueryExecer, string) (entities.Material, error)) *IMaterialServiceForStudentBilling_GetMaterialByID_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIMaterialServiceForStudentBilling interface {
	mock.TestingT
	Cleanup(func())
}

// NewIMaterialServiceForStudentBilling creates a new instance of IMaterialServiceForStudentBilling. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIMaterialServiceForStudentBilling(t mockConstructorTestingTNewIMaterialServiceForStudentBilling) *IMaterialServiceForStudentBilling {
	mock := &IMaterialServiceForStudentBilling{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
