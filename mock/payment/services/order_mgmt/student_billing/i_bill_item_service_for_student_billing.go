// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"

	utils "github.com/manabie-com/backend/internal/payment/utils"
)

// IBillItemServiceForStudentBilling is an autogenerated mock type for the IBillItemServiceForStudentBilling type
type IBillItemServiceForStudentBilling struct {
	mock.Mock
}

type IBillItemServiceForStudentBilling_Expecter struct {
	mock *mock.Mock
}

func (_m *IBillItemServiceForStudentBilling) EXPECT() *IBillItemServiceForStudentBilling_Expecter {
	return &IBillItemServiceForStudentBilling_Expecter{mock: &_m.Mock}
}

// GetBillItemDescriptionByStudentIDAndLocationIDs provides a mock function with given fields: ctx, db, studentID, locationIDs, from, limit
func (_m *IBillItemServiceForStudentBilling) GetBillItemDescriptionByStudentIDAndLocationIDs(ctx context.Context, db database.Ext, studentID string, locationIDs []string, from int64, limit int64) ([]utils.BillItemForRetrieveApi, int, error) {
	ret := _m.Called(ctx, db, studentID, locationIDs, from, limit)

	var r0 []utils.BillItemForRetrieveApi
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string, []string, int64, int64) ([]utils.BillItemForRetrieveApi, int, error)); ok {
		return rf(ctx, db, studentID, locationIDs, from, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string, []string, int64, int64) []utils.BillItemForRetrieveApi); ok {
		r0 = rf(ctx, db, studentID, locationIDs, from, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]utils.BillItemForRetrieveApi)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.Ext, string, []string, int64, int64) int); ok {
		r1 = rf(ctx, db, studentID, locationIDs, from, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, database.Ext, string, []string, int64, int64) error); ok {
		r2 = rf(ctx, db, studentID, locationIDs, from, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IBillItemServiceForStudentBilling_GetBillItemDescriptionByStudentIDAndLocationIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBillItemDescriptionByStudentIDAndLocationIDs'
type IBillItemServiceForStudentBilling_GetBillItemDescriptionByStudentIDAndLocationIDs_Call struct {
	*mock.Call
}

// GetBillItemDescriptionByStudentIDAndLocationIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.Ext
//   - studentID string
//   - locationIDs []string
//   - from int64
//   - limit int64
func (_e *IBillItemServiceForStudentBilling_Expecter) GetBillItemDescriptionByStudentIDAndLocationIDs(ctx interface{}, db interface{}, studentID interface{}, locationIDs interface{}, from interface{}, limit interface{}) *IBillItemServiceForStudentBilling_GetBillItemDescriptionByStudentIDAndLocationIDs_Call {
	return &IBillItemServiceForStudentBilling_GetBillItemDescriptionByStudentIDAndLocationIDs_Call{Call: _e.mock.On("GetBillItemDescriptionByStudentIDAndLocationIDs", ctx, db, studentID, locationIDs, from, limit)}
}

func (_c *IBillItemServiceForStudentBilling_GetBillItemDescriptionByStudentIDAndLocationIDs_Call) Run(run func(ctx context.Context, db database.Ext, studentID string, locationIDs []string, from int64, limit int64)) *IBillItemServiceForStudentBilling_GetBillItemDescriptionByStudentIDAndLocationIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.Ext), args[2].(string), args[3].([]string), args[4].(int64), args[5].(int64))
	})
	return _c
}

func (_c *IBillItemServiceForStudentBilling_GetBillItemDescriptionByStudentIDAndLocationIDs_Call) Return(billingDescriptions []utils.BillItemForRetrieveApi, total int, err error) *IBillItemServiceForStudentBilling_GetBillItemDescriptionByStudentIDAndLocationIDs_Call {
	_c.Call.Return(billingDescriptions, total, err)
	return _c
}

func (_c *IBillItemServiceForStudentBilling_GetBillItemDescriptionByStudentIDAndLocationIDs_Call) RunAndReturn(run func(context.Context, database.Ext, string, []string, int64, int64) ([]utils.BillItemForRetrieveApi, int, error)) *IBillItemServiceForStudentBilling_GetBillItemDescriptionByStudentIDAndLocationIDs_Call {
	_c.Call.Return(run)
	return _c
}

// GetBillItemInfoByOrderIDAndUniqueByProductID provides a mock function with given fields: ctx, db, orderID
func (_m *IBillItemServiceForStudentBilling) GetBillItemInfoByOrderIDAndUniqueByProductID(ctx context.Context, db database.Ext, orderID string) ([]*entities.BillItem, error) {
	ret := _m.Called(ctx, db, orderID)

	var r0 []*entities.BillItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string) ([]*entities.BillItem, error)); ok {
		return rf(ctx, db, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string) []*entities.BillItem); ok {
		r0 = rf(ctx, db, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.BillItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.Ext, string) error); ok {
		r1 = rf(ctx, db, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IBillItemServiceForStudentBilling_GetBillItemInfoByOrderIDAndUniqueByProductID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBillItemInfoByOrderIDAndUniqueByProductID'
type IBillItemServiceForStudentBilling_GetBillItemInfoByOrderIDAndUniqueByProductID_Call struct {
	*mock.Call
}

// GetBillItemInfoByOrderIDAndUniqueByProductID is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.Ext
//   - orderID string
func (_e *IBillItemServiceForStudentBilling_Expecter) GetBillItemInfoByOrderIDAndUniqueByProductID(ctx interface{}, db interface{}, orderID interface{}) *IBillItemServiceForStudentBilling_GetBillItemInfoByOrderIDAndUniqueByProductID_Call {
	return &IBillItemServiceForStudentBilling_GetBillItemInfoByOrderIDAndUniqueByProductID_Call{Call: _e.mock.On("GetBillItemInfoByOrderIDAndUniqueByProductID", ctx, db, orderID)}
}

func (_c *IBillItemServiceForStudentBilling_GetBillItemInfoByOrderIDAndUniqueByProductID_Call) Run(run func(ctx context.Context, db database.Ext, orderID string)) *IBillItemServiceForStudentBilling_GetBillItemInfoByOrderIDAndUniqueByProductID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.Ext), args[2].(string))
	})
	return _c
}

func (_c *IBillItemServiceForStudentBilling_GetBillItemInfoByOrderIDAndUniqueByProductID_Call) Return(billItem []*entities.BillItem, err error) *IBillItemServiceForStudentBilling_GetBillItemInfoByOrderIDAndUniqueByProductID_Call {
	_c.Call.Return(billItem, err)
	return _c
}

func (_c *IBillItemServiceForStudentBilling_GetBillItemInfoByOrderIDAndUniqueByProductID_Call) RunAndReturn(run func(context.Context, database.Ext, string) ([]*entities.BillItem, error)) *IBillItemServiceForStudentBilling_GetBillItemInfoByOrderIDAndUniqueByProductID_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestBillItemByStudentProductIDForStudentBilling provides a mock function with given fields: ctx, db, studentProductID
func (_m *IBillItemServiceForStudentBilling) GetLatestBillItemByStudentProductIDForStudentBilling(ctx context.Context, db database.Ext, studentProductID string) (entities.BillItem, error) {
	ret := _m.Called(ctx, db, studentProductID)

	var r0 entities.BillItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string) (entities.BillItem, error)); ok {
		return rf(ctx, db, studentProductID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string) entities.BillItem); ok {
		r0 = rf(ctx, db, studentProductID)
	} else {
		r0 = ret.Get(0).(entities.BillItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.Ext, string) error); ok {
		r1 = rf(ctx, db, studentProductID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IBillItemServiceForStudentBilling_GetLatestBillItemByStudentProductIDForStudentBilling_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestBillItemByStudentProductIDForStudentBilling'
type IBillItemServiceForStudentBilling_GetLatestBillItemByStudentProductIDForStudentBilling_Call struct {
	*mock.Call
}

// GetLatestBillItemByStudentProductIDForStudentBilling is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.Ext
//   - studentProductID string
func (_e *IBillItemServiceForStudentBilling_Expecter) GetLatestBillItemByStudentProductIDForStudentBilling(ctx interface{}, db interface{}, studentProductID interface{}) *IBillItemServiceForStudentBilling_GetLatestBillItemByStudentProductIDForStudentBilling_Call {
	return &IBillItemServiceForStudentBilling_GetLatestBillItemByStudentProductIDForStudentBilling_Call{Call: _e.mock.On("GetLatestBillItemByStudentProductIDForStudentBilling", ctx, db, studentProductID)}
}

func (_c *IBillItemServiceForStudentBilling_GetLatestBillItemByStudentProductIDForStudentBilling_Call) Run(run func(ctx context.Context, db database.Ext, studentProductID string)) *IBillItemServiceForStudentBilling_GetLatestBillItemByStudentProductIDForStudentBilling_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.Ext), args[2].(string))
	})
	return _c
}

func (_c *IBillItemServiceForStudentBilling_GetLatestBillItemByStudentProductIDForStudentBilling_Call) Return(billItem entities.BillItem, err error) *IBillItemServiceForStudentBilling_GetLatestBillItemByStudentProductIDForStudentBilling_Call {
	_c.Call.Return(billItem, err)
	return _c
}

func (_c *IBillItemServiceForStudentBilling_GetLatestBillItemByStudentProductIDForStudentBilling_Call) RunAndReturn(run func(context.Context, database.Ext, string) (entities.BillItem, error)) *IBillItemServiceForStudentBilling_GetLatestBillItemByStudentProductIDForStudentBilling_Call {
	_c.Call.Return(run)
	return _c
}

// GetMapPastBillItemInfo provides a mock function with given fields: ctx, db, studentProductIDs
func (_m *IBillItemServiceForStudentBilling) GetMapPastBillItemInfo(ctx context.Context, db database.QueryExecer, studentProductIDs []string) (map[string]*entities.BillItem, error) {
	ret := _m.Called(ctx, db, studentProductIDs)

	var r0 map[string]*entities.BillItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, []string) (map[string]*entities.BillItem, error)); ok {
		return rf(ctx, db, studentProductIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, []string) map[string]*entities.BillItem); ok {
		r0 = rf(ctx, db, studentProductIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*entities.BillItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, []string) error); ok {
		r1 = rf(ctx, db, studentProductIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IBillItemServiceForStudentBilling_GetMapPastBillItemInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMapPastBillItemInfo'
type IBillItemServiceForStudentBilling_GetMapPastBillItemInfo_Call struct {
	*mock.Call
}

// GetMapPastBillItemInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - studentProductIDs []string
func (_e *IBillItemServiceForStudentBilling_Expecter) GetMapPastBillItemInfo(ctx interface{}, db interface{}, studentProductIDs interface{}) *IBillItemServiceForStudentBilling_GetMapPastBillItemInfo_Call {
	return &IBillItemServiceForStudentBilling_GetMapPastBillItemInfo_Call{Call: _e.mock.On("GetMapPastBillItemInfo", ctx, db, studentProductIDs)}
}

func (_c *IBillItemServiceForStudentBilling_GetMapPastBillItemInfo_Call) Run(run func(ctx context.Context, db database.QueryExecer, studentProductIDs []string)) *IBillItemServiceForStudentBilling_GetMapPastBillItemInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].([]string))
	})
	return _c
}

func (_c *IBillItemServiceForStudentBilling_GetMapPastBillItemInfo_Call) Return(mapStudentProductIDAndBillItem map[string]*entities.BillItem, err error) *IBillItemServiceForStudentBilling_GetMapPastBillItemInfo_Call {
	_c.Call.Return(mapStudentProductIDAndBillItem, err)
	return _c
}

func (_c *IBillItemServiceForStudentBilling_GetMapPastBillItemInfo_Call) RunAndReturn(run func(context.Context, database.QueryExecer, []string) (map[string]*entities.BillItem, error)) *IBillItemServiceForStudentBilling_GetMapPastBillItemInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetMapPresentAndFutureBillItemInfo provides a mock function with given fields: ctx, db, studentProductIDs
func (_m *IBillItemServiceForStudentBilling) GetMapPresentAndFutureBillItemInfo(ctx context.Context, db database.QueryExecer, studentProductIDs []string) (map[string]*entities.BillItem, error) {
	ret := _m.Called(ctx, db, studentProductIDs)

	var r0 map[string]*entities.BillItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, []string) (map[string]*entities.BillItem, error)); ok {
		return rf(ctx, db, studentProductIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, []string) map[string]*entities.BillItem); ok {
		r0 = rf(ctx, db, studentProductIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*entities.BillItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, []string) error); ok {
		r1 = rf(ctx, db, studentProductIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IBillItemServiceForStudentBilling_GetMapPresentAndFutureBillItemInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMapPresentAndFutureBillItemInfo'
type IBillItemServiceForStudentBilling_GetMapPresentAndFutureBillItemInfo_Call struct {
	*mock.Call
}

// GetMapPresentAndFutureBillItemInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - studentProductIDs []string
func (_e *IBillItemServiceForStudentBilling_Expecter) GetMapPresentAndFutureBillItemInfo(ctx interface{}, db interface{}, studentProductIDs interface{}) *IBillItemServiceForStudentBilling_GetMapPresentAndFutureBillItemInfo_Call {
	return &IBillItemServiceForStudentBilling_GetMapPresentAndFutureBillItemInfo_Call{Call: _e.mock.On("GetMapPresentAndFutureBillItemInfo", ctx, db, studentProductIDs)}
}

func (_c *IBillItemServiceForStudentBilling_GetMapPresentAndFutureBillItemInfo_Call) Run(run func(ctx context.Context, db database.QueryExecer, studentProductIDs []string)) *IBillItemServiceForStudentBilling_GetMapPresentAndFutureBillItemInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].([]string))
	})
	return _c
}

func (_c *IBillItemServiceForStudentBilling_GetMapPresentAndFutureBillItemInfo_Call) Return(mapStudentProductIDAndBillItem map[string]*entities.BillItem, err error) *IBillItemServiceForStudentBilling_GetMapPresentAndFutureBillItemInfo_Call {
	_c.Call.Return(mapStudentProductIDAndBillItem, err)
	return _c
}

func (_c *IBillItemServiceForStudentBilling_GetMapPresentAndFutureBillItemInfo_Call) RunAndReturn(run func(context.Context, database.QueryExecer, []string) (map[string]*entities.BillItem, error)) *IBillItemServiceForStudentBilling_GetMapPresentAndFutureBillItemInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetUpcomingBilling provides a mock function with given fields: ctx, db, studentProductID
func (_m *IBillItemServiceForStudentBilling) GetUpcomingBilling(ctx context.Context, db database.QueryExecer, studentProductID string) (*entities.BillItem, error) {
	ret := _m.Called(ctx, db, studentProductID)

	var r0 *entities.BillItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) (*entities.BillItem, error)); ok {
		return rf(ctx, db, studentProductID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) *entities.BillItem); ok {
		r0 = rf(ctx, db, studentProductID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.BillItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, string) error); ok {
		r1 = rf(ctx, db, studentProductID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IBillItemServiceForStudentBilling_GetUpcomingBilling_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUpcomingBilling'
type IBillItemServiceForStudentBilling_GetUpcomingBilling_Call struct {
	*mock.Call
}

// GetUpcomingBilling is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - studentProductID string
func (_e *IBillItemServiceForStudentBilling_Expecter) GetUpcomingBilling(ctx interface{}, db interface{}, studentProductID interface{}) *IBillItemServiceForStudentBilling_GetUpcomingBilling_Call {
	return &IBillItemServiceForStudentBilling_GetUpcomingBilling_Call{Call: _e.mock.On("GetUpcomingBilling", ctx, db, studentProductID)}
}

func (_c *IBillItemServiceForStudentBilling_GetUpcomingBilling_Call) Run(run func(ctx context.Context, db database.QueryExecer, studentProductID string)) *IBillItemServiceForStudentBilling_GetUpcomingBilling_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(string))
	})
	return _c
}

func (_c *IBillItemServiceForStudentBilling_GetUpcomingBilling_Call) Return(upcomingBillingItem *entities.BillItem, err error) *IBillItemServiceForStudentBilling_GetUpcomingBilling_Call {
	_c.Call.Return(upcomingBillingItem, err)
	return _c
}

func (_c *IBillItemServiceForStudentBilling_GetUpcomingBilling_Call) RunAndReturn(run func(context.Context, database.QueryExecer, string) (*entities.BillItem, error)) *IBillItemServiceForStudentBilling_GetUpcomingBilling_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIBillItemServiceForStudentBilling interface {
	mock.TestingT
	Cleanup(func())
}

// NewIBillItemServiceForStudentBilling creates a new instance of IBillItemServiceForStudentBilling. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIBillItemServiceForStudentBilling(t mockConstructorTestingTNewIBillItemServiceForStudentBilling) *IBillItemServiceForStudentBilling {
	mock := &IBillItemServiceForStudentBilling{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
