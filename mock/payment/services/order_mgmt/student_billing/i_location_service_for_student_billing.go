// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	mock "github.com/stretchr/testify/mock"

	pmpb "github.com/manabie-com/backend/pkg/manabuf/payment/v1"
)

// ILocationServiceForStudentBilling is an autogenerated mock type for the ILocationServiceForStudentBilling type
type ILocationServiceForStudentBilling struct {
	mock.Mock
}

type ILocationServiceForStudentBilling_Expecter struct {
	mock *mock.Mock
}

func (_m *ILocationServiceForStudentBilling) EXPECT() *ILocationServiceForStudentBilling_Expecter {
	return &ILocationServiceForStudentBilling_Expecter{mock: &_m.Mock}
}

// GetLocationInfoByID provides a mock function with given fields: ctx, db, locationID
func (_m *ILocationServiceForStudentBilling) GetLocationInfoByID(ctx context.Context, db database.Ext, locationID string) (*pmpb.LocationInfo, error) {
	ret := _m.Called(ctx, db, locationID)

	var r0 *pmpb.LocationInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string) (*pmpb.LocationInfo, error)); ok {
		return rf(ctx, db, locationID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string) *pmpb.LocationInfo); ok {
		r0 = rf(ctx, db, locationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pmpb.LocationInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.Ext, string) error); ok {
		r1 = rf(ctx, db, locationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ILocationServiceForStudentBilling_GetLocationInfoByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocationInfoByID'
type ILocationServiceForStudentBilling_GetLocationInfoByID_Call struct {
	*mock.Call
}

// GetLocationInfoByID is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.Ext
//   - locationID string
func (_e *ILocationServiceForStudentBilling_Expecter) GetLocationInfoByID(ctx interface{}, db interface{}, locationID interface{}) *ILocationServiceForStudentBilling_GetLocationInfoByID_Call {
	return &ILocationServiceForStudentBilling_GetLocationInfoByID_Call{Call: _e.mock.On("GetLocationInfoByID", ctx, db, locationID)}
}

func (_c *ILocationServiceForStudentBilling_GetLocationInfoByID_Call) Run(run func(ctx context.Context, db database.Ext, locationID string)) *ILocationServiceForStudentBilling_GetLocationInfoByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.Ext), args[2].(string))
	})
	return _c
}

func (_c *ILocationServiceForStudentBilling_GetLocationInfoByID_Call) Return(locationInfo *pmpb.LocationInfo, err error) *ILocationServiceForStudentBilling_GetLocationInfoByID_Call {
	_c.Call.Return(locationInfo, err)
	return _c
}

func (_c *ILocationServiceForStudentBilling_GetLocationInfoByID_Call) RunAndReturn(run func(context.Context, database.Ext, string) (*pmpb.LocationInfo, error)) *ILocationServiceForStudentBilling_GetLocationInfoByID_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewILocationServiceForStudentBilling interface {
	mock.TestingT
	Cleanup(func())
}

// NewILocationServiceForStudentBilling creates a new instance of ILocationServiceForStudentBilling. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewILocationServiceForStudentBilling(t mockConstructorTestingTNewILocationServiceForStudentBilling) *ILocationServiceForStudentBilling {
	mock := &ILocationServiceForStudentBilling{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
