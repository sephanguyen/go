// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"
)

// IStudentProductForStudentBilling is an autogenerated mock type for the IStudentProductForStudentBilling type
type IStudentProductForStudentBilling struct {
	mock.Mock
}

type IStudentProductForStudentBilling_Expecter struct {
	mock *mock.Mock
}

func (_m *IStudentProductForStudentBilling) EXPECT() *IStudentProductForStudentBilling_Expecter {
	return &IStudentProductForStudentBilling_Expecter{mock: &_m.Mock}
}

// GetStudentAssociatedProductByStudentProductID provides a mock function with given fields: ctx, db, studentProductID, from, limit
func (_m *IStudentProductForStudentBilling) GetStudentAssociatedProductByStudentProductID(ctx context.Context, db database.Ext, studentProductID string, from int64, limit int64) ([]string, []*entities.StudentProduct, int, error) {
	ret := _m.Called(ctx, db, studentProductID, from, limit)

	var r0 []string
	var r1 []*entities.StudentProduct
	var r2 int
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string, int64, int64) ([]string, []*entities.StudentProduct, int, error)); ok {
		return rf(ctx, db, studentProductID, from, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string, int64, int64) []string); ok {
		r0 = rf(ctx, db, studentProductID, from, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.Ext, string, int64, int64) []*entities.StudentProduct); ok {
		r1 = rf(ctx, db, studentProductID, from, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*entities.StudentProduct)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, database.Ext, string, int64, int64) int); ok {
		r2 = rf(ctx, db, studentProductID, from, limit)
	} else {
		r2 = ret.Get(2).(int)
	}

	if rf, ok := ret.Get(3).(func(context.Context, database.Ext, string, int64, int64) error); ok {
		r3 = rf(ctx, db, studentProductID, from, limit)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// IStudentProductForStudentBilling_GetStudentAssociatedProductByStudentProductID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStudentAssociatedProductByStudentProductID'
type IStudentProductForStudentBilling_GetStudentAssociatedProductByStudentProductID_Call struct {
	*mock.Call
}

// GetStudentAssociatedProductByStudentProductID is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.Ext
//   - studentProductID string
//   - from int64
//   - limit int64
func (_e *IStudentProductForStudentBilling_Expecter) GetStudentAssociatedProductByStudentProductID(ctx interface{}, db interface{}, studentProductID interface{}, from interface{}, limit interface{}) *IStudentProductForStudentBilling_GetStudentAssociatedProductByStudentProductID_Call {
	return &IStudentProductForStudentBilling_GetStudentAssociatedProductByStudentProductID_Call{Call: _e.mock.On("GetStudentAssociatedProductByStudentProductID", ctx, db, studentProductID, from, limit)}
}

func (_c *IStudentProductForStudentBilling_GetStudentAssociatedProductByStudentProductID_Call) Run(run func(ctx context.Context, db database.Ext, studentProductID string, from int64, limit int64)) *IStudentProductForStudentBilling_GetStudentAssociatedProductByStudentProductID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.Ext), args[2].(string), args[3].(int64), args[4].(int64))
	})
	return _c
}

func (_c *IStudentProductForStudentBilling_GetStudentAssociatedProductByStudentProductID_Call) Return(studentProductIDs []string, studentProducts []*entities.StudentProduct, total int, err error) *IStudentProductForStudentBilling_GetStudentAssociatedProductByStudentProductID_Call {
	_c.Call.Return(studentProductIDs, studentProducts, total, err)
	return _c
}

func (_c *IStudentProductForStudentBilling_GetStudentAssociatedProductByStudentProductID_Call) RunAndReturn(run func(context.Context, database.Ext, string, int64, int64) ([]string, []*entities.StudentProduct, int, error)) *IStudentProductForStudentBilling_GetStudentAssociatedProductByStudentProductID_Call {
	_c.Call.Return(run)
	return _c
}

// GetStudentProductByStudentIDAndLocationIDs provides a mock function with given fields: ctx, db, studentID, locations, from, limit
func (_m *IStudentProductForStudentBilling) GetStudentProductByStudentIDAndLocationIDs(ctx context.Context, db database.Ext, studentID string, locations []string, from int64, limit int64) ([]string, []*entities.StudentProduct, int, error) {
	ret := _m.Called(ctx, db, studentID, locations, from, limit)

	var r0 []string
	var r1 []*entities.StudentProduct
	var r2 int
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string, []string, int64, int64) ([]string, []*entities.StudentProduct, int, error)); ok {
		return rf(ctx, db, studentID, locations, from, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string, []string, int64, int64) []string); ok {
		r0 = rf(ctx, db, studentID, locations, from, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.Ext, string, []string, int64, int64) []*entities.StudentProduct); ok {
		r1 = rf(ctx, db, studentID, locations, from, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*entities.StudentProduct)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, database.Ext, string, []string, int64, int64) int); ok {
		r2 = rf(ctx, db, studentID, locations, from, limit)
	} else {
		r2 = ret.Get(2).(int)
	}

	if rf, ok := ret.Get(3).(func(context.Context, database.Ext, string, []string, int64, int64) error); ok {
		r3 = rf(ctx, db, studentID, locations, from, limit)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// IStudentProductForStudentBilling_GetStudentProductByStudentIDAndLocationIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStudentProductByStudentIDAndLocationIDs'
type IStudentProductForStudentBilling_GetStudentProductByStudentIDAndLocationIDs_Call struct {
	*mock.Call
}

// GetStudentProductByStudentIDAndLocationIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.Ext
//   - studentID string
//   - locations []string
//   - from int64
//   - limit int64
func (_e *IStudentProductForStudentBilling_Expecter) GetStudentProductByStudentIDAndLocationIDs(ctx interface{}, db interface{}, studentID interface{}, locations interface{}, from interface{}, limit interface{}) *IStudentProductForStudentBilling_GetStudentProductByStudentIDAndLocationIDs_Call {
	return &IStudentProductForStudentBilling_GetStudentProductByStudentIDAndLocationIDs_Call{Call: _e.mock.On("GetStudentProductByStudentIDAndLocationIDs", ctx, db, studentID, locations, from, limit)}
}

func (_c *IStudentProductForStudentBilling_GetStudentProductByStudentIDAndLocationIDs_Call) Run(run func(ctx context.Context, db database.Ext, studentID string, locations []string, from int64, limit int64)) *IStudentProductForStudentBilling_GetStudentProductByStudentIDAndLocationIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.Ext), args[2].(string), args[3].([]string), args[4].(int64), args[5].(int64))
	})
	return _c
}

func (_c *IStudentProductForStudentBilling_GetStudentProductByStudentIDAndLocationIDs_Call) Return(studentIDs []string, studentProducts []*entities.StudentProduct, total int, err error) *IStudentProductForStudentBilling_GetStudentProductByStudentIDAndLocationIDs_Call {
	_c.Call.Return(studentIDs, studentProducts, total, err)
	return _c
}

func (_c *IStudentProductForStudentBilling_GetStudentProductByStudentIDAndLocationIDs_Call) RunAndReturn(run func(context.Context, database.Ext, string, []string, int64, int64) ([]string, []*entities.StudentProduct, int, error)) *IStudentProductForStudentBilling_GetStudentProductByStudentIDAndLocationIDs_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIStudentProductForStudentBilling interface {
	mock.TestingT
	Cleanup(func())
}

// NewIStudentProductForStudentBilling creates a new instance of IStudentProductForStudentBilling. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIStudentProductForStudentBilling(t mockConstructorTestingTNewIStudentProductForStudentBilling) *IStudentProductForStudentBilling {
	mock := &IStudentProductForStudentBilling{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
