// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"
)

// IStudentProductForOrderDetail is an autogenerated mock type for the IStudentProductForOrderDetail type
type IStudentProductForOrderDetail struct {
	mock.Mock
}

type IStudentProductForOrderDetail_Expecter struct {
	mock *mock.Mock
}

func (_m *IStudentProductForOrderDetail) EXPECT() *IStudentProductForOrderDetail_Expecter {
	return &IStudentProductForOrderDetail_Expecter{mock: &_m.Mock}
}

// GetStudentProductByStudentProductID provides a mock function with given fields: ctx, db, studentProductID
func (_m *IStudentProductForOrderDetail) GetStudentProductByStudentProductID(ctx context.Context, db database.Ext, studentProductID string) (entities.StudentProduct, error) {
	ret := _m.Called(ctx, db, studentProductID)

	var r0 entities.StudentProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string) (entities.StudentProduct, error)); ok {
		return rf(ctx, db, studentProductID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string) entities.StudentProduct); ok {
		r0 = rf(ctx, db, studentProductID)
	} else {
		r0 = ret.Get(0).(entities.StudentProduct)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.Ext, string) error); ok {
		r1 = rf(ctx, db, studentProductID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IStudentProductForOrderDetail_GetStudentProductByStudentProductID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStudentProductByStudentProductID'
type IStudentProductForOrderDetail_GetStudentProductByStudentProductID_Call struct {
	*mock.Call
}

// GetStudentProductByStudentProductID is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.Ext
//   - studentProductID string
func (_e *IStudentProductForOrderDetail_Expecter) GetStudentProductByStudentProductID(ctx interface{}, db interface{}, studentProductID interface{}) *IStudentProductForOrderDetail_GetStudentProductByStudentProductID_Call {
	return &IStudentProductForOrderDetail_GetStudentProductByStudentProductID_Call{Call: _e.mock.On("GetStudentProductByStudentProductID", ctx, db, studentProductID)}
}

func (_c *IStudentProductForOrderDetail_GetStudentProductByStudentProductID_Call) Run(run func(ctx context.Context, db database.Ext, studentProductID string)) *IStudentProductForOrderDetail_GetStudentProductByStudentProductID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.Ext), args[2].(string))
	})
	return _c
}

func (_c *IStudentProductForOrderDetail_GetStudentProductByStudentProductID_Call) Return(studentProduct entities.StudentProduct, err error) *IStudentProductForOrderDetail_GetStudentProductByStudentProductID_Call {
	_c.Call.Return(studentProduct, err)
	return _c
}

func (_c *IStudentProductForOrderDetail_GetStudentProductByStudentProductID_Call) RunAndReturn(run func(context.Context, database.Ext, string) (entities.StudentProduct, error)) *IStudentProductForOrderDetail_GetStudentProductByStudentProductID_Call {
	_c.Call.Return(run)
	return _c
}

// GetStudentProductsByStudentProductIDs provides a mock function with given fields: ctx, db, studentProductIDs
func (_m *IStudentProductForOrderDetail) GetStudentProductsByStudentProductIDs(ctx context.Context, db database.Ext, studentProductIDs []string) ([]entities.StudentProduct, error) {
	ret := _m.Called(ctx, db, studentProductIDs)

	var r0 []entities.StudentProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, []string) ([]entities.StudentProduct, error)); ok {
		return rf(ctx, db, studentProductIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, []string) []entities.StudentProduct); ok {
		r0 = rf(ctx, db, studentProductIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.StudentProduct)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.Ext, []string) error); ok {
		r1 = rf(ctx, db, studentProductIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IStudentProductForOrderDetail_GetStudentProductsByStudentProductIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStudentProductsByStudentProductIDs'
type IStudentProductForOrderDetail_GetStudentProductsByStudentProductIDs_Call struct {
	*mock.Call
}

// GetStudentProductsByStudentProductIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.Ext
//   - studentProductIDs []string
func (_e *IStudentProductForOrderDetail_Expecter) GetStudentProductsByStudentProductIDs(ctx interface{}, db interface{}, studentProductIDs interface{}) *IStudentProductForOrderDetail_GetStudentProductsByStudentProductIDs_Call {
	return &IStudentProductForOrderDetail_GetStudentProductsByStudentProductIDs_Call{Call: _e.mock.On("GetStudentProductsByStudentProductIDs", ctx, db, studentProductIDs)}
}

func (_c *IStudentProductForOrderDetail_GetStudentProductsByStudentProductIDs_Call) Run(run func(ctx context.Context, db database.Ext, studentProductIDs []string)) *IStudentProductForOrderDetail_GetStudentProductsByStudentProductIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.Ext), args[2].([]string))
	})
	return _c
}

func (_c *IStudentProductForOrderDetail_GetStudentProductsByStudentProductIDs_Call) Return(studentProduct []entities.StudentProduct, err error) *IStudentProductForOrderDetail_GetStudentProductsByStudentProductIDs_Call {
	_c.Call.Return(studentProduct, err)
	return _c
}

func (_c *IStudentProductForOrderDetail_GetStudentProductsByStudentProductIDs_Call) RunAndReturn(run func(context.Context, database.Ext, []string) ([]entities.StudentProduct, error)) *IStudentProductForOrderDetail_GetStudentProductsByStudentProductIDs_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIStudentProductForOrderDetail interface {
	mock.TestingT
	Cleanup(func())
}

// NewIStudentProductForOrderDetail creates a new instance of IStudentProductForOrderDetail. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIStudentProductForOrderDetail(t mockConstructorTestingTNewIStudentProductForOrderDetail) *IStudentProductForOrderDetail {
	mock := &IStudentProductForOrderDetail{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
