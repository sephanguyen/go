// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"
)

// IOrderItemServiceForOrderDetail is an autogenerated mock type for the IOrderItemServiceForOrderDetail type
type IOrderItemServiceForOrderDetail struct {
	mock.Mock
}

type IOrderItemServiceForOrderDetail_Expecter struct {
	mock *mock.Mock
}

func (_m *IOrderItemServiceForOrderDetail) EXPECT() *IOrderItemServiceForOrderDetail_Expecter {
	return &IOrderItemServiceForOrderDetail_Expecter{mock: &_m.Mock}
}

// CountOrderItemsByOrderID provides a mock function with given fields: ctx, db, orderID
func (_m *IOrderItemServiceForOrderDetail) CountOrderItemsByOrderID(ctx context.Context, db database.Ext, orderID string) (int, error) {
	ret := _m.Called(ctx, db, orderID)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string) (int, error)); ok {
		return rf(ctx, db, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string) int); ok {
		r0 = rf(ctx, db, orderID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.Ext, string) error); ok {
		r1 = rf(ctx, db, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOrderItemServiceForOrderDetail_CountOrderItemsByOrderID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountOrderItemsByOrderID'
type IOrderItemServiceForOrderDetail_CountOrderItemsByOrderID_Call struct {
	*mock.Call
}

// CountOrderItemsByOrderID is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.Ext
//   - orderID string
func (_e *IOrderItemServiceForOrderDetail_Expecter) CountOrderItemsByOrderID(ctx interface{}, db interface{}, orderID interface{}) *IOrderItemServiceForOrderDetail_CountOrderItemsByOrderID_Call {
	return &IOrderItemServiceForOrderDetail_CountOrderItemsByOrderID_Call{Call: _e.mock.On("CountOrderItemsByOrderID", ctx, db, orderID)}
}

func (_c *IOrderItemServiceForOrderDetail_CountOrderItemsByOrderID_Call) Run(run func(ctx context.Context, db database.Ext, orderID string)) *IOrderItemServiceForOrderDetail_CountOrderItemsByOrderID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.Ext), args[2].(string))
	})
	return _c
}

func (_c *IOrderItemServiceForOrderDetail_CountOrderItemsByOrderID_Call) Return(count int, err error) *IOrderItemServiceForOrderDetail_CountOrderItemsByOrderID_Call {
	_c.Call.Return(count, err)
	return _c
}

func (_c *IOrderItemServiceForOrderDetail_CountOrderItemsByOrderID_Call) RunAndReturn(run func(context.Context, database.Ext, string) (int, error)) *IOrderItemServiceForOrderDetail_CountOrderItemsByOrderID_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrderItemsByOrderIDWithPaging provides a mock function with given fields: ctx, db, orderID, from, limit
func (_m *IOrderItemServiceForOrderDetail) GetOrderItemsByOrderIDWithPaging(ctx context.Context, db database.Ext, orderID string, from int64, limit int64) ([]entities.OrderItem, error) {
	ret := _m.Called(ctx, db, orderID, from, limit)

	var r0 []entities.OrderItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string, int64, int64) ([]entities.OrderItem, error)); ok {
		return rf(ctx, db, orderID, from, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string, int64, int64) []entities.OrderItem); ok {
		r0 = rf(ctx, db, orderID, from, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.OrderItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.Ext, string, int64, int64) error); ok {
		r1 = rf(ctx, db, orderID, from, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IOrderItemServiceForOrderDetail_GetOrderItemsByOrderIDWithPaging_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrderItemsByOrderIDWithPaging'
type IOrderItemServiceForOrderDetail_GetOrderItemsByOrderIDWithPaging_Call struct {
	*mock.Call
}

// GetOrderItemsByOrderIDWithPaging is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.Ext
//   - orderID string
//   - from int64
//   - limit int64
func (_e *IOrderItemServiceForOrderDetail_Expecter) GetOrderItemsByOrderIDWithPaging(ctx interface{}, db interface{}, orderID interface{}, from interface{}, limit interface{}) *IOrderItemServiceForOrderDetail_GetOrderItemsByOrderIDWithPaging_Call {
	return &IOrderItemServiceForOrderDetail_GetOrderItemsByOrderIDWithPaging_Call{Call: _e.mock.On("GetOrderItemsByOrderIDWithPaging", ctx, db, orderID, from, limit)}
}

func (_c *IOrderItemServiceForOrderDetail_GetOrderItemsByOrderIDWithPaging_Call) Run(run func(ctx context.Context, db database.Ext, orderID string, from int64, limit int64)) *IOrderItemServiceForOrderDetail_GetOrderItemsByOrderIDWithPaging_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.Ext), args[2].(string), args[3].(int64), args[4].(int64))
	})
	return _c
}

func (_c *IOrderItemServiceForOrderDetail_GetOrderItemsByOrderIDWithPaging_Call) Return(orderItems []entities.OrderItem, err error) *IOrderItemServiceForOrderDetail_GetOrderItemsByOrderIDWithPaging_Call {
	_c.Call.Return(orderItems, err)
	return _c
}

func (_c *IOrderItemServiceForOrderDetail_GetOrderItemsByOrderIDWithPaging_Call) RunAndReturn(run func(context.Context, database.Ext, string, int64, int64) ([]entities.OrderItem, error)) *IOrderItemServiceForOrderDetail_GetOrderItemsByOrderIDWithPaging_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIOrderItemServiceForOrderDetail interface {
	mock.TestingT
	Cleanup(func())
}

// NewIOrderItemServiceForOrderDetail creates a new instance of IOrderItemServiceForOrderDetail. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIOrderItemServiceForOrderDetail(t mockConstructorTestingTNewIOrderItemServiceForOrderDetail) *IOrderItemServiceForOrderDetail {
	mock := &IOrderItemServiceForOrderDetail{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
