// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"

	utils "github.com/manabie-com/backend/internal/payment/utils"
)

// IBillItemServiceForOrderDetail is an autogenerated mock type for the IBillItemServiceForOrderDetail type
type IBillItemServiceForOrderDetail struct {
	mock.Mock
}

type IBillItemServiceForOrderDetail_Expecter struct {
	mock *mock.Mock
}

func (_m *IBillItemServiceForOrderDetail) EXPECT() *IBillItemServiceForOrderDetail_Expecter {
	return &IBillItemServiceForOrderDetail_Expecter{mock: &_m.Mock}
}

// BuildMapBillItemWithProductIDByOrderIDAndProductIDs provides a mock function with given fields: ctx, db, orderID, productIDs
func (_m *IBillItemServiceForOrderDetail) BuildMapBillItemWithProductIDByOrderIDAndProductIDs(ctx context.Context, db database.QueryExecer, orderID string, productIDs []string) (map[string]entities.BillItem, error) {
	ret := _m.Called(ctx, db, orderID, productIDs)

	var r0 map[string]entities.BillItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, []string) (map[string]entities.BillItem, error)); ok {
		return rf(ctx, db, orderID, productIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, []string) map[string]entities.BillItem); ok {
		r0 = rf(ctx, db, orderID, productIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]entities.BillItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, string, []string) error); ok {
		r1 = rf(ctx, db, orderID, productIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IBillItemServiceForOrderDetail_BuildMapBillItemWithProductIDByOrderIDAndProductIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildMapBillItemWithProductIDByOrderIDAndProductIDs'
type IBillItemServiceForOrderDetail_BuildMapBillItemWithProductIDByOrderIDAndProductIDs_Call struct {
	*mock.Call
}

// BuildMapBillItemWithProductIDByOrderIDAndProductIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - orderID string
//   - productIDs []string
func (_e *IBillItemServiceForOrderDetail_Expecter) BuildMapBillItemWithProductIDByOrderIDAndProductIDs(ctx interface{}, db interface{}, orderID interface{}, productIDs interface{}) *IBillItemServiceForOrderDetail_BuildMapBillItemWithProductIDByOrderIDAndProductIDs_Call {
	return &IBillItemServiceForOrderDetail_BuildMapBillItemWithProductIDByOrderIDAndProductIDs_Call{Call: _e.mock.On("BuildMapBillItemWithProductIDByOrderIDAndProductIDs", ctx, db, orderID, productIDs)}
}

func (_c *IBillItemServiceForOrderDetail_BuildMapBillItemWithProductIDByOrderIDAndProductIDs_Call) Run(run func(ctx context.Context, db database.QueryExecer, orderID string, productIDs []string)) *IBillItemServiceForOrderDetail_BuildMapBillItemWithProductIDByOrderIDAndProductIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(string), args[3].([]string))
	})
	return _c
}

func (_c *IBillItemServiceForOrderDetail_BuildMapBillItemWithProductIDByOrderIDAndProductIDs_Call) Return(mapProductIDAndBillItem map[string]entities.BillItem, err error) *IBillItemServiceForOrderDetail_BuildMapBillItemWithProductIDByOrderIDAndProductIDs_Call {
	_c.Call.Return(mapProductIDAndBillItem, err)
	return _c
}

func (_c *IBillItemServiceForOrderDetail_BuildMapBillItemWithProductIDByOrderIDAndProductIDs_Call) RunAndReturn(run func(context.Context, database.QueryExecer, string, []string) (map[string]entities.BillItem, error)) *IBillItemServiceForOrderDetail_BuildMapBillItemWithProductIDByOrderIDAndProductIDs_Call {
	_c.Call.Return(run)
	return _c
}

// GetBillItemDescriptionsByOrderIDWithPaging provides a mock function with given fields: ctx, db, orderID, from, limit
func (_m *IBillItemServiceForOrderDetail) GetBillItemDescriptionsByOrderIDWithPaging(ctx context.Context, db database.Ext, orderID string, from int64, limit int64) ([]utils.BillItemForRetrieveApi, int, error) {
	ret := _m.Called(ctx, db, orderID, from, limit)

	var r0 []utils.BillItemForRetrieveApi
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string, int64, int64) ([]utils.BillItemForRetrieveApi, int, error)); ok {
		return rf(ctx, db, orderID, from, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string, int64, int64) []utils.BillItemForRetrieveApi); ok {
		r0 = rf(ctx, db, orderID, from, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]utils.BillItemForRetrieveApi)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.Ext, string, int64, int64) int); ok {
		r1 = rf(ctx, db, orderID, from, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, database.Ext, string, int64, int64) error); ok {
		r2 = rf(ctx, db, orderID, from, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IBillItemServiceForOrderDetail_GetBillItemDescriptionsByOrderIDWithPaging_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBillItemDescriptionsByOrderIDWithPaging'
type IBillItemServiceForOrderDetail_GetBillItemDescriptionsByOrderIDWithPaging_Call struct {
	*mock.Call
}

// GetBillItemDescriptionsByOrderIDWithPaging is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.Ext
//   - orderID string
//   - from int64
//   - limit int64
func (_e *IBillItemServiceForOrderDetail_Expecter) GetBillItemDescriptionsByOrderIDWithPaging(ctx interface{}, db interface{}, orderID interface{}, from interface{}, limit interface{}) *IBillItemServiceForOrderDetail_GetBillItemDescriptionsByOrderIDWithPaging_Call {
	return &IBillItemServiceForOrderDetail_GetBillItemDescriptionsByOrderIDWithPaging_Call{Call: _e.mock.On("GetBillItemDescriptionsByOrderIDWithPaging", ctx, db, orderID, from, limit)}
}

func (_c *IBillItemServiceForOrderDetail_GetBillItemDescriptionsByOrderIDWithPaging_Call) Run(run func(ctx context.Context, db database.Ext, orderID string, from int64, limit int64)) *IBillItemServiceForOrderDetail_GetBillItemDescriptionsByOrderIDWithPaging_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.Ext), args[2].(string), args[3].(int64), args[4].(int64))
	})
	return _c
}

func (_c *IBillItemServiceForOrderDetail_GetBillItemDescriptionsByOrderIDWithPaging_Call) Return(billingDescriptions []utils.BillItemForRetrieveApi, total int, err error) *IBillItemServiceForOrderDetail_GetBillItemDescriptionsByOrderIDWithPaging_Call {
	_c.Call.Return(billingDescriptions, total, err)
	return _c
}

func (_c *IBillItemServiceForOrderDetail_GetBillItemDescriptionsByOrderIDWithPaging_Call) RunAndReturn(run func(context.Context, database.Ext, string, int64, int64) ([]utils.BillItemForRetrieveApi, int, error)) *IBillItemServiceForOrderDetail_GetBillItemDescriptionsByOrderIDWithPaging_Call {
	_c.Call.Return(run)
	return _c
}

// GetFirstBillItemsByOrderIDAndProductID provides a mock function with given fields: ctx, db, orderID, from, limit
func (_m *IBillItemServiceForOrderDetail) GetFirstBillItemsByOrderIDAndProductID(ctx context.Context, db database.Ext, orderID string, from int64, limit int64) ([]*entities.BillItem, int, error) {
	ret := _m.Called(ctx, db, orderID, from, limit)

	var r0 []*entities.BillItem
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string, int64, int64) ([]*entities.BillItem, int, error)); ok {
		return rf(ctx, db, orderID, from, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string, int64, int64) []*entities.BillItem); ok {
		r0 = rf(ctx, db, orderID, from, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.BillItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.Ext, string, int64, int64) int); ok {
		r1 = rf(ctx, db, orderID, from, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, database.Ext, string, int64, int64) error); ok {
		r2 = rf(ctx, db, orderID, from, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// IBillItemServiceForOrderDetail_GetFirstBillItemsByOrderIDAndProductID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFirstBillItemsByOrderIDAndProductID'
type IBillItemServiceForOrderDetail_GetFirstBillItemsByOrderIDAndProductID_Call struct {
	*mock.Call
}

// GetFirstBillItemsByOrderIDAndProductID is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.Ext
//   - orderID string
//   - from int64
//   - limit int64
func (_e *IBillItemServiceForOrderDetail_Expecter) GetFirstBillItemsByOrderIDAndProductID(ctx interface{}, db interface{}, orderID interface{}, from interface{}, limit interface{}) *IBillItemServiceForOrderDetail_GetFirstBillItemsByOrderIDAndProductID_Call {
	return &IBillItemServiceForOrderDetail_GetFirstBillItemsByOrderIDAndProductID_Call{Call: _e.mock.On("GetFirstBillItemsByOrderIDAndProductID", ctx, db, orderID, from, limit)}
}

func (_c *IBillItemServiceForOrderDetail_GetFirstBillItemsByOrderIDAndProductID_Call) Run(run func(ctx context.Context, db database.Ext, orderID string, from int64, limit int64)) *IBillItemServiceForOrderDetail_GetFirstBillItemsByOrderIDAndProductID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.Ext), args[2].(string), args[3].(int64), args[4].(int64))
	})
	return _c
}

func (_c *IBillItemServiceForOrderDetail_GetFirstBillItemsByOrderIDAndProductID_Call) Return(billItems []*entities.BillItem, total int, err error) *IBillItemServiceForOrderDetail_GetFirstBillItemsByOrderIDAndProductID_Call {
	_c.Call.Return(billItems, total, err)
	return _c
}

func (_c *IBillItemServiceForOrderDetail_GetFirstBillItemsByOrderIDAndProductID_Call) RunAndReturn(run func(context.Context, database.Ext, string, int64, int64) ([]*entities.BillItem, int, error)) *IBillItemServiceForOrderDetail_GetFirstBillItemsByOrderIDAndProductID_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIBillItemServiceForOrderDetail interface {
	mock.TestingT
	Cleanup(func())
}

// NewIBillItemServiceForOrderDetail creates a new instance of IBillItemServiceForOrderDetail. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIBillItemServiceForOrderDetail(t mockConstructorTestingTNewIBillItemServiceForOrderDetail) *IBillItemServiceForOrderDetail {
	mock := &IBillItemServiceForOrderDetail{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
