// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"
)

// IBillingSchedulePeriodRepoForDiscountEventSubscription is an autogenerated mock type for the IBillingSchedulePeriodRepoForDiscountEventSubscription type
type IBillingSchedulePeriodRepoForDiscountEventSubscription struct {
	mock.Mock
}

// GetAllBillingPeriodsByBillingScheduleID provides a mock function with given fields: ctx, db, billingScheduleID
func (_m *IBillingSchedulePeriodRepoForDiscountEventSubscription) GetAllBillingPeriodsByBillingScheduleID(ctx context.Context, db database.QueryExecer, billingScheduleID string) ([]entities.BillingSchedulePeriod, error) {
	ret := _m.Called(ctx, db, billingScheduleID)

	var r0 []entities.BillingSchedulePeriod
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) ([]entities.BillingSchedulePeriod, error)); ok {
		return rf(ctx, db, billingScheduleID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) []entities.BillingSchedulePeriod); ok {
		r0 = rf(ctx, db, billingScheduleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.BillingSchedulePeriod)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, string) error); ok {
		r1 = rf(ctx, db, billingScheduleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIBillingSchedulePeriodRepoForDiscountEventSubscription interface {
	mock.TestingT
	Cleanup(func())
}

// NewIBillingSchedulePeriodRepoForDiscountEventSubscription creates a new instance of IBillingSchedulePeriodRepoForDiscountEventSubscription. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIBillingSchedulePeriodRepoForDiscountEventSubscription(t mockConstructorTestingTNewIBillingSchedulePeriodRepoForDiscountEventSubscription) *IBillingSchedulePeriodRepoForDiscountEventSubscription {
	mock := &IBillingSchedulePeriodRepoForDiscountEventSubscription{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
