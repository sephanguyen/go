// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	mock "github.com/stretchr/testify/mock"

	pmpb "github.com/manabie-com/backend/pkg/manabuf/payment/v1"
)

// ILocationServiceForCreatingOrder is an autogenerated mock type for the ILocationServiceForCreatingOrder type
type ILocationServiceForCreatingOrder struct {
	mock.Mock
}

// GetLowestGrantedLocationsForCreatingOrder provides a mock function with given fields: ctx, db, req
func (_m *ILocationServiceForCreatingOrder) GetLowestGrantedLocationsForCreatingOrder(ctx context.Context, db database.Ext, req *pmpb.GetLocationsForCreatingOrderRequest) ([]*pmpb.LocationInfo, error) {
	ret := _m.Called(ctx, db, req)

	var r0 []*pmpb.LocationInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, *pmpb.GetLocationsForCreatingOrderRequest) ([]*pmpb.LocationInfo, error)); ok {
		return rf(ctx, db, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, *pmpb.GetLocationsForCreatingOrderRequest) []*pmpb.LocationInfo); ok {
		r0 = rf(ctx, db, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pmpb.LocationInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.Ext, *pmpb.GetLocationsForCreatingOrderRequest) error); ok {
		r1 = rf(ctx, db, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewILocationServiceForCreatingOrder interface {
	mock.TestingT
	Cleanup(func())
}

// NewILocationServiceForCreatingOrder creates a new instance of ILocationServiceForCreatingOrder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewILocationServiceForCreatingOrder(t mockConstructorTestingTNewILocationServiceForCreatingOrder) *ILocationServiceForCreatingOrder {
	mock := &ILocationServiceForCreatingOrder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
