// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	mock "github.com/stretchr/testify/mock"

	npb "github.com/manabie-com/backend/pkg/manabuf/nats/v1"

	utils "github.com/manabie-com/backend/internal/payment/utils"
)

// IStudentPackageServiceForVoidOrder is an autogenerated mock type for the IStudentPackageServiceForVoidOrder type
type IStudentPackageServiceForVoidOrder struct {
	mock.Mock
}

// VoidStudentPackageAndStudentCourse provides a mock function with given fields: ctx, db, voidStudentPackageArgs
func (_m *IStudentPackageServiceForVoidOrder) VoidStudentPackageAndStudentCourse(ctx context.Context, db database.QueryExecer, voidStudentPackageArgs utils.VoidStudentPackageArgs) ([]*npb.EventStudentPackage, error) {
	ret := _m.Called(ctx, db, voidStudentPackageArgs)

	var r0 []*npb.EventStudentPackage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.VoidStudentPackageArgs) ([]*npb.EventStudentPackage, error)); ok {
		return rf(ctx, db, voidStudentPackageArgs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.VoidStudentPackageArgs) []*npb.EventStudentPackage); ok {
		r0 = rf(ctx, db, voidStudentPackageArgs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*npb.EventStudentPackage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, utils.VoidStudentPackageArgs) error); ok {
		r1 = rf(ctx, db, voidStudentPackageArgs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIStudentPackageServiceForVoidOrder interface {
	mock.TestingT
	Cleanup(func())
}

// NewIStudentPackageServiceForVoidOrder creates a new instance of IStudentPackageServiceForVoidOrder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIStudentPackageServiceForVoidOrder(t mockConstructorTestingTNewIStudentPackageServiceForVoidOrder) *IStudentPackageServiceForVoidOrder {
	mock := &IStudentPackageServiceForVoidOrder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
