// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"
)

// IOrderItemCourseRepoForDiscountEventSubscription is an autogenerated mock type for the IOrderItemCourseRepoForDiscountEventSubscription type
type IOrderItemCourseRepoForDiscountEventSubscription struct {
	mock.Mock
}

// GetMapOrderItemCourseByOrderIDAndPackageID provides a mock function with given fields: ctx, db, orderID, packageID
func (_m *IOrderItemCourseRepoForDiscountEventSubscription) GetMapOrderItemCourseByOrderIDAndPackageID(ctx context.Context, db database.QueryExecer, orderID string, packageID string) (map[string]entities.OrderItemCourse, error) {
	ret := _m.Called(ctx, db, orderID, packageID)

	var r0 map[string]entities.OrderItemCourse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, string) (map[string]entities.OrderItemCourse, error)); ok {
		return rf(ctx, db, orderID, packageID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, string) map[string]entities.OrderItemCourse); ok {
		r0 = rf(ctx, db, orderID, packageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]entities.OrderItemCourse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, string, string) error); ok {
		r1 = rf(ctx, db, orderID, packageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIOrderItemCourseRepoForDiscountEventSubscription interface {
	mock.TestingT
	Cleanup(func())
}

// NewIOrderItemCourseRepoForDiscountEventSubscription creates a new instance of IOrderItemCourseRepoForDiscountEventSubscription. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIOrderItemCourseRepoForDiscountEventSubscription(t mockConstructorTestingTNewIOrderItemCourseRepoForDiscountEventSubscription) *IOrderItemCourseRepoForDiscountEventSubscription {
	mock := &IOrderItemCourseRepoForDiscountEventSubscription{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
