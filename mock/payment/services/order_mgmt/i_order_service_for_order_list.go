// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"

	pmpb "github.com/manabie-com/backend/pkg/manabuf/payment/v1"
)

// IOrderServiceForOrderList is an autogenerated mock type for the IOrderServiceForOrderList type
type IOrderServiceForOrderList struct {
	mock.Mock
}

// GetListOfOrdersByFilter provides a mock function with given fields: ctx, db, req, from, limit
func (_m *IOrderServiceForOrderList) GetListOfOrdersByFilter(ctx context.Context, db database.QueryExecer, req *pmpb.RetrieveListOfOrdersRequest, from int64, limit int64) ([]entities.Order, error) {
	ret := _m.Called(ctx, db, req, from, limit)

	var r0 []entities.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, *pmpb.RetrieveListOfOrdersRequest, int64, int64) ([]entities.Order, error)); ok {
		return rf(ctx, db, req, from, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, *pmpb.RetrieveListOfOrdersRequest, int64, int64) []entities.Order); ok {
		r0 = rf(ctx, db, req, from, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, *pmpb.RetrieveListOfOrdersRequest, int64, int64) error); ok {
		r1 = rf(ctx, db, req, from, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderCreatorsByOrderIDs provides a mock function with given fields: ctx, db, orderIDs
func (_m *IOrderServiceForOrderList) GetOrderCreatorsByOrderIDs(ctx context.Context, db database.QueryExecer, orderIDs []string) ([]entities.OrderCreator, error) {
	ret := _m.Called(ctx, db, orderIDs)

	var r0 []entities.OrderCreator
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, []string) ([]entities.OrderCreator, error)); ok {
		return rf(ctx, db, orderIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, []string) []entities.OrderCreator); ok {
		r0 = rf(ctx, db, orderIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.OrderCreator)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, []string) error); ok {
		r1 = rf(ctx, db, orderIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrderStatByFilter provides a mock function with given fields: ctx, db, req
func (_m *IOrderServiceForOrderList) GetOrderStatByFilter(ctx context.Context, db database.QueryExecer, req *pmpb.RetrieveListOfOrdersRequest) (entities.OrderStats, error) {
	ret := _m.Called(ctx, db, req)

	var r0 entities.OrderStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, *pmpb.RetrieveListOfOrdersRequest) (entities.OrderStats, error)); ok {
		return rf(ctx, db, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, *pmpb.RetrieveListOfOrdersRequest) entities.OrderStats); ok {
		r0 = rf(ctx, db, req)
	} else {
		r0 = ret.Get(0).(entities.OrderStats)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, *pmpb.RetrieveListOfOrdersRequest) error); ok {
		r1 = rf(ctx, db, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIOrderServiceForOrderList interface {
	mock.TestingT
	Cleanup(func())
}

// NewIOrderServiceForOrderList creates a new instance of IOrderServiceForOrderList. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIOrderServiceForOrderList(t mockConstructorTestingTNewIOrderServiceForOrderList) *IOrderServiceForOrderList {
	mock := &IOrderServiceForOrderList{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
