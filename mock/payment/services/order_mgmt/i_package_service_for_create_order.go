// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	mock "github.com/stretchr/testify/mock"

	utils "github.com/manabie-com/backend/internal/payment/utils"
)

// IPackageServiceForCreateOrder is an autogenerated mock type for the IPackageServiceForCreateOrder type
type IPackageServiceForCreateOrder struct {
	mock.Mock
}

// VerifyPackageDataAndUpsertRelateData provides a mock function with given fields: ctx, db, orderItemData
func (_m *IPackageServiceForCreateOrder) VerifyPackageDataAndUpsertRelateData(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) (utils.PackageInfo, error) {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 utils.PackageInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) (utils.PackageInfo, error)); ok {
		return rf(ctx, db, orderItemData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) utils.PackageInfo); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Get(0).(utils.PackageInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r1 = rf(ctx, db, orderItemData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIPackageServiceForCreateOrder interface {
	mock.TestingT
	Cleanup(func())
}

// NewIPackageServiceForCreateOrder creates a new instance of IPackageServiceForCreateOrder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIPackageServiceForCreateOrder(t mockConstructorTestingTNewIPackageServiceForCreateOrder) *IPackageServiceForCreateOrder {
	mock := &IPackageServiceForCreateOrder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
