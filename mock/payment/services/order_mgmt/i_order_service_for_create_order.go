// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"

	pmpb "github.com/manabie-com/backend/pkg/manabuf/payment/v1"
)

// IOrderServiceForCreateOrder is an autogenerated mock type for the IOrderServiceForCreateOrder type
type IOrderServiceForCreateOrder struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, db, req, studentName, orderStatus
func (_m *IOrderServiceForCreateOrder) CreateOrder(ctx context.Context, db database.QueryExecer, req *pmpb.CreateOrderRequest, studentName string, orderStatus pmpb.OrderStatus) (entities.Order, error) {
	ret := _m.Called(ctx, db, req, studentName, orderStatus)

	var r0 entities.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, *pmpb.CreateOrderRequest, string, pmpb.OrderStatus) (entities.Order, error)); ok {
		return rf(ctx, db, req, studentName, orderStatus)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, *pmpb.CreateOrderRequest, string, pmpb.OrderStatus) entities.Order); ok {
		r0 = rf(ctx, db, req, studentName, orderStatus)
	} else {
		r0 = ret.Get(0).(entities.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, *pmpb.CreateOrderRequest, string, pmpb.OrderStatus) error); ok {
		r1 = rf(ctx, db, req, studentName, orderStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLOAOrderForResume provides a mock function with given fields: ctx, db, studentID, locationID
func (_m *IOrderServiceForCreateOrder) GetLOAOrderForResume(ctx context.Context, db database.QueryExecer, studentID string, locationID string) (entities.Order, error) {
	ret := _m.Called(ctx, db, studentID, locationID)

	var r0 entities.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, string) (entities.Order, error)); ok {
		return rf(ctx, db, studentID, locationID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, string) entities.Order); ok {
		r0 = rf(ctx, db, studentID, locationID)
	} else {
		r0 = ret.Get(0).(entities.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, string, string) error); ok {
		r1 = rf(ctx, db, studentID, locationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIOrderServiceForCreateOrder interface {
	mock.TestingT
	Cleanup(func())
}

// NewIOrderServiceForCreateOrder creates a new instance of IOrderServiceForCreateOrder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIOrderServiceForCreateOrder(t mockConstructorTestingTNewIOrderServiceForCreateOrder) *IOrderServiceForCreateOrder {
	mock := &IOrderServiceForCreateOrder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
