// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// IStudentProductServiceForUniqueProduct is an autogenerated mock type for the IStudentProductServiceForUniqueProduct type
type IStudentProductServiceForUniqueProduct struct {
	mock.Mock
}

// EndDateOfUniqueRecurringProduct provides a mock function with given fields: ctx, db, productID, endTime
func (_m *IStudentProductServiceForUniqueProduct) EndDateOfUniqueRecurringProduct(ctx context.Context, db database.QueryExecer, productID string, endTime time.Time) (time.Time, error) {
	ret := _m.Called(ctx, db, productID, endTime)

	var r0 time.Time
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, time.Time) (time.Time, error)); ok {
		return rf(ctx, db, productID, endTime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, time.Time) time.Time); ok {
		r0 = rf(ctx, db, productID, endTime)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, string, time.Time) error); ok {
		r1 = rf(ctx, db, productID, endTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUniqueProductsByStudentID provides a mock function with given fields: ctx, db, studentID
func (_m *IStudentProductServiceForUniqueProduct) GetUniqueProductsByStudentID(ctx context.Context, db database.QueryExecer, studentID string) ([]*entities.StudentProduct, error) {
	ret := _m.Called(ctx, db, studentID)

	var r0 []*entities.StudentProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) ([]*entities.StudentProduct, error)); ok {
		return rf(ctx, db, studentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) []*entities.StudentProduct); ok {
		r0 = rf(ctx, db, studentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.StudentProduct)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, string) error); ok {
		r1 = rf(ctx, db, studentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUniqueProductsByStudentIDs provides a mock function with given fields: ctx, db, studentID
func (_m *IStudentProductServiceForUniqueProduct) GetUniqueProductsByStudentIDs(ctx context.Context, db database.QueryExecer, studentID []string) (map[string][]*entities.StudentProduct, error) {
	ret := _m.Called(ctx, db, studentID)

	var r0 map[string][]*entities.StudentProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, []string) (map[string][]*entities.StudentProduct, error)); ok {
		return rf(ctx, db, studentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, []string) map[string][]*entities.StudentProduct); ok {
		r0 = rf(ctx, db, studentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]*entities.StudentProduct)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, []string) error); ok {
		r1 = rf(ctx, db, studentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIStudentProductServiceForUniqueProduct interface {
	mock.TestingT
	Cleanup(func())
}

// NewIStudentProductServiceForUniqueProduct creates a new instance of IStudentProductServiceForUniqueProduct. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIStudentProductServiceForUniqueProduct(t mockConstructorTestingTNewIStudentProductServiceForUniqueProduct) *IStudentProductServiceForUniqueProduct {
	mock := &IStudentProductServiceForUniqueProduct{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
