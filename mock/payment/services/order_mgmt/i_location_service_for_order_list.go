// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"
)

// ILocationServiceForOrderList is an autogenerated mock type for the ILocationServiceForOrderList type
type ILocationServiceForOrderList struct {
	mock.Mock
}

// GetLocationsByIDs provides a mock function with given fields: ctx, db, locationIDs
func (_m *ILocationServiceForOrderList) GetLocationsByIDs(ctx context.Context, db database.Ext, locationIDs []string) ([]entities.Location, error) {
	ret := _m.Called(ctx, db, locationIDs)

	var r0 []entities.Location
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, []string) ([]entities.Location, error)); ok {
		return rf(ctx, db, locationIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, []string) []entities.Location); ok {
		r0 = rf(ctx, db, locationIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Location)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.Ext, []string) error); ok {
		r1 = rf(ctx, db, locationIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewILocationServiceForOrderList interface {
	mock.TestingT
	Cleanup(func())
}

// NewILocationServiceForOrderList creates a new instance of ILocationServiceForOrderList. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewILocationServiceForOrderList(t mockConstructorTestingTNewILocationServiceForOrderList) *ILocationServiceForOrderList {
	mock := &ILocationServiceForOrderList{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
