// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	pmpb "github.com/manabie-com/backend/pkg/manabuf/payment/v1"
)

// OrderServiceServiceForDiscountEventSubscription is an autogenerated mock type for the OrderServiceServiceForDiscountEventSubscription type
type OrderServiceServiceForDiscountEventSubscription struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, req
func (_m *OrderServiceServiceForDiscountEventSubscription) CreateOrder(ctx context.Context, req *pmpb.CreateOrderRequest) (*pmpb.CreateOrderResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *pmpb.CreateOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pmpb.CreateOrderRequest) (*pmpb.CreateOrderResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pmpb.CreateOrderRequest) *pmpb.CreateOrderResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pmpb.CreateOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pmpb.CreateOrderRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOrderServiceServiceForDiscountEventSubscription interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderServiceServiceForDiscountEventSubscription creates a new instance of OrderServiceServiceForDiscountEventSubscription. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderServiceServiceForDiscountEventSubscription(t mockConstructorTestingTNewOrderServiceServiceForDiscountEventSubscription) *OrderServiceServiceForDiscountEventSubscription {
	mock := &OrderServiceServiceForDiscountEventSubscription{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
