// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"

	utils "github.com/manabie-com/backend/internal/payment/utils"
)

// IBillItemServiceForStudentBilling is an autogenerated mock type for the IBillItemServiceForStudentBilling type
type IBillItemServiceForStudentBilling struct {
	mock.Mock
}

// GetBillItemDescriptionByStudentIDAndLocationIDs provides a mock function with given fields: ctx, db, studentID, locationIDs, from, limit
func (_m *IBillItemServiceForStudentBilling) GetBillItemDescriptionByStudentIDAndLocationIDs(ctx context.Context, db database.Ext, studentID string, locationIDs []string, from int64, limit int64) ([]utils.BillItemForRetrieveApi, int, error) {
	ret := _m.Called(ctx, db, studentID, locationIDs, from, limit)

	var r0 []utils.BillItemForRetrieveApi
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string, []string, int64, int64) ([]utils.BillItemForRetrieveApi, int, error)); ok {
		return rf(ctx, db, studentID, locationIDs, from, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string, []string, int64, int64) []utils.BillItemForRetrieveApi); ok {
		r0 = rf(ctx, db, studentID, locationIDs, from, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]utils.BillItemForRetrieveApi)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.Ext, string, []string, int64, int64) int); ok {
		r1 = rf(ctx, db, studentID, locationIDs, from, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, database.Ext, string, []string, int64, int64) error); ok {
		r2 = rf(ctx, db, studentID, locationIDs, from, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetBillItemInfoByOrderIDAndUniqueByProductID provides a mock function with given fields: ctx, db, orderID
func (_m *IBillItemServiceForStudentBilling) GetBillItemInfoByOrderIDAndUniqueByProductID(ctx context.Context, db database.Ext, orderID string) ([]*entities.BillItem, error) {
	ret := _m.Called(ctx, db, orderID)

	var r0 []*entities.BillItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string) ([]*entities.BillItem, error)); ok {
		return rf(ctx, db, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string) []*entities.BillItem); ok {
		r0 = rf(ctx, db, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.BillItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.Ext, string) error); ok {
		r1 = rf(ctx, db, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestBillItemByStudentProductIDForStudentBilling provides a mock function with given fields: ctx, db, studentProductID
func (_m *IBillItemServiceForStudentBilling) GetLatestBillItemByStudentProductIDForStudentBilling(ctx context.Context, db database.Ext, studentProductID string) (entities.BillItem, error) {
	ret := _m.Called(ctx, db, studentProductID)

	var r0 entities.BillItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string) (entities.BillItem, error)); ok {
		return rf(ctx, db, studentProductID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string) entities.BillItem); ok {
		r0 = rf(ctx, db, studentProductID)
	} else {
		r0 = ret.Get(0).(entities.BillItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.Ext, string) error); ok {
		r1 = rf(ctx, db, studentProductID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMapPastBillItemInfo provides a mock function with given fields: ctx, db, studentProductIDs, studentID
func (_m *IBillItemServiceForStudentBilling) GetMapPastBillItemInfo(ctx context.Context, db database.QueryExecer, studentProductIDs []string, studentID string) (map[string]*entities.BillItem, error) {
	ret := _m.Called(ctx, db, studentProductIDs, studentID)

	var r0 map[string]*entities.BillItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, []string, string) (map[string]*entities.BillItem, error)); ok {
		return rf(ctx, db, studentProductIDs, studentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, []string, string) map[string]*entities.BillItem); ok {
		r0 = rf(ctx, db, studentProductIDs, studentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*entities.BillItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, []string, string) error); ok {
		r1 = rf(ctx, db, studentProductIDs, studentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMapPresentAndFutureBillItemInfo provides a mock function with given fields: ctx, db, studentProductIDs, studentID
func (_m *IBillItemServiceForStudentBilling) GetMapPresentAndFutureBillItemInfo(ctx context.Context, db database.QueryExecer, studentProductIDs []string, studentID string) (map[string]*entities.BillItem, error) {
	ret := _m.Called(ctx, db, studentProductIDs, studentID)

	var r0 map[string]*entities.BillItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, []string, string) (map[string]*entities.BillItem, error)); ok {
		return rf(ctx, db, studentProductIDs, studentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, []string, string) map[string]*entities.BillItem); ok {
		r0 = rf(ctx, db, studentProductIDs, studentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*entities.BillItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, []string, string) error); ok {
		r1 = rf(ctx, db, studentProductIDs, studentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUpcomingBilling provides a mock function with given fields: ctx, db, studentProductID, studentID
func (_m *IBillItemServiceForStudentBilling) GetUpcomingBilling(ctx context.Context, db database.QueryExecer, studentProductID string, studentID string) (*entities.BillItem, error) {
	ret := _m.Called(ctx, db, studentProductID, studentID)

	var r0 *entities.BillItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, string) (*entities.BillItem, error)); ok {
		return rf(ctx, db, studentProductID, studentID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, string) *entities.BillItem); ok {
		r0 = rf(ctx, db, studentProductID, studentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.BillItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, string, string) error); ok {
		r1 = rf(ctx, db, studentProductID, studentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIBillItemServiceForStudentBilling interface {
	mock.TestingT
	Cleanup(func())
}

// NewIBillItemServiceForStudentBilling creates a new instance of IBillItemServiceForStudentBilling. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIBillItemServiceForStudentBilling(t mockConstructorTestingTNewIBillItemServiceForStudentBilling) *IBillItemServiceForStudentBilling {
	mock := &IBillItemServiceForStudentBilling{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
