// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	mock "github.com/stretchr/testify/mock"
)

// IPackageServiceForStudentBilling is an autogenerated mock type for the IPackageServiceForStudentBilling type
type IPackageServiceForStudentBilling struct {
	mock.Mock
}

// GetTotalAssociatedPackageWithCourseIDAndPackageID provides a mock function with given fields: ctx, db, packageID, courseIDs
func (_m *IPackageServiceForStudentBilling) GetTotalAssociatedPackageWithCourseIDAndPackageID(ctx context.Context, db database.Ext, packageID string, courseIDs []string) (int32, error) {
	ret := _m.Called(ctx, db, packageID, courseIDs)

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string, []string) (int32, error)); ok {
		return rf(ctx, db, packageID, courseIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string, []string) int32); ok {
		r0 = rf(ctx, db, packageID, courseIDs)
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.Ext, string, []string) error); ok {
		r1 = rf(ctx, db, packageID, courseIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIPackageServiceForStudentBilling interface {
	mock.TestingT
	Cleanup(func())
}

// NewIPackageServiceForStudentBilling creates a new instance of IPackageServiceForStudentBilling. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIPackageServiceForStudentBilling(t mockConstructorTestingTNewIPackageServiceForStudentBilling) *IPackageServiceForStudentBilling {
	mock := &IPackageServiceForStudentBilling{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
