// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"
)

// IClassServiceForCourseMgMt is an autogenerated mock type for the IClassServiceForCourseMgMt type
type IClassServiceForCourseMgMt struct {
	mock.Mock
}

// GetMapClassWithLocationByClassIDs provides a mock function with given fields: ctx, db, classIDs
func (_m *IClassServiceForCourseMgMt) GetMapClassWithLocationByClassIDs(ctx context.Context, db database.QueryExecer, classIDs []string) (map[string]entities.Class, error) {
	ret := _m.Called(ctx, db, classIDs)

	var r0 map[string]entities.Class
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, []string) (map[string]entities.Class, error)); ok {
		return rf(ctx, db, classIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, []string) map[string]entities.Class); ok {
		r0 = rf(ctx, db, classIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]entities.Class)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, []string) error); ok {
		r1 = rf(ctx, db, classIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIClassServiceForCourseMgMt interface {
	mock.TestingT
	Cleanup(func())
}

// NewIClassServiceForCourseMgMt creates a new instance of IClassServiceForCourseMgMt. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIClassServiceForCourseMgMt(t mockConstructorTestingTNewIClassServiceForCourseMgMt) *IClassServiceForCourseMgMt {
	mock := &IClassServiceForCourseMgMt{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
