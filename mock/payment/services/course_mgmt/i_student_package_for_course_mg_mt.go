// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"

	npb "github.com/manabie-com/backend/pkg/manabuf/nats/v1"

	pmpb "github.com/manabie-com/backend/pkg/manabuf/payment/v1"

	utils "github.com/manabie-com/backend/internal/payment/utils"
)

// IStudentPackageForCourseMgMt is an autogenerated mock type for the IStudentPackageForCourseMgMt type
type IStudentPackageForCourseMgMt struct {
	mock.Mock
}

// DeleteStudentClass provides a mock function with given fields: ctx, db, mapStudentCourse, mapClass, importedStudentClass
func (_m *IStudentPackageForCourseMgMt) DeleteStudentClass(ctx context.Context, db database.QueryExecer, mapStudentCourse map[string]entities.StudentPackageAccessPath, mapClass map[string]entities.Class, importedStudentClass []utils.ImportedStudentClassRow) ([]*npb.EventStudentPackageV2, []*pmpb.ImportStudentClassesResponse_ImportStudentClassesError) {
	ret := _m.Called(ctx, db, mapStudentCourse, mapClass, importedStudentClass)

	var r0 []*npb.EventStudentPackageV2
	var r1 []*pmpb.ImportStudentClassesResponse_ImportStudentClassesError
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, map[string]entities.StudentPackageAccessPath, map[string]entities.Class, []utils.ImportedStudentClassRow) ([]*npb.EventStudentPackageV2, []*pmpb.ImportStudentClassesResponse_ImportStudentClassesError)); ok {
		return rf(ctx, db, mapStudentCourse, mapClass, importedStudentClass)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, map[string]entities.StudentPackageAccessPath, map[string]entities.Class, []utils.ImportedStudentClassRow) []*npb.EventStudentPackageV2); ok {
		r0 = rf(ctx, db, mapStudentCourse, mapClass, importedStudentClass)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*npb.EventStudentPackageV2)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, map[string]entities.StudentPackageAccessPath, map[string]entities.Class, []utils.ImportedStudentClassRow) []*pmpb.ImportStudentClassesResponse_ImportStudentClassesError); ok {
		r1 = rf(ctx, db, mapStudentCourse, mapClass, importedStudentClass)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*pmpb.ImportStudentClassesResponse_ImportStudentClassesError)
		}
	}

	return r0, r1
}

// GetMapStudentCourseWithStudentPackageIDByIDs provides a mock function with given fields: ctx, db, studentIDs
func (_m *IStudentPackageForCourseMgMt) GetMapStudentCourseWithStudentPackageIDByIDs(ctx context.Context, db database.QueryExecer, studentIDs []string) (map[string]entities.StudentPackageAccessPath, error) {
	ret := _m.Called(ctx, db, studentIDs)

	var r0 map[string]entities.StudentPackageAccessPath
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, []string) (map[string]entities.StudentPackageAccessPath, error)); ok {
		return rf(ctx, db, studentIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, []string) map[string]entities.StudentPackageAccessPath); ok {
		r0 = rf(ctx, db, studentIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]entities.StudentPackageAccessPath)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, []string) error); ok {
		r1 = rf(ctx, db, studentIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTimeStudentPackageForManualFlow provides a mock function with given fields: ctx, db, studentID, studentCourse
func (_m *IStudentPackageForCourseMgMt) UpdateTimeStudentPackageForManualFlow(ctx context.Context, db database.QueryExecer, studentID string, studentCourse *pmpb.StudentCourseData) (*npb.EventStudentPackage, error) {
	ret := _m.Called(ctx, db, studentID, studentCourse)

	var r0 *npb.EventStudentPackage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, *pmpb.StudentCourseData) (*npb.EventStudentPackage, error)); ok {
		return rf(ctx, db, studentID, studentCourse)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, *pmpb.StudentCourseData) *npb.EventStudentPackage); ok {
		r0 = rf(ctx, db, studentID, studentCourse)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*npb.EventStudentPackage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, string, *pmpb.StudentCourseData) error); ok {
		r1 = rf(ctx, db, studentID, studentCourse)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertStudentClass provides a mock function with given fields: ctx, db, mapStudentCourse, mapClass, importedStudentClass
func (_m *IStudentPackageForCourseMgMt) UpsertStudentClass(ctx context.Context, db database.QueryExecer, mapStudentCourse map[string]entities.StudentPackageAccessPath, mapClass map[string]entities.Class, importedStudentClass []utils.ImportedStudentClassRow) ([]*npb.EventStudentPackageV2, []*pmpb.ImportStudentClassesResponse_ImportStudentClassesError) {
	ret := _m.Called(ctx, db, mapStudentCourse, mapClass, importedStudentClass)

	var r0 []*npb.EventStudentPackageV2
	var r1 []*pmpb.ImportStudentClassesResponse_ImportStudentClassesError
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, map[string]entities.StudentPackageAccessPath, map[string]entities.Class, []utils.ImportedStudentClassRow) ([]*npb.EventStudentPackageV2, []*pmpb.ImportStudentClassesResponse_ImportStudentClassesError)); ok {
		return rf(ctx, db, mapStudentCourse, mapClass, importedStudentClass)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, map[string]entities.StudentPackageAccessPath, map[string]entities.Class, []utils.ImportedStudentClassRow) []*npb.EventStudentPackageV2); ok {
		r0 = rf(ctx, db, mapStudentCourse, mapClass, importedStudentClass)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*npb.EventStudentPackageV2)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, map[string]entities.StudentPackageAccessPath, map[string]entities.Class, []utils.ImportedStudentClassRow) []*pmpb.ImportStudentClassesResponse_ImportStudentClassesError); ok {
		r1 = rf(ctx, db, mapStudentCourse, mapClass, importedStudentClass)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*pmpb.ImportStudentClassesResponse_ImportStudentClassesError)
		}
	}

	return r0, r1
}

// UpsertStudentPackage provides a mock function with given fields: ctx, db, studentID, mapLocationAccessWithStudentID, mapLocationAccessWithCourseID, mapStudentCourseWithStudentPackageAccessPath, importedStudentCourseRows
func (_m *IStudentPackageForCourseMgMt) UpsertStudentPackage(ctx context.Context, db database.QueryExecer, studentID string, mapLocationAccessWithStudentID map[string]interface{}, mapLocationAccessWithCourseID map[string]interface{}, mapStudentCourseWithStudentPackageAccessPath map[string]entities.StudentPackageAccessPath, importedStudentCourseRows []utils.ImportedStudentCourseRow) ([]*npb.EventStudentPackage, []*pmpb.ImportStudentCoursesResponse_ImportStudentCoursesError) {
	ret := _m.Called(ctx, db, studentID, mapLocationAccessWithStudentID, mapLocationAccessWithCourseID, mapStudentCourseWithStudentPackageAccessPath, importedStudentCourseRows)

	var r0 []*npb.EventStudentPackage
	var r1 []*pmpb.ImportStudentCoursesResponse_ImportStudentCoursesError
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, map[string]interface{}, map[string]interface{}, map[string]entities.StudentPackageAccessPath, []utils.ImportedStudentCourseRow) ([]*npb.EventStudentPackage, []*pmpb.ImportStudentCoursesResponse_ImportStudentCoursesError)); ok {
		return rf(ctx, db, studentID, mapLocationAccessWithStudentID, mapLocationAccessWithCourseID, mapStudentCourseWithStudentPackageAccessPath, importedStudentCourseRows)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, map[string]interface{}, map[string]interface{}, map[string]entities.StudentPackageAccessPath, []utils.ImportedStudentCourseRow) []*npb.EventStudentPackage); ok {
		r0 = rf(ctx, db, studentID, mapLocationAccessWithStudentID, mapLocationAccessWithCourseID, mapStudentCourseWithStudentPackageAccessPath, importedStudentCourseRows)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*npb.EventStudentPackage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, string, map[string]interface{}, map[string]interface{}, map[string]entities.StudentPackageAccessPath, []utils.ImportedStudentCourseRow) []*pmpb.ImportStudentCoursesResponse_ImportStudentCoursesError); ok {
		r1 = rf(ctx, db, studentID, mapLocationAccessWithStudentID, mapLocationAccessWithCourseID, mapStudentCourseWithStudentPackageAccessPath, importedStudentCourseRows)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*pmpb.ImportStudentCoursesResponse_ImportStudentCoursesError)
		}
	}

	return r0, r1
}

// UpsertStudentPackageForManualFlow provides a mock function with given fields: ctx, db, studentID, studentCourse
func (_m *IStudentPackageForCourseMgMt) UpsertStudentPackageForManualFlow(ctx context.Context, db database.QueryExecer, studentID string, studentCourse *pmpb.StudentCourseData) (*npb.EventStudentPackage, error) {
	ret := _m.Called(ctx, db, studentID, studentCourse)

	var r0 *npb.EventStudentPackage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, *pmpb.StudentCourseData) (*npb.EventStudentPackage, error)); ok {
		return rf(ctx, db, studentID, studentCourse)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, *pmpb.StudentCourseData) *npb.EventStudentPackage); ok {
		r0 = rf(ctx, db, studentID, studentCourse)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*npb.EventStudentPackage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, string, *pmpb.StudentCourseData) error); ok {
		r1 = rf(ctx, db, studentID, studentCourse)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIStudentPackageForCourseMgMt interface {
	mock.TestingT
	Cleanup(func())
}

// NewIStudentPackageForCourseMgMt creates a new instance of IStudentPackageForCourseMgMt. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIStudentPackageForCourseMgMt(t mockConstructorTestingTNewIStudentPackageForCourseMgMt) *IStudentPackageForCourseMgMt {
	mock := &IStudentPackageForCourseMgMt{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
