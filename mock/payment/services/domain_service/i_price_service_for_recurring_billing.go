// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"

	utils "github.com/manabie-com/backend/internal/payment/utils"
)

// IPriceServiceForRecurringBilling is an autogenerated mock type for the IPriceServiceForRecurringBilling type
type IPriceServiceForRecurringBilling struct {
	mock.Mock
}

// IsValidPriceForCancelRecurringBilling provides a mock function with given fields: orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem, mapOldBillingItem, mapPeriodInfo
func (_m *IPriceServiceForRecurringBilling) IsValidPriceForCancelRecurringBilling(orderItemData utils.OrderItemData, proRatedBillItem utils.BillingItemData, ratioOfProRatedBillingItem entities.BillingRatio, normalBillItem []utils.BillingItemData, mapOldBillingItem map[string]entities.BillItem, mapPeriodInfo map[string]entities.BillingSchedulePeriod) error {
	ret := _m.Called(orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem, mapOldBillingItem, mapPeriodInfo)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.OrderItemData, utils.BillingItemData, entities.BillingRatio, []utils.BillingItemData, map[string]entities.BillItem, map[string]entities.BillingSchedulePeriod) error); ok {
		r0 = rf(orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem, mapOldBillingItem, mapPeriodInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsValidPriceForRecurringBilling provides a mock function with given fields: ctx, db, orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem
func (_m *IPriceServiceForRecurringBilling) IsValidPriceForRecurringBilling(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData, proRatedBillItem utils.BillingItemData, ratioOfProRatedBillingItem entities.BillingRatio, normalBillItem []utils.BillingItemData) (entities.ProductPrice, error) {
	ret := _m.Called(ctx, db, orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem)

	var r0 entities.ProductPrice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData, utils.BillingItemData, entities.BillingRatio, []utils.BillingItemData) (entities.ProductPrice, error)); ok {
		return rf(ctx, db, orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData, utils.BillingItemData, entities.BillingRatio, []utils.BillingItemData) entities.ProductPrice); ok {
		r0 = rf(ctx, db, orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem)
	} else {
		r0 = ret.Get(0).(entities.ProductPrice)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, utils.OrderItemData, utils.BillingItemData, entities.BillingRatio, []utils.BillingItemData) error); ok {
		r1 = rf(ctx, db, orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsValidPriceForUpdateRecurringBilling provides a mock function with given fields: ctx, db, orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem, mapOldBillingItem
func (_m *IPriceServiceForRecurringBilling) IsValidPriceForUpdateRecurringBilling(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData, proRatedBillItem utils.BillingItemData, ratioOfProRatedBillingItem entities.BillingRatio, normalBillItem []utils.BillingItemData, mapOldBillingItem map[string]entities.BillItem) (entities.ProductPrice, error) {
	ret := _m.Called(ctx, db, orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem, mapOldBillingItem)

	var r0 entities.ProductPrice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData, utils.BillingItemData, entities.BillingRatio, []utils.BillingItemData, map[string]entities.BillItem) (entities.ProductPrice, error)); ok {
		return rf(ctx, db, orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem, mapOldBillingItem)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData, utils.BillingItemData, entities.BillingRatio, []utils.BillingItemData, map[string]entities.BillItem) entities.ProductPrice); ok {
		r0 = rf(ctx, db, orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem, mapOldBillingItem)
	} else {
		r0 = ret.Get(0).(entities.ProductPrice)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, utils.OrderItemData, utils.BillingItemData, entities.BillingRatio, []utils.BillingItemData, map[string]entities.BillItem) error); ok {
		r1 = rf(ctx, db, orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem, mapOldBillingItem)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIPriceServiceForRecurringBilling interface {
	mock.TestingT
	Cleanup(func())
}

// NewIPriceServiceForRecurringBilling creates a new instance of IPriceServiceForRecurringBilling. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIPriceServiceForRecurringBilling(t mockConstructorTestingTNewIPriceServiceForRecurringBilling) *IPriceServiceForRecurringBilling {
	mock := &IPriceServiceForRecurringBilling{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
