// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"

	utils "github.com/manabie-com/backend/internal/payment/utils"
)

// IBillItemServiceForRecurringBilling is an autogenerated mock type for the IBillItemServiceForRecurringBilling type
type IBillItemServiceForRecurringBilling struct {
	mock.Mock
}

// CreateCancelBillItemForRecurringBilling provides a mock function with given fields: ctx, db, orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem, mapPeriodInfo, mapOldBillingItem
func (_m *IBillItemServiceForRecurringBilling) CreateCancelBillItemForRecurringBilling(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData, proRatedBillItem utils.BillingItemData, ratioOfProRatedBillingItem entities.BillingRatio, normalBillItem []utils.BillingItemData, mapPeriodInfo map[string]entities.BillingSchedulePeriod, mapOldBillingItem map[string]entities.BillItem) error {
	ret := _m.Called(ctx, db, orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem, mapPeriodInfo, mapOldBillingItem)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData, utils.BillingItemData, entities.BillingRatio, []utils.BillingItemData, map[string]entities.BillingSchedulePeriod, map[string]entities.BillItem) error); ok {
		r0 = rf(ctx, db, orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem, mapPeriodInfo, mapOldBillingItem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateNewBillItemForRecurringBilling provides a mock function with given fields: ctx, db, orderItemData, proRatedBillItem, proRatedPrice, ratioOfProRatedBillingItem, normalBillItem, mapPeriodInfo, discountName
func (_m *IBillItemServiceForRecurringBilling) CreateNewBillItemForRecurringBilling(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData, proRatedBillItem utils.BillingItemData, proRatedPrice entities.ProductPrice, ratioOfProRatedBillingItem entities.BillingRatio, normalBillItem []utils.BillingItemData, mapPeriodInfo map[string]entities.BillingSchedulePeriod, discountName string) error {
	ret := _m.Called(ctx, db, orderItemData, proRatedBillItem, proRatedPrice, ratioOfProRatedBillingItem, normalBillItem, mapPeriodInfo, discountName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData, utils.BillingItemData, entities.ProductPrice, entities.BillingRatio, []utils.BillingItemData, map[string]entities.BillingSchedulePeriod, string) error); ok {
		r0 = rf(ctx, db, orderItemData, proRatedBillItem, proRatedPrice, ratioOfProRatedBillingItem, normalBillItem, mapPeriodInfo, discountName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUpdateBillItemForRecurringBilling provides a mock function with given fields: ctx, db, orderItemData, proRatedBillItem, proRatedPrice, ratioOfProRatedBillingItem, normalBillItem, mapPeriodInfo, mapOldBillingItem, discountName
func (_m *IBillItemServiceForRecurringBilling) CreateUpdateBillItemForRecurringBilling(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData, proRatedBillItem utils.BillingItemData, proRatedPrice entities.ProductPrice, ratioOfProRatedBillingItem entities.BillingRatio, normalBillItem []utils.BillingItemData, mapPeriodInfo map[string]entities.BillingSchedulePeriod, mapOldBillingItem map[string]entities.BillItem, discountName string) error {
	ret := _m.Called(ctx, db, orderItemData, proRatedBillItem, proRatedPrice, ratioOfProRatedBillingItem, normalBillItem, mapPeriodInfo, mapOldBillingItem, discountName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData, utils.BillingItemData, entities.ProductPrice, entities.BillingRatio, []utils.BillingItemData, map[string]entities.BillingSchedulePeriod, map[string]entities.BillItem, string) error); ok {
		r0 = rf(ctx, db, orderItemData, proRatedBillItem, proRatedPrice, ratioOfProRatedBillingItem, normalBillItem, mapPeriodInfo, mapOldBillingItem, discountName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMapOldBillingItemForRecurringBilling provides a mock function with given fields: ctx, db, orderItemData, mapPeriodInfo
func (_m *IBillItemServiceForRecurringBilling) GetMapOldBillingItemForRecurringBilling(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData, mapPeriodInfo map[string]entities.BillingSchedulePeriod) (map[string]entities.BillItem, error) {
	ret := _m.Called(ctx, db, orderItemData, mapPeriodInfo)

	var r0 map[string]entities.BillItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData, map[string]entities.BillingSchedulePeriod) (map[string]entities.BillItem, error)); ok {
		return rf(ctx, db, orderItemData, mapPeriodInfo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData, map[string]entities.BillingSchedulePeriod) map[string]entities.BillItem); ok {
		r0 = rf(ctx, db, orderItemData, mapPeriodInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]entities.BillItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, utils.OrderItemData, map[string]entities.BillingSchedulePeriod) error); ok {
		r1 = rf(ctx, db, orderItemData, mapPeriodInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIBillItemServiceForRecurringBilling interface {
	mock.TestingT
	Cleanup(func())
}

// NewIBillItemServiceForRecurringBilling creates a new instance of IBillItemServiceForRecurringBilling. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIBillItemServiceForRecurringBilling(t mockConstructorTestingTNewIBillItemServiceForRecurringBilling) *IBillItemServiceForRecurringBilling {
	mock := &IBillItemServiceForRecurringBilling{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
