// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"

	utils "github.com/manabie-com/backend/internal/payment/utils"
)

// IBillItemServiceForOneTimeBilling is an autogenerated mock type for the IBillItemServiceForOneTimeBilling type
type IBillItemServiceForOneTimeBilling struct {
	mock.Mock
}

// CreateCancelBillItemForOneTimeBilling provides a mock function with given fields: ctx, db, oldBillItem
func (_m *IBillItemServiceForOneTimeBilling) CreateCancelBillItemForOneTimeBilling(ctx context.Context, db database.QueryExecer, oldBillItem entities.BillItem) error {
	ret := _m.Called(ctx, db, oldBillItem)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, entities.BillItem) error); ok {
		r0 = rf(ctx, db, oldBillItem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateNewBillItemForOneTimeBilling provides a mock function with given fields: ctx, db, orderItemData, discountName
func (_m *IBillItemServiceForOneTimeBilling) CreateNewBillItemForOneTimeBilling(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData, discountName string) error {
	ret := _m.Called(ctx, db, orderItemData, discountName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData, string) error); ok {
		r0 = rf(ctx, db, orderItemData, discountName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUpdateBillItemForOneTimeBilling provides a mock function with given fields: ctx, db, oldBillItem, orderItemData, discountName
func (_m *IBillItemServiceForOneTimeBilling) CreateUpdateBillItemForOneTimeBilling(ctx context.Context, db database.QueryExecer, oldBillItem entities.BillItem, orderItemData utils.OrderItemData, discountName string) error {
	ret := _m.Called(ctx, db, oldBillItem, orderItemData, discountName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, entities.BillItem, utils.OrderItemData, string) error); ok {
		r0 = rf(ctx, db, oldBillItem, orderItemData, discountName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOldBillItemForUpdateOneTimeBilling provides a mock function with given fields: ctx, db, orderItemData
func (_m *IBillItemServiceForOneTimeBilling) GetOldBillItemForUpdateOneTimeBilling(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) (entities.BillItem, error) {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 entities.BillItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) (entities.BillItem, error)); ok {
		return rf(ctx, db, orderItemData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) entities.BillItem); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Get(0).(entities.BillItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r1 = rf(ctx, db, orderItemData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIBillItemServiceForOneTimeBilling interface {
	mock.TestingT
	Cleanup(func())
}

// NewIBillItemServiceForOneTimeBilling creates a new instance of IBillItemServiceForOneTimeBilling. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIBillItemServiceForOneTimeBilling(t mockConstructorTestingTNewIBillItemServiceForOneTimeBilling) *IBillItemServiceForOneTimeBilling {
	mock := &IBillItemServiceForOneTimeBilling{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
