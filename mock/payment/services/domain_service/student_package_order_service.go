// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// StudentPackageOrderService is an autogenerated mock type for the StudentPackageOrderService type
type StudentPackageOrderService struct {
	mock.Mock
}

// DeleteStudentPackageOrderByID provides a mock function with given fields: ctx, db, studentPackageOrderID
func (_m *StudentPackageOrderService) DeleteStudentPackageOrderByID(ctx context.Context, db database.QueryExecer, studentPackageOrderID string) error {
	ret := _m.Called(ctx, db, studentPackageOrderID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) error); ok {
		r0 = rf(ctx, db, studentPackageOrderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCurrentStudentPackageOrderByStudentPackageID provides a mock function with given fields: ctx, db, studentPackageID
func (_m *StudentPackageOrderService) GetCurrentStudentPackageOrderByStudentPackageID(ctx context.Context, db database.QueryExecer, studentPackageID string) (*entities.StudentPackageOrder, error) {
	ret := _m.Called(ctx, db, studentPackageID)

	var r0 *entities.StudentPackageOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) (*entities.StudentPackageOrder, error)); ok {
		return rf(ctx, db, studentPackageID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) *entities.StudentPackageOrder); ok {
		r0 = rf(ctx, db, studentPackageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.StudentPackageOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, string) error); ok {
		r1 = rf(ctx, db, studentPackageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPositionForStudentPackageByTime provides a mock function with given fields: ctx, db, studentPackageID, startTime, endTime
func (_m *StudentPackageOrderService) GetPositionForStudentPackageByTime(ctx context.Context, db database.QueryExecer, studentPackageID string, startTime time.Time, endTime time.Time) (entities.StudentPackagePosition, error) {
	ret := _m.Called(ctx, db, studentPackageID, startTime, endTime)

	var r0 entities.StudentPackagePosition
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, time.Time, time.Time) (entities.StudentPackagePosition, error)); ok {
		return rf(ctx, db, studentPackageID, startTime, endTime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, time.Time, time.Time) entities.StudentPackagePosition); ok {
		r0 = rf(ctx, db, studentPackageID, startTime, endTime)
	} else {
		r0 = ret.Get(0).(entities.StudentPackagePosition)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, string, time.Time, time.Time) error); ok {
		r1 = rf(ctx, db, studentPackageID, startTime, endTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStudentPackageOrderByStudentPackageIDAndOrderID provides a mock function with given fields: ctx, db, studentPackageID, orderID
func (_m *StudentPackageOrderService) GetStudentPackageOrderByStudentPackageIDAndOrderID(ctx context.Context, db database.QueryExecer, studentPackageID string, orderID string) (*entities.StudentPackageOrder, error) {
	ret := _m.Called(ctx, db, studentPackageID, orderID)

	var r0 *entities.StudentPackageOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, string) (*entities.StudentPackageOrder, error)); ok {
		return rf(ctx, db, studentPackageID, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, string) *entities.StudentPackageOrder); ok {
		r0 = rf(ctx, db, studentPackageID, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.StudentPackageOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, string, string) error); ok {
		r1 = rf(ctx, db, studentPackageID, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStudentPackageOrderByStudentPackageIDAndTime provides a mock function with given fields: ctx, db, studentPackageID, startTime
func (_m *StudentPackageOrderService) GetStudentPackageOrderByStudentPackageIDAndTime(ctx context.Context, db database.QueryExecer, studentPackageID string, startTime time.Time) (*entities.StudentPackageOrder, error) {
	ret := _m.Called(ctx, db, studentPackageID, startTime)

	var r0 *entities.StudentPackageOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, time.Time) (*entities.StudentPackageOrder, error)); ok {
		return rf(ctx, db, studentPackageID, startTime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, time.Time) *entities.StudentPackageOrder); ok {
		r0 = rf(ctx, db, studentPackageID, startTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.StudentPackageOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, string, time.Time) error); ok {
		r1 = rf(ctx, db, studentPackageID, startTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStudentPackageOrderByStudentPackageOrderID provides a mock function with given fields: ctx, db, studentPackageOrderID
func (_m *StudentPackageOrderService) GetStudentPackageOrderByStudentPackageOrderID(ctx context.Context, db database.QueryExecer, studentPackageOrderID string) (*entities.StudentPackageOrder, error) {
	ret := _m.Called(ctx, db, studentPackageOrderID)

	var r0 *entities.StudentPackageOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) (*entities.StudentPackageOrder, error)); ok {
		return rf(ctx, db, studentPackageOrderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) *entities.StudentPackageOrder); ok {
		r0 = rf(ctx, db, studentPackageOrderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.StudentPackageOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, string) error); ok {
		r1 = rf(ctx, db, studentPackageOrderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertStudentPackageOrder provides a mock function with given fields: ctx, db, studentPackageOrder, positionStudentPackageOrder
func (_m *StudentPackageOrderService) InsertStudentPackageOrder(ctx context.Context, db database.QueryExecer, studentPackageOrder entities.StudentPackageOrder, positionStudentPackageOrder entities.StudentPackagePosition) error {
	ret := _m.Called(ctx, db, studentPackageOrder, positionStudentPackageOrder)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, entities.StudentPackageOrder, entities.StudentPackagePosition) error); ok {
		r0 = rf(ctx, db, studentPackageOrder, positionStudentPackageOrder)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RevertStudentPackageOrderByStudentPackageOrderID provides a mock function with given fields: ctx, db, studentPackageID
func (_m *StudentPackageOrderService) RevertStudentPackageOrderByStudentPackageOrderID(ctx context.Context, db database.QueryExecer, studentPackageID string) error {
	ret := _m.Called(ctx, db, studentPackageID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) error); ok {
		r0 = rf(ctx, db, studentPackageID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetCurrentStudentPackageOrderByTimeAndStudentPackageID provides a mock function with given fields: ctx, db, studentPackageID
func (_m *StudentPackageOrderService) SetCurrentStudentPackageOrderByTimeAndStudentPackageID(ctx context.Context, db database.QueryExecer, studentPackageID string) (*entities.StudentPackageOrder, error) {
	ret := _m.Called(ctx, db, studentPackageID)

	var r0 *entities.StudentPackageOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) (*entities.StudentPackageOrder, error)); ok {
		return rf(ctx, db, studentPackageID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) *entities.StudentPackageOrder); ok {
		r0 = rf(ctx, db, studentPackageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.StudentPackageOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, string) error); ok {
		r1 = rf(ctx, db, studentPackageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateExecuteError provides a mock function with given fields: ctx, db, studentPackageOrder
func (_m *StudentPackageOrderService) UpdateExecuteError(ctx context.Context, db database.QueryExecer, studentPackageOrder entities.StudentPackageOrder) error {
	ret := _m.Called(ctx, db, studentPackageOrder)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, entities.StudentPackageOrder) error); ok {
		r0 = rf(ctx, db, studentPackageOrder)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateExecuteStatus provides a mock function with given fields: ctx, db, studentPackageOrder
func (_m *StudentPackageOrderService) UpdateExecuteStatus(ctx context.Context, db database.QueryExecer, studentPackageOrder entities.StudentPackageOrder) error {
	ret := _m.Called(ctx, db, studentPackageOrder)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, entities.StudentPackageOrder) error); ok {
		r0 = rf(ctx, db, studentPackageOrder)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStudentPackageOrder provides a mock function with given fields: ctx, db, studentPackageOrder
func (_m *StudentPackageOrderService) UpdateStudentPackageOrder(ctx context.Context, db database.QueryExecer, studentPackageOrder entities.StudentPackageOrder) error {
	ret := _m.Called(ctx, db, studentPackageOrder)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, entities.StudentPackageOrder) error); ok {
		r0 = rf(ctx, db, studentPackageOrder)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStudentPackageOrderService interface {
	mock.TestingT
	Cleanup(func())
}

// NewStudentPackageOrderService creates a new instance of StudentPackageOrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStudentPackageOrderService(t mockConstructorTestingTNewStudentPackageOrderService) *StudentPackageOrderService {
	mock := &StudentPackageOrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
