// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"

	utils "github.com/manabie-com/backend/internal/payment/utils"
)

// IBillItemServiceForOneTimeBilling is an autogenerated mock type for the IBillItemServiceForOneTimeBilling type
type IBillItemServiceForOneTimeBilling struct {
	mock.Mock
}

type IBillItemServiceForOneTimeBilling_Expecter struct {
	mock *mock.Mock
}

func (_m *IBillItemServiceForOneTimeBilling) EXPECT() *IBillItemServiceForOneTimeBilling_Expecter {
	return &IBillItemServiceForOneTimeBilling_Expecter{mock: &_m.Mock}
}

// CreateCancelBillItemForOneTimeBilling provides a mock function with given fields: ctx, db, oldBillItem
func (_m *IBillItemServiceForOneTimeBilling) CreateCancelBillItemForOneTimeBilling(ctx context.Context, db database.QueryExecer, oldBillItem entities.BillItem) error {
	ret := _m.Called(ctx, db, oldBillItem)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, entities.BillItem) error); ok {
		r0 = rf(ctx, db, oldBillItem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IBillItemServiceForOneTimeBilling_CreateCancelBillItemForOneTimeBilling_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCancelBillItemForOneTimeBilling'
type IBillItemServiceForOneTimeBilling_CreateCancelBillItemForOneTimeBilling_Call struct {
	*mock.Call
}

// CreateCancelBillItemForOneTimeBilling is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - oldBillItem entities.BillItem
func (_e *IBillItemServiceForOneTimeBilling_Expecter) CreateCancelBillItemForOneTimeBilling(ctx interface{}, db interface{}, oldBillItem interface{}) *IBillItemServiceForOneTimeBilling_CreateCancelBillItemForOneTimeBilling_Call {
	return &IBillItemServiceForOneTimeBilling_CreateCancelBillItemForOneTimeBilling_Call{Call: _e.mock.On("CreateCancelBillItemForOneTimeBilling", ctx, db, oldBillItem)}
}

func (_c *IBillItemServiceForOneTimeBilling_CreateCancelBillItemForOneTimeBilling_Call) Run(run func(ctx context.Context, db database.QueryExecer, oldBillItem entities.BillItem)) *IBillItemServiceForOneTimeBilling_CreateCancelBillItemForOneTimeBilling_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(entities.BillItem))
	})
	return _c
}

func (_c *IBillItemServiceForOneTimeBilling_CreateCancelBillItemForOneTimeBilling_Call) Return(err error) *IBillItemServiceForOneTimeBilling_CreateCancelBillItemForOneTimeBilling_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IBillItemServiceForOneTimeBilling_CreateCancelBillItemForOneTimeBilling_Call) RunAndReturn(run func(context.Context, database.QueryExecer, entities.BillItem) error) *IBillItemServiceForOneTimeBilling_CreateCancelBillItemForOneTimeBilling_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNewBillItemForOneTimeBilling provides a mock function with given fields: ctx, db, orderItemData, discountName
func (_m *IBillItemServiceForOneTimeBilling) CreateNewBillItemForOneTimeBilling(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData, discountName string) error {
	ret := _m.Called(ctx, db, orderItemData, discountName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData, string) error); ok {
		r0 = rf(ctx, db, orderItemData, discountName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IBillItemServiceForOneTimeBilling_CreateNewBillItemForOneTimeBilling_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNewBillItemForOneTimeBilling'
type IBillItemServiceForOneTimeBilling_CreateNewBillItemForOneTimeBilling_Call struct {
	*mock.Call
}

// CreateNewBillItemForOneTimeBilling is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - orderItemData utils.OrderItemData
//   - discountName string
func (_e *IBillItemServiceForOneTimeBilling_Expecter) CreateNewBillItemForOneTimeBilling(ctx interface{}, db interface{}, orderItemData interface{}, discountName interface{}) *IBillItemServiceForOneTimeBilling_CreateNewBillItemForOneTimeBilling_Call {
	return &IBillItemServiceForOneTimeBilling_CreateNewBillItemForOneTimeBilling_Call{Call: _e.mock.On("CreateNewBillItemForOneTimeBilling", ctx, db, orderItemData, discountName)}
}

func (_c *IBillItemServiceForOneTimeBilling_CreateNewBillItemForOneTimeBilling_Call) Run(run func(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData, discountName string)) *IBillItemServiceForOneTimeBilling_CreateNewBillItemForOneTimeBilling_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(utils.OrderItemData), args[3].(string))
	})
	return _c
}

func (_c *IBillItemServiceForOneTimeBilling_CreateNewBillItemForOneTimeBilling_Call) Return(err error) *IBillItemServiceForOneTimeBilling_CreateNewBillItemForOneTimeBilling_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IBillItemServiceForOneTimeBilling_CreateNewBillItemForOneTimeBilling_Call) RunAndReturn(run func(context.Context, database.QueryExecer, utils.OrderItemData, string) error) *IBillItemServiceForOneTimeBilling_CreateNewBillItemForOneTimeBilling_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUpdateBillItemForOneTimeBilling provides a mock function with given fields: ctx, db, oldBillItem, orderItemData, discountName
func (_m *IBillItemServiceForOneTimeBilling) CreateUpdateBillItemForOneTimeBilling(ctx context.Context, db database.QueryExecer, oldBillItem entities.BillItem, orderItemData utils.OrderItemData, discountName string) error {
	ret := _m.Called(ctx, db, oldBillItem, orderItemData, discountName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, entities.BillItem, utils.OrderItemData, string) error); ok {
		r0 = rf(ctx, db, oldBillItem, orderItemData, discountName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IBillItemServiceForOneTimeBilling_CreateUpdateBillItemForOneTimeBilling_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUpdateBillItemForOneTimeBilling'
type IBillItemServiceForOneTimeBilling_CreateUpdateBillItemForOneTimeBilling_Call struct {
	*mock.Call
}

// CreateUpdateBillItemForOneTimeBilling is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - oldBillItem entities.BillItem
//   - orderItemData utils.OrderItemData
//   - discountName string
func (_e *IBillItemServiceForOneTimeBilling_Expecter) CreateUpdateBillItemForOneTimeBilling(ctx interface{}, db interface{}, oldBillItem interface{}, orderItemData interface{}, discountName interface{}) *IBillItemServiceForOneTimeBilling_CreateUpdateBillItemForOneTimeBilling_Call {
	return &IBillItemServiceForOneTimeBilling_CreateUpdateBillItemForOneTimeBilling_Call{Call: _e.mock.On("CreateUpdateBillItemForOneTimeBilling", ctx, db, oldBillItem, orderItemData, discountName)}
}

func (_c *IBillItemServiceForOneTimeBilling_CreateUpdateBillItemForOneTimeBilling_Call) Run(run func(ctx context.Context, db database.QueryExecer, oldBillItem entities.BillItem, orderItemData utils.OrderItemData, discountName string)) *IBillItemServiceForOneTimeBilling_CreateUpdateBillItemForOneTimeBilling_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(entities.BillItem), args[3].(utils.OrderItemData), args[4].(string))
	})
	return _c
}

func (_c *IBillItemServiceForOneTimeBilling_CreateUpdateBillItemForOneTimeBilling_Call) Return(err error) *IBillItemServiceForOneTimeBilling_CreateUpdateBillItemForOneTimeBilling_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IBillItemServiceForOneTimeBilling_CreateUpdateBillItemForOneTimeBilling_Call) RunAndReturn(run func(context.Context, database.QueryExecer, entities.BillItem, utils.OrderItemData, string) error) *IBillItemServiceForOneTimeBilling_CreateUpdateBillItemForOneTimeBilling_Call {
	_c.Call.Return(run)
	return _c
}

// GetOldBillItemForUpdateOneTimeBilling provides a mock function with given fields: ctx, db, orderItemData
func (_m *IBillItemServiceForOneTimeBilling) GetOldBillItemForUpdateOneTimeBilling(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) (entities.BillItem, error) {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 entities.BillItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) (entities.BillItem, error)); ok {
		return rf(ctx, db, orderItemData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) entities.BillItem); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Get(0).(entities.BillItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r1 = rf(ctx, db, orderItemData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IBillItemServiceForOneTimeBilling_GetOldBillItemForUpdateOneTimeBilling_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOldBillItemForUpdateOneTimeBilling'
type IBillItemServiceForOneTimeBilling_GetOldBillItemForUpdateOneTimeBilling_Call struct {
	*mock.Call
}

// GetOldBillItemForUpdateOneTimeBilling is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - orderItemData utils.OrderItemData
func (_e *IBillItemServiceForOneTimeBilling_Expecter) GetOldBillItemForUpdateOneTimeBilling(ctx interface{}, db interface{}, orderItemData interface{}) *IBillItemServiceForOneTimeBilling_GetOldBillItemForUpdateOneTimeBilling_Call {
	return &IBillItemServiceForOneTimeBilling_GetOldBillItemForUpdateOneTimeBilling_Call{Call: _e.mock.On("GetOldBillItemForUpdateOneTimeBilling", ctx, db, orderItemData)}
}

func (_c *IBillItemServiceForOneTimeBilling_GetOldBillItemForUpdateOneTimeBilling_Call) Run(run func(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData)) *IBillItemServiceForOneTimeBilling_GetOldBillItemForUpdateOneTimeBilling_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(utils.OrderItemData))
	})
	return _c
}

func (_c *IBillItemServiceForOneTimeBilling_GetOldBillItemForUpdateOneTimeBilling_Call) Return(billItem entities.BillItem, err error) *IBillItemServiceForOneTimeBilling_GetOldBillItemForUpdateOneTimeBilling_Call {
	_c.Call.Return(billItem, err)
	return _c
}

func (_c *IBillItemServiceForOneTimeBilling_GetOldBillItemForUpdateOneTimeBilling_Call) RunAndReturn(run func(context.Context, database.QueryExecer, utils.OrderItemData) (entities.BillItem, error)) *IBillItemServiceForOneTimeBilling_GetOldBillItemForUpdateOneTimeBilling_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIBillItemServiceForOneTimeBilling interface {
	mock.TestingT
	Cleanup(func())
}

// NewIBillItemServiceForOneTimeBilling creates a new instance of IBillItemServiceForOneTimeBilling. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIBillItemServiceForOneTimeBilling(t mockConstructorTestingTNewIBillItemServiceForOneTimeBilling) *IBillItemServiceForOneTimeBilling {
	mock := &IBillItemServiceForOneTimeBilling{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
