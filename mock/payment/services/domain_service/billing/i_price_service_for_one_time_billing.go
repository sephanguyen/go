// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"

	utils "github.com/manabie-com/backend/internal/payment/utils"
)

// IPriceServiceForOneTimeBilling is an autogenerated mock type for the IPriceServiceForOneTimeBilling type
type IPriceServiceForOneTimeBilling struct {
	mock.Mock
}

type IPriceServiceForOneTimeBilling_Expecter struct {
	mock *mock.Mock
}

func (_m *IPriceServiceForOneTimeBilling) EXPECT() *IPriceServiceForOneTimeBilling_Expecter {
	return &IPriceServiceForOneTimeBilling_Expecter{mock: &_m.Mock}
}

// IsValidAdjustmentPriceForOneTimeBilling provides a mock function with given fields: oldBillItem, orderItemData
func (_m *IPriceServiceForOneTimeBilling) IsValidAdjustmentPriceForOneTimeBilling(oldBillItem entities.BillItem, orderItemData utils.OrderItemData) error {
	ret := _m.Called(oldBillItem, orderItemData)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.BillItem, utils.OrderItemData) error); ok {
		r0 = rf(oldBillItem, orderItemData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IPriceServiceForOneTimeBilling_IsValidAdjustmentPriceForOneTimeBilling_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsValidAdjustmentPriceForOneTimeBilling'
type IPriceServiceForOneTimeBilling_IsValidAdjustmentPriceForOneTimeBilling_Call struct {
	*mock.Call
}

// IsValidAdjustmentPriceForOneTimeBilling is a helper method to define mock.On call
//   - oldBillItem entities.BillItem
//   - orderItemData utils.OrderItemData
func (_e *IPriceServiceForOneTimeBilling_Expecter) IsValidAdjustmentPriceForOneTimeBilling(oldBillItem interface{}, orderItemData interface{}) *IPriceServiceForOneTimeBilling_IsValidAdjustmentPriceForOneTimeBilling_Call {
	return &IPriceServiceForOneTimeBilling_IsValidAdjustmentPriceForOneTimeBilling_Call{Call: _e.mock.On("IsValidAdjustmentPriceForOneTimeBilling", oldBillItem, orderItemData)}
}

func (_c *IPriceServiceForOneTimeBilling_IsValidAdjustmentPriceForOneTimeBilling_Call) Run(run func(oldBillItem entities.BillItem, orderItemData utils.OrderItemData)) *IPriceServiceForOneTimeBilling_IsValidAdjustmentPriceForOneTimeBilling_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.BillItem), args[1].(utils.OrderItemData))
	})
	return _c
}

func (_c *IPriceServiceForOneTimeBilling_IsValidAdjustmentPriceForOneTimeBilling_Call) Return(err error) *IPriceServiceForOneTimeBilling_IsValidAdjustmentPriceForOneTimeBilling_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IPriceServiceForOneTimeBilling_IsValidAdjustmentPriceForOneTimeBilling_Call) RunAndReturn(run func(entities.BillItem, utils.OrderItemData) error) *IPriceServiceForOneTimeBilling_IsValidAdjustmentPriceForOneTimeBilling_Call {
	_c.Call.Return(run)
	return _c
}

// IsValidPriceForOneTimeBilling provides a mock function with given fields: ctx, db, orderItemData
func (_m *IPriceServiceForOneTimeBilling) IsValidPriceForOneTimeBilling(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) error {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IPriceServiceForOneTimeBilling_IsValidPriceForOneTimeBilling_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsValidPriceForOneTimeBilling'
type IPriceServiceForOneTimeBilling_IsValidPriceForOneTimeBilling_Call struct {
	*mock.Call
}

// IsValidPriceForOneTimeBilling is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - orderItemData utils.OrderItemData
func (_e *IPriceServiceForOneTimeBilling_Expecter) IsValidPriceForOneTimeBilling(ctx interface{}, db interface{}, orderItemData interface{}) *IPriceServiceForOneTimeBilling_IsValidPriceForOneTimeBilling_Call {
	return &IPriceServiceForOneTimeBilling_IsValidPriceForOneTimeBilling_Call{Call: _e.mock.On("IsValidPriceForOneTimeBilling", ctx, db, orderItemData)}
}

func (_c *IPriceServiceForOneTimeBilling_IsValidPriceForOneTimeBilling_Call) Run(run func(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData)) *IPriceServiceForOneTimeBilling_IsValidPriceForOneTimeBilling_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(utils.OrderItemData))
	})
	return _c
}

func (_c *IPriceServiceForOneTimeBilling_IsValidPriceForOneTimeBilling_Call) Return(err error) *IPriceServiceForOneTimeBilling_IsValidPriceForOneTimeBilling_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IPriceServiceForOneTimeBilling_IsValidPriceForOneTimeBilling_Call) RunAndReturn(run func(context.Context, database.QueryExecer, utils.OrderItemData) error) *IPriceServiceForOneTimeBilling_IsValidPriceForOneTimeBilling_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIPriceServiceForOneTimeBilling interface {
	mock.TestingT
	Cleanup(func())
}

// NewIPriceServiceForOneTimeBilling creates a new instance of IPriceServiceForOneTimeBilling. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIPriceServiceForOneTimeBilling(t mockConstructorTestingTNewIPriceServiceForOneTimeBilling) *IPriceServiceForOneTimeBilling {
	mock := &IPriceServiceForOneTimeBilling{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
