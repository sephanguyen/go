// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	mock "github.com/stretchr/testify/mock"

	utils "github.com/manabie-com/backend/internal/payment/utils"
)

// IDiscountServiceForOneTimeBilling is an autogenerated mock type for the IDiscountServiceForOneTimeBilling type
type IDiscountServiceForOneTimeBilling struct {
	mock.Mock
}

type IDiscountServiceForOneTimeBilling_Expecter struct {
	mock *mock.Mock
}

func (_m *IDiscountServiceForOneTimeBilling) EXPECT() *IDiscountServiceForOneTimeBilling_Expecter {
	return &IDiscountServiceForOneTimeBilling_Expecter{mock: &_m.Mock}
}

// IsValidDiscountForOneTimeBilling provides a mock function with given fields: ctx, db, orderItemData, discountName
func (_m *IDiscountServiceForOneTimeBilling) IsValidDiscountForOneTimeBilling(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData, discountName *string) error {
	ret := _m.Called(ctx, db, orderItemData, discountName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData, *string) error); ok {
		r0 = rf(ctx, db, orderItemData, discountName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IDiscountServiceForOneTimeBilling_IsValidDiscountForOneTimeBilling_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsValidDiscountForOneTimeBilling'
type IDiscountServiceForOneTimeBilling_IsValidDiscountForOneTimeBilling_Call struct {
	*mock.Call
}

// IsValidDiscountForOneTimeBilling is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - orderItemData utils.OrderItemData
//   - discountName *string
func (_e *IDiscountServiceForOneTimeBilling_Expecter) IsValidDiscountForOneTimeBilling(ctx interface{}, db interface{}, orderItemData interface{}, discountName interface{}) *IDiscountServiceForOneTimeBilling_IsValidDiscountForOneTimeBilling_Call {
	return &IDiscountServiceForOneTimeBilling_IsValidDiscountForOneTimeBilling_Call{Call: _e.mock.On("IsValidDiscountForOneTimeBilling", ctx, db, orderItemData, discountName)}
}

func (_c *IDiscountServiceForOneTimeBilling_IsValidDiscountForOneTimeBilling_Call) Run(run func(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData, discountName *string)) *IDiscountServiceForOneTimeBilling_IsValidDiscountForOneTimeBilling_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(utils.OrderItemData), args[3].(*string))
	})
	return _c
}

func (_c *IDiscountServiceForOneTimeBilling_IsValidDiscountForOneTimeBilling_Call) Return(err error) *IDiscountServiceForOneTimeBilling_IsValidDiscountForOneTimeBilling_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IDiscountServiceForOneTimeBilling_IsValidDiscountForOneTimeBilling_Call) RunAndReturn(run func(context.Context, database.QueryExecer, utils.OrderItemData, *string) error) *IDiscountServiceForOneTimeBilling_IsValidDiscountForOneTimeBilling_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIDiscountServiceForOneTimeBilling interface {
	mock.TestingT
	Cleanup(func())
}

// NewIDiscountServiceForOneTimeBilling creates a new instance of IDiscountServiceForOneTimeBilling. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIDiscountServiceForOneTimeBilling(t mockConstructorTestingTNewIDiscountServiceForOneTimeBilling) *IDiscountServiceForOneTimeBilling {
	mock := &IDiscountServiceForOneTimeBilling{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
