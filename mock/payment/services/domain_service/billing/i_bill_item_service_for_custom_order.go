// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"

	pmpb "github.com/manabie-com/backend/pkg/manabuf/payment/v1"
)

// IBillItemServiceForCustomOrder is an autogenerated mock type for the IBillItemServiceForCustomOrder type
type IBillItemServiceForCustomOrder struct {
	mock.Mock
}

type IBillItemServiceForCustomOrder_Expecter struct {
	mock *mock.Mock
}

func (_m *IBillItemServiceForCustomOrder) EXPECT() *IBillItemServiceForCustomOrder_Expecter {
	return &IBillItemServiceForCustomOrder_Expecter{mock: &_m.Mock}
}

// CreateCustomBillItem provides a mock function with given fields: ctx, db, customBillingItem, order, locationName
func (_m *IBillItemServiceForCustomOrder) CreateCustomBillItem(ctx context.Context, db database.QueryExecer, customBillingItem *pmpb.CustomBillingItem, order entities.Order, locationName string) error {
	ret := _m.Called(ctx, db, customBillingItem, order, locationName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, *pmpb.CustomBillingItem, entities.Order, string) error); ok {
		r0 = rf(ctx, db, customBillingItem, order, locationName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IBillItemServiceForCustomOrder_CreateCustomBillItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCustomBillItem'
type IBillItemServiceForCustomOrder_CreateCustomBillItem_Call struct {
	*mock.Call
}

// CreateCustomBillItem is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - customBillingItem *pmpb.CustomBillingItem
//   - order entities.Order
//   - locationName string
func (_e *IBillItemServiceForCustomOrder_Expecter) CreateCustomBillItem(ctx interface{}, db interface{}, customBillingItem interface{}, order interface{}, locationName interface{}) *IBillItemServiceForCustomOrder_CreateCustomBillItem_Call {
	return &IBillItemServiceForCustomOrder_CreateCustomBillItem_Call{Call: _e.mock.On("CreateCustomBillItem", ctx, db, customBillingItem, order, locationName)}
}

func (_c *IBillItemServiceForCustomOrder_CreateCustomBillItem_Call) Run(run func(ctx context.Context, db database.QueryExecer, customBillingItem *pmpb.CustomBillingItem, order entities.Order, locationName string)) *IBillItemServiceForCustomOrder_CreateCustomBillItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(*pmpb.CustomBillingItem), args[3].(entities.Order), args[4].(string))
	})
	return _c
}

func (_c *IBillItemServiceForCustomOrder_CreateCustomBillItem_Call) Return(err error) *IBillItemServiceForCustomOrder_CreateCustomBillItem_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IBillItemServiceForCustomOrder_CreateCustomBillItem_Call) RunAndReturn(run func(context.Context, database.QueryExecer, *pmpb.CustomBillingItem, entities.Order, string) error) *IBillItemServiceForCustomOrder_CreateCustomBillItem_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIBillItemServiceForCustomOrder interface {
	mock.TestingT
	Cleanup(func())
}

// NewIBillItemServiceForCustomOrder creates a new instance of IBillItemServiceForCustomOrder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIBillItemServiceForCustomOrder(t mockConstructorTestingTNewIBillItemServiceForCustomOrder) *IBillItemServiceForCustomOrder {
	mock := &IBillItemServiceForCustomOrder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
