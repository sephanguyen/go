// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"

	utils "github.com/manabie-com/backend/internal/payment/utils"
)

// IPriceServiceForRecurringBilling is an autogenerated mock type for the IPriceServiceForRecurringBilling type
type IPriceServiceForRecurringBilling struct {
	mock.Mock
}

type IPriceServiceForRecurringBilling_Expecter struct {
	mock *mock.Mock
}

func (_m *IPriceServiceForRecurringBilling) EXPECT() *IPriceServiceForRecurringBilling_Expecter {
	return &IPriceServiceForRecurringBilling_Expecter{mock: &_m.Mock}
}

// IsValidPriceForCancelRecurringBilling provides a mock function with given fields: orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem, mapOldBillingItem, mapPeriodInfo
func (_m *IPriceServiceForRecurringBilling) IsValidPriceForCancelRecurringBilling(orderItemData utils.OrderItemData, proRatedBillItem utils.BillingItemData, ratioOfProRatedBillingItem entities.BillingRatio, normalBillItem []utils.BillingItemData, mapOldBillingItem map[string]entities.BillItem, mapPeriodInfo map[string]entities.BillingSchedulePeriod) error {
	ret := _m.Called(orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem, mapOldBillingItem, mapPeriodInfo)

	var r0 error
	if rf, ok := ret.Get(0).(func(utils.OrderItemData, utils.BillingItemData, entities.BillingRatio, []utils.BillingItemData, map[string]entities.BillItem, map[string]entities.BillingSchedulePeriod) error); ok {
		r0 = rf(orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem, mapOldBillingItem, mapPeriodInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IPriceServiceForRecurringBilling_IsValidPriceForCancelRecurringBilling_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsValidPriceForCancelRecurringBilling'
type IPriceServiceForRecurringBilling_IsValidPriceForCancelRecurringBilling_Call struct {
	*mock.Call
}

// IsValidPriceForCancelRecurringBilling is a helper method to define mock.On call
//   - orderItemData utils.OrderItemData
//   - proRatedBillItem utils.BillingItemData
//   - ratioOfProRatedBillingItem entities.BillingRatio
//   - normalBillItem []utils.BillingItemData
//   - mapOldBillingItem map[string]entities.BillItem
//   - mapPeriodInfo map[string]entities.BillingSchedulePeriod
func (_e *IPriceServiceForRecurringBilling_Expecter) IsValidPriceForCancelRecurringBilling(orderItemData interface{}, proRatedBillItem interface{}, ratioOfProRatedBillingItem interface{}, normalBillItem interface{}, mapOldBillingItem interface{}, mapPeriodInfo interface{}) *IPriceServiceForRecurringBilling_IsValidPriceForCancelRecurringBilling_Call {
	return &IPriceServiceForRecurringBilling_IsValidPriceForCancelRecurringBilling_Call{Call: _e.mock.On("IsValidPriceForCancelRecurringBilling", orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem, mapOldBillingItem, mapPeriodInfo)}
}

func (_c *IPriceServiceForRecurringBilling_IsValidPriceForCancelRecurringBilling_Call) Run(run func(orderItemData utils.OrderItemData, proRatedBillItem utils.BillingItemData, ratioOfProRatedBillingItem entities.BillingRatio, normalBillItem []utils.BillingItemData, mapOldBillingItem map[string]entities.BillItem, mapPeriodInfo map[string]entities.BillingSchedulePeriod)) *IPriceServiceForRecurringBilling_IsValidPriceForCancelRecurringBilling_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(utils.OrderItemData), args[1].(utils.BillingItemData), args[2].(entities.BillingRatio), args[3].([]utils.BillingItemData), args[4].(map[string]entities.BillItem), args[5].(map[string]entities.BillingSchedulePeriod))
	})
	return _c
}

func (_c *IPriceServiceForRecurringBilling_IsValidPriceForCancelRecurringBilling_Call) Return(err error) *IPriceServiceForRecurringBilling_IsValidPriceForCancelRecurringBilling_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IPriceServiceForRecurringBilling_IsValidPriceForCancelRecurringBilling_Call) RunAndReturn(run func(utils.OrderItemData, utils.BillingItemData, entities.BillingRatio, []utils.BillingItemData, map[string]entities.BillItem, map[string]entities.BillingSchedulePeriod) error) *IPriceServiceForRecurringBilling_IsValidPriceForCancelRecurringBilling_Call {
	_c.Call.Return(run)
	return _c
}

// IsValidPriceForRecurringBilling provides a mock function with given fields: ctx, db, orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem
func (_m *IPriceServiceForRecurringBilling) IsValidPriceForRecurringBilling(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData, proRatedBillItem utils.BillingItemData, ratioOfProRatedBillingItem entities.BillingRatio, normalBillItem []utils.BillingItemData) (entities.ProductPrice, error) {
	ret := _m.Called(ctx, db, orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem)

	var r0 entities.ProductPrice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData, utils.BillingItemData, entities.BillingRatio, []utils.BillingItemData) (entities.ProductPrice, error)); ok {
		return rf(ctx, db, orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData, utils.BillingItemData, entities.BillingRatio, []utils.BillingItemData) entities.ProductPrice); ok {
		r0 = rf(ctx, db, orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem)
	} else {
		r0 = ret.Get(0).(entities.ProductPrice)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, utils.OrderItemData, utils.BillingItemData, entities.BillingRatio, []utils.BillingItemData) error); ok {
		r1 = rf(ctx, db, orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IPriceServiceForRecurringBilling_IsValidPriceForRecurringBilling_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsValidPriceForRecurringBilling'
type IPriceServiceForRecurringBilling_IsValidPriceForRecurringBilling_Call struct {
	*mock.Call
}

// IsValidPriceForRecurringBilling is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - orderItemData utils.OrderItemData
//   - proRatedBillItem utils.BillingItemData
//   - ratioOfProRatedBillingItem entities.BillingRatio
//   - normalBillItem []utils.BillingItemData
func (_e *IPriceServiceForRecurringBilling_Expecter) IsValidPriceForRecurringBilling(ctx interface{}, db interface{}, orderItemData interface{}, proRatedBillItem interface{}, ratioOfProRatedBillingItem interface{}, normalBillItem interface{}) *IPriceServiceForRecurringBilling_IsValidPriceForRecurringBilling_Call {
	return &IPriceServiceForRecurringBilling_IsValidPriceForRecurringBilling_Call{Call: _e.mock.On("IsValidPriceForRecurringBilling", ctx, db, orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem)}
}

func (_c *IPriceServiceForRecurringBilling_IsValidPriceForRecurringBilling_Call) Run(run func(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData, proRatedBillItem utils.BillingItemData, ratioOfProRatedBillingItem entities.BillingRatio, normalBillItem []utils.BillingItemData)) *IPriceServiceForRecurringBilling_IsValidPriceForRecurringBilling_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(utils.OrderItemData), args[3].(utils.BillingItemData), args[4].(entities.BillingRatio), args[5].([]utils.BillingItemData))
	})
	return _c
}

func (_c *IPriceServiceForRecurringBilling_IsValidPriceForRecurringBilling_Call) Return(proRatedPRice entities.ProductPrice, err error) *IPriceServiceForRecurringBilling_IsValidPriceForRecurringBilling_Call {
	_c.Call.Return(proRatedPRice, err)
	return _c
}

func (_c *IPriceServiceForRecurringBilling_IsValidPriceForRecurringBilling_Call) RunAndReturn(run func(context.Context, database.QueryExecer, utils.OrderItemData, utils.BillingItemData, entities.BillingRatio, []utils.BillingItemData) (entities.ProductPrice, error)) *IPriceServiceForRecurringBilling_IsValidPriceForRecurringBilling_Call {
	_c.Call.Return(run)
	return _c
}

// IsValidPriceForUpdateRecurringBilling provides a mock function with given fields: ctx, db, orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem, mapOldBillingItem
func (_m *IPriceServiceForRecurringBilling) IsValidPriceForUpdateRecurringBilling(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData, proRatedBillItem utils.BillingItemData, ratioOfProRatedBillingItem entities.BillingRatio, normalBillItem []utils.BillingItemData, mapOldBillingItem map[string]entities.BillItem) (entities.ProductPrice, error) {
	ret := _m.Called(ctx, db, orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem, mapOldBillingItem)

	var r0 entities.ProductPrice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData, utils.BillingItemData, entities.BillingRatio, []utils.BillingItemData, map[string]entities.BillItem) (entities.ProductPrice, error)); ok {
		return rf(ctx, db, orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem, mapOldBillingItem)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData, utils.BillingItemData, entities.BillingRatio, []utils.BillingItemData, map[string]entities.BillItem) entities.ProductPrice); ok {
		r0 = rf(ctx, db, orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem, mapOldBillingItem)
	} else {
		r0 = ret.Get(0).(entities.ProductPrice)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, utils.OrderItemData, utils.BillingItemData, entities.BillingRatio, []utils.BillingItemData, map[string]entities.BillItem) error); ok {
		r1 = rf(ctx, db, orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem, mapOldBillingItem)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IPriceServiceForRecurringBilling_IsValidPriceForUpdateRecurringBilling_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsValidPriceForUpdateRecurringBilling'
type IPriceServiceForRecurringBilling_IsValidPriceForUpdateRecurringBilling_Call struct {
	*mock.Call
}

// IsValidPriceForUpdateRecurringBilling is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - orderItemData utils.OrderItemData
//   - proRatedBillItem utils.BillingItemData
//   - ratioOfProRatedBillingItem entities.BillingRatio
//   - normalBillItem []utils.BillingItemData
//   - mapOldBillingItem map[string]entities.BillItem
func (_e *IPriceServiceForRecurringBilling_Expecter) IsValidPriceForUpdateRecurringBilling(ctx interface{}, db interface{}, orderItemData interface{}, proRatedBillItem interface{}, ratioOfProRatedBillingItem interface{}, normalBillItem interface{}, mapOldBillingItem interface{}) *IPriceServiceForRecurringBilling_IsValidPriceForUpdateRecurringBilling_Call {
	return &IPriceServiceForRecurringBilling_IsValidPriceForUpdateRecurringBilling_Call{Call: _e.mock.On("IsValidPriceForUpdateRecurringBilling", ctx, db, orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem, mapOldBillingItem)}
}

func (_c *IPriceServiceForRecurringBilling_IsValidPriceForUpdateRecurringBilling_Call) Run(run func(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData, proRatedBillItem utils.BillingItemData, ratioOfProRatedBillingItem entities.BillingRatio, normalBillItem []utils.BillingItemData, mapOldBillingItem map[string]entities.BillItem)) *IPriceServiceForRecurringBilling_IsValidPriceForUpdateRecurringBilling_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(utils.OrderItemData), args[3].(utils.BillingItemData), args[4].(entities.BillingRatio), args[5].([]utils.BillingItemData), args[6].(map[string]entities.BillItem))
	})
	return _c
}

func (_c *IPriceServiceForRecurringBilling_IsValidPriceForUpdateRecurringBilling_Call) Return(proRatedPRice entities.ProductPrice, err error) *IPriceServiceForRecurringBilling_IsValidPriceForUpdateRecurringBilling_Call {
	_c.Call.Return(proRatedPRice, err)
	return _c
}

func (_c *IPriceServiceForRecurringBilling_IsValidPriceForUpdateRecurringBilling_Call) RunAndReturn(run func(context.Context, database.QueryExecer, utils.OrderItemData, utils.BillingItemData, entities.BillingRatio, []utils.BillingItemData, map[string]entities.BillItem) (entities.ProductPrice, error)) *IPriceServiceForRecurringBilling_IsValidPriceForUpdateRecurringBilling_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIPriceServiceForRecurringBilling interface {
	mock.TestingT
	Cleanup(func())
}

// NewIPriceServiceForRecurringBilling creates a new instance of IPriceServiceForRecurringBilling. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIPriceServiceForRecurringBilling(t mockConstructorTestingTNewIPriceServiceForRecurringBilling) *IPriceServiceForRecurringBilling {
	mock := &IPriceServiceForRecurringBilling{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
