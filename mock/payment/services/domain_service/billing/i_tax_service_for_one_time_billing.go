// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	mock "github.com/stretchr/testify/mock"

	utils "github.com/manabie-com/backend/internal/payment/utils"
)

// ITaxServiceForOneTimeBilling is an autogenerated mock type for the ITaxServiceForOneTimeBilling type
type ITaxServiceForOneTimeBilling struct {
	mock.Mock
}

type ITaxServiceForOneTimeBilling_Expecter struct {
	mock *mock.Mock
}

func (_m *ITaxServiceForOneTimeBilling) EXPECT() *ITaxServiceForOneTimeBilling_Expecter {
	return &ITaxServiceForOneTimeBilling_Expecter{mock: &_m.Mock}
}

// IsValidTaxForOneTimeBilling provides a mock function with given fields: ctx, db, orderItemData
func (_m *ITaxServiceForOneTimeBilling) IsValidTaxForOneTimeBilling(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) error {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ITaxServiceForOneTimeBilling_IsValidTaxForOneTimeBilling_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsValidTaxForOneTimeBilling'
type ITaxServiceForOneTimeBilling_IsValidTaxForOneTimeBilling_Call struct {
	*mock.Call
}

// IsValidTaxForOneTimeBilling is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - orderItemData utils.OrderItemData
func (_e *ITaxServiceForOneTimeBilling_Expecter) IsValidTaxForOneTimeBilling(ctx interface{}, db interface{}, orderItemData interface{}) *ITaxServiceForOneTimeBilling_IsValidTaxForOneTimeBilling_Call {
	return &ITaxServiceForOneTimeBilling_IsValidTaxForOneTimeBilling_Call{Call: _e.mock.On("IsValidTaxForOneTimeBilling", ctx, db, orderItemData)}
}

func (_c *ITaxServiceForOneTimeBilling_IsValidTaxForOneTimeBilling_Call) Run(run func(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData)) *ITaxServiceForOneTimeBilling_IsValidTaxForOneTimeBilling_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(utils.OrderItemData))
	})
	return _c
}

func (_c *ITaxServiceForOneTimeBilling_IsValidTaxForOneTimeBilling_Call) Return(err error) *ITaxServiceForOneTimeBilling_IsValidTaxForOneTimeBilling_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ITaxServiceForOneTimeBilling_IsValidTaxForOneTimeBilling_Call) RunAndReturn(run func(context.Context, database.QueryExecer, utils.OrderItemData) error) *ITaxServiceForOneTimeBilling_IsValidTaxForOneTimeBilling_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewITaxServiceForOneTimeBilling interface {
	mock.TestingT
	Cleanup(func())
}

// NewITaxServiceForOneTimeBilling creates a new instance of ITaxServiceForOneTimeBilling. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewITaxServiceForOneTimeBilling(t mockConstructorTestingTNewITaxServiceForOneTimeBilling) *ITaxServiceForOneTimeBilling {
	mock := &ITaxServiceForOneTimeBilling{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
