// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"

	utils "github.com/manabie-com/backend/internal/payment/utils"
)

// IDiscountServiceForRecurringBilling is an autogenerated mock type for the IDiscountServiceForRecurringBilling type
type IDiscountServiceForRecurringBilling struct {
	mock.Mock
}

type IDiscountServiceForRecurringBilling_Expecter struct {
	mock *mock.Mock
}

func (_m *IDiscountServiceForRecurringBilling) EXPECT() *IDiscountServiceForRecurringBilling_Expecter {
	return &IDiscountServiceForRecurringBilling_Expecter{mock: &_m.Mock}
}

// IsValidDiscountForRecurringBilling provides a mock function with given fields: ctx, db, orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem, discountName
func (_m *IDiscountServiceForRecurringBilling) IsValidDiscountForRecurringBilling(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData, proRatedBillItem utils.BillingItemData, ratioOfProRatedBillingItem entities.BillingRatio, normalBillItem []utils.BillingItemData, discountName *string) error {
	ret := _m.Called(ctx, db, orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem, discountName)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData, utils.BillingItemData, entities.BillingRatio, []utils.BillingItemData, *string) error); ok {
		r0 = rf(ctx, db, orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem, discountName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IDiscountServiceForRecurringBilling_IsValidDiscountForRecurringBilling_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsValidDiscountForRecurringBilling'
type IDiscountServiceForRecurringBilling_IsValidDiscountForRecurringBilling_Call struct {
	*mock.Call
}

// IsValidDiscountForRecurringBilling is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - orderItemData utils.OrderItemData
//   - proRatedBillItem utils.BillingItemData
//   - ratioOfProRatedBillingItem entities.BillingRatio
//   - normalBillItem []utils.BillingItemData
//   - discountName *string
func (_e *IDiscountServiceForRecurringBilling_Expecter) IsValidDiscountForRecurringBilling(ctx interface{}, db interface{}, orderItemData interface{}, proRatedBillItem interface{}, ratioOfProRatedBillingItem interface{}, normalBillItem interface{}, discountName interface{}) *IDiscountServiceForRecurringBilling_IsValidDiscountForRecurringBilling_Call {
	return &IDiscountServiceForRecurringBilling_IsValidDiscountForRecurringBilling_Call{Call: _e.mock.On("IsValidDiscountForRecurringBilling", ctx, db, orderItemData, proRatedBillItem, ratioOfProRatedBillingItem, normalBillItem, discountName)}
}

func (_c *IDiscountServiceForRecurringBilling_IsValidDiscountForRecurringBilling_Call) Run(run func(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData, proRatedBillItem utils.BillingItemData, ratioOfProRatedBillingItem entities.BillingRatio, normalBillItem []utils.BillingItemData, discountName *string)) *IDiscountServiceForRecurringBilling_IsValidDiscountForRecurringBilling_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(utils.OrderItemData), args[3].(utils.BillingItemData), args[4].(entities.BillingRatio), args[5].([]utils.BillingItemData), args[6].(*string))
	})
	return _c
}

func (_c *IDiscountServiceForRecurringBilling_IsValidDiscountForRecurringBilling_Call) Return(err error) *IDiscountServiceForRecurringBilling_IsValidDiscountForRecurringBilling_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IDiscountServiceForRecurringBilling_IsValidDiscountForRecurringBilling_Call) RunAndReturn(run func(context.Context, database.QueryExecer, utils.OrderItemData, utils.BillingItemData, entities.BillingRatio, []utils.BillingItemData, *string) error) *IDiscountServiceForRecurringBilling_IsValidDiscountForRecurringBilling_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIDiscountServiceForRecurringBilling interface {
	mock.TestingT
	Cleanup(func())
}

// NewIDiscountServiceForRecurringBilling creates a new instance of IDiscountServiceForRecurringBilling. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIDiscountServiceForRecurringBilling(t mockConstructorTestingTNewIDiscountServiceForRecurringBilling) *IDiscountServiceForRecurringBilling {
	mock := &IDiscountServiceForRecurringBilling{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
