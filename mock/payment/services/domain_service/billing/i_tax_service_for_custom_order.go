// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	mock "github.com/stretchr/testify/mock"

	pmpb "github.com/manabie-com/backend/pkg/manabuf/payment/v1"
)

// ITaxServiceForCustomOrder is an autogenerated mock type for the ITaxServiceForCustomOrder type
type ITaxServiceForCustomOrder struct {
	mock.Mock
}

type ITaxServiceForCustomOrder_Expecter struct {
	mock *mock.Mock
}

func (_m *ITaxServiceForCustomOrder) EXPECT() *ITaxServiceForCustomOrder_Expecter {
	return &ITaxServiceForCustomOrder_Expecter{mock: &_m.Mock}
}

// IsValidTaxForCustomOrder provides a mock function with given fields: ctx, db, customBillingItem
func (_m *ITaxServiceForCustomOrder) IsValidTaxForCustomOrder(ctx context.Context, db database.QueryExecer, customBillingItem *pmpb.CustomBillingItem) error {
	ret := _m.Called(ctx, db, customBillingItem)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, *pmpb.CustomBillingItem) error); ok {
		r0 = rf(ctx, db, customBillingItem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ITaxServiceForCustomOrder_IsValidTaxForCustomOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsValidTaxForCustomOrder'
type ITaxServiceForCustomOrder_IsValidTaxForCustomOrder_Call struct {
	*mock.Call
}

// IsValidTaxForCustomOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - db database.QueryExecer
//   - customBillingItem *pmpb.CustomBillingItem
func (_e *ITaxServiceForCustomOrder_Expecter) IsValidTaxForCustomOrder(ctx interface{}, db interface{}, customBillingItem interface{}) *ITaxServiceForCustomOrder_IsValidTaxForCustomOrder_Call {
	return &ITaxServiceForCustomOrder_IsValidTaxForCustomOrder_Call{Call: _e.mock.On("IsValidTaxForCustomOrder", ctx, db, customBillingItem)}
}

func (_c *ITaxServiceForCustomOrder_IsValidTaxForCustomOrder_Call) Run(run func(ctx context.Context, db database.QueryExecer, customBillingItem *pmpb.CustomBillingItem)) *ITaxServiceForCustomOrder_IsValidTaxForCustomOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(database.QueryExecer), args[2].(*pmpb.CustomBillingItem))
	})
	return _c
}

func (_c *ITaxServiceForCustomOrder_IsValidTaxForCustomOrder_Call) Return(err error) *ITaxServiceForCustomOrder_IsValidTaxForCustomOrder_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ITaxServiceForCustomOrder_IsValidTaxForCustomOrder_Call) RunAndReturn(run func(context.Context, database.QueryExecer, *pmpb.CustomBillingItem) error) *ITaxServiceForCustomOrder_IsValidTaxForCustomOrder_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewITaxServiceForCustomOrder interface {
	mock.TestingT
	Cleanup(func())
}

// NewITaxServiceForCustomOrder creates a new instance of ITaxServiceForCustomOrder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewITaxServiceForCustomOrder(t mockConstructorTestingTNewITaxServiceForCustomOrder) *ITaxServiceForCustomOrder {
	mock := &ITaxServiceForCustomOrder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
