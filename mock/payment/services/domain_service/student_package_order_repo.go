// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// StudentPackageOrderRepo is an autogenerated mock type for the StudentPackageOrderRepo type
type StudentPackageOrderRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, db, studentPackageOrder
func (_m *StudentPackageOrderRepo) Create(ctx context.Context, db database.QueryExecer, studentPackageOrder entities.StudentPackageOrder) error {
	ret := _m.Called(ctx, db, studentPackageOrder)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, entities.StudentPackageOrder) error); ok {
		r0 = rf(ctx, db, studentPackageOrder)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByStudentPackageIDAndOrderID provides a mock function with given fields: ctx, db, studentPackageID, orderID
func (_m *StudentPackageOrderRepo) GetByStudentPackageIDAndOrderID(ctx context.Context, db database.QueryExecer, studentPackageID string, orderID string) (*entities.StudentPackageOrder, error) {
	ret := _m.Called(ctx, db, studentPackageID, orderID)

	var r0 *entities.StudentPackageOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, string) (*entities.StudentPackageOrder, error)); ok {
		return rf(ctx, db, studentPackageID, orderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, string) *entities.StudentPackageOrder); ok {
		r0 = rf(ctx, db, studentPackageID, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.StudentPackageOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, string, string) error); ok {
		r1 = rf(ctx, db, studentPackageID, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByStudentPackageOrderID provides a mock function with given fields: ctx, db, studentPackageOrderID
func (_m *StudentPackageOrderRepo) GetByStudentPackageOrderID(ctx context.Context, db database.QueryExecer, studentPackageOrderID string) (*entities.StudentPackageOrder, error) {
	ret := _m.Called(ctx, db, studentPackageOrderID)

	var r0 *entities.StudentPackageOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) (*entities.StudentPackageOrder, error)); ok {
		return rf(ctx, db, studentPackageOrderID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) *entities.StudentPackageOrder); ok {
		r0 = rf(ctx, db, studentPackageOrderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.StudentPackageOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, string) error); ok {
		r1 = rf(ctx, db, studentPackageOrderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStudentPackageOrderByTimeAndStudentPackageID provides a mock function with given fields: ctx, db, studentPackageID, startTime
func (_m *StudentPackageOrderRepo) GetStudentPackageOrderByTimeAndStudentPackageID(ctx context.Context, db database.QueryExecer, studentPackageID string, startTime time.Time) (*entities.StudentPackageOrder, error) {
	ret := _m.Called(ctx, db, studentPackageID, startTime)

	var r0 *entities.StudentPackageOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, time.Time) (*entities.StudentPackageOrder, error)); ok {
		return rf(ctx, db, studentPackageID, startTime)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, time.Time) *entities.StudentPackageOrder); ok {
		r0 = rf(ctx, db, studentPackageID, startTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.StudentPackageOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, string, time.Time) error); ok {
		r1 = rf(ctx, db, studentPackageID, startTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStudentPackageOrdersByStudentPackageID provides a mock function with given fields: ctx, db, studentPackageID
func (_m *StudentPackageOrderRepo) GetStudentPackageOrdersByStudentPackageID(ctx context.Context, db database.QueryExecer, studentPackageID string) ([]*entities.StudentPackageOrder, error) {
	ret := _m.Called(ctx, db, studentPackageID)

	var r0 []*entities.StudentPackageOrder
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) ([]*entities.StudentPackageOrder, error)); ok {
		return rf(ctx, db, studentPackageID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) []*entities.StudentPackageOrder); ok {
		r0 = rf(ctx, db, studentPackageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.StudentPackageOrder)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, string) error); ok {
		r1 = rf(ctx, db, studentPackageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetCurrentPosition provides a mock function with given fields: ctx, db, studentPackageID
func (_m *StudentPackageOrderRepo) ResetCurrentPosition(ctx context.Context, db database.QueryExecer, studentPackageID string) error {
	ret := _m.Called(ctx, db, studentPackageID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) error); ok {
		r0 = rf(ctx, db, studentPackageID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RevertByID provides a mock function with given fields: ctx, db, id
func (_m *StudentPackageOrderRepo) RevertByID(ctx context.Context, db database.QueryExecer, id string) error {
	ret := _m.Called(ctx, db, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) error); ok {
		r0 = rf(ctx, db, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetCurrentStudentPackageByID provides a mock function with given fields: ctx, db, id, isCurrent
func (_m *StudentPackageOrderRepo) SetCurrentStudentPackageByID(ctx context.Context, db database.QueryExecer, id string, isCurrent bool) error {
	ret := _m.Called(ctx, db, id, isCurrent)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, bool) error); ok {
		r0 = rf(ctx, db, id, isCurrent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SoftDeleteByID provides a mock function with given fields: ctx, db, id
func (_m *StudentPackageOrderRepo) SoftDeleteByID(ctx context.Context, db database.QueryExecer, id string) error {
	ret := _m.Called(ctx, db, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) error); ok {
		r0 = rf(ctx, db, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, db, e
func (_m *StudentPackageOrderRepo) Update(ctx context.Context, db database.QueryExecer, e entities.StudentPackageOrder) error {
	ret := _m.Called(ctx, db, e)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, entities.StudentPackageOrder) error); ok {
		r0 = rf(ctx, db, e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateExecuteError provides a mock function with given fields: ctx, db, studentPackageOrder
func (_m *StudentPackageOrderRepo) UpdateExecuteError(ctx context.Context, db database.QueryExecer, studentPackageOrder entities.StudentPackageOrder) error {
	ret := _m.Called(ctx, db, studentPackageOrder)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, entities.StudentPackageOrder) error); ok {
		r0 = rf(ctx, db, studentPackageOrder)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateExecuteStatus provides a mock function with given fields: ctx, db, studentPackageOrder
func (_m *StudentPackageOrderRepo) UpdateExecuteStatus(ctx context.Context, db database.QueryExecer, studentPackageOrder entities.StudentPackageOrder) error {
	ret := _m.Called(ctx, db, studentPackageOrder)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, entities.StudentPackageOrder) error); ok {
		r0 = rf(ctx, db, studentPackageOrder)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Upsert provides a mock function with given fields: ctx, tx, studentPackageOrder
func (_m *StudentPackageOrderRepo) Upsert(ctx context.Context, tx database.QueryExecer, studentPackageOrder entities.StudentPackageOrder) error {
	ret := _m.Called(ctx, tx, studentPackageOrder)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, entities.StudentPackageOrder) error); ok {
		r0 = rf(ctx, tx, studentPackageOrder)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStudentPackageOrderRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewStudentPackageOrderRepo creates a new instance of StudentPackageOrderRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStudentPackageOrderRepo(t mockConstructorTestingTNewStudentPackageOrderRepo) *StudentPackageOrderRepo {
	mock := &StudentPackageOrderRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
