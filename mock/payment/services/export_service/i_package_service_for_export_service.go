// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	export "github.com/manabie-com/backend/internal/payment/export_entities"

	mock "github.com/stretchr/testify/mock"
)

// IPackageServiceForExportService is an autogenerated mock type for the IPackageServiceForExportService type
type IPackageServiceForExportService struct {
	mock.Mock
}

// GetAllPackagesForExport provides a mock function with given fields: ctx, db
func (_m *IPackageServiceForExportService) GetAllPackagesForExport(ctx context.Context, db database.Ext) ([]*export.ProductPackageExport, error) {
	ret := _m.Called(ctx, db)

	var r0 []*export.ProductPackageExport
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext) ([]*export.ProductPackageExport, error)); ok {
		return rf(ctx, db)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext) []*export.ProductPackageExport); ok {
		r0 = rf(ctx, db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*export.ProductPackageExport)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.Ext) error); ok {
		r1 = rf(ctx, db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIPackageServiceForExportService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIPackageServiceForExportService creates a new instance of IPackageServiceForExportService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIPackageServiceForExportService(t mockConstructorTestingTNewIPackageServiceForExportService) *IPackageServiceForExportService {
	mock := &IPackageServiceForExportService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
