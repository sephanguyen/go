// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	elastic "github.com/olivere/elastic/v7"
	mock "github.com/stretchr/testify/mock"
)

// Condition is an autogenerated mock type for the Condition type
type Condition struct {
	mock.Mock
}

type Condition_Expecter struct {
	mock *mock.Mock
}

func (_m *Condition) EXPECT() *Condition_Expecter {
	return &Condition_Expecter{mock: &_m.Mock}
}

// BuildQuery provides a mock function with given fields:
func (_m *Condition) BuildQuery() elastic.Query {
	ret := _m.Called()

	var r0 elastic.Query
	if rf, ok := ret.Get(0).(func() elastic.Query); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(elastic.Query)
		}
	}

	return r0
}

// Condition_BuildQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildQuery'
type Condition_BuildQuery_Call struct {
	*mock.Call
}

// BuildQuery is a helper method to define mock.On call
func (_e *Condition_Expecter) BuildQuery() *Condition_BuildQuery_Call {
	return &Condition_BuildQuery_Call{Call: _e.mock.On("BuildQuery")}
}

func (_c *Condition_BuildQuery_Call) Run(run func()) *Condition_BuildQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Condition_BuildQuery_Call) Return(_a0 elastic.Query) *Condition_BuildQuery_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Condition_BuildQuery_Call) RunAndReturn(run func() elastic.Query) *Condition_BuildQuery_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *Condition) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Condition_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type Condition_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *Condition_Expecter) String() *Condition_String_Call {
	return &Condition_String_Call{Call: _e.mock.On("String")}
}

func (_c *Condition_String_Call) Run(run func()) *Condition_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Condition_String_Call) Return(_a0 string) *Condition_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Condition_String_Call) RunAndReturn(run func() string) *Condition_String_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewCondition interface {
	mock.TestingT
	Cleanup(func())
}

// NewCondition creates a new instance of Condition. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCondition(t mockConstructorTestingTNewCondition) *Condition {
	mock := &Condition{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
