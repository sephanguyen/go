// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"
)

// IStudentProductServiceForInternalService is an autogenerated mock type for the IStudentProductServiceForInternalService type
type IStudentProductServiceForInternalService struct {
	mock.Mock
}

// CancelStudentProduct provides a mock function with given fields: ctx, db, studentProductID
func (_m *IStudentProductServiceForInternalService) CancelStudentProduct(ctx context.Context, db database.QueryExecer, studentProductID string) error {
	ret := _m.Called(ctx, db, studentProductID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) error); ok {
		r0 = rf(ctx, db, studentProductID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetStudentProductByStudentProductIDForUpdate provides a mock function with given fields: ctx, db, studentProductID
func (_m *IStudentProductServiceForInternalService) GetStudentProductByStudentProductIDForUpdate(ctx context.Context, db database.QueryExecer, studentProductID string) (entities.StudentProduct, error) {
	ret := _m.Called(ctx, db, studentProductID)

	var r0 entities.StudentProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) (entities.StudentProduct, error)); ok {
		return rf(ctx, db, studentProductID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) entities.StudentProduct); ok {
		r0 = rf(ctx, db, studentProductID)
	} else {
		r0 = ret.Get(0).(entities.StudentProduct)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, string) error); ok {
		r1 = rf(ctx, db, studentProductID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStudentProductsByStudentProductLabel provides a mock function with given fields: ctx, db, studentProductLabels
func (_m *IStudentProductServiceForInternalService) GetStudentProductsByStudentProductLabel(ctx context.Context, db database.QueryExecer, studentProductLabels []string) ([]*entities.StudentProduct, error) {
	ret := _m.Called(ctx, db, studentProductLabels)

	var r0 []*entities.StudentProduct
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, []string) ([]*entities.StudentProduct, error)); ok {
		return rf(ctx, db, studentProductLabels)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, []string) []*entities.StudentProduct); ok {
		r0 = rf(ctx, db, studentProductLabels)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.StudentProduct)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, []string) error); ok {
		r1 = rf(ctx, db, studentProductLabels)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PauseStudentProduct provides a mock function with given fields: ctx, db, studentProduct
func (_m *IStudentProductServiceForInternalService) PauseStudentProduct(ctx context.Context, db database.QueryExecer, studentProduct entities.StudentProduct) error {
	ret := _m.Called(ctx, db, studentProduct)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, entities.StudentProduct) error); ok {
		r0 = rf(ctx, db, studentProduct)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIStudentProductServiceForInternalService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIStudentProductServiceForInternalService creates a new instance of IStudentProductServiceForInternalService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIStudentProductServiceForInternalService(t mockConstructorTestingTNewIStudentProductServiceForInternalService) *IStudentProductServiceForInternalService {
	mock := &IStudentProductServiceForInternalService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
