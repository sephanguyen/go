// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"
)

// IBillItemServiceForInternalService is an autogenerated mock type for the IBillItemServiceForInternalService type
type IBillItemServiceForInternalService struct {
	mock.Mock
}

// CreateUpcomingBillItems provides a mock function with given fields: ctx, db, billItem
func (_m *IBillItemServiceForInternalService) CreateUpcomingBillItems(ctx context.Context, db database.QueryExecer, billItem *entities.BillItem) error {
	ret := _m.Called(ctx, db, billItem)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, *entities.BillItem) error); ok {
		r0 = rf(ctx, db, billItem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRecurringBillItemsByOrderIDAndProductID provides a mock function with given fields: ctx, db, orderID, productID
func (_m *IBillItemServiceForInternalService) GetRecurringBillItemsByOrderIDAndProductID(ctx context.Context, db database.QueryExecer, orderID string, productID string) ([]entities.BillItem, error) {
	ret := _m.Called(ctx, db, orderID, productID)

	var r0 []entities.BillItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, string) ([]entities.BillItem, error)); ok {
		return rf(ctx, db, orderID, productID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, string) []entities.BillItem); ok {
		r0 = rf(ctx, db, orderID, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.BillItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, string, string) error); ok {
		r1 = rf(ctx, db, orderID, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBillItemStatusAndReturnOrderID provides a mock function with given fields: ctx, db, billItemSequenceNumber, billItemStatus
func (_m *IBillItemServiceForInternalService) UpdateBillItemStatusAndReturnOrderID(ctx context.Context, db database.QueryExecer, billItemSequenceNumber int32, billItemStatus string) (string, error) {
	ret := _m.Called(ctx, db, billItemSequenceNumber, billItemStatus)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, int32, string) (string, error)); ok {
		return rf(ctx, db, billItemSequenceNumber, billItemStatus)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, int32, string) string); ok {
		r0 = rf(ctx, db, billItemSequenceNumber, billItemStatus)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, int32, string) error); ok {
		r1 = rf(ctx, db, billItemSequenceNumber, billItemStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIBillItemServiceForInternalService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIBillItemServiceForInternalService creates a new instance of IBillItemServiceForInternalService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIBillItemServiceForInternalService(t mockConstructorTestingTNewIBillItemServiceForInternalService) *IBillItemServiceForInternalService {
	mock := &IBillItemServiceForInternalService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
