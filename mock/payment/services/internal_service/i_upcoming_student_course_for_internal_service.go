// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"
)

// IUpcomingStudentCourseForInternalService is an autogenerated mock type for the IUpcomingStudentCourseForInternalService type
type IUpcomingStudentCourseForInternalService struct {
	mock.Mock
}

// GetUpcomingStudentCoursesByUpcomingStudentPackageID provides a mock function with given fields: ctx, db, upcomingStudentPackageID
func (_m *IUpcomingStudentCourseForInternalService) GetUpcomingStudentCoursesByUpcomingStudentPackageID(ctx context.Context, db database.QueryExecer, upcomingStudentPackageID string) ([]entities.UpcomingStudentCourse, error) {
	ret := _m.Called(ctx, db, upcomingStudentPackageID)

	var r0 []entities.UpcomingStudentCourse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) ([]entities.UpcomingStudentCourse, error)); ok {
		return rf(ctx, db, upcomingStudentPackageID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string) []entities.UpcomingStudentCourse); ok {
		r0 = rf(ctx, db, upcomingStudentPackageID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.UpcomingStudentCourse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, string) error); ok {
		r1 = rf(ctx, db, upcomingStudentPackageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateExecuteError provides a mock function with given fields: ctx, db, upcomingStudentCourse
func (_m *IUpcomingStudentCourseForInternalService) UpdateExecuteError(ctx context.Context, db database.QueryExecer, upcomingStudentCourse entities.UpcomingStudentCourse) error {
	ret := _m.Called(ctx, db, upcomingStudentCourse)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, entities.UpcomingStudentCourse) error); ok {
		r0 = rf(ctx, db, upcomingStudentCourse)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateExecuteStatus provides a mock function with given fields: ctx, db, upcomingStudentCourse
func (_m *IUpcomingStudentCourseForInternalService) UpdateExecuteStatus(ctx context.Context, db database.QueryExecer, upcomingStudentCourse entities.UpcomingStudentCourse) error {
	ret := _m.Called(ctx, db, upcomingStudentCourse)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, entities.UpcomingStudentCourse) error); ok {
		r0 = rf(ctx, db, upcomingStudentCourse)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIUpcomingStudentCourseForInternalService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIUpcomingStudentCourseForInternalService creates a new instance of IUpcomingStudentCourseForInternalService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIUpcomingStudentCourseForInternalService(t mockConstructorTestingTNewIUpcomingStudentCourseForInternalService) *IUpcomingStudentCourseForInternalService {
	mock := &IUpcomingStudentCourseForInternalService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
