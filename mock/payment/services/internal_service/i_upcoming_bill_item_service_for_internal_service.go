// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"
)

// IUpcomingBillItemServiceForInternalService is an autogenerated mock type for the IUpcomingBillItemServiceForInternalService type
type IUpcomingBillItemServiceForInternalService struct {
	mock.Mock
}

// AddExecuteNoteForCurrentUpcomingBillItem provides a mock function with given fields: ctx, db, upcomingBillItem, err
func (_m *IUpcomingBillItemServiceForInternalService) AddExecuteNoteForCurrentUpcomingBillItem(ctx context.Context, db database.QueryExecer, upcomingBillItem entities.UpcomingBillItem, err error) error {
	ret := _m.Called(ctx, db, upcomingBillItem, err)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, entities.UpcomingBillItem, error) error); ok {
		r0 = rf(ctx, db, upcomingBillItem, err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUpcomingBillItem provides a mock function with given fields: ctx, db, billItem
func (_m *IUpcomingBillItemServiceForInternalService) CreateUpcomingBillItem(ctx context.Context, db database.QueryExecer, billItem entities.BillItem) error {
	ret := _m.Called(ctx, db, billItem)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, entities.BillItem) error); ok {
		r0 = rf(ctx, db, billItem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUpcomingBillItemByOrderIDProductIDBillingSchedulePeriodID provides a mock function with given fields: ctx, db, orderID, productID, billingSchedulePeriodID
func (_m *IUpcomingBillItemServiceForInternalService) GetUpcomingBillItemByOrderIDProductIDBillingSchedulePeriodID(ctx context.Context, db database.QueryExecer, orderID string, productID string, billingSchedulePeriodID string) ([]entities.UpcomingBillItem, error) {
	ret := _m.Called(ctx, db, orderID, productID, billingSchedulePeriodID)

	var r0 []entities.UpcomingBillItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, string, string) ([]entities.UpcomingBillItem, error)); ok {
		return rf(ctx, db, orderID, productID, billingSchedulePeriodID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, string, string, string) []entities.UpcomingBillItem); ok {
		r0 = rf(ctx, db, orderID, productID, billingSchedulePeriodID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.UpcomingBillItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, string, string, string) error); ok {
		r1 = rf(ctx, db, orderID, productID, billingSchedulePeriodID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUpcomingBillItemsForGenerate provides a mock function with given fields: ctx, db
func (_m *IUpcomingBillItemServiceForInternalService) GetUpcomingBillItemsForGenerate(ctx context.Context, db database.QueryExecer) ([]entities.UpcomingBillItem, error) {
	ret := _m.Called(ctx, db)

	var r0 []entities.UpcomingBillItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer) ([]entities.UpcomingBillItem, error)); ok {
		return rf(ctx, db)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer) []entities.UpcomingBillItem); ok {
		r0 = rf(ctx, db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.UpcomingBillItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer) error); ok {
		r1 = rf(ctx, db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetLastUpcomingBillItem provides a mock function with given fields: ctx, db, upcomingBillItem
func (_m *IUpcomingBillItemServiceForInternalService) SetLastUpcomingBillItem(ctx context.Context, db database.QueryExecer, upcomingBillItem entities.UpcomingBillItem) error {
	ret := _m.Called(ctx, db, upcomingBillItem)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, entities.UpcomingBillItem) error); ok {
		r0 = rf(ctx, db, upcomingBillItem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCurrentUpcomingBillItemStatus provides a mock function with given fields: ctx, db, upcomingBillItem
func (_m *IUpcomingBillItemServiceForInternalService) UpdateCurrentUpcomingBillItemStatus(ctx context.Context, db database.QueryExecer, upcomingBillItem entities.UpcomingBillItem) error {
	ret := _m.Called(ctx, db, upcomingBillItem)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, entities.UpcomingBillItem) error); ok {
		r0 = rf(ctx, db, upcomingBillItem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIUpcomingBillItemServiceForInternalService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIUpcomingBillItemServiceForInternalService creates a new instance of IUpcomingBillItemServiceForInternalService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIUpcomingBillItemServiceForInternalService(t mockConstructorTestingTNewIUpcomingBillItemServiceForInternalService) *IUpcomingBillItemServiceForInternalService {
	mock := &IUpcomingBillItemServiceForInternalService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
