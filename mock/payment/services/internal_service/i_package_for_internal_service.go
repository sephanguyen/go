// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	mock "github.com/stretchr/testify/mock"

	pmpb "github.com/manabie-com/backend/pkg/manabuf/payment/v1"
)

// IPackageForInternalService is an autogenerated mock type for the IPackageForInternalService type
type IPackageForInternalService struct {
	mock.Mock
}

// GetQuantityTypeByID provides a mock function with given fields: ctx, db, packageID
func (_m *IPackageForInternalService) GetQuantityTypeByID(ctx context.Context, db database.Ext, packageID string) (pmpb.QuantityType, error) {
	ret := _m.Called(ctx, db, packageID)

	var r0 pmpb.QuantityType
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string) (pmpb.QuantityType, error)); ok {
		return rf(ctx, db, packageID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.Ext, string) pmpb.QuantityType); ok {
		r0 = rf(ctx, db, packageID)
	} else {
		r0 = ret.Get(0).(pmpb.QuantityType)
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.Ext, string) error); ok {
		r1 = rf(ctx, db, packageID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIPackageForInternalService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIPackageForInternalService creates a new instance of IPackageForInternalService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIPackageForInternalService(t mockConstructorTestingTNewIPackageForInternalService) *IPackageForInternalService {
	mock := &IPackageForInternalService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
