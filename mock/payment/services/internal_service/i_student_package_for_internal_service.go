// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	entities "github.com/manabie-com/backend/internal/payment/entities"

	mock "github.com/stretchr/testify/mock"

	npb "github.com/manabie-com/backend/pkg/manabuf/nats/v1"
)

// IStudentPackageForInternalService is an autogenerated mock type for the IStudentPackageForInternalService type
type IStudentPackageForInternalService struct {
	mock.Mock
}

// GetStudentPackagesForCronJob provides a mock function with given fields: ctx, db
func (_m *IStudentPackageForInternalService) GetStudentPackagesForCronJob(ctx context.Context, db database.QueryExecer) ([]entities.StudentPackages, error) {
	ret := _m.Called(ctx, db)

	var r0 []entities.StudentPackages
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer) ([]entities.StudentPackages, error)); ok {
		return rf(ctx, db)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer) []entities.StudentPackages); ok {
		r0 = rf(ctx, db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.StudentPackages)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer) error); ok {
		r1 = rf(ctx, db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertStudentPackageDataForCronjob provides a mock function with given fields: ctx, db, studentPackage
func (_m *IStudentPackageForInternalService) UpsertStudentPackageDataForCronjob(ctx context.Context, db database.QueryExecer, studentPackage entities.StudentPackages) (*npb.EventStudentPackage, *entities.StudentPackageOrder, error) {
	ret := _m.Called(ctx, db, studentPackage)

	var r0 *npb.EventStudentPackage
	var r1 *entities.StudentPackageOrder
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, entities.StudentPackages) (*npb.EventStudentPackage, *entities.StudentPackageOrder, error)); ok {
		return rf(ctx, db, studentPackage)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, entities.StudentPackages) *npb.EventStudentPackage); ok {
		r0 = rf(ctx, db, studentPackage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*npb.EventStudentPackage)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.QueryExecer, entities.StudentPackages) *entities.StudentPackageOrder); ok {
		r1 = rf(ctx, db, studentPackage)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*entities.StudentPackageOrder)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, database.QueryExecer, entities.StudentPackages) error); ok {
		r2 = rf(ctx, db, studentPackage)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewIStudentPackageForInternalService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIStudentPackageForInternalService creates a new instance of IStudentPackageForInternalService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIStudentPackageForInternalService(t mockConstructorTestingTNewIStudentPackageForInternalService) *IStudentPackageForInternalService {
	mock := &IStudentPackageForInternalService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
