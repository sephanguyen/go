// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/manabie-com/backend/internal/golibs/database"
	mock "github.com/stretchr/testify/mock"

	utils "github.com/manabie-com/backend/internal/payment/utils"
)

// IBillingService is an autogenerated mock type for the IBillingService type
type IBillingService struct {
	mock.Mock
}

// CreateBillItemForOrderCancel provides a mock function with given fields: ctx, db, orderItemData
func (_m *IBillingService) CreateBillItemForOrderCancel(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) error {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateBillItemForOrderCreate provides a mock function with given fields: ctx, db, orderItemData
func (_m *IBillingService) CreateBillItemForOrderCreate(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) error {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateBillItemForOrderGraduate provides a mock function with given fields: ctx, db, orderItemData
func (_m *IBillingService) CreateBillItemForOrderGraduate(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) error {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateBillItemForOrderLOA provides a mock function with given fields: ctx, db, orderItemData
func (_m *IBillingService) CreateBillItemForOrderLOA(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) error {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateBillItemForOrderUpdate provides a mock function with given fields: ctx, db, orderItemData
func (_m *IBillingService) CreateBillItemForOrderUpdate(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) error {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateBillItemForOrderWithdrawal provides a mock function with given fields: ctx, db, orderItemData
func (_m *IBillingService) CreateBillItemForOrderWithdrawal(ctx context.Context, db database.QueryExecer, orderItemData utils.OrderItemData) error {
	ret := _m.Called(ctx, db, orderItemData)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.QueryExecer, utils.OrderItemData) error); ok {
		r0 = rf(ctx, db, orderItemData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIBillingService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIBillingService creates a new instance of IBillingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIBillingService(t mockConstructorTestingTNewIBillingService) *IBillingService {
	mock := &IBillingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
