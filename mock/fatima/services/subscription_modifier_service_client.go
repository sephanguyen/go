// Code generated by mockery v2.7.4. DO NOT EDIT.

package mock_services

import (
	context "context"

	fpb "github.com/manabie-com/backend/pkg/manabuf/fatima/v1"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// SubscriptionModifierServiceClient is an autogenerated mock type for the SubscriptionModifierServiceClient type
type SubscriptionModifierServiceClient struct {
	mock.Mock
}

// AddStudentPackage provides a mock function with given fields: ctx, in, opts
func (_m *SubscriptionModifierServiceClient) AddStudentPackage(ctx context.Context, in *fpb.AddStudentPackageRequest, opts ...grpc.CallOption) (*fpb.AddStudentPackageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *fpb.AddStudentPackageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *fpb.AddStudentPackageRequest, ...grpc.CallOption) *fpb.AddStudentPackageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fpb.AddStudentPackageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *fpb.AddStudentPackageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddStudentPackageCourse provides a mock function with given fields: ctx, in, opts
func (_m *SubscriptionModifierServiceClient) AddStudentPackageCourse(ctx context.Context, in *fpb.AddStudentPackageCourseRequest, opts ...grpc.CallOption) (*fpb.AddStudentPackageCourseResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *fpb.AddStudentPackageCourseResponse
	if rf, ok := ret.Get(0).(func(context.Context, *fpb.AddStudentPackageCourseRequest, ...grpc.CallOption) *fpb.AddStudentPackageCourseResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fpb.AddStudentPackageCourseResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *fpb.AddStudentPackageCourseRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePackage provides a mock function with given fields: ctx, in, opts
func (_m *SubscriptionModifierServiceClient) CreatePackage(ctx context.Context, in *fpb.CreatePackageRequest, opts ...grpc.CallOption) (*fpb.CreatePackageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *fpb.CreatePackageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *fpb.CreatePackageRequest, ...grpc.CallOption) *fpb.CreatePackageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fpb.CreatePackageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *fpb.CreatePackageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditTimeStudentPackage provides a mock function with given fields: ctx, in, opts
func (_m *SubscriptionModifierServiceClient) EditTimeStudentPackage(ctx context.Context, in *fpb.EditTimeStudentPackageRequest, opts ...grpc.CallOption) (*fpb.EditTimeStudentPackageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *fpb.EditTimeStudentPackageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *fpb.EditTimeStudentPackageRequest, ...grpc.CallOption) *fpb.EditTimeStudentPackageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fpb.EditTimeStudentPackageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *fpb.EditTimeStudentPackageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterStudentClass provides a mock function with given fields: ctx, in, opts
func (_m *SubscriptionModifierServiceClient) RegisterStudentClass(ctx context.Context, in *fpb.RegisterStudentClassRequest, opts ...grpc.CallOption) (*fpb.RegisterStudentClassResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *fpb.RegisterStudentClassResponse
	if rf, ok := ret.Get(0).(func(context.Context, *fpb.RegisterStudentClassRequest, ...grpc.CallOption) *fpb.RegisterStudentClassResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fpb.RegisterStudentClassResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *fpb.RegisterStudentClassRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToggleActivePackage provides a mock function with given fields: ctx, in, opts
func (_m *SubscriptionModifierServiceClient) ToggleActivePackage(ctx context.Context, in *fpb.ToggleActivePackageRequest, opts ...grpc.CallOption) (*fpb.ToggleActivePackageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *fpb.ToggleActivePackageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *fpb.ToggleActivePackageRequest, ...grpc.CallOption) *fpb.ToggleActivePackageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fpb.ToggleActivePackageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *fpb.ToggleActivePackageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ToggleActiveStudentPackage provides a mock function with given fields: ctx, in, opts
func (_m *SubscriptionModifierServiceClient) ToggleActiveStudentPackage(ctx context.Context, in *fpb.ToggleActiveStudentPackageRequest, opts ...grpc.CallOption) (*fpb.ToggleActiveStudentPackageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *fpb.ToggleActiveStudentPackageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *fpb.ToggleActiveStudentPackageRequest, ...grpc.CallOption) *fpb.ToggleActiveStudentPackageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fpb.ToggleActiveStudentPackageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *fpb.ToggleActiveStudentPackageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStudentPackage provides a mock function with given fields: ctx, in, opts
func (_m *SubscriptionModifierServiceClient) ListStudentPackage(ctx context.Context, in *fpb.ListStudentPackageRequest, opts ...grpc.CallOption) (*fpb.ListStudentPackageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *fpb.ListStudentPackageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *fpb.ListStudentPackageRequest, ...grpc.CallOption) *fpb.ListStudentPackageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fpb.ListStudentPackageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *fpb.ListStudentPackageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStudentPackageV2 provides a mock function with given fields: ctx, in, opts
func (_m *SubscriptionModifierServiceClient) ListStudentPackageV2(ctx context.Context, in *fpb.ListStudentPackageV2Request, opts ...grpc.CallOption) (fpb.SubscriptionModifierService_ListStudentPackageV2Client, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 fpb.SubscriptionModifierService_ListStudentPackageV2Client
	if rf, ok := ret.Get(0).(func(context.Context, *fpb.ListStudentPackageV2Request, ...grpc.CallOption) fpb.SubscriptionModifierService_ListStudentPackageV2Client); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fpb.SubscriptionModifierService_ListStudentPackageV2Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *fpb.ListStudentPackageV2Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WrapperRegisterStudentClass provides a mock function with given fields: ctx, in, opts
func (_m *SubscriptionModifierServiceClient) WrapperRegisterStudentClass(ctx context.Context, in *fpb.WrapperRegisterStudentClassRequest, opts ...grpc.CallOption) (*fpb.WrapperRegisterStudentClassResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *fpb.WrapperRegisterStudentClassResponse
	if rf, ok := ret.Get(0).(func(context.Context, *fpb.WrapperRegisterStudentClassRequest, ...grpc.CallOption) *fpb.WrapperRegisterStudentClassResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fpb.WrapperRegisterStudentClassResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *fpb.WrapperRegisterStudentClassRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *SubscriptionModifierServiceClient) RetrieveStudentPackagesUnderCourse(ctx context.Context, in *fpb.RetrieveStudentPackagesUnderCourseRequest, opts ...grpc.CallOption) (*fpb.RetrieveStudentPackagesUnderCourseResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *fpb.RetrieveStudentPackagesUnderCourseResponse
	if rf, ok := ret.Get(0).(func(context.Context, *fpb.RetrieveStudentPackagesUnderCourseRequest, ...grpc.CallOption) *fpb.RetrieveStudentPackagesUnderCourseResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fpb.RetrieveStudentPackagesUnderCourseResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *fpb.RetrieveStudentPackagesUnderCourseRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
