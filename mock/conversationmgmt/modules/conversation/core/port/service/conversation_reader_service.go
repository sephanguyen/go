// Code generated by mockery. DO NOT EDIT.

// This file can be generated by running: make gen-mock-repo

package mock_service

import (
	context "context"

	domain "github.com/manabie-com/backend/internal/conversationmgmt/modules/conversation/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// ConversationReaderService is an autogenerated mock type for the ConversationReaderService type
type ConversationReaderService struct {
	mock.Mock
}

// GetConversationsDetail provides a mock function with given fields: ctx, conversationIDs
func (_m *ConversationReaderService) GetConversationsDetail(ctx context.Context, conversationIDs []string) ([]*domain.Conversation, error) {
	ret := _m.Called(ctx, conversationIDs)

	var r0 []*domain.Conversation
	if rf, ok := ret.Get(0).(func(context.Context, []string) []*domain.Conversation); ok {
		r0 = rf(ctx, conversationIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Conversation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, conversationIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewConversationReaderService interface {
	mock.TestingT
	Cleanup(func())
}

// NewConversationReaderService creates a new instance of ConversationReaderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConversationReaderService(t mockConstructorTestingTNewConversationReaderService) *ConversationReaderService {
	mock := &ConversationReaderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
