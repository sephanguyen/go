// Code generated by mockery. DO NOT EDIT.

// This file can be generated by running: make gen-mock-repo

package mock_service

import (
	context "context"

	domain "github.com/manabie-com/backend/internal/conversationmgmt/modules/conversation/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// ConversationModifierService is an autogenerated mock type for the ConversationModifierService type
type ConversationModifierService struct {
	mock.Mock
}

// AddConversationMembers provides a mock function with given fields: ctx, conversationMember
func (_m *ConversationModifierService) AddConversationMembers(ctx context.Context, conversationMember []domain.ConversationMember) error {
	ret := _m.Called(ctx, conversationMember)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []domain.ConversationMember) error); ok {
		r0 = rf(ctx, conversationMember)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateConversation provides a mock function with given fields: ctx, conversation
func (_m *ConversationModifierService) CreateConversation(ctx context.Context, conversation *domain.Conversation) (*domain.Conversation, error) {
	ret := _m.Called(ctx, conversation)

	var r0 *domain.Conversation
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Conversation) *domain.Conversation); ok {
		r0 = rf(ctx, conversation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Conversation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Conversation) error); ok {
		r1 = rf(ctx, conversation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMessage provides a mock function with given fields: ctx, message
func (_m *ConversationModifierService) DeleteMessage(ctx context.Context, message *domain.Message) error {
	ret := _m.Called(ctx, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Message) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveConversationMembers provides a mock function with given fields: ctx, conversationMembers
func (_m *ConversationModifierService) RemoveConversationMembers(ctx context.Context, conversationMembers []domain.ConversationMember) error {
	ret := _m.Called(ctx, conversationMembers)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []domain.ConversationMember) error); ok {
		r0 = rf(ctx, conversationMembers)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateConversationInfo provides a mock function with given fields: ctx, conversation
func (_m *ConversationModifierService) UpdateConversationInfo(ctx context.Context, conversation *domain.Conversation) (*domain.Conversation, error) {
	ret := _m.Called(ctx, conversation)

	var r0 *domain.Conversation
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Conversation) *domain.Conversation); ok {
		r0 = rf(ctx, conversation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Conversation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Conversation) error); ok {
		r1 = rf(ctx, conversation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLatestMessage provides a mock function with given fields: ctx, message
func (_m *ConversationModifierService) UpdateLatestMessage(ctx context.Context, message *domain.Message) error {
	ret := _m.Called(ctx, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Message) error); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewConversationModifierService interface {
	mock.TestingT
	Cleanup(func())
}

// NewConversationModifierService creates a new instance of ConversationModifierService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConversationModifierService(t mockConstructorTestingTNewConversationModifierService) *ConversationModifierService {
	mock := &ConversationModifierService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
