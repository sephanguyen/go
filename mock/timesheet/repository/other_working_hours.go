// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/timesheet/domain/entity"
)

type MockOtherWorkingHoursRepoImpl struct {
	mock.Mock
}

func (r *MockOtherWorkingHoursRepoImpl) FindListOtherWorkingHoursByTimesheetIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*entity.OtherWorkingHours, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entity.OtherWorkingHours), args.Error(1)
}

func (r *MockOtherWorkingHoursRepoImpl) MapExistingOWHsByTimesheetIds(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) (map[string]struct{}, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(map[string]struct{}), args.Error(1)
}

func (r *MockOtherWorkingHoursRepoImpl) SoftDeleteByTimesheetID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockOtherWorkingHoursRepoImpl) UpsertMultiple(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entity.OtherWorkingHours) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
