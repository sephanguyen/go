// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"
	"time"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/timesheet/domain/entity"
)

type MockTimesheetLessonHoursRepoImpl struct {
	mock.Mock
}

func (r *MockTimesheetLessonHoursRepoImpl) FindByTimesheetIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) ([]*entity.TimesheetLessonHours, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entity.TimesheetLessonHours), args.Error(1)
}

func (r *MockTimesheetLessonHoursRepoImpl) FindTimesheetLessonHoursByLessonIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) ([]*entity.TimesheetLessonHours, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entity.TimesheetLessonHours), args.Error(1)
}

func (r *MockTimesheetLessonHoursRepoImpl) FindTimesheetLessonHoursByTimesheetID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) ([]*entity.TimesheetLessonHours, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entity.TimesheetLessonHours), args.Error(1)
}

func (r *MockTimesheetLessonHoursRepoImpl) InsertMultiple(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entity.TimesheetLessonHours) ([]*entity.TimesheetLessonHours, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entity.TimesheetLessonHours), args.Error(1)
}

func (r *MockTimesheetLessonHoursRepoImpl) MapExistingLessonHoursByTimesheetIds(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) (map[string]struct{}, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(map[string]struct{}), args.Error(1)
}

func (r *MockTimesheetLessonHoursRepoImpl) SoftDelete(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entity.TimesheetLessonHours) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockTimesheetLessonHoursRepoImpl) UpdateAutoCreateFlagStateAfterTime(arg1 context.Context, arg2 database.QueryExecer, arg3 []string, arg4 time.Time, arg5 bool) error {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Error(0)
}

func (r *MockTimesheetLessonHoursRepoImpl) UpdateTimesheetLessonAutoCreateFlagByTimesheetIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string, arg4 bool) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockTimesheetLessonHoursRepoImpl) UpsertMultiple(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entity.TimesheetLessonHours) ([]*entity.TimesheetLessonHours, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entity.TimesheetLessonHours), args.Error(1)
}
