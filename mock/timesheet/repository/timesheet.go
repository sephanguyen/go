// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"
	"time"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/timesheet/domain/dto"
	"github.com/manabie-com/backend/internal/timesheet/domain/entity"
)

type MockTimesheetRepoImpl struct {
	mock.Mock
}

func (r *MockTimesheetRepoImpl) CountNotApprovedAndNotConfirmedTimesheet(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 time.Time, arg5 time.Time) (int, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Get(0).(int), args.Error(1)
}

func (r *MockTimesheetRepoImpl) CountTimesheets(arg1 context.Context, arg2 database.QueryExecer, arg3 *dto.TimesheetCountReq) (*dto.TimesheetCountOut, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*dto.TimesheetCountOut), args.Error(1)
}

func (r *MockTimesheetRepoImpl) CountTimesheetsV2(arg1 context.Context, arg2 database.QueryExecer, arg3 *dto.TimesheetCountV2Req) (*dto.TimesheetCountV2Out, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*dto.TimesheetCountV2Out), args.Error(1)
}

func (r *MockTimesheetRepoImpl) FindTimesheetByLessonIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) ([]*entity.Timesheet, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entity.Timesheet), args.Error(1)
}

func (r *MockTimesheetRepoImpl) FindTimesheetByTimesheetArgs(arg1 context.Context, arg2 database.QueryExecer, arg3 *dto.TimesheetQueryArgs) ([]*entity.Timesheet, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entity.Timesheet), args.Error(1)
}

func (r *MockTimesheetRepoImpl) FindTimesheetByTimesheetID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (*entity.Timesheet, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entity.Timesheet), args.Error(1)
}

func (r *MockTimesheetRepoImpl) FindTimesheetByTimesheetIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) ([]*entity.Timesheet, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entity.Timesheet), args.Error(1)
}

func (r *MockTimesheetRepoImpl) FindTimesheetByTimesheetIDsAndStatus(arg1 context.Context, arg2 database.QueryExecer, arg3 []string, arg4 string) ([]*entity.Timesheet, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entity.Timesheet), args.Error(1)
}

func (r *MockTimesheetRepoImpl) FindTimesheetInLocationByDateAndStatus(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string, arg5 time.Time, arg6 time.Time) ([]*entity.Timesheet, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5, arg6)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entity.Timesheet), args.Error(1)
}

func (r *MockTimesheetRepoImpl) GetStaffFutureTimesheetIDsWithLocations(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 time.Time, arg5 []string) ([]dto.TimesheetLocationDto, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]dto.TimesheetLocationDto), args.Error(1)
}

func (r *MockTimesheetRepoImpl) GetStaffTimesheetIDsAfterDateCanChange(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 time.Time) ([]string, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]string), args.Error(1)
}

func (r *MockTimesheetRepoImpl) GetTimesheetCountByStatusAndLocationIds(arg1 context.Context, arg2 database.QueryExecer, arg3 *dto.TimesheetCountByStatusAndLocationIdsReq) (*dto.TimesheetCountByStatusAndLocationIdsResp, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*dto.TimesheetCountByStatusAndLocationIdsResp), args.Error(1)
}

func (r *MockTimesheetRepoImpl) InsertTimeSheet(arg1 context.Context, arg2 database.QueryExecer, arg3 *entity.Timesheet) (*entity.Timesheet, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entity.Timesheet), args.Error(1)
}

func (r *MockTimesheetRepoImpl) RemoveTimesheetRemarkByTimesheetIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockTimesheetRepoImpl) Retrieve(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*entity.Timesheet, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entity.Timesheet), args.Error(1)
}

func (r *MockTimesheetRepoImpl) SoftDeleteByIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockTimesheetRepoImpl) UpdateTimeSheet(arg1 context.Context, arg2 database.QueryExecer, arg3 *entity.Timesheet) (*entity.Timesheet, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entity.Timesheet), args.Error(1)
}

func (r *MockTimesheetRepoImpl) UpdateTimesheetStatusMultiple(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entity.Timesheet, arg4 string) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockTimesheetRepoImpl) UpdateTimesheetStatusToConfirmByDateAndLocation(arg1 context.Context, arg2 database.QueryExecer, arg3 time.Time, arg4 time.Time, arg5 string, arg6 string) error {
	args := r.Called(arg1, arg2, arg3, arg4, arg5, arg6)
	return args.Error(0)
}

func (r *MockTimesheetRepoImpl) UpsertMultiple(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entity.Timesheet) ([]*entity.Timesheet, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entity.Timesheet), args.Error(1)
}
