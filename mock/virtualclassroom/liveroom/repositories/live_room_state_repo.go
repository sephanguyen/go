// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"
	"time"

	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	vc_domain "github.com/manabie-com/backend/internal/virtualclassroom/modules/virtualclassroom/domain"
	"github.com/manabie-com/backend/internal/virtualclassroom/modules/liveroom/domain"
)

type MockLiveRoomStateRepo struct {
	mock.Mock
}

func (r *MockLiveRoomStateRepo) DecreaseNumberOfStreaming(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockLiveRoomStateRepo) GetLiveRoomStateByChannelID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) (*domain.LiveRoomState, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*domain.LiveRoomState), args.Error(1)
}

func (r *MockLiveRoomStateRepo) GetStreamingLearners(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 bool) ([]string, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]string), args.Error(1)
}

func (r *MockLiveRoomStateRepo) IncreaseNumberOfStreaming(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string, arg5 int) error {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Error(0)
}

func (r *MockLiveRoomStateRepo) UnSpotlight(arg1 context.Context, arg2 database.QueryExecer, arg3 string) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLiveRoomStateRepo) UpsertLiveRoomCurrentMaterialState(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 *vc_domain.CurrentMaterial) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockLiveRoomStateRepo) UpsertLiveRoomCurrentPollingState(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 *vc_domain.CurrentPolling) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockLiveRoomStateRepo) UpsertLiveRoomSessionTime(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 time.Time) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockLiveRoomStateRepo) UpsertLiveRoomSpotlightState(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockLiveRoomStateRepo) UpsertLiveRoomState(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 interface{}, arg5 string) error {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Error(0)
}

func (r *MockLiveRoomStateRepo) UpsertLiveRoomWhiteboardZoomState(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 *vc_domain.WhiteboardZoomState) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockLiveRoomStateRepo) UpsertRecordingState(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 *vc_domain.CompositeRecordingState) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}
