// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"
	"time"

	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/virtualclassroom/modules/virtualclassroom/domain"
)

type MockLessonRoomStateRepo struct {
	mock.Mock
}

func (r *MockLessonRoomStateRepo) GetLessonRoomStateByLessonID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) (*domain.LessonRoomState, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*domain.LessonRoomState), args.Error(1)
}

func (r *MockLessonRoomStateRepo) UnSpotlight(arg1 context.Context, arg2 database.QueryExecer, arg3 string) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLessonRoomStateRepo) UpdateRecordingState(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 *domain.CompositeRecordingState) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockLessonRoomStateRepo) UpsertCurrentMaterialState(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 *domain.CurrentMaterial) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockLessonRoomStateRepo) UpsertCurrentPollingState(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 *domain.CurrentPolling) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockLessonRoomStateRepo) UpsertLiveLessonSessionTime(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 time.Time) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockLessonRoomStateRepo) UpsertRecordingState(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 *domain.CompositeRecordingState) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockLessonRoomStateRepo) UpsertSpotlightState(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockLessonRoomStateRepo) UpsertWhiteboardZoomState(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 *domain.WhiteboardZoomState) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}
