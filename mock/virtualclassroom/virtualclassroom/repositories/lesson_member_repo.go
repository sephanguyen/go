// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/virtualclassroom/modules/virtualclassroom/domain"
	"github.com/manabie-com/backend/internal/virtualclassroom/modules/virtualclassroom/infrastructure/repo"
	"github.com/manabie-com/backend/internal/virtualclassroom/modules/virtuallesson/application/queries/payloads"
)

type MockLessonMemberRepo struct {
	mock.Mock
}

func (r *MockLessonMemberRepo) GetCourseAccessible(arg1 context.Context, arg2 database.QueryExecer, arg3 string) ([]string, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]string), args.Error(1)
}

func (r *MockLessonMemberRepo) GetLearnerIDsByLessonID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) ([]string, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]string), args.Error(1)
}

func (r *MockLessonMemberRepo) GetLearnersByLessonIDWithPaging(arg1 context.Context, arg2 database.QueryExecer, arg3 *payloads.GetLearnersByLessonIDArgs) ([]domain.LessonMember, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]domain.LessonMember), args.Error(1)
}

func (r *MockLessonMemberRepo) GetLessonLearnersByLessonIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) (map[string]domain.LessonLearners, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(map[string]domain.LessonLearners), args.Error(1)
}

func (r *MockLessonMemberRepo) GetLessonMemberStatesByLessonID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) (domain.LessonMemberStates, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(domain.LessonMemberStates), args.Error(1)
}

func (r *MockLessonMemberRepo) GetLessonMemberStatesWithParams(arg1 context.Context, arg2 database.QueryExecer, arg3 *repo.MemberStatesFilter) (repo.LessonMemberStateDTOs, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(repo.LessonMemberStateDTOs), args.Error(1)
}

func (r *MockLessonMemberRepo) GetLessonMemberUsersByLessonID(arg1 context.Context, arg2 database.QueryExecer, arg3 *payloads.GetLessonMemberUsersByLessonIDArgs) ([]*domain.User, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*domain.User), args.Error(1)
}

func (r *MockLessonMemberRepo) GetLessonMembersInLesson(arg1 context.Context, arg2 database.QueryExecer, arg3 string) (repo.LessonMemberDTOs, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(repo.LessonMemberDTOs), args.Error(1)
}

func (r *MockLessonMemberRepo) InsertLessonMemberState(arg1 context.Context, arg2 database.QueryExecer, arg3 *repo.LessonMemberStateDTO) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLessonMemberRepo) InsertMissingLessonMemberStateByState(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 domain.LearnerStateType, arg5 *repo.StateValueDTO) error {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Error(0)
}

func (r *MockLessonMemberRepo) UpsertAllLessonMemberStateByStateType(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 domain.LearnerStateType, arg5 *repo.StateValueDTO) error {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Error(0)
}

func (r *MockLessonMemberRepo) UpsertLessonMemberState(arg1 context.Context, arg2 database.QueryExecer, arg3 *repo.LessonMemberStateDTO) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLessonMemberRepo) UpsertMultiLessonMemberStateByState(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 domain.LearnerStateType, arg5 []string, arg6 *repo.StateValueDTO) error {
	args := r.Called(arg1, arg2, arg3, arg4, arg5, arg6)
	return args.Error(0)
}
