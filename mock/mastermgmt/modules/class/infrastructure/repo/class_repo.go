// Code generated by mockgen. DO NOT EDIT.
package mock_repo

import (
	"context"

	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/mastermgmt/modules/class/domain"
)

type MockClassRepo struct {
	mock.Mock
}

func (r *MockClassRepo) Delete(arg1 context.Context, arg2 database.QueryExecer, arg3 string) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockClassRepo) FindByCourseIDsAndStudentIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []*domain.ClassWithCourseStudent) ([]*domain.ClassWithCourseStudent, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*domain.ClassWithCourseStudent), args.Error(1)
}

func (r *MockClassRepo) GetAll(arg1 context.Context, arg2 database.QueryExecer) ([]*domain.ExportingClass, error) {
	args := r.Called(arg1, arg2)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*domain.ExportingClass), args.Error(1)
}

func (r *MockClassRepo) GetByID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) (*domain.Class, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*domain.Class), args.Error(1)
}

func (r *MockClassRepo) Insert(arg1 context.Context, arg2 database.QueryExecer, arg3 []*domain.Class) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockClassRepo) RetrieveByIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) ([]*domain.Class, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*domain.Class), args.Error(1)
}

func (r *MockClassRepo) UpdateClassNameByID(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockClassRepo) UpsertClasses(arg1 context.Context, arg2 database.Ext, arg3 []*domain.Class) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
