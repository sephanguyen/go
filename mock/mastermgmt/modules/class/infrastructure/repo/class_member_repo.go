// Code generated by mockgen. DO NOT EDIT.
package mock_repo

import (
	"context"

	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/mastermgmt/modules/class/application/queries"
	"github.com/manabie-com/backend/internal/mastermgmt/modules/class/domain"
)

type MockClassMemberRepo struct {
	mock.Mock
}

func (r *MockClassMemberRepo) DeleteByUserIDAndClassID(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockClassMemberRepo) FindStudentIDWithCourseIDsByClassIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) ([]string, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]string), args.Error(1)
}

func (r *MockClassMemberRepo) GetByClassIDAndUserID(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string) (*domain.ClassMember, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*domain.ClassMember), args.Error(1)
}

func (r *MockClassMemberRepo) GetByClassIDAndUserIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 []string) (map[string]*domain.ClassMember, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(map[string]*domain.ClassMember), args.Error(1)
}

func (r *MockClassMemberRepo) GetByUserAndCourse(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string) (map[string]*domain.ClassMember, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(map[string]*domain.ClassMember), args.Error(1)
}

func (r *MockClassMemberRepo) RetrieveByClassIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 *queries.FindClassMemberFilter) ([]*domain.ClassMember, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*domain.ClassMember), args.Error(1)
}

func (r *MockClassMemberRepo) RetrieveByClassMembers(arg1 context.Context, arg2 database.QueryExecer, arg3 *queries.RetrieveByClassMembersFilter) ([]string, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]string), args.Error(1)
}

func (r *MockClassMemberRepo) UpsertClassMember(arg1 context.Context, arg2 database.QueryExecer, arg3 *domain.ClassMember) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockClassMemberRepo) UpsertClassMembers(arg1 context.Context, arg2 database.QueryExecer, arg3 []*domain.ClassMember) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
