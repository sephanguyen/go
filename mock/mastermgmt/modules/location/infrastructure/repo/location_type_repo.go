// Code generated by mockgen. DO NOT EDIT.
package mock_repo

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/mastermgmt/modules/location/domain"
	"github.com/manabie-com/backend/internal/mastermgmt/modules/location/infrastructure/repo"
)

type MockLocationTypeRepo struct {
	mock.Mock
}

func (r *MockLocationTypeRepo) DeleteByPartnerNames(arg1 context.Context, arg2 database.Ext, arg3 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLocationTypeRepo) GetAllLocationTypes(arg1 context.Context, arg2 database.Ext) ([]*repo.LocationType, error) {
	args := r.Called(arg1, arg2)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*repo.LocationType), args.Error(1)
}

func (r *MockLocationTypeRepo) GetAllLocationTypesV2(arg1 context.Context, arg2 database.Ext) ([]*repo.LocationType, error) {
	args := r.Called(arg1, arg2)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*repo.LocationType), args.Error(1)
}

func (r *MockLocationTypeRepo) GetLocationTypeByID(arg1 context.Context, arg2 database.Ext, arg3 string) (*domain.LocationType, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*domain.LocationType), args.Error(1)
}

func (r *MockLocationTypeRepo) GetLocationTypeByIDs(arg1 context.Context, arg2 database.Ext, arg3 pgtype.TextArray, arg4 bool) ([]*domain.LocationType, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*domain.LocationType), args.Error(1)
}

func (r *MockLocationTypeRepo) GetLocationTypeByName(arg1 context.Context, arg2 database.Ext, arg3 string, arg4 bool) (*domain.LocationType, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*domain.LocationType), args.Error(1)
}

func (r *MockLocationTypeRepo) GetLocationTypeByNameAndParent(arg1 context.Context, arg2 database.Ext, arg3 string, arg4 string) (*domain.LocationType, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*domain.LocationType), args.Error(1)
}

func (r *MockLocationTypeRepo) GetLocationTypeByNames(arg1 context.Context, arg2 database.Ext, arg3 pgtype.TextArray) ([]*domain.LocationType, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*domain.LocationType), args.Error(1)
}

func (r *MockLocationTypeRepo) GetLocationTypeByParentName(arg1 context.Context, arg2 database.Ext, arg3 string) (*domain.LocationType, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*domain.LocationType), args.Error(1)
}

func (r *MockLocationTypeRepo) GetLocationTypesByLevel(arg1 context.Context, arg2 database.Ext, arg3 string) ([]*domain.LocationType, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*domain.LocationType), args.Error(1)
}

func (r *MockLocationTypeRepo) Import(arg1 context.Context, arg2 database.Ext, arg3 []*domain.LocationType) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLocationTypeRepo) RetrieveLocationTypes(arg1 context.Context, arg2 database.Ext) ([]*domain.LocationType, error) {
	args := r.Called(arg1, arg2)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*domain.LocationType), args.Error(1)
}

func (r *MockLocationTypeRepo) RetrieveLocationTypesV2(arg1 context.Context, arg2 database.Ext) ([]*domain.LocationType, error) {
	args := r.Called(arg1, arg2)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*domain.LocationType), args.Error(1)
}

func (r *MockLocationTypeRepo) UpdateLevels(arg1 context.Context, arg2 database.Ext) error {
	args := r.Called(arg1, arg2)
	return args.Error(0)
}

func (r *MockLocationTypeRepo) UpsertLocationTypes(arg1 context.Context, arg2 database.Ext, arg3 map[int]*domain.LocationType) []*domain.UpsertErrors {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil
	}
	return args.Get(0).([]*domain.UpsertErrors)
}
