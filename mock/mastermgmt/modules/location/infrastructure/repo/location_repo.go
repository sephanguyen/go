// Code generated by mockgen. DO NOT EDIT.
package mock_repo

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/mastermgmt/modules/location/domain"
	"github.com/manabie-com/backend/internal/mastermgmt/modules/location/infrastructure/repo"
)

type MockLocationRepo struct {
	mock.Mock
}

func (r *MockLocationRepo) DeleteByPartnerInternalIDs(arg1 context.Context, arg2 database.Ext, arg3 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLocationRepo) GetAllLocations(arg1 context.Context, arg2 database.Ext) ([]*repo.Location, error) {
	args := r.Called(arg1, arg2)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*repo.Location), args.Error(1)
}

func (r *MockLocationRepo) GetAllRawLocations(arg1 context.Context, arg2 database.Ext) ([]*domain.Location, error) {
	args := r.Called(arg1, arg2)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*domain.Location), args.Error(1)
}

func (r *MockLocationRepo) GetChildLocations(arg1 context.Context, arg2 database.Ext, arg3 string) ([]*domain.Location, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*domain.Location), args.Error(1)
}

func (r *MockLocationRepo) GetLocationByID(arg1 context.Context, arg2 database.Ext, arg3 string) (*domain.Location, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*domain.Location), args.Error(1)
}

func (r *MockLocationRepo) GetLocationByLocationTypeID(arg1 context.Context, arg2 database.Ext, arg3 string) ([]*domain.Location, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*domain.Location), args.Error(1)
}

func (r *MockLocationRepo) GetLocationByLocationTypeIDs(arg1 context.Context, arg2 database.Ext, arg3 []string) ([]*domain.Location, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*domain.Location), args.Error(1)
}

func (r *MockLocationRepo) GetLocationByLocationTypeName(arg1 context.Context, arg2 database.Ext, arg3 string) ([]*domain.Location, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*domain.Location), args.Error(1)
}

func (r *MockLocationRepo) GetLocationByPartnerInternalID(arg1 context.Context, arg2 database.Ext, arg3 string) (*domain.Location, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*domain.Location), args.Error(1)
}

func (r *MockLocationRepo) GetLocationOrg(arg1 context.Context, arg2 database.Ext, arg3 string) (*domain.Location, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*domain.Location), args.Error(1)
}

func (r *MockLocationRepo) GetLocationsByLocationIDs(arg1 context.Context, arg2 database.Ext, arg3 pgtype.TextArray, arg4 bool) ([]*domain.Location, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*domain.Location), args.Error(1)
}

func (r *MockLocationRepo) GetLocationsByPartnerInternalIDs(arg1 context.Context, arg2 database.Ext, arg3 pgtype.TextArray) ([]*domain.Location, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*domain.Location), args.Error(1)
}

func (r *MockLocationRepo) GetLowestLevelLocationsV2(arg1 context.Context, arg2 database.Ext, arg3 *repo.GetLowestLevelLocationsParams) ([]*domain.Location, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*domain.Location), args.Error(1)
}

func (r *MockLocationRepo) GetRootLocation(arg1 context.Context, arg2 database.Ext) (string, error) {
	args := r.Called(arg1, arg2)
	return args.Get(0).(string), args.Error(1)
}

func (r *MockLocationRepo) RetrieveLocations(arg1 context.Context, arg2 database.Ext, arg3 domain.FilterLocation) ([]*domain.Location, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*domain.Location), args.Error(1)
}

func (r *MockLocationRepo) RetrieveLowestLevelLocations(arg1 context.Context, arg2 database.Ext, arg3 *repo.GetLowestLevelLocationsParams) ([]*domain.Location, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*domain.Location), args.Error(1)
}

func (r *MockLocationRepo) UpdateAccessPath(arg1 context.Context, arg2 database.Ext, arg3 []string) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLocationRepo) UpsertLocations(arg1 context.Context, arg2 database.Ext, arg3 []*domain.Location) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
