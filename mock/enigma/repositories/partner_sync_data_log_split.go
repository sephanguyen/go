// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/enigma/entities"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockPartnerSyncDataLogSplitRepo struct {
	mock.Mock
}

func (r *MockPartnerSyncDataLogSplitRepo) Create(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.PartnerSyncDataLogSplit) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockPartnerSyncDataLogSplitRepo) GetLogsByDateRange(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Date, arg4 pgtype.Date) ([]*entities.PartnerSyncDataLogSplit, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.PartnerSyncDataLogSplit), args.Error(1)
}

func (r *MockPartnerSyncDataLogSplitRepo) GetLogsBySignature(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) ([]*entities.PartnerSyncDataLogSplit, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.PartnerSyncDataLogSplit), args.Error(1)
}

func (r *MockPartnerSyncDataLogSplitRepo) GetLogsReportByDate(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Date, arg4 pgtype.Date) ([]*entities.PartnerSyncDataLogReport, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.PartnerSyncDataLogReport), args.Error(1)
}

func (r *MockPartnerSyncDataLogSplitRepo) UpdateLogStatus(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.PartnerSyncDataLogSplit) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockPartnerSyncDataLogSplitRepo) UpdateLogsStatusAndRetryTime(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.PartnerSyncDataLogSplit) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
