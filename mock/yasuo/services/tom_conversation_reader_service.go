// Code generated by mockery v2.5.1. DO NOT EDIT.

package mock_services

import (
	"context"

	tpb "github.com/manabie-com/backend/pkg/manabuf/tom/v1"

	"github.com/stretchr/testify/mock"
	"google.golang.org/grpc"
)

// TomConversationReaderService is an autogenerated mock type for the TomConversationReaderService type
type TomConversationReaderService struct {
	mock.Mock
}

// ListConversationByUsers provides a mock function with given fields: ctx, in, opts
func (_m *TomConversationReaderService) ListConversationByUsers(ctx context.Context, in *tpb.ListConversationByUsersRequest, opts ...grpc.CallOption) (*tpb.ListConversationByUsersResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *tpb.ListConversationByUsersResponse
	if rf, ok := ret.Get(0).(func(context.Context, *tpb.ListConversationByUsersRequest, ...grpc.CallOption) *tpb.ListConversationByUsersResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tpb.ListConversationByUsersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *tpb.ListConversationByUsersRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
