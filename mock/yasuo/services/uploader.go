// Code generated by mockery. DO NOT EDIT.

// This file can be generated by running: make gen-mock-repo

package mock_services

import (
	context "context"

	s3manager "github.com/aws/aws-sdk-go/service/s3/s3manager"
	mock "github.com/stretchr/testify/mock"
)

// Uploader is an autogenerated mock type for the Uploader type
type Uploader struct {
	mock.Mock
}

// UploadWithContext provides a mock function with given fields: ctx, input, opts
func (_m *Uploader) UploadWithContext(ctx context.Context, input *s3manager.UploadInput, opts ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, input)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *s3manager.UploadOutput
	if rf, ok := ret.Get(0).(func(context.Context, *s3manager.UploadInput, ...func(*s3manager.Uploader)) *s3manager.UploadOutput); ok {
		r0 = rf(ctx, input, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3manager.UploadOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *s3manager.UploadInput, ...func(*s3manager.Uploader)) error); ok {
		r1 = rf(ctx, input, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadWithIterator provides a mock function with given fields: ctx, iter, opts
func (_m *Uploader) UploadWithIterator(ctx context.Context, iter s3manager.BatchUploadIterator, opts ...func(*s3manager.Uploader)) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, iter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, s3manager.BatchUploadIterator, ...func(*s3manager.Uploader)) error); ok {
		r0 = rf(ctx, iter, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUploader interface {
	mock.TestingT
	Cleanup(func())
}

// NewUploader creates a new instance of Uploader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUploader(t mockConstructorTestingTNewUploader) *Uploader {
	mock := &Uploader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
