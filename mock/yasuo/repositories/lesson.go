// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"
	"time"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/bob/entities"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockLessonRepo struct {
	mock.Mock
}

func (r *MockLessonRepo) BulkUpsert(arg1 context.Context, arg2 database.Ext, arg3 []*entities.Lesson) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLessonRepo) CheckExisted(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]string, []string, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Get(1).([]string), args.Error(2)
	}

	if args.Get(1) == nil {
		return nil, nil, args.Error(2)
	}
	return args.Get(0).([]string), args.Get(1).([]string), args.Error(2)
}

func (r *MockLessonRepo) Create(arg1 context.Context, arg2 database.Ext, arg3 []*entities.Lesson) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLessonRepo) FindByCourseIDs(arg1 context.Context, arg2 database.Ext, arg3 pgtype.TextArray, arg4 bool) ([]*entities.Lesson, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.Lesson), args.Error(1)
}

func (r *MockLessonRepo) FindByID(arg1 context.Context, arg2 database.Ext, arg3 pgtype.Text) (*entities.Lesson, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.Lesson), args.Error(1)
}

func (r *MockLessonRepo) FindByIDs(arg1 context.Context, arg2 database.Ext, arg3 pgtype.TextArray, arg4 bool) (map[pgtype.Text]*entities.Lesson, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(map[pgtype.Text]*entities.Lesson), args.Error(1)
}

func (r *MockLessonRepo) FindEarlierAndLatestTimeLesson(arg1 context.Context, arg2 database.Ext, arg3 pgtype.Text) (*time.Time, *time.Time, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Get(1).(*time.Time), args.Error(2)
	}

	if args.Get(1) == nil {
		return nil, nil, args.Error(2)
	}
	return args.Get(0).(*time.Time), args.Get(1).(*time.Time), args.Error(2)
}

func (r *MockLessonRepo) GetLiveLessons(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]string, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]string), args.Error(1)
}

func (r *MockLessonRepo) SoftDelete(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLessonRepo) SoftDeleteByCourseIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLessonRepo) Update(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.Lesson) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLessonRepo) UpdateRoomID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}
