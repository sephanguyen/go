// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/go-pg/pg/orm"
	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/bob/entities"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockTopicRepo struct {
	mock.Mock
}

func (r *MockTopicRepo) Create(arg1 context.Context, arg2 database.Ext, arg3 []*entities.Topic) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockTopicRepo) FindByID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (*entities.Topic, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.Topic), args.Error(1)
}

func (r *MockTopicRepo) FindByIDs(arg1 context.Context, arg2 orm.DB, arg3 []string) (map[string]*entities.Topic, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(map[string]*entities.Topic), args.Error(1)
}

func (r *MockTopicRepo) FindByIDsV2(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 bool) (map[pgtype.Text]*entities.Topic, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(map[pgtype.Text]*entities.Topic), args.Error(1)
}

func (r *MockTopicRepo) FindSchoolIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) ([]int32, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]int32), args.Error(1)
}

func (r *MockTopicRepo) SoftDelete(arg1 context.Context, arg2 orm.DB, arg3 []string) (int, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(int), args.Error(1)
}

func (r *MockTopicRepo) SoftDeleteByPresetStudyPlanWeeklyIDs(arg1 context.Context, arg2 database.Ext, arg3 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockTopicRepo) SoftDeleteV2(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockTopicRepo) SoftDeleteV3(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) (int, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(int), args.Error(1)
}

func (r *MockTopicRepo) Update(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.Topic) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockTopicRepo) UpdateNameByLessonID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}
