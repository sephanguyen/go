// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/tom/domain/core"
)

type MockConversationRepo struct {
	mock.Mock
}

func (r *MockConversationRepo) BulkUpdateResourcePath(arg1 context.Context, arg2 database.QueryExecer, arg3 []string, arg4 string) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockConversationRepo) BulkUpsert(arg1 context.Context, arg2 database.QueryExecer, arg3 []*core.Conversation) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockConversationRepo) CountUnreadConversations(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.TextArray, arg5 pgtype.TextArray, arg6 bool) (int64, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5, arg6)
	return args.Get(0).(int64), args.Error(1)
}

func (r *MockConversationRepo) CountUnreadConversationsByAccessPaths(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.TextArray, arg5 pgtype.TextArray) (int64, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Get(0).(int64), args.Error(1)
}

func (r *MockConversationRepo) CountUnreadConversationsByAccessPathsV2(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.TextArray, arg5 pgtype.TextArray) (int64, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Get(0).(int64), args.Error(1)
}

func (r *MockConversationRepo) Create(arg1 context.Context, arg2 database.QueryExecer, arg3 *core.Conversation) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockConversationRepo) FindByID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (*core.Conversation, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*core.Conversation), args.Error(1)
}

func (r *MockConversationRepo) FindByIDsReturnMapByID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) (map[pgtype.Text]core.ConversationFull, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(map[pgtype.Text]core.ConversationFull), args.Error(1)
}

func (r *MockConversationRepo) FindByLessonID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (*core.Conversation, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*core.Conversation), args.Error(1)
}

func (r *MockConversationRepo) FindBySchoolIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 pgtype.Int4, arg5 pgtype.Text) ([]pgtype.Text, []pgtype.Timestamptz, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)

	if args.Get(0) == nil {
		return nil, args.Get(1).([]pgtype.Timestamptz), args.Error(2)
	}

	if args.Get(1) == nil {
		return nil, nil, args.Error(2)
	}
	return args.Get(0).([]pgtype.Text), args.Get(1).([]pgtype.Timestamptz), args.Error(2)
}

func (r *MockConversationRepo) FindByStudentQuestionID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (*core.Conversation, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*core.Conversation), args.Error(1)
}

func (r *MockConversationRepo) FindConversationIdsBySchoolIds(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*core.Conversation, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*core.Conversation), args.Error(1)
}

func (r *MockConversationRepo) ListAll(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 uint32, arg5 pgtype.TextArray, arg6 pgtype.Text) ([]*core.Conversation, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5, arg6)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*core.Conversation), args.Error(1)
}

func (r *MockConversationRepo) ListConversationUnjoined(arg1 context.Context, arg2 database.QueryExecer, arg3 *core.ListConversationUnjoinedFilter) ([]*core.Conversation, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*core.Conversation), args.Error(1)
}

func (r *MockConversationRepo) ListConversationUnjoinedInLocations(arg1 context.Context, arg2 database.QueryExecer, arg3 *core.ListConversationUnjoinedFilter) ([]*core.Conversation, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*core.Conversation), args.Error(1)
}

func (r *MockConversationRepo) SetName(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockConversationRepo) SetStatus(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockConversationRepo) Update(arg1 context.Context, arg2 database.QueryExecer, arg3 *core.Conversation) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
