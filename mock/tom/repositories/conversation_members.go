// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/tom/domain/core"
)

type MockConversationMemberRepo struct {
	mock.Mock
}

func (r *MockConversationMemberRepo) BulkUpsert(arg1 context.Context, arg2 database.QueryExecer, arg3 []*core.ConversationMembers) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockConversationMemberRepo) Create(arg1 context.Context, arg2 database.QueryExecer, arg3 *core.ConversationMembers) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockConversationMemberRepo) Find(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text, arg5 pgtype.Text) (*core.ConversationMembers, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*core.ConversationMembers), args.Error(1)
}

func (r *MockConversationMemberRepo) FindByCIDAndUserID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text) (*core.ConversationMembers, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*core.ConversationMembers), args.Error(1)
}

func (r *MockConversationMemberRepo) FindByCIDsAndUserID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 pgtype.Text) ([]*core.ConversationMembers, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*core.ConversationMembers), args.Error(1)
}

func (r *MockConversationMemberRepo) FindByConversationID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (map[pgtype.Text]core.ConversationMembers, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(map[pgtype.Text]core.ConversationMembers), args.Error(1)
}

func (r *MockConversationMemberRepo) FindByConversationIDAndStatus(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text) (map[pgtype.Text]core.ConversationMembers, error) {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Get(0).(map[pgtype.Text]core.ConversationMembers), args.Error(1)
}

func (r *MockConversationMemberRepo) FindByConversationIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) (map[pgtype.Text][]*core.ConversationMembers, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(map[pgtype.Text][]*core.ConversationMembers), args.Error(1)
}

func (r *MockConversationMemberRepo) FindByConversationIDsAndRoles(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 pgtype.TextArray) (map[string][]string, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(map[string][]string), args.Error(1)
}

func (r *MockConversationMemberRepo) FindByID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (*core.ConversationMembers, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*core.ConversationMembers), args.Error(1)
}

func (r *MockConversationMemberRepo) FindUnseenSince(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Timestamptz) ([]*core.ConversationMembers, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*core.ConversationMembers), args.Error(1)
}

func (r *MockConversationMemberRepo) FindUserIDConversationIDsMapByUserIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) (map[string][]string, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(map[string][]string), args.Error(1)
}

func (r *MockConversationMemberRepo) GetSeenAt(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (*pgtype.Timestamptz, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*pgtype.Timestamptz), args.Error(1)
}

func (r *MockConversationMemberRepo) SetNotifyAt(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text, arg5 pgtype.Timestamptz) error {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Error(0)
}

func (r *MockConversationMemberRepo) SetSeenAt(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text, arg5 pgtype.Timestamptz) error {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Error(0)
}

func (r *MockConversationMemberRepo) SetStatus(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.TextArray, arg5 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Error(0)
}

func (r *MockConversationMemberRepo) SetStatusByConversationAndUserIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 pgtype.TextArray, arg5 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Error(0)
}

func (r *MockConversationMemberRepo) SetStatusByConversationID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockConversationMemberRepo) Update(arg1 context.Context, arg2 database.QueryExecer, arg3 *core.ConversationMembers) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockConversationMemberRepo) UserGroup(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (string, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(string), args.Error(1)
}
