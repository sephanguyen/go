// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"
	"time"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/tom/domain/core"
	pb "github.com/manabie-com/backend/pkg/genproto/tom"
)

type MockOnlineUserRepo struct {
	mock.Mock
}

func (r *MockOnlineUserRepo) Add(arg1 pgtype.Text, arg2 pgtype.TextArray) bool {
	args := r.Called(arg1, arg2)
	return args.Get(0).(bool)
}

func (r *MockOnlineUserRepo) Contains(arg1 interface{}) bool {
	args := r.Called(arg1)
	return args.Get(0).(bool)
}

func (r *MockOnlineUserRepo) Delete(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockOnlineUserRepo) DeleteByNode(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockOnlineUserRepo) Find(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 pgtype.Timestamptz, arg5 *pb.Event) (map[pgtype.Text][]string, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(map[pgtype.Text][]string), args.Error(1)
}

func (r *MockOnlineUserRepo) Get(arg1 interface{}) (interface{}, bool) {
	args := r.Called(arg1)
	return args.Get(0).(interface{}), args.Get(1).(bool)
}

func (r *MockOnlineUserRepo) GetOldest() (interface{}, interface{}, bool) {
	args := r.Called()
	return args.Get(0).(interface{}), args.Get(1).(interface{}), args.Get(2).(bool)
}

func (r *MockOnlineUserRepo) Insert(arg1 context.Context, arg2 database.QueryExecer, arg3 *core.OnlineUser) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockOnlineUserRepo) InvalidateCache(arg1 time.Duration) {
	_ = r.Called(arg1)
	return
}

func (r *MockOnlineUserRepo) Keys() []interface{} {
	args := r.Called()

	if args.Get(0) == nil {
		return nil
	}
	return args.Get(0).([]interface{})
}

func (r *MockOnlineUserRepo) Len() int {
	args := r.Called()
	return args.Get(0).(int)
}

func (r *MockOnlineUserRepo) Peek(arg1 interface{}) (interface{}, bool) {
	args := r.Called(arg1)
	return args.Get(0).(interface{}), args.Get(1).(bool)
}

func (r *MockOnlineUserRepo) Purge() {
	_ = r.Called()
	return
}

func (r *MockOnlineUserRepo) Remove(arg1 interface{}) bool {
	args := r.Called(arg1)
	return args.Get(0).(bool)
}

func (r *MockOnlineUserRepo) RemoveOldest() (interface{}, interface{}, bool) {
	args := r.Called()
	return args.Get(0).(interface{}), args.Get(1).(interface{}), args.Get(2).(bool)
}

func (r *MockOnlineUserRepo) Resize(arg1 int) int {
	args := r.Called(arg1)
	return args.Get(0).(int)
}

func (r *MockOnlineUserRepo) SetActive(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
