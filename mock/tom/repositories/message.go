// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/tom/domain/core"
)

type MockMessageRepo struct {
	mock.Mock
}

func (r *MockMessageRepo) BulkUpsert(arg1 context.Context, arg2 database.QueryExecer, arg3 []*core.Message) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockMessageRepo) CountMessagesSince(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 *pgtype.Timestamptz) (int, error) {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Get(0).(int), args.Error(1)
}

func (r *MockMessageRepo) Create(arg1 context.Context, arg2 database.QueryExecer, arg3 *core.Message) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockMessageRepo) FindAllMessageByConversation(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 uint, arg5 pgtype.Timestamptz) ([]*core.Message, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*core.Message), args.Error(1)
}

func (r *MockMessageRepo) FindByID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (*core.Message, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*core.Message), args.Error(1)
}

func (r *MockMessageRepo) FindLessonMessages(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 *core.FindMessagesArgs) ([]*core.Message, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*core.Message), args.Error(1)
}

func (r *MockMessageRepo) FindMessages(arg1 context.Context, arg2 database.QueryExecer, arg3 *core.FindMessagesArgs) ([]*core.Message, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*core.Message), args.Error(1)
}

func (r *MockMessageRepo) FindPrivateLessonMessages(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 *core.FindMessagesArgs) ([]*core.Message, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*core.Message), args.Error(1)
}

func (r *MockMessageRepo) GetLastMessageByConversationIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 uint, arg5 pgtype.Timestamptz, arg6 bool) ([]*core.Message, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5, arg6)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*core.Message), args.Error(1)
}

func (r *MockMessageRepo) GetLastMessageEachUserConversation(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text, arg5 uint, arg6 pgtype.Timestamptz, arg7 pgtype.TextArray, arg8 bool) ([]*core.Message, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*core.Message), args.Error(1)
}

func (r *MockMessageRepo) GetLatestMessageByConversation(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (*core.Message, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*core.Message), args.Error(1)
}

func (r *MockMessageRepo) SoftDelete(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}
