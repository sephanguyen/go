// Code generated by mockery. DO NOT EDIT.

// This file can be generated by running: make gen-mock-repo

package mock_core

import (
	context "context"

	core "github.com/manabie-com/backend/internal/tom/domain/core"
	mock "github.com/stretchr/testify/mock"

	pb "github.com/manabie-com/backend/pkg/genproto/tom"
)

// ChatInfra is an autogenerated mock type for the ChatInfra type
type ChatInfra struct {
	mock.Mock
}

// PushMessage provides a mock function with given fields: ctx, userIDs, msg, pushMsgOpts
func (_m *ChatInfra) PushMessage(ctx context.Context, userIDs []string, msg *pb.Event, pushMsgOpts core.MessageToUserOpts) error {
	ret := _m.Called(ctx, userIDs, msg, pushMsgOpts)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, *pb.Event, core.MessageToUserOpts) error); ok {
		r0 = rf(ctx, userIDs, msg, pushMsgOpts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PushMessageDeleted provides a mock function with given fields: ctx, userIDs, msg, pushMsgOpts
func (_m *ChatInfra) PushMessageDeleted(ctx context.Context, userIDs []string, msg *pb.Event, pushMsgOpts core.MessageToUserOpts) error {
	ret := _m.Called(ctx, userIDs, msg, pushMsgOpts)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, *pb.Event, core.MessageToUserOpts) error); ok {
		r0 = rf(ctx, userIDs, msg, pushMsgOpts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewChatInfra interface {
	mock.TestingT
	Cleanup(func())
}

// NewChatInfra creates a new instance of ChatInfra. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChatInfra(t mockConstructorTestingTNewChatInfra) *ChatInfra {
	mock := &ChatInfra{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
