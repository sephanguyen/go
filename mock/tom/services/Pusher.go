// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	firebase "github.com/manabie-com/backend/internal/golibs/firebase"
	
	"firebase.google.com/go/v4/messaging"
	mock "github.com/stretchr/testify/mock"
	types "github.com/gogo/protobuf/types"
)

// Pusher is an autogenerated mock type for the Pusher type
type Pusher struct {
	mock.Mock
}

// RetrievePushedMessages provides a mock function with given fields: ctx, deviceToken, limit, since
func (_m *Pusher) RetrievePushedMessages(ctx context.Context, deviceToken string, limit int, since *types.Timestamp) ([]*messaging.MulticastMessage, error) {
	ret := _m.Called(ctx, deviceToken, limit, since)

	var r0 []*messaging.MulticastMessage
	if rf, ok := ret.Get(0).(func(context.Context, string, int, *types.Timestamp) []*messaging.MulticastMessage); ok {
		r0 = rf(ctx, deviceToken, limit, since)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*messaging.MulticastMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int, *types.Timestamp) error); ok {
		r1 = rf(ctx, deviceToken, limit, since)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendTokens provides a mock function with given fields: ctx, msg, tokens
func (_m *Pusher) SendTokens(ctx context.Context, msg *messaging.MulticastMessage, tokens []string) (int, int, *firebase.SendTokensError) {
	ret := _m.Called(ctx, msg, tokens)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, *messaging.MulticastMessage, []string) int); ok {
		r0 = rf(ctx, msg, tokens)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, *messaging.MulticastMessage, []string) int); ok {
		r1 = rf(ctx, msg, tokens)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 *firebase.SendTokensError
	if rf, ok := ret.Get(2).(func(context.Context, *messaging.MulticastMessage, []string) *firebase.SendTokensError); ok {
		r2 = rf(ctx, msg, tokens)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*firebase.SendTokensError)
		}
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewPusher interface {
	mock.TestingT
	Cleanup(func())
}

// NewPusher creates a new instance of Pusher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPusher(t mockConstructorTestingTNewPusher) *Pusher {
	mock := &Pusher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
