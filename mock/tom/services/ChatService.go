// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/manabie-com/backend/internal/tom/domain/core"
	mock "github.com/stretchr/testify/mock"

	pb "github.com/manabie-com/backend/pkg/genproto/tom"
)

// ChatService is an autogenerated mock type for the ChatService type
type ChatService struct {
	mock.Mock
}

// SendMessageToConversation provides a mock function with given fields: ctx, req, opts
func (_m *ChatService) SendMessageToConversation(ctx context.Context, req *pb.SendMessageRequest, opts core.MessageToConversationOpts) (*pb.MessageResponse, error) {
	ret := _m.Called(ctx, req, opts)

	var r0 *pb.MessageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.SendMessageRequest, core.MessageToConversationOpts) *pb.MessageResponse); ok {
		r0 = rf(ctx, req, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.MessageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.SendMessageRequest, core.MessageToConversationOpts) error); ok {
		r1 = rf(ctx, req, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMessageToConversations provides a mock function with given fields: ctx, reqs, opts
func (_m *ChatService) SendMessageToConversations(ctx context.Context, reqs []*pb.SendMessageRequest, opts core.MessageToConversationOpts) error {
	ret := _m.Called(ctx, reqs, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*pb.SendMessageRequest, core.MessageToConversationOpts) error); ok {
		r0 = rf(ctx, reqs, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendMessageToUsers provides a mock function with given fields: ctx, userIDs, msg, opts
func (_m *ChatService) SendMessageToUsers(ctx context.Context, userIDs []string, msg *pb.Event, opts core.MessageToUserOpts) error {
	ret := _m.Called(ctx, userIDs, msg, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, *pb.Event, core.MessageToUserOpts) error); ok {
		r0 = rf(ctx, userIDs, msg, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
