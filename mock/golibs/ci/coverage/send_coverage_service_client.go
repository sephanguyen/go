// Code generated by mockery. DO NOT EDIT.

// This file can be generated by running: make gen-mock-repo

package mock_coverage

import (
	context "context"

	dpb "github.com/manabie-com/backend/pkg/manabuf/draft/v1"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// SendCoverageServiceClient is an autogenerated mock type for the SendCoverageServiceClient type
type SendCoverageServiceClient struct {
	mock.Mock
}

// CreateTargetCoverage provides a mock function with given fields: ctx, in, opts
func (_m *SendCoverageServiceClient) CreateTargetCoverage(ctx context.Context, in *dpb.CreateTargetCoverageRequest, opts ...grpc.CallOption) (*dpb.CreateTargetCoverageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dpb.CreateTargetCoverageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *dpb.CreateTargetCoverageRequest, ...grpc.CallOption) *dpb.CreateTargetCoverageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dpb.CreateTargetCoverageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dpb.CreateTargetCoverageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendCoverage provides a mock function with given fields: ctx, in, opts
func (_m *SendCoverageServiceClient) SendCoverage(ctx context.Context, in *dpb.SendCoverageRequest, opts ...grpc.CallOption) (*dpb.SendCoverageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dpb.SendCoverageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *dpb.SendCoverageRequest, ...grpc.CallOption) *dpb.SendCoverageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dpb.SendCoverageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dpb.SendCoverageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTargetCoverage provides a mock function with given fields: ctx, in, opts
func (_m *SendCoverageServiceClient) UpdateTargetCoverage(ctx context.Context, in *dpb.UpdateTargetCoverageRequest, opts ...grpc.CallOption) (*dpb.UpdateTargetCoverageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *dpb.UpdateTargetCoverageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *dpb.UpdateTargetCoverageRequest, ...grpc.CallOption) *dpb.UpdateTargetCoverageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dpb.UpdateTargetCoverageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dpb.UpdateTargetCoverageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSendCoverageServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewSendCoverageServiceClient creates a new instance of SendCoverageServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSendCoverageServiceClient(t mockConstructorTestingTNewSendCoverageServiceClient) *SendCoverageServiceClient {
	mock := &SendCoverageServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
