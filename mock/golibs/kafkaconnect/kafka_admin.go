// Code generated by mockery. DO NOT EDIT.

// This file can be generated by running: make gen-mock-repo

package mock_kafkaconnect

import (
	sarama "github.com/Shopify/sarama"
	mock "github.com/stretchr/testify/mock"
)

// KafkaAdmin is an autogenerated mock type for the KafkaAdmin type
type KafkaAdmin struct {
	mock.Mock
}

// ListTopics provides a mock function with given fields:
func (_m *KafkaAdmin) ListTopics() (map[string]sarama.TopicDetail, error) {
	ret := _m.Called()

	var r0 map[string]sarama.TopicDetail
	if rf, ok := ret.Get(0).(func() map[string]sarama.TopicDetail); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]sarama.TopicDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewKafkaAdmin interface {
	mock.TestingT
	Cleanup(func())
}

// NewKafkaAdmin creates a new instance of KafkaAdmin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewKafkaAdmin(t mockConstructorTestingTNewKafkaAdmin) *KafkaAdmin {
	mock := &KafkaAdmin{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
