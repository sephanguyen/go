// Code generated by mockery. DO NOT EDIT.

// This file can be generated by running: make gen-mock-repo

package mock_kafkaconnect

import (
	http "net/http"

	connect "github.com/go-kafka/connect"

	mock "github.com/stretchr/testify/mock"
)

// ConnectClient is an autogenerated mock type for the ConnectClient type
type ConnectClient struct {
	mock.Mock
}

// CreateConnector provides a mock function with given fields: connector
func (_m *ConnectClient) CreateConnector(connector *connect.Connector) (*http.Response, error) {
	ret := _m.Called(connector)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(*connect.Connector) *http.Response); ok {
		r0 = rf(connector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*connect.Connector) error); ok {
		r1 = rf(connector)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConnector provides a mock function with given fields: name
func (_m *ConnectClient) DeleteConnector(name string) (*http.Response, error) {
	ret := _m.Called(name)

	var r0 *http.Response
	if rf, ok := ret.Get(0).(func(string) *http.Response); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnector provides a mock function with given fields: name
func (_m *ConnectClient) GetConnector(name string) (*connect.Connector, *http.Response, error) {
	ret := _m.Called(name)

	var r0 *connect.Connector
	if rf, ok := ret.Get(0).(func(string) *connect.Connector); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Connector)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(string) *http.Response); ok {
		r1 = rf(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetConnectorStatus provides a mock function with given fields: name
func (_m *ConnectClient) GetConnectorStatus(name string) (*connect.ConnectorStatus, *http.Response, error) {
	ret := _m.Called(name)

	var r0 *connect.ConnectorStatus
	if rf, ok := ret.Get(0).(func(string) *connect.ConnectorStatus); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ConnectorStatus)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(string) *http.Response); ok {
		r1 = rf(name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Host provides a mock function with given fields:
func (_m *ConnectClient) Host() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ListConnectors provides a mock function with given fields:
func (_m *ConnectClient) ListConnectors() ([]string, *http.Response, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func() *http.Response); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateConnectorConfig provides a mock function with given fields: name, config
func (_m *ConnectClient) UpdateConnectorConfig(name string, config connect.ConnectorConfig) (*connect.Connector, *http.Response, error) {
	ret := _m.Called(name, config)

	var r0 *connect.Connector
	if rf, ok := ret.Get(0).(func(string, connect.ConnectorConfig) *connect.Connector); ok {
		r0 = rf(name, config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Connector)
		}
	}

	var r1 *http.Response
	if rf, ok := ret.Get(1).(func(string, connect.ConnectorConfig) *http.Response); ok {
		r1 = rf(name, config)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, connect.ConnectorConfig) error); ok {
		r2 = rf(name, config)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewConnectClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewConnectClient creates a new instance of ConnectClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConnectClient(t mockConstructorTestingTNewConnectClient) *ConnectClient {
	mock := &ConnectClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
