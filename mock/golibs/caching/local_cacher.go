// Code generated by mockery. DO NOT EDIT.

// This file can be generated by running: make gen-mock-repo

package mock_caching

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// LocalCacher is an autogenerated mock type for the LocalCacher type
type LocalCacher struct {
	mock.Mock
}

// Del provides a mock function with given fields: ctx, group, key
func (_m *LocalCacher) Del(ctx context.Context, group string, key string) bool {
	ret := _m.Called(ctx, group, key)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, group, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, group, key
func (_m *LocalCacher) Get(ctx context.Context, group string, key string) (interface{}, bool) {
	ret := _m.Called(ctx, group, key)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) interface{}); ok {
		r0 = rf(ctx, group, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(context.Context, string, string) bool); ok {
		r1 = rf(ctx, group, key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Set provides a mock function with given fields: ctx, group, key, value, ttl
func (_m *LocalCacher) Set(ctx context.Context, group string, key string, value interface{}, ttl time.Duration) bool {
	ret := _m.Called(ctx, group, key, value, ttl)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string, interface{}, time.Duration) bool); ok {
		r0 = rf(ctx, group, key, value, ttl)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTNewLocalCacher interface {
	mock.TestingT
	Cleanup(func())
}

// NewLocalCacher creates a new instance of LocalCacher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLocalCacher(t mockConstructorTestingTNewLocalCacher) *LocalCacher {
	mock := &LocalCacher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
