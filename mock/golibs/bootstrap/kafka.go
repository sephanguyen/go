// Code generated by mockery v2.25.1. DO NOT EDIT.

package mock_bootstrap

import (
        configs "github.com/manabie-com/backend/internal/golibs/configs"
        kafka "github.com/manabie-com/backend/internal/golibs/kafka"

        mock "github.com/stretchr/testify/mock"

        zap "go.uber.org/zap"
)

// Kafkaer is an autogenerated mock type for the Kafkaer type
type Kafkaer struct {
        mock.Mock
}

// NewKafkaManagement provides a mock function with given fields: zapLogger, c
func (_m *Kafkaer) NewKafkaManagement(zapLogger *zap.Logger, c *configs.KafkaClusterConfig) (kafka.KafkaManagement, error) {
        ret := _m.Called(zapLogger, c)

        var r0 kafka.KafkaManagement
        var r1 error
        if rf, ok := ret.Get(0).(func(*zap.Logger, *configs.KafkaClusterConfig) (kafka.KafkaManagement, error)); ok {
                return rf(zapLogger, c)
        }
        if rf, ok := ret.Get(0).(func(*zap.Logger, *configs.KafkaClusterConfig) kafka.KafkaManagement); ok {
                r0 = rf(zapLogger, c)
        } else {
                if ret.Get(0) != nil {
                        r0 = ret.Get(0).(kafka.KafkaManagement)
                }
        }

        if rf, ok := ret.Get(1).(func(*zap.Logger, *configs.KafkaClusterConfig) error); ok {
                r1 = rf(zapLogger, c)
        } else {
                r1 = ret.Error(1)
        }

        return r0, r1
}

type mockConstructorTestingTNewKafkaer interface {
        mock.TestingT
        Cleanup(func())
}

// NewKafkaer creates a new instance of Kafkaer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewKafkaer(t mockConstructorTestingTNewKafkaer) *Kafkaer {
        mock := &Kafkaer{}
        mock.Mock.Test(t)

        t.Cleanup(func() { mock.AssertExpectations(t) })

        return mock
}
