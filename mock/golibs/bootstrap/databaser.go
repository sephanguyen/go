// Code generated by mockery. DO NOT EDIT.

// This file can be generated by running: make gen-mock-repo

package mock_bootstrap

import (
	context "context"

	configs "github.com/manabie-com/backend/internal/golibs/configs"

	mock "github.com/stretchr/testify/mock"

	pgxpool "github.com/jackc/pgx/v4/pgxpool"

	zap "go.uber.org/zap"
)

// Databaser is an autogenerated mock type for the Databaser type
type Databaser struct {
	mock.Mock
}

// ConnectV2 provides a mock function with given fields: ctx, l, cfg
func (_m *Databaser) ConnectV2(ctx context.Context, l *zap.Logger, cfg configs.PostgresDatabaseConfig) (*pgxpool.Pool, func() error, error) {
	ret := _m.Called(ctx, l, cfg)

	var r0 *pgxpool.Pool
	if rf, ok := ret.Get(0).(func(context.Context, *zap.Logger, configs.PostgresDatabaseConfig) *pgxpool.Pool); ok {
		r0 = rf(ctx, l, cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pgxpool.Pool)
		}
	}

	var r1 func() error
	if rf, ok := ret.Get(1).(func(context.Context, *zap.Logger, configs.PostgresDatabaseConfig) func() error); ok {
		r1 = rf(ctx, l, cfg)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(func() error)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *zap.Logger, configs.PostgresDatabaseConfig) error); ok {
		r2 = rf(ctx, l, cfg)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewDatabaser interface {
	mock.TestingT
	Cleanup(func())
}

// NewDatabaser creates a new instance of Databaser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDatabaser(t mockConstructorTestingTNewDatabaser) *Databaser {
	mock := &Databaser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
