// Code generated by mockery. DO NOT EDIT.

// This file can be generated by running: make gen-mock-repo

package mock_bootstrap

import (
	elastic "github.com/manabie-com/backend/internal/golibs/elastic"
	mock "github.com/stretchr/testify/mock"

	zap "go.uber.org/zap"
)

// Elasticer is an autogenerated mock type for the Elasticer type
type Elasticer struct {
	mock.Mock
}

// Init provides a mock function with given fields: l, addrs, user, password, cloudID, apiKey
func (_m *Elasticer) Init(l *zap.Logger, addrs []string, user string, password string, cloudID string, apiKey string) (*elastic.SearchFactoryImpl, error) {
	ret := _m.Called(l, addrs, user, password, cloudID, apiKey)

	var r0 *elastic.SearchFactoryImpl
	if rf, ok := ret.Get(0).(func(*zap.Logger, []string, string, string, string, string) *elastic.SearchFactoryImpl); ok {
		r0 = rf(l, addrs, user, password, cloudID, apiKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elastic.SearchFactoryImpl)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*zap.Logger, []string, string, string, string, string) error); ok {
		r1 = rf(l, addrs, user, password, cloudID, apiKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewElasticer interface {
	mock.TestingT
	Cleanup(func())
}

// NewElasticer creates a new instance of Elasticer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewElasticer(t mockConstructorTestingTNewElasticer) *Elasticer {
	mock := &Elasticer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
