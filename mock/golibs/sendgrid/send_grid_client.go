// Code generated by mockery. DO NOT EDIT.

// This file can be generated by running: make gen-mock-repo

package mock_sendgrid

import (
	context "context"
	http "net/http"

	mail "github.com/sendgrid/sendgrid-go/helpers/mail"

	mock "github.com/stretchr/testify/mock"
)

// SendGridClient is an autogenerated mock type for the SendGridClient type
type SendGridClient struct {
	mock.Mock
}

// AuthenticateHTTPRequest provides a mock function with given fields: header, payload
func (_m *SendGridClient) AuthenticateHTTPRequest(header http.Header, payload []byte) (bool, error) {
	ret := _m.Called(header, payload)

	var r0 bool
	if rf, ok := ret.Get(0).(func(http.Header, []byte) bool); ok {
		r0 = rf(header, payload)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(http.Header, []byte) error); ok {
		r1 = rf(header, payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Send provides a mock function with given fields: email
func (_m *SendGridClient) Send(email *mail.SGMailV3) (string, error) {
	ret := _m.Called(email)

	var r0 string
	if rf, ok := ret.Get(0).(func(*mail.SGMailV3) string); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*mail.SGMailV3) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendWithContext provides a mock function with given fields: ctx, email
func (_m *SendGridClient) SendWithContext(ctx context.Context, email *mail.SGMailV3) (string, error) {
	ret := _m.Called(ctx, email)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *mail.SGMailV3) string); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *mail.SGMailV3) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSendGridClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewSendGridClient creates a new instance of SendGridClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSendGridClient(t mockConstructorTestingTNewSendGridClient) *SendGridClient {
	mock := &SendGridClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
