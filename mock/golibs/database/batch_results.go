// Code generated by mockery. DO NOT EDIT.

// This file can be generated by running: make gen-mock-repo

package mock_database

import (
	pgconn "github.com/jackc/pgconn"
	mock "github.com/stretchr/testify/mock"

	pgx "github.com/jackc/pgx/v4"
)

// BatchResults is an autogenerated mock type for the BatchResults type
type BatchResults struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *BatchResults) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exec provides a mock function with given fields:
func (_m *BatchResults) Exec() (pgconn.CommandTag, error) {
	ret := _m.Called()

	var r0 pgconn.CommandTag
	if rf, ok := ret.Get(0).(func() pgconn.CommandTag); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgconn.CommandTag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query provides a mock function with given fields:
func (_m *BatchResults) Query() (pgx.Rows, error) {
	ret := _m.Called()

	var r0 pgx.Rows
	if rf, ok := ret.Get(0).(func() pgx.Rows); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Rows)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryFunc provides a mock function with given fields: scans, f
func (_m *BatchResults) QueryFunc(scans []interface{}, f func(pgx.QueryFuncRow) error) (pgconn.CommandTag, error) {
	ret := _m.Called(scans, f)

	var r0 pgconn.CommandTag
	if rf, ok := ret.Get(0).(func([]interface{}, func(pgx.QueryFuncRow) error) pgconn.CommandTag); ok {
		r0 = rf(scans, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgconn.CommandTag)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]interface{}, func(pgx.QueryFuncRow) error) error); ok {
		r1 = rf(scans, f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryRow provides a mock function with given fields:
func (_m *BatchResults) QueryRow() pgx.Row {
	ret := _m.Called()

	var r0 pgx.Row
	if rf, ok := ret.Get(0).(func() pgx.Row); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pgx.Row)
		}
	}

	return r0
}

type mockConstructorTestingTNewBatchResults interface {
	mock.TestingT
	Cleanup(func())
}

// NewBatchResults creates a new instance of BatchResults. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBatchResults(t mockConstructorTestingTNewBatchResults) *BatchResults {
	mock := &BatchResults{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
