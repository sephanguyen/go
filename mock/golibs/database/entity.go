// Code generated by mockery. DO NOT EDIT.

// This file can be generated by running: make gen-mock-repo

package mock_database

import mock "github.com/stretchr/testify/mock"

// Entity is an autogenerated mock type for the Entity type
type Entity struct {
	mock.Mock
}

// FieldMap provides a mock function with given fields:
func (_m *Entity) FieldMap() ([]string, []interface{}) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 []interface{}
	if rf, ok := ret.Get(1).(func() []interface{}); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]interface{})
		}
	}

	return r0, r1
}

// TableName provides a mock function with given fields:
func (_m *Entity) TableName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewEntity interface {
	mock.TestingT
	Cleanup(func())
}

// NewEntity creates a new instance of Entity. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEntity(t mockConstructorTestingTNewEntity) *Entity {
	mock := &Entity{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
