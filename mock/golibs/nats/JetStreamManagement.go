// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mock_nats

import (
	context "context"

	golibsnats "github.com/manabie-com/backend/internal/golibs/nats"

	nats "github.com/nats-io/nats.go"
	mock "github.com/stretchr/testify/mock"
)

// JetStreamManagement is an autogenerated mock type for the JetStreamManagement type
type JetStreamManagement struct {
	mock.Mock
}

// UpsertConsumer provides a mock function with given fields: stream, cfg, opts
func (_m *JetStreamManagement) UpsertConsumer(stream string, cfg *nats.ConsumerConfig, opts ...nats.JSOpt) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, stream, cfg)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *nats.ConsumerConfig, ...nats.JSOpt) error); ok {
		r0 = rf(stream, cfg, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *JetStreamManagement) Close() {
	_m.Called()
}

// ConnectToJS provides a mock function with given fields:
func (_m *JetStreamManagement) ConnectToJS() {
	_m.Called()
}

// GetJS provides a mock function with given fields:
func (_m *JetStreamManagement) GetJS() nats.JetStreamContext {
	ret := _m.Called()

	var r0 nats.JetStreamContext
	if rf, ok := ret.Get(0).(func() nats.JetStreamContext); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(nats.JetStreamContext)
		}
	}

	return r0
}

// PublishAsyncContext provides a mock function with given fields: ctx, subject, data, opts
func (_m *JetStreamManagement) PublishAsyncContext(ctx context.Context, subject string, data []byte, opts ...nats.PubOpt) (string, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, subject, data)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, ...nats.PubOpt) string); ok {
		r0 = rf(ctx, subject, data, opts...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []byte, ...nats.PubOpt) error); ok {
		r1 = rf(ctx, subject, data, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublishContext provides a mock function with given fields: ctx, subject, data, opts
func (_m *JetStreamManagement) PublishContext(ctx context.Context, subject string, data []byte, opts ...nats.PubOpt) (*nats.PubAck, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, subject, data)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *nats.PubAck
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte, ...nats.PubOpt) *nats.PubAck); ok {
		r0 = rf(ctx, subject, data, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nats.PubAck)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []byte, ...nats.PubOpt) error); ok {
		r1 = rf(ctx, subject, data, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PullSubscribe provides a mock function with given fields: subject, durable, cb, option
func (_m *JetStreamManagement) PullSubscribe(subject string, durable string, cb golibsnats.MsgsHandler, option golibsnats.Option) error {
	ret := _m.Called(subject, durable, cb, option)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, golibsnats.MsgsHandler, golibsnats.Option) error); ok {
			r0 = rf(subject, durable, cb, option)
	} else {
			r0 = ret.Error(0)
	}

	return r0
}

// QueueSubscribe provides a mock function with given fields: subject, queue, option, cb
func (_m *JetStreamManagement) QueueSubscribe(subject string, queue string, option golibsnats.Option, cb golibsnats.MsgHandler) (*golibsnats.Subscription, error) {
	ret := _m.Called(subject, queue, option, cb)

	var r0 *golibsnats.Subscription
	if rf, ok := ret.Get(0).(func(string, string, golibsnats.Option, golibsnats.MsgHandler) *golibsnats.Subscription); ok {
		r0 = rf(subject, queue, option, cb)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golibsnats.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, golibsnats.Option, golibsnats.MsgHandler) error); ok {
		r1 = rf(subject, queue, option, cb)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Subscribe provides a mock function with given fields: subject, option, cb
func (_m *JetStreamManagement) Subscribe(subject string, option golibsnats.Option, cb golibsnats.MsgHandler) (*golibsnats.Subscription, error) {
	ret := _m.Called(subject, option, cb)

	var r0 *golibsnats.Subscription
	if rf, ok := ret.Get(0).(func(string, golibsnats.Option, golibsnats.MsgHandler) *golibsnats.Subscription); ok {
		r0 = rf(subject, option, cb)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*golibsnats.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, golibsnats.Option, golibsnats.MsgHandler) error); ok {
		r1 = rf(subject, option, cb)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TracedPublish provides a mock function with given fields: ctx, spanName, subject, data, opts
func (_m *JetStreamManagement) TracedPublish(ctx context.Context, spanName string, subject string, data []byte, opts ...nats.PubOpt) (*nats.PubAck, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, spanName, subject, data)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *nats.PubAck
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte, ...nats.PubOpt) *nats.PubAck); ok {
		r0 = rf(ctx, spanName, subject, data, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nats.PubAck)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, []byte, ...nats.PubOpt) error); ok {
		r1 = rf(ctx, spanName, subject, data, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TracedPublishAsync provides a mock function with given fields: ctx, spanName, subject, data, opts
func (_m *JetStreamManagement) TracedPublishAsync(ctx context.Context, spanName string, subject string, data []byte, opts ...nats.PubOpt) (string, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, spanName, subject, data)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []byte, ...nats.PubOpt) string); ok {
		r0 = rf(ctx, spanName, subject, data, opts...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, []byte, ...nats.PubOpt) error); ok {
		r1 = rf(ctx, spanName, subject, data, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertStream provides a mock function with given fields: cfg, opts
func (_m *JetStreamManagement) UpsertStream(cfg *nats.StreamConfig, opts ...nats.JSOpt) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, cfg)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(*nats.StreamConfig, ...nats.JSOpt) error); ok {
		r0 = rf(cfg, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterDisconnectErrHandler provides a mock function with given fields: h
func (_m *JetStreamManagement) RegisterDisconnectErrHandler(h nats.ConnErrHandler) {
	_m.Called(h)
}

// RegisterReconnectHandler provides a mock function with given fields: h
func (_m *JetStreamManagement) RegisterReconnectHandler(h nats.ConnHandler) {
	_m.Called(h)
}
