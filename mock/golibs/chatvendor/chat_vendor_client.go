// Code generated by mockery. DO NOT EDIT.

// This file can be generated by running: make gen-mock-repo

package mock_chatvendor

import (
	dto "github.com/manabie-com/backend/internal/golibs/chatvendor/dto"
	mock "github.com/stretchr/testify/mock"
)

// ChatVendorClient is an autogenerated mock type for the ChatVendorClient type
type ChatVendorClient struct {
	mock.Mock
}

// AddConversationMembers provides a mock function with given fields: req
func (_m *ChatVendorClient) AddConversationMembers(req *dto.AddConversationMembersRequest) (*dto.AddConversationMembersResponse, error) {
	ret := _m.Called(req)

	var r0 *dto.AddConversationMembersResponse
	if rf, ok := ret.Get(0).(func(*dto.AddConversationMembersRequest) *dto.AddConversationMembersResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.AddConversationMembersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.AddConversationMembersRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConversation provides a mock function with given fields: req
func (_m *ChatVendorClient) CreateConversation(req *dto.CreateConversationRequest) (*dto.CreateConversationResponse, error) {
	ret := _m.Called(req)

	var r0 *dto.CreateConversationResponse
	if rf, ok := ret.Get(0).(func(*dto.CreateConversationRequest) *dto.CreateConversationResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CreateConversationResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.CreateConversationRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: req
func (_m *ChatVendorClient) CreateUser(req *dto.CreateUserRequest) (*dto.CreateUserResponse, error) {
	ret := _m.Called(req)

	var r0 *dto.CreateUserResponse
	if rf, ok := ret.Get(0).(func(*dto.CreateUserRequest) *dto.CreateUserResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CreateUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.CreateUserRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMessage provides a mock function with given fields: req
func (_m *ChatVendorClient) DeleteMessage(req *dto.DeleteMessageRequest) (*dto.DeleteMessageResponse, error) {
	ret := _m.Called(req)

	var r0 *dto.DeleteMessageResponse
	if rf, ok := ret.Get(0).(func(*dto.DeleteMessageRequest) *dto.DeleteMessageResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.DeleteMessageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.DeleteMessageRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAppKey provides a mock function with given fields:
func (_m *ChatVendorClient) GetAppKey() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetAppToken provides a mock function with given fields:
func (_m *ChatVendorClient) GetAppToken() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: req
func (_m *ChatVendorClient) GetUser(req *dto.GetUserRequest) (*dto.GetUserResponse, error) {
	ret := _m.Called(req)

	var r0 *dto.GetUserResponse
	if rf, ok := ret.Get(0).(func(*dto.GetUserRequest) *dto.GetUserResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GetUserResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.GetUserRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserToken provides a mock function with given fields: userID
func (_m *ChatVendorClient) GetUserToken(userID string) (string, uint64, error) {
	ret := _m.Called(userID)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 uint64
	if rf, ok := ret.Get(1).(func(string) uint64); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RemoveConversationMembers provides a mock function with given fields: req
func (_m *ChatVendorClient) RemoveConversationMembers(req *dto.RemoveConversationMembersRequest) (*dto.RemoveConversationMembersResponse, error) {
	ret := _m.Called(req)

	var r0 *dto.RemoveConversationMembersResponse
	if rf, ok := ret.Get(0).(func(*dto.RemoveConversationMembersRequest) *dto.RemoveConversationMembersResponse); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.RemoveConversationMembersResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*dto.RemoveConversationMembersRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewChatVendorClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewChatVendorClient creates a new instance of ChatVendorClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChatVendorClient(t mockConstructorTestingTNewChatVendorClient) *ChatVendorClient {
	mock := &ChatVendorClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
