package mock_unleash_client

import "github.com/stretchr/testify/mock"

// UnleashClientInstance is an autogenerated mock type for the UnleashClientInstance type
type UnleashClientInstance struct {
	mock.Mock
}

// ConnectToUnleashClient provides a mock function with given fields:
func (_u *UnleashClientInstance) ConnectToUnleashClient() error {
	ret := _u.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsFeatureEnabled provides a mock function with given fields:
func (_u *UnleashClientInstance) IsFeatureEnabled(featureName, backendEnv string) (bool, error) {
	ret := _u.Called(featureName, backendEnv)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(featureName, backendEnv)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(featureName, backendEnv)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsFeatureEnabledOnOrganization provides a mock function with given fields:
func (_u *UnleashClientInstance) IsFeatureEnabledOnOrganization(featureName, backendEnv, resourcePath string) (bool, error) {
	ret := _u.Called(featureName, backendEnv, resourcePath)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, string) bool); ok {
		r0 = rf(featureName, backendEnv, resourcePath)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(featureName, backendEnv, resourcePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_u *UnleashClientInstance) WaitForUnleashReady() {}
