// Code generated by mockery. DO NOT EDIT.

// This file can be generated by running: make gen-mock-repo

package mock_elastic

import (
	context "context"

	elasticsearch "github.com/elastic/go-elasticsearch/v7"
	elastic "github.com/manabie-com/backend/internal/golibs/elastic"

	esapi "github.com/elastic/go-elasticsearch/v7/esapi"

	esutil "github.com/elastic/go-elasticsearch/v7/esutil"

	io "io"

	mock "github.com/stretchr/testify/mock"

	strings "strings"
)

// SearchFactory is an autogenerated mock type for the SearchFactory type
type SearchFactory struct {
	mock.Mock
}

// BulkIndex provides a mock function with given fields: ctx, data, actionKind, indexName
func (_m *SearchFactory) BulkIndex(ctx context.Context, data map[string][]byte, actionKind string, indexName string) (int, error) {
	ret := _m.Called(ctx, data, actionKind, indexName)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, map[string][]byte, string, string) int); ok {
		r0 = rf(ctx, data, actionKind, indexName)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, map[string][]byte, string, string) error); ok {
		r1 = rf(ctx, data, actionKind, indexName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BulkIndexWithResourcePath provides a mock function with given fields: ctx, data, indexName
func (_m *SearchFactory) BulkIndexWithResourcePath(ctx context.Context, data map[string]elastic.Doc, indexName string) (int, error) {
	ret := _m.Called(ctx, data, indexName)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, map[string]elastic.Doc, string) int); ok {
		r0 = rf(ctx, data, indexName)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, map[string]elastic.Doc, string) error); ok {
		r1 = rf(ctx, data, indexName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckIndexExists provides a mock function with given fields: index
func (_m *SearchFactory) CheckIndexExists(index string) (bool, error) {
	ret := _m.Called(index)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(index)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDocuments provides a mock function with given fields: ctx, data, actionKind, indexName
func (_m *SearchFactory) CreateDocuments(ctx context.Context, data map[string][]byte, actionKind string, indexName string) (int, error) {
	ret := _m.Called(ctx, data, actionKind, indexName)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, map[string][]byte, string, string) int); ok {
		r0 = rf(ctx, data, actionKind, indexName)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, map[string][]byte, string, string) error); ok {
		r1 = rf(ctx, data, actionKind, indexName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIndex provides a mock function with given fields: index, body
func (_m *SearchFactory) CreateIndex(index string, body io.Reader) (*esapi.Response, error) {
	ret := _m.Called(index, body)

	var r0 *esapi.Response
	if rf, ok := ret.Get(0).(func(string, io.Reader) *esapi.Response); ok {
		r0 = rf(index, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*esapi.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, io.Reader) error); ok {
		r1 = rf(index, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIndex provides a mock function with given fields: index
func (_m *SearchFactory) DeleteIndex(index string) (*esapi.Response, error) {
	ret := _m.Called(index)

	var r0 *esapi.Response
	if rf, ok := ret.Get(0).(func(string) *esapi.Response); ok {
		r0 = rf(index)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*esapi.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(index)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClient provides a mock function with given fields:
func (_m *SearchFactory) GetClient() *elasticsearch.Client {
	ret := _m.Called()

	var r0 *elasticsearch.Client
	if rf, ok := ret.Get(0).(func() *elasticsearch.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticsearch.Client)
		}
	}

	return r0
}

// NewBulkIndexer provides a mock function with given fields:
func (_m *SearchFactory) NewBulkIndexer() (esutil.BulkIndexer, error) {
	ret := _m.Called()

	var r0 esutil.BulkIndexer
	if rf, ok := ret.Get(0).(func() esutil.BulkIndexer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(esutil.BulkIndexer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: ctx, indexName, read, o
func (_m *SearchFactory) Search(ctx context.Context, indexName string, read *strings.Reader, o ...func(*esapi.SearchRequest)) (*esapi.Response, error) {
	_va := make([]interface{}, len(o))
	for _i := range o {
		_va[_i] = o[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, indexName, read)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *esapi.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, *strings.Reader, ...func(*esapi.SearchRequest)) *esapi.Response); ok {
		r0 = rf(ctx, indexName, read, o...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*esapi.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *strings.Reader, ...func(*esapi.SearchRequest)) error); ok {
		r1 = rf(ctx, indexName, read, o...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchUsingJwtToken provides a mock function with given fields: ctx, indexName, read, o
func (_m *SearchFactory) SearchUsingJwtToken(ctx context.Context, indexName string, read io.Reader, o ...func(*esapi.SearchRequest)) (*esapi.Response, error) {
	_va := make([]interface{}, len(o))
	for _i := range o {
		_va[_i] = o[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, indexName, read)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *esapi.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, ...func(*esapi.SearchRequest)) *esapi.Response); ok {
		r0 = rf(ctx, indexName, read, o...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*esapi.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, ...func(*esapi.SearchRequest)) error); ok {
		r1 = rf(ctx, indexName, read, o...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: index, id, body, o
func (_m *SearchFactory) Update(index string, id string, body io.Reader, o ...func(*esapi.UpdateRequest)) (*esapi.Response, error) {
	_va := make([]interface{}, len(o))
	for _i := range o {
		_va[_i] = o[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, index, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *esapi.Response
	if rf, ok := ret.Get(0).(func(string, string, io.Reader, ...func(*esapi.UpdateRequest)) *esapi.Response); ok {
		r0 = rf(index, id, body, o...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*esapi.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, io.Reader, ...func(*esapi.UpdateRequest)) error); ok {
		r1 = rf(index, id, body, o...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCtx provides a mock function with given fields: ctx, index, id, body, o
func (_m *SearchFactory) UpdateCtx(ctx context.Context, index string, id string, body io.Reader, o ...func(*esapi.UpdateRequest)) (*esapi.Response, error) {
	_va := make([]interface{}, len(o))
	for _i := range o {
		_va[_i] = o[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, index, id, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *esapi.Response
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, ...func(*esapi.UpdateRequest)) *esapi.Response); ok {
		r0 = rf(ctx, index, id, body, o...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*esapi.Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, ...func(*esapi.UpdateRequest)) error); ok {
		r1 = rf(ctx, index, id, body, o...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSearchFactory interface {
	mock.TestingT
	Cleanup(func())
}

// NewSearchFactory creates a new instance of SearchFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSearchFactory(t mockConstructorTestingTNewSearchFactory) *SearchFactory {
	mock := &SearchFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
