// Code generated by mockery. DO NOT EDIT.

// This file can be generated by running: make gen-mock-repo

package mock_learnosity

import (
	context "context"

	learnosity "github.com/manabie-com/backend/internal/golibs/learnosity"
	mock "github.com/stretchr/testify/mock"
)

// DataAPI is an autogenerated mock type for the DataAPI type
type DataAPI struct {
	mock.Mock
}

// Request provides a mock function with given fields: ctx, http, endpoint, security, opts
func (_m *DataAPI) Request(ctx context.Context, http learnosity.HTTP, endpoint learnosity.Endpoint, security learnosity.Security, opts ...learnosity.Option) (*learnosity.Result, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, http, endpoint, security)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *learnosity.Result
	if rf, ok := ret.Get(0).(func(context.Context, learnosity.HTTP, learnosity.Endpoint, learnosity.Security, ...learnosity.Option) *learnosity.Result); ok {
		r0 = rf(ctx, http, endpoint, security, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*learnosity.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, learnosity.HTTP, learnosity.Endpoint, learnosity.Security, ...learnosity.Option) error); ok {
		r1 = rf(ctx, http, endpoint, security, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestIterator provides a mock function with given fields: ctx, http, endpoint, security, opts
func (_m *DataAPI) RequestIterator(ctx context.Context, http learnosity.HTTP, endpoint learnosity.Endpoint, security learnosity.Security, opts ...learnosity.Option) ([]learnosity.Result, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, http, endpoint, security)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []learnosity.Result
	if rf, ok := ret.Get(0).(func(context.Context, learnosity.HTTP, learnosity.Endpoint, learnosity.Security, ...learnosity.Option) []learnosity.Result); ok {
		r0 = rf(ctx, http, endpoint, security, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]learnosity.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, learnosity.HTTP, learnosity.Endpoint, learnosity.Security, ...learnosity.Option) error); ok {
		r1 = rf(ctx, http, endpoint, security, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDataAPI interface {
	mock.TestingT
	Cleanup(func())
}

// NewDataAPI creates a new instance of DataAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDataAPI(t mockConstructorTestingTNewDataAPI) *DataAPI {
	mock := &DataAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
