// Code generated by mockery. DO NOT EDIT.

// This file can be generated by running: make gen-mock-repo

package mock_auth

import (
	context "context"

	auth "firebase.google.com/go/v4/auth"

	mock "github.com/stretchr/testify/mock"
)

// GCPTenantClient is an autogenerated mock type for the GCPTenantClient type
type GCPTenantClient struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *GCPTenantClient) CreateUser(ctx context.Context, user *auth.UserToCreate) (*auth.UserRecord, error) {
	ret := _m.Called(ctx, user)

	var r0 *auth.UserRecord
	if rf, ok := ret.Get(0).(func(context.Context, *auth.UserToCreate) *auth.UserRecord); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.UserRecord)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.UserToCreate) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomToken provides a mock function with given fields: ctx, uid
func (_m *GCPTenantClient) CustomToken(ctx context.Context, uid string) (string, error) {
	ret := _m.Called(ctx, uid)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, uid
func (_m *GCPTenantClient) GetUser(ctx context.Context, uid string) (*auth.UserRecord, error) {
	ret := _m.Called(ctx, uid)

	var r0 *auth.UserRecord
	if rf, ok := ret.Get(0).(func(context.Context, string) *auth.UserRecord); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.UserRecord)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *GCPTenantClient) GetUserByEmail(ctx context.Context, email string) (*auth.UserRecord, error) {
	ret := _m.Called(ctx, email)

	var r0 *auth.UserRecord
	if rf, ok := ret.Get(0).(func(context.Context, string) *auth.UserRecord); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.UserRecord)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportUsers provides a mock function with given fields: ctx, users, opts
func (_m *GCPTenantClient) ImportUsers(ctx context.Context, users []*auth.UserToImport, opts ...auth.UserImportOption) (*auth.UserImportResult, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, users)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *auth.UserImportResult
	if rf, ok := ret.Get(0).(func(context.Context, []*auth.UserToImport, ...auth.UserImportOption) *auth.UserImportResult); ok {
		r0 = rf(ctx, users, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.UserImportResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []*auth.UserToImport, ...auth.UserImportOption) error); ok {
		r1 = rf(ctx, users, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PasswordResetLink provides a mock function with given fields: ctx, email
func (_m *GCPTenantClient) PasswordResetLink(ctx context.Context, email string) (string, error) {
	ret := _m.Called(ctx, email)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, uid, user
func (_m *GCPTenantClient) UpdateUser(ctx context.Context, uid string, user *auth.UserToUpdate) (*auth.UserRecord, error) {
	ret := _m.Called(ctx, uid, user)

	var r0 *auth.UserRecord
	if rf, ok := ret.Get(0).(func(context.Context, string, *auth.UserToUpdate) *auth.UserRecord); ok {
		r0 = rf(ctx, uid, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.UserRecord)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *auth.UserToUpdate) error); ok {
		r1 = rf(ctx, uid, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Users provides a mock function with given fields: ctx, nextPageToken
func (_m *GCPTenantClient) Users(ctx context.Context, nextPageToken string) *auth.UserIterator {
	ret := _m.Called(ctx, nextPageToken)

	var r0 *auth.UserIterator
	if rf, ok := ret.Get(0).(func(context.Context, string) *auth.UserIterator); ok {
		r0 = rf(ctx, nextPageToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.UserIterator)
		}
	}

	return r0
}

type mockConstructorTestingTNewGCPTenantClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewGCPTenantClient creates a new instance of GCPTenantClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGCPTenantClient(t mockConstructorTestingTNewGCPTenantClient) *GCPTenantClient {
	mock := &GCPTenantClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
