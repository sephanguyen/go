// Code generated by mockery. DO NOT EDIT.

// This file can be generated by running: make gen-mock-repo

package mock_auth

import (
	context "context"

	gocloak "github.com/Nerzal/gocloak/v10"
	mock "github.com/stretchr/testify/mock"
)

// KeyCloakClient is an autogenerated mock type for the KeyCloakClient type
type KeyCloakClient struct {
	mock.Mock
}

// GetToken provides a mock function with given fields: ctx, realm, opts
func (_m *KeyCloakClient) GetToken(ctx context.Context, realm string, opts gocloak.TokenOptions) (*gocloak.JWT, error) {
	ret := _m.Called(ctx, realm, opts)

	var r0 *gocloak.JWT
	if rf, ok := ret.Get(0).(func(context.Context, string, gocloak.TokenOptions) *gocloak.JWT); ok {
		r0 = rf(ctx, realm, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocloak.JWT)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, gocloak.TokenOptions) error); ok {
		r1 = rf(ctx, realm, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewKeyCloakClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewKeyCloakClient creates a new instance of KeyCloakClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewKeyCloakClient(t mockConstructorTestingTNewKeyCloakClient) *KeyCloakClient {
	mock := &KeyCloakClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
