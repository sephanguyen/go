// Code generated by mockery. DO NOT EDIT.

// This file can be generated by running: make gen-mock-repo

package mock_multitenant

import (
	context "context"

	auth "github.com/manabie-com/backend/internal/golibs/auth"

	gcp "github.com/manabie-com/backend/internal/golibs/gcp"

	mock "github.com/stretchr/testify/mock"

	multitenant "github.com/manabie-com/backend/internal/golibs/auth/multitenant"

	user "github.com/manabie-com/backend/internal/golibs/auth/user"

	v4auth "firebase.google.com/go/v4/auth"
)

// TenantClient is an autogenerated mock type for the TenantClient type
type TenantClient struct {
	mock.Mock
}

// CustomToken provides a mock function with given fields: ctx, uid
func (_m *TenantClient) CustomToken(ctx context.Context, uid string) (string, error) {
	ret := _m.Called(ctx, uid)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHashConfig provides a mock function with given fields:
func (_m *TenantClient) GetHashConfig() *gcp.HashConfig {
	ret := _m.Called()

	var r0 *gcp.HashConfig
	if rf, ok := ret.Get(0).(func() *gcp.HashConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gcp.HashConfig)
		}
	}

	return r0
}

// GetUser provides a mock function with given fields: ctx, uid
func (_m *TenantClient) GetUser(ctx context.Context, uid string) (user.User, error) {
	ret := _m.Called(ctx, uid)

	var r0 user.User
	if rf, ok := ret.Get(0).(func(context.Context, string) user.User); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(user.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportUsers provides a mock function with given fields: ctx, users, importHash
func (_m *TenantClient) ImportUsers(ctx context.Context, users user.Users, importHash auth.ScryptHash) (*user.ImportUsersResult, error) {
	ret := _m.Called(ctx, users, importHash)

	var r0 *user.ImportUsersResult
	if rf, ok := ret.Get(0).(func(context.Context, user.Users, auth.ScryptHash) *user.ImportUsersResult); ok {
		r0 = rf(ctx, users, importHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.ImportUsersResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, user.Users, auth.ScryptHash) error); ok {
		r1 = rf(ctx, users, importHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IterateAllUsers provides a mock function with given fields: ctx, pageSize, iteratedUsersCallback
func (_m *TenantClient) IterateAllUsers(ctx context.Context, pageSize int, iteratedUsersCallback func(user.Users) error) error {
	ret := _m.Called(ctx, pageSize, iteratedUsersCallback)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, func(user.Users) error) error); ok {
		r0 = rf(ctx, pageSize, iteratedUsersCallback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LegacyUpdateUser provides a mock function with given fields: ctx, uid, _a2
func (_m *TenantClient) LegacyUpdateUser(ctx context.Context, uid string, _a2 *v4auth.UserToUpdate) (*v4auth.UserRecord, error) {
	ret := _m.Called(ctx, uid, _a2)

	var r0 *v4auth.UserRecord
	if rf, ok := ret.Get(0).(func(context.Context, string, *v4auth.UserToUpdate) *v4auth.UserRecord); ok {
		r0 = rf(ctx, uid, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v4auth.UserRecord)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *v4auth.UserToUpdate) error); ok {
		r1 = rf(ctx, uid, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PasswordResetLink provides a mock function with given fields: ctx, email, langCode
func (_m *TenantClient) PasswordResetLink(ctx context.Context, email string, langCode string) (string, error) {
	ret := _m.Called(ctx, email, langCode)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, email, langCode)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, langCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetHashConfig provides a mock function with given fields: hashConfig
func (_m *TenantClient) SetHashConfig(hashConfig *gcp.HashConfig) {
	_m.Called(hashConfig)
}

// TenantID provides a mock function with given fields:
func (_m *TenantClient) TenantID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// UserPager provides a mock function with given fields: ctx, nextPageToken, pageSize
func (_m *TenantClient) UserPager(ctx context.Context, nextPageToken string, pageSize int) *multitenant.Pager {
	ret := _m.Called(ctx, nextPageToken, pageSize)

	var r0 *multitenant.Pager
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *multitenant.Pager); ok {
		r0 = rf(ctx, nextPageToken, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*multitenant.Pager)
		}
	}

	return r0
}

type mockConstructorTestingTNewTenantClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewTenantClient creates a new instance of TenantClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTenantClient(t mockConstructorTestingTNewTenantClient) *TenantClient {
	mock := &TenantClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
