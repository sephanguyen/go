// Code generated by mockery. DO NOT EDIT.

// This file can be generated by running: make gen-mock-repo

package mock_multitenant

import (
	context "context"

	multitenant "github.com/manabie-com/backend/internal/golibs/auth/multitenant"
	mock "github.com/stretchr/testify/mock"
)

// TenantManager is an autogenerated mock type for the TenantManager type
type TenantManager struct {
	mock.Mock
}

// CreateTenant provides a mock function with given fields: ctx, tenantToCreate
func (_m *TenantManager) CreateTenant(ctx context.Context, tenantToCreate multitenant.TenantInfo) (multitenant.Tenant, error) {
	ret := _m.Called(ctx, tenantToCreate)

	var r0 multitenant.Tenant
	if rf, ok := ret.Get(0).(func(context.Context, multitenant.TenantInfo) multitenant.Tenant); ok {
		r0 = rf(ctx, tenantToCreate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(multitenant.Tenant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, multitenant.TenantInfo) error); ok {
		r1 = rf(ctx, tenantToCreate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTenant provides a mock function with given fields: ctx, tenantID
func (_m *TenantManager) DeleteTenant(ctx context.Context, tenantID string) error {
	ret := _m.Called(ctx, tenantID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, tenantID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProjectID provides a mock function with given fields:
func (_m *TenantManager) ProjectID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TenantClient provides a mock function with given fields: ctx, tenantID
func (_m *TenantManager) TenantClient(ctx context.Context, tenantID string) (multitenant.TenantClient, error) {
	ret := _m.Called(ctx, tenantID)

	var r0 multitenant.TenantClient
	if rf, ok := ret.Get(0).(func(context.Context, string) multitenant.TenantClient); ok {
		r0 = rf(ctx, tenantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(multitenant.TenantClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tenantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTenantManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewTenantManager creates a new instance of TenantManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTenantManager(t mockConstructorTestingTNewTenantManager) *TenantManager {
	mock := &TenantManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
