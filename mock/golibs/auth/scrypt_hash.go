// Code generated by mockery. DO NOT EDIT.

// This file can be generated by running: make gen-mock-repo

package mock_auth

import mock "github.com/stretchr/testify/mock"

// ScryptHash is an autogenerated mock type for the ScryptHash type
type ScryptHash struct {
	mock.Mock
}

// Key provides a mock function with given fields:
func (_m *ScryptHash) Key() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MemoryCost provides a mock function with given fields:
func (_m *ScryptHash) MemoryCost() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Rounds provides a mock function with given fields:
func (_m *ScryptHash) Rounds() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// SaltSeparator provides a mock function with given fields:
func (_m *ScryptHash) SaltSeparator() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

type mockConstructorTestingTNewScryptHash interface {
	mock.TestingT
	Cleanup(func())
}

// NewScryptHash creates a new instance of ScryptHash. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewScryptHash(t mockConstructorTestingTNewScryptHash) *ScryptHash {
	mock := &ScryptHash{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
