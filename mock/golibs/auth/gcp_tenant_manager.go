// Code generated by mockery. DO NOT EDIT.

// This file can be generated by running: make gen-mock-repo

package mock_auth

import (
	context "context"

	auth "firebase.google.com/go/v4/auth"

	mock "github.com/stretchr/testify/mock"
)

// GCPTenantManager is an autogenerated mock type for the GCPTenantManager type
type GCPTenantManager struct {
	mock.Mock
}

// AuthForTenant provides a mock function with given fields: tenantID
func (_m *GCPTenantManager) AuthForTenant(tenantID string) (*auth.TenantClient, error) {
	ret := _m.Called(tenantID)

	var r0 *auth.TenantClient
	if rf, ok := ret.Get(0).(func(string) *auth.TenantClient); ok {
		r0 = rf(tenantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.TenantClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tenantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTenant provides a mock function with given fields: ctx, tenant
func (_m *GCPTenantManager) CreateTenant(ctx context.Context, tenant *auth.TenantToCreate) (*auth.Tenant, error) {
	ret := _m.Called(ctx, tenant)

	var r0 *auth.Tenant
	if rf, ok := ret.Get(0).(func(context.Context, *auth.TenantToCreate) *auth.Tenant); ok {
		r0 = rf(ctx, tenant)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.Tenant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *auth.TenantToCreate) error); ok {
		r1 = rf(ctx, tenant)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTenant provides a mock function with given fields: ctx, tenantID
func (_m *GCPTenantManager) DeleteTenant(ctx context.Context, tenantID string) error {
	ret := _m.Called(ctx, tenantID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, tenantID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Tenant provides a mock function with given fields: ctx, tenantID
func (_m *GCPTenantManager) Tenant(ctx context.Context, tenantID string) (*auth.Tenant, error) {
	ret := _m.Called(ctx, tenantID)

	var r0 *auth.Tenant
	if rf, ok := ret.Get(0).(func(context.Context, string) *auth.Tenant); ok {
		r0 = rf(ctx, tenantID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.Tenant)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tenantID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGCPTenantManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewGCPTenantManager creates a new instance of GCPTenantManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGCPTenantManager(t mockConstructorTestingTNewGCPTenantManager) *GCPTenantManager {
	mock := &GCPTenantManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
