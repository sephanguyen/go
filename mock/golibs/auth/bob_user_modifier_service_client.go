// Code generated by mockery. DO NOT EDIT.

// This file can be generated by running: make gen-mock-repo

package mock_auth

import (
	context "context"

	bpb "github.com/manabie-com/backend/pkg/manabuf/bob/v1"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// BobUserModifierServiceClient is an autogenerated mock type for the BobUserModifierServiceClient type
type BobUserModifierServiceClient struct {
	mock.Mock
}

// ExchangeCustomToken provides a mock function with given fields: ctx, in, opts
func (_m *BobUserModifierServiceClient) ExchangeCustomToken(ctx context.Context, in *bpb.ExchangeCustomTokenRequest, opts ...grpc.CallOption) (*bpb.ExchangeCustomTokenResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *bpb.ExchangeCustomTokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, *bpb.ExchangeCustomTokenRequest, ...grpc.CallOption) *bpb.ExchangeCustomTokenResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bpb.ExchangeCustomTokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *bpb.ExchangeCustomTokenRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExchangeToken provides a mock function with given fields: ctx, in, opts
func (_m *BobUserModifierServiceClient) ExchangeToken(ctx context.Context, in *bpb.ExchangeTokenRequest, opts ...grpc.CallOption) (*bpb.ExchangeTokenResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *bpb.ExchangeTokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, *bpb.ExchangeTokenRequest, ...grpc.CallOption) *bpb.ExchangeTokenResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bpb.ExchangeTokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *bpb.ExchangeTokenRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, in, opts
func (_m *BobUserModifierServiceClient) Register(ctx context.Context, in *bpb.RegisterRequest, opts ...grpc.CallOption) (*bpb.RegisterResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *bpb.RegisterResponse
	if rf, ok := ret.Get(0).(func(context.Context, *bpb.RegisterRequest, ...grpc.CallOption) *bpb.RegisterResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bpb.RegisterResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *bpb.RegisterRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserDeviceToken provides a mock function with given fields: ctx, in, opts
func (_m *BobUserModifierServiceClient) UpdateUserDeviceToken(ctx context.Context, in *bpb.UpdateUserDeviceTokenRequest, opts ...grpc.CallOption) (*bpb.UpdateUserDeviceTokenResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *bpb.UpdateUserDeviceTokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, *bpb.UpdateUserDeviceTokenRequest, ...grpc.CallOption) *bpb.UpdateUserDeviceTokenResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bpb.UpdateUserDeviceTokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *bpb.UpdateUserDeviceTokenRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserLastLoginDate provides a mock function with given fields: ctx, in, opts
func (_m *BobUserModifierServiceClient) UpdateUserLastLoginDate(ctx context.Context, in *bpb.UpdateUserLastLoginDateRequest, opts ...grpc.CallOption) (*bpb.UpdateUserLastLoginDateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *bpb.UpdateUserLastLoginDateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *bpb.UpdateUserLastLoginDateRequest, ...grpc.CallOption) *bpb.UpdateUserLastLoginDateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bpb.UpdateUserLastLoginDateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *bpb.UpdateUserLastLoginDateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserProfile provides a mock function with given fields: ctx, in, opts
func (_m *BobUserModifierServiceClient) UpdateUserProfile(ctx context.Context, in *bpb.UpdateUserProfileRequest, opts ...grpc.CallOption) (*bpb.UpdateUserProfileResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *bpb.UpdateUserProfileResponse
	if rf, ok := ret.Get(0).(func(context.Context, *bpb.UpdateUserProfileRequest, ...grpc.CallOption) *bpb.UpdateUserProfileResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bpb.UpdateUserProfileResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *bpb.UpdateUserProfileRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBobUserModifierServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewBobUserModifierServiceClient creates a new instance of BobUserModifierServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBobUserModifierServiceClient(t mockConstructorTestingTNewBobUserModifierServiceClient) *BobUserModifierServiceClient {
	mock := &BobUserModifierServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
