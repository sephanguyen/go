// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgx/v4"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/lessonmgmt/modules/classdo/domain"
	"github.com/manabie-com/backend/internal/lessonmgmt/modules/classdo/infrastructure/repo"
)

type MockClassDoAccountRepo struct {
	mock.Mock
}

func (r *MockClassDoAccountRepo) GetAllClassDoAccounts(arg1 context.Context, arg2 database.QueryExecer) ([]*repo.ClassDoAccount, error) {
	args := r.Called(arg1, arg2)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*repo.ClassDoAccount), args.Error(1)
}

func (r *MockClassDoAccountRepo) GetClassDoAccountByID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) (*repo.ClassDoAccount, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*repo.ClassDoAccount), args.Error(1)
}

func (r *MockClassDoAccountRepo) UpsertClassDoAccounts(arg1 context.Context, arg2 database.QueryExecer, arg3 domain.ClassDoAccounts) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockClassDoAccountRepo) UpsertQueue(arg1 *pgx.Batch, arg2 *repo.ClassDoAccount) {
	_ = r.Called(arg1, arg2)
	return
}
