// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/lessonmgmt/modules/user/application/queries/payloads"
	"github.com/manabie-com/backend/internal/lessonmgmt/modules/user/domain"
)

type MockStudentSubscriptionRepo struct {
	mock.Mock
}

func (r *MockStudentSubscriptionRepo) BulkUpsertStudentSubscription(arg1 context.Context, arg2 database.QueryExecer, arg3 domain.StudentSubscriptions) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudentSubscriptionRepo) GetAll(arg1 context.Context, arg2 database.QueryExecer) ([]*domain.EnrolledStudent, error) {
	args := r.Called(arg1, arg2)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*domain.EnrolledStudent), args.Error(1)
}

func (r *MockStudentSubscriptionRepo) GetByStudentSubscriptionID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) (*domain.StudentSubscription, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*domain.StudentSubscription), args.Error(1)
}

func (r *MockStudentSubscriptionRepo) GetByStudentSubscriptionIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) ([]*domain.StudentSubscription, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*domain.StudentSubscription), args.Error(1)
}

func (r *MockStudentSubscriptionRepo) GetStudentCourseSubscriptions(arg1 context.Context, arg2 database.QueryExecer, arg3 []string, arg4 ...string) (domain.StudentSubscriptions, error) {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Get(0).(domain.StudentSubscriptions), args.Error(1)
}

func (r *MockStudentSubscriptionRepo) GetStudentCoursesAndClasses(arg1 context.Context, arg2 database.QueryExecer, arg3 string) (*domain.StudentCoursesAndClasses, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*domain.StudentCoursesAndClasses), args.Error(1)
}

func (r *MockStudentSubscriptionRepo) GetStudentSubscriptionIDByUniqueIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string, arg5 string) (string, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Get(0).(string), args.Error(1)
}

func (r *MockStudentSubscriptionRepo) RetrieveStudentPendingReallocate(arg1 context.Context, arg2 database.QueryExecer, arg3 domain.RetrieveStudentPendingReallocateDto) ([]*domain.ReallocateStudent, uint32, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Get(1).(uint32), args.Error(2)
	}
	return args.Get(0).([]*domain.ReallocateStudent), args.Get(1).(uint32), args.Error(2)
}

func (r *MockStudentSubscriptionRepo) RetrieveStudentSubscription(arg1 context.Context, arg2 database.QueryExecer, arg3 *payloads.ListStudentSubScriptionsArgs) ([]*domain.StudentSubscription, uint32, string, uint32, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Get(1).(uint32), args.Get(2).(string), args.Get(3).(uint32), args.Error(4)
	}
	return args.Get(0).([]*domain.StudentSubscription), args.Get(1).(uint32), args.Get(2).(string), args.Get(3).(uint32), args.Error(4)
}

func (r *MockStudentSubscriptionRepo) UpdateMultiStudentNameByStudents(arg1 context.Context, arg2 database.QueryExecer, arg3 domain.Users) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
