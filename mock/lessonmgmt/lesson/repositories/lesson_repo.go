// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/lessonmgmt/modules/lesson/application/queries/payloads"
	"github.com/manabie-com/backend/internal/lessonmgmt/modules/lesson/domain"
	"github.com/manabie-com/backend/internal/lessonmgmt/modules/lesson/infrastructure/repo"
)

type MockLessonRepo struct {
	mock.Mock
}

func (r *MockLessonRepo) Delete(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLessonRepo) FillSchedulerToLessons(arg1 context.Context, arg2 database.QueryExecer, arg3 map[string]string) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLessonRepo) GenerateLessonTemplate(arg1 context.Context, arg2 database.QueryExecer) ([]uint8, error) {
	args := r.Called(arg1, arg2)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]uint8), args.Error(1)
}

func (r *MockLessonRepo) GenerateLessonTemplateV2(arg1 context.Context, arg2 database.QueryExecer) ([]uint8, error) {
	args := r.Called(arg1, arg2)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]uint8), args.Error(1)
}

func (r *MockLessonRepo) GetFutureLessonsByCourseIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string, arg4 string) ([]*domain.Lesson, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*domain.Lesson), args.Error(1)
}

func (r *MockLessonRepo) GetFutureRecurringLessonIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 string) ([]string, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]string), args.Error(1)
}

func (r *MockLessonRepo) GetLessonByID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) (*domain.Lesson, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*domain.Lesson), args.Error(1)
}

func (r *MockLessonRepo) GetLessonByIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) ([]*domain.Lesson, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*domain.Lesson), args.Error(1)
}

func (r *MockLessonRepo) GetLessonBySchedulerID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) ([]*domain.Lesson, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*domain.Lesson), args.Error(1)
}

func (r *MockLessonRepo) GetLessonWithNamesByID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) (*domain.Lesson, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*domain.Lesson), args.Error(1)
}

func (r *MockLessonRepo) GetLessonWithSchedulerInfoByLessonID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) (*domain.Lesson, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*domain.Lesson), args.Error(1)
}

func (r *MockLessonRepo) GetLessonsByLocationStatusAndDateTimeRange(arg1 context.Context, arg2 database.QueryExecer, arg3 *payloads.GetLessonsByLocationStatusAndDateTimeRangeArgs) ([]*domain.Lesson, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*domain.Lesson), args.Error(1)
}

func (r *MockLessonRepo) GetLessonsOnCalendar(arg1 context.Context, arg2 database.QueryExecer, arg3 *payloads.GetLessonListOnCalendarArgs) ([]*domain.Lesson, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*domain.Lesson), args.Error(1)
}

func (r *MockLessonRepo) GetLessonsTeachingModelGroupByClassIdWithDuration(arg1 context.Context, arg2 database.Ext, arg3 *domain.QueryLesson) ([]*domain.Lesson, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*domain.Lesson), args.Error(1)
}

func (r *MockLessonRepo) GetLessonsWithInvalidSchedulerID(arg1 context.Context, arg2 database.QueryExecer) ([]*repo.Lesson, error) {
	args := r.Called(arg1, arg2)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*repo.Lesson), args.Error(1)
}

func (r *MockLessonRepo) GetLessonsWithSchedulerNull(arg1 context.Context, arg2 database.QueryExecer, arg3 int, arg4 int) ([]*repo.Lesson, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*repo.Lesson), args.Error(1)
}

func (r *MockLessonRepo) InsertLesson(arg1 context.Context, arg2 database.QueryExecer, arg3 *domain.Lesson) (*domain.Lesson, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*domain.Lesson), args.Error(1)
}

func (r *MockLessonRepo) LockLesson(arg1 context.Context, arg2 database.Ext, arg3 []string) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLessonRepo) RemoveClassDoLinkByLessonID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLessonRepo) RemoveClassDoLinkOfLesson(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLessonRepo) RemoveZoomLinkByLessonID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLessonRepo) RemoveZoomLinkOfLesson(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLessonRepo) Retrieve(arg1 context.Context, arg2 database.QueryExecer, arg3 *payloads.GetLessonListArg) ([]*domain.Lesson, uint32, string, uint32, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Get(1).(uint32), args.Get(2).(string), args.Get(3).(uint32), args.Error(4)
	}
	return args.Get(0).([]*domain.Lesson), args.Get(1).(uint32), args.Get(2).(string), args.Get(3).(uint32), args.Error(4)
}

func (r *MockLessonRepo) UpdateLesson(arg1 context.Context, arg2 database.QueryExecer, arg3 *domain.Lesson) (*domain.Lesson, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*domain.Lesson), args.Error(1)
}

func (r *MockLessonRepo) UpdateLessonSchedulingStatus(arg1 context.Context, arg2 database.Ext, arg3 *domain.Lesson) (*domain.Lesson, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*domain.Lesson), args.Error(1)
}

func (r *MockLessonRepo) UpdateLessonsTeachingTime(arg1 context.Context, arg2 database.Ext, arg3 []*domain.Lesson) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLessonRepo) UpdateSchedulerID(arg1 context.Context, arg2 database.Ext, arg3 []string, arg4 string) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockLessonRepo) UpdateSchedulingStatus(arg1 context.Context, arg2 database.QueryExecer, arg3 map[string]domain.LessonSchedulingStatus) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLessonRepo) UpsertLessons(arg1 context.Context, arg2 database.QueryExecer, arg3 *domain.RecurringLesson) ([]string, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]string), args.Error(1)
}
