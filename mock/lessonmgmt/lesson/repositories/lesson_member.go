// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"
	"time"

	"github.com/manabie-com/backend/internal/lessonmgmt/modules/lesson/domain"
	user_domain "github.com/manabie-com/backend/internal/lessonmgmt/modules/user/domain"
	"github.com/manabie-com/backend/internal/golibs/database"

	"github.com/stretchr/testify/mock"
	"github.com/manabie-com/backend/internal/lessonmgmt/modules/lesson/infrastructure/repo"
	"github.com/jackc/pgx/v4"
)

type MockLessonMemberRepo struct {
	mock.Mock
}

func (r *MockLessonMemberRepo) DeleteLessonMembers(arg1 context.Context, arg2 database.QueryExecer, arg3 []*domain.LessonMember) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLessonMemberRepo) DeleteLessonMembersByStartDate(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string, arg5 time.Time) ([]string, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]string), args.Error(1)
}

func (r *MockLessonMemberRepo) FindByID(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string) (*domain.LessonMember, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*domain.LessonMember), args.Error(1)
}

func (r *MockLessonMemberRepo) FindByResourcePath(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 int, arg5 int) (*domain.LessonMembers, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*domain.LessonMembers), args.Error(1)
}

func (r *MockLessonMemberRepo) GetLessonIDsByStudentCourseRemovedLocation(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string, arg5 []string) ([]string, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]string), args.Error(1)
}

func (r *MockLessonMemberRepo) GetLessonLearnersWithCourseAndNamesByLessonIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string, arg4 bool) (map[string]domain.LessonLearners, error) {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Get(0).(map[string]domain.LessonLearners), args.Error(1)
}

func (r *MockLessonMemberRepo) GetLessonMembersInLessons(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) ([]*domain.LessonMember, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*domain.LessonMember), args.Error(1)
}

func (r *MockLessonMemberRepo) GetLessonsOutOfStudentCourse(arg1 context.Context, arg2 database.QueryExecer, arg3 *user_domain.StudentSubscription) ([]string, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]string), args.Error(1)
}

func (r *MockLessonMemberRepo) InsertLessonMembers(arg1 context.Context, arg2 database.QueryExecer, arg3 []*domain.LessonMember) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLessonMemberRepo) ListStudentsByLessonArgs(arg1 context.Context, arg2 database.QueryExecer, arg3 *domain.ListStudentsByLessonArgs) ([]*domain.User, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*domain.User), args.Error(1)
}

func (r *MockLessonMemberRepo) SoftDelete(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 []string) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockLessonMemberRepo) UpdateFieldsQueue(arg1 *pgx.Batch, arg2 *domain.LessonMember, arg3 repo.UpdateLessonMemberFields) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLessonMemberRepo) UpdateLessonMemberNames(arg1 context.Context, arg2 database.QueryExecer, arg3 []*domain.UpdateLessonMemberName) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLessonMemberRepo) UpdateLessonMembers(arg1 context.Context, arg2 database.QueryExecer, arg3 []*domain.UpdateLessonMemberReport) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLessonMemberRepo) UpdateLessonMembersFields(arg1 context.Context, arg2 database.QueryExecer, arg3 []*domain.LessonMember, arg4 repo.UpdateLessonMemberFields) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}
