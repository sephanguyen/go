// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/manabie-com/backend/pkg/genproto/tom"

	upb "github.com/manabie-com/backend/pkg/manabuf/usermgmt/v2"
)

// GrpcClient is an autogenerated mock type for the GrpcClient type
type GrpcClient struct {
	mock.Mock
}

// ImportStudent provides a mock function with given fields: ctx, in, opts
func (_m *GrpcClient) ImportStudent(ctx context.Context, in *upb.ImportStudentRequest, opts ...grpc.CallOption) (*upb.ImportStudentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *upb.ImportStudentResponse
	if rf, ok := ret.Get(0).(func(context.Context, *upb.ImportStudentRequest, ...grpc.CallOption) *upb.ImportStudentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*upb.ImportStudentResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *upb.ImportStudentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PingSubscribeV2 provides a mock function with given fields: ctx, in, opts
func (_m *GrpcClient) PingSubscribeV2(ctx context.Context, in *pb.PingSubscribeV2Request, opts ...grpc.CallOption) (*pb.PingSubscribeV2Response, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.PingSubscribeV2Response
	if rf, ok := ret.Get(0).(func(context.Context, *pb.PingSubscribeV2Request, ...grpc.CallOption) *pb.PingSubscribeV2Response); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.PingSubscribeV2Response)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.PingSubscribeV2Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMessage provides a mock function with given fields: ctx, in, opts
func (_m *GrpcClient) SendMessage(ctx context.Context, in *pb.SendMessageRequest, opts ...grpc.CallOption) (*pb.SendMessageResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.SendMessageResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.SendMessageRequest, ...grpc.CallOption) *pb.SendMessageResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.SendMessageResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.SendMessageRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeV2 provides a mock function with given fields: ctx, in, opts
func (_m *GrpcClient) SubscribeV2(ctx context.Context, in *pb.SubscribeV2Request, opts ...grpc.CallOption) (pb.ChatService_SubscribeV2Client, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 pb.ChatService_SubscribeV2Client
	if rf, ok := ret.Get(0).(func(context.Context, *pb.SubscribeV2Request, ...grpc.CallOption) pb.ChatService_SubscribeV2Client); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(pb.ChatService_SubscribeV2Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.SubscribeV2Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGrpcClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewGrpcClient creates a new instance of GrpcClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGrpcClient(t mockConstructorTestingTNewGrpcClient) *GrpcClient {
	mock := &GrpcClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
