// Code generated by mockery v2.10.4. DO NOT EDIT.

package mock_services

import (
	context "context"

	epb "github.com/manabie-com/backend/pkg/manabuf/eureka/v1"
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// MockCourseReaderServiceClient is an autogenerated mock type for the MockCourseReaderServiceClient type
type MockCourseReaderServiceClient struct {
	mock.Mock
}

// ListClassByCourse provides a mock function with given fields: ctx, in, opts
func (_m *MockCourseReaderServiceClient) ListClassByCourse(ctx context.Context, in *epb.ListClassByCourseRequest, opts ...grpc.CallOption) (*epb.ListClassByCourseResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *epb.ListClassByCourseResponse
	if rf, ok := ret.Get(0).(func(context.Context, *epb.ListClassByCourseRequest, ...grpc.CallOption) *epb.ListClassByCourseResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*epb.ListClassByCourseResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *epb.ListClassByCourseRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCourseIDsByStudents provides a mock function with given fields: ctx, in, opts
func (_m *MockCourseReaderServiceClient) ListCourseIDsByStudents(ctx context.Context, in *epb.ListCourseIDsByStudentsRequest, opts ...grpc.CallOption) (*epb.ListCourseIDsByStudentsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *epb.ListCourseIDsByStudentsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *epb.ListCourseIDsByStudentsRequest, ...grpc.CallOption) *epb.ListCourseIDsByStudentsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*epb.ListCourseIDsByStudentsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *epb.ListCourseIDsByStudentsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStudentByCourse provides a mock function with given fields: ctx, in, opts
func (_m *MockCourseReaderServiceClient) ListStudentByCourse(ctx context.Context, in *epb.ListStudentByCourseRequest, opts ...grpc.CallOption) (*epb.ListStudentByCourseResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *epb.ListStudentByCourseResponse
	if rf, ok := ret.Get(0).(func(context.Context, *epb.ListStudentByCourseRequest, ...grpc.CallOption) *epb.ListStudentByCourseResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*epb.ListStudentByCourseResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *epb.ListStudentByCourseRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStudentIDsByCourse provides a mock function with given fields: ctx, in, opts
func (_m *MockCourseReaderServiceClient) ListStudentIDsByCourse(ctx context.Context, in *epb.ListStudentIDsByCourseRequest, opts ...grpc.CallOption) (*epb.ListStudentIDsByCourseResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *epb.ListStudentIDsByCourseResponse
	if rf, ok := ret.Get(0).(func(context.Context, *epb.ListStudentIDsByCourseRequest, ...grpc.CallOption) *epb.ListStudentIDsByCourseResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*epb.ListStudentIDsByCourseResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *epb.ListStudentIDsByCourseRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStudentIDsByCourseV2 provides a mock function with given fields: ctx, in, opts
func (_m *MockCourseReaderServiceClient) ListStudentIDsByCourseV2(ctx context.Context, in *epb.ListStudentIDsByCourseV2Request, opts ...grpc.CallOption) (epb.CourseReaderService_ListStudentIDsByCourseV2Client, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 epb.CourseReaderService_ListStudentIDsByCourseV2Client
	if rf, ok := ret.Get(0).(func(context.Context, *epb.ListStudentIDsByCourseV2Request, ...grpc.CallOption) epb.CourseReaderService_ListStudentIDsByCourseV2Client); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(epb.CourseReaderService_ListStudentIDsByCourseV2Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *epb.ListStudentIDsByCourseV2Request, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTopicsByStudyPlan provides a mock function with given fields: ctx, in, opts
func (_m *MockCourseReaderServiceClient) ListTopicsByStudyPlan(ctx context.Context, in *epb.ListTopicsByStudyPlanRequest, opts ...grpc.CallOption) (*epb.ListTopicsByStudyPlanResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *epb.ListTopicsByStudyPlanResponse
	if rf, ok := ret.Get(0).(func(context.Context, *epb.ListTopicsByStudyPlanRequest, ...grpc.CallOption) *epb.ListTopicsByStudyPlanResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*epb.ListTopicsByStudyPlanResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *epb.ListTopicsByStudyPlanRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveCourseStatistic provides a mock function with given fields: ctx, in, opts
func (_m *MockCourseReaderServiceClient) RetrieveCourseStatistic(ctx context.Context, in *epb.RetrieveCourseStatisticRequest, opts ...grpc.CallOption) (*epb.RetrieveCourseStatisticResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *epb.RetrieveCourseStatisticResponse
	if rf, ok := ret.Get(0).(func(context.Context, *epb.RetrieveCourseStatisticRequest, ...grpc.CallOption) *epb.RetrieveCourseStatisticResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*epb.RetrieveCourseStatisticResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *epb.RetrieveCourseStatisticRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveLOs provides a mock function with given fields: ctx, in, opts
func (_m *MockCourseReaderServiceClient) RetrieveLOs(ctx context.Context, in *epb.RetrieveLOsRequest, opts ...grpc.CallOption) (*epb.RetrieveLOsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *epb.RetrieveLOsResponse
	if rf, ok := ret.Get(0).(func(context.Context, *epb.RetrieveLOsRequest, ...grpc.CallOption) *epb.RetrieveLOsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*epb.RetrieveLOsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *epb.RetrieveLOsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}


// GetStudentsAccessPath provides a mock function with given fields: ctx, in, opts
func (_m *MockCourseReaderServiceClient) GetStudentsAccessPath(ctx context.Context, in *epb.GetStudentsAccessPathRequest, opts ...grpc.CallOption) (*epb.GetStudentsAccessPathResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *epb.GetStudentsAccessPathResponse
	if rf, ok := ret.Get(0).(func(context.Context, *epb.GetStudentsAccessPathRequest, ...grpc.CallOption) *epb.GetStudentsAccessPathResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*epb.GetStudentsAccessPathResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *epb.GetStudentsAccessPathRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
