// Code generated by mockery. DO NOT EDIT.

// This file can be generated by running: make gen-mock-repo

package mock_services

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	ypb "github.com/manabie-com/backend/pkg/manabuf/yasuo/v1"
)

// YasuoUploadModifierServiceClient is an autogenerated mock type for the YasuoUploadModifierServiceClient type
type YasuoUploadModifierServiceClient struct {
	mock.Mock
}

// BulkUploadHtmlContent provides a mock function with given fields: ctx, req, opts
func (_m *YasuoUploadModifierServiceClient) BulkUploadHtmlContent(ctx context.Context, req *ypb.BulkUploadHtmlContentRequest, opts ...grpc.CallOption) (*ypb.BulkUploadHtmlContentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ypb.BulkUploadHtmlContentResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ypb.BulkUploadHtmlContentRequest, ...grpc.CallOption) *ypb.BulkUploadHtmlContentResponse); ok {
		r0 = rf(ctx, req, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ypb.BulkUploadHtmlContentResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ypb.BulkUploadHtmlContentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, req, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadHtmlContent provides a mock function with given fields: ctx, in, opts
func (_m *YasuoUploadModifierServiceClient) UploadHtmlContent(ctx context.Context, in *ypb.UploadHtmlContentRequest, opts ...grpc.CallOption) (*ypb.UploadHtmlContentResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ypb.UploadHtmlContentResponse
	if rf, ok := ret.Get(0).(func(context.Context, *ypb.UploadHtmlContentRequest, ...grpc.CallOption) *ypb.UploadHtmlContentResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ypb.UploadHtmlContentResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *ypb.UploadHtmlContentRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewYasuoUploadModifierServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewYasuoUploadModifierServiceClient creates a new instance of YasuoUploadModifierServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewYasuoUploadModifierServiceClient(t mockConstructorTestingTNewYasuoUploadModifierServiceClient) *YasuoUploadModifierServiceClient {
	mock := &YasuoUploadModifierServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
