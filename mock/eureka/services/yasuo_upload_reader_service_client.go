// Code generated by mockery. DO NOT EDIT.

// This file can be generated by running: make gen-mock-repo

package mock_services

import (
	context "context"

	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"

	ypb "github.com/manabie-com/backend/pkg/manabuf/yasuo/v1"
)

// YasuoUploadReaderServiceClient is an autogenerated mock type for the YasuoUploadReaderServiceClient type
type YasuoUploadReaderServiceClient struct {
	mock.Mock
}

// RetrieveUploadInfo provides a mock function with given fields: ctx, in, opts
func (_m *YasuoUploadReaderServiceClient) RetrieveUploadInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ypb.RetrieveUploadInfoResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *ypb.RetrieveUploadInfoResponse
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) *ypb.RetrieveUploadInfoResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ypb.RetrieveUploadInfoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewYasuoUploadReaderServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewYasuoUploadReaderServiceClient creates a new instance of YasuoUploadReaderServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewYasuoUploadReaderServiceClient(t mockConstructorTestingTNewYasuoUploadReaderServiceClient) *YasuoUploadReaderServiceClient {
	mock := &YasuoUploadReaderServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
