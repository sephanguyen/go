// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/eureka/entities"
	"github.com/manabie-com/backend/internal/eureka/repositories"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockExamLOSubmissionRepo struct {
	mock.Mock
}

func (r *MockExamLOSubmissionRepo) BulkUpdateApproveReject(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.BulkUpdateApproveRejectArgs) (int, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(int), args.Error(1)
}

func (r *MockExamLOSubmissionRepo) Delete(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (int64, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(int64), args.Error(1)
}

func (r *MockExamLOSubmissionRepo) Get(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.GetExamLOSubmissionArgs) (*entities.ExamLOSubmission, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.ExamLOSubmission), args.Error(1)
}

func (r *MockExamLOSubmissionRepo) GetInvalidIDsByBulkApproveReject(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 pgtype.TextArray) (pgtype.TextArray, error) {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Get(0).(pgtype.TextArray), args.Error(1)
}

func (r *MockExamLOSubmissionRepo) GetLatestExamLOSubmission(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (entities.ExamLOSubmission, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entities.ExamLOSubmission), args.Error(1)
}

func (r *MockExamLOSubmissionRepo) GetLatestSubmissionID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (pgtype.Text, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(pgtype.Text), args.Error(1)
}

func (r *MockExamLOSubmissionRepo) GetTotalGradedPoint(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (pgtype.Int4, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(pgtype.Int4), args.Error(1)
}

func (r *MockExamLOSubmissionRepo) Insert(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.ExamLOSubmission) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockExamLOSubmissionRepo) List(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.ExamLOSubmissionFilter) ([]*repositories.ExtendedExamLOSubmission, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*repositories.ExtendedExamLOSubmission), args.Error(1)
}

func (r *MockExamLOSubmissionRepo) ListByStudyPlanItemIdentities(arg1 context.Context, arg2 database.QueryExecer, arg3 []*repositories.StudyPlanItemIdentity) ([]*entities.ExamLOSubmission, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.ExamLOSubmission), args.Error(1)
}

func (r *MockExamLOSubmissionRepo) ListExamLOSubmissionWithDates(arg1 context.Context, arg2 database.QueryExecer, arg3 []*repositories.StudyPlanItemIdentity) ([]*repositories.ExtendedExamLOSubmission, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*repositories.ExtendedExamLOSubmission), args.Error(1)
}

func (r *MockExamLOSubmissionRepo) ListTotalGradePoints(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*repositories.ExamLOSubmissionWithGrade, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*repositories.ExamLOSubmissionWithGrade), args.Error(1)
}

func (r *MockExamLOSubmissionRepo) Update(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.ExamLOSubmission) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockExamLOSubmissionRepo) UpdateExamSubmissionTotalPoints(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Int4) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockExamLOSubmissionRepo) UpdateExamSubmissionTotalPointsWithResult(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Int4, arg5 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Error(0)
}
