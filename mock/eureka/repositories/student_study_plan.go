// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/eureka/entities"
	"github.com/manabie-com/backend/internal/eureka/repositories"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockStudentStudyPlanRepo struct {
	mock.Mock
}

func (r *MockStudentStudyPlanRepo) BulkUpsert(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.StudentStudyPlan) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudentStudyPlanRepo) CountAssignedStudyPlanItems(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text, arg5 pgtype.Timestamptz) (int, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Get(0).(int), args.Error(1)
}

func (r *MockStudentStudyPlanRepo) CountStudentStudyPlanItems(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text, arg5 pgtype.Timestamptz, arg6 pgtype.Bool) (int, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5, arg6)
	return args.Get(0).(int), args.Error(1)
}

func (r *MockStudentStudyPlanRepo) DeleteStudentStudyPlans(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudentStudyPlanRepo) FindAllStudentStudyPlan(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 pgtype.Text) ([]*entities.StudyPlan, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudyPlan), args.Error(1)
}

func (r *MockStudentStudyPlanRepo) FindByStudentIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]string, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]string), args.Error(1)
}

func (r *MockStudentStudyPlanRepo) FindStudentStudyPlanWithCourseIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string, arg4 []string) ([]string, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]string), args.Error(1)
}

func (r *MockStudentStudyPlanRepo) GetBookIDsBelongsToStudentStudyPlan(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.TextArray) ([]string, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]string), args.Error(1)
}

func (r *MockStudentStudyPlanRepo) GetByStudyPlanStudentAndLO(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 pgtype.TextArray, arg5 pgtype.TextArray) ([]*entities.StudentStudyPlan, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudentStudyPlan), args.Error(1)
}

func (r *MockStudentStudyPlanRepo) IsStudentAssignedItem(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.TextArray) (bool, error) {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Get(0).(bool), args.Error(1)
}

func (r *MockStudentStudyPlanRepo) ListActiveStudyPlanItems(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.ListStudyPlanItemsArgs) ([]*entities.StudyPlanItem, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudyPlanItem), args.Error(1)
}

func (r *MockStudentStudyPlanRepo) ListCompletedStudyPlanItems(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.ListStudyPlanItemsArgs) ([]*entities.StudyPlanItem, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudyPlanItem), args.Error(1)
}

func (r *MockStudentStudyPlanRepo) ListOverdueStudyPlanItems(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.ListStudyPlanItemsArgs) ([]*entities.StudyPlanItem, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudyPlanItem), args.Error(1)
}

func (r *MockStudentStudyPlanRepo) ListStudentAvailableContents(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.ListStudentAvailableContentsArgs) ([]*entities.StudyPlanItem, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudyPlanItem), args.Error(1)
}

func (r *MockStudentStudyPlanRepo) ListStudyPlanItems(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.ListStudyPlanItemsArgs) ([]*entities.StudyPlanItem, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudyPlanItem), args.Error(1)
}

func (r *MockStudentStudyPlanRepo) ListStudyPlans(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.ListStudyPlansArgs) ([]*entities.StudyPlan, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudyPlan), args.Error(1)
}

func (r *MockStudentStudyPlanRepo) ListUpcomingStudyPlanItems(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.ListStudyPlanItemsArgs) ([]*entities.StudyPlanItem, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudyPlanItem), args.Error(1)
}

func (r *MockStudentStudyPlanRepo) QueueUpsertStudentStudyPlan(arg1 *pgx.Batch, arg2 *entities.StudentStudyPlan) {
	_ = r.Called(arg1, arg2)
	return
}

func (r *MockStudentStudyPlanRepo) RetrieveByStudentCourse(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 pgtype.TextArray) ([]*entities.StudentStudyPlan, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudentStudyPlan), args.Error(1)
}

func (r *MockStudentStudyPlanRepo) SoftDelete(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudentStudyPlanRepo) SoftDeleteByStudentID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
