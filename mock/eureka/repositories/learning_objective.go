// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/eureka/entities"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockLearningObjectiveRepo struct {
	mock.Mock
}

func (r *MockLearningObjectiveRepo) BulkImport(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.LearningObjective) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLearningObjectiveRepo) CountTotal(arg1 context.Context, arg2 database.QueryExecer) (*pgtype.Int8, error) {
	args := r.Called(arg1, arg2)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*pgtype.Int8), args.Error(1)
}

func (r *MockLearningObjectiveRepo) DuplicateLearningObjectives(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 pgtype.TextArray) ([]*entities.CopiedLearningObjective, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.CopiedLearningObjective), args.Error(1)
}

func (r *MockLearningObjectiveRepo) RetrieveBookLoByIntervalTime(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) ([]*entities.BookLearningObjective, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.BookLearningObjective), args.Error(1)
}

func (r *MockLearningObjectiveRepo) RetrieveByIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*entities.LearningObjective, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.LearningObjective), args.Error(1)
}

func (r *MockLearningObjectiveRepo) RetrieveByTopicIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*entities.LearningObjective, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.LearningObjective), args.Error(1)
}

func (r *MockLearningObjectiveRepo) RetrieveLearningObjectivesByTopicIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*entities.LearningObjective, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.LearningObjective), args.Error(1)
}

func (r *MockLearningObjectiveRepo) SoftDeleteWithLoIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) (int64, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(int64), args.Error(1)
}

func (r *MockLearningObjectiveRepo) UpdateDisplayOrders(arg1 context.Context, arg2 database.QueryExecer, arg3 map[pgtype.Text]pgtype.Int2) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLearningObjectiveRepo) UpdateName(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text) (int64, error) {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Get(0).(int64), args.Error(1)
}
