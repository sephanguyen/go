// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/eureka/entities"
	"github.com/manabie-com/backend/internal/eureka/repositories"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockCourseStudentRepo struct {
	mock.Mock
}

func (r *MockCourseStudentRepo) BulkUpsert(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.CourseStudent) (map[repositories.CourseStudentKey]string, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(map[repositories.CourseStudentKey]string), args.Error(1)
}

func (r *MockCourseStudentRepo) BulkUpsertV2(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.CourseStudent) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockCourseStudentRepo) FindStudentByCourseID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) ([]string, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]string), args.Error(1)
}

func (r *MockCourseStudentRepo) FindStudentTagByCourseID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) ([]*entities.StudentTag, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudentTag), args.Error(1)
}

func (r *MockCourseStudentRepo) GetByCourseStudents(arg1 context.Context, arg2 database.QueryExecer, arg3 entities.CourseStudents) (entities.CourseStudents, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entities.CourseStudents), args.Error(1)
}

func (r *MockCourseStudentRepo) RetrieveByIntervalTime(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) ([]*entities.CourseStudent, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.CourseStudent), args.Error(1)
}

func (r *MockCourseStudentRepo) SearchStudents(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.SearchStudentsFilter) (map[string][]string, []string, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Get(1).([]string), args.Error(2)
	}

	if args.Get(1) == nil {
		return nil, nil, args.Error(2)
	}
	return args.Get(0).(map[string][]string), args.Get(1).([]string), args.Error(2)
}

func (r *MockCourseStudentRepo) SoftDelete(arg1 context.Context, arg2 database.QueryExecer, arg3 []string, arg4 []string) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockCourseStudentRepo) SoftDeleteByStudentID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockCourseStudentRepo) SoftDeleteByStudentIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockCourseStudentRepo) Upsert(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.CourseStudent) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
