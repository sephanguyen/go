// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/stretchr/testify/mock"

	entities "github.com/manabie-com/backend/internal/eureka/entities/learning_history_data_sync"
	repositories "github.com/manabie-com/backend/internal/eureka/repositories/learning_history_data_sync"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockLearningHistoryDataSyncRepo struct {
	mock.Mock
}

func (r *MockLearningHistoryDataSyncRepo) BulkUpsertFailedSyncEmailRecipient(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.FailedSyncEmailRecipient) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLearningHistoryDataSyncRepo) BulkUpsertMappingCourseID(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.MappingCourseID) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLearningHistoryDataSyncRepo) BulkUpsertMappingExamLoID(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.MappingExamLoID) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLearningHistoryDataSyncRepo) BulkUpsertMappingQuestionTag(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.MappingQuestionTag) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockLearningHistoryDataSyncRepo) RetrieveFailedSyncEmailRecipient(arg1 context.Context, arg2 database.QueryExecer) ([]*entities.FailedSyncEmailRecipient, error) {
	args := r.Called(arg1, arg2)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.FailedSyncEmailRecipient), args.Error(1)
}

func (r *MockLearningHistoryDataSyncRepo) RetrieveMappingCourseID(arg1 context.Context, arg2 database.QueryExecer) ([]*entities.MappingCourseID, error) {
	args := r.Called(arg1, arg2)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.MappingCourseID), args.Error(1)
}

func (r *MockLearningHistoryDataSyncRepo) RetrieveMappingExamLoID(arg1 context.Context, arg2 database.QueryExecer) ([]*entities.MappingExamLoID, error) {
	args := r.Called(arg1, arg2)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.MappingExamLoID), args.Error(1)
}

func (r *MockLearningHistoryDataSyncRepo) RetrieveMappingQuestionTag(arg1 context.Context, arg2 database.QueryExecer) ([]*entities.MappingQuestionTag, error) {
	args := r.Called(arg1, arg2)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.MappingQuestionTag), args.Error(1)
}

func (r *MockLearningHistoryDataSyncRepo) RetrieveWithusData(arg1 context.Context, arg2 database.QueryExecer) ([]*repositories.WithusDataRow, error) {
	args := r.Called(arg1, arg2)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*repositories.WithusDataRow), args.Error(1)
}
