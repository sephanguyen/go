// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/eureka/entities"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockAssignmentStudyPlanItemRepo struct {
	mock.Mock
}

func (r *MockAssignmentStudyPlanItemRepo) BulkCopy(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.AssignmentStudyPlanItem) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockAssignmentStudyPlanItemRepo) BulkEditAssignmentTime(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 []*entities.StudyPlanItem) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockAssignmentStudyPlanItemRepo) BulkInsert(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.AssignmentStudyPlanItem) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockAssignmentStudyPlanItemRepo) BulkUpsertByStudyPlanItem(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.AssignmentStudyPlanItem) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockAssignmentStudyPlanItemRepo) CopyFromStudyPlan(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockAssignmentStudyPlanItemRepo) CountAssignment(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) (int, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(int), args.Error(1)
}

func (r *MockAssignmentStudyPlanItemRepo) EditAssignmentTime(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.TextArray, arg5 pgtype.Timestamptz, arg6 pgtype.Timestamptz) error {
	args := r.Called(arg1, arg2, arg3, arg4, arg5, arg6)
	return args.Error(0)
}

func (r *MockAssignmentStudyPlanItemRepo) FindByStudyPlanItemIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*entities.AssignmentStudyPlanItem, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.AssignmentStudyPlanItem), args.Error(1)
}

func (r *MockAssignmentStudyPlanItemRepo) SoftDeleteByAssigmentIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) (pgtype.TextArray, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(pgtype.TextArray), args.Error(1)
}
