// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/eureka/entities"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockExamLORepo struct {
	mock.Mock
}

func (r *MockExamLORepo) BulkInsert(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.ExamLO) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockExamLORepo) Get(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (*entities.ExamLO, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.ExamLO), args.Error(1)
}

func (r *MockExamLORepo) GetScores(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 pgtype.TextArray, arg5 pgtype.TextArray, arg6 pgtype.Bool) ([]*entities.ExamLoScore, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5, arg6)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.ExamLoScore), args.Error(1)
}

func (r *MockExamLORepo) Insert(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.ExamLO) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockExamLORepo) ListByIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*entities.ExamLO, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.ExamLO), args.Error(1)
}

func (r *MockExamLORepo) ListByTopicIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*entities.ExamLO, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.ExamLO), args.Error(1)
}

func (r *MockExamLORepo) ListExamLOBaseByIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*entities.ExamLOBase, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.ExamLOBase), args.Error(1)
}

func (r *MockExamLORepo) Update(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.ExamLO) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockExamLORepo) UpsertGradeBookSetting(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.GradeBookSetting) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
