// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/eureka/entities"
	"github.com/manabie-com/backend/internal/eureka/repositories"
	"github.com/manabie-com/backend/internal/golibs/database"
	sspb "github.com/manabie-com/backend/pkg/manabuf/syllabus/v1"
)

type MockStudyPlanItemRepo struct {
	mock.Mock
}

func (r *MockStudyPlanItemRepo) BulkCopy(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockStudyPlanItemRepo) BulkInsert(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.StudyPlanItem) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudyPlanItemRepo) BulkSync(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.StudyPlanItem) ([]*entities.StudyPlanItem, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudyPlanItem), args.Error(1)
}

func (r *MockStudyPlanItemRepo) BulkUpdateSchoolDate(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 pgtype.Timestamptz) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockStudyPlanItemRepo) BulkUpdateStartEndDate(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 sspb.UpdateStudyPlanItemsStartEndDateFields, arg5 pgtype.Timestamptz, arg6 pgtype.Timestamptz) (int64, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5, arg6)
	return args.Get(0).(int64), args.Error(1)
}

func (r *MockStudyPlanItemRepo) CopyItemsForCopiedStudyPlans(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.StudyPlanItem) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudyPlanItemRepo) CountStudentInStudyPlanItem(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Bool) (map[string]int, []string, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(1) == nil {
		return args.Get(0).(map[string]int), nil, args.Error(2)
	}
	return args.Get(0).(map[string]int), args.Get(1).([]string), args.Error(2)
}

func (r *MockStudyPlanItemRepo) CountStudentStudyPlanItemsInClass(arg1 context.Context, arg2 database.Ext, arg3 *repositories.CountStudentStudyPlanItemsInClassFilter) (int, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(int), args.Error(1)
}

func (r *MockStudyPlanItemRepo) DeleteStudyPlanItemsByLoIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudyPlanItemRepo) DeleteStudyPlanItemsByStudyPlans(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudyPlanItemRepo) FetchByStudyProgressRequest(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text, arg5 pgtype.Text) ([]*entities.StudyPlanItem, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudyPlanItem), args.Error(1)
}

func (r *MockStudyPlanItemRepo) FindAndSortByIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*entities.StudyPlanItem, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudyPlanItem), args.Error(1)
}

func (r *MockStudyPlanItemRepo) FindByIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*entities.StudyPlanItem, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudyPlanItem), args.Error(1)
}

func (r *MockStudyPlanItemRepo) FindByStudyPlanID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) ([]*entities.StudyPlanItem, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudyPlanItem), args.Error(1)
}

func (r *MockStudyPlanItemRepo) FindByStudyPlanIDAndTopicIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.TextArray) ([]*entities.StudyPlanItem, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudyPlanItem), args.Error(1)
}

func (r *MockStudyPlanItemRepo) FindLearningMaterialByStudyPlanID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) ([]*repositories.FindLearningMaterialByStudyPlanID, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*repositories.FindLearningMaterialByStudyPlanID), args.Error(1)
}

func (r *MockStudyPlanItemRepo) FindStudyPlanIDByItemIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) (map[string]string, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(map[string]string), args.Error(1)
}

func (r *MockStudyPlanItemRepo) FindWithFilter(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.StudyPlanItemArgs) ([]*entities.StudyPlanItem, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudyPlanItem), args.Error(1)
}

func (r *MockStudyPlanItemRepo) FindWithFilterV2(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.FilterStudyPlanItemArgs) ([]*entities.StudyPlanItem, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudyPlanItem), args.Error(1)
}

func (r *MockStudyPlanItemRepo) ListSPItemByIdentity(arg1 context.Context, arg2 database.QueryExecer, arg3 []repositories.StudyPlanItemIdentity) ([]string, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]string), args.Error(1)
}

func (r *MockStudyPlanItemRepo) MarkItemCompleted(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudyPlanItemRepo) QueueCopyStudyPlanItem(arg1 *pgx.Batch, arg2 pgtype.Text, arg3 pgtype.Text) {
	_ = r.Called(arg1, arg2, arg3)
	return
}

func (r *MockStudyPlanItemRepo) RetrieveBookIDByStudyPlanID(arg1 context.Context, arg2 database.Ext, arg3 pgtype.Text) (string, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(string), args.Error(1)
}

func (r *MockStudyPlanItemRepo) RetrieveByBookContent(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 pgtype.TextArray, arg5 pgtype.TextArray) ([]*entities.StudyPlanItem, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudyPlanItem), args.Error(1)
}

func (r *MockStudyPlanItemRepo) RetrieveChildStudyPlanItem(arg1 context.Context, arg2 database.Ext, arg3 pgtype.Text, arg4 pgtype.TextArray) (map[string]*entities.StudyPlanItem, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(map[string]*entities.StudyPlanItem), args.Error(1)
}

func (r *MockStudyPlanItemRepo) RetrieveStudyPlanContentStructuresByBooks(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) (map[string][]entities.ContentStructure, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(map[string][]entities.ContentStructure), args.Error(1)
}

func (r *MockStudyPlanItemRepo) SoftDeleteByStudyPlanItemIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudyPlanItemRepo) SoftDeleteWithStudyPlanIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudyPlanItemRepo) UnMarkItemCompleted(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudyPlanItemRepo) UpdateCompletedAtByID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Timestamptz) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockStudyPlanItemRepo) UpdateCompletedAtToNullByStudyPlanItemIdentity(arg1 context.Context, arg2 database.QueryExecer, arg3 repositories.StudyPlanItemIdentity) (int64, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(int64), args.Error(1)
}

func (r *MockStudyPlanItemRepo) UpdateSchoolDate(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 pgtype.Text, arg5 pgtype.Timestamptz) error {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Error(0)
}

func (r *MockStudyPlanItemRepo) UpdateSchoolDateByStudyPlanItemIdentity(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text, arg5 pgtype.TextArray, arg6 pgtype.Timestamptz) error {
	args := r.Called(arg1, arg2, arg3, arg4, arg5, arg6)
	return args.Error(0)
}

func (r *MockStudyPlanItemRepo) UpdateStatus(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 pgtype.Text, arg5 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Error(0)
}

func (r *MockStudyPlanItemRepo) UpdateStudyPlanItemsStatus(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 pgtype.Text) (int64, error) {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Get(0).(int64), args.Error(1)
}

func (r *MockStudyPlanItemRepo) UpdateWithCopiedFromItem(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.StudyPlanItem) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
