// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/eureka/entities"
	"github.com/manabie-com/backend/internal/eureka/repositories"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockAssignmentRepo struct {
	mock.Mock
}

func (r *MockAssignmentRepo) BulkUpsert(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.Assignment) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockAssignmentRepo) CalculateHigestScore(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*repositories.CalculateHighestScoreResponse, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*repositories.CalculateHighestScoreResponse), args.Error(1)
}

func (r *MockAssignmentRepo) CalculateTaskAssignmentHighestScore(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*repositories.CalculateHighestScoreResponse, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*repositories.CalculateHighestScoreResponse), args.Error(1)
}

func (r *MockAssignmentRepo) DuplicateAssignment(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockAssignmentRepo) GetAssignmentSetting(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (*entities.AssignmentSetting, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.AssignmentSetting), args.Error(1)
}

func (r *MockAssignmentRepo) IsStudentAssigned(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text, arg5 pgtype.Text) (bool, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Get(0).(bool), args.Error(1)
}

func (r *MockAssignmentRepo) IsStudentAssignedV2(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text) (bool, error) {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Get(0).(bool), args.Error(1)
}

func (r *MockAssignmentRepo) QueueDuplicateAssignment(arg1 *pgx.Batch, arg2 pgtype.Text, arg3 pgtype.Text) {
	_ = r.Called(arg1, arg2, arg3)
	return
}

func (r *MockAssignmentRepo) RetrieveAssignments(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*entities.Assignment, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.Assignment), args.Error(1)
}

func (r *MockAssignmentRepo) RetrieveAssignmentsByTopicIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*entities.Assignment, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.Assignment), args.Error(1)
}

func (r *MockAssignmentRepo) RetrieveBookAssignmentByIntervalTime(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) ([]*entities.BookAssignment, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.BookAssignment), args.Error(1)
}

func (r *MockAssignmentRepo) RetrieveByIntervalTime(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) ([]*entities.Assignment, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.Assignment), args.Error(1)
}

func (r *MockAssignmentRepo) SoftDelete(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockAssignmentRepo) UpdateDisplayOrders(arg1 context.Context, arg2 database.QueryExecer, arg3 map[pgtype.Text]pgtype.Int4) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
