// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/eureka/entities"
	"github.com/manabie-com/backend/internal/eureka/repositories"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockChapterRepo struct {
	mock.Mock
}

func (r *MockChapterRepo) DuplicateChapters(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 []string) ([]*entities.CopiedChapter, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.CopiedChapter), args.Error(1)
}

func (r *MockChapterRepo) FindByBookID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) (map[string]*entities.Chapter, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(map[string]*entities.Chapter), args.Error(1)
}

func (r *MockChapterRepo) FindByBookIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*entities.Chapter, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.Chapter), args.Error(1)
}

func (r *MockChapterRepo) FindByID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 ...repositories.QueryEnhancer) (*entities.Chapter, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.Chapter), args.Error(1)
}

func (r *MockChapterRepo) FindByIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) (map[string]*entities.Chapter, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(map[string]*entities.Chapter), args.Error(1)
}

func (r *MockChapterRepo) ListChapters(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.ListChaptersArgs) ([]*entities.Chapter, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.Chapter), args.Error(1)
}

func (r *MockChapterRepo) SoftDelete(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) (int, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(int), args.Error(1)
}

func (r *MockChapterRepo) UpdateCurrentTopicDisplayOrder(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Int4, arg4 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockChapterRepo) Upsert(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.Chapter) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockChapterRepo) UpsertWithoutDisplayOrderWhenUpdate(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.Chapter) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
