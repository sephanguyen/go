// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/eureka/entities"
	"github.com/manabie-com/backend/internal/eureka/repositories"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockStudentSubmissionRepo struct {
	mock.Mock
}

func (r *MockStudentSubmissionRepo) BulkUpdateStatus(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text, arg5 []*entities.StudentSubmissionGrade) error {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Error(0)
}

func (r *MockStudentSubmissionRepo) Create(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.StudentSubmission) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudentSubmissionRepo) DeleteByStudyPlanItemIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray, arg4 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockStudentSubmissionRepo) FindBySubmissionIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) (*entities.StudentSubmissions, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.StudentSubmissions), args.Error(1)
}

func (r *MockStudentSubmissionRepo) Get(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (*entities.StudentSubmission, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.StudentSubmission), args.Error(1)
}

func (r *MockStudentSubmissionRepo) List(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.StudentSubmissionFilter) (entities.StudentSubmissions, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entities.StudentSubmissions), args.Error(1)
}

func (r *MockStudentSubmissionRepo) ListV2(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.StudentSubmissionFilter) (entities.StudentSubmissions, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entities.StudentSubmissions), args.Error(1)
}

func (r *MockStudentSubmissionRepo) ListV3(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.StudentSubmissionFilter) ([]*repositories.StudentSubmissionInfo, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*repositories.StudentSubmissionInfo), args.Error(1)
}

func (r *MockStudentSubmissionRepo) ListV4(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.StudentSubmissionFilter) ([]*repositories.StudentSubmissionInfo, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*repositories.StudentSubmissionInfo), args.Error(1)
}

func (r *MockStudentSubmissionRepo) RetrieveByStudyPlanIdentities(arg1 context.Context, arg2 database.QueryExecer, arg3 []*repositories.StudyPlanItemIdentity) ([]*repositories.StudentSubmissionInfo, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*repositories.StudentSubmissionInfo), args.Error(1)
}

func (r *MockStudentSubmissionRepo) RetrieveByStudyPlanItemIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) (entities.StudentSubmissions, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(entities.StudentSubmissions), args.Error(1)
}

func (r *MockStudentSubmissionRepo) UpdateGradeStatus(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text, arg5 pgtype.Text, arg6 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3, arg4, arg5, arg6)
	return args.Error(0)
}
