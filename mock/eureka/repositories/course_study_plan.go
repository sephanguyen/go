// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/eureka/entities"
	"github.com/manabie-com/backend/internal/eureka/repositories"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockCourseStudyPlanRepo struct {
	mock.Mock
}

func (r *MockCourseStudyPlanRepo) BulkUpsert(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.CourseStudyPlan) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockCourseStudyPlanRepo) DeleteCourseStudyPlanBy(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.CourseStudyPlan) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockCourseStudyPlanRepo) FindByCourseIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*entities.CourseStudyPlan, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.CourseStudyPlan), args.Error(1)
}

func (r *MockCourseStudyPlanRepo) ListCourseStatisticItems(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.ListCourseStatisticItemsArgs) ([]*repositories.CourseStatisticItem, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*repositories.CourseStatisticItem), args.Error(1)
}

func (r *MockCourseStudyPlanRepo) ListCourseStatisticItemsV2(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.ListCourseStatisticItemsArgsV2) ([]*repositories.CourseStatisticItemV2, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*repositories.CourseStatisticItemV2), args.Error(1)
}

func (r *MockCourseStudyPlanRepo) ListCourseStatisticV3(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.ListCourseStatisticItemsArgsV3) ([]*repositories.TopicStatistic, []*repositories.LearningMaterialStatistic, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Get(1).([]*repositories.LearningMaterialStatistic), args.Error(2)
	}

	if args.Get(1) == nil {
		return nil, nil, args.Error(2)
	}
	return args.Get(0).([]*repositories.TopicStatistic), args.Get(1).([]*repositories.LearningMaterialStatistic), args.Error(2)
}

func (r *MockCourseStudyPlanRepo) ListCourseStatisticV4(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.ListCourseStatisticItemsArgsV3) ([]*repositories.TopicStatistic, []*repositories.LearningMaterialStatistic, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Get(1).([]*repositories.LearningMaterialStatistic), args.Error(2)
	}

	if args.Get(1) == nil {
		return nil, nil, args.Error(2)
	}
	return args.Get(0).([]*repositories.TopicStatistic), args.Get(1).([]*repositories.LearningMaterialStatistic), args.Error(2)
}

func (r *MockCourseStudyPlanRepo) ListCourseStudyPlans(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.ListCourseStudyPlansArgs) ([]*entities.CourseStudyPlan, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.CourseStudyPlan), args.Error(1)
}

func (r *MockCourseStudyPlanRepo) QueueUpsertCourseStudyPlan(arg1 *pgx.Batch, arg2 *entities.CourseStudyPlan) {
	_ = r.Called(arg1, arg2)
	return
}
