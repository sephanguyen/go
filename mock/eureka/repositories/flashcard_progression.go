// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/eureka/entities"
	"github.com/manabie-com/backend/internal/eureka/repositories"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockFlashcardProgressionRepo struct {
	mock.Mock
}

func (r *MockFlashcardProgressionRepo) Create(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.FlashcardProgression) (pgtype.Text, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(pgtype.Text), args.Error(1)
}

func (r *MockFlashcardProgressionRepo) DeleteByStudySetID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockFlashcardProgressionRepo) Get(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.GetFlashcardProgressionArgs) (*entities.FlashcardProgression, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.FlashcardProgression), args.Error(1)
}

func (r *MockFlashcardProgressionRepo) GetByStudySetID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (*entities.FlashcardProgression, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.FlashcardProgression), args.Error(1)
}

func (r *MockFlashcardProgressionRepo) GetByStudySetIDAndStudentID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text) (*entities.FlashcardProgression, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.FlashcardProgression), args.Error(1)
}

func (r *MockFlashcardProgressionRepo) GetLastFlashcardProgression(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.Text, arg5 pgtype.Text, arg6 pgtype.Bool) (*entities.FlashcardProgression, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5, arg6)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.FlashcardProgression), args.Error(1)
}

func (r *MockFlashcardProgressionRepo) GetLastFlashcardProgressionV2(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.StudyPlanItemIdentity, arg4 pgtype.Bool) (*entities.FlashcardProgression, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.FlashcardProgression), args.Error(1)
}

func (r *MockFlashcardProgressionRepo) UpdateCompletedAt(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockFlashcardProgressionRepo) Upsert(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.FlashcardProgression) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
