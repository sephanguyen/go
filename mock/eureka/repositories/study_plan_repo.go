// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/eureka/entities"
	"github.com/manabie-com/backend/internal/eureka/repositories"
	"github.com/manabie-com/backend/internal/golibs/database"
)

type MockStudyPlanRepo struct {
	mock.Mock
}

func (r *MockStudyPlanRepo) BulkCopy(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]string, []string, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Get(1).([]string), args.Error(2)
	}

	if args.Get(1) == nil {
		return nil, nil, args.Error(2)
	}
	return args.Get(0).([]string), args.Get(1).([]string), args.Error(2)
}

func (r *MockStudyPlanRepo) BulkUpdateBook(arg1 context.Context, arg2 database.QueryExecer, arg3 []*repositories.StudyPlanBook) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudyPlanRepo) BulkUpdateByMaster(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.StudyPlan) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudyPlanRepo) BulkUpsert(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.StudyPlan) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudyPlanRepo) FindByID(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) (*entities.StudyPlan, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.StudyPlan), args.Error(1)
}

func (r *MockStudyPlanRepo) FindByIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*entities.StudyPlan, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudyPlan), args.Error(1)
}

func (r *MockStudyPlanRepo) FindDependStudyPlan(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]string, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]string), args.Error(1)
}

func (r *MockStudyPlanRepo) Insert(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.StudyPlan) (pgtype.Text, error) {
	args := r.Called(arg1, arg2, arg3)
	return args.Get(0).(pgtype.Text), args.Error(1)
}

func (r *MockStudyPlanRepo) ListIndividualStudyPlanItems(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.ListIndividualStudyPlanArgs) ([]*repositories.IndividualStudyPlanItem, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*repositories.IndividualStudyPlanItem), args.Error(1)
}

func (r *MockStudyPlanRepo) ListStudentStudyPlans(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.ListStudentStudyPlansArgs) ([]*repositories.StudentStudyPlan, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*repositories.StudentStudyPlan), args.Error(1)
}

func (r *MockStudyPlanRepo) ListStudentToDoItem(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.ListStudentToDoItemArgs) ([]*repositories.StudentStudyPlanItem, []*repositories.TopicProgress, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Get(1).([]*repositories.TopicProgress), args.Error(2)
	}

	if args.Get(1) == nil {
		return nil, nil, args.Error(2)
	}
	return args.Get(0).([]*repositories.StudentStudyPlanItem), args.Get(1).([]*repositories.TopicProgress), args.Error(2)
}

func (r *MockStudyPlanRepo) QueueBulkCopy(arg1 *pgx.Batch, arg2 pgtype.Text) {
	_ = r.Called(arg1, arg2)
	return
}

func (r *MockStudyPlanRepo) QueueUpsertStudyPlan(arg1 *pgx.Batch, arg2 *entities.StudyPlan) {
	_ = r.Called(arg1, arg2)
	return
}

func (r *MockStudyPlanRepo) RecursiveSoftDeleteStudyPlanByStudyPlanIDInCourse(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text) ([]string, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]string), args.Error(1)
}

func (r *MockStudyPlanRepo) RetrieveByBookIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*entities.StudyPlan, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudyPlan), args.Error(1)
}

func (r *MockStudyPlanRepo) RetrieveByCourseID(arg1 context.Context, arg2 database.QueryExecer, arg3 *repositories.RetrieveStudyPlanByCourseArgs) ([]*entities.StudyPlan, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudyPlan), args.Error(1)
}

func (r *MockStudyPlanRepo) RetrieveCombineStudent(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*entities.StudyPlanCombineStudentID, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudyPlanCombineStudentID), args.Error(1)
}

func (r *MockStudyPlanRepo) RetrieveMasterByBookIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*entities.StudyPlan, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudyPlan), args.Error(1)
}

func (r *MockStudyPlanRepo) RetrieveMasterByCourseIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.Text, arg4 pgtype.TextArray) ([]*entities.StudyPlan, error) {
	args := r.Called(arg1, arg2, arg3, arg4)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudyPlan), args.Error(1)
}

func (r *MockStudyPlanRepo) RetrieveStudyPlanIdentity(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) ([]*repositories.RetrieveStudyPlanIdentityResponse, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*repositories.RetrieveStudyPlanIdentityResponse), args.Error(1)
}

func (r *MockStudyPlanRepo) RetrieveStudyPlanItemInfo(arg1 context.Context, arg2 database.QueryExecer, arg3 repositories.StudyPlanItemInfoArgs) ([]*repositories.StudyPlanItemInfo, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*repositories.StudyPlanItemInfo), args.Error(1)
}

func (r *MockStudyPlanRepo) SoftDelete(arg1 context.Context, arg2 database.QueryExecer, arg3 pgtype.TextArray) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
