// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/invoicemgmt/entities"
)

type MockStudentPaymentDetailRepo struct {
	mock.Mock
}

func (r *MockStudentPaymentDetailRepo) FindByID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) (*entities.StudentPaymentDetail, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.StudentPaymentDetail), args.Error(1)
}

func (r *MockStudentPaymentDetailRepo) FindByStudentID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) (*entities.StudentPaymentDetail, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.StudentPaymentDetail), args.Error(1)
}

func (r *MockStudentPaymentDetailRepo) FindFromInvoiceIDTempTable(arg1 context.Context, arg2 database.QueryExecer) ([]*entities.StudentPaymentDetail, error) {
	args := r.Called(arg1, arg2)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudentPaymentDetail), args.Error(1)
}

func (r *MockStudentPaymentDetailRepo) FindStudentBankDetailsByStudentIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) ([]*entities.StudentBankDetailsMap, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudentBankDetailsMap), args.Error(1)
}

func (r *MockStudentPaymentDetailRepo) FindStudentBillingByStudentIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) ([]*entities.StudentBillingDetailsMap, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.StudentBillingDetailsMap), args.Error(1)
}

func (r *MockStudentPaymentDetailRepo) SoftDelete(arg1 context.Context, arg2 database.QueryExecer, arg3 ...string) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockStudentPaymentDetailRepo) Upsert(arg1 context.Context, arg2 database.QueryExecer, arg3 ...*entities.StudentPaymentDetail) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}
