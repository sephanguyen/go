// Code generated by mockgen. DO NOT EDIT.
package mock_repositories

import (
	"context"

	"github.com/stretchr/testify/mock"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/invoicemgmt/entities"
)

type MockPaymentRepo struct {
	mock.Mock
}

func (r *MockPaymentRepo) CountOtherPaymentsByBulkPaymentIDNotInStatus(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 string, arg5 string) (int, error) {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Get(0).(int), args.Error(1)
}

func (r *MockPaymentRepo) Create(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.Payment) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockPaymentRepo) CreateMultiple(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.Payment) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockPaymentRepo) FindAllByBulkPaymentID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) ([]*entities.Payment, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.Payment), args.Error(1)
}

func (r *MockPaymentRepo) FindByPaymentID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) (*entities.Payment, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.Payment), args.Error(1)
}

func (r *MockPaymentRepo) FindByPaymentIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) ([]*entities.Payment, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.Payment), args.Error(1)
}

func (r *MockPaymentRepo) FindByPaymentSequenceNumber(arg1 context.Context, arg2 database.QueryExecer, arg3 int) (*entities.Payment, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.Payment), args.Error(1)
}

func (r *MockPaymentRepo) FindPaymentInvoiceByIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string) ([]*entities.PaymentInvoiceMap, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.PaymentInvoiceMap), args.Error(1)
}

func (r *MockPaymentRepo) FindPaymentInvoiceUserFromTempTable(arg1 context.Context, arg2 database.QueryExecer) ([]*entities.PaymentInvoiceUserMap, error) {
	args := r.Called(arg1, arg2)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).([]*entities.PaymentInvoiceUserMap), args.Error(1)
}

func (r *MockPaymentRepo) GetLatestPaymentDueDateByInvoiceID(arg1 context.Context, arg2 database.QueryExecer, arg3 string) (*entities.Payment, error) {
	args := r.Called(arg1, arg2, arg3)

	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*entities.Payment), args.Error(1)
}

func (r *MockPaymentRepo) GetLatestPaymentSequenceNumber(arg1 context.Context, arg2 database.QueryExecer) (int32, error) {
	args := r.Called(arg1, arg2)
	return args.Get(0).(int32), args.Error(1)
}

func (r *MockPaymentRepo) InsertPaymentNumbersTempTable(arg1 context.Context, arg2 database.QueryExecer, arg3 []int) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockPaymentRepo) PaymentSeqNumberLockAdvisory(arg1 context.Context, arg2 database.QueryExecer) (bool, error) {
	args := r.Called(arg1, arg2)
	return args.Get(0).(bool), args.Error(1)
}

func (r *MockPaymentRepo) PaymentSeqNumberUnLockAdvisory(arg1 context.Context, arg2 database.QueryExecer) error {
	args := r.Called(arg1, arg2)
	return args.Error(0)
}

func (r *MockPaymentRepo) Update(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.Payment) error {
	args := r.Called(arg1, arg2, arg3)
	return args.Error(0)
}

func (r *MockPaymentRepo) UpdateIsExportedByPaymentIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string, arg4 bool) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockPaymentRepo) UpdateIsExportedByPaymentRequestFileID(arg1 context.Context, arg2 database.QueryExecer, arg3 string, arg4 bool) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockPaymentRepo) UpdateMultipleWithFields(arg1 context.Context, arg2 database.QueryExecer, arg3 []*entities.Payment, arg4 []string) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}

func (r *MockPaymentRepo) UpdateStatusAndAmountByPaymentIDs(arg1 context.Context, arg2 database.QueryExecer, arg3 []string, arg4 string, arg5 float64) error {
	args := r.Called(arg1, arg2, arg3, arg4, arg5)
	return args.Error(0)
}

func (r *MockPaymentRepo) UpdateWithFields(arg1 context.Context, arg2 database.QueryExecer, arg3 *entities.Payment, arg4 []string) error {
	args := r.Called(arg1, arg2, arg3, arg4)
	return args.Error(0)
}
