// Code generated by mockery. DO NOT EDIT.

// This file can be generated by running: make gen-mock-repo

package mock_filestorage

import (
	context "context"

	filestorage "github.com/manabie-com/backend/internal/invoicemgmt/services/filestorage"
	mock "github.com/stretchr/testify/mock"
)

// FileStorage is an autogenerated mock type for the FileStorage type
type FileStorage struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *FileStorage) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DownloadFile provides a mock function with given fields: ctx, fileDownloadInfo
func (_m *FileStorage) DownloadFile(ctx context.Context, fileDownloadInfo filestorage.FileToDownloadInfo) error {
	ret := _m.Called(ctx, fileDownloadInfo)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, filestorage.FileToDownloadInfo) error); ok {
		r0 = rf(ctx, fileDownloadInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FormatObjectName provides a mock function with given fields: _a0
func (_m *FileStorage) FormatObjectName(_a0 string) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetDownloadURL provides a mock function with given fields: objectName
func (_m *FileStorage) GetDownloadURL(objectName string) string {
	ret := _m.Called(objectName)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(objectName)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// UploadFile provides a mock function with given fields: ctx, fileUploadInfo
func (_m *FileStorage) UploadFile(ctx context.Context, fileUploadInfo filestorage.FileToUploadInfo) error {
	ret := _m.Called(ctx, fileUploadInfo)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, filestorage.FileToUploadInfo) error); ok {
		r0 = rf(ctx, fileUploadInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewFileStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewFileStorage creates a new instance of FileStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFileStorage(t mockConstructorTestingTNewFileStorage) *FileStorage {
	mock := &FileStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
