name: "auth-oidc"
description: "Authenticate to Google Cloud by oidc"
inputs:
  organization:
    description: "Organization (partner)"
    required: true
    default: "manabie"
  environment:
    description: "Environment (stag/staging, uat, prod/production)"
    required: true
    default: "stag"
  platform:
    description: "Platform service name. If provided, it checks if this env/org has this platform service enabled."
    required: false
    default: ""
  workload_identity_provider: 
    description: |
      Workload identity provider to use. If not specified, the value inside 
      `get-deployment-configuration.js` will be used.
      Example: projects/456005132078/locations/global/workloadIdentityPools/gh-action-pool/providers/gh-action-provider
    required: false
    default: ""
  service_account:
    description: |
      Google Cloud service account to use. If not specified, the service account (usually
      the deploy bot) from `get-deployment-configuration.js` will be used.
      Example: stag-deploy-bot@staging-manabie-online.iam.gserviceaccount.com
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Get deployment configuration
      uses: actions/github-script@v6
      with:
        script: |
          const { normalizeEnvironmentString } = require('./.github/scripts/utils.js');
          const getDeploymentConfiguration = require('./.github/scripts/get-deployment-configuration.js');

          const organization = '${{ inputs.organization }}';
          const environment = normalizeEnvironmentString('${{ inputs.environment }}');
          const platformService = '${{ inputs.platform }}';
          const c = await getDeploymentConfiguration({
            organization: organization,
            environment: environment,
          })
          if (!c) {
            throw new Error(`No configuration found for ${environment}.${organization}`)
          }

          if (platformService != "" && !c.platformServices.includes(platformService)) {
            throw new Error(`No ${platformService} deployment configuration found for ${environment}.${organization}`)
          }

          console.log('Configuration found:', c);
          core.exportVariable('PROJECT_ID', c.projectId);
          core.exportVariable('CLUSTER', c.cluster);

          let location = c.region
          core.exportVariable('REGION', c.region);
          if (c.zone) {
            core.exportVariable('ZONE', c.zone);
            location = c.zone
          }
          core.exportVariable('ENV', c.environment);
          core.exportVariable('ORG', c.organization);
          core.exportVariable('LOCATION', location);
          core.exportVariable('SA', c.deployServiceAccount);
          core.exportVariable('PROVIDER', c.provider);
          core.exportVariable('NAMESPACE', c.namespace);
          core.exportVariable('SERVICE_ACCOUNT_EMAIL_SUFFIX', c.serviceAccountEmailSuffix);

          if ('${{ inputs.workload_identity_provider }}' != "") {
            core.exportVariable('PROVIDER', '${{ inputs.workload_identity_provider }}');
          }

          if ('${{ inputs.service_account }}' != "") {
            core.exportVariable('SA', '${{ inputs.service_account }}');
          }

    - name: Authenticate to Google Cloud by oidc
      uses: google-github-actions/auth@v1
      with:
        workload_identity_provider: ${{ env.PROVIDER }}
        service_account : ${{ env.SA }}
