syntax = "proto3";

package manabie.tom;

import "tomenum.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.goproto_registration) = true;
option go_package = "github.com/manabie-com/backend/pkg/genproto/tom;pb";

// this message only for server
// message broker from bob
message AssignToCoachRequest {
  string coach_id = 1;
  string student_id = 2;
}

message SendMessageRequest {
  string conversation_id = 1;
  string message = 2;
  string url_media = 3;
  MessageType type = 4;
  string local_message_id = 5;
  // use for message system
  string target_user = 6;
}

message SendMessageResponse {
  string message_id = 1;
  string local_message_id = 2;
}

message MessageResponse {
  string message_id = 1;
  string conversation_id = 2;
  string user_id = 3;
  // may be contain CodesMessageType if MessageType == event or button
  string content = 4;
  string url_media = 5;
  MessageType type = 6;
  google.protobuf.Timestamp created_at = 7;
  string local_message_id = 8;
  string target_user = 9;
  bool is_deleted = 10;
  string deleted_by = 11;
  string conversation_name = 12;
}

message SeenMessageRequest { string conversation_id = 1; }

message SeenMessageResponse {}

message SubscribeRequest {}

message SubscribeResponse {
  oneof event { MessageResponse messageResponse = 1; }
}

// only for server
message InternalSendMessageRequest {
  message UserIDs { repeated string ids = 1; }
  map<string, UserIDs> node_receive = 1;
  Event event = 2;
}

message ConversationListRequest {
  // total message return
  uint32 limit = 1;
  // time of last conversation
  google.protobuf.Timestamp end_at = 2;
  // optionals
  uint32 class_id = 3;
}

message Conversation {
  message User {
    string id = 1;
    string group = 2;
    bool is_present = 3;
    google.protobuf.Timestamp seen_at = 4;
  }

  string conversation_id = 1;
  string coach_id = 2 [ deprecated = true ];
  string student_id = 3;
  repeated string guest_ids = 4 [ deprecated = true ];
  bool seen = 5;
  MessageResponse last_message = 6;
  string tutor_id = 7 [ deprecated = true ];
  string student_question_id = 8 [deprecated=true];
  ConversationStatus status = 9;
  repeated string previous_coach_ids = 10 [ deprecated = true ];
  repeated User users = 11;
  uint32 class_id = 12 [deprecated=true];
  ConversationType conversation_type = 13;
  string conversation_name = 14;
}

message ConversationListResponse { repeated Conversation conversations = 1; }

message ConversationByStudentQuestionRequest {
  repeated string student_question_ids = 1;
}

message ConversationByStudentQuestionResponse {
  repeated Conversation conversations = 1;
}

message ConversationByClassRequest {
  // total message return
  uint32 limit = 1;
  // time of last conversation
  google.protobuf.Timestamp end_at = 2;
  uint32 class_id = 3;
}

message ConversationByClassResponse { repeated Conversation conversations = 1; }

message ConversationDetailRequest {
  string conversation_id = 1;
  // total message return
  uint32 limit = 2;
  // time of last message
  google.protobuf.Timestamp end_at = 3;

  message Include { repeated CodesMessageType types = 1; } 
  message Exclude { repeated CodesMessageType types = 1; }
  oneof message_type {
    Include include = 4 [deprecated = true];
    Exclude exclude = 5 [deprecated = true];
  }  
}

message ConversationDetailResponse { repeated MessageResponse messages = 1; }

message PushedNotificationMessage {
  string title = 1;
  string body = 2;
  google.protobuf.Struct data = 3;
  google.protobuf.Timestamp pushed_at = 4;
}

message RetrievePushedNotificationMessageRequest {
  string device_token = 1;
  int32 limit = 2;
  google.protobuf.Timestamp since = 3;
}

message RetrievePushedNotificationMessageResponse {
  repeated PushedNotificationMessage messages = 1;
}

message AutoCoachCustomMessageRequest {
  string message = 1;
  string url_media = 2;
}

message AutoCoachCustomMessageResponse { bool successful = 1; }

message GetConversationRequest {
  string conversation_id = 1; 
  string user_id = 2 [deprecated=true];
  uint32 class_id = 3 [deprecated=true];
}

message GetConversationResponse { Conversation conversation = 1; }

message TotalUserInConversationRequest {
  string conversation_id = 1; // optional, if nil will use 2 field below
  string lesson_id = 2;
}

message TotalUserInConversationResponse { uint32 total_user = 1; }

message ConversationByLessonRequest {
  // total message return
  uint32 limit = 1;
  // time of last conversation
  google.protobuf.Timestamp end_at = 2;
  string lesson_id = 3;
}

message ConversationByLessonResponse {
  repeated Conversation conversations = 1;
}

message TeacherProhibitAllStudentToChatRequest { string conversation_id = 1; }
message TeacherProhibitAllStudentToChatResponse {}

message TeacherAllowAllStudentToChatRequest { string conversation_id = 1; }
message TeacherAllowAllStudentToChatResponse {}

message TeacherAllowStudentToSpeakRequest {
  string student_id = 1;
  string conversation_id = 2;
}

message TeacherAllowStudentToSpeakResponse {}

message TeacherProhibitStudentToSpeakRequest {
  string student_id = 1;
  string conversation_id = 2;
}

message TeacherProhibitStudentToSpeakResponse {}

message StudentRaiseHandRequest { string conversation_id = 1; }

message StudentRaiseHandResponse {}

message DeleteMessageRequest { string message_id = 1; }

message DeleteMessageResponse {}

message EventPing { string session_id = 1; }

message StreamingEventRequest {
  oneof event {
    // ping pong
    EventPing event_ping = 1;
  }
}

message StreamingEventResponse {
  message EventDeleteMessage {
    string conversation_id = 1;
    string message_id = 2;
    string deleted_by = 3;
  }

  oneof event {
    MessageResponse event_new_message = 1;
    EventDeleteMessage event_delete_message = 2;
    EventPing event_ping = 3;
  }
}

message StudentPutHandDownRequest { string conversation_id = 1; }

message StudentPutHandDownResponse {}

message ConversationEvent {
  string conversation_event_id = 1;
  string conversation_id = 2;
  string user_id = 3;
  ConversationEventType event_type = 4;
  ConversationEventStatus status = 5;
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp updated_at = 7;
}

message RetrieveConversationEventsRequest {
  string conversation_id = 1;
  ConversationEventType event_type = 2;
  ConversationEventStatus status = 3;
}

message RetrieveConversationEventsResponse {
  repeated ConversationEvent conversation_events = 1;
}

message StudentAcceptToSpeakRequest { string conversation_id = 1; }

message StudentAcceptToSpeakResponse {}

message StudentDeclineToSpeakRequest { string conversation_id = 1; }

message StudentDeclineToSpeakResponse {}

message PingSubscribeV2Request { string session_id = 1; }

message PingSubscribeV2Response {}

message SubscribeV2Request {}

message Event {
  message EventDeleteMessage {
    string conversation_id = 1;
    string message_id = 2;
    string deleted_by = 3;
  }

  oneof event {
    MessageResponse event_new_message = 1;
    EventDeleteMessage event_delete_message = 2;
    EventPing event_ping = 3;
  }
}

message SubscribeV2Response { Event event = 1; }

service ChatService {
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse) {}

  rpc SeenMessage(SeenMessageRequest) returns (SeenMessageResponse) {}

  rpc ConversationList(ConversationListRequest)
      returns (ConversationListResponse) {}

  rpc ConversationDetail(ConversationDetailRequest)
      returns (ConversationDetailResponse) {}

  rpc RetrievePushedNotificationMessages(
      RetrievePushedNotificationMessageRequest)
      returns (RetrievePushedNotificationMessageResponse);

  rpc SubscribeV2(SubscribeV2Request) returns (stream SubscribeV2Response) {};

  rpc PingSubscribeV2(PingSubscribeV2Request)
      returns (PingSubscribeV2Response) {};
    
  rpc GetConversation(GetConversationRequest) returns (GetConversationResponse);

  //  Deprecated functions
  rpc Subscribe(SubscribeRequest) returns (stream SubscribeResponse) {
      option deprecated = true;
  }
  
  rpc ConversationByStudentQuestion(ConversationByStudentQuestionRequest)
      returns (ConversationByStudentQuestionResponse) {}
  
  rpc AutoCoachCustomMessage(AutoCoachCustomMessageRequest)
      returns (AutoCoachCustomMessageResponse) {
          option deprecated = true;
      };

  rpc ConversationByClass(ConversationByClassRequest)
      returns (ConversationByClassResponse) {
        option deprecated = true;
      }

  rpc TotalUserInConversation(TotalUserInConversationRequest)
      returns (TotalUserInConversationResponse) {
        option deprecated = true;
      };

  rpc ConversationByLesson(ConversationByLessonRequest)
      returns (ConversationByLessonResponse) {
        option deprecated = true;
      };

  rpc TeacherAllowStudentToSpeak(TeacherAllowStudentToSpeakRequest)
      returns (TeacherAllowStudentToSpeakResponse) {
        option deprecated = true;
      };

  rpc TeacherProhibitStudentToSpeak(TeacherProhibitStudentToSpeakRequest)
      returns (TeacherProhibitStudentToSpeakResponse) {
        option deprecated = true;
      };

  rpc StudentRaiseHand(StudentRaiseHandRequest)
      returns (StudentRaiseHandResponse) {
        option deprecated = true;
      };

  rpc StudentPutHandDown(StudentPutHandDownRequest)
      returns (StudentPutHandDownResponse) {
        option deprecated = true;
      };

  rpc StudentAcceptToSpeak(StudentAcceptToSpeakRequest)
      returns (StudentAcceptToSpeakResponse) {
        option deprecated = true;
      };

  rpc StudentDeclineToSpeak(StudentDeclineToSpeakRequest)
      returns (StudentDeclineToSpeakResponse) {
        option deprecated = true;
      };

  rpc TeacherProhibitAllStudentToChat(TeacherProhibitAllStudentToChatRequest)
      returns (TeacherProhibitAllStudentToChatResponse) {
        option deprecated = true;
      };

  rpc TeacherAllowAllStudentToChat(TeacherAllowAllStudentToChatRequest)
      returns (TeacherAllowAllStudentToChatResponse) {
        option deprecated = true;
      };

  rpc RetrieveConversationEvents(RetrieveConversationEventsRequest)
      returns (RetrieveConversationEventsResponse) {
        option deprecated = true;
      };
  rpc DeleteMessage(DeleteMessageRequest) returns (DeleteMessageResponse) {
    option deprecated = true;
  };

  rpc StreamingEvent(stream StreamingEventRequest)
      returns (stream StreamingEventResponse) {
    option deprecated = true;
  };
}
