// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: courses.proto

package pb

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RetrieveStudentSubmissionsRequest_SubmissionOrderType int32

const (
	SUBMISSION_ORDER_TYPE_NONE  RetrieveStudentSubmissionsRequest_SubmissionOrderType = 0
	SUBMISSION_ORDER_TYPE_FIRST RetrieveStudentSubmissionsRequest_SubmissionOrderType = 1
	SUBMISSION_ORDER_TYPE_LAST  RetrieveStudentSubmissionsRequest_SubmissionOrderType = 2
)

var RetrieveStudentSubmissionsRequest_SubmissionOrderType_name = map[int32]string{
	0: "SUBMISSION_ORDER_TYPE_NONE",
	1: "SUBMISSION_ORDER_TYPE_FIRST",
	2: "SUBMISSION_ORDER_TYPE_LAST",
}

var RetrieveStudentSubmissionsRequest_SubmissionOrderType_value = map[string]int32{
	"SUBMISSION_ORDER_TYPE_NONE":  0,
	"SUBMISSION_ORDER_TYPE_FIRST": 1,
	"SUBMISSION_ORDER_TYPE_LAST":  2,
}

func (RetrieveStudentSubmissionsRequest_SubmissionOrderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{40, 0}
}

type AssignmentSubmission struct {
	SubmissionId string           `protobuf:"bytes,1,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"`
	TopicId      string           `protobuf:"bytes,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	StudentId    string           `protobuf:"bytes,4,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	Content      string           `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	Attachments  []*Attachment    `protobuf:"bytes,6,rep,name=attachments,proto3" json:"attachments,omitempty"`
	CreatedAt    *types.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *AssignmentSubmission) Reset()      { *m = AssignmentSubmission{} }
func (*AssignmentSubmission) ProtoMessage() {}
func (*AssignmentSubmission) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{0}
}
func (m *AssignmentSubmission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssignmentSubmission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssignmentSubmission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssignmentSubmission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignmentSubmission.Merge(m, src)
}
func (m *AssignmentSubmission) XXX_Size() int {
	return m.Size()
}
func (m *AssignmentSubmission) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignmentSubmission.DiscardUnknown(m)
}

var xxx_messageInfo_AssignmentSubmission proto.InternalMessageInfo

func (m *AssignmentSubmission) GetSubmissionId() string {
	if m != nil {
		return m.SubmissionId
	}
	return ""
}

func (m *AssignmentSubmission) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

func (m *AssignmentSubmission) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *AssignmentSubmission) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *AssignmentSubmission) GetAttachments() []*Attachment {
	if m != nil {
		return m.Attachments
	}
	return nil
}

func (m *AssignmentSubmission) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type ListSubmissionsRequest struct {
	TopicId    string             `protobuf:"bytes,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	StudentIds []string           `protobuf:"bytes,2,rep,name=student_ids,json=studentIds,proto3" json:"student_ids,omitempty"`
	Limit      int32              `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	OffsetId   *types.StringValue `protobuf:"bytes,4,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
}

func (m *ListSubmissionsRequest) Reset()      { *m = ListSubmissionsRequest{} }
func (*ListSubmissionsRequest) ProtoMessage() {}
func (*ListSubmissionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{1}
}
func (m *ListSubmissionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSubmissionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSubmissionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSubmissionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSubmissionsRequest.Merge(m, src)
}
func (m *ListSubmissionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListSubmissionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSubmissionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListSubmissionsRequest proto.InternalMessageInfo

func (m *ListSubmissionsRequest) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

func (m *ListSubmissionsRequest) GetStudentIds() []string {
	if m != nil {
		return m.StudentIds
	}
	return nil
}

func (m *ListSubmissionsRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListSubmissionsRequest) GetOffsetId() *types.StringValue {
	if m != nil {
		return m.OffsetId
	}
	return nil
}

type ListSubmissionsResponse struct {
	Submissions []*AssignmentSubmission `protobuf:"bytes,1,rep,name=submissions,proto3" json:"submissions,omitempty"`
}

func (m *ListSubmissionsResponse) Reset()      { *m = ListSubmissionsResponse{} }
func (*ListSubmissionsResponse) ProtoMessage() {}
func (*ListSubmissionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{2}
}
func (m *ListSubmissionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSubmissionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSubmissionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSubmissionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSubmissionsResponse.Merge(m, src)
}
func (m *ListSubmissionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListSubmissionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSubmissionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListSubmissionsResponse proto.InternalMessageInfo

func (m *ListSubmissionsResponse) GetSubmissions() []*AssignmentSubmission {
	if m != nil {
		return m.Submissions
	}
	return nil
}

type Attachment struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Url  string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *Attachment) Reset()      { *m = Attachment{} }
func (*Attachment) ProtoMessage() {}
func (*Attachment) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{3}
}
func (m *Attachment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Attachment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Attachment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Attachment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attachment.Merge(m, src)
}
func (m *Attachment) XXX_Size() int {
	return m.Size()
}
func (m *Attachment) XXX_DiscardUnknown() {
	xxx_messageInfo_Attachment.DiscardUnknown(m)
}

var xxx_messageInfo_Attachment proto.InternalMessageInfo

func (m *Attachment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Attachment) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type ListTopicRequest struct {
	Country   Country   `protobuf:"varint,1,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"`
	Grade     string    `protobuf:"bytes,2,opt,name=grade,proto3" json:"grade,omitempty"`
	Subject   Subject   `protobuf:"varint,3,opt,name=subject,proto3,enum=manabie.bob.Subject" json:"subject,omitempty"`
	TopicType TopicType `protobuf:"varint,4,opt,name=topic_type,json=topicType,proto3,enum=manabie.bob.TopicType" json:"topic_type,omitempty"`
}

func (m *ListTopicRequest) Reset()      { *m = ListTopicRequest{} }
func (*ListTopicRequest) ProtoMessage() {}
func (*ListTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{4}
}
func (m *ListTopicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTopicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTopicRequest.Merge(m, src)
}
func (m *ListTopicRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTopicRequest proto.InternalMessageInfo

func (m *ListTopicRequest) GetCountry() Country {
	if m != nil {
		return m.Country
	}
	return COUNTRY_NONE
}

func (m *ListTopicRequest) GetGrade() string {
	if m != nil {
		return m.Grade
	}
	return ""
}

func (m *ListTopicRequest) GetSubject() Subject {
	if m != nil {
		return m.Subject
	}
	return SUBJECT_NONE
}

func (m *ListTopicRequest) GetTopicType() TopicType {
	if m != nil {
		return m.TopicType
	}
	return TOPIC_TYPE_NONE
}

type ListTopicResponse struct {
	Topics []*Topic `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
}

func (m *ListTopicResponse) Reset()      { *m = ListTopicResponse{} }
func (*ListTopicResponse) ProtoMessage() {}
func (*ListTopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{5}
}
func (m *ListTopicResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTopicResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTopicResponse.Merge(m, src)
}
func (m *ListTopicResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTopicResponse proto.InternalMessageInfo

func (m *ListTopicResponse) GetTopics() []*Topic {
	if m != nil {
		return m.Topics
	}
	return nil
}

type ListTopicsRequest struct {
	Country          Country   `protobuf:"varint,1,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"`
	Grade            string    `protobuf:"bytes,2,opt,name=grade,proto3" json:"grade,omitempty"`
	Subject          Subject   `protobuf:"varint,3,opt,name=subject,proto3,enum=manabie.bob.Subject" json:"subject,omitempty"`
	TopicType        TopicType `protobuf:"varint,4,opt,name=topic_type,json=topicType,proto3,enum=manabie.bob.TopicType" json:"topic_type,omitempty"`
	WithCompleteness bool      `protobuf:"varint,5,opt,name=with_completeness,json=withCompleteness,proto3" json:"with_completeness,omitempty"`
}

func (m *ListTopicsRequest) Reset()      { *m = ListTopicsRequest{} }
func (*ListTopicsRequest) ProtoMessage() {}
func (*ListTopicsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{6}
}
func (m *ListTopicsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTopicsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTopicsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTopicsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTopicsRequest.Merge(m, src)
}
func (m *ListTopicsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListTopicsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTopicsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTopicsRequest proto.InternalMessageInfo

func (m *ListTopicsRequest) GetCountry() Country {
	if m != nil {
		return m.Country
	}
	return COUNTRY_NONE
}

func (m *ListTopicsRequest) GetGrade() string {
	if m != nil {
		return m.Grade
	}
	return ""
}

func (m *ListTopicsRequest) GetSubject() Subject {
	if m != nil {
		return m.Subject
	}
	return SUBJECT_NONE
}

func (m *ListTopicsRequest) GetTopicType() TopicType {
	if m != nil {
		return m.TopicType
	}
	return TOPIC_TYPE_NONE
}

func (m *ListTopicsRequest) GetWithCompleteness() bool {
	if m != nil {
		return m.WithCompleteness
	}
	return false
}

type ListTopicsResponse struct {
	Topics []*ListTopicsResponse_Data `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
}

func (m *ListTopicsResponse) Reset()      { *m = ListTopicsResponse{} }
func (*ListTopicsResponse) ProtoMessage() {}
func (*ListTopicsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{7}
}
func (m *ListTopicsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTopicsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTopicsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTopicsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTopicsResponse.Merge(m, src)
}
func (m *ListTopicsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListTopicsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTopicsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListTopicsResponse proto.InternalMessageInfo

func (m *ListTopicsResponse) GetTopics() []*ListTopicsResponse_Data {
	if m != nil {
		return m.Topics
	}
	return nil
}

type ListTopicsResponse_Data struct {
	Topic            *Topic `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	TotalFinishedLos int32  `protobuf:"varint,2,opt,name=total_finished_los,json=totalFinishedLos,proto3" json:"total_finished_los,omitempty"`
}

func (m *ListTopicsResponse_Data) Reset()      { *m = ListTopicsResponse_Data{} }
func (*ListTopicsResponse_Data) ProtoMessage() {}
func (*ListTopicsResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{7, 0}
}
func (m *ListTopicsResponse_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTopicsResponse_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTopicsResponse_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTopicsResponse_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTopicsResponse_Data.Merge(m, src)
}
func (m *ListTopicsResponse_Data) XXX_Size() int {
	return m.Size()
}
func (m *ListTopicsResponse_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTopicsResponse_Data.DiscardUnknown(m)
}

var xxx_messageInfo_ListTopicsResponse_Data proto.InternalMessageInfo

func (m *ListTopicsResponse_Data) GetTopic() *Topic {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *ListTopicsResponse_Data) GetTotalFinishedLos() int32 {
	if m != nil {
		return m.TotalFinishedLos
	}
	return 0
}

type Topic struct {
	Id            string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Country       Country            `protobuf:"varint,3,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"`
	Grade         string             `protobuf:"bytes,4,opt,name=grade,proto3" json:"grade,omitempty"`
	Subject       Subject            `protobuf:"varint,5,opt,name=subject,proto3,enum=manabie.bob.Subject" json:"subject,omitempty"`
	Type          TopicType          `protobuf:"varint,6,opt,name=type,proto3,enum=manabie.bob.TopicType" json:"type,omitempty"`
	UpdatedAt     *types.Timestamp   `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt     *types.Timestamp   `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Status        TopicStatus        `protobuf:"varint,9,opt,name=status,proto3,enum=manabie.bob.TopicStatus" json:"status,omitempty"`
	DisplayOrder  int32              `protobuf:"varint,10,opt,name=display_order,json=displayOrder,proto3" json:"display_order,omitempty"`
	PublishedAt   *types.Timestamp   `protobuf:"bytes,11,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	TotalLos      int32              `protobuf:"varint,12,opt,name=total_los,json=totalLos,proto3" json:"total_los,omitempty"`
	ChapterId     string             `protobuf:"bytes,13,opt,name=chapter_id,json=chapterId,proto3" json:"chapter_id,omitempty"`
	SchoolId      int32              `protobuf:"varint,14,opt,name=school_id,json=schoolId,proto3" json:"school_id,omitempty"`
	IconUrl       string             `protobuf:"bytes,15,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	Instruction   string             `protobuf:"bytes,16,opt,name=instruction,proto3" json:"instruction,omitempty"`
	Attachments   []*Attachment      `protobuf:"bytes,17,rep,name=attachments,proto3" json:"attachments,omitempty"`
	CopiedTopicId *types.StringValue `protobuf:"bytes,18,opt,name=copied_topic_id,json=copiedTopicId,proto3" json:"copied_topic_id,omitempty"`
	EssayRequired bool               `protobuf:"varint,19,opt,name=essay_required,json=essayRequired,proto3" json:"essay_required,omitempty"`
}

func (m *Topic) Reset()      { *m = Topic{} }
func (*Topic) ProtoMessage() {}
func (*Topic) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{8}
}
func (m *Topic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Topic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Topic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Topic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Topic.Merge(m, src)
}
func (m *Topic) XXX_Size() int {
	return m.Size()
}
func (m *Topic) XXX_DiscardUnknown() {
	xxx_messageInfo_Topic.DiscardUnknown(m)
}

var xxx_messageInfo_Topic proto.InternalMessageInfo

func (m *Topic) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Topic) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Topic) GetCountry() Country {
	if m != nil {
		return m.Country
	}
	return COUNTRY_NONE
}

func (m *Topic) GetGrade() string {
	if m != nil {
		return m.Grade
	}
	return ""
}

func (m *Topic) GetSubject() Subject {
	if m != nil {
		return m.Subject
	}
	return SUBJECT_NONE
}

func (m *Topic) GetType() TopicType {
	if m != nil {
		return m.Type
	}
	return TOPIC_TYPE_NONE
}

func (m *Topic) GetUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Topic) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Topic) GetStatus() TopicStatus {
	if m != nil {
		return m.Status
	}
	return TOPIC_STATUS_NONE
}

func (m *Topic) GetDisplayOrder() int32 {
	if m != nil {
		return m.DisplayOrder
	}
	return 0
}

func (m *Topic) GetPublishedAt() *types.Timestamp {
	if m != nil {
		return m.PublishedAt
	}
	return nil
}

func (m *Topic) GetTotalLos() int32 {
	if m != nil {
		return m.TotalLos
	}
	return 0
}

func (m *Topic) GetChapterId() string {
	if m != nil {
		return m.ChapterId
	}
	return ""
}

func (m *Topic) GetSchoolId() int32 {
	if m != nil {
		return m.SchoolId
	}
	return 0
}

func (m *Topic) GetIconUrl() string {
	if m != nil {
		return m.IconUrl
	}
	return ""
}

func (m *Topic) GetInstruction() string {
	if m != nil {
		return m.Instruction
	}
	return ""
}

func (m *Topic) GetAttachments() []*Attachment {
	if m != nil {
		return m.Attachments
	}
	return nil
}

func (m *Topic) GetCopiedTopicId() *types.StringValue {
	if m != nil {
		return m.CopiedTopicId
	}
	return nil
}

func (m *Topic) GetEssayRequired() bool {
	if m != nil {
		return m.EssayRequired
	}
	return false
}

type Completenes struct {
	QuizFinished         bool    `protobuf:"varint,1,opt,name=quiz_finished,json=quizFinished,proto3" json:"quiz_finished,omitempty"`
	VideoFinished        bool    `protobuf:"varint,2,opt,name=video_finished,json=videoFinished,proto3" json:"video_finished,omitempty"`
	StudyGuideFinished   bool    `protobuf:"varint,3,opt,name=study_guide_finished,json=studyGuideFinished,proto3" json:"study_guide_finished,omitempty"`
	FirstQuizCorrectness float32 `protobuf:"fixed32,4,opt,name=first_quiz_correctness,json=firstQuizCorrectness,proto3" json:"first_quiz_correctness,omitempty"`
}

func (m *Completenes) Reset()      { *m = Completenes{} }
func (*Completenes) ProtoMessage() {}
func (*Completenes) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{9}
}
func (m *Completenes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Completenes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Completenes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Completenes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Completenes.Merge(m, src)
}
func (m *Completenes) XXX_Size() int {
	return m.Size()
}
func (m *Completenes) XXX_DiscardUnknown() {
	xxx_messageInfo_Completenes.DiscardUnknown(m)
}

var xxx_messageInfo_Completenes proto.InternalMessageInfo

func (m *Completenes) GetQuizFinished() bool {
	if m != nil {
		return m.QuizFinished
	}
	return false
}

func (m *Completenes) GetVideoFinished() bool {
	if m != nil {
		return m.VideoFinished
	}
	return false
}

func (m *Completenes) GetStudyGuideFinished() bool {
	if m != nil {
		return m.StudyGuideFinished
	}
	return false
}

func (m *Completenes) GetFirstQuizCorrectness() float32 {
	if m != nil {
		return m.FirstQuizCorrectness
	}
	return 0
}

type Question struct {
	Id                             string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MasterQuestionId               string           `protobuf:"bytes,2,opt,name=master_question_id,json=masterQuestionId,proto3" json:"master_question_id,omitempty"`
	Country                        Country          `protobuf:"varint,3,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"`
	Question                       string           `protobuf:"bytes,4,opt,name=question,proto3" json:"question,omitempty"`
	Answers                        []string         `protobuf:"bytes,5,rep,name=answers,proto3" json:"answers,omitempty"`
	Explanation                    string           `protobuf:"bytes,6,opt,name=explanation,proto3" json:"explanation,omitempty"`
	DifficultyLevel                int32            `protobuf:"varint,7,opt,name=difficulty_level,json=difficultyLevel,proto3" json:"difficulty_level,omitempty"`
	UpdatedAt                      *types.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt                      *types.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	QuestionsTagLo                 []string         `protobuf:"bytes,10,rep,name=questions_tag_lo,json=questionsTagLo,proto3" json:"questions_tag_lo,omitempty"`
	QuestionRendered               string           `protobuf:"bytes,11,opt,name=question_rendered,json=questionRendered,proto3" json:"question_rendered,omitempty"`
	AnswersRendered                []string         `protobuf:"bytes,12,rep,name=answers_rendered,json=answersRendered,proto3" json:"answers_rendered,omitempty"`
	ExplanationRendered            string           `protobuf:"bytes,13,opt,name=explanation_rendered,json=explanationRendered,proto3" json:"explanation_rendered,omitempty"`
	IsWaitingForRender             bool             `protobuf:"varint,14,opt,name=is_waiting_for_render,json=isWaitingForRender,proto3" json:"is_waiting_for_render,omitempty"`
	ExplanationWrongAnswer         []string         `protobuf:"bytes,15,rep,name=explanation_wrong_answer,json=explanationWrongAnswer,proto3" json:"explanation_wrong_answer,omitempty"`
	ExplanationWrongAnswerRendered []string         `protobuf:"bytes,16,rep,name=explanation_wrong_answer_rendered,json=explanationWrongAnswerRendered,proto3" json:"explanation_wrong_answer_rendered,omitempty"`
}

func (m *Question) Reset()      { *m = Question{} }
func (*Question) ProtoMessage() {}
func (*Question) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{10}
}
func (m *Question) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Question) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Question.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Question) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Question.Merge(m, src)
}
func (m *Question) XXX_Size() int {
	return m.Size()
}
func (m *Question) XXX_DiscardUnknown() {
	xxx_messageInfo_Question.DiscardUnknown(m)
}

var xxx_messageInfo_Question proto.InternalMessageInfo

func (m *Question) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Question) GetMasterQuestionId() string {
	if m != nil {
		return m.MasterQuestionId
	}
	return ""
}

func (m *Question) GetCountry() Country {
	if m != nil {
		return m.Country
	}
	return COUNTRY_NONE
}

func (m *Question) GetQuestion() string {
	if m != nil {
		return m.Question
	}
	return ""
}

func (m *Question) GetAnswers() []string {
	if m != nil {
		return m.Answers
	}
	return nil
}

func (m *Question) GetExplanation() string {
	if m != nil {
		return m.Explanation
	}
	return ""
}

func (m *Question) GetDifficultyLevel() int32 {
	if m != nil {
		return m.DifficultyLevel
	}
	return 0
}

func (m *Question) GetUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Question) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Question) GetQuestionsTagLo() []string {
	if m != nil {
		return m.QuestionsTagLo
	}
	return nil
}

func (m *Question) GetQuestionRendered() string {
	if m != nil {
		return m.QuestionRendered
	}
	return ""
}

func (m *Question) GetAnswersRendered() []string {
	if m != nil {
		return m.AnswersRendered
	}
	return nil
}

func (m *Question) GetExplanationRendered() string {
	if m != nil {
		return m.ExplanationRendered
	}
	return ""
}

func (m *Question) GetIsWaitingForRender() bool {
	if m != nil {
		return m.IsWaitingForRender
	}
	return false
}

func (m *Question) GetExplanationWrongAnswer() []string {
	if m != nil {
		return m.ExplanationWrongAnswer
	}
	return nil
}

func (m *Question) GetExplanationWrongAnswerRendered() []string {
	if m != nil {
		return m.ExplanationWrongAnswerRendered
	}
	return nil
}

type LearningObjective struct {
	Id            string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Country       Country               `protobuf:"varint,3,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"`
	Grade         string                `protobuf:"bytes,4,opt,name=grade,proto3" json:"grade,omitempty"`
	Subject       Subject               `protobuf:"varint,5,opt,name=subject,proto3,enum=manabie.bob.Subject" json:"subject,omitempty"`
	DisplayOrder  int32                 `protobuf:"varint,6,opt,name=display_order,json=displayOrder,proto3" json:"display_order,omitempty"`
	Video         string                `protobuf:"bytes,7,opt,name=video,proto3" json:"video,omitempty"`
	StudyGuide    string                `protobuf:"bytes,8,opt,name=study_guide,json=studyGuide,proto3" json:"study_guide,omitempty"`
	TopicId       string                `protobuf:"bytes,9,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	MasterLo      string                `protobuf:"bytes,10,opt,name=master_lo,json=masterLo,proto3" json:"master_lo,omitempty"`
	VideoScript   string                `protobuf:"bytes,11,opt,name=video_script,json=videoScript,proto3" json:"video_script,omitempty"`
	Prerequisites []string              `protobuf:"bytes,12,rep,name=prerequisites,proto3" json:"prerequisites,omitempty"`
	UpdatedAt     *types.Timestamp      `protobuf:"bytes,13,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt     *types.Timestamp      `protobuf:"bytes,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	SchoolId      int32                 `protobuf:"varint,15,opt,name=school_id,json=schoolId,proto3" json:"school_id,omitempty"`
	Type          LearningObjectiveType `protobuf:"varint,16,opt,name=type,proto3,enum=manabie.bob.LearningObjectiveType" json:"type,omitempty"`
}

func (m *LearningObjective) Reset()      { *m = LearningObjective{} }
func (*LearningObjective) ProtoMessage() {}
func (*LearningObjective) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{11}
}
func (m *LearningObjective) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LearningObjective) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LearningObjective.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LearningObjective) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LearningObjective.Merge(m, src)
}
func (m *LearningObjective) XXX_Size() int {
	return m.Size()
}
func (m *LearningObjective) XXX_DiscardUnknown() {
	xxx_messageInfo_LearningObjective.DiscardUnknown(m)
}

var xxx_messageInfo_LearningObjective proto.InternalMessageInfo

func (m *LearningObjective) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *LearningObjective) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LearningObjective) GetCountry() Country {
	if m != nil {
		return m.Country
	}
	return COUNTRY_NONE
}

func (m *LearningObjective) GetGrade() string {
	if m != nil {
		return m.Grade
	}
	return ""
}

func (m *LearningObjective) GetSubject() Subject {
	if m != nil {
		return m.Subject
	}
	return SUBJECT_NONE
}

func (m *LearningObjective) GetDisplayOrder() int32 {
	if m != nil {
		return m.DisplayOrder
	}
	return 0
}

func (m *LearningObjective) GetVideo() string {
	if m != nil {
		return m.Video
	}
	return ""
}

func (m *LearningObjective) GetStudyGuide() string {
	if m != nil {
		return m.StudyGuide
	}
	return ""
}

func (m *LearningObjective) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

func (m *LearningObjective) GetMasterLo() string {
	if m != nil {
		return m.MasterLo
	}
	return ""
}

func (m *LearningObjective) GetVideoScript() string {
	if m != nil {
		return m.VideoScript
	}
	return ""
}

func (m *LearningObjective) GetPrerequisites() []string {
	if m != nil {
		return m.Prerequisites
	}
	return nil
}

func (m *LearningObjective) GetUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *LearningObjective) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *LearningObjective) GetSchoolId() int32 {
	if m != nil {
		return m.SchoolId
	}
	return 0
}

func (m *LearningObjective) GetType() LearningObjectiveType {
	if m != nil {
		return m.Type
	}
	return LEARNING_OBJECTIVE_TYPE_NONE
}

type QuizSets struct {
	LoId         string           `protobuf:"bytes,1,opt,name=lo_id,json=loId,proto3" json:"lo_id,omitempty"`
	QuestionId   string           `protobuf:"bytes,2,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	DisplayOrder string           `protobuf:"bytes,3,opt,name=display_order,json=displayOrder,proto3" json:"display_order,omitempty"`
	UpdatedAt    *types.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt    *types.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *QuizSets) Reset()      { *m = QuizSets{} }
func (*QuizSets) ProtoMessage() {}
func (*QuizSets) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{12}
}
func (m *QuizSets) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuizSets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuizSets.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuizSets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuizSets.Merge(m, src)
}
func (m *QuizSets) XXX_Size() int {
	return m.Size()
}
func (m *QuizSets) XXX_DiscardUnknown() {
	xxx_messageInfo_QuizSets.DiscardUnknown(m)
}

var xxx_messageInfo_QuizSets proto.InternalMessageInfo

func (m *QuizSets) GetLoId() string {
	if m != nil {
		return m.LoId
	}
	return ""
}

func (m *QuizSets) GetQuestionId() string {
	if m != nil {
		return m.QuestionId
	}
	return ""
}

func (m *QuizSets) GetDisplayOrder() string {
	if m != nil {
		return m.DisplayOrder
	}
	return ""
}

func (m *QuizSets) GetUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *QuizSets) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type UpsertLOsRequest struct {
	LearningObjectives []*LearningObjective `protobuf:"bytes,1,rep,name=learning_objectives,json=learningObjectives,proto3" json:"learning_objectives,omitempty"`
}

func (m *UpsertLOsRequest) Reset()      { *m = UpsertLOsRequest{} }
func (*UpsertLOsRequest) ProtoMessage() {}
func (*UpsertLOsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{13}
}
func (m *UpsertLOsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertLOsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertLOsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertLOsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertLOsRequest.Merge(m, src)
}
func (m *UpsertLOsRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpsertLOsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertLOsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertLOsRequest proto.InternalMessageInfo

func (m *UpsertLOsRequest) GetLearningObjectives() []*LearningObjective {
	if m != nil {
		return m.LearningObjectives
	}
	return nil
}

type UpsertLOsResponse struct {
	LoIds []string `protobuf:"bytes,1,rep,name=lo_ids,json=loIds,proto3" json:"lo_ids,omitempty"`
}

func (m *UpsertLOsResponse) Reset()      { *m = UpsertLOsResponse{} }
func (*UpsertLOsResponse) ProtoMessage() {}
func (*UpsertLOsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{14}
}
func (m *UpsertLOsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertLOsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertLOsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertLOsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertLOsResponse.Merge(m, src)
}
func (m *UpsertLOsResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpsertLOsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertLOsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertLOsResponse proto.InternalMessageInfo

func (m *UpsertLOsResponse) GetLoIds() []string {
	if m != nil {
		return m.LoIds
	}
	return nil
}

type SubmissionResult struct {
	QuestionId string `protobuf:"bytes,1,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	Correct    bool   `protobuf:"varint,2,opt,name=correct,proto3" json:"correct,omitempty"`
}

func (m *SubmissionResult) Reset()      { *m = SubmissionResult{} }
func (*SubmissionResult) ProtoMessage() {}
func (*SubmissionResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{15}
}
func (m *SubmissionResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmissionResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmissionResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmissionResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmissionResult.Merge(m, src)
}
func (m *SubmissionResult) XXX_Size() int {
	return m.Size()
}
func (m *SubmissionResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmissionResult.DiscardUnknown(m)
}

var xxx_messageInfo_SubmissionResult proto.InternalMessageInfo

func (m *SubmissionResult) GetQuestionId() string {
	if m != nil {
		return m.QuestionId
	}
	return ""
}

func (m *SubmissionResult) GetCorrect() bool {
	if m != nil {
		return m.Correct
	}
	return false
}

type TakeTheQuizRequest struct {
	LoId  string `protobuf:"bytes,1,opt,name=lo_id,json=loId,proto3" json:"lo_id,omitempty"`
	Limit int32  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Page  int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (m *TakeTheQuizRequest) Reset()      { *m = TakeTheQuizRequest{} }
func (*TakeTheQuizRequest) ProtoMessage() {}
func (*TakeTheQuizRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{16}
}
func (m *TakeTheQuizRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TakeTheQuizRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TakeTheQuizRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TakeTheQuizRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TakeTheQuizRequest.Merge(m, src)
}
func (m *TakeTheQuizRequest) XXX_Size() int {
	return m.Size()
}
func (m *TakeTheQuizRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TakeTheQuizRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TakeTheQuizRequest proto.InternalMessageInfo

func (m *TakeTheQuizRequest) GetLoId() string {
	if m != nil {
		return m.LoId
	}
	return ""
}

func (m *TakeTheQuizRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *TakeTheQuizRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type TakeTheQuizResponse struct {
	Quizset []*Question `protobuf:"bytes,1,rep,name=quizset,proto3" json:"quizset,omitempty"`
	Total   int32       `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *TakeTheQuizResponse) Reset()      { *m = TakeTheQuizResponse{} }
func (*TakeTheQuizResponse) ProtoMessage() {}
func (*TakeTheQuizResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{17}
}
func (m *TakeTheQuizResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TakeTheQuizResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TakeTheQuizResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TakeTheQuizResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TakeTheQuizResponse.Merge(m, src)
}
func (m *TakeTheQuizResponse) XXX_Size() int {
	return m.Size()
}
func (m *TakeTheQuizResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TakeTheQuizResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TakeTheQuizResponse proto.InternalMessageInfo

func (m *TakeTheQuizResponse) GetQuizset() []*Question {
	if m != nil {
		return m.Quizset
	}
	return nil
}

func (m *TakeTheQuizResponse) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type UpsertQuestionsRequest struct {
	Questions []*Question `protobuf:"bytes,1,rep,name=questions,proto3" json:"questions,omitempty"`
}

func (m *UpsertQuestionsRequest) Reset()      { *m = UpsertQuestionsRequest{} }
func (*UpsertQuestionsRequest) ProtoMessage() {}
func (*UpsertQuestionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{18}
}
func (m *UpsertQuestionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertQuestionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertQuestionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertQuestionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertQuestionsRequest.Merge(m, src)
}
func (m *UpsertQuestionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpsertQuestionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertQuestionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertQuestionsRequest proto.InternalMessageInfo

func (m *UpsertQuestionsRequest) GetQuestions() []*Question {
	if m != nil {
		return m.Questions
	}
	return nil
}

type UpsertQuestionsResponse struct {
	QuestionIds []string `protobuf:"bytes,1,rep,name=question_ids,json=questionIds,proto3" json:"question_ids,omitempty"`
}

func (m *UpsertQuestionsResponse) Reset()      { *m = UpsertQuestionsResponse{} }
func (*UpsertQuestionsResponse) ProtoMessage() {}
func (*UpsertQuestionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{19}
}
func (m *UpsertQuestionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertQuestionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertQuestionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertQuestionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertQuestionsResponse.Merge(m, src)
}
func (m *UpsertQuestionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpsertQuestionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertQuestionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertQuestionsResponse proto.InternalMessageInfo

func (m *UpsertQuestionsResponse) GetQuestionIds() []string {
	if m != nil {
		return m.QuestionIds
	}
	return nil
}

type PresetStudyPlan struct {
	Id        string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Country   Country          `protobuf:"varint,3,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"`
	Grade     string           `protobuf:"bytes,4,opt,name=grade,proto3" json:"grade,omitempty"`
	Subject   Subject          `protobuf:"varint,5,opt,name=subject,proto3,enum=manabie.bob.Subject" json:"subject,omitempty"`
	CreatedAt *types.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *types.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// start_date is the start date of a preset study plan counts at week 1.
	StartDate *types.Timestamp `protobuf:"bytes,8,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
}

func (m *PresetStudyPlan) Reset()      { *m = PresetStudyPlan{} }
func (*PresetStudyPlan) ProtoMessage() {}
func (*PresetStudyPlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{20}
}
func (m *PresetStudyPlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PresetStudyPlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PresetStudyPlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PresetStudyPlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PresetStudyPlan.Merge(m, src)
}
func (m *PresetStudyPlan) XXX_Size() int {
	return m.Size()
}
func (m *PresetStudyPlan) XXX_DiscardUnknown() {
	xxx_messageInfo_PresetStudyPlan.DiscardUnknown(m)
}

var xxx_messageInfo_PresetStudyPlan proto.InternalMessageInfo

func (m *PresetStudyPlan) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PresetStudyPlan) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PresetStudyPlan) GetCountry() Country {
	if m != nil {
		return m.Country
	}
	return COUNTRY_NONE
}

func (m *PresetStudyPlan) GetGrade() string {
	if m != nil {
		return m.Grade
	}
	return ""
}

func (m *PresetStudyPlan) GetSubject() Subject {
	if m != nil {
		return m.Subject
	}
	return SUBJECT_NONE
}

func (m *PresetStudyPlan) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *PresetStudyPlan) GetUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *PresetStudyPlan) GetStartDate() *types.Timestamp {
	if m != nil {
		return m.StartDate
	}
	return nil
}

type UpsertPresetStudyPlansRequest struct {
	PresetStudyPlans []*PresetStudyPlan `protobuf:"bytes,1,rep,name=preset_study_plans,json=presetStudyPlans,proto3" json:"preset_study_plans,omitempty"`
}

func (m *UpsertPresetStudyPlansRequest) Reset()      { *m = UpsertPresetStudyPlansRequest{} }
func (*UpsertPresetStudyPlansRequest) ProtoMessage() {}
func (*UpsertPresetStudyPlansRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{21}
}
func (m *UpsertPresetStudyPlansRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertPresetStudyPlansRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertPresetStudyPlansRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertPresetStudyPlansRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertPresetStudyPlansRequest.Merge(m, src)
}
func (m *UpsertPresetStudyPlansRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpsertPresetStudyPlansRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertPresetStudyPlansRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertPresetStudyPlansRequest proto.InternalMessageInfo

func (m *UpsertPresetStudyPlansRequest) GetPresetStudyPlans() []*PresetStudyPlan {
	if m != nil {
		return m.PresetStudyPlans
	}
	return nil
}

type UpsertPresetStudyPlansResponse struct {
	PresetStudyPlanIds []string `protobuf:"bytes,1,rep,name=preset_study_plan_ids,json=presetStudyPlanIds,proto3" json:"preset_study_plan_ids,omitempty"`
}

func (m *UpsertPresetStudyPlansResponse) Reset()      { *m = UpsertPresetStudyPlansResponse{} }
func (*UpsertPresetStudyPlansResponse) ProtoMessage() {}
func (*UpsertPresetStudyPlansResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{22}
}
func (m *UpsertPresetStudyPlansResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertPresetStudyPlansResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertPresetStudyPlansResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertPresetStudyPlansResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertPresetStudyPlansResponse.Merge(m, src)
}
func (m *UpsertPresetStudyPlansResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpsertPresetStudyPlansResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertPresetStudyPlansResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertPresetStudyPlansResponse proto.InternalMessageInfo

func (m *UpsertPresetStudyPlansResponse) GetPresetStudyPlanIds() []string {
	if m != nil {
		return m.PresetStudyPlanIds
	}
	return nil
}

type PresetStudyPlanWeekly struct {
	Id                string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TopicId           string `protobuf:"bytes,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	PresetStudyPlanId string `protobuf:"bytes,3,opt,name=preset_study_plan_id,json=presetStudyPlanId,proto3" json:"preset_study_plan_id,omitempty"`
	Week              int32  `protobuf:"varint,4,opt,name=week,proto3" json:"week,omitempty"`
}

func (m *PresetStudyPlanWeekly) Reset()      { *m = PresetStudyPlanWeekly{} }
func (*PresetStudyPlanWeekly) ProtoMessage() {}
func (*PresetStudyPlanWeekly) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{23}
}
func (m *PresetStudyPlanWeekly) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PresetStudyPlanWeekly) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PresetStudyPlanWeekly.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PresetStudyPlanWeekly) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PresetStudyPlanWeekly.Merge(m, src)
}
func (m *PresetStudyPlanWeekly) XXX_Size() int {
	return m.Size()
}
func (m *PresetStudyPlanWeekly) XXX_DiscardUnknown() {
	xxx_messageInfo_PresetStudyPlanWeekly.DiscardUnknown(m)
}

var xxx_messageInfo_PresetStudyPlanWeekly proto.InternalMessageInfo

func (m *PresetStudyPlanWeekly) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PresetStudyPlanWeekly) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

func (m *PresetStudyPlanWeekly) GetPresetStudyPlanId() string {
	if m != nil {
		return m.PresetStudyPlanId
	}
	return ""
}

func (m *PresetStudyPlanWeekly) GetWeek() int32 {
	if m != nil {
		return m.Week
	}
	return 0
}

type UpsertPresetStudyPlanWeekliesRequest struct {
	PresetStudyPlanWeeklies []*PresetStudyPlanWeekly `protobuf:"bytes,1,rep,name=preset_study_plan_weeklies,json=presetStudyPlanWeeklies,proto3" json:"preset_study_plan_weeklies,omitempty"`
}

func (m *UpsertPresetStudyPlanWeekliesRequest) Reset()      { *m = UpsertPresetStudyPlanWeekliesRequest{} }
func (*UpsertPresetStudyPlanWeekliesRequest) ProtoMessage() {}
func (*UpsertPresetStudyPlanWeekliesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{24}
}
func (m *UpsertPresetStudyPlanWeekliesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertPresetStudyPlanWeekliesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertPresetStudyPlanWeekliesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertPresetStudyPlanWeekliesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertPresetStudyPlanWeekliesRequest.Merge(m, src)
}
func (m *UpsertPresetStudyPlanWeekliesRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpsertPresetStudyPlanWeekliesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertPresetStudyPlanWeekliesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertPresetStudyPlanWeekliesRequest proto.InternalMessageInfo

func (m *UpsertPresetStudyPlanWeekliesRequest) GetPresetStudyPlanWeeklies() []*PresetStudyPlanWeekly {
	if m != nil {
		return m.PresetStudyPlanWeeklies
	}
	return nil
}

type UpsertPresetStudyPlanWeekliesResponse struct {
	PresetStudyPlanWeeklyIds []string `protobuf:"bytes,1,rep,name=preset_study_plan_weekly_ids,json=presetStudyPlanWeeklyIds,proto3" json:"preset_study_plan_weekly_ids,omitempty"`
}

func (m *UpsertPresetStudyPlanWeekliesResponse) Reset()      { *m = UpsertPresetStudyPlanWeekliesResponse{} }
func (*UpsertPresetStudyPlanWeekliesResponse) ProtoMessage() {}
func (*UpsertPresetStudyPlanWeekliesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{25}
}
func (m *UpsertPresetStudyPlanWeekliesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertPresetStudyPlanWeekliesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertPresetStudyPlanWeekliesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertPresetStudyPlanWeekliesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertPresetStudyPlanWeekliesResponse.Merge(m, src)
}
func (m *UpsertPresetStudyPlanWeekliesResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpsertPresetStudyPlanWeekliesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertPresetStudyPlanWeekliesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertPresetStudyPlanWeekliesResponse proto.InternalMessageInfo

func (m *UpsertPresetStudyPlanWeekliesResponse) GetPresetStudyPlanWeeklyIds() []string {
	if m != nil {
		return m.PresetStudyPlanWeeklyIds
	}
	return nil
}

type UpsertQuizRequest struct {
	Quizsets []*QuizSets `protobuf:"bytes,1,rep,name=quizsets,proto3" json:"quizsets,omitempty"`
}

func (m *UpsertQuizRequest) Reset()      { *m = UpsertQuizRequest{} }
func (*UpsertQuizRequest) ProtoMessage() {}
func (*UpsertQuizRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{26}
}
func (m *UpsertQuizRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertQuizRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertQuizRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertQuizRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertQuizRequest.Merge(m, src)
}
func (m *UpsertQuizRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpsertQuizRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertQuizRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertQuizRequest proto.InternalMessageInfo

func (m *UpsertQuizRequest) GetQuizsets() []*QuizSets {
	if m != nil {
		return m.Quizsets
	}
	return nil
}

type UpsertQuizResponse struct {
	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (m *UpsertQuizResponse) Reset()      { *m = UpsertQuizResponse{} }
func (*UpsertQuizResponse) ProtoMessage() {}
func (*UpsertQuizResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{27}
}
func (m *UpsertQuizResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertQuizResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertQuizResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertQuizResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertQuizResponse.Merge(m, src)
}
func (m *UpsertQuizResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpsertQuizResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertQuizResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertQuizResponse proto.InternalMessageInfo

func (m *UpsertQuizResponse) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

type LocalGrade struct {
	LocalGrade map[string]int32 `protobuf:"bytes,1,rep,name=local_grade,json=localGrade,proto3" json:"local_grade,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *LocalGrade) Reset()      { *m = LocalGrade{} }
func (*LocalGrade) ProtoMessage() {}
func (*LocalGrade) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{28}
}
func (m *LocalGrade) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocalGrade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocalGrade.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LocalGrade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalGrade.Merge(m, src)
}
func (m *LocalGrade) XXX_Size() int {
	return m.Size()
}
func (m *LocalGrade) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalGrade.DiscardUnknown(m)
}

var xxx_messageInfo_LocalGrade proto.InternalMessageInfo

func (m *LocalGrade) GetLocalGrade() map[string]int32 {
	if m != nil {
		return m.LocalGrade
	}
	return nil
}

type RetrieveGradeMapResponse struct {
	GradeMap map[string]*LocalGrade `protobuf:"bytes,1,rep,name=grade_map,json=gradeMap,proto3" json:"grade_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *RetrieveGradeMapResponse) Reset()      { *m = RetrieveGradeMapResponse{} }
func (*RetrieveGradeMapResponse) ProtoMessage() {}
func (*RetrieveGradeMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{29}
}
func (m *RetrieveGradeMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveGradeMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveGradeMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveGradeMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveGradeMapResponse.Merge(m, src)
}
func (m *RetrieveGradeMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveGradeMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveGradeMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveGradeMapResponse proto.InternalMessageInfo

func (m *RetrieveGradeMapResponse) GetGradeMap() map[string]*LocalGrade {
	if m != nil {
		return m.GradeMap
	}
	return nil
}

type RetrieveGradeMapRequest struct {
}

func (m *RetrieveGradeMapRequest) Reset()      { *m = RetrieveGradeMapRequest{} }
func (*RetrieveGradeMapRequest) ProtoMessage() {}
func (*RetrieveGradeMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{30}
}
func (m *RetrieveGradeMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveGradeMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveGradeMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveGradeMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveGradeMapRequest.Merge(m, src)
}
func (m *RetrieveGradeMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveGradeMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveGradeMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveGradeMapRequest proto.InternalMessageInfo

type GetHistoryQuizDetailRequest struct {
	StudentId string `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	QuizId    string `protobuf:"bytes,2,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
}

func (m *GetHistoryQuizDetailRequest) Reset()      { *m = GetHistoryQuizDetailRequest{} }
func (*GetHistoryQuizDetailRequest) ProtoMessage() {}
func (*GetHistoryQuizDetailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{31}
}
func (m *GetHistoryQuizDetailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetHistoryQuizDetailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetHistoryQuizDetailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetHistoryQuizDetailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHistoryQuizDetailRequest.Merge(m, src)
}
func (m *GetHistoryQuizDetailRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetHistoryQuizDetailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHistoryQuizDetailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetHistoryQuizDetailRequest proto.InternalMessageInfo

func (m *GetHistoryQuizDetailRequest) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *GetHistoryQuizDetailRequest) GetQuizId() string {
	if m != nil {
		return m.QuizId
	}
	return ""
}

type GetHistoryQuizDetailResponse struct {
	Question *Question `protobuf:"bytes,1,opt,name=question,proto3" json:"question,omitempty"`
	// selected_answer = -1 mean no selected answer
	SelectedAnswer int32 `protobuf:"varint,2,opt,name=selected_answer,json=selectedAnswer,proto3" json:"selected_answer,omitempty"`
	DisplayOrder   int32 `protobuf:"varint,3,opt,name=display_order,json=displayOrder,proto3" json:"display_order,omitempty"`
}

func (m *GetHistoryQuizDetailResponse) Reset()      { *m = GetHistoryQuizDetailResponse{} }
func (*GetHistoryQuizDetailResponse) ProtoMessage() {}
func (*GetHistoryQuizDetailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{32}
}
func (m *GetHistoryQuizDetailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetHistoryQuizDetailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetHistoryQuizDetailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetHistoryQuizDetailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetHistoryQuizDetailResponse.Merge(m, src)
}
func (m *GetHistoryQuizDetailResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetHistoryQuizDetailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetHistoryQuizDetailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetHistoryQuizDetailResponse proto.InternalMessageInfo

func (m *GetHistoryQuizDetailResponse) GetQuestion() *Question {
	if m != nil {
		return m.Question
	}
	return nil
}

func (m *GetHistoryQuizDetailResponse) GetSelectedAnswer() int32 {
	if m != nil {
		return m.SelectedAnswer
	}
	return 0
}

func (m *GetHistoryQuizDetailResponse) GetDisplayOrder() int32 {
	if m != nil {
		return m.DisplayOrder
	}
	return 0
}

type SuggestLORequest struct {
	LoName string `protobuf:"bytes,1,opt,name=lo_name,json=loName,proto3" json:"lo_name,omitempty"`
}

func (m *SuggestLORequest) Reset()      { *m = SuggestLORequest{} }
func (*SuggestLORequest) ProtoMessage() {}
func (*SuggestLORequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{33}
}
func (m *SuggestLORequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuggestLORequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuggestLORequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuggestLORequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuggestLORequest.Merge(m, src)
}
func (m *SuggestLORequest) XXX_Size() int {
	return m.Size()
}
func (m *SuggestLORequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SuggestLORequest.DiscardUnknown(m)
}

var xxx_messageInfo_SuggestLORequest proto.InternalMessageInfo

func (m *SuggestLORequest) GetLoName() string {
	if m != nil {
		return m.LoName
	}
	return ""
}

type SuggestLOResponse struct {
	SuggestLos []*LearningObjective `protobuf:"bytes,1,rep,name=suggest_los,json=suggestLos,proto3" json:"suggest_los,omitempty"`
}

func (m *SuggestLOResponse) Reset()      { *m = SuggestLOResponse{} }
func (*SuggestLOResponse) ProtoMessage() {}
func (*SuggestLOResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{34}
}
func (m *SuggestLOResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuggestLOResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuggestLOResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuggestLOResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuggestLOResponse.Merge(m, src)
}
func (m *SuggestLOResponse) XXX_Size() int {
	return m.Size()
}
func (m *SuggestLOResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SuggestLOResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SuggestLOResponse proto.InternalMessageInfo

func (m *SuggestLOResponse) GetSuggestLos() []*LearningObjective {
	if m != nil {
		return m.SuggestLos
	}
	return nil
}

type Chapter struct {
	ChapterId    string           `protobuf:"bytes,1,opt,name=chapter_id,json=chapterId,proto3" json:"chapter_id,omitempty"`
	ChapterName  string           `protobuf:"bytes,2,opt,name=chapter_name,json=chapterName,proto3" json:"chapter_name,omitempty"`
	Country      Country          `protobuf:"varint,3,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"`
	Subject      Subject          `protobuf:"varint,4,opt,name=subject,proto3,enum=manabie.bob.Subject" json:"subject,omitempty"`
	Grade        string           `protobuf:"bytes,5,opt,name=grade,proto3" json:"grade,omitempty"`
	DisplayOrder int32            `protobuf:"varint,6,opt,name=display_order,json=displayOrder,proto3" json:"display_order,omitempty"`
	Topics       []*Topic         `protobuf:"bytes,7,rep,name=topics,proto3" json:"topics,omitempty"`
	UpdatedAt    *types.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt    *types.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	SchoolId     int32            `protobuf:"varint,10,opt,name=school_id,json=schoolId,proto3" json:"school_id,omitempty"`
}

func (m *Chapter) Reset()      { *m = Chapter{} }
func (*Chapter) ProtoMessage() {}
func (*Chapter) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{35}
}
func (m *Chapter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Chapter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Chapter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Chapter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chapter.Merge(m, src)
}
func (m *Chapter) XXX_Size() int {
	return m.Size()
}
func (m *Chapter) XXX_DiscardUnknown() {
	xxx_messageInfo_Chapter.DiscardUnknown(m)
}

var xxx_messageInfo_Chapter proto.InternalMessageInfo

func (m *Chapter) GetChapterId() string {
	if m != nil {
		return m.ChapterId
	}
	return ""
}

func (m *Chapter) GetChapterName() string {
	if m != nil {
		return m.ChapterName
	}
	return ""
}

func (m *Chapter) GetCountry() Country {
	if m != nil {
		return m.Country
	}
	return COUNTRY_NONE
}

func (m *Chapter) GetSubject() Subject {
	if m != nil {
		return m.Subject
	}
	return SUBJECT_NONE
}

func (m *Chapter) GetGrade() string {
	if m != nil {
		return m.Grade
	}
	return ""
}

func (m *Chapter) GetDisplayOrder() int32 {
	if m != nil {
		return m.DisplayOrder
	}
	return 0
}

func (m *Chapter) GetTopics() []*Topic {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *Chapter) GetUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Chapter) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Chapter) GetSchoolId() int32 {
	if m != nil {
		return m.SchoolId
	}
	return 0
}

type GetChapterListRequest struct {
	ChapterId   string  `protobuf:"bytes,1,opt,name=chapter_id,json=chapterId,proto3" json:"chapter_id,omitempty"`
	ChapterName string  `protobuf:"bytes,2,opt,name=chapter_name,json=chapterName,proto3" json:"chapter_name,omitempty"`
	Limit       uint32  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Page        uint32  `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Subject     Subject `protobuf:"varint,5,opt,name=subject,proto3,enum=manabie.bob.Subject" json:"subject,omitempty"`
	Grade       string  `protobuf:"bytes,6,opt,name=grade,proto3" json:"grade,omitempty"`
	Country     Country `protobuf:"varint,7,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"`
}

func (m *GetChapterListRequest) Reset()      { *m = GetChapterListRequest{} }
func (*GetChapterListRequest) ProtoMessage() {}
func (*GetChapterListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{36}
}
func (m *GetChapterListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetChapterListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetChapterListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetChapterListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChapterListRequest.Merge(m, src)
}
func (m *GetChapterListRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetChapterListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChapterListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetChapterListRequest proto.InternalMessageInfo

func (m *GetChapterListRequest) GetChapterId() string {
	if m != nil {
		return m.ChapterId
	}
	return ""
}

func (m *GetChapterListRequest) GetChapterName() string {
	if m != nil {
		return m.ChapterName
	}
	return ""
}

func (m *GetChapterListRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GetChapterListRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetChapterListRequest) GetSubject() Subject {
	if m != nil {
		return m.Subject
	}
	return SUBJECT_NONE
}

func (m *GetChapterListRequest) GetGrade() string {
	if m != nil {
		return m.Grade
	}
	return ""
}

func (m *GetChapterListRequest) GetCountry() Country {
	if m != nil {
		return m.Country
	}
	return COUNTRY_NONE
}

type GetChapterListResponse struct {
	Chapters []*Chapter `protobuf:"bytes,1,rep,name=chapters,proto3" json:"chapters,omitempty"`
	Total    uint32     `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *GetChapterListResponse) Reset()      { *m = GetChapterListResponse{} }
func (*GetChapterListResponse) ProtoMessage() {}
func (*GetChapterListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{37}
}
func (m *GetChapterListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetChapterListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetChapterListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetChapterListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChapterListResponse.Merge(m, src)
}
func (m *GetChapterListResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetChapterListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChapterListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetChapterListResponse proto.InternalMessageInfo

func (m *GetChapterListResponse) GetChapters() []*Chapter {
	if m != nil {
		return m.Chapters
	}
	return nil
}

func (m *GetChapterListResponse) GetTotal() uint32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type RetrieveCoursesRequest struct {
	Id           string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Country      Country      `protobuf:"varint,3,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"` // Deprecated: Do not use.
	Subject      Subject      `protobuf:"varint,4,opt,name=subject,proto3,enum=manabie.bob.Subject" json:"subject,omitempty"`
	Grade        string       `protobuf:"bytes,5,opt,name=grade,proto3" json:"grade,omitempty"`
	Limit        int32        `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	Page         int32        `protobuf:"varint,7,opt,name=page,proto3" json:"page,omitempty"`
	Countries    []Country    `protobuf:"varint,8,rep,packed,name=countries,proto3,enum=manabie.bob.Country" json:"countries,omitempty"`
	CourseType   CourseType   `protobuf:"varint,9,opt,name=course_type,json=courseType,proto3,enum=manabie.bob.CourseType" json:"course_type,omitempty"`
	CourseStatus CourseStatus `protobuf:"varint,10,opt,name=course_status,json=courseStatus,proto3,enum=manabie.bob.CourseStatus" json:"course_status,omitempty"`
	IsAssigned   bool         `protobuf:"varint,11,opt,name=is_assigned,json=isAssigned,proto3" json:"is_assigned,omitempty"`
	// class_id filter is mutually exclusive with is_assigned
	ClassId int32 `protobuf:"varint,12,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
}

func (m *RetrieveCoursesRequest) Reset()      { *m = RetrieveCoursesRequest{} }
func (*RetrieveCoursesRequest) ProtoMessage() {}
func (*RetrieveCoursesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{38}
}
func (m *RetrieveCoursesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveCoursesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveCoursesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveCoursesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveCoursesRequest.Merge(m, src)
}
func (m *RetrieveCoursesRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveCoursesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveCoursesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveCoursesRequest proto.InternalMessageInfo

func (m *RetrieveCoursesRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RetrieveCoursesRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Deprecated: Do not use.
func (m *RetrieveCoursesRequest) GetCountry() Country {
	if m != nil {
		return m.Country
	}
	return COUNTRY_NONE
}

func (m *RetrieveCoursesRequest) GetSubject() Subject {
	if m != nil {
		return m.Subject
	}
	return SUBJECT_NONE
}

func (m *RetrieveCoursesRequest) GetGrade() string {
	if m != nil {
		return m.Grade
	}
	return ""
}

func (m *RetrieveCoursesRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *RetrieveCoursesRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *RetrieveCoursesRequest) GetCountries() []Country {
	if m != nil {
		return m.Countries
	}
	return nil
}

func (m *RetrieveCoursesRequest) GetCourseType() CourseType {
	if m != nil {
		return m.CourseType
	}
	return COURSE_TYPE_NONE
}

func (m *RetrieveCoursesRequest) GetCourseStatus() CourseStatus {
	if m != nil {
		return m.CourseStatus
	}
	return COURSE_STATUS_NONE
}

func (m *RetrieveCoursesRequest) GetIsAssigned() bool {
	if m != nil {
		return m.IsAssigned
	}
	return false
}

func (m *RetrieveCoursesRequest) GetClassId() int32 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

type RetrieveCoursesResponse struct {
	Courses []*RetrieveCoursesResponse_Course `protobuf:"bytes,1,rep,name=courses,proto3" json:"courses,omitempty"`
	Total   int32                             `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *RetrieveCoursesResponse) Reset()      { *m = RetrieveCoursesResponse{} }
func (*RetrieveCoursesResponse) ProtoMessage() {}
func (*RetrieveCoursesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{39}
}
func (m *RetrieveCoursesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveCoursesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveCoursesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveCoursesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveCoursesResponse.Merge(m, src)
}
func (m *RetrieveCoursesResponse) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveCoursesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveCoursesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveCoursesResponse proto.InternalMessageInfo

func (m *RetrieveCoursesResponse) GetCourses() []*RetrieveCoursesResponse_Course {
	if m != nil {
		return m.Courses
	}
	return nil
}

func (m *RetrieveCoursesResponse) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type RetrieveCoursesResponse_Course struct {
	Id           string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Country      Country          `protobuf:"varint,3,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"`
	Subject      Subject          `protobuf:"varint,4,opt,name=subject,proto3,enum=manabie.bob.Subject" json:"subject,omitempty"`
	Grade        string           `protobuf:"bytes,5,opt,name=grade,proto3" json:"grade,omitempty"`
	Chapters     []*Chapter       `protobuf:"bytes,6,rep,name=chapters,proto3" json:"chapters,omitempty"`
	UpdatedAt    *types.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt    *types.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	SchoolId     int32            `protobuf:"varint,9,opt,name=school_id,json=schoolId,proto3" json:"school_id,omitempty"`
	ClassId      int32            `protobuf:"varint,10,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	StartDate    *types.Timestamp `protobuf:"bytes,11,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate      *types.Timestamp `protobuf:"bytes,12,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	CourseType   CourseType       `protobuf:"varint,13,opt,name=course_type,json=courseType,proto3,enum=manabie.bob.CourseType" json:"course_type,omitempty"`
	Teachers     []*BasicProfile  `protobuf:"bytes,14,rep,name=teachers,proto3" json:"teachers,omitempty"`
	CourseStatus CourseStatus     `protobuf:"varint,15,opt,name=course_status,json=courseStatus,proto3,enum=manabie.bob.CourseStatus" json:"course_status,omitempty"`
	ClassIds     []int32          `protobuf:"varint,16,rep,packed,name=class_ids,json=classIds,proto3" json:"class_ids,omitempty"`
	BookIds      []string         `protobuf:"bytes,17,rep,name=book_ids,json=bookIds,proto3" json:"book_ids,omitempty"`
}

func (m *RetrieveCoursesResponse_Course) Reset()      { *m = RetrieveCoursesResponse_Course{} }
func (*RetrieveCoursesResponse_Course) ProtoMessage() {}
func (*RetrieveCoursesResponse_Course) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{39, 0}
}
func (m *RetrieveCoursesResponse_Course) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveCoursesResponse_Course) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveCoursesResponse_Course.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveCoursesResponse_Course) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveCoursesResponse_Course.Merge(m, src)
}
func (m *RetrieveCoursesResponse_Course) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveCoursesResponse_Course) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveCoursesResponse_Course.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveCoursesResponse_Course proto.InternalMessageInfo

func (m *RetrieveCoursesResponse_Course) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RetrieveCoursesResponse_Course) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RetrieveCoursesResponse_Course) GetCountry() Country {
	if m != nil {
		return m.Country
	}
	return COUNTRY_NONE
}

func (m *RetrieveCoursesResponse_Course) GetSubject() Subject {
	if m != nil {
		return m.Subject
	}
	return SUBJECT_NONE
}

func (m *RetrieveCoursesResponse_Course) GetGrade() string {
	if m != nil {
		return m.Grade
	}
	return ""
}

func (m *RetrieveCoursesResponse_Course) GetChapters() []*Chapter {
	if m != nil {
		return m.Chapters
	}
	return nil
}

func (m *RetrieveCoursesResponse_Course) GetUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *RetrieveCoursesResponse_Course) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *RetrieveCoursesResponse_Course) GetSchoolId() int32 {
	if m != nil {
		return m.SchoolId
	}
	return 0
}

func (m *RetrieveCoursesResponse_Course) GetClassId() int32 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

func (m *RetrieveCoursesResponse_Course) GetStartDate() *types.Timestamp {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *RetrieveCoursesResponse_Course) GetEndDate() *types.Timestamp {
	if m != nil {
		return m.EndDate
	}
	return nil
}

func (m *RetrieveCoursesResponse_Course) GetCourseType() CourseType {
	if m != nil {
		return m.CourseType
	}
	return COURSE_TYPE_NONE
}

func (m *RetrieveCoursesResponse_Course) GetTeachers() []*BasicProfile {
	if m != nil {
		return m.Teachers
	}
	return nil
}

func (m *RetrieveCoursesResponse_Course) GetCourseStatus() CourseStatus {
	if m != nil {
		return m.CourseStatus
	}
	return COURSE_STATUS_NONE
}

func (m *RetrieveCoursesResponse_Course) GetClassIds() []int32 {
	if m != nil {
		return m.ClassIds
	}
	return nil
}

func (m *RetrieveCoursesResponse_Course) GetBookIds() []string {
	if m != nil {
		return m.BookIds
	}
	return nil
}

type RetrieveStudentSubmissionsRequest struct {
	StudentId string                                                `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	Type      RetrieveStudentSubmissionsRequest_SubmissionOrderType `protobuf:"varint,2,opt,name=type,proto3,enum=manabie.bob.RetrieveStudentSubmissionsRequest_SubmissionOrderType" json:"type,omitempty"`
	Limit     int32                                                 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Page      int32                                                 `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	LoId      string                                                `protobuf:"bytes,5,opt,name=lo_id,json=loId,proto3" json:"lo_id,omitempty"`
}

func (m *RetrieveStudentSubmissionsRequest) Reset()      { *m = RetrieveStudentSubmissionsRequest{} }
func (*RetrieveStudentSubmissionsRequest) ProtoMessage() {}
func (*RetrieveStudentSubmissionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{40}
}
func (m *RetrieveStudentSubmissionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveStudentSubmissionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveStudentSubmissionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveStudentSubmissionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveStudentSubmissionsRequest.Merge(m, src)
}
func (m *RetrieveStudentSubmissionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveStudentSubmissionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveStudentSubmissionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveStudentSubmissionsRequest proto.InternalMessageInfo

func (m *RetrieveStudentSubmissionsRequest) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *RetrieveStudentSubmissionsRequest) GetType() RetrieveStudentSubmissionsRequest_SubmissionOrderType {
	if m != nil {
		return m.Type
	}
	return SUBMISSION_ORDER_TYPE_NONE
}

func (m *RetrieveStudentSubmissionsRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *RetrieveStudentSubmissionsRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *RetrieveStudentSubmissionsRequest) GetLoId() string {
	if m != nil {
		return m.LoId
	}
	return ""
}

type RetrieveStudentSubmissionsResponse struct {
	Submissions []*GetHistoryQuizDetailResponse `protobuf:"bytes,1,rep,name=submissions,proto3" json:"submissions,omitempty"`
	Total       int32                           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *RetrieveStudentSubmissionsResponse) Reset()      { *m = RetrieveStudentSubmissionsResponse{} }
func (*RetrieveStudentSubmissionsResponse) ProtoMessage() {}
func (*RetrieveStudentSubmissionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{41}
}
func (m *RetrieveStudentSubmissionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveStudentSubmissionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveStudentSubmissionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveStudentSubmissionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveStudentSubmissionsResponse.Merge(m, src)
}
func (m *RetrieveStudentSubmissionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveStudentSubmissionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveStudentSubmissionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveStudentSubmissionsResponse proto.InternalMessageInfo

func (m *RetrieveStudentSubmissionsResponse) GetSubmissions() []*GetHistoryQuizDetailResponse {
	if m != nil {
		return m.Submissions
	}
	return nil
}

func (m *RetrieveStudentSubmissionsResponse) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type QuestionV2 struct {
	Id                        string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MasterQuestionId          string           `protobuf:"bytes,2,opt,name=master_question_id,json=masterQuestionId,proto3" json:"master_question_id,omitempty"`
	Country                   Country          `protobuf:"varint,3,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"`
	Question                  string           `protobuf:"bytes,4,opt,name=question,proto3" json:"question,omitempty"`
	Answers                   []string         `protobuf:"bytes,5,rep,name=answers,proto3" json:"answers,omitempty"`
	Explanation               string           `protobuf:"bytes,6,opt,name=explanation,proto3" json:"explanation,omitempty"`
	DifficultyLevel           int32            `protobuf:"varint,7,opt,name=difficulty_level,json=difficultyLevel,proto3" json:"difficulty_level,omitempty"`
	UpdatedAt                 *types.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt                 *types.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	QuestionsTagLo            []string         `protobuf:"bytes,10,rep,name=questions_tag_lo,json=questionsTagLo,proto3" json:"questions_tag_lo,omitempty"`
	QuestionUrl               string           `protobuf:"bytes,11,opt,name=question_url,json=questionUrl,proto3" json:"question_url,omitempty"`
	AnswersUrl                []string         `protobuf:"bytes,12,rep,name=answers_url,json=answersUrl,proto3" json:"answers_url,omitempty"`
	ExplanationUrl            string           `protobuf:"bytes,13,opt,name=explanation_url,json=explanationUrl,proto3" json:"explanation_url,omitempty"`
	ExplanationWrongAnswer    []string         `protobuf:"bytes,14,rep,name=explanation_wrong_answer,json=explanationWrongAnswer,proto3" json:"explanation_wrong_answer,omitempty"`
	ExplanationWrongAnswerUrl []string         `protobuf:"bytes,15,rep,name=explanation_wrong_answer_url,json=explanationWrongAnswerUrl,proto3" json:"explanation_wrong_answer_url,omitempty"`
	IsWaitingForRender        bool             `protobuf:"varint,16,opt,name=is_waiting_for_render,json=isWaitingForRender,proto3" json:"is_waiting_for_render,omitempty"`
}

func (m *QuestionV2) Reset()      { *m = QuestionV2{} }
func (*QuestionV2) ProtoMessage() {}
func (*QuestionV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{42}
}
func (m *QuestionV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuestionV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuestionV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuestionV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuestionV2.Merge(m, src)
}
func (m *QuestionV2) XXX_Size() int {
	return m.Size()
}
func (m *QuestionV2) XXX_DiscardUnknown() {
	xxx_messageInfo_QuestionV2.DiscardUnknown(m)
}

var xxx_messageInfo_QuestionV2 proto.InternalMessageInfo

func (m *QuestionV2) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *QuestionV2) GetMasterQuestionId() string {
	if m != nil {
		return m.MasterQuestionId
	}
	return ""
}

func (m *QuestionV2) GetCountry() Country {
	if m != nil {
		return m.Country
	}
	return COUNTRY_NONE
}

func (m *QuestionV2) GetQuestion() string {
	if m != nil {
		return m.Question
	}
	return ""
}

func (m *QuestionV2) GetAnswers() []string {
	if m != nil {
		return m.Answers
	}
	return nil
}

func (m *QuestionV2) GetExplanation() string {
	if m != nil {
		return m.Explanation
	}
	return ""
}

func (m *QuestionV2) GetDifficultyLevel() int32 {
	if m != nil {
		return m.DifficultyLevel
	}
	return 0
}

func (m *QuestionV2) GetUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *QuestionV2) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *QuestionV2) GetQuestionsTagLo() []string {
	if m != nil {
		return m.QuestionsTagLo
	}
	return nil
}

func (m *QuestionV2) GetQuestionUrl() string {
	if m != nil {
		return m.QuestionUrl
	}
	return ""
}

func (m *QuestionV2) GetAnswersUrl() []string {
	if m != nil {
		return m.AnswersUrl
	}
	return nil
}

func (m *QuestionV2) GetExplanationUrl() string {
	if m != nil {
		return m.ExplanationUrl
	}
	return ""
}

func (m *QuestionV2) GetExplanationWrongAnswer() []string {
	if m != nil {
		return m.ExplanationWrongAnswer
	}
	return nil
}

func (m *QuestionV2) GetExplanationWrongAnswerUrl() []string {
	if m != nil {
		return m.ExplanationWrongAnswerUrl
	}
	return nil
}

func (m *QuestionV2) GetIsWaitingForRender() bool {
	if m != nil {
		return m.IsWaitingForRender
	}
	return false
}

type TakeTheQuizV2Response struct {
	Quizset []*QuestionV2 `protobuf:"bytes,1,rep,name=quizset,proto3" json:"quizset,omitempty"`
	Total   int32         `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *TakeTheQuizV2Response) Reset()      { *m = TakeTheQuizV2Response{} }
func (*TakeTheQuizV2Response) ProtoMessage() {}
func (*TakeTheQuizV2Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{43}
}
func (m *TakeTheQuizV2Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TakeTheQuizV2Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TakeTheQuizV2Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TakeTheQuizV2Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TakeTheQuizV2Response.Merge(m, src)
}
func (m *TakeTheQuizV2Response) XXX_Size() int {
	return m.Size()
}
func (m *TakeTheQuizV2Response) XXX_DiscardUnknown() {
	xxx_messageInfo_TakeTheQuizV2Response.DiscardUnknown(m)
}

var xxx_messageInfo_TakeTheQuizV2Response proto.InternalMessageInfo

func (m *TakeTheQuizV2Response) GetQuizset() []*QuestionV2 {
	if m != nil {
		return m.Quizset
	}
	return nil
}

func (m *TakeTheQuizV2Response) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type Pagination struct {
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page  int32 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (m *Pagination) Reset()      { *m = Pagination{} }
func (*Pagination) ProtoMessage() {}
func (*Pagination) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{44}
}
func (m *Pagination) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pagination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pagination.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pagination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pagination.Merge(m, src)
}
func (m *Pagination) XXX_Size() int {
	return m.Size()
}
func (m *Pagination) XXX_DiscardUnknown() {
	xxx_messageInfo_Pagination.DiscardUnknown(m)
}

var xxx_messageInfo_Pagination proto.InternalMessageInfo

func (m *Pagination) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Pagination) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type RetrieveLiveLessonRequest struct {
	CourseIds  []string         `protobuf:"bytes,1,rep,name=course_ids,json=courseIds,proto3" json:"course_ids,omitempty"`
	Pagination *Pagination      `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	From       *types.Timestamp `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To         *types.Timestamp `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *RetrieveLiveLessonRequest) Reset()      { *m = RetrieveLiveLessonRequest{} }
func (*RetrieveLiveLessonRequest) ProtoMessage() {}
func (*RetrieveLiveLessonRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{45}
}
func (m *RetrieveLiveLessonRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveLiveLessonRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveLiveLessonRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveLiveLessonRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveLiveLessonRequest.Merge(m, src)
}
func (m *RetrieveLiveLessonRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveLiveLessonRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveLiveLessonRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveLiveLessonRequest proto.InternalMessageInfo

func (m *RetrieveLiveLessonRequest) GetCourseIds() []string {
	if m != nil {
		return m.CourseIds
	}
	return nil
}

func (m *RetrieveLiveLessonRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *RetrieveLiveLessonRequest) GetFrom() *types.Timestamp {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *RetrieveLiveLessonRequest) GetTo() *types.Timestamp {
	if m != nil {
		return m.To
	}
	return nil
}

type Lesson struct {
	LessonId                 string           `protobuf:"bytes,1,opt,name=lesson_id,json=lessonId,proto3" json:"lesson_id,omitempty"`
	Topic                    *Topic           `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	StartTime                *types.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime                  *types.Timestamp `protobuf:"bytes,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	PresetStudyPlanWeeklyIds string           `protobuf:"bytes,5,opt,name=preset_study_plan_weekly_ids,json=presetStudyPlanWeeklyIds,proto3" json:"preset_study_plan_weekly_ids,omitempty"`
	Status                   LessonStatus     `protobuf:"varint,6,opt,name=status,proto3,enum=manabie.bob.LessonStatus" json:"status,omitempty"`
	Teacher                  []*BasicProfile  `protobuf:"bytes,7,rep,name=teacher,proto3" json:"teacher,omitempty"`
	TotalLearner             int32            `protobuf:"varint,8,opt,name=total_learner,json=totalLearner,proto3" json:"total_learner,omitempty"`
	CourseId                 string           `protobuf:"bytes,9,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	UserClassIds             []int32          `protobuf:"varint,10,rep,packed,name=user_class_ids,json=userClassIds,proto3" json:"user_class_ids,omitempty"` // Deprecated: Do not use.
}

func (m *Lesson) Reset()      { *m = Lesson{} }
func (*Lesson) ProtoMessage() {}
func (*Lesson) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{46}
}
func (m *Lesson) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Lesson) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Lesson.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Lesson) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Lesson.Merge(m, src)
}
func (m *Lesson) XXX_Size() int {
	return m.Size()
}
func (m *Lesson) XXX_DiscardUnknown() {
	xxx_messageInfo_Lesson.DiscardUnknown(m)
}

var xxx_messageInfo_Lesson proto.InternalMessageInfo

func (m *Lesson) GetLessonId() string {
	if m != nil {
		return m.LessonId
	}
	return ""
}

func (m *Lesson) GetTopic() *Topic {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *Lesson) GetStartTime() *types.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Lesson) GetEndTime() *types.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *Lesson) GetPresetStudyPlanWeeklyIds() string {
	if m != nil {
		return m.PresetStudyPlanWeeklyIds
	}
	return ""
}

func (m *Lesson) GetStatus() LessonStatus {
	if m != nil {
		return m.Status
	}
	return LESSON_STATUS_NONE
}

func (m *Lesson) GetTeacher() []*BasicProfile {
	if m != nil {
		return m.Teacher
	}
	return nil
}

func (m *Lesson) GetTotalLearner() int32 {
	if m != nil {
		return m.TotalLearner
	}
	return 0
}

func (m *Lesson) GetCourseId() string {
	if m != nil {
		return m.CourseId
	}
	return ""
}

// Deprecated: Do not use.
func (m *Lesson) GetUserClassIds() []int32 {
	if m != nil {
		return m.UserClassIds
	}
	return nil
}

type RetrieveLiveLessonResponse struct {
	Lessons []*Lesson `protobuf:"bytes,1,rep,name=lessons,proto3" json:"lessons,omitempty"`
	Total   int32     `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *RetrieveLiveLessonResponse) Reset()      { *m = RetrieveLiveLessonResponse{} }
func (*RetrieveLiveLessonResponse) ProtoMessage() {}
func (*RetrieveLiveLessonResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{47}
}
func (m *RetrieveLiveLessonResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveLiveLessonResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveLiveLessonResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveLiveLessonResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveLiveLessonResponse.Merge(m, src)
}
func (m *RetrieveLiveLessonResponse) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveLiveLessonResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveLiveLessonResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveLiveLessonResponse proto.InternalMessageInfo

func (m *RetrieveLiveLessonResponse) GetLessons() []*Lesson {
	if m != nil {
		return m.Lessons
	}
	return nil
}

func (m *RetrieveLiveLessonResponse) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type RetrieveCoursesByIDsRequest struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (m *RetrieveCoursesByIDsRequest) Reset()      { *m = RetrieveCoursesByIDsRequest{} }
func (*RetrieveCoursesByIDsRequest) ProtoMessage() {}
func (*RetrieveCoursesByIDsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{48}
}
func (m *RetrieveCoursesByIDsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveCoursesByIDsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveCoursesByIDsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveCoursesByIDsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveCoursesByIDsRequest.Merge(m, src)
}
func (m *RetrieveCoursesByIDsRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveCoursesByIDsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveCoursesByIDsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveCoursesByIDsRequest proto.InternalMessageInfo

func (m *RetrieveCoursesByIDsRequest) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type CreateBrightCoveUploadUrlRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *CreateBrightCoveUploadUrlRequest) Reset()      { *m = CreateBrightCoveUploadUrlRequest{} }
func (*CreateBrightCoveUploadUrlRequest) ProtoMessage() {}
func (*CreateBrightCoveUploadUrlRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{49}
}
func (m *CreateBrightCoveUploadUrlRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateBrightCoveUploadUrlRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateBrightCoveUploadUrlRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateBrightCoveUploadUrlRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBrightCoveUploadUrlRequest.Merge(m, src)
}
func (m *CreateBrightCoveUploadUrlRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateBrightCoveUploadUrlRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBrightCoveUploadUrlRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBrightCoveUploadUrlRequest proto.InternalMessageInfo

func (m *CreateBrightCoveUploadUrlRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreateBrightCoveUploadUrlResponse struct {
	SignedUrl     string `protobuf:"bytes,1,opt,name=signed_url,json=signedUrl,proto3" json:"signed_url,omitempty"`
	ApiRequestUrl string `protobuf:"bytes,2,opt,name=api_request_url,json=apiRequestUrl,proto3" json:"api_request_url,omitempty"`
	VideoId       string `protobuf:"bytes,3,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
}

func (m *CreateBrightCoveUploadUrlResponse) Reset()      { *m = CreateBrightCoveUploadUrlResponse{} }
func (*CreateBrightCoveUploadUrlResponse) ProtoMessage() {}
func (*CreateBrightCoveUploadUrlResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{50}
}
func (m *CreateBrightCoveUploadUrlResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateBrightCoveUploadUrlResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateBrightCoveUploadUrlResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateBrightCoveUploadUrlResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBrightCoveUploadUrlResponse.Merge(m, src)
}
func (m *CreateBrightCoveUploadUrlResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateBrightCoveUploadUrlResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBrightCoveUploadUrlResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBrightCoveUploadUrlResponse proto.InternalMessageInfo

func (m *CreateBrightCoveUploadUrlResponse) GetSignedUrl() string {
	if m != nil {
		return m.SignedUrl
	}
	return ""
}

func (m *CreateBrightCoveUploadUrlResponse) GetApiRequestUrl() string {
	if m != nil {
		return m.ApiRequestUrl
	}
	return ""
}

func (m *CreateBrightCoveUploadUrlResponse) GetVideoId() string {
	if m != nil {
		return m.VideoId
	}
	return ""
}

type FinishUploadBrightCoveRequest struct {
	ApiRequestUrl string `protobuf:"bytes,1,opt,name=api_request_url,json=apiRequestUrl,proto3" json:"api_request_url,omitempty"`
	VideoId       string `protobuf:"bytes,2,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
}

func (m *FinishUploadBrightCoveRequest) Reset()      { *m = FinishUploadBrightCoveRequest{} }
func (*FinishUploadBrightCoveRequest) ProtoMessage() {}
func (*FinishUploadBrightCoveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{51}
}
func (m *FinishUploadBrightCoveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinishUploadBrightCoveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinishUploadBrightCoveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FinishUploadBrightCoveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinishUploadBrightCoveRequest.Merge(m, src)
}
func (m *FinishUploadBrightCoveRequest) XXX_Size() int {
	return m.Size()
}
func (m *FinishUploadBrightCoveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FinishUploadBrightCoveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FinishUploadBrightCoveRequest proto.InternalMessageInfo

func (m *FinishUploadBrightCoveRequest) GetApiRequestUrl() string {
	if m != nil {
		return m.ApiRequestUrl
	}
	return ""
}

func (m *FinishUploadBrightCoveRequest) GetVideoId() string {
	if m != nil {
		return m.VideoId
	}
	return ""
}

type FinishUploadBrightCoveResponse struct {
}

func (m *FinishUploadBrightCoveResponse) Reset()      { *m = FinishUploadBrightCoveResponse{} }
func (*FinishUploadBrightCoveResponse) ProtoMessage() {}
func (*FinishUploadBrightCoveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{52}
}
func (m *FinishUploadBrightCoveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinishUploadBrightCoveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinishUploadBrightCoveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FinishUploadBrightCoveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinishUploadBrightCoveResponse.Merge(m, src)
}
func (m *FinishUploadBrightCoveResponse) XXX_Size() int {
	return m.Size()
}
func (m *FinishUploadBrightCoveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FinishUploadBrightCoveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FinishUploadBrightCoveResponse proto.InternalMessageInfo

type Book struct {
	Id        string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Country   Country          `protobuf:"varint,3,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"`
	Subject   Subject          `protobuf:"varint,4,opt,name=subject,proto3,enum=manabie.bob.Subject" json:"subject,omitempty"`
	Grade     string           `protobuf:"bytes,5,opt,name=grade,proto3" json:"grade,omitempty"`
	SchoolId  int32            `protobuf:"varint,6,opt,name=school_id,json=schoolId,proto3" json:"school_id,omitempty"`
	CourseId  string           `protobuf:"bytes,7,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	UpdatedAt *types.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt *types.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Chapters  []*Chapter       `protobuf:"bytes,10,rep,name=chapters,proto3" json:"chapters,omitempty"`
}

func (m *Book) Reset()      { *m = Book{} }
func (*Book) ProtoMessage() {}
func (*Book) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{53}
}
func (m *Book) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Book) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Book.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Book) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Book.Merge(m, src)
}
func (m *Book) XXX_Size() int {
	return m.Size()
}
func (m *Book) XXX_DiscardUnknown() {
	xxx_messageInfo_Book.DiscardUnknown(m)
}

var xxx_messageInfo_Book proto.InternalMessageInfo

func (m *Book) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Book) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Book) GetCountry() Country {
	if m != nil {
		return m.Country
	}
	return COUNTRY_NONE
}

func (m *Book) GetSubject() Subject {
	if m != nil {
		return m.Subject
	}
	return SUBJECT_NONE
}

func (m *Book) GetGrade() string {
	if m != nil {
		return m.Grade
	}
	return ""
}

func (m *Book) GetSchoolId() int32 {
	if m != nil {
		return m.SchoolId
	}
	return 0
}

func (m *Book) GetCourseId() string {
	if m != nil {
		return m.CourseId
	}
	return ""
}

func (m *Book) GetUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Book) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Book) GetChapters() []*Chapter {
	if m != nil {
		return m.Chapters
	}
	return nil
}

type RetrieveBooksRequest struct {
	Limit    int32  `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Page     int32  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	CourseId string `protobuf:"bytes,3,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
}

func (m *RetrieveBooksRequest) Reset()      { *m = RetrieveBooksRequest{} }
func (*RetrieveBooksRequest) ProtoMessage() {}
func (*RetrieveBooksRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{54}
}
func (m *RetrieveBooksRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveBooksRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveBooksRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveBooksRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveBooksRequest.Merge(m, src)
}
func (m *RetrieveBooksRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveBooksRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveBooksRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveBooksRequest proto.InternalMessageInfo

func (m *RetrieveBooksRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *RetrieveBooksRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *RetrieveBooksRequest) GetCourseId() string {
	if m != nil {
		return m.CourseId
	}
	return ""
}

type RetrieveBooksResponse struct {
	Books []*Book `protobuf:"bytes,1,rep,name=books,proto3" json:"books,omitempty"`
	Total int32   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *RetrieveBooksResponse) Reset()      { *m = RetrieveBooksResponse{} }
func (*RetrieveBooksResponse) ProtoMessage() {}
func (*RetrieveBooksResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7445ec5448efcaa2, []int{55}
}
func (m *RetrieveBooksResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveBooksResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveBooksResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveBooksResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveBooksResponse.Merge(m, src)
}
func (m *RetrieveBooksResponse) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveBooksResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveBooksResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveBooksResponse proto.InternalMessageInfo

func (m *RetrieveBooksResponse) GetBooks() []*Book {
	if m != nil {
		return m.Books
	}
	return nil
}

func (m *RetrieveBooksResponse) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func init() {
	proto.RegisterEnum("manabie.bob.RetrieveStudentSubmissionsRequest_SubmissionOrderType", RetrieveStudentSubmissionsRequest_SubmissionOrderType_name, RetrieveStudentSubmissionsRequest_SubmissionOrderType_value)
	golang_proto.RegisterEnum("manabie.bob.RetrieveStudentSubmissionsRequest_SubmissionOrderType", RetrieveStudentSubmissionsRequest_SubmissionOrderType_name, RetrieveStudentSubmissionsRequest_SubmissionOrderType_value)
	proto.RegisterType((*AssignmentSubmission)(nil), "manabie.bob.AssignmentSubmission")
	golang_proto.RegisterType((*AssignmentSubmission)(nil), "manabie.bob.AssignmentSubmission")
	proto.RegisterType((*ListSubmissionsRequest)(nil), "manabie.bob.ListSubmissionsRequest")
	golang_proto.RegisterType((*ListSubmissionsRequest)(nil), "manabie.bob.ListSubmissionsRequest")
	proto.RegisterType((*ListSubmissionsResponse)(nil), "manabie.bob.ListSubmissionsResponse")
	golang_proto.RegisterType((*ListSubmissionsResponse)(nil), "manabie.bob.ListSubmissionsResponse")
	proto.RegisterType((*Attachment)(nil), "manabie.bob.Attachment")
	golang_proto.RegisterType((*Attachment)(nil), "manabie.bob.Attachment")
	proto.RegisterType((*ListTopicRequest)(nil), "manabie.bob.ListTopicRequest")
	golang_proto.RegisterType((*ListTopicRequest)(nil), "manabie.bob.ListTopicRequest")
	proto.RegisterType((*ListTopicResponse)(nil), "manabie.bob.ListTopicResponse")
	golang_proto.RegisterType((*ListTopicResponse)(nil), "manabie.bob.ListTopicResponse")
	proto.RegisterType((*ListTopicsRequest)(nil), "manabie.bob.ListTopicsRequest")
	golang_proto.RegisterType((*ListTopicsRequest)(nil), "manabie.bob.ListTopicsRequest")
	proto.RegisterType((*ListTopicsResponse)(nil), "manabie.bob.ListTopicsResponse")
	golang_proto.RegisterType((*ListTopicsResponse)(nil), "manabie.bob.ListTopicsResponse")
	proto.RegisterType((*ListTopicsResponse_Data)(nil), "manabie.bob.ListTopicsResponse.Data")
	golang_proto.RegisterType((*ListTopicsResponse_Data)(nil), "manabie.bob.ListTopicsResponse.Data")
	proto.RegisterType((*Topic)(nil), "manabie.bob.Topic")
	golang_proto.RegisterType((*Topic)(nil), "manabie.bob.Topic")
	proto.RegisterType((*Completenes)(nil), "manabie.bob.Completenes")
	golang_proto.RegisterType((*Completenes)(nil), "manabie.bob.Completenes")
	proto.RegisterType((*Question)(nil), "manabie.bob.Question")
	golang_proto.RegisterType((*Question)(nil), "manabie.bob.Question")
	proto.RegisterType((*LearningObjective)(nil), "manabie.bob.LearningObjective")
	golang_proto.RegisterType((*LearningObjective)(nil), "manabie.bob.LearningObjective")
	proto.RegisterType((*QuizSets)(nil), "manabie.bob.QuizSets")
	golang_proto.RegisterType((*QuizSets)(nil), "manabie.bob.QuizSets")
	proto.RegisterType((*UpsertLOsRequest)(nil), "manabie.bob.UpsertLOsRequest")
	golang_proto.RegisterType((*UpsertLOsRequest)(nil), "manabie.bob.UpsertLOsRequest")
	proto.RegisterType((*UpsertLOsResponse)(nil), "manabie.bob.UpsertLOsResponse")
	golang_proto.RegisterType((*UpsertLOsResponse)(nil), "manabie.bob.UpsertLOsResponse")
	proto.RegisterType((*SubmissionResult)(nil), "manabie.bob.SubmissionResult")
	golang_proto.RegisterType((*SubmissionResult)(nil), "manabie.bob.SubmissionResult")
	proto.RegisterType((*TakeTheQuizRequest)(nil), "manabie.bob.TakeTheQuizRequest")
	golang_proto.RegisterType((*TakeTheQuizRequest)(nil), "manabie.bob.TakeTheQuizRequest")
	proto.RegisterType((*TakeTheQuizResponse)(nil), "manabie.bob.TakeTheQuizResponse")
	golang_proto.RegisterType((*TakeTheQuizResponse)(nil), "manabie.bob.TakeTheQuizResponse")
	proto.RegisterType((*UpsertQuestionsRequest)(nil), "manabie.bob.UpsertQuestionsRequest")
	golang_proto.RegisterType((*UpsertQuestionsRequest)(nil), "manabie.bob.UpsertQuestionsRequest")
	proto.RegisterType((*UpsertQuestionsResponse)(nil), "manabie.bob.UpsertQuestionsResponse")
	golang_proto.RegisterType((*UpsertQuestionsResponse)(nil), "manabie.bob.UpsertQuestionsResponse")
	proto.RegisterType((*PresetStudyPlan)(nil), "manabie.bob.PresetStudyPlan")
	golang_proto.RegisterType((*PresetStudyPlan)(nil), "manabie.bob.PresetStudyPlan")
	proto.RegisterType((*UpsertPresetStudyPlansRequest)(nil), "manabie.bob.UpsertPresetStudyPlansRequest")
	golang_proto.RegisterType((*UpsertPresetStudyPlansRequest)(nil), "manabie.bob.UpsertPresetStudyPlansRequest")
	proto.RegisterType((*UpsertPresetStudyPlansResponse)(nil), "manabie.bob.UpsertPresetStudyPlansResponse")
	golang_proto.RegisterType((*UpsertPresetStudyPlansResponse)(nil), "manabie.bob.UpsertPresetStudyPlansResponse")
	proto.RegisterType((*PresetStudyPlanWeekly)(nil), "manabie.bob.PresetStudyPlanWeekly")
	golang_proto.RegisterType((*PresetStudyPlanWeekly)(nil), "manabie.bob.PresetStudyPlanWeekly")
	proto.RegisterType((*UpsertPresetStudyPlanWeekliesRequest)(nil), "manabie.bob.UpsertPresetStudyPlanWeekliesRequest")
	golang_proto.RegisterType((*UpsertPresetStudyPlanWeekliesRequest)(nil), "manabie.bob.UpsertPresetStudyPlanWeekliesRequest")
	proto.RegisterType((*UpsertPresetStudyPlanWeekliesResponse)(nil), "manabie.bob.UpsertPresetStudyPlanWeekliesResponse")
	golang_proto.RegisterType((*UpsertPresetStudyPlanWeekliesResponse)(nil), "manabie.bob.UpsertPresetStudyPlanWeekliesResponse")
	proto.RegisterType((*UpsertQuizRequest)(nil), "manabie.bob.UpsertQuizRequest")
	golang_proto.RegisterType((*UpsertQuizRequest)(nil), "manabie.bob.UpsertQuizRequest")
	proto.RegisterType((*UpsertQuizResponse)(nil), "manabie.bob.UpsertQuizResponse")
	golang_proto.RegisterType((*UpsertQuizResponse)(nil), "manabie.bob.UpsertQuizResponse")
	proto.RegisterType((*LocalGrade)(nil), "manabie.bob.LocalGrade")
	golang_proto.RegisterType((*LocalGrade)(nil), "manabie.bob.LocalGrade")
	proto.RegisterMapType((map[string]int32)(nil), "manabie.bob.LocalGrade.LocalGradeEntry")
	golang_proto.RegisterMapType((map[string]int32)(nil), "manabie.bob.LocalGrade.LocalGradeEntry")
	proto.RegisterType((*RetrieveGradeMapResponse)(nil), "manabie.bob.RetrieveGradeMapResponse")
	golang_proto.RegisterType((*RetrieveGradeMapResponse)(nil), "manabie.bob.RetrieveGradeMapResponse")
	proto.RegisterMapType((map[string]*LocalGrade)(nil), "manabie.bob.RetrieveGradeMapResponse.GradeMapEntry")
	golang_proto.RegisterMapType((map[string]*LocalGrade)(nil), "manabie.bob.RetrieveGradeMapResponse.GradeMapEntry")
	proto.RegisterType((*RetrieveGradeMapRequest)(nil), "manabie.bob.RetrieveGradeMapRequest")
	golang_proto.RegisterType((*RetrieveGradeMapRequest)(nil), "manabie.bob.RetrieveGradeMapRequest")
	proto.RegisterType((*GetHistoryQuizDetailRequest)(nil), "manabie.bob.GetHistoryQuizDetailRequest")
	golang_proto.RegisterType((*GetHistoryQuizDetailRequest)(nil), "manabie.bob.GetHistoryQuizDetailRequest")
	proto.RegisterType((*GetHistoryQuizDetailResponse)(nil), "manabie.bob.GetHistoryQuizDetailResponse")
	golang_proto.RegisterType((*GetHistoryQuizDetailResponse)(nil), "manabie.bob.GetHistoryQuizDetailResponse")
	proto.RegisterType((*SuggestLORequest)(nil), "manabie.bob.SuggestLORequest")
	golang_proto.RegisterType((*SuggestLORequest)(nil), "manabie.bob.SuggestLORequest")
	proto.RegisterType((*SuggestLOResponse)(nil), "manabie.bob.SuggestLOResponse")
	golang_proto.RegisterType((*SuggestLOResponse)(nil), "manabie.bob.SuggestLOResponse")
	proto.RegisterType((*Chapter)(nil), "manabie.bob.Chapter")
	golang_proto.RegisterType((*Chapter)(nil), "manabie.bob.Chapter")
	proto.RegisterType((*GetChapterListRequest)(nil), "manabie.bob.GetChapterListRequest")
	golang_proto.RegisterType((*GetChapterListRequest)(nil), "manabie.bob.GetChapterListRequest")
	proto.RegisterType((*GetChapterListResponse)(nil), "manabie.bob.GetChapterListResponse")
	golang_proto.RegisterType((*GetChapterListResponse)(nil), "manabie.bob.GetChapterListResponse")
	proto.RegisterType((*RetrieveCoursesRequest)(nil), "manabie.bob.RetrieveCoursesRequest")
	golang_proto.RegisterType((*RetrieveCoursesRequest)(nil), "manabie.bob.RetrieveCoursesRequest")
	proto.RegisterType((*RetrieveCoursesResponse)(nil), "manabie.bob.RetrieveCoursesResponse")
	golang_proto.RegisterType((*RetrieveCoursesResponse)(nil), "manabie.bob.RetrieveCoursesResponse")
	proto.RegisterType((*RetrieveCoursesResponse_Course)(nil), "manabie.bob.RetrieveCoursesResponse.Course")
	golang_proto.RegisterType((*RetrieveCoursesResponse_Course)(nil), "manabie.bob.RetrieveCoursesResponse.Course")
	proto.RegisterType((*RetrieveStudentSubmissionsRequest)(nil), "manabie.bob.RetrieveStudentSubmissionsRequest")
	golang_proto.RegisterType((*RetrieveStudentSubmissionsRequest)(nil), "manabie.bob.RetrieveStudentSubmissionsRequest")
	proto.RegisterType((*RetrieveStudentSubmissionsResponse)(nil), "manabie.bob.RetrieveStudentSubmissionsResponse")
	golang_proto.RegisterType((*RetrieveStudentSubmissionsResponse)(nil), "manabie.bob.RetrieveStudentSubmissionsResponse")
	proto.RegisterType((*QuestionV2)(nil), "manabie.bob.QuestionV2")
	golang_proto.RegisterType((*QuestionV2)(nil), "manabie.bob.QuestionV2")
	proto.RegisterType((*TakeTheQuizV2Response)(nil), "manabie.bob.TakeTheQuizV2Response")
	golang_proto.RegisterType((*TakeTheQuizV2Response)(nil), "manabie.bob.TakeTheQuizV2Response")
	proto.RegisterType((*Pagination)(nil), "manabie.bob.Pagination")
	golang_proto.RegisterType((*Pagination)(nil), "manabie.bob.Pagination")
	proto.RegisterType((*RetrieveLiveLessonRequest)(nil), "manabie.bob.RetrieveLiveLessonRequest")
	golang_proto.RegisterType((*RetrieveLiveLessonRequest)(nil), "manabie.bob.RetrieveLiveLessonRequest")
	proto.RegisterType((*Lesson)(nil), "manabie.bob.Lesson")
	golang_proto.RegisterType((*Lesson)(nil), "manabie.bob.Lesson")
	proto.RegisterType((*RetrieveLiveLessonResponse)(nil), "manabie.bob.RetrieveLiveLessonResponse")
	golang_proto.RegisterType((*RetrieveLiveLessonResponse)(nil), "manabie.bob.RetrieveLiveLessonResponse")
	proto.RegisterType((*RetrieveCoursesByIDsRequest)(nil), "manabie.bob.RetrieveCoursesByIDsRequest")
	golang_proto.RegisterType((*RetrieveCoursesByIDsRequest)(nil), "manabie.bob.RetrieveCoursesByIDsRequest")
	proto.RegisterType((*CreateBrightCoveUploadUrlRequest)(nil), "manabie.bob.CreateBrightCoveUploadUrlRequest")
	golang_proto.RegisterType((*CreateBrightCoveUploadUrlRequest)(nil), "manabie.bob.CreateBrightCoveUploadUrlRequest")
	proto.RegisterType((*CreateBrightCoveUploadUrlResponse)(nil), "manabie.bob.CreateBrightCoveUploadUrlResponse")
	golang_proto.RegisterType((*CreateBrightCoveUploadUrlResponse)(nil), "manabie.bob.CreateBrightCoveUploadUrlResponse")
	proto.RegisterType((*FinishUploadBrightCoveRequest)(nil), "manabie.bob.FinishUploadBrightCoveRequest")
	golang_proto.RegisterType((*FinishUploadBrightCoveRequest)(nil), "manabie.bob.FinishUploadBrightCoveRequest")
	proto.RegisterType((*FinishUploadBrightCoveResponse)(nil), "manabie.bob.FinishUploadBrightCoveResponse")
	golang_proto.RegisterType((*FinishUploadBrightCoveResponse)(nil), "manabie.bob.FinishUploadBrightCoveResponse")
	proto.RegisterType((*Book)(nil), "manabie.bob.Book")
	golang_proto.RegisterType((*Book)(nil), "manabie.bob.Book")
	proto.RegisterType((*RetrieveBooksRequest)(nil), "manabie.bob.RetrieveBooksRequest")
	golang_proto.RegisterType((*RetrieveBooksRequest)(nil), "manabie.bob.RetrieveBooksRequest")
	proto.RegisterType((*RetrieveBooksResponse)(nil), "manabie.bob.RetrieveBooksResponse")
	golang_proto.RegisterType((*RetrieveBooksResponse)(nil), "manabie.bob.RetrieveBooksResponse")
}

func init() { proto.RegisterFile("courses.proto", fileDescriptor_7445ec5448efcaa2) }
func init() { golang_proto.RegisterFile("courses.proto", fileDescriptor_7445ec5448efcaa2) }

var fileDescriptor_7445ec5448efcaa2 = []byte{
	// 3612 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x3b, 0x49, 0x6c, 0x1b, 0xd7,
	0xd9, 0x1e, 0x52, 0xa4, 0xc8, 0x8f, 0x5a, 0xa8, 0x67, 0x2d, 0x34, 0x6d, 0xd3, 0xd2, 0xc4, 0x89,
	0x15, 0x3b, 0x96, 0x62, 0x39, 0xc9, 0x9f, 0xfc, 0x7f, 0x16, 0x48, 0xf2, 0x12, 0xe5, 0x97, 0x2d,
	0x67, 0xb4, 0x04, 0x29, 0xd2, 0x4c, 0x46, 0xe4, 0x13, 0x35, 0xd5, 0x88, 0x33, 0x9e, 0xf7, 0x68,
	0x57, 0x3e, 0x15, 0x01, 0xd2, 0xf6, 0xd8, 0x4b, 0xd1, 0x63, 0x4f, 0x01, 0x7a, 0xee, 0xa9, 0xb7,
	0xa6, 0x3d, 0x15, 0xbd, 0x34, 0x3d, 0xa4, 0x08, 0xd0, 0x05, 0x8d, 0x7d, 0xe9, 0xa5, 0x40, 0xae,
	0xbd, 0x15, 0x6f, 0x9b, 0x8d, 0xc3, 0x45, 0x4e, 0x82, 0xb8, 0x40, 0x6f, 0x7c, 0xdf, 0xfb, 0xde,
	0xf6, 0xed, 0xcb, 0x10, 0x46, 0xeb, 0x6e, 0xdb, 0x27, 0x98, 0x2c, 0x78, 0xbe, 0x4b, 0x5d, 0x54,
	0x3a, 0xb4, 0x5a, 0xd6, 0xae, 0x8d, 0x17, 0x76, 0xdd, 0xdd, 0x2a, 0xe0, 0x56, 0xfb, 0x50, 0x4c,
	0x54, 0xa1, 0x4d, 0xb0, 0x2f, 0x7f, 0x9f, 0x6b, 0xba, 0x6e, 0xd3, 0xc1, 0x8b, 0x7c, 0xb4, 0xdb,
	0xde, 0x5b, 0xa4, 0xf6, 0x21, 0x26, 0xd4, 0x3a, 0xf4, 0x24, 0x42, 0x2d, 0x89, 0x70, 0xdf, 0xb7,
	0x3c, 0x0f, 0xfb, 0xf2, 0x94, 0xea, 0xe5, 0xa6, 0x4d, 0xf7, 0xdb, 0xbb, 0x0b, 0x75, 0xf7, 0x70,
	0xb1, 0xe9, 0x36, 0xdd, 0x10, 0x91, 0x8d, 0xf8, 0x80, 0xff, 0x12, 0xe8, 0xfa, 0x47, 0x19, 0x98,
	0x5c, 0x26, 0xc4, 0x6e, 0xb6, 0x0e, 0x71, 0x8b, 0x6e, 0xb6, 0x77, 0x0f, 0x6d, 0x42, 0x6c, 0xb7,
	0x85, 0x9e, 0x82, 0x51, 0x12, 0x8c, 0x4c, 0xbb, 0x51, 0xd1, 0x66, 0xb5, 0xf9, 0xa2, 0x31, 0x12,
	0x02, 0xd7, 0x1a, 0xe8, 0x14, 0x14, 0xa8, 0xeb, 0xd9, 0x75, 0x36, 0x9f, 0xe1, 0xf3, 0xc3, 0x7c,
	0xbc, 0xd6, 0x40, 0x67, 0x01, 0x08, 0x6d, 0x37, 0x70, 0x8b, 0xb2, 0xc9, 0x21, 0x3e, 0x59, 0x94,
	0x90, 0xb5, 0x06, 0xaa, 0xc0, 0x70, 0xdd, 0x6d, 0x51, 0xdc, 0xa2, 0x95, 0x9c, 0x58, 0x28, 0x87,
	0xe8, 0x15, 0x28, 0x59, 0x94, 0x5a, 0xf5, 0x7d, 0x76, 0x21, 0x52, 0xc9, 0xcf, 0x66, 0xe7, 0x4b,
	0x4b, 0x33, 0x0b, 0x11, 0xe2, 0x2d, 0x2c, 0x07, 0xf3, 0x46, 0x14, 0x17, 0xbd, 0x02, 0x50, 0xf7,
	0xb1, 0x45, 0x71, 0xc3, 0xb4, 0x68, 0xa5, 0x30, 0xab, 0xcd, 0x97, 0x96, 0xaa, 0x0b, 0x82, 0x60,
	0x0b, 0x8a, 0x0e, 0x0b, 0x5b, 0x8a, 0xa2, 0x46, 0x51, 0x62, 0x2f, 0x53, 0xfd, 0x63, 0x0d, 0xa6,
	0xd7, 0x6d, 0x12, 0xa1, 0x00, 0x31, 0xf0, 0xdd, 0x36, 0x26, 0x34, 0xf6, 0x48, 0x2d, 0xfe, 0xc8,
	0x73, 0x50, 0x0a, 0x1f, 0x49, 0x2a, 0x99, 0xd9, 0xec, 0x7c, 0xd1, 0x80, 0xe0, 0x95, 0x04, 0x4d,
	0x42, 0xce, 0xb1, 0x0f, 0x6d, 0x5a, 0xc9, 0xce, 0x6a, 0xf3, 0x39, 0x43, 0x0c, 0xd0, 0x2b, 0x50,
	0x74, 0xf7, 0xf6, 0x08, 0x0e, 0x48, 0x53, 0x5a, 0x3a, 0xd3, 0x71, 0xcd, 0x4d, 0xea, 0xdb, 0xad,
	0xe6, 0x8e, 0xe5, 0xb4, 0xb1, 0x51, 0x10, 0xe8, 0x6b, 0x0d, 0xfd, 0x7d, 0x98, 0xe9, 0xb8, 0x26,
	0xf1, 0xdc, 0x16, 0xc1, 0x68, 0x15, 0x4a, 0x21, 0x73, 0x48, 0x45, 0xe3, 0x84, 0x9b, 0x8b, 0x13,
	0x2e, 0x85, 0xd3, 0x46, 0x74, 0x95, 0xbe, 0x04, 0x10, 0x52, 0x17, 0x21, 0x18, 0x6a, 0x59, 0x87,
	0x58, 0x3e, 0x9b, 0xff, 0x46, 0x65, 0xc8, 0xb6, 0x7d, 0x47, 0xb2, 0x9b, 0xfd, 0xd4, 0x7f, 0xad,
	0x41, 0x99, 0x5d, 0x6a, 0x8b, 0x51, 0x45, 0x51, 0x6d, 0x81, 0x31, 0xb8, 0xdd, 0xa2, 0xfe, 0x11,
	0x5f, 0x3d, 0xb6, 0x34, 0x19, 0xbb, 0xc9, 0xaa, 0x98, 0x33, 0x14, 0x12, 0xa3, 0x54, 0xd3, 0xb7,
	0x1a, 0x58, 0x6e, 0x2c, 0x06, 0x6c, 0x17, 0xd2, 0xde, 0xfd, 0x1e, 0xae, 0x0b, 0x0a, 0x26, 0x77,
	0xd9, 0x14, 0x73, 0x86, 0x42, 0x42, 0x2f, 0x02, 0x08, 0x5e, 0xd1, 0x23, 0x0f, 0x73, 0xd2, 0x8e,
	0x2d, 0x4d, 0xc7, 0x96, 0xf0, 0x4b, 0x6e, 0x1d, 0x79, 0xd8, 0x28, 0x52, 0xf5, 0x53, 0x7f, 0x03,
	0x26, 0x22, 0x0f, 0x90, 0xf4, 0xbc, 0x08, 0x79, 0x8e, 0xa1, 0x48, 0x89, 0x3a, 0xf7, 0x31, 0x24,
	0x86, 0xfe, 0x4f, 0x2d, 0xb2, 0x03, 0xf9, 0x4f, 0xa4, 0x01, 0xba, 0x04, 0x13, 0xf7, 0x6d, 0xba,
	0x6f, 0xd6, 0xdd, 0x43, 0xcf, 0xc1, 0x14, 0xb7, 0x30, 0x21, 0x5c, 0x37, 0x0b, 0x46, 0x99, 0x4d,
	0xac, 0x46, 0xe0, 0xfa, 0x2f, 0x35, 0x40, 0xd1, 0xf7, 0x4a, 0x92, 0xbd, 0x9a, 0x20, 0xd9, 0xf9,
	0xd8, 0xb1, 0x9d, 0x0b, 0x16, 0xae, 0x59, 0xd4, 0x52, 0x44, 0xac, 0xbe, 0x0f, 0x43, 0x6c, 0x8c,
	0xe6, 0x21, 0xc7, 0x21, 0x9c, 0x68, 0xe9, 0x74, 0x17, 0x08, 0xe8, 0x39, 0x40, 0xd4, 0xa5, 0x96,
	0x63, 0xee, 0xd9, 0x2d, 0x9b, 0xec, 0xe3, 0x86, 0xe9, 0xb8, 0x84, 0x53, 0x2f, 0x67, 0x94, 0xf9,
	0xcc, 0x0d, 0x39, 0xb1, 0xee, 0x12, 0xfd, 0x67, 0x79, 0xc8, 0xf1, 0xe5, 0x68, 0x0c, 0x32, 0x81,
	0x32, 0x67, 0xec, 0x46, 0x20, 0xe7, 0x99, 0x88, 0x9c, 0x47, 0x98, 0x97, 0x3d, 0x16, 0xf3, 0x86,
	0xba, 0x30, 0x2f, 0x37, 0x08, 0xf3, 0x2e, 0xc2, 0x10, 0x67, 0x5b, 0xbe, 0x27, 0xdb, 0x38, 0x0e,
	0x33, 0x77, 0x6d, 0xaf, 0xa1, 0xcc, 0xdd, 0x70, 0x7f, 0x73, 0x27, 0xb1, 0x97, 0xe9, 0x57, 0xb0,
	0x94, 0xe8, 0x79, 0xc8, 0x13, 0x6a, 0xd1, 0x36, 0xa9, 0x14, 0xf9, 0x1d, 0x2b, 0x9d, 0x77, 0xdc,
	0xe4, 0xf3, 0x86, 0xc4, 0x63, 0xae, 0xa4, 0x61, 0x13, 0xcf, 0xb1, 0x8e, 0x4c, 0xd7, 0x6f, 0x60,
	0xbf, 0x02, 0x9c, 0x41, 0x23, 0x12, 0xb8, 0xc1, 0x60, 0xe8, 0x35, 0x18, 0xf1, 0xda, 0xbb, 0x8e,
	0xe0, 0xa2, 0x45, 0x2b, 0xa5, 0xbe, 0x77, 0x2a, 0x05, 0xf8, 0xcb, 0x14, 0x9d, 0x86, 0xa2, 0x90,
	0x04, 0x26, 0x00, 0x23, 0x7c, 0xff, 0x02, 0x07, 0xac, 0xbb, 0x84, 0xf9, 0xa2, 0xfa, 0xbe, 0xe5,
	0x51, 0xec, 0x33, 0x83, 0x3b, 0x2a, 0x7c, 0x91, 0x84, 0xac, 0x35, 0xd8, 0x5a, 0x52, 0xdf, 0x77,
	0x5d, 0x87, 0xcd, 0x8e, 0x89, 0xb5, 0x02, 0x20, 0x5c, 0x9c, 0x5d, 0x77, 0x5b, 0x26, 0xb3, 0x79,
	0xe3, 0xc2, 0xfa, 0xb3, 0xf1, 0xb6, 0xef, 0xa0, 0x59, 0x28, 0xd9, 0x2d, 0x42, 0xfd, 0x76, 0x9d,
	0xda, 0x6e, 0xab, 0x52, 0xe6, 0xb3, 0x51, 0x50, 0xd2, 0x97, 0x4d, 0x1c, 0xc3, 0x97, 0x5d, 0x83,
	0xf1, 0xba, 0xeb, 0xd9, 0xb8, 0x61, 0x06, 0xce, 0x07, 0x0d, 0xe0, 0x29, 0x46, 0xc5, 0xa2, 0x2d,
	0xe9, 0xa0, 0x9e, 0x86, 0x31, 0x4c, 0x88, 0x75, 0x64, 0xfa, 0xf8, 0x6e, 0xdb, 0xf6, 0x71, 0xa3,
	0x72, 0x92, 0x6b, 0xf4, 0x28, 0x87, 0x1a, 0x12, 0xa8, 0xff, 0x46, 0x83, 0x52, 0x44, 0xbf, 0x19,
	0xc7, 0xee, 0xb6, 0xed, 0x07, 0x81, 0x5a, 0x71, 0x55, 0x29, 0x18, 0x23, 0x0c, 0xa8, 0x34, 0x8a,
	0xed, 0x7d, 0xcf, 0x6e, 0x60, 0x37, 0xc4, 0xca, 0x88, 0xbd, 0x39, 0x34, 0x40, 0x7b, 0x1e, 0x26,
	0x99, 0x43, 0x3c, 0x32, 0x9b, 0x6d, 0xbb, 0x81, 0x43, 0xe4, 0x2c, 0x47, 0x46, 0x7c, 0xee, 0x26,
	0x9b, 0x0a, 0x56, 0xbc, 0x00, 0xd3, 0x7b, 0xb6, 0x4f, 0xa8, 0xc9, 0xef, 0x50, 0x77, 0x7d, 0x1f,
	0xd7, 0x29, 0x37, 0x47, 0x4c, 0xb5, 0x32, 0xc6, 0x24, 0x9f, 0x7d, 0xbb, 0x6d, 0x3f, 0x58, 0x0d,
	0xe7, 0xf4, 0xbf, 0xe5, 0xa0, 0xf0, 0x36, 0x33, 0xbb, 0x8c, 0xf0, 0x49, 0x05, 0x7f, 0x0e, 0xd0,
	0xa1, 0x45, 0x98, 0x00, 0xdc, 0x95, 0x28, 0x61, 0xc8, 0x52, 0x16, 0x33, 0x6a, 0xed, 0x5a, 0xe3,
	0xd8, 0xaa, 0x5f, 0x85, 0x82, 0xda, 0x56, 0x6a, 0x7f, 0x30, 0x66, 0x81, 0x8e, 0xd5, 0x22, 0xf7,
	0xb1, 0xcf, 0x8c, 0x29, 0x0b, 0x0f, 0xd4, 0x90, 0x89, 0x0f, 0xfe, 0xbe, 0xe7, 0x58, 0x2d, 0x8b,
	0x2f, 0xcc, 0x0b, 0xf1, 0x89, 0x80, 0xd0, 0xb3, 0x50, 0x6e, 0xd8, 0x7b, 0x7b, 0x76, 0xbd, 0xed,
	0xd0, 0x23, 0xd3, 0xc1, 0xf7, 0xb0, 0xc3, 0xd5, 0x3c, 0x67, 0x8c, 0x87, 0xf0, 0x75, 0x06, 0x4e,
	0xd8, 0x82, 0xc2, 0xe3, 0xdb, 0x82, 0xe2, 0x71, 0x6c, 0xc1, 0x3c, 0x94, 0xd5, 0x43, 0x89, 0x49,
	0xad, 0xa6, 0xe9, 0xb8, 0x15, 0xe0, 0xaf, 0x1c, 0x0b, 0xe0, 0x5b, 0x56, 0x73, 0xdd, 0x65, 0xde,
	0x25, 0xa0, 0xbc, 0x8f, 0x5b, 0x0d, 0xcc, 0x64, 0xb1, 0x24, 0xe8, 0xaf, 0x26, 0x0c, 0x09, 0x67,
	0xef, 0x96, 0x44, 0x0a, 0x71, 0x47, 0xf8, 0xb6, 0xe3, 0x12, 0x1e, 0xa0, 0x5e, 0x81, 0xc9, 0x08,
	0xc5, 0x42, 0x74, 0xa1, 0xe4, 0x27, 0x23, 0x73, 0x91, 0x25, 0x53, 0x36, 0x31, 0xef, 0x5b, 0x36,
	0xb5, 0x5b, 0x4d, 0x73, 0xcf, 0xf5, 0xe5, 0x2a, 0xae, 0xfa, 0x05, 0x03, 0xd9, 0xe4, 0x1d, 0x31,
	0x77, 0xc3, 0xf5, 0xc5, 0x22, 0xf4, 0x32, 0x54, 0xa2, 0xa7, 0xdc, 0xf7, 0xdd, 0x56, 0xd3, 0x14,
	0x57, 0xa9, 0x8c, 0xf3, 0x8b, 0x4d, 0x47, 0xe6, 0xdf, 0x61, 0xd3, 0xcb, 0x7c, 0x16, 0xad, 0xc1,
	0x5c, 0xb7, 0x95, 0xe1, 0x65, 0xcb, 0x7c, 0x8b, 0x5a, 0xfa, 0x16, 0xea, 0xde, 0xfa, 0x67, 0x43,
	0x30, 0xb1, 0x8e, 0x2d, 0xbf, 0x65, 0xb7, 0x9a, 0x1b, 0xdc, 0x5b, 0xd8, 0xf7, 0xf0, 0x13, 0xec,
	0xca, 0x3a, 0xcc, 0x7e, 0x3e, 0xc5, 0xec, 0x4f, 0x42, 0x8e, 0x9b, 0x0b, 0x2e, 0xd7, 0x45, 0x43,
	0x0c, 0x54, 0x5c, 0x2d, 0x6d, 0x06, 0x17, 0x67, 0x19, 0x57, 0x0b, 0x53, 0x11, 0x8b, 0xc9, 0x8b,
	0xf1, 0x98, 0xfc, 0x34, 0x14, 0xa5, 0xaa, 0x73, 0x61, 0xe4, 0xda, 0x28, 0x00, 0xeb, 0x2e, 0x9a,
	0x83, 0x11, 0x61, 0xb3, 0x48, 0xdd, 0xb7, 0x3d, 0x2a, 0x25, 0xb0, 0xc4, 0x61, 0x9b, 0x1c, 0x84,
	0xce, 0xc3, 0xa8, 0xe7, 0x63, 0x6e, 0x2f, 0x89, 0x4d, 0x31, 0x91, 0x92, 0x17, 0x07, 0x26, 0xf4,
	0x6d, 0xf4, 0xf1, 0xf5, 0x6d, 0xec, 0x38, 0xfa, 0x16, 0xf3, 0x54, 0xe3, 0x09, 0x4f, 0xf5, 0x92,
	0x0c, 0x1d, 0xca, 0x9c, 0x39, 0x7a, 0x3c, 0xf4, 0x4a, 0xca, 0x4d, 0x18, 0x46, 0xe8, 0x7f, 0xd6,
	0x98, 0xe1, 0xb4, 0x1f, 0x6c, 0x62, 0x4a, 0xd0, 0x49, 0xc8, 0x39, 0x6e, 0x98, 0xe9, 0x0c, 0x39,
	0xae, 0x48, 0x73, 0x3a, 0xcd, 0x26, 0xdc, 0x0d, 0x0d, 0x66, 0x07, 0xab, 0xb3, 0x22, 0x59, 0x8c,
	0xb1, 0x3a, 0x4e, 0xb2, 0xa1, 0xc7, 0x27, 0x59, 0xee, 0x38, 0x89, 0x5d, 0x1d, 0xca, 0xdb, 0x1e,
	0xc1, 0x3e, 0x5d, 0xdf, 0x08, 0xe2, 0xf2, 0x0d, 0x38, 0xe9, 0x48, 0x82, 0x98, 0xae, 0xa2, 0x88,
	0x8a, 0x59, 0x6b, 0xbd, 0x09, 0x67, 0x20, 0x27, 0x09, 0x22, 0xfa, 0x45, 0x98, 0x88, 0x1c, 0x22,
	0x83, 0xe1, 0x29, 0xc8, 0x73, 0x52, 0x8a, 0x8d, 0x8b, 0x46, 0x8e, 0xd1, 0x92, 0xe8, 0xb7, 0xa0,
	0x1c, 0x49, 0xbe, 0x30, 0x69, 0x3b, 0x34, 0x49, 0x60, 0xad, 0x83, 0xc0, 0x3c, 0x5d, 0xe6, 0xbe,
	0x4e, 0x3a, 0x59, 0x35, 0xd4, 0x37, 0x01, 0x6d, 0x59, 0x07, 0x78, 0x6b, 0x1f, 0x33, 0x1e, 0xaa,
	0x17, 0xa6, 0xb2, 0x31, 0x48, 0x46, 0x33, 0xd1, 0x64, 0x14, 0xc1, 0x90, 0x67, 0x35, 0xb1, 0xcc,
	0x50, 0xf9, 0x6f, 0xfd, 0x3d, 0x38, 0x19, 0xdb, 0x54, 0xbe, 0x68, 0x11, 0x86, 0x99, 0x4b, 0x26,
	0x98, 0x4a, 0x5a, 0x4d, 0xc5, 0x68, 0xa5, 0x3c, 0xa8, 0xa1, 0xb0, 0xd8, 0x89, 0x3c, 0x08, 0x53,
	0x27, 0xf2, 0x81, 0x7e, 0x0b, 0xa6, 0x05, 0xb5, 0xd4, 0x82, 0x80, 0x31, 0x57, 0xa1, 0x18, 0xf8,
	0x8d, 0xde, 0x47, 0x84, 0x78, 0xfa, 0xab, 0x30, 0xd3, 0xb1, 0x9d, 0xbc, 0xf0, 0x1c, 0x8c, 0x44,
	0xe8, 0xaa, 0x18, 0x51, 0x0a, 0x09, 0x4b, 0xf4, 0xbf, 0x64, 0x60, 0xfc, 0x8e, 0x8f, 0x09, 0xa6,
	0x9b, 0xcc, 0xbc, 0xdc, 0x71, 0xac, 0xd6, 0x13, 0x6c, 0x53, 0xe3, 0x8a, 0x90, 0x3f, 0x8e, 0xed,
	0xf8, 0x6a, 0xd9, 0x02, 0xa1, 0x96, 0x4f, 0x4d, 0x06, 0x18, 0x24, 0xb8, 0xe0, 0xd8, 0xd7, 0x2c,
	0x8a, 0xf5, 0x03, 0x38, 0x2b, 0x98, 0x93, 0xa0, 0x71, 0xc0, 0xf2, 0xb7, 0x00, 0x79, 0x7c, 0xca,
	0x14, 0x16, 0x9f, 0xb9, 0x40, 0xc5, 0xfb, 0x33, 0x31, 0x62, 0x24, 0x76, 0x30, 0xca, 0x5e, 0x62,
	0x4b, 0x7d, 0x13, 0x6a, 0xdd, 0x0e, 0x93, 0x02, 0x71, 0x05, 0xa6, 0x3a, 0x4e, 0x8b, 0x48, 0x06,
	0x4a, 0x6c, 0xc9, 0x04, 0xe4, 0x47, 0x1a, 0x4c, 0x25, 0xf6, 0x7b, 0x07, 0xe3, 0x03, 0xe7, 0xa8,
	0x43, 0x4c, 0x7a, 0x54, 0xc3, 0x16, 0x61, 0x32, 0xed, 0x5c, 0x69, 0x27, 0x27, 0x3a, 0x8e, 0x65,
	0x22, 0x77, 0x1f, 0xe3, 0x03, 0x2e, 0x2d, 0x39, 0x83, 0xff, 0x66, 0x37, 0x39, 0x9f, 0xfa, 0x3e,
	0x7e, 0x1f, 0x1b, 0x07, 0x34, 0x35, 0xa1, 0xda, 0x79, 0xda, 0x7d, 0x89, 0x24, 0x69, 0xab, 0xf7,
	0xa2, 0xad, 0x78, 0xa0, 0x31, 0xe3, 0xa5, 0x9f, 0xa3, 0x37, 0xe1, 0xe9, 0x3e, 0x17, 0x91, 0xf4,
	0x7e, 0x1d, 0xce, 0x74, 0xb9, 0xc9, 0x51, 0x84, 0xec, 0x95, 0xb4, 0x73, 0x8e, 0x18, 0xf1, 0x6f,
	0x28, 0xc3, 0x1a, 0x35, 0x6e, 0x57, 0x58, 0xb8, 0xcd, 0x0d, 0x4c, 0x37, 0x23, 0x21, 0x9c, 0x99,
	0x11, 0xa0, 0xe9, 0x2f, 0x00, 0x8a, 0xee, 0x23, 0x6f, 0x57, 0x03, 0x20, 0xed, 0x7a, 0x1d, 0x13,
	0xb2, 0xd7, 0x76, 0x64, 0x8e, 0x13, 0x81, 0xe8, 0x3f, 0xd5, 0x00, 0xd6, 0xdd, 0xba, 0xe5, 0xdc,
	0xe4, 0xca, 0xfa, 0x26, 0x94, 0x1c, 0x36, 0x32, 0x85, 0x22, 0x8b, 0xa3, 0x2f, 0xc4, 0xdd, 0x45,
	0x80, 0x1d, 0xf9, 0x79, 0x9d, 0x5b, 0x02, 0x70, 0x02, 0x40, 0xf5, 0x35, 0x18, 0x4f, 0x4c, 0xa3,
	0x32, 0x64, 0x0f, 0xf0, 0x91, 0x94, 0x26, 0xf6, 0x93, 0x87, 0x46, 0x2c, 0xa7, 0x53, 0xc6, 0x93,
	0x0f, 0xfe, 0x37, 0xf3, 0xb2, 0xa6, 0xff, 0x56, 0x83, 0x8a, 0x81, 0xa9, 0x6f, 0xe3, 0x7b, 0x98,
	0x6f, 0x71, 0xcb, 0xf2, 0x82, 0x47, 0xdd, 0x81, 0x22, 0xbf, 0x9f, 0x79, 0x68, 0x79, 0xf2, 0x8e,
	0x57, 0x63, 0x77, 0xec, 0xb6, 0x72, 0x41, 0x01, 0xc4, 0x7d, 0x0b, 0x4d, 0x39, 0xac, 0x6e, 0xc1,
	0x68, 0x6c, 0x2a, 0xe5, 0xae, 0x97, 0xa3, 0x77, 0x4d, 0xa6, 0xb8, 0xe1, 0x53, 0xa3, 0x8f, 0x38,
	0x05, 0x33, 0x9d, 0x37, 0xe1, 0x0c, 0xd6, 0xb7, 0xe1, 0xf4, 0x4d, 0x4c, 0xdf, 0xb4, 0x09, 0x75,
	0xfd, 0x23, 0xc6, 0xb1, 0x6b, 0x98, 0x5a, 0xb6, 0xa3, 0xf8, 0x1f, 0x2f, 0x2d, 0x6b, 0xc9, 0xd2,
	0xf2, 0x8c, 0xf0, 0x52, 0xa1, 0x16, 0xe6, 0xd9, 0x70, 0xad, 0xa1, 0xff, 0x5c, 0x83, 0x33, 0xe9,
	0xfb, 0x06, 0xd6, 0x21, 0xcc, 0xe3, 0x44, 0xed, 0xa9, 0x8b, 0xf7, 0x09, 0xd3, 0xbb, 0x0b, 0x30,
	0x4e, 0xb0, 0x83, 0xeb, 0xdc, 0xac, 0x8a, 0x84, 0x40, 0xb0, 0x6b, 0x4c, 0x81, 0x65, 0x22, 0x90,
	0x1a, 0x22, 0x25, 0xa2, 0x61, 0xfd, 0x12, 0x8b, 0x0d, 0x9a, 0x4d, 0x4c, 0xe8, 0xfa, 0x86, 0x7a,
	0xed, 0x0c, 0x0c, 0x3b, 0xae, 0x19, 0x29, 0xc3, 0xe6, 0x1d, 0xf7, 0xb6, 0x75, 0x88, 0xf5, 0x2d,
	0x98, 0x88, 0x20, 0xcb, 0x27, 0xbc, 0x01, 0x25, 0x22, 0x80, 0xbc, 0x12, 0x32, 0x58, 0x48, 0x03,
	0x72, 0xc9, 0xba, 0x4b, 0xf4, 0x8f, 0xb3, 0x30, 0xbc, 0x2a, 0x4a, 0x23, 0x89, 0xba, 0x89, 0x96,
	0xac, 0x9b, 0xcc, 0xc1, 0x88, 0x9a, 0x8e, 0xb8, 0xc7, 0x92, 0x84, 0xdd, 0x7e, 0x1c, 0x2f, 0x19,
	0xf1, 0x87, 0x43, 0x83, 0xf8, 0xc3, 0xc0, 0xab, 0xe6, 0xa2, 0x5e, 0x75, 0xa0, 0xcc, 0x23, 0x2c,
	0xef, 0x0e, 0xf7, 0x2b, 0xef, 0x7e, 0x4b, 0xd9, 0x75, 0x2c, 0xda, 0x87, 0x78, 0xb4, 0xaf, 0xff,
	0x4b, 0x83, 0xa9, 0x9b, 0x98, 0x4a, 0x56, 0xad, 0xdb, 0x84, 0x46, 0xd4, 0xe3, 0x2b, 0x72, 0x2d,
	0xd6, 0xb5, 0x18, 0x4d, 0x06, 0x8a, 0x43, 0x1c, 0xc8, 0x7f, 0x1f, 0x3b, 0x7e, 0x09, 0xf8, 0x95,
	0x4f, 0x44, 0x41, 0x4a, 0x4a, 0x86, 0x07, 0x90, 0x12, 0xfd, 0x03, 0x98, 0x4e, 0x3e, 0x5d, 0x8a,
	0xff, 0xf3, 0x50, 0x90, 0x0f, 0x51, 0xb2, 0x9f, 0xd8, 0x4a, 0x4c, 0x1a, 0x01, 0x56, 0x3c, 0x44,
	0x1d, 0x55, 0x21, 0xea, 0xef, 0xb3, 0x30, 0xad, 0xac, 0xd3, 0xaa, 0xe8, 0xe2, 0x29, 0xf2, 0x0e,
	0x12, 0x1c, 0x2e, 0x0d, 0x24, 0xf6, 0x2b, 0x99, 0x8a, 0xf6, 0x75, 0x8b, 0x7e, 0xc0, 0xba, 0x7c,
	0x5a, 0x8c, 0x3f, 0x1c, 0xc6, 0xf8, 0x68, 0x09, 0x8a, 0xe2, 0x68, 0x16, 0x13, 0x14, 0x66, 0xb3,
	0x5d, 0xc9, 0x1e, 0xa2, 0xa1, 0x97, 0xa1, 0x24, 0x7a, 0x9a, 0xa2, 0xb7, 0x20, 0x0a, 0xc0, 0x33,
	0xc9, 0x55, 0x3e, 0x11, 0xe9, 0x25, 0xd4, 0x83, 0xdf, 0xe8, 0x75, 0xd5, 0x0d, 0x35, 0x65, 0xf1,
	0x18, 0xf8, 0xda, 0x53, 0x29, 0x6b, 0x65, 0xf5, 0x78, 0xa4, 0x1e, 0x19, 0xb1, 0x0c, 0xc9, 0x26,
	0xa6, 0xc5, 0xfb, 0x57, 0xb2, 0x72, 0x54, 0x30, 0xc0, 0x26, 0xcb, 0x12, 0xc2, 0x82, 0xaf, 0xba,
	0x63, 0x11, 0xc2, 0x64, 0x5e, 0xd4, 0x7f, 0x87, 0xf9, 0x78, 0xad, 0xa1, 0xff, 0x29, 0x1f, 0xba,
	0x9a, 0x80, 0x99, 0x52, 0x60, 0xae, 0x73, 0x4e, 0x31, 0x90, 0x94, 0x97, 0x4b, 0xa9, 0xbe, 0x32,
	0xb1, 0x4c, 0xde, 0xd4, 0x50, 0x6b, 0xd3, 0x13, 0x9d, 0xea, 0x5f, 0x73, 0x90, 0x17, 0x98, 0xdf,
	0x48, 0x4a, 0xf1, 0xf5, 0x48, 0x4c, 0x54, 0x65, 0xf2, 0x03, 0xa9, 0xcc, 0xb7, 0xd3, 0x77, 0x88,
	0x59, 0xc3, 0x62, 0x67, 0x95, 0x3e, 0xe0, 0x3e, 0xc4, 0xb8, 0x9f, 0x48, 0x5e, 0x4a, 0xc7, 0x48,
	0x5e, 0xd0, 0x8b, 0x50, 0xc0, 0xad, 0x86, 0x58, 0x38, 0xd2, 0x77, 0xe1, 0x30, 0x6e, 0x35, 0xf8,
	0xb2, 0x84, 0x96, 0x8c, 0x0e, 0xae, 0x25, 0x2f, 0x42, 0x81, 0x62, 0xab, 0xbe, 0xcf, 0x78, 0x31,
	0xc6, 0x79, 0x11, 0x57, 0x90, 0x15, 0x8b, 0xd8, 0xf5, 0x3b, 0xbe, 0xbb, 0x67, 0x3b, 0xd8, 0x08,
	0x50, 0x3b, 0x95, 0x6b, 0xfc, 0x78, 0xca, 0x75, 0x1a, 0x8a, 0x8a, 0x7a, 0x84, 0x17, 0x23, 0x73,
	0x46, 0x41, 0x92, 0x8f, 0x30, 0xd2, 0xee, 0xba, 0xee, 0x01, 0x9f, 0x9b, 0x10, 0x15, 0x6c, 0x36,
	0x66, 0xd1, 0xf9, 0x1f, 0x33, 0x30, 0xa7, 0x34, 0x64, 0x53, 0xc4, 0x5f, 0x29, 0xfd, 0xf3, 0x3e,
	0xe1, 0xda, 0x8e, 0x2c, 0x5b, 0x65, 0xf8, 0x9d, 0x57, 0x52, 0xd5, 0xaf, 0xeb, 0xe6, 0x0b, 0x21,
	0x88, 0x7b, 0xf5, 0x48, 0x77, 0x2c, 0xbd, 0xf5, 0x1e, 0x75, 0x62, 0xca, 0x12, 0x06, 0xc5, 0x92,
	0x5c, 0x58, 0x2c, 0xd1, 0xef, 0xc1, 0xc9, 0x94, 0xbd, 0x51, 0x0d, 0xaa, 0x9b, 0xdb, 0x2b, 0xb7,
	0xd6, 0x36, 0x37, 0xd7, 0x36, 0x6e, 0x9b, 0x1b, 0xc6, 0xb5, 0xeb, 0x86, 0xb9, 0xf5, 0xee, 0x9d,
	0xeb, 0xe6, 0xed, 0x8d, 0xdb, 0xd7, 0xcb, 0x27, 0xd0, 0x39, 0x38, 0x9d, 0x3e, 0x7f, 0x63, 0xcd,
	0xd8, 0xdc, 0x2a, 0x6b, 0xdd, 0x37, 0x58, 0x5f, 0xde, 0xdc, 0x2a, 0x67, 0x58, 0x92, 0xa7, 0xf7,
	0x7a, 0xb6, 0xb4, 0x5b, 0xff, 0x9f, 0xd6, 0xec, 0x7f, 0x36, 0x46, 0xbc, 0x5e, 0xa1, 0x6e, 0xac,
	0xe9, 0xdf, 0xa5, 0x4c, 0xf3, 0xab, 0x1c, 0x80, 0x8a, 0x78, 0x77, 0x96, 0xfe, 0xdb, 0x52, 0x79,
	0xd2, 0x5a, 0x2a, 0xd1, 0xe2, 0x56, 0xdb, 0x77, 0x54, 0x2d, 0x5b, 0xc1, 0xb6, 0x7d, 0x87, 0x79,
	0x4d, 0xd5, 0x48, 0x61, 0x18, 0xa2, 0x92, 0x0d, 0x12, 0xc4, 0x10, 0x2e, 0xc0, 0x78, 0xb4, 0x3d,
	0xc1, 0x90, 0x44, 0xe7, 0x64, 0x2c, 0x02, 0x66, 0x88, 0xbd, 0x3a, 0x20, 0x63, 0x3d, 0x3b, 0x20,
	0x6f, 0xc0, 0x99, 0xae, 0x1d, 0x10, 0xd1, 0x54, 0x65, 0xab, 0x4f, 0xa5, 0xaf, 0x66, 0x47, 0x77,
	0xed, 0xd7, 0x94, 0xbb, 0xf5, 0x6b, 0xf4, 0x0f, 0x60, 0x2a, 0x52, 0xbf, 0xdc, 0x59, 0x8a, 0x64,
	0x78, 0x89, 0x0a, 0xe6, 0x4c, 0x6a, 0x82, 0xb7, 0xb3, 0xd4, 0xaf, 0x86, 0xf9, 0x12, 0xc0, 0x1d,
	0xab, 0x69, 0x4b, 0xa9, 0x0a, 0x6c, 0x8d, 0x96, 0x66, 0x6b, 0x32, 0x91, 0xca, 0xea, 0x1f, 0x34,
	0x38, 0xa5, 0xd4, 0x7b, 0xdd, 0xbe, 0x87, 0xd7, 0x31, 0x21, 0x6e, 0x2b, 0x1a, 0xba, 0x0b, 0x43,
	0x1e, 0x16, 0x47, 0x8a, 0x02, 0xc2, 0x4c, 0xf1, 0xff, 0x00, 0x78, 0xc1, 0xa1, 0xa9, 0xa9, 0x76,
	0x78, 0x27, 0x23, 0x82, 0x8a, 0x16, 0x60, 0x68, 0xcf, 0x77, 0x0f, 0xb9, 0xea, 0xf5, 0x96, 0x44,
	0x8e, 0x87, 0x2e, 0x42, 0x86, 0xba, 0x03, 0x94, 0xe8, 0x33, 0xd4, 0xd5, 0x3f, 0xcb, 0x42, 0x5e,
	0xbc, 0x82, 0xf9, 0x11, 0x87, 0xff, 0x0a, 0x0d, 0x7d, 0x41, 0x00, 0xd6, 0x1a, 0xe1, 0x57, 0x1d,
	0x99, 0x7e, 0x5f, 0x75, 0x04, 0x1e, 0x9b, 0xda, 0x87, 0x78, 0x80, 0x3b, 0x0b, 0x8f, 0xcd, 0xc6,
	0xca, 0x63, 0xf3, 0x85, 0x43, 0x03, 0x79, 0x6c, 0xbe, 0xac, 0x5f, 0x99, 0x4a, 0x38, 0x86, 0xae,
	0x65, 0x2a, 0x74, 0x25, 0xf8, 0x26, 0x22, 0x9f, 0xe2, 0x79, 0x05, 0x75, 0x12, 0x1f, 0x45, 0x5c,
	0x85, 0x61, 0xe9, 0xbf, 0x65, 0xfe, 0xd9, 0xc3, 0xd3, 0x2b, 0x4c, 0x96, 0xd8, 0xca, 0xaf, 0x1c,
	0x58, 0x0e, 0x8f, 0x7d, 0x6e, 0x95, 0x72, 0xc6, 0x88, 0xf8, 0xd2, 0x41, 0xc0, 0xb8, 0x37, 0x57,
	0x42, 0x24, 0x9b, 0x63, 0x05, 0x25, 0x43, 0x68, 0x1e, 0xc6, 0xda, 0x04, 0xfb, 0x66, 0xe8, 0xef,
	0x99, 0x71, 0xc9, 0xf1, 0x54, 0x64, 0x84, 0xcd, 0xac, 0x4a, 0xbf, 0xaf, 0x5b, 0x50, 0x4d, 0x13,
	0x54, 0xa9, 0x48, 0x97, 0x61, 0x58, 0x70, 0x56, 0xf9, 0x9e, 0x93, 0x29, 0x4f, 0x36, 0x14, 0x4e,
	0x17, 0x25, 0x5a, 0x84, 0xd3, 0x89, 0x00, 0x7b, 0xe5, 0x68, 0xed, 0x5a, 0x10, 0x38, 0x94, 0x21,
	0x1b, 0xaa, 0x01, 0xfb, 0xa9, 0xbf, 0x04, 0xb3, 0xab, 0xdc, 0x52, 0xae, 0xf8, 0x76, 0x73, 0x9f,
	0xae, 0xba, 0xf7, 0xf0, 0xb6, 0xe7, 0xb8, 0x56, 0x63, 0xdb, 0x0f, 0xaa, 0x43, 0x29, 0xdf, 0xac,
	0xe9, 0x1f, 0x69, 0x30, 0xd7, 0x63, 0xa1, 0x7c, 0x13, 0x0b, 0x54, 0x78, 0x32, 0xc1, 0xed, 0x92,
	0x0a, 0x54, 0x38, 0x84, 0xd9, 0xa1, 0x67, 0x60, 0xdc, 0xf2, 0x6c, 0xfe, 0x25, 0x05, 0x26, 0xd4,
	0x0c, 0x3f, 0x82, 0x1b, 0xb5, 0x3c, 0x5b, 0x9e, 0xce, 0xf0, 0x4e, 0x41, 0x41, 0xf4, 0x18, 0x83,
	0xfa, 0xee, 0x30, 0x1f, 0xaf, 0x35, 0xf4, 0x5d, 0x38, 0x2b, 0xbe, 0x72, 0x10, 0x87, 0x87, 0x97,
	0x51, 0x97, 0x4f, 0x39, 0x43, 0xeb, 0x77, 0x46, 0x26, 0x7e, 0xc6, 0x2c, 0xd4, 0xba, 0x9d, 0x21,
	0xde, 0xa9, 0x7f, 0x98, 0x85, 0xa1, 0x15, 0xd7, 0x3d, 0x78, 0x82, 0x93, 0x92, 0x58, 0xb0, 0x9f,
	0x4f, 0x04, 0xfb, 0x31, 0x01, 0x1f, 0x4e, 0x08, 0xf8, 0xb7, 0xe3, 0xb5, 0xa3, 0x49, 0x14, 0x0c,
	0x92, 0x44, 0xe9, 0xdf, 0x85, 0x49, 0x25, 0xfb, 0x8c, 0x17, 0x81, 0xd0, 0x0f, 0xec, 0x4a, 0xe2,
	0x64, 0xc8, 0xc6, 0xc9, 0xa0, 0xef, 0xc0, 0x54, 0x62, 0x7b, 0x29, 0xe4, 0x17, 0x20, 0xc7, 0xc2,
	0x77, 0xa5, 0xb6, 0x13, 0x71, 0xab, 0xe3, 0xba, 0x07, 0x86, 0x98, 0x4f, 0x57, 0xd9, 0xa5, 0x4f,
	0xca, 0x41, 0x4a, 0xbb, 0x01, 0xc5, 0xe0, 0x8b, 0x3e, 0x74, 0x36, 0xfd, 0x4b, 0x3f, 0xf9, 0xaa,
	0x6a, 0xad, 0xdb, 0xb4, 0x14, 0xc9, 0xec, 0x8f, 0x33, 0x1a, 0x32, 0x00, 0xc2, 0x4f, 0x04, 0x51,
	0xad, 0xeb, 0xb7, 0x83, 0x62, 0xcb, 0x73, 0x7d, 0xbe, 0x2d, 0x14, 0x7b, 0xbe, 0x05, 0xc5, 0xa0,
	0x33, 0x9b, 0xb8, 0x64, 0xb2, 0x2d, 0x9c, 0xb8, 0x64, 0x67, 0x43, 0x77, 0x07, 0xc6, 0xc2, 0x26,
	0x02, 0xef, 0x96, 0xa7, 0xad, 0x88, 0x74, 0x2a, 0x12, 0x77, 0xec, 0xec, 0x40, 0x88, 0x3b, 0x6e,
	0x43, 0x29, 0x12, 0xad, 0xa0, 0xf8, 0xa2, 0xce, 0xe6, 0x6e, 0x75, 0xb6, 0x3b, 0x42, 0x74, 0xdb,
	0x77, 0x61, 0x34, 0x16, 0x04, 0xf5, 0xdf, 0x58, 0xef, 0x86, 0x10, 0x46, 0x50, 0x62, 0x6b, 0x0b,
	0xc6, 0x13, 0x2d, 0x57, 0xf4, 0x54, 0xea, 0x53, 0xe3, 0xfd, 0xdd, 0xea, 0xf9, 0xde, 0x48, 0xd1,
	0x23, 0x3c, 0x98, 0x4c, 0x4b, 0x60, 0xd0, 0xfc, 0x00, 0x39, 0x8e, 0x38, 0x6c, 0xf0, 0x6c, 0x48,
	0x9c, 0x78, 0x57, 0xb5, 0xa5, 0x93, 0xdd, 0x43, 0x74, 0x31, 0xe5, 0xda, 0x5d, 0xfa, 0x99, 0xd5,
	0x4b, 0x03, 0xe1, 0x4a, 0x89, 0xfa, 0xa1, 0xd6, 0xa5, 0x3d, 0xaa, 0x1a, 0x69, 0xe8, 0x4a, 0xff,
	0xed, 0x12, 0xdd, 0xbf, 0xea, 0xd2, 0x71, 0x96, 0xc8, 0x8b, 0x98, 0x50, 0x4e, 0x36, 0x63, 0xd0,
	0xf9, 0x3e, 0x5d, 0x23, 0x71, 0xda, 0xd3, 0x03, 0xf5, 0x96, 0x98, 0x1e, 0x06, 0xcd, 0x8a, 0x84,
	0x1e, 0x26, 0x3b, 0x1e, 0x09, 0x3d, 0xec, 0xec, 0x71, 0xbc, 0x0f, 0x63, 0xf1, 0xf2, 0x2f, 0xd2,
	0x93, 0xac, 0xee, 0x2c, 0x8b, 0x57, 0x9f, 0xea, 0x89, 0x13, 0x15, 0x84, 0xf7, 0x60, 0x3c, 0x11,
	0x96, 0x24, 0xa4, 0x3b, 0xbd, 0x32, 0x5c, 0x3d, 0x3f, 0x48, 0xe9, 0x10, 0x35, 0xc2, 0x62, 0xa4,
	0x2a, 0x5e, 0x7e, 0x03, 0xa7, 0x7c, 0xa8, 0x85, 0xe1, 0x5b, 0x67, 0x19, 0x01, 0x2d, 0x1c, 0xaf,
	0xcc, 0x52, 0x5d, 0x1c, 0x18, 0x3f, 0x4a, 0x48, 0x0c, 0xa8, 0x33, 0x84, 0x44, 0xcf, 0xa4, 0xee,
	0xd5, 0x91, 0x0c, 0x55, 0x2f, 0xf4, 0xc5, 0x93, 0x6f, 0xdd, 0x0b, 0x5d, 0x69, 0x34, 0x8c, 0x4c,
	0x98, 0x8a, 0x1e, 0x91, 0xe6, 0x80, 0x34, 0x7d, 0x00, 0xa7, 0xba, 0x06, 0x91, 0xe8, 0x72, 0xdc,
	0xdf, 0xf7, 0x89, 0x52, 0xab, 0x0b, 0x83, 0xa2, 0xcb, 0xb3, 0xef, 0xc2, 0x74, 0x7a, 0x54, 0x97,
	0x30, 0x4e, 0x3d, 0xc3, 0xcb, 0x84, 0x71, 0xea, 0x1d, 0x26, 0xa2, 0x1d, 0x18, 0x8d, 0x85, 0x10,
	0x68, 0x2e, 0x95, 0x4a, 0xd1, 0xe8, 0x25, 0xe1, 0x41, 0x52, 0x23, 0x90, 0x15, 0xe7, 0xd3, 0x2f,
	0x6a, 0x27, 0x3e, 0xff, 0xa2, 0x76, 0xe2, 0xcb, 0x2f, 0x6a, 0xda, 0x0f, 0x1e, 0xd6, 0xb4, 0x5f,
	0x3c, 0xac, 0x69, 0xbf, 0x7b, 0x58, 0xd3, 0x3e, 0x7d, 0x58, 0xd3, 0xfe, 0xfe, 0xb0, 0xa6, 0xfd,
	0xe3, 0x61, 0xed, 0xc4, 0x97, 0x0f, 0x6b, 0xda, 0x4f, 0x1e, 0xd5, 0x4e, 0x7c, 0xf2, 0xa8, 0xa6,
	0x7d, 0xfa, 0xa8, 0x76, 0xe2, 0xf3, 0x47, 0xb5, 0x13, 0xdf, 0x59, 0x8a, 0xfc, 0xb7, 0x49, 0x9e,
	0x73, 0x99, 0xfd, 0xde, 0xb5, 0xea, 0x07, 0xb8, 0xd5, 0x58, 0xf4, 0x0e, 0x9a, 0x8b, 0x4d, 0xdc,
	0x12, 0x7f, 0x72, 0xda, 0x75, 0x77, 0xff, 0xcf, 0xdb, 0xdd, 0xcd, 0xf3, 0xd1, 0xd5, 0x7f, 0x07,
	0x00, 0x00, 0xff, 0xff, 0x9a, 0x62, 0x13, 0x8f, 0x8d, 0x35, 0x00, 0x00,
}

func (x RetrieveStudentSubmissionsRequest_SubmissionOrderType) String() string {
	s, ok := RetrieveStudentSubmissionsRequest_SubmissionOrderType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *AssignmentSubmission) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AssignmentSubmission)
	if !ok {
		that2, ok := that.(AssignmentSubmission)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SubmissionId != that1.SubmissionId {
		return false
	}
	if this.TopicId != that1.TopicId {
		return false
	}
	if this.StudentId != that1.StudentId {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	if len(this.Attachments) != len(that1.Attachments) {
		return false
	}
	for i := range this.Attachments {
		if !this.Attachments[i].Equal(that1.Attachments[i]) {
			return false
		}
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	return true
}
func (this *ListSubmissionsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListSubmissionsRequest)
	if !ok {
		that2, ok := that.(ListSubmissionsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TopicId != that1.TopicId {
		return false
	}
	if len(this.StudentIds) != len(that1.StudentIds) {
		return false
	}
	for i := range this.StudentIds {
		if this.StudentIds[i] != that1.StudentIds[i] {
			return false
		}
	}
	if this.Limit != that1.Limit {
		return false
	}
	if !this.OffsetId.Equal(that1.OffsetId) {
		return false
	}
	return true
}
func (this *ListSubmissionsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListSubmissionsResponse)
	if !ok {
		that2, ok := that.(ListSubmissionsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Submissions) != len(that1.Submissions) {
		return false
	}
	for i := range this.Submissions {
		if !this.Submissions[i].Equal(that1.Submissions[i]) {
			return false
		}
	}
	return true
}
func (this *Attachment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Attachment)
	if !ok {
		that2, ok := that.(Attachment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	return true
}
func (this *ListTopicRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListTopicRequest)
	if !ok {
		that2, ok := that.(ListTopicRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if this.Grade != that1.Grade {
		return false
	}
	if this.Subject != that1.Subject {
		return false
	}
	if this.TopicType != that1.TopicType {
		return false
	}
	return true
}
func (this *ListTopicResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListTopicResponse)
	if !ok {
		that2, ok := that.(ListTopicResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Topics) != len(that1.Topics) {
		return false
	}
	for i := range this.Topics {
		if !this.Topics[i].Equal(that1.Topics[i]) {
			return false
		}
	}
	return true
}
func (this *ListTopicsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListTopicsRequest)
	if !ok {
		that2, ok := that.(ListTopicsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if this.Grade != that1.Grade {
		return false
	}
	if this.Subject != that1.Subject {
		return false
	}
	if this.TopicType != that1.TopicType {
		return false
	}
	if this.WithCompleteness != that1.WithCompleteness {
		return false
	}
	return true
}
func (this *ListTopicsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListTopicsResponse)
	if !ok {
		that2, ok := that.(ListTopicsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Topics) != len(that1.Topics) {
		return false
	}
	for i := range this.Topics {
		if !this.Topics[i].Equal(that1.Topics[i]) {
			return false
		}
	}
	return true
}
func (this *ListTopicsResponse_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListTopicsResponse_Data)
	if !ok {
		that2, ok := that.(ListTopicsResponse_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Topic.Equal(that1.Topic) {
		return false
	}
	if this.TotalFinishedLos != that1.TotalFinishedLos {
		return false
	}
	return true
}
func (this *Topic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Topic)
	if !ok {
		that2, ok := that.(Topic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if this.Grade != that1.Grade {
		return false
	}
	if this.Subject != that1.Subject {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.DisplayOrder != that1.DisplayOrder {
		return false
	}
	if !this.PublishedAt.Equal(that1.PublishedAt) {
		return false
	}
	if this.TotalLos != that1.TotalLos {
		return false
	}
	if this.ChapterId != that1.ChapterId {
		return false
	}
	if this.SchoolId != that1.SchoolId {
		return false
	}
	if this.IconUrl != that1.IconUrl {
		return false
	}
	if this.Instruction != that1.Instruction {
		return false
	}
	if len(this.Attachments) != len(that1.Attachments) {
		return false
	}
	for i := range this.Attachments {
		if !this.Attachments[i].Equal(that1.Attachments[i]) {
			return false
		}
	}
	if !this.CopiedTopicId.Equal(that1.CopiedTopicId) {
		return false
	}
	if this.EssayRequired != that1.EssayRequired {
		return false
	}
	return true
}
func (this *Completenes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Completenes)
	if !ok {
		that2, ok := that.(Completenes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.QuizFinished != that1.QuizFinished {
		return false
	}
	if this.VideoFinished != that1.VideoFinished {
		return false
	}
	if this.StudyGuideFinished != that1.StudyGuideFinished {
		return false
	}
	if this.FirstQuizCorrectness != that1.FirstQuizCorrectness {
		return false
	}
	return true
}
func (this *Question) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Question)
	if !ok {
		that2, ok := that.(Question)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.MasterQuestionId != that1.MasterQuestionId {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if this.Question != that1.Question {
		return false
	}
	if len(this.Answers) != len(that1.Answers) {
		return false
	}
	for i := range this.Answers {
		if this.Answers[i] != that1.Answers[i] {
			return false
		}
	}
	if this.Explanation != that1.Explanation {
		return false
	}
	if this.DifficultyLevel != that1.DifficultyLevel {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if len(this.QuestionsTagLo) != len(that1.QuestionsTagLo) {
		return false
	}
	for i := range this.QuestionsTagLo {
		if this.QuestionsTagLo[i] != that1.QuestionsTagLo[i] {
			return false
		}
	}
	if this.QuestionRendered != that1.QuestionRendered {
		return false
	}
	if len(this.AnswersRendered) != len(that1.AnswersRendered) {
		return false
	}
	for i := range this.AnswersRendered {
		if this.AnswersRendered[i] != that1.AnswersRendered[i] {
			return false
		}
	}
	if this.ExplanationRendered != that1.ExplanationRendered {
		return false
	}
	if this.IsWaitingForRender != that1.IsWaitingForRender {
		return false
	}
	if len(this.ExplanationWrongAnswer) != len(that1.ExplanationWrongAnswer) {
		return false
	}
	for i := range this.ExplanationWrongAnswer {
		if this.ExplanationWrongAnswer[i] != that1.ExplanationWrongAnswer[i] {
			return false
		}
	}
	if len(this.ExplanationWrongAnswerRendered) != len(that1.ExplanationWrongAnswerRendered) {
		return false
	}
	for i := range this.ExplanationWrongAnswerRendered {
		if this.ExplanationWrongAnswerRendered[i] != that1.ExplanationWrongAnswerRendered[i] {
			return false
		}
	}
	return true
}
func (this *LearningObjective) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LearningObjective)
	if !ok {
		that2, ok := that.(LearningObjective)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if this.Grade != that1.Grade {
		return false
	}
	if this.Subject != that1.Subject {
		return false
	}
	if this.DisplayOrder != that1.DisplayOrder {
		return false
	}
	if this.Video != that1.Video {
		return false
	}
	if this.StudyGuide != that1.StudyGuide {
		return false
	}
	if this.TopicId != that1.TopicId {
		return false
	}
	if this.MasterLo != that1.MasterLo {
		return false
	}
	if this.VideoScript != that1.VideoScript {
		return false
	}
	if len(this.Prerequisites) != len(that1.Prerequisites) {
		return false
	}
	for i := range this.Prerequisites {
		if this.Prerequisites[i] != that1.Prerequisites[i] {
			return false
		}
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if this.SchoolId != that1.SchoolId {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *QuizSets) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QuizSets)
	if !ok {
		that2, ok := that.(QuizSets)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LoId != that1.LoId {
		return false
	}
	if this.QuestionId != that1.QuestionId {
		return false
	}
	if this.DisplayOrder != that1.DisplayOrder {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	return true
}
func (this *UpsertLOsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertLOsRequest)
	if !ok {
		that2, ok := that.(UpsertLOsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.LearningObjectives) != len(that1.LearningObjectives) {
		return false
	}
	for i := range this.LearningObjectives {
		if !this.LearningObjectives[i].Equal(that1.LearningObjectives[i]) {
			return false
		}
	}
	return true
}
func (this *UpsertLOsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertLOsResponse)
	if !ok {
		that2, ok := that.(UpsertLOsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.LoIds) != len(that1.LoIds) {
		return false
	}
	for i := range this.LoIds {
		if this.LoIds[i] != that1.LoIds[i] {
			return false
		}
	}
	return true
}
func (this *SubmissionResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubmissionResult)
	if !ok {
		that2, ok := that.(SubmissionResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.QuestionId != that1.QuestionId {
		return false
	}
	if this.Correct != that1.Correct {
		return false
	}
	return true
}
func (this *TakeTheQuizRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TakeTheQuizRequest)
	if !ok {
		that2, ok := that.(TakeTheQuizRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LoId != that1.LoId {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	return true
}
func (this *TakeTheQuizResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TakeTheQuizResponse)
	if !ok {
		that2, ok := that.(TakeTheQuizResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Quizset) != len(that1.Quizset) {
		return false
	}
	for i := range this.Quizset {
		if !this.Quizset[i].Equal(that1.Quizset[i]) {
			return false
		}
	}
	if this.Total != that1.Total {
		return false
	}
	return true
}
func (this *UpsertQuestionsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertQuestionsRequest)
	if !ok {
		that2, ok := that.(UpsertQuestionsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Questions) != len(that1.Questions) {
		return false
	}
	for i := range this.Questions {
		if !this.Questions[i].Equal(that1.Questions[i]) {
			return false
		}
	}
	return true
}
func (this *UpsertQuestionsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertQuestionsResponse)
	if !ok {
		that2, ok := that.(UpsertQuestionsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.QuestionIds) != len(that1.QuestionIds) {
		return false
	}
	for i := range this.QuestionIds {
		if this.QuestionIds[i] != that1.QuestionIds[i] {
			return false
		}
	}
	return true
}
func (this *PresetStudyPlan) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PresetStudyPlan)
	if !ok {
		that2, ok := that.(PresetStudyPlan)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if this.Grade != that1.Grade {
		return false
	}
	if this.Subject != that1.Subject {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if !this.StartDate.Equal(that1.StartDate) {
		return false
	}
	return true
}
func (this *UpsertPresetStudyPlansRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertPresetStudyPlansRequest)
	if !ok {
		that2, ok := that.(UpsertPresetStudyPlansRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PresetStudyPlans) != len(that1.PresetStudyPlans) {
		return false
	}
	for i := range this.PresetStudyPlans {
		if !this.PresetStudyPlans[i].Equal(that1.PresetStudyPlans[i]) {
			return false
		}
	}
	return true
}
func (this *UpsertPresetStudyPlansResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertPresetStudyPlansResponse)
	if !ok {
		that2, ok := that.(UpsertPresetStudyPlansResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PresetStudyPlanIds) != len(that1.PresetStudyPlanIds) {
		return false
	}
	for i := range this.PresetStudyPlanIds {
		if this.PresetStudyPlanIds[i] != that1.PresetStudyPlanIds[i] {
			return false
		}
	}
	return true
}
func (this *PresetStudyPlanWeekly) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PresetStudyPlanWeekly)
	if !ok {
		that2, ok := that.(PresetStudyPlanWeekly)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.TopicId != that1.TopicId {
		return false
	}
	if this.PresetStudyPlanId != that1.PresetStudyPlanId {
		return false
	}
	if this.Week != that1.Week {
		return false
	}
	return true
}
func (this *UpsertPresetStudyPlanWeekliesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertPresetStudyPlanWeekliesRequest)
	if !ok {
		that2, ok := that.(UpsertPresetStudyPlanWeekliesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PresetStudyPlanWeeklies) != len(that1.PresetStudyPlanWeeklies) {
		return false
	}
	for i := range this.PresetStudyPlanWeeklies {
		if !this.PresetStudyPlanWeeklies[i].Equal(that1.PresetStudyPlanWeeklies[i]) {
			return false
		}
	}
	return true
}
func (this *UpsertPresetStudyPlanWeekliesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertPresetStudyPlanWeekliesResponse)
	if !ok {
		that2, ok := that.(UpsertPresetStudyPlanWeekliesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PresetStudyPlanWeeklyIds) != len(that1.PresetStudyPlanWeeklyIds) {
		return false
	}
	for i := range this.PresetStudyPlanWeeklyIds {
		if this.PresetStudyPlanWeeklyIds[i] != that1.PresetStudyPlanWeeklyIds[i] {
			return false
		}
	}
	return true
}
func (this *UpsertQuizRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertQuizRequest)
	if !ok {
		that2, ok := that.(UpsertQuizRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Quizsets) != len(that1.Quizsets) {
		return false
	}
	for i := range this.Quizsets {
		if !this.Quizsets[i].Equal(that1.Quizsets[i]) {
			return false
		}
	}
	return true
}
func (this *UpsertQuizResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertQuizResponse)
	if !ok {
		that2, ok := that.(UpsertQuizResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Successful != that1.Successful {
		return false
	}
	return true
}
func (this *LocalGrade) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LocalGrade)
	if !ok {
		that2, ok := that.(LocalGrade)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.LocalGrade) != len(that1.LocalGrade) {
		return false
	}
	for i := range this.LocalGrade {
		if this.LocalGrade[i] != that1.LocalGrade[i] {
			return false
		}
	}
	return true
}
func (this *RetrieveGradeMapResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveGradeMapResponse)
	if !ok {
		that2, ok := that.(RetrieveGradeMapResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.GradeMap) != len(that1.GradeMap) {
		return false
	}
	for i := range this.GradeMap {
		if !this.GradeMap[i].Equal(that1.GradeMap[i]) {
			return false
		}
	}
	return true
}
func (this *RetrieveGradeMapRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveGradeMapRequest)
	if !ok {
		that2, ok := that.(RetrieveGradeMapRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetHistoryQuizDetailRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetHistoryQuizDetailRequest)
	if !ok {
		that2, ok := that.(GetHistoryQuizDetailRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StudentId != that1.StudentId {
		return false
	}
	if this.QuizId != that1.QuizId {
		return false
	}
	return true
}
func (this *GetHistoryQuizDetailResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetHistoryQuizDetailResponse)
	if !ok {
		that2, ok := that.(GetHistoryQuizDetailResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Question.Equal(that1.Question) {
		return false
	}
	if this.SelectedAnswer != that1.SelectedAnswer {
		return false
	}
	if this.DisplayOrder != that1.DisplayOrder {
		return false
	}
	return true
}
func (this *SuggestLORequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SuggestLORequest)
	if !ok {
		that2, ok := that.(SuggestLORequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LoName != that1.LoName {
		return false
	}
	return true
}
func (this *SuggestLOResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SuggestLOResponse)
	if !ok {
		that2, ok := that.(SuggestLOResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SuggestLos) != len(that1.SuggestLos) {
		return false
	}
	for i := range this.SuggestLos {
		if !this.SuggestLos[i].Equal(that1.SuggestLos[i]) {
			return false
		}
	}
	return true
}
func (this *Chapter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Chapter)
	if !ok {
		that2, ok := that.(Chapter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChapterId != that1.ChapterId {
		return false
	}
	if this.ChapterName != that1.ChapterName {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if this.Subject != that1.Subject {
		return false
	}
	if this.Grade != that1.Grade {
		return false
	}
	if this.DisplayOrder != that1.DisplayOrder {
		return false
	}
	if len(this.Topics) != len(that1.Topics) {
		return false
	}
	for i := range this.Topics {
		if !this.Topics[i].Equal(that1.Topics[i]) {
			return false
		}
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if this.SchoolId != that1.SchoolId {
		return false
	}
	return true
}
func (this *GetChapterListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetChapterListRequest)
	if !ok {
		that2, ok := that.(GetChapterListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChapterId != that1.ChapterId {
		return false
	}
	if this.ChapterName != that1.ChapterName {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Subject != that1.Subject {
		return false
	}
	if this.Grade != that1.Grade {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	return true
}
func (this *GetChapterListResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetChapterListResponse)
	if !ok {
		that2, ok := that.(GetChapterListResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Chapters) != len(that1.Chapters) {
		return false
	}
	for i := range this.Chapters {
		if !this.Chapters[i].Equal(that1.Chapters[i]) {
			return false
		}
	}
	if this.Total != that1.Total {
		return false
	}
	return true
}
func (this *RetrieveCoursesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveCoursesRequest)
	if !ok {
		that2, ok := that.(RetrieveCoursesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if this.Subject != that1.Subject {
		return false
	}
	if this.Grade != that1.Grade {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if len(this.Countries) != len(that1.Countries) {
		return false
	}
	for i := range this.Countries {
		if this.Countries[i] != that1.Countries[i] {
			return false
		}
	}
	if this.CourseType != that1.CourseType {
		return false
	}
	if this.CourseStatus != that1.CourseStatus {
		return false
	}
	if this.IsAssigned != that1.IsAssigned {
		return false
	}
	if this.ClassId != that1.ClassId {
		return false
	}
	return true
}
func (this *RetrieveCoursesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveCoursesResponse)
	if !ok {
		that2, ok := that.(RetrieveCoursesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Courses) != len(that1.Courses) {
		return false
	}
	for i := range this.Courses {
		if !this.Courses[i].Equal(that1.Courses[i]) {
			return false
		}
	}
	if this.Total != that1.Total {
		return false
	}
	return true
}
func (this *RetrieveCoursesResponse_Course) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveCoursesResponse_Course)
	if !ok {
		that2, ok := that.(RetrieveCoursesResponse_Course)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if this.Subject != that1.Subject {
		return false
	}
	if this.Grade != that1.Grade {
		return false
	}
	if len(this.Chapters) != len(that1.Chapters) {
		return false
	}
	for i := range this.Chapters {
		if !this.Chapters[i].Equal(that1.Chapters[i]) {
			return false
		}
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if this.SchoolId != that1.SchoolId {
		return false
	}
	if this.ClassId != that1.ClassId {
		return false
	}
	if !this.StartDate.Equal(that1.StartDate) {
		return false
	}
	if !this.EndDate.Equal(that1.EndDate) {
		return false
	}
	if this.CourseType != that1.CourseType {
		return false
	}
	if len(this.Teachers) != len(that1.Teachers) {
		return false
	}
	for i := range this.Teachers {
		if !this.Teachers[i].Equal(that1.Teachers[i]) {
			return false
		}
	}
	if this.CourseStatus != that1.CourseStatus {
		return false
	}
	if len(this.ClassIds) != len(that1.ClassIds) {
		return false
	}
	for i := range this.ClassIds {
		if this.ClassIds[i] != that1.ClassIds[i] {
			return false
		}
	}
	if len(this.BookIds) != len(that1.BookIds) {
		return false
	}
	for i := range this.BookIds {
		if this.BookIds[i] != that1.BookIds[i] {
			return false
		}
	}
	return true
}
func (this *RetrieveStudentSubmissionsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveStudentSubmissionsRequest)
	if !ok {
		that2, ok := that.(RetrieveStudentSubmissionsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StudentId != that1.StudentId {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.LoId != that1.LoId {
		return false
	}
	return true
}
func (this *RetrieveStudentSubmissionsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveStudentSubmissionsResponse)
	if !ok {
		that2, ok := that.(RetrieveStudentSubmissionsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Submissions) != len(that1.Submissions) {
		return false
	}
	for i := range this.Submissions {
		if !this.Submissions[i].Equal(that1.Submissions[i]) {
			return false
		}
	}
	if this.Total != that1.Total {
		return false
	}
	return true
}
func (this *QuestionV2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QuestionV2)
	if !ok {
		that2, ok := that.(QuestionV2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.MasterQuestionId != that1.MasterQuestionId {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if this.Question != that1.Question {
		return false
	}
	if len(this.Answers) != len(that1.Answers) {
		return false
	}
	for i := range this.Answers {
		if this.Answers[i] != that1.Answers[i] {
			return false
		}
	}
	if this.Explanation != that1.Explanation {
		return false
	}
	if this.DifficultyLevel != that1.DifficultyLevel {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if len(this.QuestionsTagLo) != len(that1.QuestionsTagLo) {
		return false
	}
	for i := range this.QuestionsTagLo {
		if this.QuestionsTagLo[i] != that1.QuestionsTagLo[i] {
			return false
		}
	}
	if this.QuestionUrl != that1.QuestionUrl {
		return false
	}
	if len(this.AnswersUrl) != len(that1.AnswersUrl) {
		return false
	}
	for i := range this.AnswersUrl {
		if this.AnswersUrl[i] != that1.AnswersUrl[i] {
			return false
		}
	}
	if this.ExplanationUrl != that1.ExplanationUrl {
		return false
	}
	if len(this.ExplanationWrongAnswer) != len(that1.ExplanationWrongAnswer) {
		return false
	}
	for i := range this.ExplanationWrongAnswer {
		if this.ExplanationWrongAnswer[i] != that1.ExplanationWrongAnswer[i] {
			return false
		}
	}
	if len(this.ExplanationWrongAnswerUrl) != len(that1.ExplanationWrongAnswerUrl) {
		return false
	}
	for i := range this.ExplanationWrongAnswerUrl {
		if this.ExplanationWrongAnswerUrl[i] != that1.ExplanationWrongAnswerUrl[i] {
			return false
		}
	}
	if this.IsWaitingForRender != that1.IsWaitingForRender {
		return false
	}
	return true
}
func (this *TakeTheQuizV2Response) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TakeTheQuizV2Response)
	if !ok {
		that2, ok := that.(TakeTheQuizV2Response)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Quizset) != len(that1.Quizset) {
		return false
	}
	for i := range this.Quizset {
		if !this.Quizset[i].Equal(that1.Quizset[i]) {
			return false
		}
	}
	if this.Total != that1.Total {
		return false
	}
	return true
}
func (this *Pagination) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Pagination)
	if !ok {
		that2, ok := that.(Pagination)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	return true
}
func (this *RetrieveLiveLessonRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveLiveLessonRequest)
	if !ok {
		that2, ok := that.(RetrieveLiveLessonRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.CourseIds) != len(that1.CourseIds) {
		return false
	}
	for i := range this.CourseIds {
		if this.CourseIds[i] != that1.CourseIds[i] {
			return false
		}
	}
	if !this.Pagination.Equal(that1.Pagination) {
		return false
	}
	if !this.From.Equal(that1.From) {
		return false
	}
	if !this.To.Equal(that1.To) {
		return false
	}
	return true
}
func (this *Lesson) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Lesson)
	if !ok {
		that2, ok := that.(Lesson)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LessonId != that1.LessonId {
		return false
	}
	if !this.Topic.Equal(that1.Topic) {
		return false
	}
	if !this.StartTime.Equal(that1.StartTime) {
		return false
	}
	if !this.EndTime.Equal(that1.EndTime) {
		return false
	}
	if this.PresetStudyPlanWeeklyIds != that1.PresetStudyPlanWeeklyIds {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if len(this.Teacher) != len(that1.Teacher) {
		return false
	}
	for i := range this.Teacher {
		if !this.Teacher[i].Equal(that1.Teacher[i]) {
			return false
		}
	}
	if this.TotalLearner != that1.TotalLearner {
		return false
	}
	if this.CourseId != that1.CourseId {
		return false
	}
	if len(this.UserClassIds) != len(that1.UserClassIds) {
		return false
	}
	for i := range this.UserClassIds {
		if this.UserClassIds[i] != that1.UserClassIds[i] {
			return false
		}
	}
	return true
}
func (this *RetrieveLiveLessonResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveLiveLessonResponse)
	if !ok {
		that2, ok := that.(RetrieveLiveLessonResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Lessons) != len(that1.Lessons) {
		return false
	}
	for i := range this.Lessons {
		if !this.Lessons[i].Equal(that1.Lessons[i]) {
			return false
		}
	}
	if this.Total != that1.Total {
		return false
	}
	return true
}
func (this *RetrieveCoursesByIDsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveCoursesByIDsRequest)
	if !ok {
		that2, ok := that.(RetrieveCoursesByIDsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Ids) != len(that1.Ids) {
		return false
	}
	for i := range this.Ids {
		if this.Ids[i] != that1.Ids[i] {
			return false
		}
	}
	return true
}
func (this *CreateBrightCoveUploadUrlRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateBrightCoveUploadUrlRequest)
	if !ok {
		that2, ok := that.(CreateBrightCoveUploadUrlRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *CreateBrightCoveUploadUrlResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateBrightCoveUploadUrlResponse)
	if !ok {
		that2, ok := that.(CreateBrightCoveUploadUrlResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SignedUrl != that1.SignedUrl {
		return false
	}
	if this.ApiRequestUrl != that1.ApiRequestUrl {
		return false
	}
	if this.VideoId != that1.VideoId {
		return false
	}
	return true
}
func (this *FinishUploadBrightCoveRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FinishUploadBrightCoveRequest)
	if !ok {
		that2, ok := that.(FinishUploadBrightCoveRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ApiRequestUrl != that1.ApiRequestUrl {
		return false
	}
	if this.VideoId != that1.VideoId {
		return false
	}
	return true
}
func (this *FinishUploadBrightCoveResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FinishUploadBrightCoveResponse)
	if !ok {
		that2, ok := that.(FinishUploadBrightCoveResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Book) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Book)
	if !ok {
		that2, ok := that.(Book)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if this.Subject != that1.Subject {
		return false
	}
	if this.Grade != that1.Grade {
		return false
	}
	if this.SchoolId != that1.SchoolId {
		return false
	}
	if this.CourseId != that1.CourseId {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if len(this.Chapters) != len(that1.Chapters) {
		return false
	}
	for i := range this.Chapters {
		if !this.Chapters[i].Equal(that1.Chapters[i]) {
			return false
		}
	}
	return true
}
func (this *RetrieveBooksRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveBooksRequest)
	if !ok {
		that2, ok := that.(RetrieveBooksRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.CourseId != that1.CourseId {
		return false
	}
	return true
}
func (this *RetrieveBooksResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveBooksResponse)
	if !ok {
		that2, ok := that.(RetrieveBooksResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Books) != len(that1.Books) {
		return false
	}
	for i := range this.Books {
		if !this.Books[i].Equal(that1.Books[i]) {
			return false
		}
	}
	if this.Total != that1.Total {
		return false
	}
	return true
}
func (this *AssignmentSubmission) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.AssignmentSubmission{")
	s = append(s, "SubmissionId: "+fmt.Sprintf("%#v", this.SubmissionId)+",\n")
	s = append(s, "TopicId: "+fmt.Sprintf("%#v", this.TopicId)+",\n")
	s = append(s, "StudentId: "+fmt.Sprintf("%#v", this.StudentId)+",\n")
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	if this.Attachments != nil {
		s = append(s, "Attachments: "+fmt.Sprintf("%#v", this.Attachments)+",\n")
	}
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListSubmissionsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.ListSubmissionsRequest{")
	s = append(s, "TopicId: "+fmt.Sprintf("%#v", this.TopicId)+",\n")
	s = append(s, "StudentIds: "+fmt.Sprintf("%#v", this.StudentIds)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	if this.OffsetId != nil {
		s = append(s, "OffsetId: "+fmt.Sprintf("%#v", this.OffsetId)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListSubmissionsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ListSubmissionsResponse{")
	if this.Submissions != nil {
		s = append(s, "Submissions: "+fmt.Sprintf("%#v", this.Submissions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Attachment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.Attachment{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListTopicRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.ListTopicRequest{")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "Grade: "+fmt.Sprintf("%#v", this.Grade)+",\n")
	s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	s = append(s, "TopicType: "+fmt.Sprintf("%#v", this.TopicType)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListTopicResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ListTopicResponse{")
	if this.Topics != nil {
		s = append(s, "Topics: "+fmt.Sprintf("%#v", this.Topics)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListTopicsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.ListTopicsRequest{")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "Grade: "+fmt.Sprintf("%#v", this.Grade)+",\n")
	s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	s = append(s, "TopicType: "+fmt.Sprintf("%#v", this.TopicType)+",\n")
	s = append(s, "WithCompleteness: "+fmt.Sprintf("%#v", this.WithCompleteness)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListTopicsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ListTopicsResponse{")
	if this.Topics != nil {
		s = append(s, "Topics: "+fmt.Sprintf("%#v", this.Topics)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListTopicsResponse_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.ListTopicsResponse_Data{")
	if this.Topic != nil {
		s = append(s, "Topic: "+fmt.Sprintf("%#v", this.Topic)+",\n")
	}
	s = append(s, "TotalFinishedLos: "+fmt.Sprintf("%#v", this.TotalFinishedLos)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Topic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 23)
	s = append(s, "&pb.Topic{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "Grade: "+fmt.Sprintf("%#v", this.Grade)+",\n")
	s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "DisplayOrder: "+fmt.Sprintf("%#v", this.DisplayOrder)+",\n")
	if this.PublishedAt != nil {
		s = append(s, "PublishedAt: "+fmt.Sprintf("%#v", this.PublishedAt)+",\n")
	}
	s = append(s, "TotalLos: "+fmt.Sprintf("%#v", this.TotalLos)+",\n")
	s = append(s, "ChapterId: "+fmt.Sprintf("%#v", this.ChapterId)+",\n")
	s = append(s, "SchoolId: "+fmt.Sprintf("%#v", this.SchoolId)+",\n")
	s = append(s, "IconUrl: "+fmt.Sprintf("%#v", this.IconUrl)+",\n")
	s = append(s, "Instruction: "+fmt.Sprintf("%#v", this.Instruction)+",\n")
	if this.Attachments != nil {
		s = append(s, "Attachments: "+fmt.Sprintf("%#v", this.Attachments)+",\n")
	}
	if this.CopiedTopicId != nil {
		s = append(s, "CopiedTopicId: "+fmt.Sprintf("%#v", this.CopiedTopicId)+",\n")
	}
	s = append(s, "EssayRequired: "+fmt.Sprintf("%#v", this.EssayRequired)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Completenes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.Completenes{")
	s = append(s, "QuizFinished: "+fmt.Sprintf("%#v", this.QuizFinished)+",\n")
	s = append(s, "VideoFinished: "+fmt.Sprintf("%#v", this.VideoFinished)+",\n")
	s = append(s, "StudyGuideFinished: "+fmt.Sprintf("%#v", this.StudyGuideFinished)+",\n")
	s = append(s, "FirstQuizCorrectness: "+fmt.Sprintf("%#v", this.FirstQuizCorrectness)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Question) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&pb.Question{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "MasterQuestionId: "+fmt.Sprintf("%#v", this.MasterQuestionId)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "Question: "+fmt.Sprintf("%#v", this.Question)+",\n")
	s = append(s, "Answers: "+fmt.Sprintf("%#v", this.Answers)+",\n")
	s = append(s, "Explanation: "+fmt.Sprintf("%#v", this.Explanation)+",\n")
	s = append(s, "DifficultyLevel: "+fmt.Sprintf("%#v", this.DifficultyLevel)+",\n")
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	s = append(s, "QuestionsTagLo: "+fmt.Sprintf("%#v", this.QuestionsTagLo)+",\n")
	s = append(s, "QuestionRendered: "+fmt.Sprintf("%#v", this.QuestionRendered)+",\n")
	s = append(s, "AnswersRendered: "+fmt.Sprintf("%#v", this.AnswersRendered)+",\n")
	s = append(s, "ExplanationRendered: "+fmt.Sprintf("%#v", this.ExplanationRendered)+",\n")
	s = append(s, "IsWaitingForRender: "+fmt.Sprintf("%#v", this.IsWaitingForRender)+",\n")
	s = append(s, "ExplanationWrongAnswer: "+fmt.Sprintf("%#v", this.ExplanationWrongAnswer)+",\n")
	s = append(s, "ExplanationWrongAnswerRendered: "+fmt.Sprintf("%#v", this.ExplanationWrongAnswerRendered)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LearningObjective) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&pb.LearningObjective{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "Grade: "+fmt.Sprintf("%#v", this.Grade)+",\n")
	s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	s = append(s, "DisplayOrder: "+fmt.Sprintf("%#v", this.DisplayOrder)+",\n")
	s = append(s, "Video: "+fmt.Sprintf("%#v", this.Video)+",\n")
	s = append(s, "StudyGuide: "+fmt.Sprintf("%#v", this.StudyGuide)+",\n")
	s = append(s, "TopicId: "+fmt.Sprintf("%#v", this.TopicId)+",\n")
	s = append(s, "MasterLo: "+fmt.Sprintf("%#v", this.MasterLo)+",\n")
	s = append(s, "VideoScript: "+fmt.Sprintf("%#v", this.VideoScript)+",\n")
	s = append(s, "Prerequisites: "+fmt.Sprintf("%#v", this.Prerequisites)+",\n")
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	s = append(s, "SchoolId: "+fmt.Sprintf("%#v", this.SchoolId)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QuizSets) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.QuizSets{")
	s = append(s, "LoId: "+fmt.Sprintf("%#v", this.LoId)+",\n")
	s = append(s, "QuestionId: "+fmt.Sprintf("%#v", this.QuestionId)+",\n")
	s = append(s, "DisplayOrder: "+fmt.Sprintf("%#v", this.DisplayOrder)+",\n")
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertLOsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpsertLOsRequest{")
	if this.LearningObjectives != nil {
		s = append(s, "LearningObjectives: "+fmt.Sprintf("%#v", this.LearningObjectives)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertLOsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpsertLOsResponse{")
	s = append(s, "LoIds: "+fmt.Sprintf("%#v", this.LoIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SubmissionResult) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SubmissionResult{")
	s = append(s, "QuestionId: "+fmt.Sprintf("%#v", this.QuestionId)+",\n")
	s = append(s, "Correct: "+fmt.Sprintf("%#v", this.Correct)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TakeTheQuizRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.TakeTheQuizRequest{")
	s = append(s, "LoId: "+fmt.Sprintf("%#v", this.LoId)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TakeTheQuizResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.TakeTheQuizResponse{")
	if this.Quizset != nil {
		s = append(s, "Quizset: "+fmt.Sprintf("%#v", this.Quizset)+",\n")
	}
	s = append(s, "Total: "+fmt.Sprintf("%#v", this.Total)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertQuestionsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpsertQuestionsRequest{")
	if this.Questions != nil {
		s = append(s, "Questions: "+fmt.Sprintf("%#v", this.Questions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertQuestionsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpsertQuestionsResponse{")
	s = append(s, "QuestionIds: "+fmt.Sprintf("%#v", this.QuestionIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PresetStudyPlan) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pb.PresetStudyPlan{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "Grade: "+fmt.Sprintf("%#v", this.Grade)+",\n")
	s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	if this.StartDate != nil {
		s = append(s, "StartDate: "+fmt.Sprintf("%#v", this.StartDate)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertPresetStudyPlansRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpsertPresetStudyPlansRequest{")
	if this.PresetStudyPlans != nil {
		s = append(s, "PresetStudyPlans: "+fmt.Sprintf("%#v", this.PresetStudyPlans)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertPresetStudyPlansResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpsertPresetStudyPlansResponse{")
	s = append(s, "PresetStudyPlanIds: "+fmt.Sprintf("%#v", this.PresetStudyPlanIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PresetStudyPlanWeekly) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.PresetStudyPlanWeekly{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "TopicId: "+fmt.Sprintf("%#v", this.TopicId)+",\n")
	s = append(s, "PresetStudyPlanId: "+fmt.Sprintf("%#v", this.PresetStudyPlanId)+",\n")
	s = append(s, "Week: "+fmt.Sprintf("%#v", this.Week)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertPresetStudyPlanWeekliesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpsertPresetStudyPlanWeekliesRequest{")
	if this.PresetStudyPlanWeeklies != nil {
		s = append(s, "PresetStudyPlanWeeklies: "+fmt.Sprintf("%#v", this.PresetStudyPlanWeeklies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertPresetStudyPlanWeekliesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpsertPresetStudyPlanWeekliesResponse{")
	s = append(s, "PresetStudyPlanWeeklyIds: "+fmt.Sprintf("%#v", this.PresetStudyPlanWeeklyIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertQuizRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpsertQuizRequest{")
	if this.Quizsets != nil {
		s = append(s, "Quizsets: "+fmt.Sprintf("%#v", this.Quizsets)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertQuizResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpsertQuizResponse{")
	s = append(s, "Successful: "+fmt.Sprintf("%#v", this.Successful)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LocalGrade) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.LocalGrade{")
	keysForLocalGrade := make([]string, 0, len(this.LocalGrade))
	for k, _ := range this.LocalGrade {
		keysForLocalGrade = append(keysForLocalGrade, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLocalGrade)
	mapStringForLocalGrade := "map[string]int32{"
	for _, k := range keysForLocalGrade {
		mapStringForLocalGrade += fmt.Sprintf("%#v: %#v,", k, this.LocalGrade[k])
	}
	mapStringForLocalGrade += "}"
	if this.LocalGrade != nil {
		s = append(s, "LocalGrade: "+mapStringForLocalGrade+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveGradeMapResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RetrieveGradeMapResponse{")
	keysForGradeMap := make([]string, 0, len(this.GradeMap))
	for k, _ := range this.GradeMap {
		keysForGradeMap = append(keysForGradeMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForGradeMap)
	mapStringForGradeMap := "map[string]*LocalGrade{"
	for _, k := range keysForGradeMap {
		mapStringForGradeMap += fmt.Sprintf("%#v: %#v,", k, this.GradeMap[k])
	}
	mapStringForGradeMap += "}"
	if this.GradeMap != nil {
		s = append(s, "GradeMap: "+mapStringForGradeMap+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveGradeMapRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.RetrieveGradeMapRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetHistoryQuizDetailRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.GetHistoryQuizDetailRequest{")
	s = append(s, "StudentId: "+fmt.Sprintf("%#v", this.StudentId)+",\n")
	s = append(s, "QuizId: "+fmt.Sprintf("%#v", this.QuizId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetHistoryQuizDetailResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.GetHistoryQuizDetailResponse{")
	if this.Question != nil {
		s = append(s, "Question: "+fmt.Sprintf("%#v", this.Question)+",\n")
	}
	s = append(s, "SelectedAnswer: "+fmt.Sprintf("%#v", this.SelectedAnswer)+",\n")
	s = append(s, "DisplayOrder: "+fmt.Sprintf("%#v", this.DisplayOrder)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SuggestLORequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SuggestLORequest{")
	s = append(s, "LoName: "+fmt.Sprintf("%#v", this.LoName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SuggestLOResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SuggestLOResponse{")
	if this.SuggestLos != nil {
		s = append(s, "SuggestLos: "+fmt.Sprintf("%#v", this.SuggestLos)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Chapter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&pb.Chapter{")
	s = append(s, "ChapterId: "+fmt.Sprintf("%#v", this.ChapterId)+",\n")
	s = append(s, "ChapterName: "+fmt.Sprintf("%#v", this.ChapterName)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	s = append(s, "Grade: "+fmt.Sprintf("%#v", this.Grade)+",\n")
	s = append(s, "DisplayOrder: "+fmt.Sprintf("%#v", this.DisplayOrder)+",\n")
	if this.Topics != nil {
		s = append(s, "Topics: "+fmt.Sprintf("%#v", this.Topics)+",\n")
	}
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	s = append(s, "SchoolId: "+fmt.Sprintf("%#v", this.SchoolId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetChapterListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.GetChapterListRequest{")
	s = append(s, "ChapterId: "+fmt.Sprintf("%#v", this.ChapterId)+",\n")
	s = append(s, "ChapterName: "+fmt.Sprintf("%#v", this.ChapterName)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	s = append(s, "Grade: "+fmt.Sprintf("%#v", this.Grade)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetChapterListResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.GetChapterListResponse{")
	if this.Chapters != nil {
		s = append(s, "Chapters: "+fmt.Sprintf("%#v", this.Chapters)+",\n")
	}
	s = append(s, "Total: "+fmt.Sprintf("%#v", this.Total)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveCoursesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&pb.RetrieveCoursesRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	s = append(s, "Grade: "+fmt.Sprintf("%#v", this.Grade)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "Countries: "+fmt.Sprintf("%#v", this.Countries)+",\n")
	s = append(s, "CourseType: "+fmt.Sprintf("%#v", this.CourseType)+",\n")
	s = append(s, "CourseStatus: "+fmt.Sprintf("%#v", this.CourseStatus)+",\n")
	s = append(s, "IsAssigned: "+fmt.Sprintf("%#v", this.IsAssigned)+",\n")
	s = append(s, "ClassId: "+fmt.Sprintf("%#v", this.ClassId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveCoursesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.RetrieveCoursesResponse{")
	if this.Courses != nil {
		s = append(s, "Courses: "+fmt.Sprintf("%#v", this.Courses)+",\n")
	}
	s = append(s, "Total: "+fmt.Sprintf("%#v", this.Total)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveCoursesResponse_Course) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 21)
	s = append(s, "&pb.RetrieveCoursesResponse_Course{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	s = append(s, "Grade: "+fmt.Sprintf("%#v", this.Grade)+",\n")
	if this.Chapters != nil {
		s = append(s, "Chapters: "+fmt.Sprintf("%#v", this.Chapters)+",\n")
	}
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	s = append(s, "SchoolId: "+fmt.Sprintf("%#v", this.SchoolId)+",\n")
	s = append(s, "ClassId: "+fmt.Sprintf("%#v", this.ClassId)+",\n")
	if this.StartDate != nil {
		s = append(s, "StartDate: "+fmt.Sprintf("%#v", this.StartDate)+",\n")
	}
	if this.EndDate != nil {
		s = append(s, "EndDate: "+fmt.Sprintf("%#v", this.EndDate)+",\n")
	}
	s = append(s, "CourseType: "+fmt.Sprintf("%#v", this.CourseType)+",\n")
	if this.Teachers != nil {
		s = append(s, "Teachers: "+fmt.Sprintf("%#v", this.Teachers)+",\n")
	}
	s = append(s, "CourseStatus: "+fmt.Sprintf("%#v", this.CourseStatus)+",\n")
	s = append(s, "ClassIds: "+fmt.Sprintf("%#v", this.ClassIds)+",\n")
	s = append(s, "BookIds: "+fmt.Sprintf("%#v", this.BookIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveStudentSubmissionsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.RetrieveStudentSubmissionsRequest{")
	s = append(s, "StudentId: "+fmt.Sprintf("%#v", this.StudentId)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "LoId: "+fmt.Sprintf("%#v", this.LoId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveStudentSubmissionsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.RetrieveStudentSubmissionsResponse{")
	if this.Submissions != nil {
		s = append(s, "Submissions: "+fmt.Sprintf("%#v", this.Submissions)+",\n")
	}
	s = append(s, "Total: "+fmt.Sprintf("%#v", this.Total)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QuestionV2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&pb.QuestionV2{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "MasterQuestionId: "+fmt.Sprintf("%#v", this.MasterQuestionId)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "Question: "+fmt.Sprintf("%#v", this.Question)+",\n")
	s = append(s, "Answers: "+fmt.Sprintf("%#v", this.Answers)+",\n")
	s = append(s, "Explanation: "+fmt.Sprintf("%#v", this.Explanation)+",\n")
	s = append(s, "DifficultyLevel: "+fmt.Sprintf("%#v", this.DifficultyLevel)+",\n")
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	s = append(s, "QuestionsTagLo: "+fmt.Sprintf("%#v", this.QuestionsTagLo)+",\n")
	s = append(s, "QuestionUrl: "+fmt.Sprintf("%#v", this.QuestionUrl)+",\n")
	s = append(s, "AnswersUrl: "+fmt.Sprintf("%#v", this.AnswersUrl)+",\n")
	s = append(s, "ExplanationUrl: "+fmt.Sprintf("%#v", this.ExplanationUrl)+",\n")
	s = append(s, "ExplanationWrongAnswer: "+fmt.Sprintf("%#v", this.ExplanationWrongAnswer)+",\n")
	s = append(s, "ExplanationWrongAnswerUrl: "+fmt.Sprintf("%#v", this.ExplanationWrongAnswerUrl)+",\n")
	s = append(s, "IsWaitingForRender: "+fmt.Sprintf("%#v", this.IsWaitingForRender)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TakeTheQuizV2Response) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.TakeTheQuizV2Response{")
	if this.Quizset != nil {
		s = append(s, "Quizset: "+fmt.Sprintf("%#v", this.Quizset)+",\n")
	}
	s = append(s, "Total: "+fmt.Sprintf("%#v", this.Total)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Pagination) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.Pagination{")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveLiveLessonRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.RetrieveLiveLessonRequest{")
	s = append(s, "CourseIds: "+fmt.Sprintf("%#v", this.CourseIds)+",\n")
	if this.Pagination != nil {
		s = append(s, "Pagination: "+fmt.Sprintf("%#v", this.Pagination)+",\n")
	}
	if this.From != nil {
		s = append(s, "From: "+fmt.Sprintf("%#v", this.From)+",\n")
	}
	if this.To != nil {
		s = append(s, "To: "+fmt.Sprintf("%#v", this.To)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Lesson) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&pb.Lesson{")
	s = append(s, "LessonId: "+fmt.Sprintf("%#v", this.LessonId)+",\n")
	if this.Topic != nil {
		s = append(s, "Topic: "+fmt.Sprintf("%#v", this.Topic)+",\n")
	}
	if this.StartTime != nil {
		s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	}
	if this.EndTime != nil {
		s = append(s, "EndTime: "+fmt.Sprintf("%#v", this.EndTime)+",\n")
	}
	s = append(s, "PresetStudyPlanWeeklyIds: "+fmt.Sprintf("%#v", this.PresetStudyPlanWeeklyIds)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.Teacher != nil {
		s = append(s, "Teacher: "+fmt.Sprintf("%#v", this.Teacher)+",\n")
	}
	s = append(s, "TotalLearner: "+fmt.Sprintf("%#v", this.TotalLearner)+",\n")
	s = append(s, "CourseId: "+fmt.Sprintf("%#v", this.CourseId)+",\n")
	s = append(s, "UserClassIds: "+fmt.Sprintf("%#v", this.UserClassIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveLiveLessonResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.RetrieveLiveLessonResponse{")
	if this.Lessons != nil {
		s = append(s, "Lessons: "+fmt.Sprintf("%#v", this.Lessons)+",\n")
	}
	s = append(s, "Total: "+fmt.Sprintf("%#v", this.Total)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveCoursesByIDsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RetrieveCoursesByIDsRequest{")
	s = append(s, "Ids: "+fmt.Sprintf("%#v", this.Ids)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateBrightCoveUploadUrlRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CreateBrightCoveUploadUrlRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateBrightCoveUploadUrlResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.CreateBrightCoveUploadUrlResponse{")
	s = append(s, "SignedUrl: "+fmt.Sprintf("%#v", this.SignedUrl)+",\n")
	s = append(s, "ApiRequestUrl: "+fmt.Sprintf("%#v", this.ApiRequestUrl)+",\n")
	s = append(s, "VideoId: "+fmt.Sprintf("%#v", this.VideoId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FinishUploadBrightCoveRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.FinishUploadBrightCoveRequest{")
	s = append(s, "ApiRequestUrl: "+fmt.Sprintf("%#v", this.ApiRequestUrl)+",\n")
	s = append(s, "VideoId: "+fmt.Sprintf("%#v", this.VideoId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FinishUploadBrightCoveResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.FinishUploadBrightCoveResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Book) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&pb.Book{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	s = append(s, "Grade: "+fmt.Sprintf("%#v", this.Grade)+",\n")
	s = append(s, "SchoolId: "+fmt.Sprintf("%#v", this.SchoolId)+",\n")
	s = append(s, "CourseId: "+fmt.Sprintf("%#v", this.CourseId)+",\n")
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.Chapters != nil {
		s = append(s, "Chapters: "+fmt.Sprintf("%#v", this.Chapters)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveBooksRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.RetrieveBooksRequest{")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "CourseId: "+fmt.Sprintf("%#v", this.CourseId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveBooksResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.RetrieveBooksResponse{")
	if this.Books != nil {
		s = append(s, "Books: "+fmt.Sprintf("%#v", this.Books)+",\n")
	}
	s = append(s, "Total: "+fmt.Sprintf("%#v", this.Total)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCourses(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CourseClient is the client API for Course service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CourseClient interface {
	ListTopic(ctx context.Context, in *ListTopicRequest, opts ...grpc.CallOption) (*ListTopicResponse, error)
	ListTopics(ctx context.Context, in *ListTopicsRequest, opts ...grpc.CallOption) (*ListTopicsResponse, error)
	UpsertLOs(ctx context.Context, in *UpsertLOsRequest, opts ...grpc.CallOption) (*UpsertLOsResponse, error)
	UpsertQuizSets(ctx context.Context, in *UpsertQuizRequest, opts ...grpc.CallOption) (*UpsertQuizResponse, error)
	TakeTheQuiz(ctx context.Context, in *TakeTheQuizRequest, opts ...grpc.CallOption) (*TakeTheQuizResponse, error)
	TakeTheQuizV2(ctx context.Context, in *TakeTheQuizRequest, opts ...grpc.CallOption) (*TakeTheQuizV2Response, error)
	UpsertQuestions(ctx context.Context, in *UpsertQuestionsRequest, opts ...grpc.CallOption) (*UpsertQuestionsResponse, error)
	GetHistoryQuizDetail(ctx context.Context, in *GetHistoryQuizDetailRequest, opts ...grpc.CallOption) (*GetHistoryQuizDetailResponse, error)
	UpsertPresetStudyPlans(ctx context.Context, in *UpsertPresetStudyPlansRequest, opts ...grpc.CallOption) (*UpsertPresetStudyPlansResponse, error)
	UpsertPresetStudyPlanWeeklies(ctx context.Context, in *UpsertPresetStudyPlanWeekliesRequest, opts ...grpc.CallOption) (*UpsertPresetStudyPlanWeekliesResponse, error)
	RetrieveGradeMap(ctx context.Context, in *RetrieveGradeMapRequest, opts ...grpc.CallOption) (*RetrieveGradeMapResponse, error)
	SuggestLO(ctx context.Context, in *SuggestLORequest, opts ...grpc.CallOption) (*SuggestLOResponse, error)
	GetChapterList(ctx context.Context, in *GetChapterListRequest, opts ...grpc.CallOption) (*GetChapterListResponse, error)
	RetrieveCourses(ctx context.Context, in *RetrieveCoursesRequest, opts ...grpc.CallOption) (*RetrieveCoursesResponse, error)
	RetrieveAssignedCourses(ctx context.Context, in *RetrieveCoursesRequest, opts ...grpc.CallOption) (*RetrieveCoursesResponse, error)
	RetrieveStudentSubmissions(ctx context.Context, in *RetrieveStudentSubmissionsRequest, opts ...grpc.CallOption) (*RetrieveStudentSubmissionsResponse, error)
	RetrieveLiveLesson(ctx context.Context, in *RetrieveLiveLessonRequest, opts ...grpc.CallOption) (*RetrieveLiveLessonResponse, error)
	RetrieveCoursesByIDs(ctx context.Context, in *RetrieveCoursesByIDsRequest, opts ...grpc.CallOption) (*RetrieveCoursesResponse, error)
	CreateBrightCoveUploadUrl(ctx context.Context, in *CreateBrightCoveUploadUrlRequest, opts ...grpc.CallOption) (*CreateBrightCoveUploadUrlResponse, error)
	FinishUploadBrightCove(ctx context.Context, in *FinishUploadBrightCoveRequest, opts ...grpc.CallOption) (*FinishUploadBrightCoveResponse, error)
	RetrieveBooks(ctx context.Context, in *RetrieveBooksRequest, opts ...grpc.CallOption) (*RetrieveBooksResponse, error)
}

type courseClient struct {
	cc *grpc.ClientConn
}

func NewCourseClient(cc *grpc.ClientConn) CourseClient {
	return &courseClient{cc}
}

// Deprecated: Do not use.
func (c *courseClient) ListTopic(ctx context.Context, in *ListTopicRequest, opts ...grpc.CallOption) (*ListTopicResponse, error) {
	out := new(ListTopicResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Course/ListTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *courseClient) ListTopics(ctx context.Context, in *ListTopicsRequest, opts ...grpc.CallOption) (*ListTopicsResponse, error) {
	out := new(ListTopicsResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Course/ListTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) UpsertLOs(ctx context.Context, in *UpsertLOsRequest, opts ...grpc.CallOption) (*UpsertLOsResponse, error) {
	out := new(UpsertLOsResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Course/UpsertLOs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *courseClient) UpsertQuizSets(ctx context.Context, in *UpsertQuizRequest, opts ...grpc.CallOption) (*UpsertQuizResponse, error) {
	out := new(UpsertQuizResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Course/UpsertQuizSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *courseClient) TakeTheQuiz(ctx context.Context, in *TakeTheQuizRequest, opts ...grpc.CallOption) (*TakeTheQuizResponse, error) {
	out := new(TakeTheQuizResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Course/TakeTheQuiz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *courseClient) TakeTheQuizV2(ctx context.Context, in *TakeTheQuizRequest, opts ...grpc.CallOption) (*TakeTheQuizV2Response, error) {
	out := new(TakeTheQuizV2Response)
	err := c.cc.Invoke(ctx, "/manabie.bob.Course/TakeTheQuizV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *courseClient) UpsertQuestions(ctx context.Context, in *UpsertQuestionsRequest, opts ...grpc.CallOption) (*UpsertQuestionsResponse, error) {
	out := new(UpsertQuestionsResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Course/UpsertQuestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *courseClient) GetHistoryQuizDetail(ctx context.Context, in *GetHistoryQuizDetailRequest, opts ...grpc.CallOption) (*GetHistoryQuizDetailResponse, error) {
	out := new(GetHistoryQuizDetailResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Course/GetHistoryQuizDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) UpsertPresetStudyPlans(ctx context.Context, in *UpsertPresetStudyPlansRequest, opts ...grpc.CallOption) (*UpsertPresetStudyPlansResponse, error) {
	out := new(UpsertPresetStudyPlansResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Course/UpsertPresetStudyPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) UpsertPresetStudyPlanWeeklies(ctx context.Context, in *UpsertPresetStudyPlanWeekliesRequest, opts ...grpc.CallOption) (*UpsertPresetStudyPlanWeekliesResponse, error) {
	out := new(UpsertPresetStudyPlanWeekliesResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Course/UpsertPresetStudyPlanWeeklies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) RetrieveGradeMap(ctx context.Context, in *RetrieveGradeMapRequest, opts ...grpc.CallOption) (*RetrieveGradeMapResponse, error) {
	out := new(RetrieveGradeMapResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Course/RetrieveGradeMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) SuggestLO(ctx context.Context, in *SuggestLORequest, opts ...grpc.CallOption) (*SuggestLOResponse, error) {
	out := new(SuggestLOResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Course/SuggestLO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *courseClient) GetChapterList(ctx context.Context, in *GetChapterListRequest, opts ...grpc.CallOption) (*GetChapterListResponse, error) {
	out := new(GetChapterListResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Course/GetChapterList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) RetrieveCourses(ctx context.Context, in *RetrieveCoursesRequest, opts ...grpc.CallOption) (*RetrieveCoursesResponse, error) {
	out := new(RetrieveCoursesResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Course/RetrieveCourses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) RetrieveAssignedCourses(ctx context.Context, in *RetrieveCoursesRequest, opts ...grpc.CallOption) (*RetrieveCoursesResponse, error) {
	out := new(RetrieveCoursesResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Course/RetrieveAssignedCourses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *courseClient) RetrieveStudentSubmissions(ctx context.Context, in *RetrieveStudentSubmissionsRequest, opts ...grpc.CallOption) (*RetrieveStudentSubmissionsResponse, error) {
	out := new(RetrieveStudentSubmissionsResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Course/RetrieveStudentSubmissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) RetrieveLiveLesson(ctx context.Context, in *RetrieveLiveLessonRequest, opts ...grpc.CallOption) (*RetrieveLiveLessonResponse, error) {
	out := new(RetrieveLiveLessonResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Course/RetrieveLiveLesson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) RetrieveCoursesByIDs(ctx context.Context, in *RetrieveCoursesByIDsRequest, opts ...grpc.CallOption) (*RetrieveCoursesResponse, error) {
	out := new(RetrieveCoursesResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Course/RetrieveCoursesByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) CreateBrightCoveUploadUrl(ctx context.Context, in *CreateBrightCoveUploadUrlRequest, opts ...grpc.CallOption) (*CreateBrightCoveUploadUrlResponse, error) {
	out := new(CreateBrightCoveUploadUrlResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Course/CreateBrightCoveUploadUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) FinishUploadBrightCove(ctx context.Context, in *FinishUploadBrightCoveRequest, opts ...grpc.CallOption) (*FinishUploadBrightCoveResponse, error) {
	out := new(FinishUploadBrightCoveResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Course/FinishUploadBrightCove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseClient) RetrieveBooks(ctx context.Context, in *RetrieveBooksRequest, opts ...grpc.CallOption) (*RetrieveBooksResponse, error) {
	out := new(RetrieveBooksResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Course/RetrieveBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseServer is the server API for Course service.
type CourseServer interface {
	ListTopic(context.Context, *ListTopicRequest) (*ListTopicResponse, error)
	ListTopics(context.Context, *ListTopicsRequest) (*ListTopicsResponse, error)
	UpsertLOs(context.Context, *UpsertLOsRequest) (*UpsertLOsResponse, error)
	UpsertQuizSets(context.Context, *UpsertQuizRequest) (*UpsertQuizResponse, error)
	TakeTheQuiz(context.Context, *TakeTheQuizRequest) (*TakeTheQuizResponse, error)
	TakeTheQuizV2(context.Context, *TakeTheQuizRequest) (*TakeTheQuizV2Response, error)
	UpsertQuestions(context.Context, *UpsertQuestionsRequest) (*UpsertQuestionsResponse, error)
	GetHistoryQuizDetail(context.Context, *GetHistoryQuizDetailRequest) (*GetHistoryQuizDetailResponse, error)
	UpsertPresetStudyPlans(context.Context, *UpsertPresetStudyPlansRequest) (*UpsertPresetStudyPlansResponse, error)
	UpsertPresetStudyPlanWeeklies(context.Context, *UpsertPresetStudyPlanWeekliesRequest) (*UpsertPresetStudyPlanWeekliesResponse, error)
	RetrieveGradeMap(context.Context, *RetrieveGradeMapRequest) (*RetrieveGradeMapResponse, error)
	SuggestLO(context.Context, *SuggestLORequest) (*SuggestLOResponse, error)
	GetChapterList(context.Context, *GetChapterListRequest) (*GetChapterListResponse, error)
	RetrieveCourses(context.Context, *RetrieveCoursesRequest) (*RetrieveCoursesResponse, error)
	RetrieveAssignedCourses(context.Context, *RetrieveCoursesRequest) (*RetrieveCoursesResponse, error)
	RetrieveStudentSubmissions(context.Context, *RetrieveStudentSubmissionsRequest) (*RetrieveStudentSubmissionsResponse, error)
	RetrieveLiveLesson(context.Context, *RetrieveLiveLessonRequest) (*RetrieveLiveLessonResponse, error)
	RetrieveCoursesByIDs(context.Context, *RetrieveCoursesByIDsRequest) (*RetrieveCoursesResponse, error)
	CreateBrightCoveUploadUrl(context.Context, *CreateBrightCoveUploadUrlRequest) (*CreateBrightCoveUploadUrlResponse, error)
	FinishUploadBrightCove(context.Context, *FinishUploadBrightCoveRequest) (*FinishUploadBrightCoveResponse, error)
	RetrieveBooks(context.Context, *RetrieveBooksRequest) (*RetrieveBooksResponse, error)
}

// UnimplementedCourseServer can be embedded to have forward compatible implementations.
type UnimplementedCourseServer struct {
}

func (*UnimplementedCourseServer) ListTopic(ctx context.Context, req *ListTopicRequest) (*ListTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTopic not implemented")
}
func (*UnimplementedCourseServer) ListTopics(ctx context.Context, req *ListTopicsRequest) (*ListTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTopics not implemented")
}
func (*UnimplementedCourseServer) UpsertLOs(ctx context.Context, req *UpsertLOsRequest) (*UpsertLOsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertLOs not implemented")
}
func (*UnimplementedCourseServer) UpsertQuizSets(ctx context.Context, req *UpsertQuizRequest) (*UpsertQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertQuizSets not implemented")
}
func (*UnimplementedCourseServer) TakeTheQuiz(ctx context.Context, req *TakeTheQuizRequest) (*TakeTheQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeTheQuiz not implemented")
}
func (*UnimplementedCourseServer) TakeTheQuizV2(ctx context.Context, req *TakeTheQuizRequest) (*TakeTheQuizV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeTheQuizV2 not implemented")
}
func (*UnimplementedCourseServer) UpsertQuestions(ctx context.Context, req *UpsertQuestionsRequest) (*UpsertQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertQuestions not implemented")
}
func (*UnimplementedCourseServer) GetHistoryQuizDetail(ctx context.Context, req *GetHistoryQuizDetailRequest) (*GetHistoryQuizDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoryQuizDetail not implemented")
}
func (*UnimplementedCourseServer) UpsertPresetStudyPlans(ctx context.Context, req *UpsertPresetStudyPlansRequest) (*UpsertPresetStudyPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertPresetStudyPlans not implemented")
}
func (*UnimplementedCourseServer) UpsertPresetStudyPlanWeeklies(ctx context.Context, req *UpsertPresetStudyPlanWeekliesRequest) (*UpsertPresetStudyPlanWeekliesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertPresetStudyPlanWeeklies not implemented")
}
func (*UnimplementedCourseServer) RetrieveGradeMap(ctx context.Context, req *RetrieveGradeMapRequest) (*RetrieveGradeMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveGradeMap not implemented")
}
func (*UnimplementedCourseServer) SuggestLO(ctx context.Context, req *SuggestLORequest) (*SuggestLOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestLO not implemented")
}
func (*UnimplementedCourseServer) GetChapterList(ctx context.Context, req *GetChapterListRequest) (*GetChapterListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChapterList not implemented")
}
func (*UnimplementedCourseServer) RetrieveCourses(ctx context.Context, req *RetrieveCoursesRequest) (*RetrieveCoursesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveCourses not implemented")
}
func (*UnimplementedCourseServer) RetrieveAssignedCourses(ctx context.Context, req *RetrieveCoursesRequest) (*RetrieveCoursesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveAssignedCourses not implemented")
}
func (*UnimplementedCourseServer) RetrieveStudentSubmissions(ctx context.Context, req *RetrieveStudentSubmissionsRequest) (*RetrieveStudentSubmissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveStudentSubmissions not implemented")
}
func (*UnimplementedCourseServer) RetrieveLiveLesson(ctx context.Context, req *RetrieveLiveLessonRequest) (*RetrieveLiveLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveLiveLesson not implemented")
}
func (*UnimplementedCourseServer) RetrieveCoursesByIDs(ctx context.Context, req *RetrieveCoursesByIDsRequest) (*RetrieveCoursesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveCoursesByIDs not implemented")
}
func (*UnimplementedCourseServer) CreateBrightCoveUploadUrl(ctx context.Context, req *CreateBrightCoveUploadUrlRequest) (*CreateBrightCoveUploadUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBrightCoveUploadUrl not implemented")
}
func (*UnimplementedCourseServer) FinishUploadBrightCove(ctx context.Context, req *FinishUploadBrightCoveRequest) (*FinishUploadBrightCoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishUploadBrightCove not implemented")
}
func (*UnimplementedCourseServer) RetrieveBooks(ctx context.Context, req *RetrieveBooksRequest) (*RetrieveBooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveBooks not implemented")
}

func RegisterCourseServer(s *grpc.Server, srv CourseServer) {
	s.RegisterService(&_Course_serviceDesc, srv)
}

func _Course_ListTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).ListTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Course/ListTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).ListTopic(ctx, req.(*ListTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_ListTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).ListTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Course/ListTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).ListTopics(ctx, req.(*ListTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_UpsertLOs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertLOsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).UpsertLOs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Course/UpsertLOs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).UpsertLOs(ctx, req.(*UpsertLOsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_UpsertQuizSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).UpsertQuizSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Course/UpsertQuizSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).UpsertQuizSets(ctx, req.(*UpsertQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_TakeTheQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TakeTheQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).TakeTheQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Course/TakeTheQuiz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).TakeTheQuiz(ctx, req.(*TakeTheQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_TakeTheQuizV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TakeTheQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).TakeTheQuizV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Course/TakeTheQuizV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).TakeTheQuizV2(ctx, req.(*TakeTheQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_UpsertQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).UpsertQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Course/UpsertQuestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).UpsertQuestions(ctx, req.(*UpsertQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_GetHistoryQuizDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoryQuizDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).GetHistoryQuizDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Course/GetHistoryQuizDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).GetHistoryQuizDetail(ctx, req.(*GetHistoryQuizDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_UpsertPresetStudyPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertPresetStudyPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).UpsertPresetStudyPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Course/UpsertPresetStudyPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).UpsertPresetStudyPlans(ctx, req.(*UpsertPresetStudyPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_UpsertPresetStudyPlanWeeklies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertPresetStudyPlanWeekliesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).UpsertPresetStudyPlanWeeklies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Course/UpsertPresetStudyPlanWeeklies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).UpsertPresetStudyPlanWeeklies(ctx, req.(*UpsertPresetStudyPlanWeekliesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_RetrieveGradeMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveGradeMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).RetrieveGradeMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Course/RetrieveGradeMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).RetrieveGradeMap(ctx, req.(*RetrieveGradeMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_SuggestLO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestLORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).SuggestLO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Course/SuggestLO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).SuggestLO(ctx, req.(*SuggestLORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_GetChapterList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChapterListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).GetChapterList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Course/GetChapterList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).GetChapterList(ctx, req.(*GetChapterListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_RetrieveCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveCoursesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).RetrieveCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Course/RetrieveCourses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).RetrieveCourses(ctx, req.(*RetrieveCoursesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_RetrieveAssignedCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveCoursesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).RetrieveAssignedCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Course/RetrieveAssignedCourses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).RetrieveAssignedCourses(ctx, req.(*RetrieveCoursesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_RetrieveStudentSubmissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveStudentSubmissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).RetrieveStudentSubmissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Course/RetrieveStudentSubmissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).RetrieveStudentSubmissions(ctx, req.(*RetrieveStudentSubmissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_RetrieveLiveLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveLiveLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).RetrieveLiveLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Course/RetrieveLiveLesson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).RetrieveLiveLesson(ctx, req.(*RetrieveLiveLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_RetrieveCoursesByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveCoursesByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).RetrieveCoursesByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Course/RetrieveCoursesByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).RetrieveCoursesByIDs(ctx, req.(*RetrieveCoursesByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_CreateBrightCoveUploadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBrightCoveUploadUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).CreateBrightCoveUploadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Course/CreateBrightCoveUploadUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).CreateBrightCoveUploadUrl(ctx, req.(*CreateBrightCoveUploadUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_FinishUploadBrightCove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishUploadBrightCoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).FinishUploadBrightCove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Course/FinishUploadBrightCove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).FinishUploadBrightCove(ctx, req.(*FinishUploadBrightCoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Course_RetrieveBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveBooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServer).RetrieveBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Course/RetrieveBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServer).RetrieveBooks(ctx, req.(*RetrieveBooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Course_serviceDesc = grpc.ServiceDesc{
	ServiceName: "manabie.bob.Course",
	HandlerType: (*CourseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTopic",
			Handler:    _Course_ListTopic_Handler,
		},
		{
			MethodName: "ListTopics",
			Handler:    _Course_ListTopics_Handler,
		},
		{
			MethodName: "UpsertLOs",
			Handler:    _Course_UpsertLOs_Handler,
		},
		{
			MethodName: "UpsertQuizSets",
			Handler:    _Course_UpsertQuizSets_Handler,
		},
		{
			MethodName: "TakeTheQuiz",
			Handler:    _Course_TakeTheQuiz_Handler,
		},
		{
			MethodName: "TakeTheQuizV2",
			Handler:    _Course_TakeTheQuizV2_Handler,
		},
		{
			MethodName: "UpsertQuestions",
			Handler:    _Course_UpsertQuestions_Handler,
		},
		{
			MethodName: "GetHistoryQuizDetail",
			Handler:    _Course_GetHistoryQuizDetail_Handler,
		},
		{
			MethodName: "UpsertPresetStudyPlans",
			Handler:    _Course_UpsertPresetStudyPlans_Handler,
		},
		{
			MethodName: "UpsertPresetStudyPlanWeeklies",
			Handler:    _Course_UpsertPresetStudyPlanWeeklies_Handler,
		},
		{
			MethodName: "RetrieveGradeMap",
			Handler:    _Course_RetrieveGradeMap_Handler,
		},
		{
			MethodName: "SuggestLO",
			Handler:    _Course_SuggestLO_Handler,
		},
		{
			MethodName: "GetChapterList",
			Handler:    _Course_GetChapterList_Handler,
		},
		{
			MethodName: "RetrieveCourses",
			Handler:    _Course_RetrieveCourses_Handler,
		},
		{
			MethodName: "RetrieveAssignedCourses",
			Handler:    _Course_RetrieveAssignedCourses_Handler,
		},
		{
			MethodName: "RetrieveStudentSubmissions",
			Handler:    _Course_RetrieveStudentSubmissions_Handler,
		},
		{
			MethodName: "RetrieveLiveLesson",
			Handler:    _Course_RetrieveLiveLesson_Handler,
		},
		{
			MethodName: "RetrieveCoursesByIDs",
			Handler:    _Course_RetrieveCoursesByIDs_Handler,
		},
		{
			MethodName: "CreateBrightCoveUploadUrl",
			Handler:    _Course_CreateBrightCoveUploadUrl_Handler,
		},
		{
			MethodName: "FinishUploadBrightCove",
			Handler:    _Course_FinishUploadBrightCove_Handler,
		},
		{
			MethodName: "RetrieveBooks",
			Handler:    _Course_RetrieveBooks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "courses.proto",
}

func (m *AssignmentSubmission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssignmentSubmission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssignmentSubmission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Attachments) > 0 {
		for iNdEx := len(m.Attachments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attachments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TopicId) > 0 {
		i -= len(m.TopicId)
		copy(dAtA[i:], m.TopicId)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.TopicId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SubmissionId) > 0 {
		i -= len(m.SubmissionId)
		copy(dAtA[i:], m.SubmissionId)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.SubmissionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListSubmissionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSubmissionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSubmissionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OffsetId != nil {
		{
			size, err := m.OffsetId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Limit != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if len(m.StudentIds) > 0 {
		for iNdEx := len(m.StudentIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StudentIds[iNdEx])
			copy(dAtA[i:], m.StudentIds[iNdEx])
			i = encodeVarintCourses(dAtA, i, uint64(len(m.StudentIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.TopicId) > 0 {
		i -= len(m.TopicId)
		copy(dAtA[i:], m.TopicId)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.TopicId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListSubmissionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSubmissionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSubmissionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Submissions) > 0 {
		for iNdEx := len(m.Submissions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Submissions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Attachment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Attachment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Attachment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListTopicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTopicRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTopicRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TopicType != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.TopicType))
		i--
		dAtA[i] = 0x20
	}
	if m.Subject != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Subject))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Grade) > 0 {
		i -= len(m.Grade)
		copy(dAtA[i:], m.Grade)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Grade)))
		i--
		dAtA[i] = 0x12
	}
	if m.Country != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListTopicResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTopicResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTopicResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Topics) > 0 {
		for iNdEx := len(m.Topics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Topics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListTopicsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTopicsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTopicsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WithCompleteness {
		i--
		if m.WithCompleteness {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.TopicType != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.TopicType))
		i--
		dAtA[i] = 0x20
	}
	if m.Subject != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Subject))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Grade) > 0 {
		i -= len(m.Grade)
		copy(dAtA[i:], m.Grade)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Grade)))
		i--
		dAtA[i] = 0x12
	}
	if m.Country != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListTopicsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTopicsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTopicsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Topics) > 0 {
		for iNdEx := len(m.Topics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Topics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListTopicsResponse_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTopicsResponse_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTopicsResponse_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalFinishedLos != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.TotalFinishedLos))
		i--
		dAtA[i] = 0x10
	}
	if m.Topic != nil {
		{
			size, err := m.Topic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Topic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Topic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Topic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EssayRequired {
		i--
		if m.EssayRequired {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.CopiedTopicId != nil {
		{
			size, err := m.CopiedTopicId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.Attachments) > 0 {
		for iNdEx := len(m.Attachments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attachments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.Instruction) > 0 {
		i -= len(m.Instruction)
		copy(dAtA[i:], m.Instruction)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Instruction)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.IconUrl) > 0 {
		i -= len(m.IconUrl)
		copy(dAtA[i:], m.IconUrl)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.IconUrl)))
		i--
		dAtA[i] = 0x7a
	}
	if m.SchoolId != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.SchoolId))
		i--
		dAtA[i] = 0x70
	}
	if len(m.ChapterId) > 0 {
		i -= len(m.ChapterId)
		copy(dAtA[i:], m.ChapterId)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.ChapterId)))
		i--
		dAtA[i] = 0x6a
	}
	if m.TotalLos != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.TotalLos))
		i--
		dAtA[i] = 0x60
	}
	if m.PublishedAt != nil {
		{
			size, err := m.PublishedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.DisplayOrder != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.DisplayOrder))
		i--
		dAtA[i] = 0x50
	}
	if m.Status != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x48
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Type != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x30
	}
	if m.Subject != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Subject))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Grade) > 0 {
		i -= len(m.Grade)
		copy(dAtA[i:], m.Grade)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Grade)))
		i--
		dAtA[i] = 0x22
	}
	if m.Country != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Completenes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Completenes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Completenes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FirstQuizCorrectness != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FirstQuizCorrectness))))
		i--
		dAtA[i] = 0x25
	}
	if m.StudyGuideFinished {
		i--
		if m.StudyGuideFinished {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.VideoFinished {
		i--
		if m.VideoFinished {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.QuizFinished {
		i--
		if m.QuizFinished {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Question) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Question) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Question) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExplanationWrongAnswerRendered) > 0 {
		for iNdEx := len(m.ExplanationWrongAnswerRendered) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExplanationWrongAnswerRendered[iNdEx])
			copy(dAtA[i:], m.ExplanationWrongAnswerRendered[iNdEx])
			i = encodeVarintCourses(dAtA, i, uint64(len(m.ExplanationWrongAnswerRendered[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.ExplanationWrongAnswer) > 0 {
		for iNdEx := len(m.ExplanationWrongAnswer) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExplanationWrongAnswer[iNdEx])
			copy(dAtA[i:], m.ExplanationWrongAnswer[iNdEx])
			i = encodeVarintCourses(dAtA, i, uint64(len(m.ExplanationWrongAnswer[iNdEx])))
			i--
			dAtA[i] = 0x7a
		}
	}
	if m.IsWaitingForRender {
		i--
		if m.IsWaitingForRender {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if len(m.ExplanationRendered) > 0 {
		i -= len(m.ExplanationRendered)
		copy(dAtA[i:], m.ExplanationRendered)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.ExplanationRendered)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.AnswersRendered) > 0 {
		for iNdEx := len(m.AnswersRendered) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AnswersRendered[iNdEx])
			copy(dAtA[i:], m.AnswersRendered[iNdEx])
			i = encodeVarintCourses(dAtA, i, uint64(len(m.AnswersRendered[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.QuestionRendered) > 0 {
		i -= len(m.QuestionRendered)
		copy(dAtA[i:], m.QuestionRendered)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.QuestionRendered)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.QuestionsTagLo) > 0 {
		for iNdEx := len(m.QuestionsTagLo) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.QuestionsTagLo[iNdEx])
			copy(dAtA[i:], m.QuestionsTagLo[iNdEx])
			i = encodeVarintCourses(dAtA, i, uint64(len(m.QuestionsTagLo[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.DifficultyLevel != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.DifficultyLevel))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Explanation) > 0 {
		i -= len(m.Explanation)
		copy(dAtA[i:], m.Explanation)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Explanation)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Answers) > 0 {
		for iNdEx := len(m.Answers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Answers[iNdEx])
			copy(dAtA[i:], m.Answers[iNdEx])
			i = encodeVarintCourses(dAtA, i, uint64(len(m.Answers[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Question) > 0 {
		i -= len(m.Question)
		copy(dAtA[i:], m.Question)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Question)))
		i--
		dAtA[i] = 0x22
	}
	if m.Country != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MasterQuestionId) > 0 {
		i -= len(m.MasterQuestionId)
		copy(dAtA[i:], m.MasterQuestionId)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.MasterQuestionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LearningObjective) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LearningObjective) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LearningObjective) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.SchoolId != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.SchoolId))
		i--
		dAtA[i] = 0x78
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Prerequisites) > 0 {
		for iNdEx := len(m.Prerequisites) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Prerequisites[iNdEx])
			copy(dAtA[i:], m.Prerequisites[iNdEx])
			i = encodeVarintCourses(dAtA, i, uint64(len(m.Prerequisites[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.VideoScript) > 0 {
		i -= len(m.VideoScript)
		copy(dAtA[i:], m.VideoScript)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.VideoScript)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.MasterLo) > 0 {
		i -= len(m.MasterLo)
		copy(dAtA[i:], m.MasterLo)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.MasterLo)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.TopicId) > 0 {
		i -= len(m.TopicId)
		copy(dAtA[i:], m.TopicId)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.TopicId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.StudyGuide) > 0 {
		i -= len(m.StudyGuide)
		copy(dAtA[i:], m.StudyGuide)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.StudyGuide)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Video) > 0 {
		i -= len(m.Video)
		copy(dAtA[i:], m.Video)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Video)))
		i--
		dAtA[i] = 0x3a
	}
	if m.DisplayOrder != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.DisplayOrder))
		i--
		dAtA[i] = 0x30
	}
	if m.Subject != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Subject))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Grade) > 0 {
		i -= len(m.Grade)
		copy(dAtA[i:], m.Grade)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Grade)))
		i--
		dAtA[i] = 0x22
	}
	if m.Country != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuizSets) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuizSets) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuizSets) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.DisplayOrder) > 0 {
		i -= len(m.DisplayOrder)
		copy(dAtA[i:], m.DisplayOrder)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.DisplayOrder)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.QuestionId) > 0 {
		i -= len(m.QuestionId)
		copy(dAtA[i:], m.QuestionId)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.QuestionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LoId) > 0 {
		i -= len(m.LoId)
		copy(dAtA[i:], m.LoId)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.LoId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpsertLOsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertLOsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertLOsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LearningObjectives) > 0 {
		for iNdEx := len(m.LearningObjectives) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LearningObjectives[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpsertLOsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertLOsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertLOsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LoIds) > 0 {
		for iNdEx := len(m.LoIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LoIds[iNdEx])
			copy(dAtA[i:], m.LoIds[iNdEx])
			i = encodeVarintCourses(dAtA, i, uint64(len(m.LoIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SubmissionResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmissionResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmissionResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Correct {
		i--
		if m.Correct {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.QuestionId) > 0 {
		i -= len(m.QuestionId)
		copy(dAtA[i:], m.QuestionId)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.QuestionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TakeTheQuizRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TakeTheQuizRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TakeTheQuizRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.LoId) > 0 {
		i -= len(m.LoId)
		copy(dAtA[i:], m.LoId)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.LoId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TakeTheQuizResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TakeTheQuizResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TakeTheQuizResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Quizset) > 0 {
		for iNdEx := len(m.Quizset) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Quizset[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpsertQuestionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertQuestionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertQuestionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Questions) > 0 {
		for iNdEx := len(m.Questions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Questions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpsertQuestionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertQuestionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertQuestionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QuestionIds) > 0 {
		for iNdEx := len(m.QuestionIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.QuestionIds[iNdEx])
			copy(dAtA[i:], m.QuestionIds[iNdEx])
			i = encodeVarintCourses(dAtA, i, uint64(len(m.QuestionIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PresetStudyPlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PresetStudyPlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PresetStudyPlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartDate != nil {
		{
			size, err := m.StartDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Subject != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Subject))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Grade) > 0 {
		i -= len(m.Grade)
		copy(dAtA[i:], m.Grade)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Grade)))
		i--
		dAtA[i] = 0x22
	}
	if m.Country != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpsertPresetStudyPlansRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertPresetStudyPlansRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertPresetStudyPlansRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PresetStudyPlans) > 0 {
		for iNdEx := len(m.PresetStudyPlans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PresetStudyPlans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpsertPresetStudyPlansResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertPresetStudyPlansResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertPresetStudyPlansResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PresetStudyPlanIds) > 0 {
		for iNdEx := len(m.PresetStudyPlanIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PresetStudyPlanIds[iNdEx])
			copy(dAtA[i:], m.PresetStudyPlanIds[iNdEx])
			i = encodeVarintCourses(dAtA, i, uint64(len(m.PresetStudyPlanIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PresetStudyPlanWeekly) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PresetStudyPlanWeekly) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PresetStudyPlanWeekly) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Week != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Week))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PresetStudyPlanId) > 0 {
		i -= len(m.PresetStudyPlanId)
		copy(dAtA[i:], m.PresetStudyPlanId)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.PresetStudyPlanId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TopicId) > 0 {
		i -= len(m.TopicId)
		copy(dAtA[i:], m.TopicId)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.TopicId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpsertPresetStudyPlanWeekliesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertPresetStudyPlanWeekliesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertPresetStudyPlanWeekliesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PresetStudyPlanWeeklies) > 0 {
		for iNdEx := len(m.PresetStudyPlanWeeklies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PresetStudyPlanWeeklies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpsertPresetStudyPlanWeekliesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertPresetStudyPlanWeekliesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertPresetStudyPlanWeekliesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PresetStudyPlanWeeklyIds) > 0 {
		for iNdEx := len(m.PresetStudyPlanWeeklyIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PresetStudyPlanWeeklyIds[iNdEx])
			copy(dAtA[i:], m.PresetStudyPlanWeeklyIds[iNdEx])
			i = encodeVarintCourses(dAtA, i, uint64(len(m.PresetStudyPlanWeeklyIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpsertQuizRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertQuizRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertQuizRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Quizsets) > 0 {
		for iNdEx := len(m.Quizsets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Quizsets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpsertQuizResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertQuizResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertQuizResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Successful {
		i--
		if m.Successful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LocalGrade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalGrade) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalGrade) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LocalGrade) > 0 {
		for k := range m.LocalGrade {
			v := m.LocalGrade[k]
			baseI := i
			i = encodeVarintCourses(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCourses(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCourses(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveGradeMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveGradeMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveGradeMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GradeMap) > 0 {
		for k := range m.GradeMap {
			v := m.GradeMap[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintCourses(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCourses(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCourses(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveGradeMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveGradeMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveGradeMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetHistoryQuizDetailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHistoryQuizDetailRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetHistoryQuizDetailRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QuizId) > 0 {
		i -= len(m.QuizId)
		copy(dAtA[i:], m.QuizId)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.QuizId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetHistoryQuizDetailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetHistoryQuizDetailResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetHistoryQuizDetailResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DisplayOrder != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.DisplayOrder))
		i--
		dAtA[i] = 0x18
	}
	if m.SelectedAnswer != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.SelectedAnswer))
		i--
		dAtA[i] = 0x10
	}
	if m.Question != nil {
		{
			size, err := m.Question.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SuggestLORequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuggestLORequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuggestLORequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LoName) > 0 {
		i -= len(m.LoName)
		copy(dAtA[i:], m.LoName)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.LoName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SuggestLOResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuggestLOResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuggestLOResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SuggestLos) > 0 {
		for iNdEx := len(m.SuggestLos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SuggestLos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Chapter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Chapter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Chapter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SchoolId != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.SchoolId))
		i--
		dAtA[i] = 0x50
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Topics) > 0 {
		for iNdEx := len(m.Topics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Topics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.DisplayOrder != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.DisplayOrder))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Grade) > 0 {
		i -= len(m.Grade)
		copy(dAtA[i:], m.Grade)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Grade)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Subject != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Subject))
		i--
		dAtA[i] = 0x20
	}
	if m.Country != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChapterName) > 0 {
		i -= len(m.ChapterName)
		copy(dAtA[i:], m.ChapterName)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.ChapterName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChapterId) > 0 {
		i -= len(m.ChapterId)
		copy(dAtA[i:], m.ChapterId)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.ChapterId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetChapterListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChapterListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetChapterListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Country != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Grade) > 0 {
		i -= len(m.Grade)
		copy(dAtA[i:], m.Grade)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Grade)))
		i--
		dAtA[i] = 0x32
	}
	if m.Subject != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Subject))
		i--
		dAtA[i] = 0x28
	}
	if m.Page != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x20
	}
	if m.Limit != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChapterName) > 0 {
		i -= len(m.ChapterName)
		copy(dAtA[i:], m.ChapterName)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.ChapterName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChapterId) > 0 {
		i -= len(m.ChapterId)
		copy(dAtA[i:], m.ChapterId)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.ChapterId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetChapterListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChapterListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetChapterListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Chapters) > 0 {
		for iNdEx := len(m.Chapters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Chapters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveCoursesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveCoursesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveCoursesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClassId != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x60
	}
	if m.IsAssigned {
		i--
		if m.IsAssigned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.CourseStatus != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.CourseStatus))
		i--
		dAtA[i] = 0x50
	}
	if m.CourseType != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.CourseType))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Countries) > 0 {
		dAtA22 := make([]byte, len(m.Countries)*10)
		var j21 int
		for _, num := range m.Countries {
			for num >= 1<<7 {
				dAtA22[j21] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j21++
			}
			dAtA22[j21] = uint8(num)
			j21++
		}
		i -= j21
		copy(dAtA[i:], dAtA22[:j21])
		i = encodeVarintCourses(dAtA, i, uint64(j21))
		i--
		dAtA[i] = 0x42
	}
	if m.Page != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x38
	}
	if m.Limit != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Grade) > 0 {
		i -= len(m.Grade)
		copy(dAtA[i:], m.Grade)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Grade)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Subject != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Subject))
		i--
		dAtA[i] = 0x20
	}
	if m.Country != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveCoursesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveCoursesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveCoursesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Courses) > 0 {
		for iNdEx := len(m.Courses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Courses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveCoursesResponse_Course) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveCoursesResponse_Course) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveCoursesResponse_Course) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BookIds) > 0 {
		for iNdEx := len(m.BookIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BookIds[iNdEx])
			copy(dAtA[i:], m.BookIds[iNdEx])
			i = encodeVarintCourses(dAtA, i, uint64(len(m.BookIds[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.ClassIds) > 0 {
		dAtA24 := make([]byte, len(m.ClassIds)*10)
		var j23 int
		for _, num1 := range m.ClassIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA24[j23] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j23++
			}
			dAtA24[j23] = uint8(num)
			j23++
		}
		i -= j23
		copy(dAtA[i:], dAtA24[:j23])
		i = encodeVarintCourses(dAtA, i, uint64(j23))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.CourseStatus != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.CourseStatus))
		i--
		dAtA[i] = 0x78
	}
	if len(m.Teachers) > 0 {
		for iNdEx := len(m.Teachers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Teachers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if m.CourseType != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.CourseType))
		i--
		dAtA[i] = 0x68
	}
	if m.EndDate != nil {
		{
			size, err := m.EndDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.StartDate != nil {
		{
			size, err := m.StartDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.ClassId != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x50
	}
	if m.SchoolId != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.SchoolId))
		i--
		dAtA[i] = 0x48
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Chapters) > 0 {
		for iNdEx := len(m.Chapters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Chapters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Grade) > 0 {
		i -= len(m.Grade)
		copy(dAtA[i:], m.Grade)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Grade)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Subject != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Subject))
		i--
		dAtA[i] = 0x20
	}
	if m.Country != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveStudentSubmissionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveStudentSubmissionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveStudentSubmissionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LoId) > 0 {
		i -= len(m.LoId)
		copy(dAtA[i:], m.LoId)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.LoId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Page != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x20
	}
	if m.Limit != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveStudentSubmissionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveStudentSubmissionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveStudentSubmissionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Submissions) > 0 {
		for iNdEx := len(m.Submissions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Submissions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuestionV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuestionV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuestionV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsWaitingForRender {
		i--
		if m.IsWaitingForRender {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.ExplanationWrongAnswerUrl) > 0 {
		for iNdEx := len(m.ExplanationWrongAnswerUrl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExplanationWrongAnswerUrl[iNdEx])
			copy(dAtA[i:], m.ExplanationWrongAnswerUrl[iNdEx])
			i = encodeVarintCourses(dAtA, i, uint64(len(m.ExplanationWrongAnswerUrl[iNdEx])))
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.ExplanationWrongAnswer) > 0 {
		for iNdEx := len(m.ExplanationWrongAnswer) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExplanationWrongAnswer[iNdEx])
			copy(dAtA[i:], m.ExplanationWrongAnswer[iNdEx])
			i = encodeVarintCourses(dAtA, i, uint64(len(m.ExplanationWrongAnswer[iNdEx])))
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.ExplanationUrl) > 0 {
		i -= len(m.ExplanationUrl)
		copy(dAtA[i:], m.ExplanationUrl)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.ExplanationUrl)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.AnswersUrl) > 0 {
		for iNdEx := len(m.AnswersUrl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AnswersUrl[iNdEx])
			copy(dAtA[i:], m.AnswersUrl[iNdEx])
			i = encodeVarintCourses(dAtA, i, uint64(len(m.AnswersUrl[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.QuestionUrl) > 0 {
		i -= len(m.QuestionUrl)
		copy(dAtA[i:], m.QuestionUrl)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.QuestionUrl)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.QuestionsTagLo) > 0 {
		for iNdEx := len(m.QuestionsTagLo) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.QuestionsTagLo[iNdEx])
			copy(dAtA[i:], m.QuestionsTagLo[iNdEx])
			i = encodeVarintCourses(dAtA, i, uint64(len(m.QuestionsTagLo[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.DifficultyLevel != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.DifficultyLevel))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Explanation) > 0 {
		i -= len(m.Explanation)
		copy(dAtA[i:], m.Explanation)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Explanation)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Answers) > 0 {
		for iNdEx := len(m.Answers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Answers[iNdEx])
			copy(dAtA[i:], m.Answers[iNdEx])
			i = encodeVarintCourses(dAtA, i, uint64(len(m.Answers[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Question) > 0 {
		i -= len(m.Question)
		copy(dAtA[i:], m.Question)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Question)))
		i--
		dAtA[i] = 0x22
	}
	if m.Country != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MasterQuestionId) > 0 {
		i -= len(m.MasterQuestionId)
		copy(dAtA[i:], m.MasterQuestionId)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.MasterQuestionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TakeTheQuizV2Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TakeTheQuizV2Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TakeTheQuizV2Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Quizset) > 0 {
		for iNdEx := len(m.Quizset) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Quizset[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Pagination) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pagination) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pagination) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveLiveLessonRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveLiveLessonRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveLiveLessonRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.To != nil {
		{
			size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CourseIds) > 0 {
		for iNdEx := len(m.CourseIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CourseIds[iNdEx])
			copy(dAtA[i:], m.CourseIds[iNdEx])
			i = encodeVarintCourses(dAtA, i, uint64(len(m.CourseIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Lesson) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Lesson) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Lesson) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserClassIds) > 0 {
		dAtA35 := make([]byte, len(m.UserClassIds)*10)
		var j34 int
		for _, num1 := range m.UserClassIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA35[j34] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j34++
			}
			dAtA35[j34] = uint8(num)
			j34++
		}
		i -= j34
		copy(dAtA[i:], dAtA35[:j34])
		i = encodeVarintCourses(dAtA, i, uint64(j34))
		i--
		dAtA[i] = 0x52
	}
	if len(m.CourseId) > 0 {
		i -= len(m.CourseId)
		copy(dAtA[i:], m.CourseId)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.CourseId)))
		i--
		dAtA[i] = 0x4a
	}
	if m.TotalLearner != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.TotalLearner))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Teacher) > 0 {
		for iNdEx := len(m.Teacher) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Teacher[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Status != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if len(m.PresetStudyPlanWeeklyIds) > 0 {
		i -= len(m.PresetStudyPlanWeeklyIds)
		copy(dAtA[i:], m.PresetStudyPlanWeeklyIds)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.PresetStudyPlanWeeklyIds)))
		i--
		dAtA[i] = 0x2a
	}
	if m.EndTime != nil {
		{
			size, err := m.EndTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.StartTime != nil {
		{
			size, err := m.StartTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Topic != nil {
		{
			size, err := m.Topic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LessonId) > 0 {
		i -= len(m.LessonId)
		copy(dAtA[i:], m.LessonId)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.LessonId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveLiveLessonResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveLiveLessonResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveLiveLessonResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Lessons) > 0 {
		for iNdEx := len(m.Lessons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Lessons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveCoursesByIDsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveCoursesByIDsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveCoursesByIDsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for iNdEx := len(m.Ids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ids[iNdEx])
			copy(dAtA[i:], m.Ids[iNdEx])
			i = encodeVarintCourses(dAtA, i, uint64(len(m.Ids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateBrightCoveUploadUrlRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateBrightCoveUploadUrlRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateBrightCoveUploadUrlRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateBrightCoveUploadUrlResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateBrightCoveUploadUrlResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateBrightCoveUploadUrlResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VideoId) > 0 {
		i -= len(m.VideoId)
		copy(dAtA[i:], m.VideoId)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.VideoId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ApiRequestUrl) > 0 {
		i -= len(m.ApiRequestUrl)
		copy(dAtA[i:], m.ApiRequestUrl)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.ApiRequestUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SignedUrl) > 0 {
		i -= len(m.SignedUrl)
		copy(dAtA[i:], m.SignedUrl)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.SignedUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FinishUploadBrightCoveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinishUploadBrightCoveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FinishUploadBrightCoveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VideoId) > 0 {
		i -= len(m.VideoId)
		copy(dAtA[i:], m.VideoId)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.VideoId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ApiRequestUrl) > 0 {
		i -= len(m.ApiRequestUrl)
		copy(dAtA[i:], m.ApiRequestUrl)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.ApiRequestUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FinishUploadBrightCoveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinishUploadBrightCoveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FinishUploadBrightCoveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Book) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Book) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Book) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Chapters) > 0 {
		for iNdEx := len(m.Chapters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Chapters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.CourseId) > 0 {
		i -= len(m.CourseId)
		copy(dAtA[i:], m.CourseId)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.CourseId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.SchoolId != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.SchoolId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Grade) > 0 {
		i -= len(m.Grade)
		copy(dAtA[i:], m.Grade)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Grade)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Subject != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Subject))
		i--
		dAtA[i] = 0x20
	}
	if m.Country != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveBooksRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveBooksRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveBooksRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CourseId) > 0 {
		i -= len(m.CourseId)
		copy(dAtA[i:], m.CourseId)
		i = encodeVarintCourses(dAtA, i, uint64(len(m.CourseId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Page != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveBooksResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveBooksResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveBooksResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintCourses(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Books) > 0 {
		for iNdEx := len(m.Books) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Books[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCourses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCourses(dAtA []byte, offset int, v uint64) int {
	offset -= sovCourses(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AssignmentSubmission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubmissionId)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	l = len(m.TopicId)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if len(m.Attachments) > 0 {
		for _, e := range m.Attachments {
			l = e.Size()
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovCourses(uint64(l))
	}
	return n
}

func (m *ListSubmissionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TopicId)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if len(m.StudentIds) > 0 {
		for _, s := range m.StudentIds {
			l = len(s)
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	if m.Limit != 0 {
		n += 1 + sovCourses(uint64(m.Limit))
	}
	if m.OffsetId != nil {
		l = m.OffsetId.Size()
		n += 1 + l + sovCourses(uint64(l))
	}
	return n
}

func (m *ListSubmissionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Submissions) > 0 {
		for _, e := range m.Submissions {
			l = e.Size()
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	return n
}

func (m *Attachment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	return n
}

func (m *ListTopicRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Country != 0 {
		n += 1 + sovCourses(uint64(m.Country))
	}
	l = len(m.Grade)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.Subject != 0 {
		n += 1 + sovCourses(uint64(m.Subject))
	}
	if m.TopicType != 0 {
		n += 1 + sovCourses(uint64(m.TopicType))
	}
	return n
}

func (m *ListTopicResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Topics) > 0 {
		for _, e := range m.Topics {
			l = e.Size()
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	return n
}

func (m *ListTopicsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Country != 0 {
		n += 1 + sovCourses(uint64(m.Country))
	}
	l = len(m.Grade)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.Subject != 0 {
		n += 1 + sovCourses(uint64(m.Subject))
	}
	if m.TopicType != 0 {
		n += 1 + sovCourses(uint64(m.TopicType))
	}
	if m.WithCompleteness {
		n += 2
	}
	return n
}

func (m *ListTopicsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Topics) > 0 {
		for _, e := range m.Topics {
			l = e.Size()
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	return n
}

func (m *ListTopicsResponse_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Topic != nil {
		l = m.Topic.Size()
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.TotalFinishedLos != 0 {
		n += 1 + sovCourses(uint64(m.TotalFinishedLos))
	}
	return n
}

func (m *Topic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.Country != 0 {
		n += 1 + sovCourses(uint64(m.Country))
	}
	l = len(m.Grade)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.Subject != 0 {
		n += 1 + sovCourses(uint64(m.Subject))
	}
	if m.Type != 0 {
		n += 1 + sovCourses(uint64(m.Type))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovCourses(uint64(m.Status))
	}
	if m.DisplayOrder != 0 {
		n += 1 + sovCourses(uint64(m.DisplayOrder))
	}
	if m.PublishedAt != nil {
		l = m.PublishedAt.Size()
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.TotalLos != 0 {
		n += 1 + sovCourses(uint64(m.TotalLos))
	}
	l = len(m.ChapterId)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.SchoolId != 0 {
		n += 1 + sovCourses(uint64(m.SchoolId))
	}
	l = len(m.IconUrl)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	l = len(m.Instruction)
	if l > 0 {
		n += 2 + l + sovCourses(uint64(l))
	}
	if len(m.Attachments) > 0 {
		for _, e := range m.Attachments {
			l = e.Size()
			n += 2 + l + sovCourses(uint64(l))
		}
	}
	if m.CopiedTopicId != nil {
		l = m.CopiedTopicId.Size()
		n += 2 + l + sovCourses(uint64(l))
	}
	if m.EssayRequired {
		n += 3
	}
	return n
}

func (m *Completenes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QuizFinished {
		n += 2
	}
	if m.VideoFinished {
		n += 2
	}
	if m.StudyGuideFinished {
		n += 2
	}
	if m.FirstQuizCorrectness != 0 {
		n += 5
	}
	return n
}

func (m *Question) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	l = len(m.MasterQuestionId)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.Country != 0 {
		n += 1 + sovCourses(uint64(m.Country))
	}
	l = len(m.Question)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if len(m.Answers) > 0 {
		for _, s := range m.Answers {
			l = len(s)
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	l = len(m.Explanation)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.DifficultyLevel != 0 {
		n += 1 + sovCourses(uint64(m.DifficultyLevel))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovCourses(uint64(l))
	}
	if len(m.QuestionsTagLo) > 0 {
		for _, s := range m.QuestionsTagLo {
			l = len(s)
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	l = len(m.QuestionRendered)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if len(m.AnswersRendered) > 0 {
		for _, s := range m.AnswersRendered {
			l = len(s)
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	l = len(m.ExplanationRendered)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.IsWaitingForRender {
		n += 2
	}
	if len(m.ExplanationWrongAnswer) > 0 {
		for _, s := range m.ExplanationWrongAnswer {
			l = len(s)
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	if len(m.ExplanationWrongAnswerRendered) > 0 {
		for _, s := range m.ExplanationWrongAnswerRendered {
			l = len(s)
			n += 2 + l + sovCourses(uint64(l))
		}
	}
	return n
}

func (m *LearningObjective) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.Country != 0 {
		n += 1 + sovCourses(uint64(m.Country))
	}
	l = len(m.Grade)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.Subject != 0 {
		n += 1 + sovCourses(uint64(m.Subject))
	}
	if m.DisplayOrder != 0 {
		n += 1 + sovCourses(uint64(m.DisplayOrder))
	}
	l = len(m.Video)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	l = len(m.StudyGuide)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	l = len(m.TopicId)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	l = len(m.MasterLo)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	l = len(m.VideoScript)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if len(m.Prerequisites) > 0 {
		for _, s := range m.Prerequisites {
			l = len(s)
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.SchoolId != 0 {
		n += 1 + sovCourses(uint64(m.SchoolId))
	}
	if m.Type != 0 {
		n += 2 + sovCourses(uint64(m.Type))
	}
	return n
}

func (m *QuizSets) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LoId)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	l = len(m.QuestionId)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	l = len(m.DisplayOrder)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovCourses(uint64(l))
	}
	return n
}

func (m *UpsertLOsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LearningObjectives) > 0 {
		for _, e := range m.LearningObjectives {
			l = e.Size()
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	return n
}

func (m *UpsertLOsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LoIds) > 0 {
		for _, s := range m.LoIds {
			l = len(s)
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	return n
}

func (m *SubmissionResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QuestionId)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.Correct {
		n += 2
	}
	return n
}

func (m *TakeTheQuizRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LoId)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovCourses(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovCourses(uint64(m.Page))
	}
	return n
}

func (m *TakeTheQuizResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Quizset) > 0 {
		for _, e := range m.Quizset {
			l = e.Size()
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovCourses(uint64(m.Total))
	}
	return n
}

func (m *UpsertQuestionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Questions) > 0 {
		for _, e := range m.Questions {
			l = e.Size()
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	return n
}

func (m *UpsertQuestionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.QuestionIds) > 0 {
		for _, s := range m.QuestionIds {
			l = len(s)
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	return n
}

func (m *PresetStudyPlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.Country != 0 {
		n += 1 + sovCourses(uint64(m.Country))
	}
	l = len(m.Grade)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.Subject != 0 {
		n += 1 + sovCourses(uint64(m.Subject))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.StartDate != nil {
		l = m.StartDate.Size()
		n += 1 + l + sovCourses(uint64(l))
	}
	return n
}

func (m *UpsertPresetStudyPlansRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PresetStudyPlans) > 0 {
		for _, e := range m.PresetStudyPlans {
			l = e.Size()
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	return n
}

func (m *UpsertPresetStudyPlansResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PresetStudyPlanIds) > 0 {
		for _, s := range m.PresetStudyPlanIds {
			l = len(s)
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	return n
}

func (m *PresetStudyPlanWeekly) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	l = len(m.TopicId)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	l = len(m.PresetStudyPlanId)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.Week != 0 {
		n += 1 + sovCourses(uint64(m.Week))
	}
	return n
}

func (m *UpsertPresetStudyPlanWeekliesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PresetStudyPlanWeeklies) > 0 {
		for _, e := range m.PresetStudyPlanWeeklies {
			l = e.Size()
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	return n
}

func (m *UpsertPresetStudyPlanWeekliesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PresetStudyPlanWeeklyIds) > 0 {
		for _, s := range m.PresetStudyPlanWeeklyIds {
			l = len(s)
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	return n
}

func (m *UpsertQuizRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Quizsets) > 0 {
		for _, e := range m.Quizsets {
			l = e.Size()
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	return n
}

func (m *UpsertQuizResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Successful {
		n += 2
	}
	return n
}

func (m *LocalGrade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LocalGrade) > 0 {
		for k, v := range m.LocalGrade {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCourses(uint64(len(k))) + 1 + sovCourses(uint64(v))
			n += mapEntrySize + 1 + sovCourses(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RetrieveGradeMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GradeMap) > 0 {
		for k, v := range m.GradeMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovCourses(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovCourses(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovCourses(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *RetrieveGradeMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetHistoryQuizDetailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	l = len(m.QuizId)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	return n
}

func (m *GetHistoryQuizDetailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Question != nil {
		l = m.Question.Size()
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.SelectedAnswer != 0 {
		n += 1 + sovCourses(uint64(m.SelectedAnswer))
	}
	if m.DisplayOrder != 0 {
		n += 1 + sovCourses(uint64(m.DisplayOrder))
	}
	return n
}

func (m *SuggestLORequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LoName)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	return n
}

func (m *SuggestLOResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SuggestLos) > 0 {
		for _, e := range m.SuggestLos {
			l = e.Size()
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	return n
}

func (m *Chapter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChapterId)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	l = len(m.ChapterName)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.Country != 0 {
		n += 1 + sovCourses(uint64(m.Country))
	}
	if m.Subject != 0 {
		n += 1 + sovCourses(uint64(m.Subject))
	}
	l = len(m.Grade)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.DisplayOrder != 0 {
		n += 1 + sovCourses(uint64(m.DisplayOrder))
	}
	if len(m.Topics) > 0 {
		for _, e := range m.Topics {
			l = e.Size()
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.SchoolId != 0 {
		n += 1 + sovCourses(uint64(m.SchoolId))
	}
	return n
}

func (m *GetChapterListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChapterId)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	l = len(m.ChapterName)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovCourses(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovCourses(uint64(m.Page))
	}
	if m.Subject != 0 {
		n += 1 + sovCourses(uint64(m.Subject))
	}
	l = len(m.Grade)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.Country != 0 {
		n += 1 + sovCourses(uint64(m.Country))
	}
	return n
}

func (m *GetChapterListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Chapters) > 0 {
		for _, e := range m.Chapters {
			l = e.Size()
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovCourses(uint64(m.Total))
	}
	return n
}

func (m *RetrieveCoursesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.Country != 0 {
		n += 1 + sovCourses(uint64(m.Country))
	}
	if m.Subject != 0 {
		n += 1 + sovCourses(uint64(m.Subject))
	}
	l = len(m.Grade)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovCourses(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovCourses(uint64(m.Page))
	}
	if len(m.Countries) > 0 {
		l = 0
		for _, e := range m.Countries {
			l += sovCourses(uint64(e))
		}
		n += 1 + sovCourses(uint64(l)) + l
	}
	if m.CourseType != 0 {
		n += 1 + sovCourses(uint64(m.CourseType))
	}
	if m.CourseStatus != 0 {
		n += 1 + sovCourses(uint64(m.CourseStatus))
	}
	if m.IsAssigned {
		n += 2
	}
	if m.ClassId != 0 {
		n += 1 + sovCourses(uint64(m.ClassId))
	}
	return n
}

func (m *RetrieveCoursesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Courses) > 0 {
		for _, e := range m.Courses {
			l = e.Size()
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovCourses(uint64(m.Total))
	}
	return n
}

func (m *RetrieveCoursesResponse_Course) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.Country != 0 {
		n += 1 + sovCourses(uint64(m.Country))
	}
	if m.Subject != 0 {
		n += 1 + sovCourses(uint64(m.Subject))
	}
	l = len(m.Grade)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if len(m.Chapters) > 0 {
		for _, e := range m.Chapters {
			l = e.Size()
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.SchoolId != 0 {
		n += 1 + sovCourses(uint64(m.SchoolId))
	}
	if m.ClassId != 0 {
		n += 1 + sovCourses(uint64(m.ClassId))
	}
	if m.StartDate != nil {
		l = m.StartDate.Size()
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.EndDate != nil {
		l = m.EndDate.Size()
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.CourseType != 0 {
		n += 1 + sovCourses(uint64(m.CourseType))
	}
	if len(m.Teachers) > 0 {
		for _, e := range m.Teachers {
			l = e.Size()
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	if m.CourseStatus != 0 {
		n += 1 + sovCourses(uint64(m.CourseStatus))
	}
	if len(m.ClassIds) > 0 {
		l = 0
		for _, e := range m.ClassIds {
			l += sovCourses(uint64(e))
		}
		n += 2 + sovCourses(uint64(l)) + l
	}
	if len(m.BookIds) > 0 {
		for _, s := range m.BookIds {
			l = len(s)
			n += 2 + l + sovCourses(uint64(l))
		}
	}
	return n
}

func (m *RetrieveStudentSubmissionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovCourses(uint64(m.Type))
	}
	if m.Limit != 0 {
		n += 1 + sovCourses(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovCourses(uint64(m.Page))
	}
	l = len(m.LoId)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	return n
}

func (m *RetrieveStudentSubmissionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Submissions) > 0 {
		for _, e := range m.Submissions {
			l = e.Size()
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovCourses(uint64(m.Total))
	}
	return n
}

func (m *QuestionV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	l = len(m.MasterQuestionId)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.Country != 0 {
		n += 1 + sovCourses(uint64(m.Country))
	}
	l = len(m.Question)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if len(m.Answers) > 0 {
		for _, s := range m.Answers {
			l = len(s)
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	l = len(m.Explanation)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.DifficultyLevel != 0 {
		n += 1 + sovCourses(uint64(m.DifficultyLevel))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovCourses(uint64(l))
	}
	if len(m.QuestionsTagLo) > 0 {
		for _, s := range m.QuestionsTagLo {
			l = len(s)
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	l = len(m.QuestionUrl)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if len(m.AnswersUrl) > 0 {
		for _, s := range m.AnswersUrl {
			l = len(s)
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	l = len(m.ExplanationUrl)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if len(m.ExplanationWrongAnswer) > 0 {
		for _, s := range m.ExplanationWrongAnswer {
			l = len(s)
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	if len(m.ExplanationWrongAnswerUrl) > 0 {
		for _, s := range m.ExplanationWrongAnswerUrl {
			l = len(s)
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	if m.IsWaitingForRender {
		n += 3
	}
	return n
}

func (m *TakeTheQuizV2Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Quizset) > 0 {
		for _, e := range m.Quizset {
			l = e.Size()
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovCourses(uint64(m.Total))
	}
	return n
}

func (m *Pagination) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovCourses(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovCourses(uint64(m.Page))
	}
	return n
}

func (m *RetrieveLiveLessonRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CourseIds) > 0 {
		for _, s := range m.CourseIds {
			l = len(s)
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovCourses(uint64(l))
	}
	return n
}

func (m *Lesson) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LessonId)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.Topic != nil {
		l = m.Topic.Size()
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.EndTime != nil {
		l = m.EndTime.Size()
		n += 1 + l + sovCourses(uint64(l))
	}
	l = len(m.PresetStudyPlanWeeklyIds)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovCourses(uint64(m.Status))
	}
	if len(m.Teacher) > 0 {
		for _, e := range m.Teacher {
			l = e.Size()
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	if m.TotalLearner != 0 {
		n += 1 + sovCourses(uint64(m.TotalLearner))
	}
	l = len(m.CourseId)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if len(m.UserClassIds) > 0 {
		l = 0
		for _, e := range m.UserClassIds {
			l += sovCourses(uint64(e))
		}
		n += 1 + sovCourses(uint64(l)) + l
	}
	return n
}

func (m *RetrieveLiveLessonResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Lessons) > 0 {
		for _, e := range m.Lessons {
			l = e.Size()
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovCourses(uint64(m.Total))
	}
	return n
}

func (m *RetrieveCoursesByIDsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	return n
}

func (m *CreateBrightCoveUploadUrlRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	return n
}

func (m *CreateBrightCoveUploadUrlResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SignedUrl)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	l = len(m.ApiRequestUrl)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	l = len(m.VideoId)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	return n
}

func (m *FinishUploadBrightCoveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApiRequestUrl)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	l = len(m.VideoId)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	return n
}

func (m *FinishUploadBrightCoveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Book) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.Country != 0 {
		n += 1 + sovCourses(uint64(m.Country))
	}
	if m.Subject != 0 {
		n += 1 + sovCourses(uint64(m.Subject))
	}
	l = len(m.Grade)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.SchoolId != 0 {
		n += 1 + sovCourses(uint64(m.SchoolId))
	}
	l = len(m.CourseId)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovCourses(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovCourses(uint64(l))
	}
	if len(m.Chapters) > 0 {
		for _, e := range m.Chapters {
			l = e.Size()
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	return n
}

func (m *RetrieveBooksRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovCourses(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovCourses(uint64(m.Page))
	}
	l = len(m.CourseId)
	if l > 0 {
		n += 1 + l + sovCourses(uint64(l))
	}
	return n
}

func (m *RetrieveBooksResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Books) > 0 {
		for _, e := range m.Books {
			l = e.Size()
			n += 1 + l + sovCourses(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovCourses(uint64(m.Total))
	}
	return n
}

func sovCourses(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCourses(x uint64) (n int) {
	return sovCourses(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AssignmentSubmission) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAttachments := "[]*Attachment{"
	for _, f := range this.Attachments {
		repeatedStringForAttachments += strings.Replace(f.String(), "Attachment", "Attachment", 1) + ","
	}
	repeatedStringForAttachments += "}"
	s := strings.Join([]string{`&AssignmentSubmission{`,
		`SubmissionId:` + fmt.Sprintf("%v", this.SubmissionId) + `,`,
		`TopicId:` + fmt.Sprintf("%v", this.TopicId) + `,`,
		`StudentId:` + fmt.Sprintf("%v", this.StudentId) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`Attachments:` + repeatedStringForAttachments + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListSubmissionsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListSubmissionsRequest{`,
		`TopicId:` + fmt.Sprintf("%v", this.TopicId) + `,`,
		`StudentIds:` + fmt.Sprintf("%v", this.StudentIds) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`OffsetId:` + strings.Replace(fmt.Sprintf("%v", this.OffsetId), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListSubmissionsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSubmissions := "[]*AssignmentSubmission{"
	for _, f := range this.Submissions {
		repeatedStringForSubmissions += strings.Replace(f.String(), "AssignmentSubmission", "AssignmentSubmission", 1) + ","
	}
	repeatedStringForSubmissions += "}"
	s := strings.Join([]string{`&ListSubmissionsResponse{`,
		`Submissions:` + repeatedStringForSubmissions + `,`,
		`}`,
	}, "")
	return s
}
func (this *Attachment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Attachment{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListTopicRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListTopicRequest{`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`Grade:` + fmt.Sprintf("%v", this.Grade) + `,`,
		`Subject:` + fmt.Sprintf("%v", this.Subject) + `,`,
		`TopicType:` + fmt.Sprintf("%v", this.TopicType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListTopicResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTopics := "[]*Topic{"
	for _, f := range this.Topics {
		repeatedStringForTopics += strings.Replace(f.String(), "Topic", "Topic", 1) + ","
	}
	repeatedStringForTopics += "}"
	s := strings.Join([]string{`&ListTopicResponse{`,
		`Topics:` + repeatedStringForTopics + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListTopicsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListTopicsRequest{`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`Grade:` + fmt.Sprintf("%v", this.Grade) + `,`,
		`Subject:` + fmt.Sprintf("%v", this.Subject) + `,`,
		`TopicType:` + fmt.Sprintf("%v", this.TopicType) + `,`,
		`WithCompleteness:` + fmt.Sprintf("%v", this.WithCompleteness) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListTopicsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTopics := "[]*ListTopicsResponse_Data{"
	for _, f := range this.Topics {
		repeatedStringForTopics += strings.Replace(fmt.Sprintf("%v", f), "ListTopicsResponse_Data", "ListTopicsResponse_Data", 1) + ","
	}
	repeatedStringForTopics += "}"
	s := strings.Join([]string{`&ListTopicsResponse{`,
		`Topics:` + repeatedStringForTopics + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListTopicsResponse_Data) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListTopicsResponse_Data{`,
		`Topic:` + strings.Replace(this.Topic.String(), "Topic", "Topic", 1) + `,`,
		`TotalFinishedLos:` + fmt.Sprintf("%v", this.TotalFinishedLos) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Topic) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAttachments := "[]*Attachment{"
	for _, f := range this.Attachments {
		repeatedStringForAttachments += strings.Replace(f.String(), "Attachment", "Attachment", 1) + ","
	}
	repeatedStringForAttachments += "}"
	s := strings.Join([]string{`&Topic{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`Grade:` + fmt.Sprintf("%v", this.Grade) + `,`,
		`Subject:` + fmt.Sprintf("%v", this.Subject) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`DisplayOrder:` + fmt.Sprintf("%v", this.DisplayOrder) + `,`,
		`PublishedAt:` + strings.Replace(fmt.Sprintf("%v", this.PublishedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`TotalLos:` + fmt.Sprintf("%v", this.TotalLos) + `,`,
		`ChapterId:` + fmt.Sprintf("%v", this.ChapterId) + `,`,
		`SchoolId:` + fmt.Sprintf("%v", this.SchoolId) + `,`,
		`IconUrl:` + fmt.Sprintf("%v", this.IconUrl) + `,`,
		`Instruction:` + fmt.Sprintf("%v", this.Instruction) + `,`,
		`Attachments:` + repeatedStringForAttachments + `,`,
		`CopiedTopicId:` + strings.Replace(fmt.Sprintf("%v", this.CopiedTopicId), "StringValue", "types.StringValue", 1) + `,`,
		`EssayRequired:` + fmt.Sprintf("%v", this.EssayRequired) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Completenes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Completenes{`,
		`QuizFinished:` + fmt.Sprintf("%v", this.QuizFinished) + `,`,
		`VideoFinished:` + fmt.Sprintf("%v", this.VideoFinished) + `,`,
		`StudyGuideFinished:` + fmt.Sprintf("%v", this.StudyGuideFinished) + `,`,
		`FirstQuizCorrectness:` + fmt.Sprintf("%v", this.FirstQuizCorrectness) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Question) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Question{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`MasterQuestionId:` + fmt.Sprintf("%v", this.MasterQuestionId) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`Question:` + fmt.Sprintf("%v", this.Question) + `,`,
		`Answers:` + fmt.Sprintf("%v", this.Answers) + `,`,
		`Explanation:` + fmt.Sprintf("%v", this.Explanation) + `,`,
		`DifficultyLevel:` + fmt.Sprintf("%v", this.DifficultyLevel) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`QuestionsTagLo:` + fmt.Sprintf("%v", this.QuestionsTagLo) + `,`,
		`QuestionRendered:` + fmt.Sprintf("%v", this.QuestionRendered) + `,`,
		`AnswersRendered:` + fmt.Sprintf("%v", this.AnswersRendered) + `,`,
		`ExplanationRendered:` + fmt.Sprintf("%v", this.ExplanationRendered) + `,`,
		`IsWaitingForRender:` + fmt.Sprintf("%v", this.IsWaitingForRender) + `,`,
		`ExplanationWrongAnswer:` + fmt.Sprintf("%v", this.ExplanationWrongAnswer) + `,`,
		`ExplanationWrongAnswerRendered:` + fmt.Sprintf("%v", this.ExplanationWrongAnswerRendered) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LearningObjective) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LearningObjective{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`Grade:` + fmt.Sprintf("%v", this.Grade) + `,`,
		`Subject:` + fmt.Sprintf("%v", this.Subject) + `,`,
		`DisplayOrder:` + fmt.Sprintf("%v", this.DisplayOrder) + `,`,
		`Video:` + fmt.Sprintf("%v", this.Video) + `,`,
		`StudyGuide:` + fmt.Sprintf("%v", this.StudyGuide) + `,`,
		`TopicId:` + fmt.Sprintf("%v", this.TopicId) + `,`,
		`MasterLo:` + fmt.Sprintf("%v", this.MasterLo) + `,`,
		`VideoScript:` + fmt.Sprintf("%v", this.VideoScript) + `,`,
		`Prerequisites:` + fmt.Sprintf("%v", this.Prerequisites) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`SchoolId:` + fmt.Sprintf("%v", this.SchoolId) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QuizSets) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QuizSets{`,
		`LoId:` + fmt.Sprintf("%v", this.LoId) + `,`,
		`QuestionId:` + fmt.Sprintf("%v", this.QuestionId) + `,`,
		`DisplayOrder:` + fmt.Sprintf("%v", this.DisplayOrder) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertLOsRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLearningObjectives := "[]*LearningObjective{"
	for _, f := range this.LearningObjectives {
		repeatedStringForLearningObjectives += strings.Replace(f.String(), "LearningObjective", "LearningObjective", 1) + ","
	}
	repeatedStringForLearningObjectives += "}"
	s := strings.Join([]string{`&UpsertLOsRequest{`,
		`LearningObjectives:` + repeatedStringForLearningObjectives + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertLOsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpsertLOsResponse{`,
		`LoIds:` + fmt.Sprintf("%v", this.LoIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubmissionResult) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubmissionResult{`,
		`QuestionId:` + fmt.Sprintf("%v", this.QuestionId) + `,`,
		`Correct:` + fmt.Sprintf("%v", this.Correct) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TakeTheQuizRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TakeTheQuizRequest{`,
		`LoId:` + fmt.Sprintf("%v", this.LoId) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TakeTheQuizResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForQuizset := "[]*Question{"
	for _, f := range this.Quizset {
		repeatedStringForQuizset += strings.Replace(f.String(), "Question", "Question", 1) + ","
	}
	repeatedStringForQuizset += "}"
	s := strings.Join([]string{`&TakeTheQuizResponse{`,
		`Quizset:` + repeatedStringForQuizset + `,`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertQuestionsRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForQuestions := "[]*Question{"
	for _, f := range this.Questions {
		repeatedStringForQuestions += strings.Replace(f.String(), "Question", "Question", 1) + ","
	}
	repeatedStringForQuestions += "}"
	s := strings.Join([]string{`&UpsertQuestionsRequest{`,
		`Questions:` + repeatedStringForQuestions + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertQuestionsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpsertQuestionsResponse{`,
		`QuestionIds:` + fmt.Sprintf("%v", this.QuestionIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PresetStudyPlan) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PresetStudyPlan{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`Grade:` + fmt.Sprintf("%v", this.Grade) + `,`,
		`Subject:` + fmt.Sprintf("%v", this.Subject) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`StartDate:` + strings.Replace(fmt.Sprintf("%v", this.StartDate), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertPresetStudyPlansRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPresetStudyPlans := "[]*PresetStudyPlan{"
	for _, f := range this.PresetStudyPlans {
		repeatedStringForPresetStudyPlans += strings.Replace(f.String(), "PresetStudyPlan", "PresetStudyPlan", 1) + ","
	}
	repeatedStringForPresetStudyPlans += "}"
	s := strings.Join([]string{`&UpsertPresetStudyPlansRequest{`,
		`PresetStudyPlans:` + repeatedStringForPresetStudyPlans + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertPresetStudyPlansResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpsertPresetStudyPlansResponse{`,
		`PresetStudyPlanIds:` + fmt.Sprintf("%v", this.PresetStudyPlanIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PresetStudyPlanWeekly) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PresetStudyPlanWeekly{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`TopicId:` + fmt.Sprintf("%v", this.TopicId) + `,`,
		`PresetStudyPlanId:` + fmt.Sprintf("%v", this.PresetStudyPlanId) + `,`,
		`Week:` + fmt.Sprintf("%v", this.Week) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertPresetStudyPlanWeekliesRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPresetStudyPlanWeeklies := "[]*PresetStudyPlanWeekly{"
	for _, f := range this.PresetStudyPlanWeeklies {
		repeatedStringForPresetStudyPlanWeeklies += strings.Replace(f.String(), "PresetStudyPlanWeekly", "PresetStudyPlanWeekly", 1) + ","
	}
	repeatedStringForPresetStudyPlanWeeklies += "}"
	s := strings.Join([]string{`&UpsertPresetStudyPlanWeekliesRequest{`,
		`PresetStudyPlanWeeklies:` + repeatedStringForPresetStudyPlanWeeklies + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertPresetStudyPlanWeekliesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpsertPresetStudyPlanWeekliesResponse{`,
		`PresetStudyPlanWeeklyIds:` + fmt.Sprintf("%v", this.PresetStudyPlanWeeklyIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertQuizRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForQuizsets := "[]*QuizSets{"
	for _, f := range this.Quizsets {
		repeatedStringForQuizsets += strings.Replace(f.String(), "QuizSets", "QuizSets", 1) + ","
	}
	repeatedStringForQuizsets += "}"
	s := strings.Join([]string{`&UpsertQuizRequest{`,
		`Quizsets:` + repeatedStringForQuizsets + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertQuizResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpsertQuizResponse{`,
		`Successful:` + fmt.Sprintf("%v", this.Successful) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LocalGrade) String() string {
	if this == nil {
		return "nil"
	}
	keysForLocalGrade := make([]string, 0, len(this.LocalGrade))
	for k, _ := range this.LocalGrade {
		keysForLocalGrade = append(keysForLocalGrade, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLocalGrade)
	mapStringForLocalGrade := "map[string]int32{"
	for _, k := range keysForLocalGrade {
		mapStringForLocalGrade += fmt.Sprintf("%v: %v,", k, this.LocalGrade[k])
	}
	mapStringForLocalGrade += "}"
	s := strings.Join([]string{`&LocalGrade{`,
		`LocalGrade:` + mapStringForLocalGrade + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveGradeMapResponse) String() string {
	if this == nil {
		return "nil"
	}
	keysForGradeMap := make([]string, 0, len(this.GradeMap))
	for k, _ := range this.GradeMap {
		keysForGradeMap = append(keysForGradeMap, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForGradeMap)
	mapStringForGradeMap := "map[string]*LocalGrade{"
	for _, k := range keysForGradeMap {
		mapStringForGradeMap += fmt.Sprintf("%v: %v,", k, this.GradeMap[k])
	}
	mapStringForGradeMap += "}"
	s := strings.Join([]string{`&RetrieveGradeMapResponse{`,
		`GradeMap:` + mapStringForGradeMap + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveGradeMapRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveGradeMapRequest{`,
		`}`,
	}, "")
	return s
}
func (this *GetHistoryQuizDetailRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetHistoryQuizDetailRequest{`,
		`StudentId:` + fmt.Sprintf("%v", this.StudentId) + `,`,
		`QuizId:` + fmt.Sprintf("%v", this.QuizId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetHistoryQuizDetailResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetHistoryQuizDetailResponse{`,
		`Question:` + strings.Replace(this.Question.String(), "Question", "Question", 1) + `,`,
		`SelectedAnswer:` + fmt.Sprintf("%v", this.SelectedAnswer) + `,`,
		`DisplayOrder:` + fmt.Sprintf("%v", this.DisplayOrder) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SuggestLORequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SuggestLORequest{`,
		`LoName:` + fmt.Sprintf("%v", this.LoName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SuggestLOResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSuggestLos := "[]*LearningObjective{"
	for _, f := range this.SuggestLos {
		repeatedStringForSuggestLos += strings.Replace(f.String(), "LearningObjective", "LearningObjective", 1) + ","
	}
	repeatedStringForSuggestLos += "}"
	s := strings.Join([]string{`&SuggestLOResponse{`,
		`SuggestLos:` + repeatedStringForSuggestLos + `,`,
		`}`,
	}, "")
	return s
}
func (this *Chapter) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTopics := "[]*Topic{"
	for _, f := range this.Topics {
		repeatedStringForTopics += strings.Replace(f.String(), "Topic", "Topic", 1) + ","
	}
	repeatedStringForTopics += "}"
	s := strings.Join([]string{`&Chapter{`,
		`ChapterId:` + fmt.Sprintf("%v", this.ChapterId) + `,`,
		`ChapterName:` + fmt.Sprintf("%v", this.ChapterName) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`Subject:` + fmt.Sprintf("%v", this.Subject) + `,`,
		`Grade:` + fmt.Sprintf("%v", this.Grade) + `,`,
		`DisplayOrder:` + fmt.Sprintf("%v", this.DisplayOrder) + `,`,
		`Topics:` + repeatedStringForTopics + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`SchoolId:` + fmt.Sprintf("%v", this.SchoolId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetChapterListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetChapterListRequest{`,
		`ChapterId:` + fmt.Sprintf("%v", this.ChapterId) + `,`,
		`ChapterName:` + fmt.Sprintf("%v", this.ChapterName) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Subject:` + fmt.Sprintf("%v", this.Subject) + `,`,
		`Grade:` + fmt.Sprintf("%v", this.Grade) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetChapterListResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForChapters := "[]*Chapter{"
	for _, f := range this.Chapters {
		repeatedStringForChapters += strings.Replace(f.String(), "Chapter", "Chapter", 1) + ","
	}
	repeatedStringForChapters += "}"
	s := strings.Join([]string{`&GetChapterListResponse{`,
		`Chapters:` + repeatedStringForChapters + `,`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveCoursesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveCoursesRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`Subject:` + fmt.Sprintf("%v", this.Subject) + `,`,
		`Grade:` + fmt.Sprintf("%v", this.Grade) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Countries:` + fmt.Sprintf("%v", this.Countries) + `,`,
		`CourseType:` + fmt.Sprintf("%v", this.CourseType) + `,`,
		`CourseStatus:` + fmt.Sprintf("%v", this.CourseStatus) + `,`,
		`IsAssigned:` + fmt.Sprintf("%v", this.IsAssigned) + `,`,
		`ClassId:` + fmt.Sprintf("%v", this.ClassId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveCoursesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCourses := "[]*RetrieveCoursesResponse_Course{"
	for _, f := range this.Courses {
		repeatedStringForCourses += strings.Replace(fmt.Sprintf("%v", f), "RetrieveCoursesResponse_Course", "RetrieveCoursesResponse_Course", 1) + ","
	}
	repeatedStringForCourses += "}"
	s := strings.Join([]string{`&RetrieveCoursesResponse{`,
		`Courses:` + repeatedStringForCourses + `,`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveCoursesResponse_Course) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForChapters := "[]*Chapter{"
	for _, f := range this.Chapters {
		repeatedStringForChapters += strings.Replace(f.String(), "Chapter", "Chapter", 1) + ","
	}
	repeatedStringForChapters += "}"
	repeatedStringForTeachers := "[]*BasicProfile{"
	for _, f := range this.Teachers {
		repeatedStringForTeachers += strings.Replace(fmt.Sprintf("%v", f), "BasicProfile", "BasicProfile", 1) + ","
	}
	repeatedStringForTeachers += "}"
	s := strings.Join([]string{`&RetrieveCoursesResponse_Course{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`Subject:` + fmt.Sprintf("%v", this.Subject) + `,`,
		`Grade:` + fmt.Sprintf("%v", this.Grade) + `,`,
		`Chapters:` + repeatedStringForChapters + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`SchoolId:` + fmt.Sprintf("%v", this.SchoolId) + `,`,
		`ClassId:` + fmt.Sprintf("%v", this.ClassId) + `,`,
		`StartDate:` + strings.Replace(fmt.Sprintf("%v", this.StartDate), "Timestamp", "types.Timestamp", 1) + `,`,
		`EndDate:` + strings.Replace(fmt.Sprintf("%v", this.EndDate), "Timestamp", "types.Timestamp", 1) + `,`,
		`CourseType:` + fmt.Sprintf("%v", this.CourseType) + `,`,
		`Teachers:` + repeatedStringForTeachers + `,`,
		`CourseStatus:` + fmt.Sprintf("%v", this.CourseStatus) + `,`,
		`ClassIds:` + fmt.Sprintf("%v", this.ClassIds) + `,`,
		`BookIds:` + fmt.Sprintf("%v", this.BookIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveStudentSubmissionsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveStudentSubmissionsRequest{`,
		`StudentId:` + fmt.Sprintf("%v", this.StudentId) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`LoId:` + fmt.Sprintf("%v", this.LoId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveStudentSubmissionsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForSubmissions := "[]*GetHistoryQuizDetailResponse{"
	for _, f := range this.Submissions {
		repeatedStringForSubmissions += strings.Replace(f.String(), "GetHistoryQuizDetailResponse", "GetHistoryQuizDetailResponse", 1) + ","
	}
	repeatedStringForSubmissions += "}"
	s := strings.Join([]string{`&RetrieveStudentSubmissionsResponse{`,
		`Submissions:` + repeatedStringForSubmissions + `,`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QuestionV2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QuestionV2{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`MasterQuestionId:` + fmt.Sprintf("%v", this.MasterQuestionId) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`Question:` + fmt.Sprintf("%v", this.Question) + `,`,
		`Answers:` + fmt.Sprintf("%v", this.Answers) + `,`,
		`Explanation:` + fmt.Sprintf("%v", this.Explanation) + `,`,
		`DifficultyLevel:` + fmt.Sprintf("%v", this.DifficultyLevel) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`QuestionsTagLo:` + fmt.Sprintf("%v", this.QuestionsTagLo) + `,`,
		`QuestionUrl:` + fmt.Sprintf("%v", this.QuestionUrl) + `,`,
		`AnswersUrl:` + fmt.Sprintf("%v", this.AnswersUrl) + `,`,
		`ExplanationUrl:` + fmt.Sprintf("%v", this.ExplanationUrl) + `,`,
		`ExplanationWrongAnswer:` + fmt.Sprintf("%v", this.ExplanationWrongAnswer) + `,`,
		`ExplanationWrongAnswerUrl:` + fmt.Sprintf("%v", this.ExplanationWrongAnswerUrl) + `,`,
		`IsWaitingForRender:` + fmt.Sprintf("%v", this.IsWaitingForRender) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TakeTheQuizV2Response) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForQuizset := "[]*QuestionV2{"
	for _, f := range this.Quizset {
		repeatedStringForQuizset += strings.Replace(f.String(), "QuestionV2", "QuestionV2", 1) + ","
	}
	repeatedStringForQuizset += "}"
	s := strings.Join([]string{`&TakeTheQuizV2Response{`,
		`Quizset:` + repeatedStringForQuizset + `,`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Pagination) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Pagination{`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveLiveLessonRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveLiveLessonRequest{`,
		`CourseIds:` + fmt.Sprintf("%v", this.CourseIds) + `,`,
		`Pagination:` + strings.Replace(this.Pagination.String(), "Pagination", "Pagination", 1) + `,`,
		`From:` + strings.Replace(fmt.Sprintf("%v", this.From), "Timestamp", "types.Timestamp", 1) + `,`,
		`To:` + strings.Replace(fmt.Sprintf("%v", this.To), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Lesson) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTeacher := "[]*BasicProfile{"
	for _, f := range this.Teacher {
		repeatedStringForTeacher += strings.Replace(fmt.Sprintf("%v", f), "BasicProfile", "BasicProfile", 1) + ","
	}
	repeatedStringForTeacher += "}"
	s := strings.Join([]string{`&Lesson{`,
		`LessonId:` + fmt.Sprintf("%v", this.LessonId) + `,`,
		`Topic:` + strings.Replace(this.Topic.String(), "Topic", "Topic", 1) + `,`,
		`StartTime:` + strings.Replace(fmt.Sprintf("%v", this.StartTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`EndTime:` + strings.Replace(fmt.Sprintf("%v", this.EndTime), "Timestamp", "types.Timestamp", 1) + `,`,
		`PresetStudyPlanWeeklyIds:` + fmt.Sprintf("%v", this.PresetStudyPlanWeeklyIds) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Teacher:` + repeatedStringForTeacher + `,`,
		`TotalLearner:` + fmt.Sprintf("%v", this.TotalLearner) + `,`,
		`CourseId:` + fmt.Sprintf("%v", this.CourseId) + `,`,
		`UserClassIds:` + fmt.Sprintf("%v", this.UserClassIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveLiveLessonResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLessons := "[]*Lesson{"
	for _, f := range this.Lessons {
		repeatedStringForLessons += strings.Replace(f.String(), "Lesson", "Lesson", 1) + ","
	}
	repeatedStringForLessons += "}"
	s := strings.Join([]string{`&RetrieveLiveLessonResponse{`,
		`Lessons:` + repeatedStringForLessons + `,`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveCoursesByIDsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveCoursesByIDsRequest{`,
		`Ids:` + fmt.Sprintf("%v", this.Ids) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateBrightCoveUploadUrlRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateBrightCoveUploadUrlRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateBrightCoveUploadUrlResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateBrightCoveUploadUrlResponse{`,
		`SignedUrl:` + fmt.Sprintf("%v", this.SignedUrl) + `,`,
		`ApiRequestUrl:` + fmt.Sprintf("%v", this.ApiRequestUrl) + `,`,
		`VideoId:` + fmt.Sprintf("%v", this.VideoId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FinishUploadBrightCoveRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FinishUploadBrightCoveRequest{`,
		`ApiRequestUrl:` + fmt.Sprintf("%v", this.ApiRequestUrl) + `,`,
		`VideoId:` + fmt.Sprintf("%v", this.VideoId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FinishUploadBrightCoveResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FinishUploadBrightCoveResponse{`,
		`}`,
	}, "")
	return s
}
func (this *Book) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForChapters := "[]*Chapter{"
	for _, f := range this.Chapters {
		repeatedStringForChapters += strings.Replace(f.String(), "Chapter", "Chapter", 1) + ","
	}
	repeatedStringForChapters += "}"
	s := strings.Join([]string{`&Book{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`Subject:` + fmt.Sprintf("%v", this.Subject) + `,`,
		`Grade:` + fmt.Sprintf("%v", this.Grade) + `,`,
		`SchoolId:` + fmt.Sprintf("%v", this.SchoolId) + `,`,
		`CourseId:` + fmt.Sprintf("%v", this.CourseId) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`Chapters:` + repeatedStringForChapters + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveBooksRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveBooksRequest{`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`CourseId:` + fmt.Sprintf("%v", this.CourseId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveBooksResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForBooks := "[]*Book{"
	for _, f := range this.Books {
		repeatedStringForBooks += strings.Replace(f.String(), "Book", "Book", 1) + ","
	}
	repeatedStringForBooks += "}"
	s := strings.Join([]string{`&RetrieveBooksResponse{`,
		`Books:` + repeatedStringForBooks + `,`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCourses(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AssignmentSubmission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssignmentSubmission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssignmentSubmission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmissionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubmissionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attachments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attachments = append(m.Attachments, &Attachment{})
			if err := m.Attachments[len(m.Attachments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSubmissionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSubmissionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSubmissionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentIds = append(m.StudentIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OffsetId == nil {
				m.OffsetId = &types.StringValue{}
			}
			if err := m.OffsetId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListSubmissionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSubmissionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSubmissionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Submissions = append(m.Submissions, &AssignmentSubmission{})
			if err := m.Submissions[len(m.Submissions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Attachment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attachment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attachment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTopicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTopicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTopicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grade = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			m.Subject = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subject |= Subject(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicType", wireType)
			}
			m.TopicType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicType |= TopicType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTopicResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTopicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTopicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topics = append(m.Topics, &Topic{})
			if err := m.Topics[len(m.Topics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTopicsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTopicsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTopicsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grade = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			m.Subject = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subject |= Subject(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicType", wireType)
			}
			m.TopicType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicType |= TopicType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithCompleteness", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithCompleteness = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTopicsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTopicsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTopicsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topics = append(m.Topics, &ListTopicsResponse_Data{})
			if err := m.Topics[len(m.Topics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTopicsResponse_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Topic == nil {
				m.Topic = &Topic{}
			}
			if err := m.Topic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFinishedLos", wireType)
			}
			m.TotalFinishedLos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalFinishedLos |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Topic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Topic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Topic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grade = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			m.Subject = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subject |= Subject(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= TopicType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= TopicStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayOrder", wireType)
			}
			m.DisplayOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisplayOrder |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PublishedAt == nil {
				m.PublishedAt = &types.Timestamp{}
			}
			if err := m.PublishedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLos", wireType)
			}
			m.TotalLos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalLos |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChapterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChapterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchoolId", wireType)
			}
			m.SchoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchoolId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IconUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IconUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instruction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instruction = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attachments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attachments = append(m.Attachments, &Attachment{})
			if err := m.Attachments[len(m.Attachments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopiedTopicId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CopiedTopicId == nil {
				m.CopiedTopicId = &types.StringValue{}
			}
			if err := m.CopiedTopicId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EssayRequired", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EssayRequired = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Completenes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Completenes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Completenes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuizFinished", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.QuizFinished = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoFinished", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VideoFinished = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudyGuideFinished", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StudyGuideFinished = bool(v != 0)
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstQuizCorrectness", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FirstQuizCorrectness = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Question) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Question: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Question: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterQuestionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterQuestionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Question", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Question = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Answers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Answers = append(m.Answers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Explanation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Explanation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DifficultyLevel", wireType)
			}
			m.DifficultyLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DifficultyLevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestionsTagLo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuestionsTagLo = append(m.QuestionsTagLo, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestionRendered", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuestionRendered = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnswersRendered", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnswersRendered = append(m.AnswersRendered, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExplanationRendered", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExplanationRendered = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWaitingForRender", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWaitingForRender = bool(v != 0)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExplanationWrongAnswer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExplanationWrongAnswer = append(m.ExplanationWrongAnswer, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExplanationWrongAnswerRendered", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExplanationWrongAnswerRendered = append(m.ExplanationWrongAnswerRendered, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LearningObjective) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LearningObjective: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LearningObjective: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grade = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			m.Subject = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subject |= Subject(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayOrder", wireType)
			}
			m.DisplayOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisplayOrder |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Video", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Video = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudyGuide", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudyGuide = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterLo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterLo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoScript", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VideoScript = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prerequisites", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prerequisites = append(m.Prerequisites, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchoolId", wireType)
			}
			m.SchoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchoolId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= LearningObjectiveType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuizSets) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuizSets: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuizSets: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuestionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayOrder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayOrder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertLOsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertLOsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertLOsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LearningObjectives", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LearningObjectives = append(m.LearningObjectives, &LearningObjective{})
			if err := m.LearningObjectives[len(m.LearningObjectives)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertLOsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertLOsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertLOsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoIds = append(m.LoIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmissionResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmissionResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmissionResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuestionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Correct", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Correct = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TakeTheQuizRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TakeTheQuizRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TakeTheQuizRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TakeTheQuizResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TakeTheQuizResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TakeTheQuizResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quizset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Quizset = append(m.Quizset, &Question{})
			if err := m.Quizset[len(m.Quizset)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertQuestionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertQuestionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertQuestionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Questions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Questions = append(m.Questions, &Question{})
			if err := m.Questions[len(m.Questions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertQuestionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertQuestionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertQuestionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestionIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuestionIds = append(m.QuestionIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PresetStudyPlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PresetStudyPlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PresetStudyPlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grade = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			m.Subject = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subject |= Subject(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartDate == nil {
				m.StartDate = &types.Timestamp{}
			}
			if err := m.StartDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertPresetStudyPlansRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertPresetStudyPlansRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertPresetStudyPlansRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PresetStudyPlans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PresetStudyPlans = append(m.PresetStudyPlans, &PresetStudyPlan{})
			if err := m.PresetStudyPlans[len(m.PresetStudyPlans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertPresetStudyPlansResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertPresetStudyPlansResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertPresetStudyPlansResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PresetStudyPlanIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PresetStudyPlanIds = append(m.PresetStudyPlanIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PresetStudyPlanWeekly) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PresetStudyPlanWeekly: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PresetStudyPlanWeekly: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PresetStudyPlanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PresetStudyPlanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Week", wireType)
			}
			m.Week = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Week |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertPresetStudyPlanWeekliesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertPresetStudyPlanWeekliesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertPresetStudyPlanWeekliesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PresetStudyPlanWeeklies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PresetStudyPlanWeeklies = append(m.PresetStudyPlanWeeklies, &PresetStudyPlanWeekly{})
			if err := m.PresetStudyPlanWeeklies[len(m.PresetStudyPlanWeeklies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertPresetStudyPlanWeekliesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertPresetStudyPlanWeekliesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertPresetStudyPlanWeekliesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PresetStudyPlanWeeklyIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PresetStudyPlanWeeklyIds = append(m.PresetStudyPlanWeeklyIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertQuizRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertQuizRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertQuizRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quizsets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Quizsets = append(m.Quizsets, &QuizSets{})
			if err := m.Quizsets[len(m.Quizsets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertQuizResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertQuizResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertQuizResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Successful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Successful = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalGrade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalGrade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalGrade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalGrade", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LocalGrade == nil {
				m.LocalGrade = make(map[string]int32)
			}
			var mapkey string
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCourses
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCourses
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCourses
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCourses
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCourses
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCourses(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCourses
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LocalGrade[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveGradeMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveGradeMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveGradeMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GradeMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GradeMap == nil {
				m.GradeMap = make(map[string]*LocalGrade)
			}
			var mapkey string
			var mapvalue *LocalGrade
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCourses
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCourses
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCourses
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCourses
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCourses
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthCourses
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthCourses
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &LocalGrade{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCourses(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCourses
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.GradeMap[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveGradeMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveGradeMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveGradeMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHistoryQuizDetailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHistoryQuizDetailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHistoryQuizDetailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuizId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuizId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetHistoryQuizDetailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetHistoryQuizDetailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetHistoryQuizDetailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Question", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Question == nil {
				m.Question = &Question{}
			}
			if err := m.Question.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectedAnswer", wireType)
			}
			m.SelectedAnswer = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelectedAnswer |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayOrder", wireType)
			}
			m.DisplayOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisplayOrder |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuggestLORequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuggestLORequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuggestLORequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuggestLOResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuggestLOResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuggestLOResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuggestLos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuggestLos = append(m.SuggestLos, &LearningObjective{})
			if err := m.SuggestLos[len(m.SuggestLos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Chapter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Chapter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Chapter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChapterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChapterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChapterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChapterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			m.Subject = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subject |= Subject(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grade = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayOrder", wireType)
			}
			m.DisplayOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisplayOrder |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topics = append(m.Topics, &Topic{})
			if err := m.Topics[len(m.Topics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchoolId", wireType)
			}
			m.SchoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchoolId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChapterListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChapterListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChapterListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChapterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChapterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChapterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChapterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			m.Subject = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subject |= Subject(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grade = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChapterListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChapterListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChapterListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chapters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chapters = append(m.Chapters, &Chapter{})
			if err := m.Chapters[len(m.Chapters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveCoursesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveCoursesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveCoursesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			m.Subject = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subject |= Subject(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grade = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType == 0 {
				var v Country
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCourses
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Country(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Countries = append(m.Countries, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCourses
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCourses
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCourses
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Countries) == 0 {
					m.Countries = make([]Country, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Country
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCourses
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Country(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Countries = append(m.Countries, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Countries", wireType)
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseType", wireType)
			}
			m.CourseType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CourseType |= CourseType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseStatus", wireType)
			}
			m.CourseStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CourseStatus |= CourseStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAssigned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAssigned = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveCoursesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveCoursesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveCoursesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Courses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Courses = append(m.Courses, &RetrieveCoursesResponse_Course{})
			if err := m.Courses[len(m.Courses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveCoursesResponse_Course) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Course: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Course: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			m.Subject = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subject |= Subject(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grade = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chapters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chapters = append(m.Chapters, &Chapter{})
			if err := m.Chapters[len(m.Chapters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchoolId", wireType)
			}
			m.SchoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchoolId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartDate == nil {
				m.StartDate = &types.Timestamp{}
			}
			if err := m.StartDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndDate == nil {
				m.EndDate = &types.Timestamp{}
			}
			if err := m.EndDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseType", wireType)
			}
			m.CourseType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CourseType |= CourseType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teachers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teachers = append(m.Teachers, &BasicProfile{})
			if err := m.Teachers[len(m.Teachers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseStatus", wireType)
			}
			m.CourseStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CourseStatus |= CourseStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCourses
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ClassIds = append(m.ClassIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCourses
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCourses
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCourses
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ClassIds) == 0 {
					m.ClassIds = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCourses
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ClassIds = append(m.ClassIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassIds", wireType)
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookIds = append(m.BookIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveStudentSubmissionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveStudentSubmissionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveStudentSubmissionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= RetrieveStudentSubmissionsRequest_SubmissionOrderType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveStudentSubmissionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveStudentSubmissionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveStudentSubmissionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Submissions = append(m.Submissions, &GetHistoryQuizDetailResponse{})
			if err := m.Submissions[len(m.Submissions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuestionV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuestionV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuestionV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterQuestionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterQuestionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Question", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Question = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Answers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Answers = append(m.Answers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Explanation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Explanation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DifficultyLevel", wireType)
			}
			m.DifficultyLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DifficultyLevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestionsTagLo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuestionsTagLo = append(m.QuestionsTagLo, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestionUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuestionUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnswersUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnswersUrl = append(m.AnswersUrl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExplanationUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExplanationUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExplanationWrongAnswer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExplanationWrongAnswer = append(m.ExplanationWrongAnswer, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExplanationWrongAnswerUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExplanationWrongAnswerUrl = append(m.ExplanationWrongAnswerUrl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWaitingForRender", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWaitingForRender = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TakeTheQuizV2Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TakeTheQuizV2Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TakeTheQuizV2Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quizset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Quizset = append(m.Quizset, &QuestionV2{})
			if err := m.Quizset[len(m.Quizset)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pagination) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pagination: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pagination: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveLiveLessonRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveLiveLessonRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveLiveLessonRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseIds = append(m.CourseIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &Pagination{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &types.Timestamp{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &types.Timestamp{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Lesson) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Lesson: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Lesson: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LessonId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LessonId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Topic == nil {
				m.Topic = &Topic{}
			}
			if err := m.Topic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &types.Timestamp{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = &types.Timestamp{}
			}
			if err := m.EndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PresetStudyPlanWeeklyIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PresetStudyPlanWeeklyIds = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= LessonStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Teacher", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Teacher = append(m.Teacher, &BasicProfile{})
			if err := m.Teacher[len(m.Teacher)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLearner", wireType)
			}
			m.TotalLearner = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalLearner |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCourses
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserClassIds = append(m.UserClassIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCourses
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCourses
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCourses
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UserClassIds) == 0 {
					m.UserClassIds = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCourses
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserClassIds = append(m.UserClassIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserClassIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveLiveLessonResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveLiveLessonResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveLiveLessonResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lessons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lessons = append(m.Lessons, &Lesson{})
			if err := m.Lessons[len(m.Lessons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveCoursesByIDsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveCoursesByIDsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveCoursesByIDsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateBrightCoveUploadUrlRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateBrightCoveUploadUrlRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateBrightCoveUploadUrlRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateBrightCoveUploadUrlResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateBrightCoveUploadUrlResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateBrightCoveUploadUrlResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignedUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiRequestUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiRequestUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VideoId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinishUploadBrightCoveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinishUploadBrightCoveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinishUploadBrightCoveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiRequestUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiRequestUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VideoId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinishUploadBrightCoveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinishUploadBrightCoveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinishUploadBrightCoveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Book) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Book: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Book: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			m.Subject = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subject |= Subject(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grade = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchoolId", wireType)
			}
			m.SchoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchoolId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chapters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chapters = append(m.Chapters, &Chapter{})
			if err := m.Chapters[len(m.Chapters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveBooksRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveBooksRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveBooksRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveBooksResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveBooksResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveBooksResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Books", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Books = append(m.Books, &Book{})
			if err := m.Books[len(m.Books)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCourses(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCourses
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCourses
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCourses
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCourses
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCourses
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCourses        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCourses          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCourses = fmt.Errorf("proto: unexpected end of group")
)
