// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: notification.proto

package pb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Notification struct {
	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Data        string                 `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Type        NotificationType       `protobuf:"varint,5,opt,name=type,proto3,enum=manabie.bob.NotificationType" json:"type,omitempty"`
	CreatedAt   *types.Timestamp       `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Status      UserNotificationStatus `protobuf:"varint,7,opt,name=status,proto3,enum=manabie.bob.UserNotificationStatus" json:"status,omitempty"`
	Event       NotificationEvent      `protobuf:"varint,8,opt,name=event,proto3,enum=manabie.bob.NotificationEvent" json:"event,omitempty"`
}

func (m *Notification) Reset()      { *m = Notification{} }
func (*Notification) ProtoMessage() {}
func (*Notification) Descriptor() ([]byte, []int) {
	return fileDescriptor_736a457d4a5efa07, []int{0}
}
func (m *Notification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Notification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Notification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Notification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notification.Merge(m, src)
}
func (m *Notification) XXX_Size() int {
	return m.Size()
}
func (m *Notification) XXX_DiscardUnknown() {
	xxx_messageInfo_Notification.DiscardUnknown(m)
}

var xxx_messageInfo_Notification proto.InternalMessageInfo

func (m *Notification) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Notification) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Notification) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Notification) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *Notification) GetType() NotificationType {
	if m != nil {
		return m.Type
	}
	return NOTIFICATION_TYPE_NONE
}

func (m *Notification) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Notification) GetStatus() UserNotificationStatus {
	if m != nil {
		return m.Status
	}
	return USER_NOTIFICATION_STATUS_NONE
}

func (m *Notification) GetEvent() NotificationEvent {
	if m != nil {
		return m.Event
	}
	return NOTIFICATION_EVENT_NONE
}

type NotificationStatsRequest struct {
}

func (m *NotificationStatsRequest) Reset()      { *m = NotificationStatsRequest{} }
func (*NotificationStatsRequest) ProtoMessage() {}
func (*NotificationStatsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_736a457d4a5efa07, []int{1}
}
func (m *NotificationStatsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotificationStatsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotificationStatsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotificationStatsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotificationStatsRequest.Merge(m, src)
}
func (m *NotificationStatsRequest) XXX_Size() int {
	return m.Size()
}
func (m *NotificationStatsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NotificationStatsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NotificationStatsRequest proto.InternalMessageInfo

type NotificationStatsResponse struct {
	New int32 `protobuf:"varint,1,opt,name=new,proto3" json:"new,omitempty"`
}

func (m *NotificationStatsResponse) Reset()      { *m = NotificationStatsResponse{} }
func (*NotificationStatsResponse) ProtoMessage() {}
func (*NotificationStatsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_736a457d4a5efa07, []int{2}
}
func (m *NotificationStatsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotificationStatsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotificationStatsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotificationStatsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotificationStatsResponse.Merge(m, src)
}
func (m *NotificationStatsResponse) XXX_Size() int {
	return m.Size()
}
func (m *NotificationStatsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NotificationStatsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NotificationStatsResponse proto.InternalMessageInfo

func (m *NotificationStatsResponse) GetNew() int32 {
	if m != nil {
		return m.New
	}
	return 0
}

type MarkNotificationsAsReadRequest struct {
	Notifications []string `protobuf:"bytes,1,rep,name=notifications,proto3" json:"notifications,omitempty"`
}

func (m *MarkNotificationsAsReadRequest) Reset()      { *m = MarkNotificationsAsReadRequest{} }
func (*MarkNotificationsAsReadRequest) ProtoMessage() {}
func (*MarkNotificationsAsReadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_736a457d4a5efa07, []int{3}
}
func (m *MarkNotificationsAsReadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarkNotificationsAsReadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarkNotificationsAsReadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarkNotificationsAsReadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarkNotificationsAsReadRequest.Merge(m, src)
}
func (m *MarkNotificationsAsReadRequest) XXX_Size() int {
	return m.Size()
}
func (m *MarkNotificationsAsReadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MarkNotificationsAsReadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MarkNotificationsAsReadRequest proto.InternalMessageInfo

func (m *MarkNotificationsAsReadRequest) GetNotifications() []string {
	if m != nil {
		return m.Notifications
	}
	return nil
}

type MarkNotificationsAsReadResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *MarkNotificationsAsReadResponse) Reset()      { *m = MarkNotificationsAsReadResponse{} }
func (*MarkNotificationsAsReadResponse) ProtoMessage() {}
func (*MarkNotificationsAsReadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_736a457d4a5efa07, []int{4}
}
func (m *MarkNotificationsAsReadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarkNotificationsAsReadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarkNotificationsAsReadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarkNotificationsAsReadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarkNotificationsAsReadResponse.Merge(m, src)
}
func (m *MarkNotificationsAsReadResponse) XXX_Size() int {
	return m.Size()
}
func (m *MarkNotificationsAsReadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MarkNotificationsAsReadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MarkNotificationsAsReadResponse proto.InternalMessageInfo

func (m *MarkNotificationsAsReadResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type MarkNotificationsAsSeenRequest struct {
	NotificationIds []string `protobuf:"bytes,1,rep,name=notification_ids,json=notificationIds,proto3" json:"notification_ids,omitempty"`
}

func (m *MarkNotificationsAsSeenRequest) Reset()      { *m = MarkNotificationsAsSeenRequest{} }
func (*MarkNotificationsAsSeenRequest) ProtoMessage() {}
func (*MarkNotificationsAsSeenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_736a457d4a5efa07, []int{5}
}
func (m *MarkNotificationsAsSeenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarkNotificationsAsSeenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarkNotificationsAsSeenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarkNotificationsAsSeenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarkNotificationsAsSeenRequest.Merge(m, src)
}
func (m *MarkNotificationsAsSeenRequest) XXX_Size() int {
	return m.Size()
}
func (m *MarkNotificationsAsSeenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MarkNotificationsAsSeenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MarkNotificationsAsSeenRequest proto.InternalMessageInfo

func (m *MarkNotificationsAsSeenRequest) GetNotificationIds() []string {
	if m != nil {
		return m.NotificationIds
	}
	return nil
}

type MarkNotificationsAsSeenResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *MarkNotificationsAsSeenResponse) Reset()      { *m = MarkNotificationsAsSeenResponse{} }
func (*MarkNotificationsAsSeenResponse) ProtoMessage() {}
func (*MarkNotificationsAsSeenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_736a457d4a5efa07, []int{6}
}
func (m *MarkNotificationsAsSeenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarkNotificationsAsSeenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarkNotificationsAsSeenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarkNotificationsAsSeenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarkNotificationsAsSeenResponse.Merge(m, src)
}
func (m *MarkNotificationsAsSeenResponse) XXX_Size() int {
	return m.Size()
}
func (m *MarkNotificationsAsSeenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MarkNotificationsAsSeenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MarkNotificationsAsSeenResponse proto.InternalMessageInfo

func (m *MarkNotificationsAsSeenResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type RetrieveNotificationRequest struct {
	Type  NotificationType `protobuf:"varint,1,opt,name=type,proto3,enum=manabie.bob.NotificationType" json:"type,omitempty"`
	Page  int32            `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	Limit int32            `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *RetrieveNotificationRequest) Reset()      { *m = RetrieveNotificationRequest{} }
func (*RetrieveNotificationRequest) ProtoMessage() {}
func (*RetrieveNotificationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_736a457d4a5efa07, []int{7}
}
func (m *RetrieveNotificationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveNotificationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveNotificationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveNotificationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveNotificationRequest.Merge(m, src)
}
func (m *RetrieveNotificationRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveNotificationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveNotificationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveNotificationRequest proto.InternalMessageInfo

func (m *RetrieveNotificationRequest) GetType() NotificationType {
	if m != nil {
		return m.Type
	}
	return NOTIFICATION_TYPE_NONE
}

func (m *RetrieveNotificationRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *RetrieveNotificationRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type RetrieveNotificationResponse struct {
	Notifications []*Notification `protobuf:"bytes,1,rep,name=notifications,proto3" json:"notifications,omitempty"`
}

func (m *RetrieveNotificationResponse) Reset()      { *m = RetrieveNotificationResponse{} }
func (*RetrieveNotificationResponse) ProtoMessage() {}
func (*RetrieveNotificationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_736a457d4a5efa07, []int{8}
}
func (m *RetrieveNotificationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveNotificationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveNotificationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveNotificationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveNotificationResponse.Merge(m, src)
}
func (m *RetrieveNotificationResponse) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveNotificationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveNotificationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveNotificationResponse proto.InternalMessageInfo

func (m *RetrieveNotificationResponse) GetNotifications() []*Notification {
	if m != nil {
		return m.Notifications
	}
	return nil
}

func init() {
	proto.RegisterType((*Notification)(nil), "manabie.bob.Notification")
	golang_proto.RegisterType((*Notification)(nil), "manabie.bob.Notification")
	proto.RegisterType((*NotificationStatsRequest)(nil), "manabie.bob.NotificationStatsRequest")
	golang_proto.RegisterType((*NotificationStatsRequest)(nil), "manabie.bob.NotificationStatsRequest")
	proto.RegisterType((*NotificationStatsResponse)(nil), "manabie.bob.NotificationStatsResponse")
	golang_proto.RegisterType((*NotificationStatsResponse)(nil), "manabie.bob.NotificationStatsResponse")
	proto.RegisterType((*MarkNotificationsAsReadRequest)(nil), "manabie.bob.MarkNotificationsAsReadRequest")
	golang_proto.RegisterType((*MarkNotificationsAsReadRequest)(nil), "manabie.bob.MarkNotificationsAsReadRequest")
	proto.RegisterType((*MarkNotificationsAsReadResponse)(nil), "manabie.bob.MarkNotificationsAsReadResponse")
	golang_proto.RegisterType((*MarkNotificationsAsReadResponse)(nil), "manabie.bob.MarkNotificationsAsReadResponse")
	proto.RegisterType((*MarkNotificationsAsSeenRequest)(nil), "manabie.bob.MarkNotificationsAsSeenRequest")
	golang_proto.RegisterType((*MarkNotificationsAsSeenRequest)(nil), "manabie.bob.MarkNotificationsAsSeenRequest")
	proto.RegisterType((*MarkNotificationsAsSeenResponse)(nil), "manabie.bob.MarkNotificationsAsSeenResponse")
	golang_proto.RegisterType((*MarkNotificationsAsSeenResponse)(nil), "manabie.bob.MarkNotificationsAsSeenResponse")
	proto.RegisterType((*RetrieveNotificationRequest)(nil), "manabie.bob.RetrieveNotificationRequest")
	golang_proto.RegisterType((*RetrieveNotificationRequest)(nil), "manabie.bob.RetrieveNotificationRequest")
	proto.RegisterType((*RetrieveNotificationResponse)(nil), "manabie.bob.RetrieveNotificationResponse")
	golang_proto.RegisterType((*RetrieveNotificationResponse)(nil), "manabie.bob.RetrieveNotificationResponse")
}

func init() { proto.RegisterFile("notification.proto", fileDescriptor_736a457d4a5efa07) }
func init() { golang_proto.RegisterFile("notification.proto", fileDescriptor_736a457d4a5efa07) }

var fileDescriptor_736a457d4a5efa07 = []byte{
	// 649 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xcd, 0xe4, 0xa7, 0x3f, 0x37, 0xdf, 0xd7, 0xaf, 0x9a, 0x0f, 0x84, 0x6b, 0x60, 0x1a, 0x99,
	0x1f, 0xa5, 0x82, 0x3a, 0x22, 0xb0, 0x41, 0x5d, 0xa0, 0x22, 0x81, 0x84, 0x10, 0x2c, 0xdc, 0xb2,
	0x61, 0x53, 0xf9, 0xe7, 0xd6, 0x0c, 0x4d, 0x6c, 0xe3, 0x99, 0x14, 0x95, 0x15, 0x8f, 0xc0, 0x63,
	0xf0, 0x18, 0x2c, 0x91, 0xd8, 0x74, 0x59, 0x89, 0x0d, 0x75, 0x36, 0x2c, 0xfb, 0x08, 0xc8, 0x63,
	0x5b, 0x4c, 0xaa, 0xa4, 0xe9, 0xee, 0xde, 0x99, 0x73, 0xcf, 0x39, 0x33, 0x73, 0x6c, 0xa0, 0x51,
	0x2c, 0xf9, 0x3e, 0xf7, 0x5d, 0xc9, 0xe3, 0xc8, 0x4e, 0xd2, 0x58, 0xc6, 0xb4, 0x3d, 0x74, 0x23,
	0xd7, 0xe3, 0x68, 0x7b, 0xb1, 0x67, 0x02, 0x46, 0xa3, 0x61, 0xb1, 0x61, 0xae, 0x87, 0x71, 0x1c,
	0x0e, 0xb0, 0xa7, 0x3a, 0x6f, 0xb4, 0xdf, 0x93, 0x7c, 0x88, 0x42, 0xba, 0xc3, 0xa4, 0x04, 0x6c,
	0x86, 0x5c, 0xbe, 0x1b, 0x79, 0xb6, 0x1f, 0x0f, 0x7b, 0x61, 0x1c, 0xc6, 0x7f, 0x91, 0x79, 0xa7,
	0x1a, 0x55, 0x15, 0x70, 0xeb, 0x47, 0x1d, 0xfe, 0x79, 0xad, 0xe9, 0xd3, 0x15, 0xa8, 0xf3, 0xc0,
	0x20, 0x1d, 0xd2, 0x5d, 0x76, 0xea, 0x3c, 0xa0, 0x57, 0xa0, 0x25, 0xb9, 0x1c, 0xa0, 0x51, 0x57,
	0x4b, 0x45, 0x43, 0x3b, 0xd0, 0x0e, 0x50, 0xf8, 0x29, 0x4f, 0xf2, 0x21, 0xa3, 0xa1, 0xf6, 0xf4,
	0x25, 0x4a, 0xa1, 0x19, 0xb8, 0xd2, 0x35, 0x9a, 0x6a, 0x4b, 0xd5, 0xf4, 0x01, 0x34, 0xe5, 0x51,
	0x82, 0x46, 0xab, 0x43, 0xba, 0x2b, 0xfd, 0x9b, 0xb6, 0x76, 0x48, 0x5b, 0x37, 0xb1, 0x7b, 0x94,
	0xa0, 0xa3, 0xa0, 0xf4, 0x31, 0x80, 0x9f, 0xa2, 0x2b, 0x31, 0xd8, 0x73, 0xa5, 0xb1, 0xd0, 0x21,
	0xdd, 0x76, 0xdf, 0xb4, 0x8b, 0x4b, 0xb0, 0xab, 0xa3, 0xd9, 0xbb, 0xd5, 0x25, 0x38, 0xcb, 0x25,
	0x7a, 0x5b, 0xd2, 0x2d, 0x58, 0x10, 0xd2, 0x95, 0x23, 0x61, 0x2c, 0x2a, 0xbd, 0x5b, 0x13, 0x7a,
	0x6f, 0x04, 0xa6, 0xba, 0xe6, 0x8e, 0x82, 0x3a, 0xe5, 0x08, 0x7d, 0x04, 0x2d, 0x3c, 0xc4, 0x48,
	0x1a, 0x4b, 0x6a, 0x96, 0xcd, 0xf4, 0xfa, 0x2c, 0x47, 0x39, 0x05, 0xd8, 0x32, 0xc1, 0x38, 0xcf,
	0x29, 0x1c, 0xfc, 0x30, 0x42, 0x21, 0xad, 0x4d, 0x58, 0x9b, 0xb2, 0x27, 0x92, 0x38, 0x12, 0x48,
	0x57, 0xa1, 0x11, 0xe1, 0x47, 0x75, 0xed, 0x2d, 0x27, 0x2f, 0xad, 0xe7, 0xc0, 0x5e, 0xb9, 0xe9,
	0x81, 0x3e, 0x22, 0xb6, 0x85, 0x83, 0x6e, 0x50, 0x12, 0xd2, 0xdb, 0xf0, 0xaf, 0x9e, 0x1c, 0x61,
	0x90, 0x4e, 0xa3, 0xbb, 0xec, 0x4c, 0x2e, 0x5a, 0x5b, 0xb0, 0x3e, 0x93, 0xa7, 0x14, 0x37, 0x60,
	0x51, 0x8c, 0x7c, 0x1f, 0x85, 0x50, 0x06, 0x96, 0x9c, 0xaa, 0xb5, 0x5e, 0x4e, 0x35, 0xb1, 0x83,
	0x18, 0x55, 0x26, 0x36, 0x60, 0x55, 0xd7, 0xdb, 0xe3, 0x41, 0xe5, 0xe3, 0x3f, 0x7d, 0xfd, 0x45,
	0x30, 0xcb, 0x49, 0x41, 0x36, 0xd7, 0xc9, 0x27, 0xb8, 0xee, 0xa0, 0x4c, 0x39, 0x1e, 0xa2, 0x4e,
	0x50, 0xd9, 0xa8, 0x92, 0x45, 0x2e, 0x9f, 0x2c, 0x0a, 0xcd, 0xc4, 0x0d, 0x8b, 0x5c, 0xb7, 0x1c,
	0x55, 0xe7, 0x61, 0x1f, 0xf0, 0x21, 0x97, 0x2a, 0xd0, 0x2d, 0xa7, 0x68, 0xac, 0x3d, 0xb8, 0x31,
	0x5d, 0xbb, 0x74, 0xfd, 0x64, 0xda, 0x43, 0xb4, 0xfb, 0x6b, 0x33, 0x5d, 0x9c, 0x7b, 0xa3, 0xfe,
	0xcf, 0x06, 0xfc, 0x3f, 0x91, 0x0d, 0x4c, 0x0f, 0xb9, 0x8f, 0xf4, 0x3d, 0xac, 0x4d, 0x13, 0x56,
	0xd1, 0xa1, 0x77, 0x66, 0xd2, 0xeb, 0xb1, 0x33, 0xef, 0xce, 0x83, 0x95, 0x87, 0x18, 0xc0, 0xd5,
	0x69, 0x5a, 0x82, 0x76, 0x27, 0x08, 0x2e, 0x78, 0x04, 0x73, 0xe3, 0x12, 0xc8, 0x52, 0x4d, 0xc2,
	0xb5, 0x19, 0xa9, 0xa4, 0xf7, 0x26, 0x58, 0x2e, 0xfe, 0x06, 0xcc, 0xfb, 0x97, 0x03, 0x5f, 0xa8,
	0x9a, 0x27, 0x70, 0xbe, 0xaa, 0x16, 0xfa, 0xf9, 0xaa, 0x7a, 0xa8, 0x9f, 0x0e, 0x8e, 0x4f, 0x59,
	0xed, 0xe4, 0x94, 0xd5, 0xce, 0x4e, 0x19, 0xf9, 0x9c, 0x31, 0xf2, 0x35, 0x63, 0xe4, 0x7b, 0xc6,
	0xc8, 0x71, 0xc6, 0xc8, 0xaf, 0x8c, 0x91, 0xdf, 0x19, 0xab, 0x9d, 0x65, 0x8c, 0x7c, 0x19, 0xb3,
	0xda, 0xb7, 0x31, 0x23, 0xc7, 0x63, 0x56, 0x3b, 0x19, 0xb3, 0xda, 0xdb, 0xbe, 0xf6, 0x2f, 0x2f,
	0x15, 0x37, 0xf3, 0xda, 0x73, 0xfd, 0x03, 0x8c, 0x82, 0x5e, 0x72, 0x10, 0xf6, 0x42, 0x8c, 0x8a,
	0x9f, 0xba, 0x17, 0x7b, 0x5b, 0x89, 0xe7, 0x2d, 0xa8, 0xee, 0xe1, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xf9, 0x20, 0xf6, 0xc2, 0x56, 0x06, 0x00, 0x00,
}

func (this *Notification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Notification)
	if !ok {
		that2, ok := that.(Notification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Data != that1.Data {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Event != that1.Event {
		return false
	}
	return true
}
func (this *NotificationStatsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotificationStatsRequest)
	if !ok {
		that2, ok := that.(NotificationStatsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *NotificationStatsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotificationStatsResponse)
	if !ok {
		that2, ok := that.(NotificationStatsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.New != that1.New {
		return false
	}
	return true
}
func (this *MarkNotificationsAsReadRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MarkNotificationsAsReadRequest)
	if !ok {
		that2, ok := that.(MarkNotificationsAsReadRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Notifications) != len(that1.Notifications) {
		return false
	}
	for i := range this.Notifications {
		if this.Notifications[i] != that1.Notifications[i] {
			return false
		}
	}
	return true
}
func (this *MarkNotificationsAsReadResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MarkNotificationsAsReadResponse)
	if !ok {
		that2, ok := that.(MarkNotificationsAsReadResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	return true
}
func (this *MarkNotificationsAsSeenRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MarkNotificationsAsSeenRequest)
	if !ok {
		that2, ok := that.(MarkNotificationsAsSeenRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.NotificationIds) != len(that1.NotificationIds) {
		return false
	}
	for i := range this.NotificationIds {
		if this.NotificationIds[i] != that1.NotificationIds[i] {
			return false
		}
	}
	return true
}
func (this *MarkNotificationsAsSeenResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MarkNotificationsAsSeenResponse)
	if !ok {
		that2, ok := that.(MarkNotificationsAsSeenResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Success != that1.Success {
		return false
	}
	return true
}
func (this *RetrieveNotificationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveNotificationRequest)
	if !ok {
		that2, ok := that.(RetrieveNotificationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	return true
}
func (this *RetrieveNotificationResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveNotificationResponse)
	if !ok {
		that2, ok := that.(RetrieveNotificationResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Notifications) != len(that1.Notifications) {
		return false
	}
	for i := range this.Notifications {
		if !this.Notifications[i].Equal(that1.Notifications[i]) {
			return false
		}
	}
	return true
}
func (this *Notification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pb.Notification{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Event: "+fmt.Sprintf("%#v", this.Event)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotificationStatsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.NotificationStatsRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NotificationStatsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.NotificationStatsResponse{")
	s = append(s, "New: "+fmt.Sprintf("%#v", this.New)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MarkNotificationsAsReadRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.MarkNotificationsAsReadRequest{")
	s = append(s, "Notifications: "+fmt.Sprintf("%#v", this.Notifications)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MarkNotificationsAsReadResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.MarkNotificationsAsReadResponse{")
	s = append(s, "Success: "+fmt.Sprintf("%#v", this.Success)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MarkNotificationsAsSeenRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.MarkNotificationsAsSeenRequest{")
	s = append(s, "NotificationIds: "+fmt.Sprintf("%#v", this.NotificationIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MarkNotificationsAsSeenResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.MarkNotificationsAsSeenResponse{")
	s = append(s, "Success: "+fmt.Sprintf("%#v", this.Success)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveNotificationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.RetrieveNotificationRequest{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveNotificationResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RetrieveNotificationResponse{")
	if this.Notifications != nil {
		s = append(s, "Notifications: "+fmt.Sprintf("%#v", this.Notifications)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringNotification(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotificationServiceClient interface {
	RetrieveNotificationStats(ctx context.Context, in *NotificationStatsRequest, opts ...grpc.CallOption) (*NotificationStatsResponse, error)
	RetrieveNotifications(ctx context.Context, in *RetrieveNotificationRequest, opts ...grpc.CallOption) (*RetrieveNotificationResponse, error)
	MarkNotificationsAsRead(ctx context.Context, in *MarkNotificationsAsReadRequest, opts ...grpc.CallOption) (*MarkNotificationsAsReadResponse, error)
	MarkNotificationsAsSeen(ctx context.Context, in *MarkNotificationsAsSeenRequest, opts ...grpc.CallOption) (*MarkNotificationsAsSeenResponse, error)
}

type notificationServiceClient struct {
	cc *grpc.ClientConn
}

func NewNotificationServiceClient(cc *grpc.ClientConn) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) RetrieveNotificationStats(ctx context.Context, in *NotificationStatsRequest, opts ...grpc.CallOption) (*NotificationStatsResponse, error) {
	out := new(NotificationStatsResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.NotificationService/RetrieveNotificationStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) RetrieveNotifications(ctx context.Context, in *RetrieveNotificationRequest, opts ...grpc.CallOption) (*RetrieveNotificationResponse, error) {
	out := new(RetrieveNotificationResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.NotificationService/RetrieveNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) MarkNotificationsAsRead(ctx context.Context, in *MarkNotificationsAsReadRequest, opts ...grpc.CallOption) (*MarkNotificationsAsReadResponse, error) {
	out := new(MarkNotificationsAsReadResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.NotificationService/MarkNotificationsAsRead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) MarkNotificationsAsSeen(ctx context.Context, in *MarkNotificationsAsSeenRequest, opts ...grpc.CallOption) (*MarkNotificationsAsSeenResponse, error) {
	out := new(MarkNotificationsAsSeenResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.NotificationService/MarkNotificationsAsSeen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
type NotificationServiceServer interface {
	RetrieveNotificationStats(context.Context, *NotificationStatsRequest) (*NotificationStatsResponse, error)
	RetrieveNotifications(context.Context, *RetrieveNotificationRequest) (*RetrieveNotificationResponse, error)
	MarkNotificationsAsRead(context.Context, *MarkNotificationsAsReadRequest) (*MarkNotificationsAsReadResponse, error)
	MarkNotificationsAsSeen(context.Context, *MarkNotificationsAsSeenRequest) (*MarkNotificationsAsSeenResponse, error)
}

// UnimplementedNotificationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNotificationServiceServer struct {
}

func (*UnimplementedNotificationServiceServer) RetrieveNotificationStats(ctx context.Context, req *NotificationStatsRequest) (*NotificationStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveNotificationStats not implemented")
}
func (*UnimplementedNotificationServiceServer) RetrieveNotifications(ctx context.Context, req *RetrieveNotificationRequest) (*RetrieveNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveNotifications not implemented")
}
func (*UnimplementedNotificationServiceServer) MarkNotificationsAsRead(ctx context.Context, req *MarkNotificationsAsReadRequest) (*MarkNotificationsAsReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkNotificationsAsRead not implemented")
}
func (*UnimplementedNotificationServiceServer) MarkNotificationsAsSeen(ctx context.Context, req *MarkNotificationsAsSeenRequest) (*MarkNotificationsAsSeenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkNotificationsAsSeen not implemented")
}

func RegisterNotificationServiceServer(s *grpc.Server, srv NotificationServiceServer) {
	s.RegisterService(&_NotificationService_serviceDesc, srv)
}

func _NotificationService_RetrieveNotificationStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).RetrieveNotificationStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.NotificationService/RetrieveNotificationStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).RetrieveNotificationStats(ctx, req.(*NotificationStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_RetrieveNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).RetrieveNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.NotificationService/RetrieveNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).RetrieveNotifications(ctx, req.(*RetrieveNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_MarkNotificationsAsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkNotificationsAsReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).MarkNotificationsAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.NotificationService/MarkNotificationsAsRead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).MarkNotificationsAsRead(ctx, req.(*MarkNotificationsAsReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_MarkNotificationsAsSeen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkNotificationsAsSeenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).MarkNotificationsAsSeen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.NotificationService/MarkNotificationsAsSeen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).MarkNotificationsAsSeen(ctx, req.(*MarkNotificationsAsSeenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotificationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "manabie.bob.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveNotificationStats",
			Handler:    _NotificationService_RetrieveNotificationStats_Handler,
		},
		{
			MethodName: "RetrieveNotifications",
			Handler:    _NotificationService_RetrieveNotifications_Handler,
		},
		{
			MethodName: "MarkNotificationsAsRead",
			Handler:    _NotificationService_MarkNotificationsAsRead_Handler,
		},
		{
			MethodName: "MarkNotificationsAsSeen",
			Handler:    _NotificationService_MarkNotificationsAsSeen_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notification.proto",
}

func (m *Notification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Notification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Notification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Event != 0 {
		i = encodeVarintNotification(dAtA, i, uint64(m.Event))
		i--
		dAtA[i] = 0x40
	}
	if m.Status != 0 {
		i = encodeVarintNotification(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNotification(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Type != 0 {
		i = encodeVarintNotification(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintNotification(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintNotification(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintNotification(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintNotification(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NotificationStatsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotificationStatsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotificationStatsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NotificationStatsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotificationStatsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotificationStatsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.New != 0 {
		i = encodeVarintNotification(dAtA, i, uint64(m.New))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MarkNotificationsAsReadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarkNotificationsAsReadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarkNotificationsAsReadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Notifications) > 0 {
		for iNdEx := len(m.Notifications) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Notifications[iNdEx])
			copy(dAtA[i:], m.Notifications[iNdEx])
			i = encodeVarintNotification(dAtA, i, uint64(len(m.Notifications[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MarkNotificationsAsReadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarkNotificationsAsReadResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarkNotificationsAsReadResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MarkNotificationsAsSeenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarkNotificationsAsSeenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarkNotificationsAsSeenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NotificationIds) > 0 {
		for iNdEx := len(m.NotificationIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NotificationIds[iNdEx])
			copy(dAtA[i:], m.NotificationIds[iNdEx])
			i = encodeVarintNotification(dAtA, i, uint64(len(m.NotificationIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MarkNotificationsAsSeenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarkNotificationsAsSeenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarkNotificationsAsSeenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveNotificationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveNotificationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveNotificationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintNotification(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.Page != 0 {
		i = encodeVarintNotification(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintNotification(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveNotificationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveNotificationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveNotificationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Notifications) > 0 {
		for iNdEx := len(m.Notifications) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Notifications[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNotification(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintNotification(dAtA []byte, offset int, v uint64) int {
	offset -= sovNotification(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Notification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovNotification(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovNotification(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovNotification(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovNotification(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovNotification(uint64(m.Type))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovNotification(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovNotification(uint64(m.Status))
	}
	if m.Event != 0 {
		n += 1 + sovNotification(uint64(m.Event))
	}
	return n
}

func (m *NotificationStatsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NotificationStatsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.New != 0 {
		n += 1 + sovNotification(uint64(m.New))
	}
	return n
}

func (m *MarkNotificationsAsReadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Notifications) > 0 {
		for _, s := range m.Notifications {
			l = len(s)
			n += 1 + l + sovNotification(uint64(l))
		}
	}
	return n
}

func (m *MarkNotificationsAsReadResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func (m *MarkNotificationsAsSeenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NotificationIds) > 0 {
		for _, s := range m.NotificationIds {
			l = len(s)
			n += 1 + l + sovNotification(uint64(l))
		}
	}
	return n
}

func (m *MarkNotificationsAsSeenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func (m *RetrieveNotificationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovNotification(uint64(m.Type))
	}
	if m.Page != 0 {
		n += 1 + sovNotification(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovNotification(uint64(m.Limit))
	}
	return n
}

func (m *RetrieveNotificationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Notifications) > 0 {
		for _, e := range m.Notifications {
			l = e.Size()
			n += 1 + l + sovNotification(uint64(l))
		}
	}
	return n
}

func sovNotification(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNotification(x uint64) (n int) {
	return sovNotification(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Notification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Notification{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Event:` + fmt.Sprintf("%v", this.Event) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotificationStatsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotificationStatsRequest{`,
		`}`,
	}, "")
	return s
}
func (this *NotificationStatsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotificationStatsResponse{`,
		`New:` + fmt.Sprintf("%v", this.New) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MarkNotificationsAsReadRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MarkNotificationsAsReadRequest{`,
		`Notifications:` + fmt.Sprintf("%v", this.Notifications) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MarkNotificationsAsReadResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MarkNotificationsAsReadResponse{`,
		`Success:` + fmt.Sprintf("%v", this.Success) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MarkNotificationsAsSeenRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MarkNotificationsAsSeenRequest{`,
		`NotificationIds:` + fmt.Sprintf("%v", this.NotificationIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MarkNotificationsAsSeenResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MarkNotificationsAsSeenResponse{`,
		`Success:` + fmt.Sprintf("%v", this.Success) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveNotificationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveNotificationRequest{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveNotificationResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForNotifications := "[]*Notification{"
	for _, f := range this.Notifications {
		repeatedStringForNotifications += strings.Replace(f.String(), "Notification", "Notification", 1) + ","
	}
	repeatedStringForNotifications += "}"
	s := strings.Join([]string{`&RetrieveNotificationResponse{`,
		`Notifications:` + repeatedStringForNotifications + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringNotification(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Notification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotification
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Notification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Notification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotification
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotification
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotification
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotification
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= NotificationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotification
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNotification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= UserNotificationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			m.Event = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Event |= NotificationEvent(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNotification(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNotification
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotificationStatsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotification
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotificationStatsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotificationStatsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipNotification(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNotification
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotificationStatsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotification
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotificationStatsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotificationStatsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field New", wireType)
			}
			m.New = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.New |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNotification(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNotification
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarkNotificationsAsReadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotification
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarkNotificationsAsReadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarkNotificationsAsReadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notifications", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotification
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notifications = append(m.Notifications, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNotification(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNotification
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarkNotificationsAsReadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotification
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarkNotificationsAsReadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarkNotificationsAsReadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNotification(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNotification
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarkNotificationsAsSeenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotification
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarkNotificationsAsSeenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarkNotificationsAsSeenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotification
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNotification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotificationIds = append(m.NotificationIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNotification(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNotification
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarkNotificationsAsSeenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotification
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarkNotificationsAsSeenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarkNotificationsAsSeenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNotification(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNotification
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveNotificationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotification
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveNotificationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveNotificationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= NotificationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNotification(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNotification
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveNotificationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotification
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveNotificationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveNotificationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notifications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotification
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNotification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notifications = append(m.Notifications, &Notification{})
			if err := m.Notifications[len(m.Notifications)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNotification(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNotification
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNotification(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNotification
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNotification
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNotification
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNotification
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNotification
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNotification
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNotification        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNotification          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNotification = fmt.Errorf("proto: unexpected end of group")
)
