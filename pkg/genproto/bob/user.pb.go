// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: user.proto

package pb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UpdateUserDeviceTokenRequest struct {
	UserId            string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DeviceToken       string `protobuf:"bytes,2,opt,name=device_token,json=deviceToken,proto3" json:"device_token,omitempty"`
	AllowNotification bool   `protobuf:"varint,3,opt,name=allow_notification,json=allowNotification,proto3" json:"allow_notification,omitempty"`
}

func (m *UpdateUserDeviceTokenRequest) Reset()      { *m = UpdateUserDeviceTokenRequest{} }
func (*UpdateUserDeviceTokenRequest) ProtoMessage() {}
func (*UpdateUserDeviceTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{0}
}
func (m *UpdateUserDeviceTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserDeviceTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserDeviceTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserDeviceTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserDeviceTokenRequest.Merge(m, src)
}
func (m *UpdateUserDeviceTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserDeviceTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserDeviceTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserDeviceTokenRequest proto.InternalMessageInfo

func (m *UpdateUserDeviceTokenRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *UpdateUserDeviceTokenRequest) GetDeviceToken() string {
	if m != nil {
		return m.DeviceToken
	}
	return ""
}

func (m *UpdateUserDeviceTokenRequest) GetAllowNotification() bool {
	if m != nil {
		return m.AllowNotification
	}
	return false
}

type UpdateUserDeviceTokenResponse struct {
	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (m *UpdateUserDeviceTokenResponse) Reset()      { *m = UpdateUserDeviceTokenResponse{} }
func (*UpdateUserDeviceTokenResponse) ProtoMessage() {}
func (*UpdateUserDeviceTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{1}
}
func (m *UpdateUserDeviceTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserDeviceTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserDeviceTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserDeviceTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserDeviceTokenResponse.Merge(m, src)
}
func (m *UpdateUserDeviceTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserDeviceTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserDeviceTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserDeviceTokenResponse proto.InternalMessageInfo

func (m *UpdateUserDeviceTokenResponse) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

type UserProfile struct {
	Id          string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Country     Country          `protobuf:"varint,3,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"`
	PhoneNumber string           `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Email       string           `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	Avatar      string           `protobuf:"bytes,6,opt,name=avatar,proto3" json:"avatar,omitempty"`
	DeviceToken string           `protobuf:"bytes,7,opt,name=device_token,json=deviceToken,proto3" json:"device_token,omitempty"`
	UserGroup   string           `protobuf:"bytes,8,opt,name=user_group,json=userGroup,proto3" json:"user_group,omitempty"`
	CreatedAt   *types.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *types.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (m *UserProfile) Reset()      { *m = UserProfile{} }
func (*UserProfile) ProtoMessage() {}
func (*UserProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{2}
}
func (m *UserProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserProfile.Merge(m, src)
}
func (m *UserProfile) XXX_Size() int {
	return m.Size()
}
func (m *UserProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_UserProfile.DiscardUnknown(m)
}

var xxx_messageInfo_UserProfile proto.InternalMessageInfo

func (m *UserProfile) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UserProfile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserProfile) GetCountry() Country {
	if m != nil {
		return m.Country
	}
	return COUNTRY_NONE
}

func (m *UserProfile) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *UserProfile) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserProfile) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *UserProfile) GetDeviceToken() string {
	if m != nil {
		return m.DeviceToken
	}
	return ""
}

func (m *UserProfile) GetUserGroup() string {
	if m != nil {
		return m.UserGroup
	}
	return ""
}

func (m *UserProfile) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *UserProfile) GetUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type TutorProfile struct {
	Id          string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Country     Country          `protobuf:"varint,3,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"`
	PhoneNumber string           `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Email       string           `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	Avatar      string           `protobuf:"bytes,6,opt,name=avatar,proto3" json:"avatar,omitempty"`
	DeviceToken string           `protobuf:"bytes,7,opt,name=device_token,json=deviceToken,proto3" json:"device_token,omitempty"`
	UserGroup   string           `protobuf:"bytes,8,opt,name=user_group,json=userGroup,proto3" json:"user_group,omitempty"`
	SkillSet    []Subject        `protobuf:"varint,9,rep,packed,name=skill_set,json=skillSet,proto3,enum=manabie.bob.Subject" json:"skill_set,omitempty"`
	Status      TutorStatus      `protobuf:"varint,10,opt,name=status,proto3,enum=manabie.bob.TutorStatus" json:"status,omitempty"`
	CreatedAt   *types.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *types.Timestamp `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (m *TutorProfile) Reset()      { *m = TutorProfile{} }
func (*TutorProfile) ProtoMessage() {}
func (*TutorProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{3}
}
func (m *TutorProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TutorProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TutorProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TutorProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TutorProfile.Merge(m, src)
}
func (m *TutorProfile) XXX_Size() int {
	return m.Size()
}
func (m *TutorProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_TutorProfile.DiscardUnknown(m)
}

var xxx_messageInfo_TutorProfile proto.InternalMessageInfo

func (m *TutorProfile) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TutorProfile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TutorProfile) GetCountry() Country {
	if m != nil {
		return m.Country
	}
	return COUNTRY_NONE
}

func (m *TutorProfile) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *TutorProfile) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *TutorProfile) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *TutorProfile) GetDeviceToken() string {
	if m != nil {
		return m.DeviceToken
	}
	return ""
}

func (m *TutorProfile) GetUserGroup() string {
	if m != nil {
		return m.UserGroup
	}
	return ""
}

func (m *TutorProfile) GetSkillSet() []Subject {
	if m != nil {
		return m.SkillSet
	}
	return nil
}

func (m *TutorProfile) GetStatus() TutorStatus {
	if m != nil {
		return m.Status
	}
	return TUTOR_STATUS_NONE
}

func (m *TutorProfile) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *TutorProfile) GetUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type GetCoachProfileResponse struct {
	Profile *UserProfile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (m *GetCoachProfileResponse) Reset()      { *m = GetCoachProfileResponse{} }
func (*GetCoachProfileResponse) ProtoMessage() {}
func (*GetCoachProfileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{4}
}
func (m *GetCoachProfileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCoachProfileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCoachProfileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCoachProfileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCoachProfileResponse.Merge(m, src)
}
func (m *GetCoachProfileResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCoachProfileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCoachProfileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCoachProfileResponse proto.InternalMessageInfo

func (m *GetCoachProfileResponse) GetProfile() *UserProfile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type GetCoachProfileRequest struct {
	ProfileId string `protobuf:"bytes,1,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
}

func (m *GetCoachProfileRequest) Reset()      { *m = GetCoachProfileRequest{} }
func (*GetCoachProfileRequest) ProtoMessage() {}
func (*GetCoachProfileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{5}
}
func (m *GetCoachProfileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCoachProfileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCoachProfileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCoachProfileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCoachProfileRequest.Merge(m, src)
}
func (m *GetCoachProfileRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCoachProfileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCoachProfileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCoachProfileRequest proto.InternalMessageInfo

func (m *GetCoachProfileRequest) GetProfileId() string {
	if m != nil {
		return m.ProfileId
	}
	return ""
}

type UpdateUserProfileRequest struct {
	Profile *UserProfile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (m *UpdateUserProfileRequest) Reset()      { *m = UpdateUserProfileRequest{} }
func (*UpdateUserProfileRequest) ProtoMessage() {}
func (*UpdateUserProfileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{6}
}
func (m *UpdateUserProfileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserProfileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserProfileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserProfileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserProfileRequest.Merge(m, src)
}
func (m *UpdateUserProfileRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserProfileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserProfileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserProfileRequest proto.InternalMessageInfo

func (m *UpdateUserProfileRequest) GetProfile() *UserProfile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type UpdateUserProfileResponse struct {
	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (m *UpdateUserProfileResponse) Reset()      { *m = UpdateUserProfileResponse{} }
func (*UpdateUserProfileResponse) ProtoMessage() {}
func (*UpdateUserProfileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{7}
}
func (m *UpdateUserProfileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateUserProfileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateUserProfileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateUserProfileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateUserProfileResponse.Merge(m, src)
}
func (m *UpdateUserProfileResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateUserProfileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateUserProfileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateUserProfileResponse proto.InternalMessageInfo

func (m *UpdateUserProfileResponse) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

type UpdateTutorStatusRequest struct {
	Status TutorStatus `protobuf:"varint,1,opt,name=status,proto3,enum=manabie.bob.TutorStatus" json:"status,omitempty"`
}

func (m *UpdateTutorStatusRequest) Reset()      { *m = UpdateTutorStatusRequest{} }
func (*UpdateTutorStatusRequest) ProtoMessage() {}
func (*UpdateTutorStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{8}
}
func (m *UpdateTutorStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTutorStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTutorStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTutorStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTutorStatusRequest.Merge(m, src)
}
func (m *UpdateTutorStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTutorStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTutorStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTutorStatusRequest proto.InternalMessageInfo

func (m *UpdateTutorStatusRequest) GetStatus() TutorStatus {
	if m != nil {
		return m.Status
	}
	return TUTOR_STATUS_NONE
}

type UpdateTutorStatusResponse struct {
}

func (m *UpdateTutorStatusResponse) Reset()      { *m = UpdateTutorStatusResponse{} }
func (*UpdateTutorStatusResponse) ProtoMessage() {}
func (*UpdateTutorStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{9}
}
func (m *UpdateTutorStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTutorStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTutorStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTutorStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTutorStatusResponse.Merge(m, src)
}
func (m *UpdateTutorStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTutorStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTutorStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTutorStatusResponse proto.InternalMessageInfo

type GetCurrentUserProfileRequest struct {
}

func (m *GetCurrentUserProfileRequest) Reset()      { *m = GetCurrentUserProfileRequest{} }
func (*GetCurrentUserProfileRequest) ProtoMessage() {}
func (*GetCurrentUserProfileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{10}
}
func (m *GetCurrentUserProfileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCurrentUserProfileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCurrentUserProfileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCurrentUserProfileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCurrentUserProfileRequest.Merge(m, src)
}
func (m *GetCurrentUserProfileRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCurrentUserProfileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCurrentUserProfileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCurrentUserProfileRequest proto.InternalMessageInfo

type GetCurrentUserProfileResponse struct {
	Profile *UserProfile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (m *GetCurrentUserProfileResponse) Reset()      { *m = GetCurrentUserProfileResponse{} }
func (*GetCurrentUserProfileResponse) ProtoMessage() {}
func (*GetCurrentUserProfileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{11}
}
func (m *GetCurrentUserProfileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCurrentUserProfileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCurrentUserProfileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCurrentUserProfileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCurrentUserProfileResponse.Merge(m, src)
}
func (m *GetCurrentUserProfileResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCurrentUserProfileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCurrentUserProfileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCurrentUserProfileResponse proto.InternalMessageInfo

func (m *GetCurrentUserProfileResponse) GetProfile() *UserProfile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type GetTutorProfileRequest struct {
	ProfileIds []string `protobuf:"bytes,1,rep,name=profile_ids,json=profileIds,proto3" json:"profile_ids,omitempty"`
}

func (m *GetTutorProfileRequest) Reset()      { *m = GetTutorProfileRequest{} }
func (*GetTutorProfileRequest) ProtoMessage() {}
func (*GetTutorProfileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{12}
}
func (m *GetTutorProfileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTutorProfileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTutorProfileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTutorProfileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTutorProfileRequest.Merge(m, src)
}
func (m *GetTutorProfileRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTutorProfileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTutorProfileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTutorProfileRequest proto.InternalMessageInfo

func (m *GetTutorProfileRequest) GetProfileIds() []string {
	if m != nil {
		return m.ProfileIds
	}
	return nil
}

type GetTutorProfileResponse struct {
	Profiles []*TutorProfile `protobuf:"bytes,1,rep,name=profiles,proto3" json:"profiles,omitempty"`
}

func (m *GetTutorProfileResponse) Reset()      { *m = GetTutorProfileResponse{} }
func (*GetTutorProfileResponse) ProtoMessage() {}
func (*GetTutorProfileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{13}
}
func (m *GetTutorProfileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTutorProfileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTutorProfileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTutorProfileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTutorProfileResponse.Merge(m, src)
}
func (m *GetTutorProfileResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTutorProfileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTutorProfileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTutorProfileResponse proto.InternalMessageInfo

func (m *GetTutorProfileResponse) GetProfiles() []*TutorProfile {
	if m != nil {
		return m.Profiles
	}
	return nil
}

type ClaimsUserAuthRequest struct {
}

func (m *ClaimsUserAuthRequest) Reset()      { *m = ClaimsUserAuthRequest{} }
func (*ClaimsUserAuthRequest) ProtoMessage() {}
func (*ClaimsUserAuthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{14}
}
func (m *ClaimsUserAuthRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimsUserAuthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimsUserAuthRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimsUserAuthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimsUserAuthRequest.Merge(m, src)
}
func (m *ClaimsUserAuthRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClaimsUserAuthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimsUserAuthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimsUserAuthRequest proto.InternalMessageInfo

type ClaimsUserAuthResponse struct {
	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (m *ClaimsUserAuthResponse) Reset()      { *m = ClaimsUserAuthResponse{} }
func (*ClaimsUserAuthResponse) ProtoMessage() {}
func (*ClaimsUserAuthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{15}
}
func (m *ClaimsUserAuthResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimsUserAuthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimsUserAuthResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimsUserAuthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimsUserAuthResponse.Merge(m, src)
}
func (m *ClaimsUserAuthResponse) XXX_Size() int {
	return m.Size()
}
func (m *ClaimsUserAuthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimsUserAuthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimsUserAuthResponse proto.InternalMessageInfo

func (m *ClaimsUserAuthResponse) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

type GetCoachProfilesRequest struct {
	ProfileIds []string `protobuf:"bytes,1,rep,name=profile_ids,json=profileIds,proto3" json:"profile_ids,omitempty"`
}

func (m *GetCoachProfilesRequest) Reset()      { *m = GetCoachProfilesRequest{} }
func (*GetCoachProfilesRequest) ProtoMessage() {}
func (*GetCoachProfilesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{16}
}
func (m *GetCoachProfilesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCoachProfilesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCoachProfilesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCoachProfilesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCoachProfilesRequest.Merge(m, src)
}
func (m *GetCoachProfilesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCoachProfilesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCoachProfilesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCoachProfilesRequest proto.InternalMessageInfo

func (m *GetCoachProfilesRequest) GetProfileIds() []string {
	if m != nil {
		return m.ProfileIds
	}
	return nil
}

type GetCoachProfilesResponse struct {
	Profiles []*UserProfile `protobuf:"bytes,1,rep,name=profiles,proto3" json:"profiles,omitempty"`
}

func (m *GetCoachProfilesResponse) Reset()      { *m = GetCoachProfilesResponse{} }
func (*GetCoachProfilesResponse) ProtoMessage() {}
func (*GetCoachProfilesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{17}
}
func (m *GetCoachProfilesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCoachProfilesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCoachProfilesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCoachProfilesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCoachProfilesResponse.Merge(m, src)
}
func (m *GetCoachProfilesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCoachProfilesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCoachProfilesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCoachProfilesResponse proto.InternalMessageInfo

func (m *GetCoachProfilesResponse) GetProfiles() []*UserProfile {
	if m != nil {
		return m.Profiles
	}
	return nil
}

type TeacherProfile struct {
	Id          string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Country     Country          `protobuf:"varint,3,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"`
	PhoneNumber string           `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Email       string           `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	Avatar      string           `protobuf:"bytes,6,opt,name=avatar,proto3" json:"avatar,omitempty"`
	DeviceToken string           `protobuf:"bytes,7,opt,name=device_token,json=deviceToken,proto3" json:"device_token,omitempty"`
	UserGroup   string           `protobuf:"bytes,8,opt,name=user_group,json=userGroup,proto3" json:"user_group,omitempty"`
	SchoolIds   []int32          `protobuf:"varint,9,rep,packed,name=school_ids,json=schoolIds,proto3" json:"school_ids,omitempty"`
	CreatedAt   *types.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   *types.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (m *TeacherProfile) Reset()      { *m = TeacherProfile{} }
func (*TeacherProfile) ProtoMessage() {}
func (*TeacherProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{18}
}
func (m *TeacherProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeacherProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeacherProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeacherProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeacherProfile.Merge(m, src)
}
func (m *TeacherProfile) XXX_Size() int {
	return m.Size()
}
func (m *TeacherProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_TeacherProfile.DiscardUnknown(m)
}

var xxx_messageInfo_TeacherProfile proto.InternalMessageInfo

func (m *TeacherProfile) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TeacherProfile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TeacherProfile) GetCountry() Country {
	if m != nil {
		return m.Country
	}
	return COUNTRY_NONE
}

func (m *TeacherProfile) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *TeacherProfile) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *TeacherProfile) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *TeacherProfile) GetDeviceToken() string {
	if m != nil {
		return m.DeviceToken
	}
	return ""
}

func (m *TeacherProfile) GetUserGroup() string {
	if m != nil {
		return m.UserGroup
	}
	return ""
}

func (m *TeacherProfile) GetSchoolIds() []int32 {
	if m != nil {
		return m.SchoolIds
	}
	return nil
}

func (m *TeacherProfile) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *TeacherProfile) GetUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type GetTeacherProfilesRequest struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (m *GetTeacherProfilesRequest) Reset()      { *m = GetTeacherProfilesRequest{} }
func (*GetTeacherProfilesRequest) ProtoMessage() {}
func (*GetTeacherProfilesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{19}
}
func (m *GetTeacherProfilesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTeacherProfilesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTeacherProfilesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTeacherProfilesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTeacherProfilesRequest.Merge(m, src)
}
func (m *GetTeacherProfilesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTeacherProfilesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTeacherProfilesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTeacherProfilesRequest proto.InternalMessageInfo

func (m *GetTeacherProfilesRequest) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type GetTeacherProfilesResponse struct {
	Profiles []*TeacherProfile `protobuf:"bytes,1,rep,name=profiles,proto3" json:"profiles,omitempty"`
}

func (m *GetTeacherProfilesResponse) Reset()      { *m = GetTeacherProfilesResponse{} }
func (*GetTeacherProfilesResponse) ProtoMessage() {}
func (*GetTeacherProfilesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{20}
}
func (m *GetTeacherProfilesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTeacherProfilesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTeacherProfilesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTeacherProfilesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTeacherProfilesResponse.Merge(m, src)
}
func (m *GetTeacherProfilesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTeacherProfilesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTeacherProfilesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTeacherProfilesResponse proto.InternalMessageInfo

func (m *GetTeacherProfilesResponse) GetProfiles() []*TeacherProfile {
	if m != nil {
		return m.Profiles
	}
	return nil
}

type BasicProfile struct {
	UserId      string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Avatar      string `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	UserGroup   string `protobuf:"bytes,4,opt,name=user_group,json=userGroup,proto3" json:"user_group,omitempty"`
	FacebookId  string `protobuf:"bytes,5,opt,name=facebook_id,json=facebookId,proto3" json:"facebook_id,omitempty"`
	AppleUserId string `protobuf:"bytes,6,opt,name=apple_user_id,json=appleUserId,proto3" json:"apple_user_id,omitempty"`
}

func (m *BasicProfile) Reset()      { *m = BasicProfile{} }
func (*BasicProfile) ProtoMessage() {}
func (*BasicProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{21}
}
func (m *BasicProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BasicProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BasicProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BasicProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasicProfile.Merge(m, src)
}
func (m *BasicProfile) XXX_Size() int {
	return m.Size()
}
func (m *BasicProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_BasicProfile.DiscardUnknown(m)
}

var xxx_messageInfo_BasicProfile proto.InternalMessageInfo

func (m *BasicProfile) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *BasicProfile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BasicProfile) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *BasicProfile) GetUserGroup() string {
	if m != nil {
		return m.UserGroup
	}
	return ""
}

func (m *BasicProfile) GetFacebookId() string {
	if m != nil {
		return m.FacebookId
	}
	return ""
}

func (m *BasicProfile) GetAppleUserId() string {
	if m != nil {
		return m.AppleUserId
	}
	return ""
}

type GetBasicProfileRequest struct {
	UserIds []string `protobuf:"bytes,1,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (m *GetBasicProfileRequest) Reset()      { *m = GetBasicProfileRequest{} }
func (*GetBasicProfileRequest) ProtoMessage() {}
func (*GetBasicProfileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{22}
}
func (m *GetBasicProfileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBasicProfileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBasicProfileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBasicProfileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBasicProfileRequest.Merge(m, src)
}
func (m *GetBasicProfileRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBasicProfileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBasicProfileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBasicProfileRequest proto.InternalMessageInfo

func (m *GetBasicProfileRequest) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

type GetBasicProfileResponse struct {
	Profiles []*BasicProfile `protobuf:"bytes,1,rep,name=profiles,proto3" json:"profiles,omitempty"`
}

func (m *GetBasicProfileResponse) Reset()      { *m = GetBasicProfileResponse{} }
func (*GetBasicProfileResponse) ProtoMessage() {}
func (*GetBasicProfileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{23}
}
func (m *GetBasicProfileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBasicProfileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBasicProfileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBasicProfileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBasicProfileResponse.Merge(m, src)
}
func (m *GetBasicProfileResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBasicProfileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBasicProfileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBasicProfileResponse proto.InternalMessageInfo

func (m *GetBasicProfileResponse) GetProfiles() []*BasicProfile {
	if m != nil {
		return m.Profiles
	}
	return nil
}

type CheckProfileRequest struct {
	// Types that are valid to be assigned to Filter:
	//
	//	*CheckProfileRequest_Email
	//	*CheckProfileRequest_Phone
	Filter isCheckProfileRequest_Filter `protobuf_oneof:"filter"`
}

func (m *CheckProfileRequest) Reset()      { *m = CheckProfileRequest{} }
func (*CheckProfileRequest) ProtoMessage() {}
func (*CheckProfileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{24}
}
func (m *CheckProfileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckProfileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckProfileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckProfileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckProfileRequest.Merge(m, src)
}
func (m *CheckProfileRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckProfileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckProfileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckProfileRequest proto.InternalMessageInfo

type isCheckProfileRequest_Filter interface {
	isCheckProfileRequest_Filter()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type CheckProfileRequest_Email struct {
	Email string `protobuf:"bytes,1,opt,name=email,proto3,oneof" json:"email,omitempty"`
}
type CheckProfileRequest_Phone struct {
	Phone string `protobuf:"bytes,2,opt,name=phone,proto3,oneof" json:"phone,omitempty"`
}

func (*CheckProfileRequest_Email) isCheckProfileRequest_Filter() {}
func (*CheckProfileRequest_Phone) isCheckProfileRequest_Filter() {}

func (m *CheckProfileRequest) GetFilter() isCheckProfileRequest_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *CheckProfileRequest) GetEmail() string {
	if x, ok := m.GetFilter().(*CheckProfileRequest_Email); ok {
		return x.Email
	}
	return ""
}

func (m *CheckProfileRequest) GetPhone() string {
	if x, ok := m.GetFilter().(*CheckProfileRequest_Phone); ok {
		return x.Phone
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CheckProfileRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CheckProfileRequest_Email)(nil),
		(*CheckProfileRequest_Phone)(nil),
	}
}

type CheckProfileResponse struct {
	Found   bool          `protobuf:"varint,1,opt,name=found,proto3" json:"found,omitempty"`
	Profile *BasicProfile `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (m *CheckProfileResponse) Reset()      { *m = CheckProfileResponse{} }
func (*CheckProfileResponse) ProtoMessage() {}
func (*CheckProfileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{25}
}
func (m *CheckProfileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckProfileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckProfileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckProfileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckProfileResponse.Merge(m, src)
}
func (m *CheckProfileResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckProfileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckProfileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckProfileResponse proto.InternalMessageInfo

func (m *CheckProfileResponse) GetFound() bool {
	if m != nil {
		return m.Found
	}
	return false
}

func (m *CheckProfileResponse) GetProfile() *BasicProfile {
	if m != nil {
		return m.Profile
	}
	return nil
}

func init() {
	proto.RegisterType((*UpdateUserDeviceTokenRequest)(nil), "manabie.bob.UpdateUserDeviceTokenRequest")
	golang_proto.RegisterType((*UpdateUserDeviceTokenRequest)(nil), "manabie.bob.UpdateUserDeviceTokenRequest")
	proto.RegisterType((*UpdateUserDeviceTokenResponse)(nil), "manabie.bob.UpdateUserDeviceTokenResponse")
	golang_proto.RegisterType((*UpdateUserDeviceTokenResponse)(nil), "manabie.bob.UpdateUserDeviceTokenResponse")
	proto.RegisterType((*UserProfile)(nil), "manabie.bob.UserProfile")
	golang_proto.RegisterType((*UserProfile)(nil), "manabie.bob.UserProfile")
	proto.RegisterType((*TutorProfile)(nil), "manabie.bob.TutorProfile")
	golang_proto.RegisterType((*TutorProfile)(nil), "manabie.bob.TutorProfile")
	proto.RegisterType((*GetCoachProfileResponse)(nil), "manabie.bob.GetCoachProfileResponse")
	golang_proto.RegisterType((*GetCoachProfileResponse)(nil), "manabie.bob.GetCoachProfileResponse")
	proto.RegisterType((*GetCoachProfileRequest)(nil), "manabie.bob.GetCoachProfileRequest")
	golang_proto.RegisterType((*GetCoachProfileRequest)(nil), "manabie.bob.GetCoachProfileRequest")
	proto.RegisterType((*UpdateUserProfileRequest)(nil), "manabie.bob.UpdateUserProfileRequest")
	golang_proto.RegisterType((*UpdateUserProfileRequest)(nil), "manabie.bob.UpdateUserProfileRequest")
	proto.RegisterType((*UpdateUserProfileResponse)(nil), "manabie.bob.UpdateUserProfileResponse")
	golang_proto.RegisterType((*UpdateUserProfileResponse)(nil), "manabie.bob.UpdateUserProfileResponse")
	proto.RegisterType((*UpdateTutorStatusRequest)(nil), "manabie.bob.UpdateTutorStatusRequest")
	golang_proto.RegisterType((*UpdateTutorStatusRequest)(nil), "manabie.bob.UpdateTutorStatusRequest")
	proto.RegisterType((*UpdateTutorStatusResponse)(nil), "manabie.bob.UpdateTutorStatusResponse")
	golang_proto.RegisterType((*UpdateTutorStatusResponse)(nil), "manabie.bob.UpdateTutorStatusResponse")
	proto.RegisterType((*GetCurrentUserProfileRequest)(nil), "manabie.bob.GetCurrentUserProfileRequest")
	golang_proto.RegisterType((*GetCurrentUserProfileRequest)(nil), "manabie.bob.GetCurrentUserProfileRequest")
	proto.RegisterType((*GetCurrentUserProfileResponse)(nil), "manabie.bob.GetCurrentUserProfileResponse")
	golang_proto.RegisterType((*GetCurrentUserProfileResponse)(nil), "manabie.bob.GetCurrentUserProfileResponse")
	proto.RegisterType((*GetTutorProfileRequest)(nil), "manabie.bob.GetTutorProfileRequest")
	golang_proto.RegisterType((*GetTutorProfileRequest)(nil), "manabie.bob.GetTutorProfileRequest")
	proto.RegisterType((*GetTutorProfileResponse)(nil), "manabie.bob.GetTutorProfileResponse")
	golang_proto.RegisterType((*GetTutorProfileResponse)(nil), "manabie.bob.GetTutorProfileResponse")
	proto.RegisterType((*ClaimsUserAuthRequest)(nil), "manabie.bob.ClaimsUserAuthRequest")
	golang_proto.RegisterType((*ClaimsUserAuthRequest)(nil), "manabie.bob.ClaimsUserAuthRequest")
	proto.RegisterType((*ClaimsUserAuthResponse)(nil), "manabie.bob.ClaimsUserAuthResponse")
	golang_proto.RegisterType((*ClaimsUserAuthResponse)(nil), "manabie.bob.ClaimsUserAuthResponse")
	proto.RegisterType((*GetCoachProfilesRequest)(nil), "manabie.bob.GetCoachProfilesRequest")
	golang_proto.RegisterType((*GetCoachProfilesRequest)(nil), "manabie.bob.GetCoachProfilesRequest")
	proto.RegisterType((*GetCoachProfilesResponse)(nil), "manabie.bob.GetCoachProfilesResponse")
	golang_proto.RegisterType((*GetCoachProfilesResponse)(nil), "manabie.bob.GetCoachProfilesResponse")
	proto.RegisterType((*TeacherProfile)(nil), "manabie.bob.TeacherProfile")
	golang_proto.RegisterType((*TeacherProfile)(nil), "manabie.bob.TeacherProfile")
	proto.RegisterType((*GetTeacherProfilesRequest)(nil), "manabie.bob.GetTeacherProfilesRequest")
	golang_proto.RegisterType((*GetTeacherProfilesRequest)(nil), "manabie.bob.GetTeacherProfilesRequest")
	proto.RegisterType((*GetTeacherProfilesResponse)(nil), "manabie.bob.GetTeacherProfilesResponse")
	golang_proto.RegisterType((*GetTeacherProfilesResponse)(nil), "manabie.bob.GetTeacherProfilesResponse")
	proto.RegisterType((*BasicProfile)(nil), "manabie.bob.BasicProfile")
	golang_proto.RegisterType((*BasicProfile)(nil), "manabie.bob.BasicProfile")
	proto.RegisterType((*GetBasicProfileRequest)(nil), "manabie.bob.GetBasicProfileRequest")
	golang_proto.RegisterType((*GetBasicProfileRequest)(nil), "manabie.bob.GetBasicProfileRequest")
	proto.RegisterType((*GetBasicProfileResponse)(nil), "manabie.bob.GetBasicProfileResponse")
	golang_proto.RegisterType((*GetBasicProfileResponse)(nil), "manabie.bob.GetBasicProfileResponse")
	proto.RegisterType((*CheckProfileRequest)(nil), "manabie.bob.CheckProfileRequest")
	golang_proto.RegisterType((*CheckProfileRequest)(nil), "manabie.bob.CheckProfileRequest")
	proto.RegisterType((*CheckProfileResponse)(nil), "manabie.bob.CheckProfileResponse")
	golang_proto.RegisterType((*CheckProfileResponse)(nil), "manabie.bob.CheckProfileResponse")
}

func init() { proto.RegisterFile("user.proto", fileDescriptor_116e343673f7ffaf) }
func init() { golang_proto.RegisterFile("user.proto", fileDescriptor_116e343673f7ffaf) }

var fileDescriptor_116e343673f7ffaf = []byte{
	// 1211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x58, 0x4f, 0x6f, 0xe3, 0xc4,
	0x1b, 0x8e, 0x93, 0x36, 0x4d, 0xde, 0xf4, 0xd7, 0xdf, 0xee, 0xd0, 0x6d, 0xd3, 0xec, 0xd6, 0xed,
	0x7a, 0xd9, 0xa5, 0x20, 0x35, 0x85, 0x14, 0xb4, 0x2c, 0x7b, 0x40, 0x6d, 0x91, 0x96, 0x4a, 0x50,
	0x56, 0x4e, 0x7b, 0x00, 0x21, 0x45, 0x63, 0x7b, 0x92, 0x98, 0x38, 0x1e, 0x63, 0x8f, 0x17, 0x71,
	0xe3, 0x08, 0x12, 0x07, 0x3e, 0x06, 0xdf, 0x80, 0x2b, 0x47, 0x8e, 0xe5, 0xb6, 0x47, 0x9a, 0x5e,
	0x10, 0xa7, 0xfd, 0x08, 0xc8, 0x33, 0x76, 0xfc, 0xb7, 0xe9, 0x1f, 0x8e, 0x7b, 0xcb, 0xcc, 0x3c,
	0xef, 0xcc, 0xfb, 0x3e, 0xef, 0xe3, 0x67, 0x46, 0x01, 0xf0, 0x3d, 0xe2, 0xb6, 0x1d, 0x97, 0x32,
	0x8a, 0x1a, 0x63, 0x6c, 0x63, 0xcd, 0x24, 0x6d, 0x8d, 0x6a, 0x2d, 0x20, 0xb6, 0x3f, 0x16, 0x0b,
	0xad, 0x8d, 0x01, 0xa5, 0x03, 0x8b, 0xec, 0xf0, 0x91, 0xe6, 0xf7, 0x77, 0x98, 0x39, 0x26, 0x1e,
	0xc3, 0x63, 0x27, 0x04, 0x6c, 0x0f, 0x4c, 0x36, 0xf4, 0xb5, 0xb6, 0x4e, 0xc7, 0x3b, 0x03, 0x3a,
	0xa0, 0x31, 0x32, 0x18, 0xf1, 0x01, 0xff, 0x25, 0xe0, 0xca, 0x4f, 0x12, 0xdc, 0x3b, 0x71, 0x0c,
	0xcc, 0xc8, 0x89, 0x47, 0xdc, 0x4f, 0xc8, 0x0b, 0x53, 0x27, 0xc7, 0x74, 0x44, 0x6c, 0x95, 0x7c,
	0xeb, 0x13, 0x8f, 0xa1, 0x55, 0x58, 0x08, 0xf2, 0xea, 0x99, 0x46, 0x53, 0xda, 0x94, 0xb6, 0xea,
	0x6a, 0x35, 0x18, 0x1e, 0x1a, 0xe8, 0x3e, 0x2c, 0x1a, 0x1c, 0xde, 0x63, 0x01, 0xbe, 0x59, 0xe6,
	0xab, 0x0d, 0x23, 0xde, 0x02, 0x6d, 0x03, 0xc2, 0x96, 0x45, 0xbf, 0xeb, 0xd9, 0x94, 0x99, 0x7d,
	0x53, 0xc7, 0xcc, 0xa4, 0x76, 0xb3, 0xb2, 0x29, 0x6d, 0xd5, 0xd4, 0xdb, 0x7c, 0xe5, 0x28, 0xb1,
	0xa0, 0x7c, 0x0c, 0xeb, 0x17, 0xa4, 0xe2, 0x39, 0xd4, 0xf6, 0x08, 0x92, 0x01, 0x3c, 0x5f, 0xd7,
	0x89, 0xe7, 0xf5, 0x7d, 0x8b, 0xa7, 0x53, 0x53, 0x13, 0x33, 0xca, 0x3f, 0x65, 0x68, 0x04, 0xb1,
	0xcf, 0x5d, 0xda, 0x37, 0x2d, 0x82, 0x96, 0xa0, 0x3c, 0x4d, 0xbb, 0x6c, 0x1a, 0x08, 0xc1, 0x9c,
	0x8d, 0xc7, 0x24, 0x4c, 0x95, 0xff, 0x46, 0x6d, 0x58, 0xd0, 0xa9, 0x6f, 0x33, 0xf7, 0x7b, 0x9e,
	0xd8, 0x52, 0x67, 0xb9, 0x9d, 0xe0, 0xbe, 0x7d, 0x20, 0xd6, 0xd4, 0x08, 0x14, 0x94, 0xed, 0x0c,
	0xa9, 0x4d, 0x7a, 0xb6, 0x3f, 0xd6, 0x88, 0xdb, 0x9c, 0x13, 0x65, 0xf3, 0xb9, 0x23, 0x3e, 0x85,
	0x96, 0x61, 0x9e, 0x8c, 0xb1, 0x69, 0x35, 0xe7, 0xf9, 0x9a, 0x18, 0xa0, 0x15, 0xa8, 0xe2, 0x17,
	0x98, 0x61, 0xb7, 0x59, 0x15, 0x3c, 0x8a, 0x51, 0x8e, 0xc7, 0x85, 0x3c, 0x8f, 0xeb, 0x42, 0x1b,
	0xbd, 0x81, 0x4b, 0x7d, 0xa7, 0x59, 0xe3, 0x80, 0x7a, 0x30, 0xf3, 0x2c, 0x98, 0x40, 0x4f, 0x00,
	0x74, 0x97, 0x60, 0x46, 0x8c, 0x1e, 0x66, 0xcd, 0xfa, 0xa6, 0xb4, 0xd5, 0xe8, 0xb4, 0xda, 0x42,
	0x28, 0xed, 0xa8, 0xfd, 0xed, 0xe3, 0x48, 0x28, 0x6a, 0x3d, 0x44, 0xef, 0xb1, 0x20, 0xd4, 0xe7,
	0x94, 0xf3, 0x50, 0xb8, 0x3c, 0x34, 0x44, 0xef, 0x31, 0xe5, 0xb4, 0x02, 0x8b, 0xc7, 0x3e, 0xa3,
	0xaf, 0x1b, 0xdb, 0xef, 0x41, 0xdd, 0x1b, 0x99, 0x96, 0xd5, 0xf3, 0x48, 0x40, 0x76, 0x25, 0x57,
	0x44, 0xd7, 0xd7, 0xbe, 0x21, 0x3a, 0x53, 0x6b, 0x1c, 0xd6, 0x25, 0x0c, 0xbd, 0x0b, 0x55, 0x8f,
	0x61, 0xe6, 0x7b, 0x9c, 0xe1, 0xa5, 0x4e, 0x33, 0x85, 0xe7, 0x24, 0x76, 0xf9, 0xba, 0x1a, 0xe2,
	0x32, 0x2d, 0x6d, 0xdc, 0xbc, 0xa5, 0x8b, 0xd7, 0x69, 0xe9, 0xe7, 0xb0, 0xfa, 0x8c, 0xb0, 0x03,
	0x8a, 0xf5, 0x61, 0xd8, 0xd4, 0xe9, 0xa7, 0xd7, 0x81, 0x05, 0x47, 0x4c, 0xf1, 0x0e, 0x37, 0x32,
	0x35, 0x24, 0xbe, 0x3a, 0x35, 0x02, 0x2a, 0x8f, 0x61, 0x25, 0xb7, 0x9d, 0x30, 0x95, 0x75, 0x80,
	0x10, 0x14, 0xfb, 0x4a, 0x3d, 0x9c, 0x39, 0x34, 0x94, 0x23, 0x68, 0xc6, 0x46, 0x90, 0x09, 0xbd,
	0x49, 0x22, 0x4f, 0x61, 0xad, 0x60, 0xbf, 0x2b, 0x9a, 0xca, 0x67, 0x51, 0x32, 0xc9, 0x3e, 0x85,
	0xc9, 0xc4, 0x8d, 0x95, 0xae, 0xd6, 0x58, 0xe5, 0x6e, 0x94, 0x4a, 0x6a, 0x37, 0x91, 0x8a, 0x22,
	0xc3, 0xbd, 0x80, 0x30, 0xdf, 0x75, 0x89, 0xcd, 0xf2, 0xb5, 0x2b, 0x5d, 0x58, 0xbf, 0x60, 0xfd,
	0x3f, 0x74, 0xe9, 0x09, 0xef, 0x52, 0xf2, 0x4b, 0x8e, 0xaa, 0xdb, 0x80, 0x46, 0xdc, 0xa5, 0xa0,
	0xc4, 0xca, 0x56, 0x5d, 0x85, 0x69, 0x9b, 0x3c, 0xe5, 0x39, 0xd7, 0x4b, 0x3a, 0x34, 0xcc, 0xe4,
	0x03, 0xa8, 0x85, 0x40, 0x11, 0xd8, 0xe8, 0xac, 0xe5, 0xb9, 0x89, 0x82, 0xa6, 0x50, 0x65, 0x15,
	0xee, 0x1c, 0x58, 0xd8, 0x1c, 0x7b, 0x41, 0xaa, 0x7b, 0x3e, 0x1b, 0x46, 0xa5, 0x7f, 0x08, 0x2b,
	0xd9, 0x85, 0x2b, 0xf6, 0xef, 0xa3, 0x9c, 0xa8, 0xbd, 0x6b, 0x14, 0xd8, 0xcc, 0xc7, 0x86, 0xe7,
	0xbe, 0x9f, 0xab, 0xf0, 0x62, 0xb2, 0xe3, 0x02, 0x7f, 0xae, 0xc0, 0xd2, 0x31, 0xc1, 0xfa, 0xf0,
	0xb5, 0xbb, 0xa5, 0xd6, 0x01, 0x3c, 0x7d, 0x48, 0xa9, 0xc5, 0xb9, 0x0e, 0x8c, 0x73, 0x5e, 0xad,
	0x8b, 0x99, 0x43, 0x23, 0xeb, 0x78, 0x70, 0x73, 0xc7, 0x6b, 0x5c, 0xc7, 0xf1, 0xb6, 0x61, 0x2d,
	0x50, 0x70, 0xaa, 0x21, 0x53, 0x79, 0xdc, 0x82, 0x4a, 0x2c, 0x8b, 0xe0, 0xa7, 0x72, 0x02, 0xad,
	0x22, 0x78, 0xa8, 0x88, 0xc7, 0x39, 0x45, 0xdc, 0x4d, 0x6b, 0x3e, 0x15, 0x97, 0x10, 0xc5, 0x6f,
	0x12, 0x2c, 0xee, 0x63, 0xcf, 0xd4, 0x23, 0x49, 0x5c, 0xf8, 0xe8, 0x2a, 0xd2, 0x46, 0xdc, 0xb2,
	0x4a, 0xaa, 0x65, 0xe9, 0x7e, 0xcc, 0x65, 0xfb, 0xb1, 0x01, 0x8d, 0x3e, 0xd6, 0x89, 0x46, 0xe9,
	0x28, 0x38, 0x47, 0xa8, 0x00, 0xa2, 0xa9, 0x43, 0x03, 0x29, 0xf0, 0x3f, 0xec, 0x38, 0x16, 0xe9,
	0x45, 0xa9, 0x08, 0x45, 0x34, 0xf8, 0xe4, 0x09, 0xcf, 0x47, 0xd9, 0xe5, 0xe6, 0x91, 0xcc, 0x3d,
	0x22, 0x6f, 0x0d, 0x6a, 0x61, 0x5c, 0xc4, 0xe0, 0x82, 0xa8, 0x21, 0xb2, 0x8d, 0x74, 0xd0, 0x15,
	0x6d, 0x23, 0x15, 0x14, 0x13, 0xf8, 0x05, 0xbc, 0x71, 0x30, 0x24, 0xfa, 0x28, 0x93, 0xc3, 0x4a,
	0x24, 0x71, 0x4e, 0xe2, 0xa7, 0xa5, 0x58, 0xe4, 0xf3, 0xfc, 0x4b, 0x10, 0x34, 0x06, 0xf3, 0x7c,
	0xb8, 0x5f, 0x83, 0x6a, 0xdf, 0xb4, 0x18, 0x71, 0x15, 0x0c, 0xcb, 0xe9, 0x0d, 0xc3, 0xfc, 0x96,
	0x61, 0xbe, 0x4f, 0x7d, 0xdb, 0x08, 0x7d, 0x46, 0x0c, 0xd0, 0x6e, 0x6c, 0xbb, 0x65, 0xae, 0xbe,
	0x19, 0x49, 0x47, 0xc8, 0xce, 0x9f, 0x35, 0xf1, 0x58, 0xed, 0x12, 0x37, 0xf8, 0x86, 0x90, 0x0d,
	0x77, 0x0a, 0x5f, 0xbf, 0xe8, 0xed, 0xb4, 0xad, 0xcc, 0x78, 0xac, 0xb7, 0xde, 0xb9, 0x0a, 0x34,
	0x2c, 0x05, 0xc3, 0xff, 0x33, 0xde, 0x86, 0x1e, 0xa4, 0xc2, 0x8b, 0xef, 0xee, 0xd6, 0x9b, 0xb3,
	0x41, 0xe1, 0x55, 0x56, 0xf9, 0xb1, 0x2c, 0x21, 0x03, 0x6e, 0x65, 0xed, 0x13, 0xcd, 0x0c, 0x8f,
	0x3e, 0xbd, 0xd6, 0xc3, 0x4b, 0x50, 0xc9, 0x53, 0x34, 0xb8, 0x9d, 0xbb, 0xdd, 0xd1, 0xc3, 0x0b,
	0x98, 0xc8, 0x14, 0xf3, 0xe8, 0x32, 0x58, 0x48, 0xd6, 0xf4, 0x8c, 0xc4, 0xb5, 0x5d, 0x78, 0x46,
	0xfe, 0x91, 0x50, 0x78, 0x46, 0xc1, 0xed, 0x1f, 0x08, 0xa0, 0xf0, 0x76, 0xcf, 0x08, 0x60, 0xd6,
	0x0b, 0x21, 0x23, 0x80, 0xd9, 0x8f, 0x85, 0xaf, 0xb9, 0x00, 0x52, 0x4f, 0xf8, 0x9c, 0x00, 0x0a,
	0x9e, 0x05, 0x79, 0x01, 0x14, 0x3e, 0x00, 0xbe, 0x84, 0xa5, 0xf4, 0x85, 0x8d, 0x94, 0xf4, 0x95,
	0x55, 0x74, 0xcd, 0xb7, 0x1e, 0xcc, 0xc4, 0x84, 0x5b, 0x13, 0x40, 0x79, 0x17, 0x46, 0x8f, 0x72,
	0x69, 0x15, 0xba, 0x7a, 0xeb, 0xad, 0x4b, 0x71, 0x29, 0x7e, 0x52, 0xbe, 0x9c, 0xe3, 0xa7, 0xc0,
	0xf9, 0xf2, 0xfc, 0x14, 0x3a, 0x5d, 0x17, 0x16, 0x93, 0x0e, 0x83, 0x36, 0xd3, 0x95, 0xe7, 0xdd,
	0xac, 0x75, 0x7f, 0x06, 0x42, 0x6c, 0xba, 0x6f, 0x9d, 0x9e, 0xc9, 0xa5, 0x97, 0x67, 0x72, 0xe9,
	0xd5, 0x99, 0x2c, 0xfd, 0x30, 0x91, 0xa5, 0x5f, 0x27, 0xb2, 0xf4, 0xc7, 0x44, 0x96, 0x4e, 0x27,
	0xb2, 0xf4, 0xd7, 0x44, 0x96, 0xfe, 0x9e, 0xc8, 0xa5, 0x57, 0x13, 0x59, 0xfa, 0xe5, 0x5c, 0x2e,
	0xfd, 0x7e, 0x2e, 0x4b, 0xa7, 0xe7, 0x72, 0xe9, 0xe5, 0xb9, 0x5c, 0xfa, 0xaa, 0x93, 0xf8, 0xdb,
	0x20, 0x3c, 0x66, 0x3b, 0xf8, 0xad, 0x61, 0x7d, 0x44, 0x6c, 0x63, 0xc7, 0x19, 0x0d, 0x76, 0x06,
	0xc4, 0x16, 0xff, 0x1f, 0x68, 0x54, 0x7b, 0xea, 0x68, 0x5a, 0x95, 0x8f, 0x76, 0xff, 0x0d, 0x00,
	0x00, 0xff, 0xff, 0x69, 0x3d, 0x9d, 0xd5, 0xb9, 0x10, 0x00, 0x00,
}

func (this *UpdateUserDeviceTokenRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserDeviceTokenRequest)
	if !ok {
		that2, ok := that.(UpdateUserDeviceTokenRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.DeviceToken != that1.DeviceToken {
		return false
	}
	if this.AllowNotification != that1.AllowNotification {
		return false
	}
	return true
}
func (this *UpdateUserDeviceTokenResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserDeviceTokenResponse)
	if !ok {
		that2, ok := that.(UpdateUserDeviceTokenResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Successful != that1.Successful {
		return false
	}
	return true
}
func (this *UserProfile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserProfile)
	if !ok {
		that2, ok := that.(UserProfile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Avatar != that1.Avatar {
		return false
	}
	if this.DeviceToken != that1.DeviceToken {
		return false
	}
	if this.UserGroup != that1.UserGroup {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	return true
}
func (this *TutorProfile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TutorProfile)
	if !ok {
		that2, ok := that.(TutorProfile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Avatar != that1.Avatar {
		return false
	}
	if this.DeviceToken != that1.DeviceToken {
		return false
	}
	if this.UserGroup != that1.UserGroup {
		return false
	}
	if len(this.SkillSet) != len(that1.SkillSet) {
		return false
	}
	for i := range this.SkillSet {
		if this.SkillSet[i] != that1.SkillSet[i] {
			return false
		}
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	return true
}
func (this *GetCoachProfileResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetCoachProfileResponse)
	if !ok {
		that2, ok := that.(GetCoachProfileResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Profile.Equal(that1.Profile) {
		return false
	}
	return true
}
func (this *GetCoachProfileRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetCoachProfileRequest)
	if !ok {
		that2, ok := that.(GetCoachProfileRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ProfileId != that1.ProfileId {
		return false
	}
	return true
}
func (this *UpdateUserProfileRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserProfileRequest)
	if !ok {
		that2, ok := that.(UpdateUserProfileRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Profile.Equal(that1.Profile) {
		return false
	}
	return true
}
func (this *UpdateUserProfileResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateUserProfileResponse)
	if !ok {
		that2, ok := that.(UpdateUserProfileResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Successful != that1.Successful {
		return false
	}
	return true
}
func (this *UpdateTutorStatusRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateTutorStatusRequest)
	if !ok {
		that2, ok := that.(UpdateTutorStatusRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *UpdateTutorStatusResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateTutorStatusResponse)
	if !ok {
		that2, ok := that.(UpdateTutorStatusResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetCurrentUserProfileRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetCurrentUserProfileRequest)
	if !ok {
		that2, ok := that.(GetCurrentUserProfileRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetCurrentUserProfileResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetCurrentUserProfileResponse)
	if !ok {
		that2, ok := that.(GetCurrentUserProfileResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Profile.Equal(that1.Profile) {
		return false
	}
	return true
}
func (this *GetTutorProfileRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetTutorProfileRequest)
	if !ok {
		that2, ok := that.(GetTutorProfileRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ProfileIds) != len(that1.ProfileIds) {
		return false
	}
	for i := range this.ProfileIds {
		if this.ProfileIds[i] != that1.ProfileIds[i] {
			return false
		}
	}
	return true
}
func (this *GetTutorProfileResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetTutorProfileResponse)
	if !ok {
		that2, ok := that.(GetTutorProfileResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Profiles) != len(that1.Profiles) {
		return false
	}
	for i := range this.Profiles {
		if !this.Profiles[i].Equal(that1.Profiles[i]) {
			return false
		}
	}
	return true
}
func (this *ClaimsUserAuthRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClaimsUserAuthRequest)
	if !ok {
		that2, ok := that.(ClaimsUserAuthRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ClaimsUserAuthResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClaimsUserAuthResponse)
	if !ok {
		that2, ok := that.(ClaimsUserAuthResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Successful != that1.Successful {
		return false
	}
	return true
}
func (this *GetCoachProfilesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetCoachProfilesRequest)
	if !ok {
		that2, ok := that.(GetCoachProfilesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ProfileIds) != len(that1.ProfileIds) {
		return false
	}
	for i := range this.ProfileIds {
		if this.ProfileIds[i] != that1.ProfileIds[i] {
			return false
		}
	}
	return true
}
func (this *GetCoachProfilesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetCoachProfilesResponse)
	if !ok {
		that2, ok := that.(GetCoachProfilesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Profiles) != len(that1.Profiles) {
		return false
	}
	for i := range this.Profiles {
		if !this.Profiles[i].Equal(that1.Profiles[i]) {
			return false
		}
	}
	return true
}
func (this *TeacherProfile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TeacherProfile)
	if !ok {
		that2, ok := that.(TeacherProfile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Avatar != that1.Avatar {
		return false
	}
	if this.DeviceToken != that1.DeviceToken {
		return false
	}
	if this.UserGroup != that1.UserGroup {
		return false
	}
	if len(this.SchoolIds) != len(that1.SchoolIds) {
		return false
	}
	for i := range this.SchoolIds {
		if this.SchoolIds[i] != that1.SchoolIds[i] {
			return false
		}
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	return true
}
func (this *GetTeacherProfilesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetTeacherProfilesRequest)
	if !ok {
		that2, ok := that.(GetTeacherProfilesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Ids) != len(that1.Ids) {
		return false
	}
	for i := range this.Ids {
		if this.Ids[i] != that1.Ids[i] {
			return false
		}
	}
	return true
}
func (this *GetTeacherProfilesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetTeacherProfilesResponse)
	if !ok {
		that2, ok := that.(GetTeacherProfilesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Profiles) != len(that1.Profiles) {
		return false
	}
	for i := range this.Profiles {
		if !this.Profiles[i].Equal(that1.Profiles[i]) {
			return false
		}
	}
	return true
}
func (this *BasicProfile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BasicProfile)
	if !ok {
		that2, ok := that.(BasicProfile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Avatar != that1.Avatar {
		return false
	}
	if this.UserGroup != that1.UserGroup {
		return false
	}
	if this.FacebookId != that1.FacebookId {
		return false
	}
	if this.AppleUserId != that1.AppleUserId {
		return false
	}
	return true
}
func (this *GetBasicProfileRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetBasicProfileRequest)
	if !ok {
		that2, ok := that.(GetBasicProfileRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.UserIds) != len(that1.UserIds) {
		return false
	}
	for i := range this.UserIds {
		if this.UserIds[i] != that1.UserIds[i] {
			return false
		}
	}
	return true
}
func (this *GetBasicProfileResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetBasicProfileResponse)
	if !ok {
		that2, ok := that.(GetBasicProfileResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Profiles) != len(that1.Profiles) {
		return false
	}
	for i := range this.Profiles {
		if !this.Profiles[i].Equal(that1.Profiles[i]) {
			return false
		}
	}
	return true
}
func (this *CheckProfileRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CheckProfileRequest)
	if !ok {
		that2, ok := that.(CheckProfileRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Filter == nil {
		if this.Filter != nil {
			return false
		}
	} else if this.Filter == nil {
		return false
	} else if !this.Filter.Equal(that1.Filter) {
		return false
	}
	return true
}
func (this *CheckProfileRequest_Email) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CheckProfileRequest_Email)
	if !ok {
		that2, ok := that.(CheckProfileRequest_Email)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	return true
}
func (this *CheckProfileRequest_Phone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CheckProfileRequest_Phone)
	if !ok {
		that2, ok := that.(CheckProfileRequest_Phone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	return true
}
func (this *CheckProfileResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CheckProfileResponse)
	if !ok {
		that2, ok := that.(CheckProfileResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Found != that1.Found {
		return false
	}
	if !this.Profile.Equal(that1.Profile) {
		return false
	}
	return true
}
func (this *UpdateUserDeviceTokenRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.UpdateUserDeviceTokenRequest{")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "DeviceToken: "+fmt.Sprintf("%#v", this.DeviceToken)+",\n")
	s = append(s, "AllowNotification: "+fmt.Sprintf("%#v", this.AllowNotification)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserDeviceTokenResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpdateUserDeviceTokenResponse{")
	s = append(s, "Successful: "+fmt.Sprintf("%#v", this.Successful)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UserProfile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&pb.UserProfile{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "PhoneNumber: "+fmt.Sprintf("%#v", this.PhoneNumber)+",\n")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "Avatar: "+fmt.Sprintf("%#v", this.Avatar)+",\n")
	s = append(s, "DeviceToken: "+fmt.Sprintf("%#v", this.DeviceToken)+",\n")
	s = append(s, "UserGroup: "+fmt.Sprintf("%#v", this.UserGroup)+",\n")
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TutorProfile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&pb.TutorProfile{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "PhoneNumber: "+fmt.Sprintf("%#v", this.PhoneNumber)+",\n")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "Avatar: "+fmt.Sprintf("%#v", this.Avatar)+",\n")
	s = append(s, "DeviceToken: "+fmt.Sprintf("%#v", this.DeviceToken)+",\n")
	s = append(s, "UserGroup: "+fmt.Sprintf("%#v", this.UserGroup)+",\n")
	s = append(s, "SkillSet: "+fmt.Sprintf("%#v", this.SkillSet)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetCoachProfileResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetCoachProfileResponse{")
	if this.Profile != nil {
		s = append(s, "Profile: "+fmt.Sprintf("%#v", this.Profile)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetCoachProfileRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetCoachProfileRequest{")
	s = append(s, "ProfileId: "+fmt.Sprintf("%#v", this.ProfileId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserProfileRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpdateUserProfileRequest{")
	if this.Profile != nil {
		s = append(s, "Profile: "+fmt.Sprintf("%#v", this.Profile)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateUserProfileResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpdateUserProfileResponse{")
	s = append(s, "Successful: "+fmt.Sprintf("%#v", this.Successful)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateTutorStatusRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpdateTutorStatusRequest{")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateTutorStatusResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.UpdateTutorStatusResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetCurrentUserProfileRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.GetCurrentUserProfileRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetCurrentUserProfileResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetCurrentUserProfileResponse{")
	if this.Profile != nil {
		s = append(s, "Profile: "+fmt.Sprintf("%#v", this.Profile)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetTutorProfileRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetTutorProfileRequest{")
	s = append(s, "ProfileIds: "+fmt.Sprintf("%#v", this.ProfileIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetTutorProfileResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetTutorProfileResponse{")
	if this.Profiles != nil {
		s = append(s, "Profiles: "+fmt.Sprintf("%#v", this.Profiles)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClaimsUserAuthRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.ClaimsUserAuthRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClaimsUserAuthResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ClaimsUserAuthResponse{")
	s = append(s, "Successful: "+fmt.Sprintf("%#v", this.Successful)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetCoachProfilesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetCoachProfilesRequest{")
	s = append(s, "ProfileIds: "+fmt.Sprintf("%#v", this.ProfileIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetCoachProfilesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetCoachProfilesResponse{")
	if this.Profiles != nil {
		s = append(s, "Profiles: "+fmt.Sprintf("%#v", this.Profiles)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TeacherProfile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&pb.TeacherProfile{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "PhoneNumber: "+fmt.Sprintf("%#v", this.PhoneNumber)+",\n")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "Avatar: "+fmt.Sprintf("%#v", this.Avatar)+",\n")
	s = append(s, "DeviceToken: "+fmt.Sprintf("%#v", this.DeviceToken)+",\n")
	s = append(s, "UserGroup: "+fmt.Sprintf("%#v", this.UserGroup)+",\n")
	s = append(s, "SchoolIds: "+fmt.Sprintf("%#v", this.SchoolIds)+",\n")
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetTeacherProfilesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetTeacherProfilesRequest{")
	s = append(s, "Ids: "+fmt.Sprintf("%#v", this.Ids)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetTeacherProfilesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetTeacherProfilesResponse{")
	if this.Profiles != nil {
		s = append(s, "Profiles: "+fmt.Sprintf("%#v", this.Profiles)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BasicProfile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.BasicProfile{")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Avatar: "+fmt.Sprintf("%#v", this.Avatar)+",\n")
	s = append(s, "UserGroup: "+fmt.Sprintf("%#v", this.UserGroup)+",\n")
	s = append(s, "FacebookId: "+fmt.Sprintf("%#v", this.FacebookId)+",\n")
	s = append(s, "AppleUserId: "+fmt.Sprintf("%#v", this.AppleUserId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetBasicProfileRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetBasicProfileRequest{")
	s = append(s, "UserIds: "+fmt.Sprintf("%#v", this.UserIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetBasicProfileResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetBasicProfileResponse{")
	if this.Profiles != nil {
		s = append(s, "Profiles: "+fmt.Sprintf("%#v", this.Profiles)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CheckProfileRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CheckProfileRequest{")
	if this.Filter != nil {
		s = append(s, "Filter: "+fmt.Sprintf("%#v", this.Filter)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CheckProfileRequest_Email) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.CheckProfileRequest_Email{` +
		`Email:` + fmt.Sprintf("%#v", this.Email) + `}`}, ", ")
	return s
}
func (this *CheckProfileRequest_Phone) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.CheckProfileRequest_Phone{` +
		`Phone:` + fmt.Sprintf("%#v", this.Phone) + `}`}, ", ")
	return s
}
func (this *CheckProfileResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CheckProfileResponse{")
	s = append(s, "Found: "+fmt.Sprintf("%#v", this.Found)+",\n")
	if this.Profile != nil {
		s = append(s, "Profile: "+fmt.Sprintf("%#v", this.Profile)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringUser(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	UpdateUserDeviceToken(ctx context.Context, in *UpdateUserDeviceTokenRequest, opts ...grpc.CallOption) (*UpdateUserDeviceTokenResponse, error)
	GetCoachProfile(ctx context.Context, in *GetCoachProfileRequest, opts ...grpc.CallOption) (*GetCoachProfileResponse, error)
	GetCoachProfiles(ctx context.Context, in *GetCoachProfilesRequest, opts ...grpc.CallOption) (*GetCoachProfilesResponse, error)
	UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error)
	UpdateTutorStatus(ctx context.Context, in *UpdateTutorStatusRequest, opts ...grpc.CallOption) (*UpdateTutorStatusResponse, error)
	GetCurrentUserProfile(ctx context.Context, in *GetCurrentUserProfileRequest, opts ...grpc.CallOption) (*GetCurrentUserProfileResponse, error)
	GetTutorProfile(ctx context.Context, in *GetTutorProfileRequest, opts ...grpc.CallOption) (*GetTutorProfileResponse, error)
	ClaimsUserAuth(ctx context.Context, in *ClaimsUserAuthRequest, opts ...grpc.CallOption) (*ClaimsUserAuthResponse, error)
	GetTeacherProfiles(ctx context.Context, in *GetTeacherProfilesRequest, opts ...grpc.CallOption) (*GetTeacherProfilesResponse, error)
	GetBasicProfile(ctx context.Context, in *GetBasicProfileRequest, opts ...grpc.CallOption) (*GetBasicProfileResponse, error)
	CheckProfile(ctx context.Context, in *CheckProfileRequest, opts ...grpc.CallOption) (*CheckProfileResponse, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) UpdateUserDeviceToken(ctx context.Context, in *UpdateUserDeviceTokenRequest, opts ...grpc.CallOption) (*UpdateUserDeviceTokenResponse, error) {
	out := new(UpdateUserDeviceTokenResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.UserService/UpdateUserDeviceToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *userServiceClient) GetCoachProfile(ctx context.Context, in *GetCoachProfileRequest, opts ...grpc.CallOption) (*GetCoachProfileResponse, error) {
	out := new(GetCoachProfileResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.UserService/GetCoachProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *userServiceClient) GetCoachProfiles(ctx context.Context, in *GetCoachProfilesRequest, opts ...grpc.CallOption) (*GetCoachProfilesResponse, error) {
	out := new(GetCoachProfilesResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.UserService/GetCoachProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error) {
	out := new(UpdateUserProfileResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.UserService/UpdateUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateTutorStatus(ctx context.Context, in *UpdateTutorStatusRequest, opts ...grpc.CallOption) (*UpdateTutorStatusResponse, error) {
	out := new(UpdateTutorStatusResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.UserService/UpdateTutorStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetCurrentUserProfile(ctx context.Context, in *GetCurrentUserProfileRequest, opts ...grpc.CallOption) (*GetCurrentUserProfileResponse, error) {
	out := new(GetCurrentUserProfileResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.UserService/GetCurrentUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetTutorProfile(ctx context.Context, in *GetTutorProfileRequest, opts ...grpc.CallOption) (*GetTutorProfileResponse, error) {
	out := new(GetTutorProfileResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.UserService/GetTutorProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ClaimsUserAuth(ctx context.Context, in *ClaimsUserAuthRequest, opts ...grpc.CallOption) (*ClaimsUserAuthResponse, error) {
	out := new(ClaimsUserAuthResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.UserService/ClaimsUserAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetTeacherProfiles(ctx context.Context, in *GetTeacherProfilesRequest, opts ...grpc.CallOption) (*GetTeacherProfilesResponse, error) {
	out := new(GetTeacherProfilesResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.UserService/GetTeacherProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetBasicProfile(ctx context.Context, in *GetBasicProfileRequest, opts ...grpc.CallOption) (*GetBasicProfileResponse, error) {
	out := new(GetBasicProfileResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.UserService/GetBasicProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CheckProfile(ctx context.Context, in *CheckProfileRequest, opts ...grpc.CallOption) (*CheckProfileResponse, error) {
	out := new(CheckProfileResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.UserService/CheckProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	UpdateUserDeviceToken(context.Context, *UpdateUserDeviceTokenRequest) (*UpdateUserDeviceTokenResponse, error)
	GetCoachProfile(context.Context, *GetCoachProfileRequest) (*GetCoachProfileResponse, error)
	GetCoachProfiles(context.Context, *GetCoachProfilesRequest) (*GetCoachProfilesResponse, error)
	UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error)
	UpdateTutorStatus(context.Context, *UpdateTutorStatusRequest) (*UpdateTutorStatusResponse, error)
	GetCurrentUserProfile(context.Context, *GetCurrentUserProfileRequest) (*GetCurrentUserProfileResponse, error)
	GetTutorProfile(context.Context, *GetTutorProfileRequest) (*GetTutorProfileResponse, error)
	ClaimsUserAuth(context.Context, *ClaimsUserAuthRequest) (*ClaimsUserAuthResponse, error)
	GetTeacherProfiles(context.Context, *GetTeacherProfilesRequest) (*GetTeacherProfilesResponse, error)
	GetBasicProfile(context.Context, *GetBasicProfileRequest) (*GetBasicProfileResponse, error)
	CheckProfile(context.Context, *CheckProfileRequest) (*CheckProfileResponse, error)
}

// UnimplementedUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (*UnimplementedUserServiceServer) UpdateUserDeviceToken(ctx context.Context, req *UpdateUserDeviceTokenRequest) (*UpdateUserDeviceTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserDeviceToken not implemented")
}
func (*UnimplementedUserServiceServer) GetCoachProfile(ctx context.Context, req *GetCoachProfileRequest) (*GetCoachProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoachProfile not implemented")
}
func (*UnimplementedUserServiceServer) GetCoachProfiles(ctx context.Context, req *GetCoachProfilesRequest) (*GetCoachProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoachProfiles not implemented")
}
func (*UnimplementedUserServiceServer) UpdateUserProfile(ctx context.Context, req *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (*UnimplementedUserServiceServer) UpdateTutorStatus(ctx context.Context, req *UpdateTutorStatusRequest) (*UpdateTutorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTutorStatus not implemented")
}
func (*UnimplementedUserServiceServer) GetCurrentUserProfile(ctx context.Context, req *GetCurrentUserProfileRequest) (*GetCurrentUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentUserProfile not implemented")
}
func (*UnimplementedUserServiceServer) GetTutorProfile(ctx context.Context, req *GetTutorProfileRequest) (*GetTutorProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTutorProfile not implemented")
}
func (*UnimplementedUserServiceServer) ClaimsUserAuth(ctx context.Context, req *ClaimsUserAuthRequest) (*ClaimsUserAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimsUserAuth not implemented")
}
func (*UnimplementedUserServiceServer) GetTeacherProfiles(ctx context.Context, req *GetTeacherProfilesRequest) (*GetTeacherProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeacherProfiles not implemented")
}
func (*UnimplementedUserServiceServer) GetBasicProfile(ctx context.Context, req *GetBasicProfileRequest) (*GetBasicProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasicProfile not implemented")
}
func (*UnimplementedUserServiceServer) CheckProfile(ctx context.Context, req *CheckProfileRequest) (*CheckProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckProfile not implemented")
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_UpdateUserDeviceToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserDeviceTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserDeviceToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.UserService/UpdateUserDeviceToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserDeviceToken(ctx, req.(*UpdateUserDeviceTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetCoachProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoachProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetCoachProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.UserService/GetCoachProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetCoachProfile(ctx, req.(*GetCoachProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetCoachProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoachProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetCoachProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.UserService/GetCoachProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetCoachProfiles(ctx, req.(*GetCoachProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.UserService/UpdateUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserProfile(ctx, req.(*UpdateUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateTutorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTutorStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateTutorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.UserService/UpdateTutorStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateTutorStatus(ctx, req.(*UpdateTutorStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetCurrentUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetCurrentUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.UserService/GetCurrentUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetCurrentUserProfile(ctx, req.(*GetCurrentUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetTutorProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTutorProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetTutorProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.UserService/GetTutorProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetTutorProfile(ctx, req.(*GetTutorProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ClaimsUserAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimsUserAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ClaimsUserAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.UserService/ClaimsUserAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ClaimsUserAuth(ctx, req.(*ClaimsUserAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetTeacherProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeacherProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetTeacherProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.UserService/GetTeacherProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetTeacherProfiles(ctx, req.(*GetTeacherProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetBasicProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBasicProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetBasicProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.UserService/GetBasicProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetBasicProfile(ctx, req.(*GetBasicProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CheckProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CheckProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.UserService/CheckProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CheckProfile(ctx, req.(*CheckProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "manabie.bob.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUserDeviceToken",
			Handler:    _UserService_UpdateUserDeviceToken_Handler,
		},
		{
			MethodName: "GetCoachProfile",
			Handler:    _UserService_GetCoachProfile_Handler,
		},
		{
			MethodName: "GetCoachProfiles",
			Handler:    _UserService_GetCoachProfiles_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _UserService_UpdateUserProfile_Handler,
		},
		{
			MethodName: "UpdateTutorStatus",
			Handler:    _UserService_UpdateTutorStatus_Handler,
		},
		{
			MethodName: "GetCurrentUserProfile",
			Handler:    _UserService_GetCurrentUserProfile_Handler,
		},
		{
			MethodName: "GetTutorProfile",
			Handler:    _UserService_GetTutorProfile_Handler,
		},
		{
			MethodName: "ClaimsUserAuth",
			Handler:    _UserService_ClaimsUserAuth_Handler,
		},
		{
			MethodName: "GetTeacherProfiles",
			Handler:    _UserService_GetTeacherProfiles_Handler,
		},
		{
			MethodName: "GetBasicProfile",
			Handler:    _UserService_GetBasicProfile_Handler,
		},
		{
			MethodName: "CheckProfile",
			Handler:    _UserService_CheckProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

func (m *UpdateUserDeviceTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserDeviceTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserDeviceTokenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllowNotification {
		i--
		if m.AllowNotification {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.DeviceToken) > 0 {
		i -= len(m.DeviceToken)
		copy(dAtA[i:], m.DeviceToken)
		i = encodeVarintUser(dAtA, i, uint64(len(m.DeviceToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserDeviceTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserDeviceTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserDeviceTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Successful {
		i--
		if m.Successful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.UserGroup) > 0 {
		i -= len(m.UserGroup)
		copy(dAtA[i:], m.UserGroup)
		i = encodeVarintUser(dAtA, i, uint64(len(m.UserGroup)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DeviceToken) > 0 {
		i -= len(m.DeviceToken)
		copy(dAtA[i:], m.DeviceToken)
		i = encodeVarintUser(dAtA, i, uint64(len(m.DeviceToken)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintUser(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x22
	}
	if m.Country != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TutorProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TutorProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TutorProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Status != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x50
	}
	if len(m.SkillSet) > 0 {
		dAtA6 := make([]byte, len(m.SkillSet)*10)
		var j5 int
		for _, num := range m.SkillSet {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintUser(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.UserGroup) > 0 {
		i -= len(m.UserGroup)
		copy(dAtA[i:], m.UserGroup)
		i = encodeVarintUser(dAtA, i, uint64(len(m.UserGroup)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DeviceToken) > 0 {
		i -= len(m.DeviceToken)
		copy(dAtA[i:], m.DeviceToken)
		i = encodeVarintUser(dAtA, i, uint64(len(m.DeviceToken)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintUser(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x22
	}
	if m.Country != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCoachProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCoachProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCoachProfileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Profile != nil {
		{
			size, err := m.Profile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCoachProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCoachProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCoachProfileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProfileId) > 0 {
		i -= len(m.ProfileId)
		copy(dAtA[i:], m.ProfileId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.ProfileId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserProfileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Profile != nil {
		{
			size, err := m.Profile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateUserProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateUserProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateUserProfileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Successful {
		i--
		if m.Successful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateTutorStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTutorStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTutorStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateTutorStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTutorStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTutorStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetCurrentUserProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCurrentUserProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCurrentUserProfileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetCurrentUserProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCurrentUserProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCurrentUserProfileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Profile != nil {
		{
			size, err := m.Profile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTutorProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTutorProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTutorProfileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProfileIds) > 0 {
		for iNdEx := len(m.ProfileIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ProfileIds[iNdEx])
			copy(dAtA[i:], m.ProfileIds[iNdEx])
			i = encodeVarintUser(dAtA, i, uint64(len(m.ProfileIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetTutorProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTutorProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTutorProfileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Profiles) > 0 {
		for iNdEx := len(m.Profiles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Profiles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClaimsUserAuthRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimsUserAuthRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimsUserAuthRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ClaimsUserAuthResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimsUserAuthResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimsUserAuthResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Successful {
		i--
		if m.Successful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetCoachProfilesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCoachProfilesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCoachProfilesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProfileIds) > 0 {
		for iNdEx := len(m.ProfileIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ProfileIds[iNdEx])
			copy(dAtA[i:], m.ProfileIds[iNdEx])
			i = encodeVarintUser(dAtA, i, uint64(len(m.ProfileIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetCoachProfilesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCoachProfilesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCoachProfilesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Profiles) > 0 {
		for iNdEx := len(m.Profiles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Profiles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TeacherProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeacherProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeacherProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.SchoolIds) > 0 {
		dAtA13 := make([]byte, len(m.SchoolIds)*10)
		var j12 int
		for _, num1 := range m.SchoolIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		i -= j12
		copy(dAtA[i:], dAtA13[:j12])
		i = encodeVarintUser(dAtA, i, uint64(j12))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.UserGroup) > 0 {
		i -= len(m.UserGroup)
		copy(dAtA[i:], m.UserGroup)
		i = encodeVarintUser(dAtA, i, uint64(len(m.UserGroup)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DeviceToken) > 0 {
		i -= len(m.DeviceToken)
		copy(dAtA[i:], m.DeviceToken)
		i = encodeVarintUser(dAtA, i, uint64(len(m.DeviceToken)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintUser(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x22
	}
	if m.Country != 0 {
		i = encodeVarintUser(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetTeacherProfilesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTeacherProfilesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTeacherProfilesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for iNdEx := len(m.Ids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ids[iNdEx])
			copy(dAtA[i:], m.Ids[iNdEx])
			i = encodeVarintUser(dAtA, i, uint64(len(m.Ids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetTeacherProfilesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTeacherProfilesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTeacherProfilesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Profiles) > 0 {
		for iNdEx := len(m.Profiles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Profiles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BasicProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BasicProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BasicProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AppleUserId) > 0 {
		i -= len(m.AppleUserId)
		copy(dAtA[i:], m.AppleUserId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.AppleUserId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FacebookId) > 0 {
		i -= len(m.FacebookId)
		copy(dAtA[i:], m.FacebookId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.FacebookId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.UserGroup) > 0 {
		i -= len(m.UserGroup)
		copy(dAtA[i:], m.UserGroup)
		i = encodeVarintUser(dAtA, i, uint64(len(m.UserGroup)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintUser(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintUser(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetBasicProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBasicProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBasicProfileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		for iNdEx := len(m.UserIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UserIds[iNdEx])
			copy(dAtA[i:], m.UserIds[iNdEx])
			i = encodeVarintUser(dAtA, i, uint64(len(m.UserIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetBasicProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBasicProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBasicProfileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Profiles) > 0 {
		for iNdEx := len(m.Profiles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Profiles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUser(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CheckProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckProfileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Filter != nil {
		{
			size := m.Filter.Size()
			i -= size
			if _, err := m.Filter.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CheckProfileRequest_Email) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckProfileRequest_Email) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Email)
	copy(dAtA[i:], m.Email)
	i = encodeVarintUser(dAtA, i, uint64(len(m.Email)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *CheckProfileRequest_Phone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckProfileRequest_Phone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.Phone)
	copy(dAtA[i:], m.Phone)
	i = encodeVarintUser(dAtA, i, uint64(len(m.Phone)))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}
func (m *CheckProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckProfileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Profile != nil {
		{
			size, err := m.Profile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Found {
		i--
		if m.Found {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintUser(dAtA []byte, offset int, v uint64) int {
	offset -= sovUser(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UpdateUserDeviceTokenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.DeviceToken)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.AllowNotification {
		n += 2
	}
	return n
}

func (m *UpdateUserDeviceTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Successful {
		n += 2
	}
	return n
}

func (m *UserProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Country != 0 {
		n += 1 + sovUser(uint64(m.Country))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.DeviceToken)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.UserGroup)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *TutorProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Country != 0 {
		n += 1 + sovUser(uint64(m.Country))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.DeviceToken)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.UserGroup)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if len(m.SkillSet) > 0 {
		l = 0
		for _, e := range m.SkillSet {
			l += sovUser(uint64(e))
		}
		n += 1 + sovUser(uint64(l)) + l
	}
	if m.Status != 0 {
		n += 1 + sovUser(uint64(m.Status))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *GetCoachProfileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Profile != nil {
		l = m.Profile.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *GetCoachProfileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ProfileId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *UpdateUserProfileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Profile != nil {
		l = m.Profile.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *UpdateUserProfileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Successful {
		n += 2
	}
	return n
}

func (m *UpdateTutorStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovUser(uint64(m.Status))
	}
	return n
}

func (m *UpdateTutorStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetCurrentUserProfileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetCurrentUserProfileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Profile != nil {
		l = m.Profile.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *GetTutorProfileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProfileIds) > 0 {
		for _, s := range m.ProfileIds {
			l = len(s)
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *GetTutorProfileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Profiles) > 0 {
		for _, e := range m.Profiles {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *ClaimsUserAuthRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ClaimsUserAuthResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Successful {
		n += 2
	}
	return n
}

func (m *GetCoachProfilesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProfileIds) > 0 {
		for _, s := range m.ProfileIds {
			l = len(s)
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *GetCoachProfilesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Profiles) > 0 {
		for _, e := range m.Profiles {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *TeacherProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Country != 0 {
		n += 1 + sovUser(uint64(m.Country))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.DeviceToken)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.UserGroup)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	if len(m.SchoolIds) > 0 {
		l = 0
		for _, e := range m.SchoolIds {
			l += sovUser(uint64(e))
		}
		n += 1 + sovUser(uint64(l)) + l
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *GetTeacherProfilesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *GetTeacherProfilesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Profiles) > 0 {
		for _, e := range m.Profiles {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *BasicProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.UserGroup)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.FacebookId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.AppleUserId)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *GetBasicProfileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		for _, s := range m.UserIds {
			l = len(s)
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *GetBasicProfileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Profiles) > 0 {
		for _, e := range m.Profiles {
			l = e.Size()
			n += 1 + l + sovUser(uint64(l))
		}
	}
	return n
}

func (m *CheckProfileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Filter != nil {
		n += m.Filter.Size()
	}
	return n
}

func (m *CheckProfileRequest_Email) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Email)
	n += 1 + l + sovUser(uint64(l))
	return n
}
func (m *CheckProfileRequest_Phone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Phone)
	n += 1 + l + sovUser(uint64(l))
	return n
}
func (m *CheckProfileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Found {
		n += 2
	}
	if m.Profile != nil {
		l = m.Profile.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func sovUser(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUser(x uint64) (n int) {
	return sovUser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UpdateUserDeviceTokenRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserDeviceTokenRequest{`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`DeviceToken:` + fmt.Sprintf("%v", this.DeviceToken) + `,`,
		`AllowNotification:` + fmt.Sprintf("%v", this.AllowNotification) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserDeviceTokenResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserDeviceTokenResponse{`,
		`Successful:` + fmt.Sprintf("%v", this.Successful) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserProfile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserProfile{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Avatar:` + fmt.Sprintf("%v", this.Avatar) + `,`,
		`DeviceToken:` + fmt.Sprintf("%v", this.DeviceToken) + `,`,
		`UserGroup:` + fmt.Sprintf("%v", this.UserGroup) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TutorProfile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TutorProfile{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Avatar:` + fmt.Sprintf("%v", this.Avatar) + `,`,
		`DeviceToken:` + fmt.Sprintf("%v", this.DeviceToken) + `,`,
		`UserGroup:` + fmt.Sprintf("%v", this.UserGroup) + `,`,
		`SkillSet:` + fmt.Sprintf("%v", this.SkillSet) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetCoachProfileResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetCoachProfileResponse{`,
		`Profile:` + strings.Replace(this.Profile.String(), "UserProfile", "UserProfile", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetCoachProfileRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetCoachProfileRequest{`,
		`ProfileId:` + fmt.Sprintf("%v", this.ProfileId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserProfileRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserProfileRequest{`,
		`Profile:` + strings.Replace(this.Profile.String(), "UserProfile", "UserProfile", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateUserProfileResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateUserProfileResponse{`,
		`Successful:` + fmt.Sprintf("%v", this.Successful) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateTutorStatusRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateTutorStatusRequest{`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateTutorStatusResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateTutorStatusResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetCurrentUserProfileRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetCurrentUserProfileRequest{`,
		`}`,
	}, "")
	return s
}
func (this *GetCurrentUserProfileResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetCurrentUserProfileResponse{`,
		`Profile:` + strings.Replace(this.Profile.String(), "UserProfile", "UserProfile", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetTutorProfileRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetTutorProfileRequest{`,
		`ProfileIds:` + fmt.Sprintf("%v", this.ProfileIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetTutorProfileResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForProfiles := "[]*TutorProfile{"
	for _, f := range this.Profiles {
		repeatedStringForProfiles += strings.Replace(f.String(), "TutorProfile", "TutorProfile", 1) + ","
	}
	repeatedStringForProfiles += "}"
	s := strings.Join([]string{`&GetTutorProfileResponse{`,
		`Profiles:` + repeatedStringForProfiles + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClaimsUserAuthRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClaimsUserAuthRequest{`,
		`}`,
	}, "")
	return s
}
func (this *ClaimsUserAuthResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClaimsUserAuthResponse{`,
		`Successful:` + fmt.Sprintf("%v", this.Successful) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetCoachProfilesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetCoachProfilesRequest{`,
		`ProfileIds:` + fmt.Sprintf("%v", this.ProfileIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetCoachProfilesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForProfiles := "[]*UserProfile{"
	for _, f := range this.Profiles {
		repeatedStringForProfiles += strings.Replace(f.String(), "UserProfile", "UserProfile", 1) + ","
	}
	repeatedStringForProfiles += "}"
	s := strings.Join([]string{`&GetCoachProfilesResponse{`,
		`Profiles:` + repeatedStringForProfiles + `,`,
		`}`,
	}, "")
	return s
}
func (this *TeacherProfile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TeacherProfile{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Avatar:` + fmt.Sprintf("%v", this.Avatar) + `,`,
		`DeviceToken:` + fmt.Sprintf("%v", this.DeviceToken) + `,`,
		`UserGroup:` + fmt.Sprintf("%v", this.UserGroup) + `,`,
		`SchoolIds:` + fmt.Sprintf("%v", this.SchoolIds) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetTeacherProfilesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetTeacherProfilesRequest{`,
		`Ids:` + fmt.Sprintf("%v", this.Ids) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetTeacherProfilesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForProfiles := "[]*TeacherProfile{"
	for _, f := range this.Profiles {
		repeatedStringForProfiles += strings.Replace(f.String(), "TeacherProfile", "TeacherProfile", 1) + ","
	}
	repeatedStringForProfiles += "}"
	s := strings.Join([]string{`&GetTeacherProfilesResponse{`,
		`Profiles:` + repeatedStringForProfiles + `,`,
		`}`,
	}, "")
	return s
}
func (this *BasicProfile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BasicProfile{`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Avatar:` + fmt.Sprintf("%v", this.Avatar) + `,`,
		`UserGroup:` + fmt.Sprintf("%v", this.UserGroup) + `,`,
		`FacebookId:` + fmt.Sprintf("%v", this.FacebookId) + `,`,
		`AppleUserId:` + fmt.Sprintf("%v", this.AppleUserId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetBasicProfileRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetBasicProfileRequest{`,
		`UserIds:` + fmt.Sprintf("%v", this.UserIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetBasicProfileResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForProfiles := "[]*BasicProfile{"
	for _, f := range this.Profiles {
		repeatedStringForProfiles += strings.Replace(f.String(), "BasicProfile", "BasicProfile", 1) + ","
	}
	repeatedStringForProfiles += "}"
	s := strings.Join([]string{`&GetBasicProfileResponse{`,
		`Profiles:` + repeatedStringForProfiles + `,`,
		`}`,
	}, "")
	return s
}
func (this *CheckProfileRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CheckProfileRequest{`,
		`Filter:` + fmt.Sprintf("%v", this.Filter) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CheckProfileRequest_Email) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CheckProfileRequest_Email{`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CheckProfileRequest_Phone) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CheckProfileRequest_Phone{`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CheckProfileResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CheckProfileResponse{`,
		`Found:` + fmt.Sprintf("%v", this.Found) + `,`,
		`Profile:` + strings.Replace(this.Profile.String(), "BasicProfile", "BasicProfile", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringUser(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UpdateUserDeviceTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserDeviceTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserDeviceTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowNotification", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowNotification = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserDeviceTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserDeviceTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserDeviceTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Successful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Successful = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TutorProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TutorProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TutorProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType == 0 {
				var v Subject
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Subject(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SkillSet = append(m.SkillSet, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUser
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUser
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.SkillSet) == 0 {
					m.SkillSet = make([]Subject, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Subject
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Subject(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SkillSet = append(m.SkillSet, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillSet", wireType)
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= TutorStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCoachProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCoachProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCoachProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Profile == nil {
				m.Profile = &UserProfile{}
			}
			if err := m.Profile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCoachProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCoachProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCoachProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Profile == nil {
				m.Profile = &UserProfile{}
			}
			if err := m.Profile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateUserProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateUserProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateUserProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Successful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Successful = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTutorStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTutorStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTutorStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= TutorStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTutorStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTutorStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTutorStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCurrentUserProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCurrentUserProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCurrentUserProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCurrentUserProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCurrentUserProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCurrentUserProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Profile == nil {
				m.Profile = &UserProfile{}
			}
			if err := m.Profile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTutorProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTutorProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTutorProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileIds = append(m.ProfileIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTutorProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTutorProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTutorProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profiles = append(m.Profiles, &TutorProfile{})
			if err := m.Profiles[len(m.Profiles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimsUserAuthRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimsUserAuthRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimsUserAuthRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimsUserAuthResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimsUserAuthResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimsUserAuthResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Successful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Successful = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCoachProfilesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCoachProfilesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCoachProfilesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileIds = append(m.ProfileIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCoachProfilesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCoachProfilesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCoachProfilesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profiles = append(m.Profiles, &UserProfile{})
			if err := m.Profiles[len(m.Profiles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeacherProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeacherProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeacherProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SchoolIds = append(m.SchoolIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowUser
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthUser
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthUser
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SchoolIds) == 0 {
					m.SchoolIds = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowUser
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SchoolIds = append(m.SchoolIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SchoolIds", wireType)
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTeacherProfilesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTeacherProfilesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTeacherProfilesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTeacherProfilesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTeacherProfilesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTeacherProfilesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profiles = append(m.Profiles, &TeacherProfile{})
			if err := m.Profiles[len(m.Profiles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BasicProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BasicProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BasicProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FacebookId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FacebookId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppleUserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppleUserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBasicProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBasicProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBasicProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIds = append(m.UserIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBasicProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBasicProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBasicProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profiles = append(m.Profiles, &BasicProfile{})
			if err := m.Profiles[len(m.Profiles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = &CheckProfileRequest_Email{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = &CheckProfileRequest_Phone{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Found", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Found = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Profile == nil {
				m.Profile = &BasicProfile{}
			}
			if err := m.Profile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUser(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUser
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUser
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUser
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUser        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUser          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUser = fmt.Errorf("proto: unexpected end of group")
)
