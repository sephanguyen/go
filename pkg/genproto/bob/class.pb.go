// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: class.proto

package pb

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CreateClassRequest struct {
	SchoolId  int32     `protobuf:"varint,1,opt,name=school_id,json=schoolId,proto3" json:"school_id,omitempty"`
	ClassName string    `protobuf:"bytes,2,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	Grades    []string  `protobuf:"bytes,3,rep,name=grades,proto3" json:"grades,omitempty"`
	Subjects  []Subject `protobuf:"varint,4,rep,packed,name=subjects,proto3,enum=manabie.bob.Subject" json:"subjects,omitempty"`
	OwnerId   string    `protobuf:"bytes,5,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"` // Deprecated: Do not use.
	OwnerIds  []string  `protobuf:"bytes,6,rep,name=owner_ids,json=ownerIds,proto3" json:"owner_ids,omitempty"`
}

func (m *CreateClassRequest) Reset()      { *m = CreateClassRequest{} }
func (*CreateClassRequest) ProtoMessage() {}
func (*CreateClassRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{0}
}
func (m *CreateClassRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateClassRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateClassRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateClassRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClassRequest.Merge(m, src)
}
func (m *CreateClassRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateClassRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClassRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClassRequest proto.InternalMessageInfo

func (m *CreateClassRequest) GetSchoolId() int32 {
	if m != nil {
		return m.SchoolId
	}
	return 0
}

func (m *CreateClassRequest) GetClassName() string {
	if m != nil {
		return m.ClassName
	}
	return ""
}

func (m *CreateClassRequest) GetGrades() []string {
	if m != nil {
		return m.Grades
	}
	return nil
}

func (m *CreateClassRequest) GetSubjects() []Subject {
	if m != nil {
		return m.Subjects
	}
	return nil
}

// Deprecated: Do not use.
func (m *CreateClassRequest) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

func (m *CreateClassRequest) GetOwnerIds() []string {
	if m != nil {
		return m.OwnerIds
	}
	return nil
}

type CreateClassResponse struct {
	ClassId int32 `protobuf:"varint,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
}

func (m *CreateClassResponse) Reset()      { *m = CreateClassResponse{} }
func (*CreateClassResponse) ProtoMessage() {}
func (*CreateClassResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{1}
}
func (m *CreateClassResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateClassResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateClassResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateClassResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClassResponse.Merge(m, src)
}
func (m *CreateClassResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateClassResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClassResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClassResponse proto.InternalMessageInfo

func (m *CreateClassResponse) GetClassId() int32 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

type EditClassRequest struct {
	ClassId   int32  `protobuf:"varint,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	ClassName string `protobuf:"bytes,2,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
}

func (m *EditClassRequest) Reset()      { *m = EditClassRequest{} }
func (*EditClassRequest) ProtoMessage() {}
func (*EditClassRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{2}
}
func (m *EditClassRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EditClassRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EditClassRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EditClassRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditClassRequest.Merge(m, src)
}
func (m *EditClassRequest) XXX_Size() int {
	return m.Size()
}
func (m *EditClassRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EditClassRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EditClassRequest proto.InternalMessageInfo

func (m *EditClassRequest) GetClassId() int32 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

func (m *EditClassRequest) GetClassName() string {
	if m != nil {
		return m.ClassName
	}
	return ""
}

type EditClassResponse struct {
}

func (m *EditClassResponse) Reset()      { *m = EditClassResponse{} }
func (*EditClassResponse) ProtoMessage() {}
func (*EditClassResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{3}
}
func (m *EditClassResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EditClassResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EditClassResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EditClassResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditClassResponse.Merge(m, src)
}
func (m *EditClassResponse) XXX_Size() int {
	return m.Size()
}
func (m *EditClassResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EditClassResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EditClassResponse proto.InternalMessageInfo

type JoinClassRequest struct {
	ClassCode string `protobuf:"bytes,1,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`
}

func (m *JoinClassRequest) Reset()      { *m = JoinClassRequest{} }
func (*JoinClassRequest) ProtoMessage() {}
func (*JoinClassRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{4}
}
func (m *JoinClassRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinClassRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinClassRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JoinClassRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinClassRequest.Merge(m, src)
}
func (m *JoinClassRequest) XXX_Size() int {
	return m.Size()
}
func (m *JoinClassRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinClassRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JoinClassRequest proto.InternalMessageInfo

func (m *JoinClassRequest) GetClassCode() string {
	if m != nil {
		return m.ClassCode
	}
	return ""
}

type JoinClassResponse struct {
	ClassId int32 `protobuf:"varint,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
}

func (m *JoinClassResponse) Reset()      { *m = JoinClassResponse{} }
func (*JoinClassResponse) ProtoMessage() {}
func (*JoinClassResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{5}
}
func (m *JoinClassResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinClassResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinClassResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JoinClassResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinClassResponse.Merge(m, src)
}
func (m *JoinClassResponse) XXX_Size() int {
	return m.Size()
}
func (m *JoinClassResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinClassResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JoinClassResponse proto.InternalMessageInfo

func (m *JoinClassResponse) GetClassId() int32 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

type ClassEntity struct {
	Id           int32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Avatar       string    `protobuf:"bytes,3,opt,name=avatar,proto3" json:"avatar,omitempty"`
	SchoolId     int32     `protobuf:"varint,4,opt,name=school_id,json=schoolId,proto3" json:"school_id,omitempty"`
	ClassCode    string    `protobuf:"bytes,5,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`
	Subject      []Subject `protobuf:"varint,6,rep,packed,name=subject,proto3,enum=manabie.bob.Subject" json:"subject,omitempty"`
	Grades       []string  `protobuf:"bytes,7,rep,name=grades,proto3" json:"grades,omitempty"`
	OwnerIds     []string  `protobuf:"bytes,8,rep,name=owner_ids,json=ownerIds,proto3" json:"owner_ids,omitempty"`
	TotalStudent uint32    `protobuf:"varint,9,opt,name=total_student,json=totalStudent,proto3" json:"total_student,omitempty"`
}

func (m *ClassEntity) Reset()      { *m = ClassEntity{} }
func (*ClassEntity) ProtoMessage() {}
func (*ClassEntity) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{6}
}
func (m *ClassEntity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClassEntity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClassEntity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClassEntity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClassEntity.Merge(m, src)
}
func (m *ClassEntity) XXX_Size() int {
	return m.Size()
}
func (m *ClassEntity) XXX_DiscardUnknown() {
	xxx_messageInfo_ClassEntity.DiscardUnknown(m)
}

var xxx_messageInfo_ClassEntity proto.InternalMessageInfo

func (m *ClassEntity) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ClassEntity) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClassEntity) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *ClassEntity) GetSchoolId() int32 {
	if m != nil {
		return m.SchoolId
	}
	return 0
}

func (m *ClassEntity) GetClassCode() string {
	if m != nil {
		return m.ClassCode
	}
	return ""
}

func (m *ClassEntity) GetSubject() []Subject {
	if m != nil {
		return m.Subject
	}
	return nil
}

func (m *ClassEntity) GetGrades() []string {
	if m != nil {
		return m.Grades
	}
	return nil
}

func (m *ClassEntity) GetOwnerIds() []string {
	if m != nil {
		return m.OwnerIds
	}
	return nil
}

func (m *ClassEntity) GetTotalStudent() uint32 {
	if m != nil {
		return m.TotalStudent
	}
	return 0
}

type RemoveMemberRequest struct {
	ClassId int32    `protobuf:"varint,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	UserIds []string `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
}

func (m *RemoveMemberRequest) Reset()      { *m = RemoveMemberRequest{} }
func (*RemoveMemberRequest) ProtoMessage() {}
func (*RemoveMemberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{7}
}
func (m *RemoveMemberRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveMemberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveMemberRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveMemberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveMemberRequest.Merge(m, src)
}
func (m *RemoveMemberRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveMemberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveMemberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveMemberRequest proto.InternalMessageInfo

func (m *RemoveMemberRequest) GetClassId() int32 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

func (m *RemoveMemberRequest) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

type RemoveMemberResponse struct {
}

func (m *RemoveMemberResponse) Reset()      { *m = RemoveMemberResponse{} }
func (*RemoveMemberResponse) ProtoMessage() {}
func (*RemoveMemberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{8}
}
func (m *RemoveMemberResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveMemberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveMemberResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveMemberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveMemberResponse.Merge(m, src)
}
func (m *RemoveMemberResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemoveMemberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveMemberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveMemberResponse proto.InternalMessageInfo

type LeaveClassRequest struct {
	ClassId int32 `protobuf:"varint,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
}

func (m *LeaveClassRequest) Reset()      { *m = LeaveClassRequest{} }
func (*LeaveClassRequest) ProtoMessage() {}
func (*LeaveClassRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{9}
}
func (m *LeaveClassRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeaveClassRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeaveClassRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeaveClassRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaveClassRequest.Merge(m, src)
}
func (m *LeaveClassRequest) XXX_Size() int {
	return m.Size()
}
func (m *LeaveClassRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaveClassRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LeaveClassRequest proto.InternalMessageInfo

func (m *LeaveClassRequest) GetClassId() int32 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

type LeaveClassResponse struct {
}

func (m *LeaveClassResponse) Reset()      { *m = LeaveClassResponse{} }
func (*LeaveClassResponse) ProtoMessage() {}
func (*LeaveClassResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{10}
}
func (m *LeaveClassResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeaveClassResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeaveClassResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeaveClassResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaveClassResponse.Merge(m, src)
}
func (m *LeaveClassResponse) XXX_Size() int {
	return m.Size()
}
func (m *LeaveClassResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaveClassResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LeaveClassResponse proto.InternalMessageInfo

type AssignPresetStudyPlanResponse struct {
}

func (m *AssignPresetStudyPlanResponse) Reset()      { *m = AssignPresetStudyPlanResponse{} }
func (*AssignPresetStudyPlanResponse) ProtoMessage() {}
func (*AssignPresetStudyPlanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{11}
}
func (m *AssignPresetStudyPlanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssignPresetStudyPlanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssignPresetStudyPlanResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssignPresetStudyPlanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignPresetStudyPlanResponse.Merge(m, src)
}
func (m *AssignPresetStudyPlanResponse) XXX_Size() int {
	return m.Size()
}
func (m *AssignPresetStudyPlanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignPresetStudyPlanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AssignPresetStudyPlanResponse proto.InternalMessageInfo

type RetrieveAssignedPresetStudyPlanRequest struct {
	ClassId int32 `protobuf:"varint,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
}

func (m *RetrieveAssignedPresetStudyPlanRequest) Reset() {
	*m = RetrieveAssignedPresetStudyPlanRequest{}
}
func (*RetrieveAssignedPresetStudyPlanRequest) ProtoMessage() {}
func (*RetrieveAssignedPresetStudyPlanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{12}
}
func (m *RetrieveAssignedPresetStudyPlanRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveAssignedPresetStudyPlanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveAssignedPresetStudyPlanRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveAssignedPresetStudyPlanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveAssignedPresetStudyPlanRequest.Merge(m, src)
}
func (m *RetrieveAssignedPresetStudyPlanRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveAssignedPresetStudyPlanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveAssignedPresetStudyPlanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveAssignedPresetStudyPlanRequest proto.InternalMessageInfo

func (m *RetrieveAssignedPresetStudyPlanRequest) GetClassId() int32 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

type RetrieveAssignedPresetStudyPlanResponse struct {
	PresetStudyPlans []*PresetStudyPlan `protobuf:"bytes,1,rep,name=preset_study_plans,json=presetStudyPlans,proto3" json:"preset_study_plans,omitempty"`
}

func (m *RetrieveAssignedPresetStudyPlanResponse) Reset() {
	*m = RetrieveAssignedPresetStudyPlanResponse{}
}
func (*RetrieveAssignedPresetStudyPlanResponse) ProtoMessage() {}
func (*RetrieveAssignedPresetStudyPlanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{13}
}
func (m *RetrieveAssignedPresetStudyPlanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveAssignedPresetStudyPlanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveAssignedPresetStudyPlanResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveAssignedPresetStudyPlanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveAssignedPresetStudyPlanResponse.Merge(m, src)
}
func (m *RetrieveAssignedPresetStudyPlanResponse) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveAssignedPresetStudyPlanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveAssignedPresetStudyPlanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveAssignedPresetStudyPlanResponse proto.InternalMessageInfo

func (m *RetrieveAssignedPresetStudyPlanResponse) GetPresetStudyPlans() []*PresetStudyPlan {
	if m != nil {
		return m.PresetStudyPlans
	}
	return nil
}

type RetrieveClassMemberRequest struct {
	ClassId int32 `protobuf:"varint,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
}

func (m *RetrieveClassMemberRequest) Reset()      { *m = RetrieveClassMemberRequest{} }
func (*RetrieveClassMemberRequest) ProtoMessage() {}
func (*RetrieveClassMemberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{14}
}
func (m *RetrieveClassMemberRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveClassMemberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveClassMemberRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveClassMemberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveClassMemberRequest.Merge(m, src)
}
func (m *RetrieveClassMemberRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveClassMemberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveClassMemberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveClassMemberRequest proto.InternalMessageInfo

func (m *RetrieveClassMemberRequest) GetClassId() int32 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

type RetrieveClassMemberResponse struct {
	Members []*RetrieveClassMemberResponse_Member `protobuf:"bytes,10,rep,name=members,proto3" json:"members,omitempty"`
}

func (m *RetrieveClassMemberResponse) Reset()      { *m = RetrieveClassMemberResponse{} }
func (*RetrieveClassMemberResponse) ProtoMessage() {}
func (*RetrieveClassMemberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{15}
}
func (m *RetrieveClassMemberResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveClassMemberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveClassMemberResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveClassMemberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveClassMemberResponse.Merge(m, src)
}
func (m *RetrieveClassMemberResponse) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveClassMemberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveClassMemberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveClassMemberResponse proto.InternalMessageInfo

func (m *RetrieveClassMemberResponse) GetMembers() []*RetrieveClassMemberResponse_Member {
	if m != nil {
		return m.Members
	}
	return nil
}

type RetrieveClassMemberResponse_Member struct {
	UserId    string           `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserGroup UserGroup        `protobuf:"varint,2,opt,name=user_group,json=userGroup,proto3,enum=manabie.bob.UserGroup" json:"user_group,omitempty"`
	JoinAt    *types.Timestamp `protobuf:"bytes,3,opt,name=join_at,json=joinAt,proto3" json:"join_at,omitempty"`
}

func (m *RetrieveClassMemberResponse_Member) Reset()      { *m = RetrieveClassMemberResponse_Member{} }
func (*RetrieveClassMemberResponse_Member) ProtoMessage() {}
func (*RetrieveClassMemberResponse_Member) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{15, 0}
}
func (m *RetrieveClassMemberResponse_Member) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveClassMemberResponse_Member) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveClassMemberResponse_Member.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveClassMemberResponse_Member) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveClassMemberResponse_Member.Merge(m, src)
}
func (m *RetrieveClassMemberResponse_Member) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveClassMemberResponse_Member) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveClassMemberResponse_Member.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveClassMemberResponse_Member proto.InternalMessageInfo

func (m *RetrieveClassMemberResponse_Member) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *RetrieveClassMemberResponse_Member) GetUserGroup() UserGroup {
	if m != nil {
		return m.UserGroup
	}
	return USER_GROUP_NONE
}

func (m *RetrieveClassMemberResponse_Member) GetJoinAt() *types.Timestamp {
	if m != nil {
		return m.JoinAt
	}
	return nil
}

type TeacherAssignClassWithTopicRequest struct {
	ClassId   int32            `protobuf:"varint,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	TopicId   string           `protobuf:"bytes,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	StartDate *types.Timestamp `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate   *types.Timestamp `protobuf:"bytes,4,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
}

func (m *TeacherAssignClassWithTopicRequest) Reset()      { *m = TeacherAssignClassWithTopicRequest{} }
func (*TeacherAssignClassWithTopicRequest) ProtoMessage() {}
func (*TeacherAssignClassWithTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{16}
}
func (m *TeacherAssignClassWithTopicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeacherAssignClassWithTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeacherAssignClassWithTopicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeacherAssignClassWithTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeacherAssignClassWithTopicRequest.Merge(m, src)
}
func (m *TeacherAssignClassWithTopicRequest) XXX_Size() int {
	return m.Size()
}
func (m *TeacherAssignClassWithTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TeacherAssignClassWithTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TeacherAssignClassWithTopicRequest proto.InternalMessageInfo

func (m *TeacherAssignClassWithTopicRequest) GetClassId() int32 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

func (m *TeacherAssignClassWithTopicRequest) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

func (m *TeacherAssignClassWithTopicRequest) GetStartDate() *types.Timestamp {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *TeacherAssignClassWithTopicRequest) GetEndDate() *types.Timestamp {
	if m != nil {
		return m.EndDate
	}
	return nil
}

type TeacherAssignClassWithTopicResponse struct {
	AssignmentId string `protobuf:"bytes,1,opt,name=assignment_id,json=assignmentId,proto3" json:"assignment_id,omitempty"`
}

func (m *TeacherAssignClassWithTopicResponse) Reset()      { *m = TeacherAssignClassWithTopicResponse{} }
func (*TeacherAssignClassWithTopicResponse) ProtoMessage() {}
func (*TeacherAssignClassWithTopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{17}
}
func (m *TeacherAssignClassWithTopicResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeacherAssignClassWithTopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeacherAssignClassWithTopicResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeacherAssignClassWithTopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeacherAssignClassWithTopicResponse.Merge(m, src)
}
func (m *TeacherAssignClassWithTopicResponse) XXX_Size() int {
	return m.Size()
}
func (m *TeacherAssignClassWithTopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TeacherAssignClassWithTopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TeacherAssignClassWithTopicResponse proto.InternalMessageInfo

func (m *TeacherAssignClassWithTopicResponse) GetAssignmentId() string {
	if m != nil {
		return m.AssignmentId
	}
	return ""
}

type RetrieveActiveClassAssignmentRequest struct {
	ClassId int32 `protobuf:"varint,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	Limit   int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Page    int32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (m *RetrieveActiveClassAssignmentRequest) Reset()      { *m = RetrieveActiveClassAssignmentRequest{} }
func (*RetrieveActiveClassAssignmentRequest) ProtoMessage() {}
func (*RetrieveActiveClassAssignmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{18}
}
func (m *RetrieveActiveClassAssignmentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveActiveClassAssignmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveActiveClassAssignmentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveActiveClassAssignmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveActiveClassAssignmentRequest.Merge(m, src)
}
func (m *RetrieveActiveClassAssignmentRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveActiveClassAssignmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveActiveClassAssignmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveActiveClassAssignmentRequest proto.InternalMessageInfo

func (m *RetrieveActiveClassAssignmentRequest) GetClassId() int32 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

func (m *RetrieveActiveClassAssignmentRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *RetrieveActiveClassAssignmentRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type Assignment struct {
	AssignmentId string           `protobuf:"bytes,1,opt,name=assignment_id,json=assignmentId,proto3" json:"assignment_id,omitempty"`
	Topic        *Topic           `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	Status       AssignmentStatus `protobuf:"varint,3,opt,name=status,proto3,enum=manabie.bob.AssignmentStatus" json:"status,omitempty"`
	StartDate    *types.Timestamp `protobuf:"bytes,4,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate      *types.Timestamp `protobuf:"bytes,5,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	StudentIds   []string         `protobuf:"bytes,6,rep,name=student_ids,json=studentIds,proto3" json:"student_ids,omitempty"`
}

func (m *Assignment) Reset()      { *m = Assignment{} }
func (*Assignment) ProtoMessage() {}
func (*Assignment) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{19}
}
func (m *Assignment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Assignment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Assignment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Assignment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Assignment.Merge(m, src)
}
func (m *Assignment) XXX_Size() int {
	return m.Size()
}
func (m *Assignment) XXX_DiscardUnknown() {
	xxx_messageInfo_Assignment.DiscardUnknown(m)
}

var xxx_messageInfo_Assignment proto.InternalMessageInfo

func (m *Assignment) GetAssignmentId() string {
	if m != nil {
		return m.AssignmentId
	}
	return ""
}

func (m *Assignment) GetTopic() *Topic {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *Assignment) GetStatus() AssignmentStatus {
	if m != nil {
		return m.Status
	}
	return ASSIGNMENT_STATUS_NONE
}

func (m *Assignment) GetStartDate() *types.Timestamp {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *Assignment) GetEndDate() *types.Timestamp {
	if m != nil {
		return m.EndDate
	}
	return nil
}

func (m *Assignment) GetStudentIds() []string {
	if m != nil {
		return m.StudentIds
	}
	return nil
}

type RetrieveActiveClassAssignmentResponse struct {
	Assignments []*Assignment `protobuf:"bytes,1,rep,name=assignments,proto3" json:"assignments,omitempty"`
	Total       int32         `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *RetrieveActiveClassAssignmentResponse) Reset()      { *m = RetrieveActiveClassAssignmentResponse{} }
func (*RetrieveActiveClassAssignmentResponse) ProtoMessage() {}
func (*RetrieveActiveClassAssignmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{20}
}
func (m *RetrieveActiveClassAssignmentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveActiveClassAssignmentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveActiveClassAssignmentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveActiveClassAssignmentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveActiveClassAssignmentResponse.Merge(m, src)
}
func (m *RetrieveActiveClassAssignmentResponse) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveActiveClassAssignmentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveActiveClassAssignmentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveActiveClassAssignmentResponse proto.InternalMessageInfo

func (m *RetrieveActiveClassAssignmentResponse) GetAssignments() []*Assignment {
	if m != nil {
		return m.Assignments
	}
	return nil
}

func (m *RetrieveActiveClassAssignmentResponse) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type RetrievePastClassAssignmentRequest struct {
	ClassId int32 `protobuf:"varint,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	Limit   int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Page    int32 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
}

func (m *RetrievePastClassAssignmentRequest) Reset()      { *m = RetrievePastClassAssignmentRequest{} }
func (*RetrievePastClassAssignmentRequest) ProtoMessage() {}
func (*RetrievePastClassAssignmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{21}
}
func (m *RetrievePastClassAssignmentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrievePastClassAssignmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrievePastClassAssignmentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrievePastClassAssignmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrievePastClassAssignmentRequest.Merge(m, src)
}
func (m *RetrievePastClassAssignmentRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrievePastClassAssignmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrievePastClassAssignmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrievePastClassAssignmentRequest proto.InternalMessageInfo

func (m *RetrievePastClassAssignmentRequest) GetClassId() int32 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

func (m *RetrievePastClassAssignmentRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *RetrievePastClassAssignmentRequest) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type RetrievePastClassAssignmentResponse struct {
	Assignments []*Assignment `protobuf:"bytes,1,rep,name=assignments,proto3" json:"assignments,omitempty"`
	Total       int32         `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *RetrievePastClassAssignmentResponse) Reset()      { *m = RetrievePastClassAssignmentResponse{} }
func (*RetrievePastClassAssignmentResponse) ProtoMessage() {}
func (*RetrievePastClassAssignmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{22}
}
func (m *RetrievePastClassAssignmentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrievePastClassAssignmentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrievePastClassAssignmentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrievePastClassAssignmentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrievePastClassAssignmentResponse.Merge(m, src)
}
func (m *RetrievePastClassAssignmentResponse) XXX_Size() int {
	return m.Size()
}
func (m *RetrievePastClassAssignmentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrievePastClassAssignmentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrievePastClassAssignmentResponse proto.InternalMessageInfo

func (m *RetrievePastClassAssignmentResponse) GetAssignments() []*Assignment {
	if m != nil {
		return m.Assignments
	}
	return nil
}

func (m *RetrievePastClassAssignmentResponse) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

type RemoveAssignedTopicRequest struct {
	AssignmentId string `protobuf:"bytes,1,opt,name=assignment_id,json=assignmentId,proto3" json:"assignment_id,omitempty"`
}

func (m *RemoveAssignedTopicRequest) Reset()      { *m = RemoveAssignedTopicRequest{} }
func (*RemoveAssignedTopicRequest) ProtoMessage() {}
func (*RemoveAssignedTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{23}
}
func (m *RemoveAssignedTopicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveAssignedTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveAssignedTopicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveAssignedTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveAssignedTopicRequest.Merge(m, src)
}
func (m *RemoveAssignedTopicRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveAssignedTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveAssignedTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveAssignedTopicRequest proto.InternalMessageInfo

func (m *RemoveAssignedTopicRequest) GetAssignmentId() string {
	if m != nil {
		return m.AssignmentId
	}
	return ""
}

type RemoveAssignedTopicResponse struct {
}

func (m *RemoveAssignedTopicResponse) Reset()      { *m = RemoveAssignedTopicResponse{} }
func (*RemoveAssignedTopicResponse) ProtoMessage() {}
func (*RemoveAssignedTopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{24}
}
func (m *RemoveAssignedTopicResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveAssignedTopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveAssignedTopicResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveAssignedTopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveAssignedTopicResponse.Merge(m, src)
}
func (m *RemoveAssignedTopicResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemoveAssignedTopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveAssignedTopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveAssignedTopicResponse proto.InternalMessageInfo

type EditAssignedTopicRequest struct {
	AssignmentId string           `protobuf:"bytes,1,opt,name=assignment_id,json=assignmentId,proto3" json:"assignment_id,omitempty"`
	StartDate    *types.Timestamp `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate      *types.Timestamp `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
}

func (m *EditAssignedTopicRequest) Reset()      { *m = EditAssignedTopicRequest{} }
func (*EditAssignedTopicRequest) ProtoMessage() {}
func (*EditAssignedTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{25}
}
func (m *EditAssignedTopicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EditAssignedTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EditAssignedTopicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EditAssignedTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditAssignedTopicRequest.Merge(m, src)
}
func (m *EditAssignedTopicRequest) XXX_Size() int {
	return m.Size()
}
func (m *EditAssignedTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EditAssignedTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EditAssignedTopicRequest proto.InternalMessageInfo

func (m *EditAssignedTopicRequest) GetAssignmentId() string {
	if m != nil {
		return m.AssignmentId
	}
	return ""
}

func (m *EditAssignedTopicRequest) GetStartDate() *types.Timestamp {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *EditAssignedTopicRequest) GetEndDate() *types.Timestamp {
	if m != nil {
		return m.EndDate
	}
	return nil
}

type EditAssignedTopicResponse struct {
	NewAssignmentId string `protobuf:"bytes,1,opt,name=new_assignment_id,json=newAssignmentId,proto3" json:"new_assignment_id,omitempty"`
}

func (m *EditAssignedTopicResponse) Reset()      { *m = EditAssignedTopicResponse{} }
func (*EditAssignedTopicResponse) ProtoMessage() {}
func (*EditAssignedTopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{26}
}
func (m *EditAssignedTopicResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EditAssignedTopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EditAssignedTopicResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EditAssignedTopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EditAssignedTopicResponse.Merge(m, src)
}
func (m *EditAssignedTopicResponse) XXX_Size() int {
	return m.Size()
}
func (m *EditAssignedTopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EditAssignedTopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EditAssignedTopicResponse proto.InternalMessageInfo

func (m *EditAssignedTopicResponse) GetNewAssignmentId() string {
	if m != nil {
		return m.NewAssignmentId
	}
	return ""
}

type RetrieveClassLearningStatisticsRequest struct {
	ClassId int32  `protobuf:"varint,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	TopicId string `protobuf:"bytes,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *RetrieveClassLearningStatisticsRequest) Reset() {
	*m = RetrieveClassLearningStatisticsRequest{}
}
func (*RetrieveClassLearningStatisticsRequest) ProtoMessage() {}
func (*RetrieveClassLearningStatisticsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{27}
}
func (m *RetrieveClassLearningStatisticsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveClassLearningStatisticsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveClassLearningStatisticsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveClassLearningStatisticsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveClassLearningStatisticsRequest.Merge(m, src)
}
func (m *RetrieveClassLearningStatisticsRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveClassLearningStatisticsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveClassLearningStatisticsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveClassLearningStatisticsRequest proto.InternalMessageInfo

func (m *RetrieveClassLearningStatisticsRequest) GetClassId() int32 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

func (m *RetrieveClassLearningStatisticsRequest) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

type StudentLearningStatistics struct {
	// Types that are valid to be assigned to Data:
	//	*StudentLearningStatistics_ByTopic_
	Data isStudentLearningStatistics_Data `protobuf_oneof:"data"`
}

func (m *StudentLearningStatistics) Reset()      { *m = StudentLearningStatistics{} }
func (*StudentLearningStatistics) ProtoMessage() {}
func (*StudentLearningStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{28}
}
func (m *StudentLearningStatistics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StudentLearningStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StudentLearningStatistics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StudentLearningStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudentLearningStatistics.Merge(m, src)
}
func (m *StudentLearningStatistics) XXX_Size() int {
	return m.Size()
}
func (m *StudentLearningStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_StudentLearningStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_StudentLearningStatistics proto.InternalMessageInfo

type isStudentLearningStatistics_Data interface {
	isStudentLearningStatistics_Data()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type StudentLearningStatistics_ByTopic_ struct {
	ByTopic *StudentLearningStatistics_ByTopic `protobuf:"bytes,1,opt,name=by_topic,json=byTopic,proto3,oneof" json:"by_topic,omitempty"`
}

func (*StudentLearningStatistics_ByTopic_) isStudentLearningStatistics_Data() {}

func (m *StudentLearningStatistics) GetData() isStudentLearningStatistics_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *StudentLearningStatistics) GetByTopic() *StudentLearningStatistics_ByTopic {
	if x, ok := m.GetData().(*StudentLearningStatistics_ByTopic_); ok {
		return x.ByTopic
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StudentLearningStatistics) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StudentLearningStatistics_ByTopic_)(nil),
	}
}

type StudentLearningStatistics_ByTopic struct {
	StudentId   string           `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	StudentName string           `protobuf:"bytes,2,opt,name=student_name,json=studentName,proto3" json:"student_name,omitempty"`
	Completion  float32          `protobuf:"fixed32,4,opt,name=completion,proto3" json:"completion,omitempty"`
	TimeSpent   int32            `protobuf:"varint,5,opt,name=time_spent,json=timeSpent,proto3" json:"time_spent,omitempty"`
	Accuracy    float32          `protobuf:"fixed32,6,opt,name=accuracy,proto3" json:"accuracy,omitempty"`
	Date        *types.Timestamp `protobuf:"bytes,7,opt,name=date,proto3" json:"date,omitempty"`
}

func (m *StudentLearningStatistics_ByTopic) Reset()      { *m = StudentLearningStatistics_ByTopic{} }
func (*StudentLearningStatistics_ByTopic) ProtoMessage() {}
func (*StudentLearningStatistics_ByTopic) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{28, 0}
}
func (m *StudentLearningStatistics_ByTopic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StudentLearningStatistics_ByTopic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StudentLearningStatistics_ByTopic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StudentLearningStatistics_ByTopic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudentLearningStatistics_ByTopic.Merge(m, src)
}
func (m *StudentLearningStatistics_ByTopic) XXX_Size() int {
	return m.Size()
}
func (m *StudentLearningStatistics_ByTopic) XXX_DiscardUnknown() {
	xxx_messageInfo_StudentLearningStatistics_ByTopic.DiscardUnknown(m)
}

var xxx_messageInfo_StudentLearningStatistics_ByTopic proto.InternalMessageInfo

func (m *StudentLearningStatistics_ByTopic) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *StudentLearningStatistics_ByTopic) GetStudentName() string {
	if m != nil {
		return m.StudentName
	}
	return ""
}

func (m *StudentLearningStatistics_ByTopic) GetCompletion() float32 {
	if m != nil {
		return m.Completion
	}
	return 0
}

func (m *StudentLearningStatistics_ByTopic) GetTimeSpent() int32 {
	if m != nil {
		return m.TimeSpent
	}
	return 0
}

func (m *StudentLearningStatistics_ByTopic) GetAccuracy() float32 {
	if m != nil {
		return m.Accuracy
	}
	return 0
}

func (m *StudentLearningStatistics_ByTopic) GetDate() *types.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

type RetrieveClassLearningStatisticsResponse struct {
	Stats           []*StudentLearningStatistics `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
	TotalCompletion int32                        `protobuf:"varint,2,opt,name=total_completion,json=totalCompletion,proto3" json:"total_completion,omitempty"`
	AverageScore    float32                      `protobuf:"fixed32,3,opt,name=average_score,json=averageScore,proto3" json:"average_score,omitempty"`
	TotalSubmitted  int32                        `protobuf:"varint,4,opt,name=total_submitted,json=totalSubmitted,proto3" json:"total_submitted,omitempty"`
}

func (m *RetrieveClassLearningStatisticsResponse) Reset() {
	*m = RetrieveClassLearningStatisticsResponse{}
}
func (*RetrieveClassLearningStatisticsResponse) ProtoMessage() {}
func (*RetrieveClassLearningStatisticsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{29}
}
func (m *RetrieveClassLearningStatisticsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveClassLearningStatisticsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveClassLearningStatisticsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveClassLearningStatisticsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveClassLearningStatisticsResponse.Merge(m, src)
}
func (m *RetrieveClassLearningStatisticsResponse) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveClassLearningStatisticsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveClassLearningStatisticsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveClassLearningStatisticsResponse proto.InternalMessageInfo

func (m *RetrieveClassLearningStatisticsResponse) GetStats() []*StudentLearningStatistics {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *RetrieveClassLearningStatisticsResponse) GetTotalCompletion() int32 {
	if m != nil {
		return m.TotalCompletion
	}
	return 0
}

func (m *RetrieveClassLearningStatisticsResponse) GetAverageScore() float32 {
	if m != nil {
		return m.AverageScore
	}
	return 0
}

func (m *RetrieveClassLearningStatisticsResponse) GetTotalSubmitted() int32 {
	if m != nil {
		return m.TotalSubmitted
	}
	return 0
}

type RetrieveStudentLearningStatisticsRequest struct {
	ClassId   int32  `protobuf:"varint,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	TopicId   string `protobuf:"bytes,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	StudentId string `protobuf:"bytes,3,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
}

func (m *RetrieveStudentLearningStatisticsRequest) Reset() {
	*m = RetrieveStudentLearningStatisticsRequest{}
}
func (*RetrieveStudentLearningStatisticsRequest) ProtoMessage() {}
func (*RetrieveStudentLearningStatisticsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{30}
}
func (m *RetrieveStudentLearningStatisticsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveStudentLearningStatisticsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveStudentLearningStatisticsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveStudentLearningStatisticsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveStudentLearningStatisticsRequest.Merge(m, src)
}
func (m *RetrieveStudentLearningStatisticsRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveStudentLearningStatisticsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveStudentLearningStatisticsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveStudentLearningStatisticsRequest proto.InternalMessageInfo

func (m *RetrieveStudentLearningStatisticsRequest) GetClassId() int32 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

func (m *RetrieveStudentLearningStatisticsRequest) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

func (m *RetrieveStudentLearningStatisticsRequest) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

type RetrieveStudentLearningStatisticsResponse struct {
	Stats []*StudentLearningStatistics `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
}

func (m *RetrieveStudentLearningStatisticsResponse) Reset() {
	*m = RetrieveStudentLearningStatisticsResponse{}
}
func (*RetrieveStudentLearningStatisticsResponse) ProtoMessage() {}
func (*RetrieveStudentLearningStatisticsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{31}
}
func (m *RetrieveStudentLearningStatisticsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveStudentLearningStatisticsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveStudentLearningStatisticsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveStudentLearningStatisticsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveStudentLearningStatisticsResponse.Merge(m, src)
}
func (m *RetrieveStudentLearningStatisticsResponse) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveStudentLearningStatisticsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveStudentLearningStatisticsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveStudentLearningStatisticsResponse proto.InternalMessageInfo

func (m *RetrieveStudentLearningStatisticsResponse) GetStats() []*StudentLearningStatistics {
	if m != nil {
		return m.Stats
	}
	return nil
}

type RegisterTeacherRequest struct {
	Email      string  `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Name       string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SchoolName string  `protobuf:"bytes,3,opt,name=school_name,json=schoolName,proto3" json:"school_name,omitempty"`
	Country    Country `protobuf:"varint,4,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"`
}

func (m *RegisterTeacherRequest) Reset()      { *m = RegisterTeacherRequest{} }
func (*RegisterTeacherRequest) ProtoMessage() {}
func (*RegisterTeacherRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{32}
}
func (m *RegisterTeacherRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterTeacherRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterTeacherRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterTeacherRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterTeacherRequest.Merge(m, src)
}
func (m *RegisterTeacherRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterTeacherRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterTeacherRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterTeacherRequest proto.InternalMessageInfo

func (m *RegisterTeacherRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *RegisterTeacherRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RegisterTeacherRequest) GetSchoolName() string {
	if m != nil {
		return m.SchoolName
	}
	return ""
}

func (m *RegisterTeacherRequest) GetCountry() Country {
	if m != nil {
		return m.Country
	}
	return COUNTRY_NONE
}

type RegisterTeacherResponse struct {
	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (m *RegisterTeacherResponse) Reset()      { *m = RegisterTeacherResponse{} }
func (*RegisterTeacherResponse) ProtoMessage() {}
func (*RegisterTeacherResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{33}
}
func (m *RegisterTeacherResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterTeacherResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterTeacherResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterTeacherResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterTeacherResponse.Merge(m, src)
}
func (m *RegisterTeacherResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterTeacherResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterTeacherResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterTeacherResponse proto.InternalMessageInfo

func (m *RegisterTeacherResponse) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

type SubmissionScore struct {
	SubmissionId string  `protobuf:"bytes,1,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"`
	GivenScore   float32 `protobuf:"fixed32,2,opt,name=given_score,json=givenScore,proto3" json:"given_score,omitempty"`
	TotalScore   float32 `protobuf:"fixed32,3,opt,name=total_score,json=totalScore,proto3" json:"total_score,omitempty"`
	Notes        string  `protobuf:"bytes,4,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (m *SubmissionScore) Reset()      { *m = SubmissionScore{} }
func (*SubmissionScore) ProtoMessage() {}
func (*SubmissionScore) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{34}
}
func (m *SubmissionScore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmissionScore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmissionScore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmissionScore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmissionScore.Merge(m, src)
}
func (m *SubmissionScore) XXX_Size() int {
	return m.Size()
}
func (m *SubmissionScore) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmissionScore.DiscardUnknown(m)
}

var xxx_messageInfo_SubmissionScore proto.InternalMessageInfo

func (m *SubmissionScore) GetSubmissionId() string {
	if m != nil {
		return m.SubmissionId
	}
	return ""
}

func (m *SubmissionScore) GetGivenScore() float32 {
	if m != nil {
		return m.GivenScore
	}
	return 0
}

func (m *SubmissionScore) GetTotalScore() float32 {
	if m != nil {
		return m.TotalScore
	}
	return 0
}

func (m *SubmissionScore) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

type MarkTheSubmissionsRequest struct {
	Scores []*SubmissionScore `protobuf:"bytes,1,rep,name=scores,proto3" json:"scores,omitempty"`
}

func (m *MarkTheSubmissionsRequest) Reset()      { *m = MarkTheSubmissionsRequest{} }
func (*MarkTheSubmissionsRequest) ProtoMessage() {}
func (*MarkTheSubmissionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{35}
}
func (m *MarkTheSubmissionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarkTheSubmissionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarkTheSubmissionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarkTheSubmissionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarkTheSubmissionsRequest.Merge(m, src)
}
func (m *MarkTheSubmissionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *MarkTheSubmissionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MarkTheSubmissionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MarkTheSubmissionsRequest proto.InternalMessageInfo

func (m *MarkTheSubmissionsRequest) GetScores() []*SubmissionScore {
	if m != nil {
		return m.Scores
	}
	return nil
}

type MarkTheSubmissionsResponse struct {
	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (m *MarkTheSubmissionsResponse) Reset()      { *m = MarkTheSubmissionsResponse{} }
func (*MarkTheSubmissionsResponse) ProtoMessage() {}
func (*MarkTheSubmissionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{36}
}
func (m *MarkTheSubmissionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarkTheSubmissionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarkTheSubmissionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarkTheSubmissionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarkTheSubmissionsResponse.Merge(m, src)
}
func (m *MarkTheSubmissionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MarkTheSubmissionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MarkTheSubmissionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MarkTheSubmissionsResponse proto.InternalMessageInfo

func (m *MarkTheSubmissionsResponse) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

type CreateCustomAssignmentRequest struct {
	ClassId       int32              `protobuf:"varint,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	Country       Country            `protobuf:"varint,2,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"`
	Subject       Subject            `protobuf:"varint,3,opt,name=subject,proto3,enum=manabie.bob.Subject" json:"subject,omitempty"`
	Name          *types.StringValue `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Grade         *types.StringValue `protobuf:"bytes,5,opt,name=grade,proto3" json:"grade,omitempty"`
	CopiedTopicId *types.StringValue `protobuf:"bytes,6,opt,name=copied_topic_id,json=copiedTopicId,proto3" json:"copied_topic_id,omitempty"`
	Instruction   *types.StringValue `protobuf:"bytes,7,opt,name=instruction,proto3" json:"instruction,omitempty"`
	Attachments   []*Attachment      `protobuf:"bytes,8,rep,name=attachments,proto3" json:"attachments,omitempty"`
	EssayRequired bool               `protobuf:"varint,9,opt,name=essay_required,json=essayRequired,proto3" json:"essay_required,omitempty"`
	StartDate     *types.Timestamp   `protobuf:"bytes,10,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate       *types.Timestamp   `protobuf:"bytes,11,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// null will copy all lo ids
	SelectedLoIds []string `protobuf:"bytes,12,rep,name=selected_lo_ids,json=selectedLoIds,proto3" json:"selected_lo_ids,omitempty"`
}

func (m *CreateCustomAssignmentRequest) Reset()      { *m = CreateCustomAssignmentRequest{} }
func (*CreateCustomAssignmentRequest) ProtoMessage() {}
func (*CreateCustomAssignmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{37}
}
func (m *CreateCustomAssignmentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateCustomAssignmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateCustomAssignmentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateCustomAssignmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCustomAssignmentRequest.Merge(m, src)
}
func (m *CreateCustomAssignmentRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateCustomAssignmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCustomAssignmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCustomAssignmentRequest proto.InternalMessageInfo

func (m *CreateCustomAssignmentRequest) GetClassId() int32 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

func (m *CreateCustomAssignmentRequest) GetCountry() Country {
	if m != nil {
		return m.Country
	}
	return COUNTRY_NONE
}

func (m *CreateCustomAssignmentRequest) GetSubject() Subject {
	if m != nil {
		return m.Subject
	}
	return SUBJECT_NONE
}

func (m *CreateCustomAssignmentRequest) GetName() *types.StringValue {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *CreateCustomAssignmentRequest) GetGrade() *types.StringValue {
	if m != nil {
		return m.Grade
	}
	return nil
}

func (m *CreateCustomAssignmentRequest) GetCopiedTopicId() *types.StringValue {
	if m != nil {
		return m.CopiedTopicId
	}
	return nil
}

func (m *CreateCustomAssignmentRequest) GetInstruction() *types.StringValue {
	if m != nil {
		return m.Instruction
	}
	return nil
}

func (m *CreateCustomAssignmentRequest) GetAttachments() []*Attachment {
	if m != nil {
		return m.Attachments
	}
	return nil
}

func (m *CreateCustomAssignmentRequest) GetEssayRequired() bool {
	if m != nil {
		return m.EssayRequired
	}
	return false
}

func (m *CreateCustomAssignmentRequest) GetStartDate() *types.Timestamp {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *CreateCustomAssignmentRequest) GetEndDate() *types.Timestamp {
	if m != nil {
		return m.EndDate
	}
	return nil
}

func (m *CreateCustomAssignmentRequest) GetSelectedLoIds() []string {
	if m != nil {
		return m.SelectedLoIds
	}
	return nil
}

type CreateCustomAssignmentResponse struct {
	TopicId      string `protobuf:"bytes,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	AssignmentId string `protobuf:"bytes,2,opt,name=assignment_id,json=assignmentId,proto3" json:"assignment_id,omitempty"`
}

func (m *CreateCustomAssignmentResponse) Reset()      { *m = CreateCustomAssignmentResponse{} }
func (*CreateCustomAssignmentResponse) ProtoMessage() {}
func (*CreateCustomAssignmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{38}
}
func (m *CreateCustomAssignmentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateCustomAssignmentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateCustomAssignmentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateCustomAssignmentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCustomAssignmentResponse.Merge(m, src)
}
func (m *CreateCustomAssignmentResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateCustomAssignmentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCustomAssignmentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCustomAssignmentResponse proto.InternalMessageInfo

func (m *CreateCustomAssignmentResponse) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

func (m *CreateCustomAssignmentResponse) GetAssignmentId() string {
	if m != nil {
		return m.AssignmentId
	}
	return ""
}

type UpdateClassCodeRequest struct {
	ClassId int32 `protobuf:"varint,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
}

func (m *UpdateClassCodeRequest) Reset()      { *m = UpdateClassCodeRequest{} }
func (*UpdateClassCodeRequest) ProtoMessage() {}
func (*UpdateClassCodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{39}
}
func (m *UpdateClassCodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateClassCodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateClassCodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateClassCodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateClassCodeRequest.Merge(m, src)
}
func (m *UpdateClassCodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateClassCodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateClassCodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateClassCodeRequest proto.InternalMessageInfo

func (m *UpdateClassCodeRequest) GetClassId() int32 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

type UpdateClassCodeResponse struct {
	ClassId   int32  `protobuf:"varint,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	ClassCode string `protobuf:"bytes,2,opt,name=class_code,json=classCode,proto3" json:"class_code,omitempty"`
}

func (m *UpdateClassCodeResponse) Reset()      { *m = UpdateClassCodeResponse{} }
func (*UpdateClassCodeResponse) ProtoMessage() {}
func (*UpdateClassCodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{40}
}
func (m *UpdateClassCodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateClassCodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateClassCodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateClassCodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateClassCodeResponse.Merge(m, src)
}
func (m *UpdateClassCodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateClassCodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateClassCodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateClassCodeResponse proto.InternalMessageInfo

func (m *UpdateClassCodeResponse) GetClassId() int32 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

func (m *UpdateClassCodeResponse) GetClassCode() string {
	if m != nil {
		return m.ClassCode
	}
	return ""
}

type AddClassMemberRequest struct {
	ClassId    int32    `protobuf:"varint,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	TeacherIds []string `protobuf:"bytes,2,rep,name=teacher_ids,json=teacherIds,proto3" json:"teacher_ids,omitempty"`
}

func (m *AddClassMemberRequest) Reset()      { *m = AddClassMemberRequest{} }
func (*AddClassMemberRequest) ProtoMessage() {}
func (*AddClassMemberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{41}
}
func (m *AddClassMemberRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddClassMemberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddClassMemberRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddClassMemberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddClassMemberRequest.Merge(m, src)
}
func (m *AddClassMemberRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddClassMemberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddClassMemberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddClassMemberRequest proto.InternalMessageInfo

func (m *AddClassMemberRequest) GetClassId() int32 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

func (m *AddClassMemberRequest) GetTeacherIds() []string {
	if m != nil {
		return m.TeacherIds
	}
	return nil
}

type AddClassMemberResponse struct {
}

func (m *AddClassMemberResponse) Reset()      { *m = AddClassMemberResponse{} }
func (*AddClassMemberResponse) ProtoMessage() {}
func (*AddClassMemberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{42}
}
func (m *AddClassMemberResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddClassMemberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddClassMemberResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddClassMemberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddClassMemberResponse.Merge(m, src)
}
func (m *AddClassMemberResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddClassMemberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddClassMemberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddClassMemberResponse proto.InternalMessageInfo

type RetrieveScoreRequest struct {
	// Types that are valid to be assigned to Filter:
	//	*RetrieveScoreRequest_StudentId
	//	*RetrieveScoreRequest_ClassId
	Filter  isRetrieveScoreRequest_Filter `protobuf_oneof:"filter"`
	TopicId string                        `protobuf:"bytes,3,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *RetrieveScoreRequest) Reset()      { *m = RetrieveScoreRequest{} }
func (*RetrieveScoreRequest) ProtoMessage() {}
func (*RetrieveScoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{43}
}
func (m *RetrieveScoreRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveScoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveScoreRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveScoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveScoreRequest.Merge(m, src)
}
func (m *RetrieveScoreRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveScoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveScoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveScoreRequest proto.InternalMessageInfo

type isRetrieveScoreRequest_Filter interface {
	isRetrieveScoreRequest_Filter()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RetrieveScoreRequest_StudentId struct {
	StudentId string `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3,oneof" json:"student_id,omitempty"`
}
type RetrieveScoreRequest_ClassId struct {
	ClassId int32 `protobuf:"varint,2,opt,name=class_id,json=classId,proto3,oneof" json:"class_id,omitempty"`
}

func (*RetrieveScoreRequest_StudentId) isRetrieveScoreRequest_Filter() {}
func (*RetrieveScoreRequest_ClassId) isRetrieveScoreRequest_Filter()   {}

func (m *RetrieveScoreRequest) GetFilter() isRetrieveScoreRequest_Filter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *RetrieveScoreRequest) GetStudentId() string {
	if x, ok := m.GetFilter().(*RetrieveScoreRequest_StudentId); ok {
		return x.StudentId
	}
	return ""
}

func (m *RetrieveScoreRequest) GetClassId() int32 {
	if x, ok := m.GetFilter().(*RetrieveScoreRequest_ClassId); ok {
		return x.ClassId
	}
	return 0
}

func (m *RetrieveScoreRequest) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RetrieveScoreRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RetrieveScoreRequest_StudentId)(nil),
		(*RetrieveScoreRequest_ClassId)(nil),
	}
}

type RetrieveScoreResponse struct {
	Scores       []*RetrieveScoreResponse_Score `protobuf:"bytes,1,rep,name=scores,proto3" json:"scores,omitempty"`
	AverageScore float32                        `protobuf:"fixed32,2,opt,name=average_score,json=averageScore,proto3" json:"average_score,omitempty"`
}

func (m *RetrieveScoreResponse) Reset()      { *m = RetrieveScoreResponse{} }
func (*RetrieveScoreResponse) ProtoMessage() {}
func (*RetrieveScoreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{44}
}
func (m *RetrieveScoreResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveScoreResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveScoreResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveScoreResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveScoreResponse.Merge(m, src)
}
func (m *RetrieveScoreResponse) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveScoreResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveScoreResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveScoreResponse proto.InternalMessageInfo

func (m *RetrieveScoreResponse) GetScores() []*RetrieveScoreResponse_Score {
	if m != nil {
		return m.Scores
	}
	return nil
}

func (m *RetrieveScoreResponse) GetAverageScore() float32 {
	if m != nil {
		return m.AverageScore
	}
	return 0
}

type RetrieveScoreResponse_Score struct {
	StudentId  string  `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	GivenScore float32 `protobuf:"fixed32,2,opt,name=given_score,json=givenScore,proto3" json:"given_score,omitempty"`
	TotalScore float32 `protobuf:"fixed32,3,opt,name=total_score,json=totalScore,proto3" json:"total_score,omitempty"`
}

func (m *RetrieveScoreResponse_Score) Reset()      { *m = RetrieveScoreResponse_Score{} }
func (*RetrieveScoreResponse_Score) ProtoMessage() {}
func (*RetrieveScoreResponse_Score) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{44, 0}
}
func (m *RetrieveScoreResponse_Score) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveScoreResponse_Score) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveScoreResponse_Score.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveScoreResponse_Score) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveScoreResponse_Score.Merge(m, src)
}
func (m *RetrieveScoreResponse_Score) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveScoreResponse_Score) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveScoreResponse_Score.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveScoreResponse_Score proto.InternalMessageInfo

func (m *RetrieveScoreResponse_Score) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *RetrieveScoreResponse_Score) GetGivenScore() float32 {
	if m != nil {
		return m.GivenScore
	}
	return 0
}

func (m *RetrieveScoreResponse_Score) GetTotalScore() float32 {
	if m != nil {
		return m.TotalScore
	}
	return 0
}

type TeacherRetrieveStreamTokenRequest struct {
	LessonId string `protobuf:"bytes,1,opt,name=lesson_id,json=lessonId,proto3" json:"lesson_id,omitempty"`
}

func (m *TeacherRetrieveStreamTokenRequest) Reset()      { *m = TeacherRetrieveStreamTokenRequest{} }
func (*TeacherRetrieveStreamTokenRequest) ProtoMessage() {}
func (*TeacherRetrieveStreamTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{45}
}
func (m *TeacherRetrieveStreamTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeacherRetrieveStreamTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeacherRetrieveStreamTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeacherRetrieveStreamTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeacherRetrieveStreamTokenRequest.Merge(m, src)
}
func (m *TeacherRetrieveStreamTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *TeacherRetrieveStreamTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TeacherRetrieveStreamTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TeacherRetrieveStreamTokenRequest proto.InternalMessageInfo

func (m *TeacherRetrieveStreamTokenRequest) GetLessonId() string {
	if m != nil {
		return m.LessonId
	}
	return ""
}

type TeacherRetrieveStreamTokenResponse struct {
	StreamToken string `protobuf:"bytes,2,opt,name=stream_token,json=streamToken,proto3" json:"stream_token,omitempty"`
	VideoToken  string `protobuf:"bytes,1,opt,name=video_token,json=videoToken,proto3" json:"video_token,omitempty"`
}

func (m *TeacherRetrieveStreamTokenResponse) Reset()      { *m = TeacherRetrieveStreamTokenResponse{} }
func (*TeacherRetrieveStreamTokenResponse) ProtoMessage() {}
func (*TeacherRetrieveStreamTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{46}
}
func (m *TeacherRetrieveStreamTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeacherRetrieveStreamTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeacherRetrieveStreamTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeacherRetrieveStreamTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeacherRetrieveStreamTokenResponse.Merge(m, src)
}
func (m *TeacherRetrieveStreamTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *TeacherRetrieveStreamTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TeacherRetrieveStreamTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TeacherRetrieveStreamTokenResponse proto.InternalMessageInfo

func (m *TeacherRetrieveStreamTokenResponse) GetStreamToken() string {
	if m != nil {
		return m.StreamToken
	}
	return ""
}

func (m *TeacherRetrieveStreamTokenResponse) GetVideoToken() string {
	if m != nil {
		return m.VideoToken
	}
	return ""
}

type StudentRetrieveStreamTokenRequest struct {
	LessonId string `protobuf:"bytes,1,opt,name=lesson_id,json=lessonId,proto3" json:"lesson_id,omitempty"`
}

func (m *StudentRetrieveStreamTokenRequest) Reset()      { *m = StudentRetrieveStreamTokenRequest{} }
func (*StudentRetrieveStreamTokenRequest) ProtoMessage() {}
func (*StudentRetrieveStreamTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{47}
}
func (m *StudentRetrieveStreamTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StudentRetrieveStreamTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StudentRetrieveStreamTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StudentRetrieveStreamTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudentRetrieveStreamTokenRequest.Merge(m, src)
}
func (m *StudentRetrieveStreamTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *StudentRetrieveStreamTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StudentRetrieveStreamTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StudentRetrieveStreamTokenRequest proto.InternalMessageInfo

func (m *StudentRetrieveStreamTokenRequest) GetLessonId() string {
	if m != nil {
		return m.LessonId
	}
	return ""
}

type StudentRetrieveStreamTokenResponse struct {
	StreamToken string `protobuf:"bytes,2,opt,name=stream_token,json=streamToken,proto3" json:"stream_token,omitempty"`
}

func (m *StudentRetrieveStreamTokenResponse) Reset()      { *m = StudentRetrieveStreamTokenResponse{} }
func (*StudentRetrieveStreamTokenResponse) ProtoMessage() {}
func (*StudentRetrieveStreamTokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{48}
}
func (m *StudentRetrieveStreamTokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StudentRetrieveStreamTokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StudentRetrieveStreamTokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StudentRetrieveStreamTokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudentRetrieveStreamTokenResponse.Merge(m, src)
}
func (m *StudentRetrieveStreamTokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *StudentRetrieveStreamTokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StudentRetrieveStreamTokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StudentRetrieveStreamTokenResponse proto.InternalMessageInfo

func (m *StudentRetrieveStreamTokenResponse) GetStreamToken() string {
	if m != nil {
		return m.StreamToken
	}
	return ""
}

type EndLiveLessonRequest struct {
	LessonId string `protobuf:"bytes,1,opt,name=lesson_id,json=lessonId,proto3" json:"lesson_id,omitempty"`
}

func (m *EndLiveLessonRequest) Reset()      { *m = EndLiveLessonRequest{} }
func (*EndLiveLessonRequest) ProtoMessage() {}
func (*EndLiveLessonRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{49}
}
func (m *EndLiveLessonRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndLiveLessonRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndLiveLessonRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndLiveLessonRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndLiveLessonRequest.Merge(m, src)
}
func (m *EndLiveLessonRequest) XXX_Size() int {
	return m.Size()
}
func (m *EndLiveLessonRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EndLiveLessonRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EndLiveLessonRequest proto.InternalMessageInfo

func (m *EndLiveLessonRequest) GetLessonId() string {
	if m != nil {
		return m.LessonId
	}
	return ""
}

type EndLiveLessonResponse struct {
}

func (m *EndLiveLessonResponse) Reset()      { *m = EndLiveLessonResponse{} }
func (*EndLiveLessonResponse) ProtoMessage() {}
func (*EndLiveLessonResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{50}
}
func (m *EndLiveLessonResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EndLiveLessonResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EndLiveLessonResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EndLiveLessonResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EndLiveLessonResponse.Merge(m, src)
}
func (m *EndLiveLessonResponse) XXX_Size() int {
	return m.Size()
}
func (m *EndLiveLessonResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EndLiveLessonResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EndLiveLessonResponse proto.InternalMessageInfo

type JoinLessonRequest struct {
	LessonId string `protobuf:"bytes,1,opt,name=lesson_id,json=lessonId,proto3" json:"lesson_id,omitempty"`
}

func (m *JoinLessonRequest) Reset()      { *m = JoinLessonRequest{} }
func (*JoinLessonRequest) ProtoMessage() {}
func (*JoinLessonRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{51}
}
func (m *JoinLessonRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinLessonRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinLessonRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JoinLessonRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinLessonRequest.Merge(m, src)
}
func (m *JoinLessonRequest) XXX_Size() int {
	return m.Size()
}
func (m *JoinLessonRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinLessonRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JoinLessonRequest proto.InternalMessageInfo

func (m *JoinLessonRequest) GetLessonId() string {
	if m != nil {
		return m.LessonId
	}
	return ""
}

type JoinLessonResponse struct {
	StreamToken     string `protobuf:"bytes,1,opt,name=stream_token,json=streamToken,proto3" json:"stream_token,omitempty"`
	WhiteboardToken string `protobuf:"bytes,2,opt,name=whiteboard_token,json=whiteboardToken,proto3" json:"whiteboard_token,omitempty"`
	RoomId          string `protobuf:"bytes,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	VideoToken      string `protobuf:"bytes,4,opt,name=video_token,json=videoToken,proto3" json:"video_token,omitempty"`
}

func (m *JoinLessonResponse) Reset()      { *m = JoinLessonResponse{} }
func (*JoinLessonResponse) ProtoMessage() {}
func (*JoinLessonResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{52}
}
func (m *JoinLessonResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoinLessonResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoinLessonResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JoinLessonResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinLessonResponse.Merge(m, src)
}
func (m *JoinLessonResponse) XXX_Size() int {
	return m.Size()
}
func (m *JoinLessonResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinLessonResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JoinLessonResponse proto.InternalMessageInfo

func (m *JoinLessonResponse) GetStreamToken() string {
	if m != nil {
		return m.StreamToken
	}
	return ""
}

func (m *JoinLessonResponse) GetWhiteboardToken() string {
	if m != nil {
		return m.WhiteboardToken
	}
	return ""
}

func (m *JoinLessonResponse) GetRoomId() string {
	if m != nil {
		return m.RoomId
	}
	return ""
}

func (m *JoinLessonResponse) GetVideoToken() string {
	if m != nil {
		return m.VideoToken
	}
	return ""
}

type LeaveLessonRequest struct {
	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	LessonId string `protobuf:"bytes,2,opt,name=lesson_id,json=lessonId,proto3" json:"lesson_id,omitempty"`
}

func (m *LeaveLessonRequest) Reset()      { *m = LeaveLessonRequest{} }
func (*LeaveLessonRequest) ProtoMessage() {}
func (*LeaveLessonRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{53}
}
func (m *LeaveLessonRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeaveLessonRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeaveLessonRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeaveLessonRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaveLessonRequest.Merge(m, src)
}
func (m *LeaveLessonRequest) XXX_Size() int {
	return m.Size()
}
func (m *LeaveLessonRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaveLessonRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LeaveLessonRequest proto.InternalMessageInfo

func (m *LeaveLessonRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *LeaveLessonRequest) GetLessonId() string {
	if m != nil {
		return m.LessonId
	}
	return ""
}

type LeaveLessonResponse struct {
}

func (m *LeaveLessonResponse) Reset()      { *m = LeaveLessonResponse{} }
func (*LeaveLessonResponse) ProtoMessage() {}
func (*LeaveLessonResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{54}
}
func (m *LeaveLessonResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeaveLessonResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeaveLessonResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeaveLessonResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaveLessonResponse.Merge(m, src)
}
func (m *LeaveLessonResponse) XXX_Size() int {
	return m.Size()
}
func (m *LeaveLessonResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaveLessonResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LeaveLessonResponse proto.InternalMessageInfo

type TeacherAssignStudentWithTopicRequest struct {
	StudentIds []string         `protobuf:"bytes,1,rep,name=student_ids,json=studentIds,proto3" json:"student_ids,omitempty"`
	TopicId    string           `protobuf:"bytes,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	StartDate  *types.Timestamp `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate    *types.Timestamp `protobuf:"bytes,4,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	ClassId    int32            `protobuf:"varint,5,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
}

func (m *TeacherAssignStudentWithTopicRequest) Reset()      { *m = TeacherAssignStudentWithTopicRequest{} }
func (*TeacherAssignStudentWithTopicRequest) ProtoMessage() {}
func (*TeacherAssignStudentWithTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{55}
}
func (m *TeacherAssignStudentWithTopicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeacherAssignStudentWithTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeacherAssignStudentWithTopicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeacherAssignStudentWithTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeacherAssignStudentWithTopicRequest.Merge(m, src)
}
func (m *TeacherAssignStudentWithTopicRequest) XXX_Size() int {
	return m.Size()
}
func (m *TeacherAssignStudentWithTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TeacherAssignStudentWithTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TeacherAssignStudentWithTopicRequest proto.InternalMessageInfo

func (m *TeacherAssignStudentWithTopicRequest) GetStudentIds() []string {
	if m != nil {
		return m.StudentIds
	}
	return nil
}

func (m *TeacherAssignStudentWithTopicRequest) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

func (m *TeacherAssignStudentWithTopicRequest) GetStartDate() *types.Timestamp {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *TeacherAssignStudentWithTopicRequest) GetEndDate() *types.Timestamp {
	if m != nil {
		return m.EndDate
	}
	return nil
}

func (m *TeacherAssignStudentWithTopicRequest) GetClassId() int32 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

type TeacherAssignStudentWithTopicResponse struct {
	AssignmentId string `protobuf:"bytes,1,opt,name=assignment_id,json=assignmentId,proto3" json:"assignment_id,omitempty"`
}

func (m *TeacherAssignStudentWithTopicResponse) Reset()      { *m = TeacherAssignStudentWithTopicResponse{} }
func (*TeacherAssignStudentWithTopicResponse) ProtoMessage() {}
func (*TeacherAssignStudentWithTopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{56}
}
func (m *TeacherAssignStudentWithTopicResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeacherAssignStudentWithTopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeacherAssignStudentWithTopicResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeacherAssignStudentWithTopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeacherAssignStudentWithTopicResponse.Merge(m, src)
}
func (m *TeacherAssignStudentWithTopicResponse) XXX_Size() int {
	return m.Size()
}
func (m *TeacherAssignStudentWithTopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TeacherAssignStudentWithTopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TeacherAssignStudentWithTopicResponse proto.InternalMessageInfo

func (m *TeacherAssignStudentWithTopicResponse) GetAssignmentId() string {
	if m != nil {
		return m.AssignmentId
	}
	return ""
}

type Comment struct {
	Comment  string          `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment,omitempty"`
	Duration *types.Duration `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *Comment) Reset()      { *m = Comment{} }
func (*Comment) ProtoMessage() {}
func (*Comment) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{57}
}
func (m *Comment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Comment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Comment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Comment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Comment.Merge(m, src)
}
func (m *Comment) XXX_Size() int {
	return m.Size()
}
func (m *Comment) XXX_DiscardUnknown() {
	xxx_messageInfo_Comment.DiscardUnknown(m)
}

var xxx_messageInfo_Comment proto.InternalMessageInfo

func (m *Comment) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *Comment) GetDuration() *types.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

type ConvertedImage struct {
	Width    int32  `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height   int32  `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	ImageUrl string `protobuf:"bytes,3,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
}

func (m *ConvertedImage) Reset()      { *m = ConvertedImage{} }
func (*ConvertedImage) ProtoMessage() {}
func (*ConvertedImage) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{58}
}
func (m *ConvertedImage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConvertedImage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConvertedImage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConvertedImage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConvertedImage.Merge(m, src)
}
func (m *ConvertedImage) XXX_Size() int {
	return m.Size()
}
func (m *ConvertedImage) XXX_DiscardUnknown() {
	xxx_messageInfo_ConvertedImage.DiscardUnknown(m)
}

var xxx_messageInfo_ConvertedImage proto.InternalMessageInfo

func (m *ConvertedImage) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *ConvertedImage) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ConvertedImage) GetImageUrl() string {
	if m != nil {
		return m.ImageUrl
	}
	return ""
}

type Media struct {
	MediaId   string            `protobuf:"bytes,1,opt,name=media_id,json=mediaId,proto3" json:"media_id,omitempty"`
	Name      string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Resource  string            `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	Comments  []*Comment        `protobuf:"bytes,4,rep,name=comments,proto3" json:"comments,omitempty"`
	Type      MediaType         `protobuf:"varint,5,opt,name=type,proto3,enum=manabie.bob.MediaType" json:"type,omitempty"`
	CreatedAt *types.Timestamp  `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *types.Timestamp  `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Images    []*ConvertedImage `protobuf:"bytes,8,rep,name=images,proto3" json:"images,omitempty"`
}

func (m *Media) Reset()      { *m = Media{} }
func (*Media) ProtoMessage() {}
func (*Media) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{59}
}
func (m *Media) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Media) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Media.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Media) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Media.Merge(m, src)
}
func (m *Media) XXX_Size() int {
	return m.Size()
}
func (m *Media) XXX_DiscardUnknown() {
	xxx_messageInfo_Media.DiscardUnknown(m)
}

var xxx_messageInfo_Media proto.InternalMessageInfo

func (m *Media) GetMediaId() string {
	if m != nil {
		return m.MediaId
	}
	return ""
}

func (m *Media) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Media) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

func (m *Media) GetComments() []*Comment {
	if m != nil {
		return m.Comments
	}
	return nil
}

func (m *Media) GetType() MediaType {
	if m != nil {
		return m.Type
	}
	return MEDIA_TYPE_NONE
}

func (m *Media) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Media) GetUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Media) GetImages() []*ConvertedImage {
	if m != nil {
		return m.Images
	}
	return nil
}

type RetrieveMediaRequest struct {
	MediaIds []string `protobuf:"bytes,1,rep,name=media_ids,json=mediaIds,proto3" json:"media_ids,omitempty"`
}

func (m *RetrieveMediaRequest) Reset()      { *m = RetrieveMediaRequest{} }
func (*RetrieveMediaRequest) ProtoMessage() {}
func (*RetrieveMediaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{60}
}
func (m *RetrieveMediaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveMediaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveMediaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveMediaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveMediaRequest.Merge(m, src)
}
func (m *RetrieveMediaRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveMediaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveMediaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveMediaRequest proto.InternalMessageInfo

func (m *RetrieveMediaRequest) GetMediaIds() []string {
	if m != nil {
		return m.MediaIds
	}
	return nil
}

type RetrieveMediaResponse struct {
	Media []*Media `protobuf:"bytes,1,rep,name=media,proto3" json:"media,omitempty"`
}

func (m *RetrieveMediaResponse) Reset()      { *m = RetrieveMediaResponse{} }
func (*RetrieveMediaResponse) ProtoMessage() {}
func (*RetrieveMediaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{61}
}
func (m *RetrieveMediaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveMediaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveMediaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveMediaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveMediaResponse.Merge(m, src)
}
func (m *RetrieveMediaResponse) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveMediaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveMediaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveMediaResponse proto.InternalMessageInfo

func (m *RetrieveMediaResponse) GetMedia() []*Media {
	if m != nil {
		return m.Media
	}
	return nil
}

type UpsertMediaRequest struct {
	Media []*Media `protobuf:"bytes,1,rep,name=media,proto3" json:"media,omitempty"`
}

func (m *UpsertMediaRequest) Reset()      { *m = UpsertMediaRequest{} }
func (*UpsertMediaRequest) ProtoMessage() {}
func (*UpsertMediaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{62}
}
func (m *UpsertMediaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertMediaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertMediaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertMediaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertMediaRequest.Merge(m, src)
}
func (m *UpsertMediaRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpsertMediaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertMediaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertMediaRequest proto.InternalMessageInfo

func (m *UpsertMediaRequest) GetMedia() []*Media {
	if m != nil {
		return m.Media
	}
	return nil
}

type UpsertMediaResponse struct {
	MediaIds []string `protobuf:"bytes,1,rep,name=media_ids,json=mediaIds,proto3" json:"media_ids,omitempty"`
}

func (m *UpsertMediaResponse) Reset()      { *m = UpsertMediaResponse{} }
func (*UpsertMediaResponse) ProtoMessage() {}
func (*UpsertMediaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe9a8fd49cd72500, []int{63}
}
func (m *UpsertMediaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertMediaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertMediaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertMediaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertMediaResponse.Merge(m, src)
}
func (m *UpsertMediaResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpsertMediaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertMediaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertMediaResponse proto.InternalMessageInfo

func (m *UpsertMediaResponse) GetMediaIds() []string {
	if m != nil {
		return m.MediaIds
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateClassRequest)(nil), "manabie.bob.CreateClassRequest")
	golang_proto.RegisterType((*CreateClassRequest)(nil), "manabie.bob.CreateClassRequest")
	proto.RegisterType((*CreateClassResponse)(nil), "manabie.bob.CreateClassResponse")
	golang_proto.RegisterType((*CreateClassResponse)(nil), "manabie.bob.CreateClassResponse")
	proto.RegisterType((*EditClassRequest)(nil), "manabie.bob.EditClassRequest")
	golang_proto.RegisterType((*EditClassRequest)(nil), "manabie.bob.EditClassRequest")
	proto.RegisterType((*EditClassResponse)(nil), "manabie.bob.EditClassResponse")
	golang_proto.RegisterType((*EditClassResponse)(nil), "manabie.bob.EditClassResponse")
	proto.RegisterType((*JoinClassRequest)(nil), "manabie.bob.JoinClassRequest")
	golang_proto.RegisterType((*JoinClassRequest)(nil), "manabie.bob.JoinClassRequest")
	proto.RegisterType((*JoinClassResponse)(nil), "manabie.bob.JoinClassResponse")
	golang_proto.RegisterType((*JoinClassResponse)(nil), "manabie.bob.JoinClassResponse")
	proto.RegisterType((*ClassEntity)(nil), "manabie.bob.ClassEntity")
	golang_proto.RegisterType((*ClassEntity)(nil), "manabie.bob.ClassEntity")
	proto.RegisterType((*RemoveMemberRequest)(nil), "manabie.bob.RemoveMemberRequest")
	golang_proto.RegisterType((*RemoveMemberRequest)(nil), "manabie.bob.RemoveMemberRequest")
	proto.RegisterType((*RemoveMemberResponse)(nil), "manabie.bob.RemoveMemberResponse")
	golang_proto.RegisterType((*RemoveMemberResponse)(nil), "manabie.bob.RemoveMemberResponse")
	proto.RegisterType((*LeaveClassRequest)(nil), "manabie.bob.LeaveClassRequest")
	golang_proto.RegisterType((*LeaveClassRequest)(nil), "manabie.bob.LeaveClassRequest")
	proto.RegisterType((*LeaveClassResponse)(nil), "manabie.bob.LeaveClassResponse")
	golang_proto.RegisterType((*LeaveClassResponse)(nil), "manabie.bob.LeaveClassResponse")
	proto.RegisterType((*AssignPresetStudyPlanResponse)(nil), "manabie.bob.AssignPresetStudyPlanResponse")
	golang_proto.RegisterType((*AssignPresetStudyPlanResponse)(nil), "manabie.bob.AssignPresetStudyPlanResponse")
	proto.RegisterType((*RetrieveAssignedPresetStudyPlanRequest)(nil), "manabie.bob.RetrieveAssignedPresetStudyPlanRequest")
	golang_proto.RegisterType((*RetrieveAssignedPresetStudyPlanRequest)(nil), "manabie.bob.RetrieveAssignedPresetStudyPlanRequest")
	proto.RegisterType((*RetrieveAssignedPresetStudyPlanResponse)(nil), "manabie.bob.RetrieveAssignedPresetStudyPlanResponse")
	golang_proto.RegisterType((*RetrieveAssignedPresetStudyPlanResponse)(nil), "manabie.bob.RetrieveAssignedPresetStudyPlanResponse")
	proto.RegisterType((*RetrieveClassMemberRequest)(nil), "manabie.bob.RetrieveClassMemberRequest")
	golang_proto.RegisterType((*RetrieveClassMemberRequest)(nil), "manabie.bob.RetrieveClassMemberRequest")
	proto.RegisterType((*RetrieveClassMemberResponse)(nil), "manabie.bob.RetrieveClassMemberResponse")
	golang_proto.RegisterType((*RetrieveClassMemberResponse)(nil), "manabie.bob.RetrieveClassMemberResponse")
	proto.RegisterType((*RetrieveClassMemberResponse_Member)(nil), "manabie.bob.RetrieveClassMemberResponse.Member")
	golang_proto.RegisterType((*RetrieveClassMemberResponse_Member)(nil), "manabie.bob.RetrieveClassMemberResponse.Member")
	proto.RegisterType((*TeacherAssignClassWithTopicRequest)(nil), "manabie.bob.TeacherAssignClassWithTopicRequest")
	golang_proto.RegisterType((*TeacherAssignClassWithTopicRequest)(nil), "manabie.bob.TeacherAssignClassWithTopicRequest")
	proto.RegisterType((*TeacherAssignClassWithTopicResponse)(nil), "manabie.bob.TeacherAssignClassWithTopicResponse")
	golang_proto.RegisterType((*TeacherAssignClassWithTopicResponse)(nil), "manabie.bob.TeacherAssignClassWithTopicResponse")
	proto.RegisterType((*RetrieveActiveClassAssignmentRequest)(nil), "manabie.bob.RetrieveActiveClassAssignmentRequest")
	golang_proto.RegisterType((*RetrieveActiveClassAssignmentRequest)(nil), "manabie.bob.RetrieveActiveClassAssignmentRequest")
	proto.RegisterType((*Assignment)(nil), "manabie.bob.Assignment")
	golang_proto.RegisterType((*Assignment)(nil), "manabie.bob.Assignment")
	proto.RegisterType((*RetrieveActiveClassAssignmentResponse)(nil), "manabie.bob.RetrieveActiveClassAssignmentResponse")
	golang_proto.RegisterType((*RetrieveActiveClassAssignmentResponse)(nil), "manabie.bob.RetrieveActiveClassAssignmentResponse")
	proto.RegisterType((*RetrievePastClassAssignmentRequest)(nil), "manabie.bob.RetrievePastClassAssignmentRequest")
	golang_proto.RegisterType((*RetrievePastClassAssignmentRequest)(nil), "manabie.bob.RetrievePastClassAssignmentRequest")
	proto.RegisterType((*RetrievePastClassAssignmentResponse)(nil), "manabie.bob.RetrievePastClassAssignmentResponse")
	golang_proto.RegisterType((*RetrievePastClassAssignmentResponse)(nil), "manabie.bob.RetrievePastClassAssignmentResponse")
	proto.RegisterType((*RemoveAssignedTopicRequest)(nil), "manabie.bob.RemoveAssignedTopicRequest")
	golang_proto.RegisterType((*RemoveAssignedTopicRequest)(nil), "manabie.bob.RemoveAssignedTopicRequest")
	proto.RegisterType((*RemoveAssignedTopicResponse)(nil), "manabie.bob.RemoveAssignedTopicResponse")
	golang_proto.RegisterType((*RemoveAssignedTopicResponse)(nil), "manabie.bob.RemoveAssignedTopicResponse")
	proto.RegisterType((*EditAssignedTopicRequest)(nil), "manabie.bob.EditAssignedTopicRequest")
	golang_proto.RegisterType((*EditAssignedTopicRequest)(nil), "manabie.bob.EditAssignedTopicRequest")
	proto.RegisterType((*EditAssignedTopicResponse)(nil), "manabie.bob.EditAssignedTopicResponse")
	golang_proto.RegisterType((*EditAssignedTopicResponse)(nil), "manabie.bob.EditAssignedTopicResponse")
	proto.RegisterType((*RetrieveClassLearningStatisticsRequest)(nil), "manabie.bob.RetrieveClassLearningStatisticsRequest")
	golang_proto.RegisterType((*RetrieveClassLearningStatisticsRequest)(nil), "manabie.bob.RetrieveClassLearningStatisticsRequest")
	proto.RegisterType((*StudentLearningStatistics)(nil), "manabie.bob.StudentLearningStatistics")
	golang_proto.RegisterType((*StudentLearningStatistics)(nil), "manabie.bob.StudentLearningStatistics")
	proto.RegisterType((*StudentLearningStatistics_ByTopic)(nil), "manabie.bob.StudentLearningStatistics.ByTopic")
	golang_proto.RegisterType((*StudentLearningStatistics_ByTopic)(nil), "manabie.bob.StudentLearningStatistics.ByTopic")
	proto.RegisterType((*RetrieveClassLearningStatisticsResponse)(nil), "manabie.bob.RetrieveClassLearningStatisticsResponse")
	golang_proto.RegisterType((*RetrieveClassLearningStatisticsResponse)(nil), "manabie.bob.RetrieveClassLearningStatisticsResponse")
	proto.RegisterType((*RetrieveStudentLearningStatisticsRequest)(nil), "manabie.bob.RetrieveStudentLearningStatisticsRequest")
	golang_proto.RegisterType((*RetrieveStudentLearningStatisticsRequest)(nil), "manabie.bob.RetrieveStudentLearningStatisticsRequest")
	proto.RegisterType((*RetrieveStudentLearningStatisticsResponse)(nil), "manabie.bob.RetrieveStudentLearningStatisticsResponse")
	golang_proto.RegisterType((*RetrieveStudentLearningStatisticsResponse)(nil), "manabie.bob.RetrieveStudentLearningStatisticsResponse")
	proto.RegisterType((*RegisterTeacherRequest)(nil), "manabie.bob.RegisterTeacherRequest")
	golang_proto.RegisterType((*RegisterTeacherRequest)(nil), "manabie.bob.RegisterTeacherRequest")
	proto.RegisterType((*RegisterTeacherResponse)(nil), "manabie.bob.RegisterTeacherResponse")
	golang_proto.RegisterType((*RegisterTeacherResponse)(nil), "manabie.bob.RegisterTeacherResponse")
	proto.RegisterType((*SubmissionScore)(nil), "manabie.bob.SubmissionScore")
	golang_proto.RegisterType((*SubmissionScore)(nil), "manabie.bob.SubmissionScore")
	proto.RegisterType((*MarkTheSubmissionsRequest)(nil), "manabie.bob.MarkTheSubmissionsRequest")
	golang_proto.RegisterType((*MarkTheSubmissionsRequest)(nil), "manabie.bob.MarkTheSubmissionsRequest")
	proto.RegisterType((*MarkTheSubmissionsResponse)(nil), "manabie.bob.MarkTheSubmissionsResponse")
	golang_proto.RegisterType((*MarkTheSubmissionsResponse)(nil), "manabie.bob.MarkTheSubmissionsResponse")
	proto.RegisterType((*CreateCustomAssignmentRequest)(nil), "manabie.bob.CreateCustomAssignmentRequest")
	golang_proto.RegisterType((*CreateCustomAssignmentRequest)(nil), "manabie.bob.CreateCustomAssignmentRequest")
	proto.RegisterType((*CreateCustomAssignmentResponse)(nil), "manabie.bob.CreateCustomAssignmentResponse")
	golang_proto.RegisterType((*CreateCustomAssignmentResponse)(nil), "manabie.bob.CreateCustomAssignmentResponse")
	proto.RegisterType((*UpdateClassCodeRequest)(nil), "manabie.bob.UpdateClassCodeRequest")
	golang_proto.RegisterType((*UpdateClassCodeRequest)(nil), "manabie.bob.UpdateClassCodeRequest")
	proto.RegisterType((*UpdateClassCodeResponse)(nil), "manabie.bob.UpdateClassCodeResponse")
	golang_proto.RegisterType((*UpdateClassCodeResponse)(nil), "manabie.bob.UpdateClassCodeResponse")
	proto.RegisterType((*AddClassMemberRequest)(nil), "manabie.bob.AddClassMemberRequest")
	golang_proto.RegisterType((*AddClassMemberRequest)(nil), "manabie.bob.AddClassMemberRequest")
	proto.RegisterType((*AddClassMemberResponse)(nil), "manabie.bob.AddClassMemberResponse")
	golang_proto.RegisterType((*AddClassMemberResponse)(nil), "manabie.bob.AddClassMemberResponse")
	proto.RegisterType((*RetrieveScoreRequest)(nil), "manabie.bob.RetrieveScoreRequest")
	golang_proto.RegisterType((*RetrieveScoreRequest)(nil), "manabie.bob.RetrieveScoreRequest")
	proto.RegisterType((*RetrieveScoreResponse)(nil), "manabie.bob.RetrieveScoreResponse")
	golang_proto.RegisterType((*RetrieveScoreResponse)(nil), "manabie.bob.RetrieveScoreResponse")
	proto.RegisterType((*RetrieveScoreResponse_Score)(nil), "manabie.bob.RetrieveScoreResponse.Score")
	golang_proto.RegisterType((*RetrieveScoreResponse_Score)(nil), "manabie.bob.RetrieveScoreResponse.Score")
	proto.RegisterType((*TeacherRetrieveStreamTokenRequest)(nil), "manabie.bob.TeacherRetrieveStreamTokenRequest")
	golang_proto.RegisterType((*TeacherRetrieveStreamTokenRequest)(nil), "manabie.bob.TeacherRetrieveStreamTokenRequest")
	proto.RegisterType((*TeacherRetrieveStreamTokenResponse)(nil), "manabie.bob.TeacherRetrieveStreamTokenResponse")
	golang_proto.RegisterType((*TeacherRetrieveStreamTokenResponse)(nil), "manabie.bob.TeacherRetrieveStreamTokenResponse")
	proto.RegisterType((*StudentRetrieveStreamTokenRequest)(nil), "manabie.bob.StudentRetrieveStreamTokenRequest")
	golang_proto.RegisterType((*StudentRetrieveStreamTokenRequest)(nil), "manabie.bob.StudentRetrieveStreamTokenRequest")
	proto.RegisterType((*StudentRetrieveStreamTokenResponse)(nil), "manabie.bob.StudentRetrieveStreamTokenResponse")
	golang_proto.RegisterType((*StudentRetrieveStreamTokenResponse)(nil), "manabie.bob.StudentRetrieveStreamTokenResponse")
	proto.RegisterType((*EndLiveLessonRequest)(nil), "manabie.bob.EndLiveLessonRequest")
	golang_proto.RegisterType((*EndLiveLessonRequest)(nil), "manabie.bob.EndLiveLessonRequest")
	proto.RegisterType((*EndLiveLessonResponse)(nil), "manabie.bob.EndLiveLessonResponse")
	golang_proto.RegisterType((*EndLiveLessonResponse)(nil), "manabie.bob.EndLiveLessonResponse")
	proto.RegisterType((*JoinLessonRequest)(nil), "manabie.bob.JoinLessonRequest")
	golang_proto.RegisterType((*JoinLessonRequest)(nil), "manabie.bob.JoinLessonRequest")
	proto.RegisterType((*JoinLessonResponse)(nil), "manabie.bob.JoinLessonResponse")
	golang_proto.RegisterType((*JoinLessonResponse)(nil), "manabie.bob.JoinLessonResponse")
	proto.RegisterType((*LeaveLessonRequest)(nil), "manabie.bob.LeaveLessonRequest")
	golang_proto.RegisterType((*LeaveLessonRequest)(nil), "manabie.bob.LeaveLessonRequest")
	proto.RegisterType((*LeaveLessonResponse)(nil), "manabie.bob.LeaveLessonResponse")
	golang_proto.RegisterType((*LeaveLessonResponse)(nil), "manabie.bob.LeaveLessonResponse")
	proto.RegisterType((*TeacherAssignStudentWithTopicRequest)(nil), "manabie.bob.TeacherAssignStudentWithTopicRequest")
	golang_proto.RegisterType((*TeacherAssignStudentWithTopicRequest)(nil), "manabie.bob.TeacherAssignStudentWithTopicRequest")
	proto.RegisterType((*TeacherAssignStudentWithTopicResponse)(nil), "manabie.bob.TeacherAssignStudentWithTopicResponse")
	golang_proto.RegisterType((*TeacherAssignStudentWithTopicResponse)(nil), "manabie.bob.TeacherAssignStudentWithTopicResponse")
	proto.RegisterType((*Comment)(nil), "manabie.bob.Comment")
	golang_proto.RegisterType((*Comment)(nil), "manabie.bob.Comment")
	proto.RegisterType((*ConvertedImage)(nil), "manabie.bob.ConvertedImage")
	golang_proto.RegisterType((*ConvertedImage)(nil), "manabie.bob.ConvertedImage")
	proto.RegisterType((*Media)(nil), "manabie.bob.Media")
	golang_proto.RegisterType((*Media)(nil), "manabie.bob.Media")
	proto.RegisterType((*RetrieveMediaRequest)(nil), "manabie.bob.RetrieveMediaRequest")
	golang_proto.RegisterType((*RetrieveMediaRequest)(nil), "manabie.bob.RetrieveMediaRequest")
	proto.RegisterType((*RetrieveMediaResponse)(nil), "manabie.bob.RetrieveMediaResponse")
	golang_proto.RegisterType((*RetrieveMediaResponse)(nil), "manabie.bob.RetrieveMediaResponse")
	proto.RegisterType((*UpsertMediaRequest)(nil), "manabie.bob.UpsertMediaRequest")
	golang_proto.RegisterType((*UpsertMediaRequest)(nil), "manabie.bob.UpsertMediaRequest")
	proto.RegisterType((*UpsertMediaResponse)(nil), "manabie.bob.UpsertMediaResponse")
	golang_proto.RegisterType((*UpsertMediaResponse)(nil), "manabie.bob.UpsertMediaResponse")
}

func init() { proto.RegisterFile("class.proto", fileDescriptor_fe9a8fd49cd72500) }
func init() { golang_proto.RegisterFile("class.proto", fileDescriptor_fe9a8fd49cd72500) }

var fileDescriptor_fe9a8fd49cd72500 = []byte{
	// 2866 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x3a, 0x4d, 0x6c, 0x1b, 0xc7,
	0xd5, 0x5c, 0x4a, 0xfc, 0xd1, 0xa3, 0x25, 0xd9, 0x63, 0x59, 0xa6, 0xd6, 0x11, 0x25, 0xaf, 0x62,
	0x5b, 0xc9, 0x87, 0x50, 0x8a, 0x14, 0x7f, 0x45, 0xd0, 0x20, 0x88, 0xac, 0x04, 0x89, 0x1c, 0xa5,
	0x4d, 0x57, 0x72, 0x5a, 0x24, 0x45, 0xd9, 0xe5, 0xee, 0x84, 0x5c, 0x9b, 0xdc, 0x65, 0x76, 0x66,
	0xa5, 0xea, 0x10, 0xb4, 0x08, 0x50, 0xa0, 0x40, 0xd1, 0xb4, 0x45, 0x0f, 0xbd, 0xf4, 0x5a, 0xa0,
	0xd7, 0x5e, 0x7a, 0xee, 0xb1, 0x05, 0x7a, 0xc8, 0x29, 0x08, 0xd0, 0x4b, 0x22, 0x5f, 0x72, 0x6b,
	0x8e, 0x3d, 0x16, 0xf3, 0xb3, 0xcb, 0xfd, 0x25, 0x57, 0x4e, 0x03, 0xf4, 0xc6, 0x79, 0xfb, 0xe6,
	0xfd, 0xcc, 0x7b, 0xf3, 0xe6, 0xfd, 0x10, 0x1a, 0xe6, 0xc0, 0x20, 0xa4, 0x3d, 0xf2, 0x5c, 0xea,
	0xa2, 0xc6, 0xd0, 0x70, 0x8c, 0xae, 0x8d, 0xdb, 0x5d, 0xb7, 0xab, 0x02, 0x76, 0xfc, 0xa1, 0xf8,
	0xa0, 0xce, 0x9b, 0xae, 0xef, 0x11, 0x2c, 0xf1, 0xd4, 0x56, 0xcf, 0x75, 0x7b, 0x03, 0xbc, 0xc5,
	0x57, 0x5d, 0xff, 0xfd, 0x2d, 0xcb, 0xf7, 0x0c, 0x6a, 0xbb, 0x8e, 0xfc, 0xbe, 0x96, 0xfc, 0x4e,
	0xed, 0x21, 0x26, 0xd4, 0x18, 0x8e, 0xf2, 0x08, 0x9c, 0x7a, 0xc6, 0x68, 0x84, 0xbd, 0x80, 0xc1,
	0x73, 0x3d, 0x9b, 0xf6, 0xfd, 0x6e, 0xdb, 0x74, 0x87, 0x5b, 0x3d, 0xb7, 0xe7, 0x8e, 0x11, 0xd9,
	0x8a, 0x2f, 0xf8, 0x2f, 0x81, 0xae, 0x7d, 0xaa, 0x00, 0xda, 0xf7, 0xb0, 0x41, 0xf1, 0x3e, 0xd3,
	0x46, 0xc7, 0x1f, 0xf8, 0x98, 0x50, 0x74, 0x03, 0xe6, 0x88, 0xd9, 0x77, 0xdd, 0x41, 0xc7, 0xb6,
	0x9a, 0xca, 0xba, 0xb2, 0x59, 0xd1, 0xeb, 0x02, 0x70, 0x60, 0xa1, 0x55, 0x00, 0xae, 0x7a, 0xc7,
	0x31, 0x86, 0xb8, 0x59, 0x5e, 0x57, 0x36, 0xe7, 0xf4, 0x39, 0x0e, 0xf9, 0x8e, 0x31, 0xc4, 0x68,
	0x19, 0xaa, 0x3d, 0xcf, 0xb0, 0x30, 0x69, 0xce, 0xac, 0xcf, 0x6c, 0xce, 0xe9, 0x72, 0x85, 0xb6,
	0xa1, 0x4e, 0xfc, 0xee, 0x43, 0x6c, 0x52, 0xd2, 0x9c, 0x5d, 0x9f, 0xd9, 0x5c, 0xd8, 0x59, 0x6a,
	0x47, 0x4e, 0xad, 0x7d, 0x24, 0x3e, 0xea, 0x21, 0x16, 0x5a, 0x85, 0xba, 0x7b, 0xea, 0x60, 0x8f,
	0x09, 0x51, 0x61, 0x6c, 0xee, 0x95, 0x9b, 0x8a, 0x5e, 0xe3, 0xb0, 0x03, 0x8b, 0x09, 0x19, 0x7c,
	0x26, 0xcd, 0x2a, 0xe7, 0x55, 0x97, 0xdf, 0x88, 0xb6, 0x0d, 0x57, 0x63, 0x7a, 0x91, 0x91, 0xeb,
	0x10, 0x8c, 0x56, 0xa0, 0x2e, 0x64, 0x0f, 0xf5, 0xaa, 0xf1, 0xf5, 0x81, 0xa5, 0x1d, 0xc2, 0xe5,
	0xd7, 0x2c, 0x9b, 0xc6, 0xce, 0x21, 0x1f, 0x7d, 0xca, 0x29, 0x68, 0x57, 0xe1, 0x4a, 0x84, 0x9a,
	0xe0, 0xae, 0x3d, 0x0f, 0x97, 0xef, 0xbb, 0xb6, 0x13, 0x63, 0x11, 0xd2, 0x31, 0x5d, 0x0b, 0x73,
	0x26, 0x01, 0x9d, 0x7d, 0xd7, 0xc2, 0x5a, 0x1b, 0xae, 0x44, 0xb6, 0x4c, 0xd7, 0xe2, 0xd7, 0x65,
	0x68, 0x70, 0xe4, 0xd7, 0x1c, 0x6a, 0xd3, 0x33, 0xb4, 0x00, 0xe5, 0x10, 0xa9, 0x6c, 0x5b, 0x08,
	0xc1, 0x6c, 0x44, 0x60, 0xfe, 0x9b, 0x59, 0xcc, 0x38, 0x31, 0xa8, 0xe1, 0x35, 0x67, 0x38, 0x54,
	0xae, 0xe2, 0x5e, 0x30, 0x9b, 0xe7, 0x05, 0x5c, 0xee, 0x4a, 0x42, 0x6e, 0xd4, 0x86, 0x9a, 0xb4,
	0x23, 0x37, 0x4d, 0x9e, 0xb1, 0x03, 0xa4, 0x88, 0xd7, 0xd4, 0x62, 0x5e, 0x13, 0x33, 0x72, 0x3d,
	0x6e, 0x64, 0xb4, 0x01, 0xf3, 0xd4, 0xa5, 0xc6, 0xa0, 0x43, 0xa8, 0x6f, 0x61, 0x87, 0x36, 0xe7,
	0xd6, 0x95, 0xcd, 0x79, 0xfd, 0x12, 0x07, 0x1e, 0x09, 0x98, 0xf6, 0x26, 0x5c, 0xd5, 0xf1, 0xd0,
	0x3d, 0xc1, 0x6f, 0xe1, 0x61, 0x17, 0x7b, 0x05, 0x4c, 0xbb, 0x02, 0x75, 0x9f, 0x48, 0x96, 0x65,
	0xce, 0xb2, 0xc6, 0xd6, 0xcc, 0xad, 0x96, 0x61, 0x29, 0x4e, 0x4c, 0x5a, 0xb6, 0x0d, 0x57, 0x0e,
	0xb1, 0x71, 0x82, 0x0b, 0x7a, 0x8f, 0xb6, 0x04, 0x28, 0x8a, 0x2f, 0xa9, 0xac, 0xc1, 0xea, 0x1e,
	0x21, 0x76, 0xcf, 0x79, 0xdb, 0xc3, 0x04, 0x53, 0xa6, 0xc1, 0xd9, 0xdb, 0x03, 0xc3, 0x09, 0x11,
	0xf6, 0xe1, 0xb6, 0x8e, 0xa9, 0x67, 0xe3, 0x13, 0x2c, 0x10, 0xb1, 0x95, 0x42, 0x9d, 0xca, 0xdb,
	0x87, 0x3b, 0x53, 0x89, 0x48, 0x47, 0xbb, 0x0f, 0x68, 0xc4, 0x3f, 0xf1, 0x13, 0x3e, 0xeb, 0x8c,
	0x06, 0x86, 0x43, 0x9a, 0xca, 0xfa, 0xcc, 0x66, 0x63, 0xe7, 0xa9, 0x98, 0x41, 0x93, 0x14, 0x2e,
	0x8f, 0xe2, 0x00, 0xa2, 0x7d, 0x0b, 0xd4, 0x80, 0x2d, 0xd7, 0xba, 0xa8, 0x39, 0xb4, 0x7f, 0x2b,
	0x70, 0x23, 0x73, 0xa7, 0x14, 0xf2, 0x00, 0x6a, 0x43, 0x0e, 0x21, 0x4d, 0xe0, 0x92, 0x6d, 0xc5,
	0x24, 0x9b, 0xb0, 0xb5, 0x2d, 0x97, 0xc1, 0x7e, 0xf5, 0x57, 0x0a, 0x54, 0x05, 0x0c, 0x5d, 0x87,
	0x9a, 0x74, 0x02, 0x79, 0x29, 0xab, 0xc2, 0x07, 0xd0, 0x5d, 0x00, 0xfe, 0xa1, 0xe7, 0xb9, 0xfe,
	0x88, 0xdf, 0xa3, 0x85, 0x9d, 0xe5, 0x18, 0xc7, 0x07, 0x04, 0x7b, 0xaf, 0xb3, 0xaf, 0xfa, 0x9c,
	0x1f, 0xfc, 0x44, 0xbb, 0x50, 0x7b, 0xe8, 0xda, 0x4e, 0xc7, 0xa0, 0xfc, 0x96, 0x35, 0x76, 0xd4,
	0xb6, 0x08, 0xe5, 0xed, 0x20, 0x42, 0xb7, 0x8f, 0x83, 0x58, 0xaf, 0x57, 0x19, 0xea, 0x1e, 0xd5,
	0xfe, 0xa1, 0x80, 0x76, 0x8c, 0x0d, 0xb3, 0x8f, 0x3d, 0x61, 0x2a, 0xae, 0xc4, 0xf7, 0x6d, 0xda,
	0x3f, 0x76, 0x47, 0xb6, 0x59, 0xcc, 0x97, 0x29, 0x43, 0x65, 0x9f, 0xc4, 0x9d, 0xaf, 0xf1, 0xf5,
	0x81, 0x85, 0x5e, 0x04, 0x20, 0xd4, 0xf0, 0x68, 0xc7, 0x32, 0x28, 0x2e, 0x20, 0xd4, 0x1c, 0xc7,
	0x7e, 0xd5, 0xa0, 0x18, 0xdd, 0x85, 0x3a, 0x76, 0x2c, 0xb1, 0x71, 0x76, 0xea, 0xc6, 0x1a, 0x76,
	0x2c, 0xb6, 0x4d, 0xbb, 0x0f, 0x1b, 0x13, 0xb5, 0x91, 0x06, 0xdd, 0x80, 0x79, 0x83, 0x7f, 0x1f,
	0x62, 0x87, 0x8e, 0x0d, 0x70, 0x69, 0x0c, 0x3c, 0xb0, 0xb4, 0x47, 0xf0, 0x74, 0xe8, 0xc5, 0x26,
	0xb5, 0xa5, 0x7d, 0xf7, 0x42, 0x94, 0x02, 0x67, 0xb3, 0x04, 0x95, 0x81, 0x3d, 0xb4, 0x29, 0x3f,
	0x98, 0x8a, 0x2e, 0x16, 0x2c, 0x42, 0x8e, 0x8c, 0x9e, 0x38, 0x90, 0x8a, 0xce, 0x7f, 0x6b, 0x7f,
	0x2c, 0x03, 0x8c, 0x49, 0x17, 0x12, 0x10, 0x6d, 0x42, 0x85, 0x9f, 0x34, 0xa7, 0xde, 0xd8, 0x41,
	0x31, 0x17, 0x11, 0x0a, 0x0b, 0x04, 0x74, 0x17, 0xaa, 0x84, 0x1a, 0xd4, 0x27, 0x9c, 0xe7, 0xc2,
	0xce, 0x6a, 0x0c, 0x75, 0xcc, 0xf7, 0x88, 0x23, 0xe9, 0x12, 0x39, 0x61, 0xbf, 0xd9, 0x27, 0xb5,
	0x5f, 0xa5, 0xb0, 0xfd, 0xd0, 0x1a, 0x34, 0x64, 0xa4, 0x8d, 0xbc, 0xb9, 0x20, 0x41, 0x2c, 0x3c,
	0xfe, 0x04, 0x6e, 0x4d, 0x31, 0x8a, 0x34, 0xf1, 0x8b, 0xd0, 0x18, 0x1f, 0x56, 0x10, 0x51, 0xae,
	0xe7, 0xe8, 0xad, 0x47, 0x71, 0x99, 0xd5, 0x78, 0x7c, 0x0f, 0xac, 0xc6, 0x17, 0x9a, 0x0d, 0x5a,
	0xc0, 0xf9, 0x6d, 0x83, 0xd0, 0x6f, 0xd2, 0x19, 0x4e, 0x60, 0x63, 0x22, 0xab, 0x6f, 0x4a, 0xc5,
	0x3d, 0x16, 0x40, 0xd9, 0xdb, 0x13, 0x44, 0xed, 0x58, 0x0c, 0x28, 0x74, 0x69, 0x56, 0x59, 0x24,
	0xcd, 0x20, 0x21, 0x9f, 0x97, 0x3f, 0x2b, 0xd0, 0x64, 0x59, 0xcb, 0x13, 0x33, 0x48, 0xf8, 0x64,
	0xf9, 0x49, 0x7d, 0x72, 0xa6, 0x78, 0x4c, 0x79, 0x1d, 0x56, 0x32, 0x44, 0x96, 0x36, 0x78, 0x16,
	0xae, 0x38, 0xf8, 0xb4, 0x93, 0x25, 0xf7, 0xa2, 0x83, 0x4f, 0xf7, 0xa2, 0x67, 0xf3, 0xa3, 0xf1,
	0xdb, 0xca, 0x4d, 0x7a, 0x88, 0x0d, 0xcf, 0xb1, 0x9d, 0x1e, 0xbb, 0x75, 0x36, 0xa1, 0xb6, 0x49,
	0xbe, 0x56, 0xb8, 0xd5, 0xfe, 0x5e, 0x86, 0x15, 0x99, 0x93, 0xa4, 0x49, 0xa3, 0x37, 0xa1, 0xde,
	0x3d, 0xeb, 0x88, 0x80, 0xa1, 0x70, 0xed, 0xdb, 0xf1, 0x84, 0x29, 0x6f, 0x67, 0xfb, 0xde, 0x19,
	0xd7, 0xf9, 0x8d, 0x92, 0x5e, 0xeb, 0x8a, 0x9f, 0xea, 0xa7, 0x0a, 0xd4, 0x24, 0x98, 0xe5, 0x69,
	0xe3, 0x3b, 0x1b, 0xe4, 0x97, 0xe1, 0x95, 0x45, 0x37, 0xe1, 0x52, 0xf0, 0x39, 0x92, 0x17, 0x06,
	0xd7, 0x9c, 0x27, 0xf4, 0x2d, 0x00, 0xd3, 0x1d, 0x8e, 0x06, 0x98, 0xd5, 0x29, 0x3c, 0xce, 0x94,
	0xf5, 0x08, 0x84, 0x71, 0x60, 0x55, 0x4a, 0x87, 0x8c, 0x58, 0x0a, 0x56, 0xe1, 0x07, 0x32, 0xc7,
	0x20, 0x47, 0x0c, 0x80, 0x54, 0xa8, 0x1b, 0xa6, 0xe9, 0x7b, 0x86, 0x79, 0xd6, 0xac, 0xf2, 0xcd,
	0xe1, 0x1a, 0xb5, 0x61, 0x96, 0xdb, 0xbb, 0x36, 0xd5, 0xde, 0x1c, 0xef, 0x5e, 0x95, 0xe3, 0x1b,
	0xda, 0xe7, 0xca, 0x38, 0x87, 0xc9, 0x35, 0x96, 0xf4, 0x81, 0x97, 0xa0, 0xc2, 0x02, 0x66, 0x70,
	0x03, 0x6f, 0x17, 0x3b, 0x56, 0x5d, 0x6c, 0x42, 0xcf, 0xc0, 0x65, 0x91, 0x62, 0x46, 0x8e, 0x40,
	0xdc, 0xca, 0x45, 0x0e, 0xdf, 0x1f, 0x9f, 0x03, 0xbb, 0x20, 0x27, 0xd8, 0x33, 0x7a, 0xb8, 0x43,
	0x4c, 0xd7, 0x13, 0x5e, 0x5c, 0xd6, 0x2f, 0x49, 0xe0, 0x11, 0x83, 0xa1, 0x3b, 0xb0, 0x28, 0x53,
	0x56, 0xbf, 0x3b, 0xb4, 0x29, 0xc5, 0x41, 0x66, 0xbd, 0x20, 0x92, 0xd6, 0x00, 0xaa, 0xfd, 0x14,
	0x36, 0x03, 0x0d, 0xf3, 0x85, 0xfc, 0x5a, 0xef, 0x7f, 0xdc, 0x33, 0x66, 0x12, 0x9e, 0xa1, 0xd9,
	0xf0, 0x4c, 0x01, 0x01, 0xfe, 0x1b, 0x87, 0xac, 0xfd, 0x4e, 0x81, 0x65, 0x1d, 0xf7, 0x6c, 0x42,
	0xb1, 0x27, 0x13, 0x84, 0x40, 0xb5, 0x25, 0xa8, 0xe0, 0xa1, 0x61, 0x0f, 0xa4, 0xe7, 0x8a, 0x45,
	0x66, 0x15, 0xc3, 0x1e, 0x27, 0x51, 0xad, 0xf0, 0x4f, 0x42, 0x1f, 0x10, 0x20, 0xee, 0xc7, 0x6d,
	0xa8, 0x99, 0xae, 0xef, 0x50, 0xef, 0x8c, 0x1f, 0x79, 0xb2, 0x24, 0xd9, 0x17, 0xdf, 0xf4, 0x00,
	0x49, 0x7b, 0x11, 0xae, 0xa7, 0x84, 0x92, 0xea, 0xb6, 0x00, 0x88, 0x6f, 0x9a, 0x98, 0x90, 0xf7,
	0x7d, 0x21, 0x5a, 0x5d, 0x8f, 0x40, 0xb4, 0x8f, 0x15, 0x58, 0xe4, 0xa6, 0x24, 0xc4, 0x76, 0x1d,
	0x61, 0xf9, 0x0d, 0x98, 0x27, 0x21, 0x28, 0x12, 0x3f, 0xc7, 0xc0, 0x03, 0x8b, 0x29, 0xd1, 0xb3,
	0x4f, 0xb0, 0x23, 0x3d, 0xa8, 0x2c, 0x2e, 0x1b, 0x07, 0x09, 0x2a, 0x6b, 0xd0, 0x90, 0xfe, 0x13,
	0x71, 0x31, 0x10, 0xbe, 0xc3, 0x11, 0x96, 0xa0, 0xe2, 0xb8, 0x14, 0x13, 0xae, 0xe3, 0x9c, 0x2e,
	0x16, 0xda, 0xf7, 0x60, 0xe5, 0x2d, 0xc3, 0x7b, 0x74, 0xdc, 0xc7, 0x63, 0xb1, 0x42, 0xf7, 0x79,
	0x01, 0xaa, 0x9c, 0x5a, 0x76, 0x66, 0x9f, 0xd0, 0x43, 0x97, 0xb8, 0xda, 0x4b, 0xa0, 0x66, 0x91,
	0x2c, 0x78, 0x42, 0x1f, 0x55, 0x60, 0x55, 0x16, 0xe8, 0x3e, 0xa1, 0xee, 0xf0, 0x42, 0x6f, 0x75,
	0xc4, 0x92, 0xe5, 0x02, 0x96, 0x8c, 0x16, 0xa3, 0x33, 0x19, 0xf8, 0xa9, 0x62, 0x74, 0x5b, 0xba,
	0x97, 0xc8, 0xa9, 0x9e, 0x4a, 0x85, 0xa5, 0x23, 0xea, 0xd9, 0x4e, 0xef, 0x1d, 0x63, 0xe0, 0x63,
	0xe9, 0x7c, 0x3b, 0x50, 0xe1, 0x05, 0xab, 0xcc, 0xa6, 0x26, 0x6f, 0x11, 0xa8, 0xe8, 0x55, 0x58,
	0x34, 0xdd, 0x91, 0x8d, 0xad, 0x4e, 0x78, 0x43, 0xab, 0x05, 0x76, 0xcf, 0x8b, 0x4d, 0xc7, 0xf2,
	0x16, 0xbf, 0x0c, 0x0d, 0xdb, 0x21, 0xd4, 0xf3, 0x4d, 0x1e, 0x9b, 0x6a, 0x05, 0x28, 0x44, 0x37,
	0xf0, 0x34, 0x85, 0x52, 0xc3, 0xec, 0x8b, 0x34, 0xa5, 0x9e, 0x95, 0xa6, 0x84, 0xdf, 0xf5, 0x28,
	0x2e, 0xba, 0x05, 0x0b, 0x98, 0x10, 0xe3, 0xac, 0xe3, 0xe1, 0x0f, 0x7c, 0xdb, 0xc3, 0x16, 0xaf,
	0xbf, 0xeb, 0xfa, 0x3c, 0x87, 0xea, 0x12, 0x98, 0xc8, 0x09, 0xe0, 0x49, 0x73, 0x82, 0x46, 0xf1,
	0x3c, 0xf5, 0x36, 0x2c, 0x12, 0x3c, 0xc0, 0x26, 0xc5, 0x56, 0x67, 0xe0, 0xf2, 0x5c, 0xf5, 0x12,
	0xcf, 0x55, 0xe7, 0x03, 0xf0, 0xa1, 0xcb, 0xd2, 0xd5, 0x1f, 0x43, 0x2b, 0xcf, 0x07, 0xc7, 0x9d,
	0x96, 0xd0, 0x38, 0x4a, 0x3c, 0x7c, 0xa6, 0xf2, 0xa1, 0x72, 0x46, 0xc2, 0xb5, 0x0b, 0xcb, 0x0f,
	0x46, 0x56, 0xd0, 0x86, 0xda, 0x77, 0x2d, 0x5c, 0xa0, 0xe0, 0x3d, 0x82, 0xeb, 0xa9, 0x4d, 0x53,
	0x3b, 0x3f, 0x89, 0x86, 0x4c, 0x39, 0xd9, 0x48, 0x3a, 0x82, 0x6b, 0x7b, 0x96, 0x75, 0xa1, 0xca,
	0x9b, 0x07, 0x1b, 0x11, 0xf9, 0x22, 0xbd, 0x10, 0x90, 0x20, 0x76, 0x80, 0x4d, 0x58, 0x4e, 0x12,
	0x95, 0xa9, 0xe4, 0x19, 0x2c, 0x85, 0xaf, 0x07, 0x0f, 0x1b, 0x92, 0xdb, 0x5a, 0x3a, 0x1d, 0x79,
	0xa3, 0x14, 0x4d, 0x48, 0x6e, 0x44, 0xc4, 0xe1, 0x0f, 0x2d, 0x4b, 0x6c, 0xb2, 0x5e, 0xb3, 0x99,
	0x98, 0x39, 0xee, 0xd5, 0xa1, 0xfa, 0xbe, 0x3d, 0xa0, 0xd8, 0xd3, 0xbe, 0x54, 0xe0, 0x5a, 0x82,
	0xb7, 0x3c, 0xbd, 0x57, 0x12, 0x81, 0x6e, 0x33, 0xb3, 0x51, 0x10, 0xdb, 0xd3, 0x8e, 0x05, 0xbd,
	0xf4, 0x1b, 0x5f, 0x4e, 0xbf, 0xf1, 0x6a, 0x1f, 0x2a, 0x22, 0x16, 0x4f, 0xc9, 0xbd, 0xbe, 0x76,
	0xb0, 0xd7, 0x5e, 0x81, 0x9b, 0xe1, 0xd3, 0x14, 0x3c, 0xd5, 0x1e, 0x36, 0x86, 0xc7, 0xee, 0x23,
	0xec, 0x44, 0x9a, 0xb9, 0x03, 0x4c, 0x48, 0xf4, 0xd1, 0xa9, 0x0b, 0xc0, 0x81, 0xa5, 0xf5, 0xc3,
	0x06, 0x43, 0x26, 0x05, 0x79, 0x70, 0x3c, 0x4b, 0x64, 0xe0, 0x0e, 0x65, 0xf0, 0x71, 0x96, 0x18,
	0xa2, 0x32, 0x59, 0x4f, 0x6c, 0x0b, 0xbb, 0x12, 0x43, 0xf0, 0x01, 0x0e, 0xe2, 0x08, 0x4c, 0x56,
	0x99, 0x08, 0x3c, 0xa9, 0xac, 0xaf, 0x83, 0x36, 0x89, 0x42, 0x61, 0x59, 0xb5, 0x5d, 0x58, 0x7a,
	0xcd, 0xb1, 0x0e, 0xed, 0x13, 0x7c, 0xc8, 0x69, 0x17, 0xe2, 0x7e, 0x1d, 0xae, 0x25, 0x36, 0x49,
	0x57, 0xdf, 0x16, 0x2d, 0xda, 0x0b, 0x90, 0xfa, 0x83, 0x02, 0x28, 0xba, 0x25, 0x47, 0x72, 0x25,
	0x7d, 0xca, 0xcf, 0xc0, 0xe5, 0xd3, 0xbe, 0x4d, 0x71, 0xd7, 0x35, 0x3c, 0x2b, 0xa6, 0xe0, 0xe2,
	0x18, 0x2e, 0x50, 0xaf, 0x43, 0xcd, 0x73, 0xdd, 0xe1, 0xf8, 0xaa, 0x54, 0xd9, 0x52, 0xb8, 0x5d,
	0xd4, 0x52, 0xb3, 0x29, 0x4b, 0xdd, 0x97, 0xcd, 0xc9, 0xb8, 0x46, 0xb9, 0x0d, 0xb1, 0x98, 0xaa,
	0xe5, 0x84, 0xaa, 0xd7, 0xe0, 0x6a, 0x8c, 0x96, 0x3c, 0xb3, 0x7f, 0x29, 0xf0, 0x74, 0xac, 0x15,
	0x24, 0x0d, 0x9b, 0x6a, 0x6d, 0x25, 0x5a, 0x0e, 0x4a, 0xb2, 0xe5, 0xf0, 0x3f, 0xd5, 0xe0, 0x8a,
	0xc5, 0xd2, 0x4a, 0x72, 0xbc, 0x70, 0x6b, 0x8a, 0xc2, 0x17, 0xe9, 0x7e, 0xbd, 0x0b, 0xb5, 0x7d,
	0x77, 0xc8, 0x9b, 0x51, 0x4d, 0x96, 0x0c, 0xf1, 0x9f, 0xc1, 0x0b, 0x25, 0x97, 0x4c, 0x89, 0x60,
	0xbc, 0x24, 0x4b, 0xf1, 0x95, 0x94, 0x12, 0xaf, 0x4a, 0x04, 0x3d, 0x44, 0xd5, 0xde, 0x83, 0x85,
	0x7d, 0xd7, 0x39, 0xc1, 0x1e, 0xc5, 0xd6, 0xc1, 0xd0, 0xe8, 0xf1, 0x9c, 0xf2, 0xd4, 0xb6, 0x68,
	0x5f, 0xbe, 0x0f, 0x62, 0x81, 0x96, 0xa1, 0xda, 0xc7, 0x76, 0xaf, 0x1f, 0xb4, 0x4c, 0xe4, 0x8a,
	0xf9, 0x83, 0xcd, 0xb6, 0x75, 0x7c, 0x6f, 0x20, 0x5d, 0xaf, 0xce, 0x01, 0x0f, 0xbc, 0x81, 0xf6,
	0xcf, 0x32, 0x54, 0xde, 0xc2, 0x96, 0x6d, 0xb0, 0xb3, 0x1a, 0xb2, 0x1f, 0x91, 0xa7, 0x95, 0xaf,
	0x0f, 0xb2, 0x87, 0x14, 0x2a, 0xd4, 0x3d, 0x4c, 0x5c, 0xdf, 0x33, 0x83, 0xdc, 0x3e, 0x5c, 0xa3,
	0x6d, 0xa8, 0x4b, 0x9d, 0xc5, 0x68, 0xa9, 0x91, 0x4a, 0x08, 0xf9, 0x47, 0x3d, 0xc4, 0x42, 0xcf,
	0xc2, 0x2c, 0x3d, 0x1b, 0x89, 0x74, 0x2d, 0xd9, 0xbe, 0xe5, 0xe2, 0x1d, 0x9f, 0x8d, 0xb0, 0xce,
	0x71, 0x98, 0x1b, 0x99, 0x3c, 0x4b, 0xb0, 0x3a, 0x06, 0x95, 0x29, 0xda, 0x44, 0x37, 0x92, 0xd8,
	0x7b, 0x94, 0x6d, 0xf5, 0xf9, 0x4b, 0xce, 0xb7, 0x4e, 0xaf, 0x72, 0xe7, 0x24, 0xf6, 0x1e, 0x45,
	0xbb, 0x50, 0xe5, 0x87, 0x16, 0xa4, 0x64, 0x37, 0x12, 0x1a, 0x45, 0x0d, 0xa4, 0x4b, 0x54, 0x16,
	0xd8, 0x82, 0xd0, 0xc8, 0xb5, 0x88, 0x44, 0xa3, 0xe0, 0xac, 0x83, 0x3b, 0x54, 0x97, 0x87, 0x4d,
	0xb4, 0xbd, 0xf1, 0x73, 0x29, 0x37, 0x49, 0x4f, 0xdc, 0x84, 0x0a, 0x47, 0x92, 0xaf, 0x25, 0x4a,
	0x9f, 0x92, 0x2e, 0x10, 0xb4, 0x97, 0x01, 0x3d, 0x18, 0x11, 0xec, 0xd1, 0x18, 0xd7, 0xe2, 0xfb,
	0x77, 0xe0, 0x6a, 0x6c, 0xbf, 0x14, 0x60, 0x92, 0xd8, 0x3b, 0x7f, 0x69, 0x42, 0x85, 0x67, 0x1e,
	0xc8, 0x80, 0xc5, 0x44, 0xa1, 0x86, 0x36, 0x12, 0x2f, 0x7b, 0x56, 0x6d, 0xa9, 0x3e, 0x3d, 0x19,
	0x49, 0x86, 0xaa, 0x99, 0x5f, 0x94, 0x15, 0xa4, 0x43, 0x23, 0x32, 0x4e, 0x44, 0x6b, 0x71, 0x63,
	0xa4, 0x06, 0xa8, 0xea, 0x7a, 0x3e, 0x82, 0x24, 0x5b, 0x42, 0x87, 0x30, 0x17, 0x8e, 0x08, 0x51,
	0xbc, 0xe7, 0x9b, 0x1c, 0x44, 0xaa, 0xad, 0xbc, 0xcf, 0x51, 0x6a, 0xe1, 0xa0, 0x30, 0x41, 0x2d,
	0x39, 0x73, 0x4c, 0x50, 0x4b, 0xcd, 0x17, 0xb5, 0x12, 0x7a, 0x00, 0x97, 0xa2, 0x73, 0x2e, 0xb4,
	0x9e, 0x38, 0xaa, 0xd4, 0x3c, 0x4d, 0xbd, 0x39, 0x01, 0x23, 0x24, 0xfb, 0x5d, 0x80, 0xf1, 0xd8,
	0x0b, 0xc5, 0xc5, 0x48, 0xcd, 0xcf, 0xd4, 0xb5, 0xdc, 0xef, 0x21, 0xc1, 0x8f, 0x15, 0x58, 0x9b,
	0x32, 0xcc, 0x42, 0xbb, 0x99, 0x59, 0xde, 0xe4, 0xf9, 0x99, 0xfa, 0xc2, 0xc5, 0x36, 0x85, 0x02,
	0x3d, 0x84, 0xab, 0x19, 0x03, 0x27, 0x74, 0x67, 0xfa, 0x48, 0x4a, 0xf0, 0xdd, 0x2c, 0x3a, 0xbb,
	0xd2, 0x4a, 0xe8, 0x23, 0x05, 0x6e, 0x4c, 0x98, 0xa7, 0xa0, 0xf8, 0x1c, 0x6c, 0xfa, 0x1c, 0x49,
	0xdd, 0x2e, 0xbe, 0x21, 0x14, 0x62, 0x18, 0x8c, 0x57, 0x63, 0x1d, 0xd8, 0x94, 0xc2, 0x79, 0x7d,
	0xeb, 0x94, 0xc2, 0xf9, 0xdd, 0x69, 0x7e, 0x11, 0x7b, 0x62, 0xae, 0x1e, 0x67, 0x76, 0x2b, 0x75,
	0x3b, 0x32, 0x59, 0xdd, 0x9e, 0x86, 0x16, 0x65, 0xf4, 0x4b, 0x05, 0x56, 0x27, 0xce, 0x32, 0xd0,
	0xf3, 0xd9, 0x2e, 0x32, 0x61, 0x18, 0xa5, 0xee, 0x5c, 0x64, 0x4b, 0x54, 0x9a, 0x9f, 0x47, 0x66,
	0xa0, 0x19, 0x43, 0x07, 0x94, 0x3d, 0xf2, 0xcc, 0x9f, 0x84, 0x24, 0x4c, 0x5d, 0x60, 0x9e, 0x21,
	0xe4, 0xf8, 0x6d, 0xe4, 0xbe, 0xe5, 0x34, 0x5e, 0x73, 0xee, 0xdb, 0xe4, 0x9e, 0x7a, 0xce, 0x7d,
	0x9b, 0xd2, 0xdb, 0x15, 0x32, 0xfd, 0x5e, 0x81, 0x9b, 0x53, 0x3b, 0x95, 0xe8, 0x6e, 0x76, 0xad,
	0x37, 0xa5, 0xb5, 0xaa, 0xfe, 0xff, 0x45, 0xb7, 0x45, 0x25, 0x3b, 0x81, 0xe5, 0xec, 0xfe, 0x02,
	0x7a, 0x36, 0xeb, 0x7d, 0xc8, 0x6e, 0x84, 0xa9, 0xff, 0x57, 0x08, 0x37, 0xca, 0xf7, 0x21, 0xa0,
	0x74, 0x6b, 0x0e, 0xc5, 0xdd, 0x3f, 0xb7, 0x1d, 0xa8, 0xde, 0x99, 0x8a, 0x17, 0xe5, 0x65, 0xc0,
	0xe2, 0xa1, 0x4d, 0x68, 0x94, 0x51, 0xfc, 0xf1, 0x4d, 0x7c, 0xcd, 0x7e, 0x7c, 0x53, 0x48, 0x51,
	0x16, 0xef, 0xc1, 0x7c, 0xac, 0x36, 0x47, 0x37, 0x27, 0xd5, 0xed, 0x82, 0xbc, 0x36, 0xbd, 0xb4,
	0x17, 0xc4, 0x7f, 0x08, 0x8b, 0x89, 0x66, 0x4b, 0x42, 0xfe, 0xec, 0xfe, 0x4d, 0x42, 0xfe, 0xbc,
	0x7e, 0xcd, 0x7b, 0xb0, 0x10, 0x6f, 0x90, 0xa0, 0xb8, 0x60, 0x99, 0x2d, 0x19, 0x75, 0x63, 0x22,
	0x4e, 0x18, 0x7a, 0x3f, 0x04, 0x35, 0xbf, 0x76, 0x47, 0xed, 0xac, 0x60, 0x9e, 0x5f, 0x7a, 0xab,
	0x5b, 0x85, 0xf1, 0xa5, 0x6e, 0x1f, 0x82, 0x9a, 0x5f, 0x8e, 0xa3, 0xcc, 0xf1, 0x55, 0x61, 0xf6,
	0x05, 0xea, 0xfc, 0x77, 0x60, 0x3e, 0x56, 0x8f, 0x27, 0xbc, 0x22, 0xab, 0xc0, 0x4f, 0x78, 0x45,
	0x66, 0x39, 0xcf, 0x72, 0x94, 0x71, 0x6d, 0x8e, 0xd2, 0xa9, 0x52, 0x9c, 0xe2, 0x5a, 0xee, 0xf7,
	0xd0, 0x4c, 0x3a, 0x34, 0x22, 0x25, 0x30, 0xca, 0xc8, 0x6a, 0xe2, 0x24, 0xd7, 0xf3, 0x11, 0x42,
	0x9a, 0xec, 0x75, 0x9a, 0x58, 0x4e, 0x26, 0x5e, 0xa7, 0x22, 0xb5, 0x76, 0xe2, 0x75, 0x2a, 0x54,
	0xad, 0x8a, 0x3b, 0xf4, 0x83, 0xf1, 0x05, 0x15, 0xb5, 0x5d, 0xf6, 0x05, 0x8d, 0x16, 0x07, 0x39,
	0x17, 0x34, 0x96, 0xff, 0x8b, 0xb3, 0x8b, 0x14, 0x06, 0x89, 0xb3, 0x4b, 0x97, 0x1c, 0x89, 0xb3,
	0xcb, 0xa8, 0x29, 0xb4, 0xd2, 0xbd, 0xc1, 0x27, 0x5f, 0xb4, 0x4a, 0x9f, 0x7d, 0xd1, 0x2a, 0x7d,
	0xf5, 0x45, 0x4b, 0xf9, 0xd9, 0x79, 0x4b, 0xf9, 0xd3, 0x79, 0x4b, 0xf9, 0xdb, 0x79, 0x4b, 0xf9,
	0xe4, 0xbc, 0xa5, 0x7c, 0x7e, 0xde, 0x52, 0xbe, 0x3c, 0x6f, 0x95, 0xbe, 0x3a, 0x6f, 0x29, 0xbf,
	0x79, 0xdc, 0x2a, 0xfd, 0xf5, 0x71, 0x4b, 0xf9, 0xe4, 0x71, 0xab, 0xf4, 0xd9, 0xe3, 0x56, 0xe9,
	0xdd, 0x9d, 0xc8, 0x9f, 0x2b, 0x25, 0x9f, 0xe7, 0xd8, 0xef, 0xae, 0x61, 0x3e, 0xc2, 0x8e, 0xb5,
	0x35, 0x7a, 0xd4, 0xdb, 0xea, 0x61, 0x47, 0xfc, 0xcb, 0xb2, 0xeb, 0x76, 0xbf, 0x3d, 0xea, 0x76,
	0xab, 0x7c, 0xb5, 0xfb, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xaa, 0xfd, 0xf1, 0x0c, 0x2f, 0x2a,
	0x00, 0x00,
}

func (this *CreateClassRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateClassRequest)
	if !ok {
		that2, ok := that.(CreateClassRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SchoolId != that1.SchoolId {
		return false
	}
	if this.ClassName != that1.ClassName {
		return false
	}
	if len(this.Grades) != len(that1.Grades) {
		return false
	}
	for i := range this.Grades {
		if this.Grades[i] != that1.Grades[i] {
			return false
		}
	}
	if len(this.Subjects) != len(that1.Subjects) {
		return false
	}
	for i := range this.Subjects {
		if this.Subjects[i] != that1.Subjects[i] {
			return false
		}
	}
	if this.OwnerId != that1.OwnerId {
		return false
	}
	if len(this.OwnerIds) != len(that1.OwnerIds) {
		return false
	}
	for i := range this.OwnerIds {
		if this.OwnerIds[i] != that1.OwnerIds[i] {
			return false
		}
	}
	return true
}
func (this *CreateClassResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateClassResponse)
	if !ok {
		that2, ok := that.(CreateClassResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClassId != that1.ClassId {
		return false
	}
	return true
}
func (this *EditClassRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EditClassRequest)
	if !ok {
		that2, ok := that.(EditClassRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClassId != that1.ClassId {
		return false
	}
	if this.ClassName != that1.ClassName {
		return false
	}
	return true
}
func (this *EditClassResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EditClassResponse)
	if !ok {
		that2, ok := that.(EditClassResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *JoinClassRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JoinClassRequest)
	if !ok {
		that2, ok := that.(JoinClassRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClassCode != that1.ClassCode {
		return false
	}
	return true
}
func (this *JoinClassResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JoinClassResponse)
	if !ok {
		that2, ok := that.(JoinClassResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClassId != that1.ClassId {
		return false
	}
	return true
}
func (this *ClassEntity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ClassEntity)
	if !ok {
		that2, ok := that.(ClassEntity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Avatar != that1.Avatar {
		return false
	}
	if this.SchoolId != that1.SchoolId {
		return false
	}
	if this.ClassCode != that1.ClassCode {
		return false
	}
	if len(this.Subject) != len(that1.Subject) {
		return false
	}
	for i := range this.Subject {
		if this.Subject[i] != that1.Subject[i] {
			return false
		}
	}
	if len(this.Grades) != len(that1.Grades) {
		return false
	}
	for i := range this.Grades {
		if this.Grades[i] != that1.Grades[i] {
			return false
		}
	}
	if len(this.OwnerIds) != len(that1.OwnerIds) {
		return false
	}
	for i := range this.OwnerIds {
		if this.OwnerIds[i] != that1.OwnerIds[i] {
			return false
		}
	}
	if this.TotalStudent != that1.TotalStudent {
		return false
	}
	return true
}
func (this *RemoveMemberRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveMemberRequest)
	if !ok {
		that2, ok := that.(RemoveMemberRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClassId != that1.ClassId {
		return false
	}
	if len(this.UserIds) != len(that1.UserIds) {
		return false
	}
	for i := range this.UserIds {
		if this.UserIds[i] != that1.UserIds[i] {
			return false
		}
	}
	return true
}
func (this *RemoveMemberResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveMemberResponse)
	if !ok {
		that2, ok := that.(RemoveMemberResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *LeaveClassRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LeaveClassRequest)
	if !ok {
		that2, ok := that.(LeaveClassRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClassId != that1.ClassId {
		return false
	}
	return true
}
func (this *LeaveClassResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LeaveClassResponse)
	if !ok {
		that2, ok := that.(LeaveClassResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *AssignPresetStudyPlanResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AssignPresetStudyPlanResponse)
	if !ok {
		that2, ok := that.(AssignPresetStudyPlanResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RetrieveAssignedPresetStudyPlanRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveAssignedPresetStudyPlanRequest)
	if !ok {
		that2, ok := that.(RetrieveAssignedPresetStudyPlanRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClassId != that1.ClassId {
		return false
	}
	return true
}
func (this *RetrieveAssignedPresetStudyPlanResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveAssignedPresetStudyPlanResponse)
	if !ok {
		that2, ok := that.(RetrieveAssignedPresetStudyPlanResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PresetStudyPlans) != len(that1.PresetStudyPlans) {
		return false
	}
	for i := range this.PresetStudyPlans {
		if !this.PresetStudyPlans[i].Equal(that1.PresetStudyPlans[i]) {
			return false
		}
	}
	return true
}
func (this *RetrieveClassMemberRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveClassMemberRequest)
	if !ok {
		that2, ok := that.(RetrieveClassMemberRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClassId != that1.ClassId {
		return false
	}
	return true
}
func (this *RetrieveClassMemberResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveClassMemberResponse)
	if !ok {
		that2, ok := that.(RetrieveClassMemberResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Members) != len(that1.Members) {
		return false
	}
	for i := range this.Members {
		if !this.Members[i].Equal(that1.Members[i]) {
			return false
		}
	}
	return true
}
func (this *RetrieveClassMemberResponse_Member) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveClassMemberResponse_Member)
	if !ok {
		that2, ok := that.(RetrieveClassMemberResponse_Member)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.UserGroup != that1.UserGroup {
		return false
	}
	if !this.JoinAt.Equal(that1.JoinAt) {
		return false
	}
	return true
}
func (this *TeacherAssignClassWithTopicRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TeacherAssignClassWithTopicRequest)
	if !ok {
		that2, ok := that.(TeacherAssignClassWithTopicRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClassId != that1.ClassId {
		return false
	}
	if this.TopicId != that1.TopicId {
		return false
	}
	if !this.StartDate.Equal(that1.StartDate) {
		return false
	}
	if !this.EndDate.Equal(that1.EndDate) {
		return false
	}
	return true
}
func (this *TeacherAssignClassWithTopicResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TeacherAssignClassWithTopicResponse)
	if !ok {
		that2, ok := that.(TeacherAssignClassWithTopicResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AssignmentId != that1.AssignmentId {
		return false
	}
	return true
}
func (this *RetrieveActiveClassAssignmentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveActiveClassAssignmentRequest)
	if !ok {
		that2, ok := that.(RetrieveActiveClassAssignmentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClassId != that1.ClassId {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	return true
}
func (this *Assignment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Assignment)
	if !ok {
		that2, ok := that.(Assignment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AssignmentId != that1.AssignmentId {
		return false
	}
	if !this.Topic.Equal(that1.Topic) {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.StartDate.Equal(that1.StartDate) {
		return false
	}
	if !this.EndDate.Equal(that1.EndDate) {
		return false
	}
	if len(this.StudentIds) != len(that1.StudentIds) {
		return false
	}
	for i := range this.StudentIds {
		if this.StudentIds[i] != that1.StudentIds[i] {
			return false
		}
	}
	return true
}
func (this *RetrieveActiveClassAssignmentResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveActiveClassAssignmentResponse)
	if !ok {
		that2, ok := that.(RetrieveActiveClassAssignmentResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Assignments) != len(that1.Assignments) {
		return false
	}
	for i := range this.Assignments {
		if !this.Assignments[i].Equal(that1.Assignments[i]) {
			return false
		}
	}
	if this.Total != that1.Total {
		return false
	}
	return true
}
func (this *RetrievePastClassAssignmentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrievePastClassAssignmentRequest)
	if !ok {
		that2, ok := that.(RetrievePastClassAssignmentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClassId != that1.ClassId {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	return true
}
func (this *RetrievePastClassAssignmentResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrievePastClassAssignmentResponse)
	if !ok {
		that2, ok := that.(RetrievePastClassAssignmentResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Assignments) != len(that1.Assignments) {
		return false
	}
	for i := range this.Assignments {
		if !this.Assignments[i].Equal(that1.Assignments[i]) {
			return false
		}
	}
	if this.Total != that1.Total {
		return false
	}
	return true
}
func (this *RemoveAssignedTopicRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveAssignedTopicRequest)
	if !ok {
		that2, ok := that.(RemoveAssignedTopicRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AssignmentId != that1.AssignmentId {
		return false
	}
	return true
}
func (this *RemoveAssignedTopicResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveAssignedTopicResponse)
	if !ok {
		that2, ok := that.(RemoveAssignedTopicResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *EditAssignedTopicRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EditAssignedTopicRequest)
	if !ok {
		that2, ok := that.(EditAssignedTopicRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AssignmentId != that1.AssignmentId {
		return false
	}
	if !this.StartDate.Equal(that1.StartDate) {
		return false
	}
	if !this.EndDate.Equal(that1.EndDate) {
		return false
	}
	return true
}
func (this *EditAssignedTopicResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EditAssignedTopicResponse)
	if !ok {
		that2, ok := that.(EditAssignedTopicResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NewAssignmentId != that1.NewAssignmentId {
		return false
	}
	return true
}
func (this *RetrieveClassLearningStatisticsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveClassLearningStatisticsRequest)
	if !ok {
		that2, ok := that.(RetrieveClassLearningStatisticsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClassId != that1.ClassId {
		return false
	}
	if this.TopicId != that1.TopicId {
		return false
	}
	return true
}
func (this *StudentLearningStatistics) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StudentLearningStatistics)
	if !ok {
		that2, ok := that.(StudentLearningStatistics)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Data == nil {
		if this.Data != nil {
			return false
		}
	} else if this.Data == nil {
		return false
	} else if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *StudentLearningStatistics_ByTopic_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StudentLearningStatistics_ByTopic_)
	if !ok {
		that2, ok := that.(StudentLearningStatistics_ByTopic_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ByTopic.Equal(that1.ByTopic) {
		return false
	}
	return true
}
func (this *StudentLearningStatistics_ByTopic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StudentLearningStatistics_ByTopic)
	if !ok {
		that2, ok := that.(StudentLearningStatistics_ByTopic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StudentId != that1.StudentId {
		return false
	}
	if this.StudentName != that1.StudentName {
		return false
	}
	if this.Completion != that1.Completion {
		return false
	}
	if this.TimeSpent != that1.TimeSpent {
		return false
	}
	if this.Accuracy != that1.Accuracy {
		return false
	}
	if !this.Date.Equal(that1.Date) {
		return false
	}
	return true
}
func (this *RetrieveClassLearningStatisticsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveClassLearningStatisticsResponse)
	if !ok {
		that2, ok := that.(RetrieveClassLearningStatisticsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Stats) != len(that1.Stats) {
		return false
	}
	for i := range this.Stats {
		if !this.Stats[i].Equal(that1.Stats[i]) {
			return false
		}
	}
	if this.TotalCompletion != that1.TotalCompletion {
		return false
	}
	if this.AverageScore != that1.AverageScore {
		return false
	}
	if this.TotalSubmitted != that1.TotalSubmitted {
		return false
	}
	return true
}
func (this *RetrieveStudentLearningStatisticsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveStudentLearningStatisticsRequest)
	if !ok {
		that2, ok := that.(RetrieveStudentLearningStatisticsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClassId != that1.ClassId {
		return false
	}
	if this.TopicId != that1.TopicId {
		return false
	}
	if this.StudentId != that1.StudentId {
		return false
	}
	return true
}
func (this *RetrieveStudentLearningStatisticsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveStudentLearningStatisticsResponse)
	if !ok {
		that2, ok := that.(RetrieveStudentLearningStatisticsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Stats) != len(that1.Stats) {
		return false
	}
	for i := range this.Stats {
		if !this.Stats[i].Equal(that1.Stats[i]) {
			return false
		}
	}
	return true
}
func (this *RegisterTeacherRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterTeacherRequest)
	if !ok {
		that2, ok := that.(RegisterTeacherRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.SchoolName != that1.SchoolName {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	return true
}
func (this *RegisterTeacherResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterTeacherResponse)
	if !ok {
		that2, ok := that.(RegisterTeacherResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Successful != that1.Successful {
		return false
	}
	return true
}
func (this *SubmissionScore) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubmissionScore)
	if !ok {
		that2, ok := that.(SubmissionScore)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SubmissionId != that1.SubmissionId {
		return false
	}
	if this.GivenScore != that1.GivenScore {
		return false
	}
	if this.TotalScore != that1.TotalScore {
		return false
	}
	if this.Notes != that1.Notes {
		return false
	}
	return true
}
func (this *MarkTheSubmissionsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MarkTheSubmissionsRequest)
	if !ok {
		that2, ok := that.(MarkTheSubmissionsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Scores) != len(that1.Scores) {
		return false
	}
	for i := range this.Scores {
		if !this.Scores[i].Equal(that1.Scores[i]) {
			return false
		}
	}
	return true
}
func (this *MarkTheSubmissionsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MarkTheSubmissionsResponse)
	if !ok {
		that2, ok := that.(MarkTheSubmissionsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Successful != that1.Successful {
		return false
	}
	return true
}
func (this *CreateCustomAssignmentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateCustomAssignmentRequest)
	if !ok {
		that2, ok := that.(CreateCustomAssignmentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClassId != that1.ClassId {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if this.Subject != that1.Subject {
		return false
	}
	if !this.Name.Equal(that1.Name) {
		return false
	}
	if !this.Grade.Equal(that1.Grade) {
		return false
	}
	if !this.CopiedTopicId.Equal(that1.CopiedTopicId) {
		return false
	}
	if !this.Instruction.Equal(that1.Instruction) {
		return false
	}
	if len(this.Attachments) != len(that1.Attachments) {
		return false
	}
	for i := range this.Attachments {
		if !this.Attachments[i].Equal(that1.Attachments[i]) {
			return false
		}
	}
	if this.EssayRequired != that1.EssayRequired {
		return false
	}
	if !this.StartDate.Equal(that1.StartDate) {
		return false
	}
	if !this.EndDate.Equal(that1.EndDate) {
		return false
	}
	if len(this.SelectedLoIds) != len(that1.SelectedLoIds) {
		return false
	}
	for i := range this.SelectedLoIds {
		if this.SelectedLoIds[i] != that1.SelectedLoIds[i] {
			return false
		}
	}
	return true
}
func (this *CreateCustomAssignmentResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateCustomAssignmentResponse)
	if !ok {
		that2, ok := that.(CreateCustomAssignmentResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TopicId != that1.TopicId {
		return false
	}
	if this.AssignmentId != that1.AssignmentId {
		return false
	}
	return true
}
func (this *UpdateClassCodeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateClassCodeRequest)
	if !ok {
		that2, ok := that.(UpdateClassCodeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClassId != that1.ClassId {
		return false
	}
	return true
}
func (this *UpdateClassCodeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateClassCodeResponse)
	if !ok {
		that2, ok := that.(UpdateClassCodeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClassId != that1.ClassId {
		return false
	}
	if this.ClassCode != that1.ClassCode {
		return false
	}
	return true
}
func (this *AddClassMemberRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddClassMemberRequest)
	if !ok {
		that2, ok := that.(AddClassMemberRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClassId != that1.ClassId {
		return false
	}
	if len(this.TeacherIds) != len(that1.TeacherIds) {
		return false
	}
	for i := range this.TeacherIds {
		if this.TeacherIds[i] != that1.TeacherIds[i] {
			return false
		}
	}
	return true
}
func (this *AddClassMemberResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddClassMemberResponse)
	if !ok {
		that2, ok := that.(AddClassMemberResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RetrieveScoreRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveScoreRequest)
	if !ok {
		that2, ok := that.(RetrieveScoreRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Filter == nil {
		if this.Filter != nil {
			return false
		}
	} else if this.Filter == nil {
		return false
	} else if !this.Filter.Equal(that1.Filter) {
		return false
	}
	if this.TopicId != that1.TopicId {
		return false
	}
	return true
}
func (this *RetrieveScoreRequest_StudentId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveScoreRequest_StudentId)
	if !ok {
		that2, ok := that.(RetrieveScoreRequest_StudentId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StudentId != that1.StudentId {
		return false
	}
	return true
}
func (this *RetrieveScoreRequest_ClassId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveScoreRequest_ClassId)
	if !ok {
		that2, ok := that.(RetrieveScoreRequest_ClassId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClassId != that1.ClassId {
		return false
	}
	return true
}
func (this *RetrieveScoreResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveScoreResponse)
	if !ok {
		that2, ok := that.(RetrieveScoreResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Scores) != len(that1.Scores) {
		return false
	}
	for i := range this.Scores {
		if !this.Scores[i].Equal(that1.Scores[i]) {
			return false
		}
	}
	if this.AverageScore != that1.AverageScore {
		return false
	}
	return true
}
func (this *RetrieveScoreResponse_Score) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveScoreResponse_Score)
	if !ok {
		that2, ok := that.(RetrieveScoreResponse_Score)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StudentId != that1.StudentId {
		return false
	}
	if this.GivenScore != that1.GivenScore {
		return false
	}
	if this.TotalScore != that1.TotalScore {
		return false
	}
	return true
}
func (this *TeacherRetrieveStreamTokenRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TeacherRetrieveStreamTokenRequest)
	if !ok {
		that2, ok := that.(TeacherRetrieveStreamTokenRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LessonId != that1.LessonId {
		return false
	}
	return true
}
func (this *TeacherRetrieveStreamTokenResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TeacherRetrieveStreamTokenResponse)
	if !ok {
		that2, ok := that.(TeacherRetrieveStreamTokenResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StreamToken != that1.StreamToken {
		return false
	}
	if this.VideoToken != that1.VideoToken {
		return false
	}
	return true
}
func (this *StudentRetrieveStreamTokenRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StudentRetrieveStreamTokenRequest)
	if !ok {
		that2, ok := that.(StudentRetrieveStreamTokenRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LessonId != that1.LessonId {
		return false
	}
	return true
}
func (this *StudentRetrieveStreamTokenResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StudentRetrieveStreamTokenResponse)
	if !ok {
		that2, ok := that.(StudentRetrieveStreamTokenResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StreamToken != that1.StreamToken {
		return false
	}
	return true
}
func (this *EndLiveLessonRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndLiveLessonRequest)
	if !ok {
		that2, ok := that.(EndLiveLessonRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LessonId != that1.LessonId {
		return false
	}
	return true
}
func (this *EndLiveLessonResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EndLiveLessonResponse)
	if !ok {
		that2, ok := that.(EndLiveLessonResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *JoinLessonRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JoinLessonRequest)
	if !ok {
		that2, ok := that.(JoinLessonRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LessonId != that1.LessonId {
		return false
	}
	return true
}
func (this *JoinLessonResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*JoinLessonResponse)
	if !ok {
		that2, ok := that.(JoinLessonResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StreamToken != that1.StreamToken {
		return false
	}
	if this.WhiteboardToken != that1.WhiteboardToken {
		return false
	}
	if this.RoomId != that1.RoomId {
		return false
	}
	if this.VideoToken != that1.VideoToken {
		return false
	}
	return true
}
func (this *LeaveLessonRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LeaveLessonRequest)
	if !ok {
		that2, ok := that.(LeaveLessonRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.LessonId != that1.LessonId {
		return false
	}
	return true
}
func (this *LeaveLessonResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LeaveLessonResponse)
	if !ok {
		that2, ok := that.(LeaveLessonResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *TeacherAssignStudentWithTopicRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TeacherAssignStudentWithTopicRequest)
	if !ok {
		that2, ok := that.(TeacherAssignStudentWithTopicRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.StudentIds) != len(that1.StudentIds) {
		return false
	}
	for i := range this.StudentIds {
		if this.StudentIds[i] != that1.StudentIds[i] {
			return false
		}
	}
	if this.TopicId != that1.TopicId {
		return false
	}
	if !this.StartDate.Equal(that1.StartDate) {
		return false
	}
	if !this.EndDate.Equal(that1.EndDate) {
		return false
	}
	if this.ClassId != that1.ClassId {
		return false
	}
	return true
}
func (this *TeacherAssignStudentWithTopicResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TeacherAssignStudentWithTopicResponse)
	if !ok {
		that2, ok := that.(TeacherAssignStudentWithTopicResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AssignmentId != that1.AssignmentId {
		return false
	}
	return true
}
func (this *Comment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Comment)
	if !ok {
		that2, ok := that.(Comment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Comment != that1.Comment {
		return false
	}
	if !this.Duration.Equal(that1.Duration) {
		return false
	}
	return true
}
func (this *ConvertedImage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConvertedImage)
	if !ok {
		that2, ok := that.(ConvertedImage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Width != that1.Width {
		return false
	}
	if this.Height != that1.Height {
		return false
	}
	if this.ImageUrl != that1.ImageUrl {
		return false
	}
	return true
}
func (this *Media) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Media)
	if !ok {
		that2, ok := that.(Media)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MediaId != that1.MediaId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Resource != that1.Resource {
		return false
	}
	if len(this.Comments) != len(that1.Comments) {
		return false
	}
	for i := range this.Comments {
		if !this.Comments[i].Equal(that1.Comments[i]) {
			return false
		}
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if len(this.Images) != len(that1.Images) {
		return false
	}
	for i := range this.Images {
		if !this.Images[i].Equal(that1.Images[i]) {
			return false
		}
	}
	return true
}
func (this *RetrieveMediaRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveMediaRequest)
	if !ok {
		that2, ok := that.(RetrieveMediaRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.MediaIds) != len(that1.MediaIds) {
		return false
	}
	for i := range this.MediaIds {
		if this.MediaIds[i] != that1.MediaIds[i] {
			return false
		}
	}
	return true
}
func (this *RetrieveMediaResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveMediaResponse)
	if !ok {
		that2, ok := that.(RetrieveMediaResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Media) != len(that1.Media) {
		return false
	}
	for i := range this.Media {
		if !this.Media[i].Equal(that1.Media[i]) {
			return false
		}
	}
	return true
}
func (this *UpsertMediaRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertMediaRequest)
	if !ok {
		that2, ok := that.(UpsertMediaRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Media) != len(that1.Media) {
		return false
	}
	for i := range this.Media {
		if !this.Media[i].Equal(that1.Media[i]) {
			return false
		}
	}
	return true
}
func (this *UpsertMediaResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertMediaResponse)
	if !ok {
		that2, ok := that.(UpsertMediaResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.MediaIds) != len(that1.MediaIds) {
		return false
	}
	for i := range this.MediaIds {
		if this.MediaIds[i] != that1.MediaIds[i] {
			return false
		}
	}
	return true
}
func (this *CreateClassRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.CreateClassRequest{")
	s = append(s, "SchoolId: "+fmt.Sprintf("%#v", this.SchoolId)+",\n")
	s = append(s, "ClassName: "+fmt.Sprintf("%#v", this.ClassName)+",\n")
	s = append(s, "Grades: "+fmt.Sprintf("%#v", this.Grades)+",\n")
	s = append(s, "Subjects: "+fmt.Sprintf("%#v", this.Subjects)+",\n")
	s = append(s, "OwnerId: "+fmt.Sprintf("%#v", this.OwnerId)+",\n")
	s = append(s, "OwnerIds: "+fmt.Sprintf("%#v", this.OwnerIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateClassResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CreateClassResponse{")
	s = append(s, "ClassId: "+fmt.Sprintf("%#v", this.ClassId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EditClassRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.EditClassRequest{")
	s = append(s, "ClassId: "+fmt.Sprintf("%#v", this.ClassId)+",\n")
	s = append(s, "ClassName: "+fmt.Sprintf("%#v", this.ClassName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EditClassResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.EditClassResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JoinClassRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.JoinClassRequest{")
	s = append(s, "ClassCode: "+fmt.Sprintf("%#v", this.ClassCode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JoinClassResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.JoinClassResponse{")
	s = append(s, "ClassId: "+fmt.Sprintf("%#v", this.ClassId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ClassEntity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&pb.ClassEntity{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Avatar: "+fmt.Sprintf("%#v", this.Avatar)+",\n")
	s = append(s, "SchoolId: "+fmt.Sprintf("%#v", this.SchoolId)+",\n")
	s = append(s, "ClassCode: "+fmt.Sprintf("%#v", this.ClassCode)+",\n")
	s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	s = append(s, "Grades: "+fmt.Sprintf("%#v", this.Grades)+",\n")
	s = append(s, "OwnerIds: "+fmt.Sprintf("%#v", this.OwnerIds)+",\n")
	s = append(s, "TotalStudent: "+fmt.Sprintf("%#v", this.TotalStudent)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveMemberRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.RemoveMemberRequest{")
	s = append(s, "ClassId: "+fmt.Sprintf("%#v", this.ClassId)+",\n")
	s = append(s, "UserIds: "+fmt.Sprintf("%#v", this.UserIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveMemberResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.RemoveMemberResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LeaveClassRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.LeaveClassRequest{")
	s = append(s, "ClassId: "+fmt.Sprintf("%#v", this.ClassId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LeaveClassResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.LeaveClassResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AssignPresetStudyPlanResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.AssignPresetStudyPlanResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveAssignedPresetStudyPlanRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RetrieveAssignedPresetStudyPlanRequest{")
	s = append(s, "ClassId: "+fmt.Sprintf("%#v", this.ClassId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveAssignedPresetStudyPlanResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RetrieveAssignedPresetStudyPlanResponse{")
	if this.PresetStudyPlans != nil {
		s = append(s, "PresetStudyPlans: "+fmt.Sprintf("%#v", this.PresetStudyPlans)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveClassMemberRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RetrieveClassMemberRequest{")
	s = append(s, "ClassId: "+fmt.Sprintf("%#v", this.ClassId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveClassMemberResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RetrieveClassMemberResponse{")
	if this.Members != nil {
		s = append(s, "Members: "+fmt.Sprintf("%#v", this.Members)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveClassMemberResponse_Member) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.RetrieveClassMemberResponse_Member{")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "UserGroup: "+fmt.Sprintf("%#v", this.UserGroup)+",\n")
	if this.JoinAt != nil {
		s = append(s, "JoinAt: "+fmt.Sprintf("%#v", this.JoinAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TeacherAssignClassWithTopicRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.TeacherAssignClassWithTopicRequest{")
	s = append(s, "ClassId: "+fmt.Sprintf("%#v", this.ClassId)+",\n")
	s = append(s, "TopicId: "+fmt.Sprintf("%#v", this.TopicId)+",\n")
	if this.StartDate != nil {
		s = append(s, "StartDate: "+fmt.Sprintf("%#v", this.StartDate)+",\n")
	}
	if this.EndDate != nil {
		s = append(s, "EndDate: "+fmt.Sprintf("%#v", this.EndDate)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TeacherAssignClassWithTopicResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.TeacherAssignClassWithTopicResponse{")
	s = append(s, "AssignmentId: "+fmt.Sprintf("%#v", this.AssignmentId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveActiveClassAssignmentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.RetrieveActiveClassAssignmentRequest{")
	s = append(s, "ClassId: "+fmt.Sprintf("%#v", this.ClassId)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Assignment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.Assignment{")
	s = append(s, "AssignmentId: "+fmt.Sprintf("%#v", this.AssignmentId)+",\n")
	if this.Topic != nil {
		s = append(s, "Topic: "+fmt.Sprintf("%#v", this.Topic)+",\n")
	}
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.StartDate != nil {
		s = append(s, "StartDate: "+fmt.Sprintf("%#v", this.StartDate)+",\n")
	}
	if this.EndDate != nil {
		s = append(s, "EndDate: "+fmt.Sprintf("%#v", this.EndDate)+",\n")
	}
	s = append(s, "StudentIds: "+fmt.Sprintf("%#v", this.StudentIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveActiveClassAssignmentResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.RetrieveActiveClassAssignmentResponse{")
	if this.Assignments != nil {
		s = append(s, "Assignments: "+fmt.Sprintf("%#v", this.Assignments)+",\n")
	}
	s = append(s, "Total: "+fmt.Sprintf("%#v", this.Total)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrievePastClassAssignmentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.RetrievePastClassAssignmentRequest{")
	s = append(s, "ClassId: "+fmt.Sprintf("%#v", this.ClassId)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrievePastClassAssignmentResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.RetrievePastClassAssignmentResponse{")
	if this.Assignments != nil {
		s = append(s, "Assignments: "+fmt.Sprintf("%#v", this.Assignments)+",\n")
	}
	s = append(s, "Total: "+fmt.Sprintf("%#v", this.Total)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveAssignedTopicRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RemoveAssignedTopicRequest{")
	s = append(s, "AssignmentId: "+fmt.Sprintf("%#v", this.AssignmentId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveAssignedTopicResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.RemoveAssignedTopicResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EditAssignedTopicRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.EditAssignedTopicRequest{")
	s = append(s, "AssignmentId: "+fmt.Sprintf("%#v", this.AssignmentId)+",\n")
	if this.StartDate != nil {
		s = append(s, "StartDate: "+fmt.Sprintf("%#v", this.StartDate)+",\n")
	}
	if this.EndDate != nil {
		s = append(s, "EndDate: "+fmt.Sprintf("%#v", this.EndDate)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EditAssignedTopicResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.EditAssignedTopicResponse{")
	s = append(s, "NewAssignmentId: "+fmt.Sprintf("%#v", this.NewAssignmentId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveClassLearningStatisticsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.RetrieveClassLearningStatisticsRequest{")
	s = append(s, "ClassId: "+fmt.Sprintf("%#v", this.ClassId)+",\n")
	s = append(s, "TopicId: "+fmt.Sprintf("%#v", this.TopicId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StudentLearningStatistics) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.StudentLearningStatistics{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StudentLearningStatistics_ByTopic_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.StudentLearningStatistics_ByTopic_{` +
		`ByTopic:` + fmt.Sprintf("%#v", this.ByTopic) + `}`}, ", ")
	return s
}
func (this *StudentLearningStatistics_ByTopic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.StudentLearningStatistics_ByTopic{")
	s = append(s, "StudentId: "+fmt.Sprintf("%#v", this.StudentId)+",\n")
	s = append(s, "StudentName: "+fmt.Sprintf("%#v", this.StudentName)+",\n")
	s = append(s, "Completion: "+fmt.Sprintf("%#v", this.Completion)+",\n")
	s = append(s, "TimeSpent: "+fmt.Sprintf("%#v", this.TimeSpent)+",\n")
	s = append(s, "Accuracy: "+fmt.Sprintf("%#v", this.Accuracy)+",\n")
	if this.Date != nil {
		s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveClassLearningStatisticsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.RetrieveClassLearningStatisticsResponse{")
	if this.Stats != nil {
		s = append(s, "Stats: "+fmt.Sprintf("%#v", this.Stats)+",\n")
	}
	s = append(s, "TotalCompletion: "+fmt.Sprintf("%#v", this.TotalCompletion)+",\n")
	s = append(s, "AverageScore: "+fmt.Sprintf("%#v", this.AverageScore)+",\n")
	s = append(s, "TotalSubmitted: "+fmt.Sprintf("%#v", this.TotalSubmitted)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveStudentLearningStatisticsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.RetrieveStudentLearningStatisticsRequest{")
	s = append(s, "ClassId: "+fmt.Sprintf("%#v", this.ClassId)+",\n")
	s = append(s, "TopicId: "+fmt.Sprintf("%#v", this.TopicId)+",\n")
	s = append(s, "StudentId: "+fmt.Sprintf("%#v", this.StudentId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveStudentLearningStatisticsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RetrieveStudentLearningStatisticsResponse{")
	if this.Stats != nil {
		s = append(s, "Stats: "+fmt.Sprintf("%#v", this.Stats)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterTeacherRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.RegisterTeacherRequest{")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "SchoolName: "+fmt.Sprintf("%#v", this.SchoolName)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterTeacherResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RegisterTeacherResponse{")
	s = append(s, "Successful: "+fmt.Sprintf("%#v", this.Successful)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SubmissionScore) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.SubmissionScore{")
	s = append(s, "SubmissionId: "+fmt.Sprintf("%#v", this.SubmissionId)+",\n")
	s = append(s, "GivenScore: "+fmt.Sprintf("%#v", this.GivenScore)+",\n")
	s = append(s, "TotalScore: "+fmt.Sprintf("%#v", this.TotalScore)+",\n")
	s = append(s, "Notes: "+fmt.Sprintf("%#v", this.Notes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MarkTheSubmissionsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.MarkTheSubmissionsRequest{")
	if this.Scores != nil {
		s = append(s, "Scores: "+fmt.Sprintf("%#v", this.Scores)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MarkTheSubmissionsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.MarkTheSubmissionsResponse{")
	s = append(s, "Successful: "+fmt.Sprintf("%#v", this.Successful)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateCustomAssignmentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&pb.CreateCustomAssignmentRequest{")
	s = append(s, "ClassId: "+fmt.Sprintf("%#v", this.ClassId)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	if this.Name != nil {
		s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	}
	if this.Grade != nil {
		s = append(s, "Grade: "+fmt.Sprintf("%#v", this.Grade)+",\n")
	}
	if this.CopiedTopicId != nil {
		s = append(s, "CopiedTopicId: "+fmt.Sprintf("%#v", this.CopiedTopicId)+",\n")
	}
	if this.Instruction != nil {
		s = append(s, "Instruction: "+fmt.Sprintf("%#v", this.Instruction)+",\n")
	}
	if this.Attachments != nil {
		s = append(s, "Attachments: "+fmt.Sprintf("%#v", this.Attachments)+",\n")
	}
	s = append(s, "EssayRequired: "+fmt.Sprintf("%#v", this.EssayRequired)+",\n")
	if this.StartDate != nil {
		s = append(s, "StartDate: "+fmt.Sprintf("%#v", this.StartDate)+",\n")
	}
	if this.EndDate != nil {
		s = append(s, "EndDate: "+fmt.Sprintf("%#v", this.EndDate)+",\n")
	}
	s = append(s, "SelectedLoIds: "+fmt.Sprintf("%#v", this.SelectedLoIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateCustomAssignmentResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CreateCustomAssignmentResponse{")
	s = append(s, "TopicId: "+fmt.Sprintf("%#v", this.TopicId)+",\n")
	s = append(s, "AssignmentId: "+fmt.Sprintf("%#v", this.AssignmentId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateClassCodeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpdateClassCodeRequest{")
	s = append(s, "ClassId: "+fmt.Sprintf("%#v", this.ClassId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateClassCodeResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.UpdateClassCodeResponse{")
	s = append(s, "ClassId: "+fmt.Sprintf("%#v", this.ClassId)+",\n")
	s = append(s, "ClassCode: "+fmt.Sprintf("%#v", this.ClassCode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddClassMemberRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.AddClassMemberRequest{")
	s = append(s, "ClassId: "+fmt.Sprintf("%#v", this.ClassId)+",\n")
	s = append(s, "TeacherIds: "+fmt.Sprintf("%#v", this.TeacherIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddClassMemberResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.AddClassMemberResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveScoreRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.RetrieveScoreRequest{")
	if this.Filter != nil {
		s = append(s, "Filter: "+fmt.Sprintf("%#v", this.Filter)+",\n")
	}
	s = append(s, "TopicId: "+fmt.Sprintf("%#v", this.TopicId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveScoreRequest_StudentId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.RetrieveScoreRequest_StudentId{` +
		`StudentId:` + fmt.Sprintf("%#v", this.StudentId) + `}`}, ", ")
	return s
}
func (this *RetrieveScoreRequest_ClassId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.RetrieveScoreRequest_ClassId{` +
		`ClassId:` + fmt.Sprintf("%#v", this.ClassId) + `}`}, ", ")
	return s
}
func (this *RetrieveScoreResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.RetrieveScoreResponse{")
	if this.Scores != nil {
		s = append(s, "Scores: "+fmt.Sprintf("%#v", this.Scores)+",\n")
	}
	s = append(s, "AverageScore: "+fmt.Sprintf("%#v", this.AverageScore)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveScoreResponse_Score) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.RetrieveScoreResponse_Score{")
	s = append(s, "StudentId: "+fmt.Sprintf("%#v", this.StudentId)+",\n")
	s = append(s, "GivenScore: "+fmt.Sprintf("%#v", this.GivenScore)+",\n")
	s = append(s, "TotalScore: "+fmt.Sprintf("%#v", this.TotalScore)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TeacherRetrieveStreamTokenRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.TeacherRetrieveStreamTokenRequest{")
	s = append(s, "LessonId: "+fmt.Sprintf("%#v", this.LessonId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TeacherRetrieveStreamTokenResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.TeacherRetrieveStreamTokenResponse{")
	s = append(s, "StreamToken: "+fmt.Sprintf("%#v", this.StreamToken)+",\n")
	s = append(s, "VideoToken: "+fmt.Sprintf("%#v", this.VideoToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StudentRetrieveStreamTokenRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.StudentRetrieveStreamTokenRequest{")
	s = append(s, "LessonId: "+fmt.Sprintf("%#v", this.LessonId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StudentRetrieveStreamTokenResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.StudentRetrieveStreamTokenResponse{")
	s = append(s, "StreamToken: "+fmt.Sprintf("%#v", this.StreamToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EndLiveLessonRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.EndLiveLessonRequest{")
	s = append(s, "LessonId: "+fmt.Sprintf("%#v", this.LessonId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EndLiveLessonResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.EndLiveLessonResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JoinLessonRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.JoinLessonRequest{")
	s = append(s, "LessonId: "+fmt.Sprintf("%#v", this.LessonId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *JoinLessonResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.JoinLessonResponse{")
	s = append(s, "StreamToken: "+fmt.Sprintf("%#v", this.StreamToken)+",\n")
	s = append(s, "WhiteboardToken: "+fmt.Sprintf("%#v", this.WhiteboardToken)+",\n")
	s = append(s, "RoomId: "+fmt.Sprintf("%#v", this.RoomId)+",\n")
	s = append(s, "VideoToken: "+fmt.Sprintf("%#v", this.VideoToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LeaveLessonRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.LeaveLessonRequest{")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "LessonId: "+fmt.Sprintf("%#v", this.LessonId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LeaveLessonResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.LeaveLessonResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TeacherAssignStudentWithTopicRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.TeacherAssignStudentWithTopicRequest{")
	s = append(s, "StudentIds: "+fmt.Sprintf("%#v", this.StudentIds)+",\n")
	s = append(s, "TopicId: "+fmt.Sprintf("%#v", this.TopicId)+",\n")
	if this.StartDate != nil {
		s = append(s, "StartDate: "+fmt.Sprintf("%#v", this.StartDate)+",\n")
	}
	if this.EndDate != nil {
		s = append(s, "EndDate: "+fmt.Sprintf("%#v", this.EndDate)+",\n")
	}
	s = append(s, "ClassId: "+fmt.Sprintf("%#v", this.ClassId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TeacherAssignStudentWithTopicResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.TeacherAssignStudentWithTopicResponse{")
	s = append(s, "AssignmentId: "+fmt.Sprintf("%#v", this.AssignmentId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Comment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.Comment{")
	s = append(s, "Comment: "+fmt.Sprintf("%#v", this.Comment)+",\n")
	if this.Duration != nil {
		s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConvertedImage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.ConvertedImage{")
	s = append(s, "Width: "+fmt.Sprintf("%#v", this.Width)+",\n")
	s = append(s, "Height: "+fmt.Sprintf("%#v", this.Height)+",\n")
	s = append(s, "ImageUrl: "+fmt.Sprintf("%#v", this.ImageUrl)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Media) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pb.Media{")
	s = append(s, "MediaId: "+fmt.Sprintf("%#v", this.MediaId)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Resource: "+fmt.Sprintf("%#v", this.Resource)+",\n")
	if this.Comments != nil {
		s = append(s, "Comments: "+fmt.Sprintf("%#v", this.Comments)+",\n")
	}
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	if this.Images != nil {
		s = append(s, "Images: "+fmt.Sprintf("%#v", this.Images)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveMediaRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RetrieveMediaRequest{")
	s = append(s, "MediaIds: "+fmt.Sprintf("%#v", this.MediaIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveMediaResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RetrieveMediaResponse{")
	if this.Media != nil {
		s = append(s, "Media: "+fmt.Sprintf("%#v", this.Media)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertMediaRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpsertMediaRequest{")
	if this.Media != nil {
		s = append(s, "Media: "+fmt.Sprintf("%#v", this.Media)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertMediaResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpsertMediaResponse{")
	s = append(s, "MediaIds: "+fmt.Sprintf("%#v", this.MediaIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringClass(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClassClient is the client API for Class service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClassClient interface {
	RegisterTeacher(ctx context.Context, in *RegisterTeacherRequest, opts ...grpc.CallOption) (*RegisterTeacherResponse, error)
	CreateClass(ctx context.Context, in *CreateClassRequest, opts ...grpc.CallOption) (*CreateClassResponse, error)
	EditClass(ctx context.Context, in *EditClassRequest, opts ...grpc.CallOption) (*EditClassResponse, error)
	JoinClass(ctx context.Context, in *JoinClassRequest, opts ...grpc.CallOption) (*JoinClassResponse, error)
	RemoveMember(ctx context.Context, in *RemoveMemberRequest, opts ...grpc.CallOption) (*RemoveMemberResponse, error)
	LeaveClass(ctx context.Context, in *LeaveClassRequest, opts ...grpc.CallOption) (*LeaveClassResponse, error)
	RetrieveAssignedPresetStudyPlan(ctx context.Context, in *RetrieveAssignedPresetStudyPlanRequest, opts ...grpc.CallOption) (*RetrieveAssignedPresetStudyPlanResponse, error)
	RetrieveClassMember(ctx context.Context, in *RetrieveClassMemberRequest, opts ...grpc.CallOption) (*RetrieveClassMemberResponse, error)
	TeacherAssignClassWithTopic(ctx context.Context, in *TeacherAssignClassWithTopicRequest, opts ...grpc.CallOption) (*TeacherAssignClassWithTopicResponse, error)
	RemoveAssignedTopic(ctx context.Context, in *RemoveAssignedTopicRequest, opts ...grpc.CallOption) (*RemoveAssignedTopicResponse, error)
	EditAssignedTopic(ctx context.Context, in *EditAssignedTopicRequest, opts ...grpc.CallOption) (*EditAssignedTopicResponse, error)
	RetrieveActiveClassAssignment(ctx context.Context, in *RetrieveActiveClassAssignmentRequest, opts ...grpc.CallOption) (*RetrieveActiveClassAssignmentResponse, error)
	RetrievePastClassAssignment(ctx context.Context, in *RetrievePastClassAssignmentRequest, opts ...grpc.CallOption) (*RetrievePastClassAssignmentResponse, error)
	RetrieveClassLearningStatistics(ctx context.Context, in *RetrieveClassLearningStatisticsRequest, opts ...grpc.CallOption) (*RetrieveClassLearningStatisticsResponse, error)
	RetrieveStudentLearningStatistics(ctx context.Context, in *RetrieveStudentLearningStatisticsRequest, opts ...grpc.CallOption) (*RetrieveStudentLearningStatisticsResponse, error)
	CreateCustomAssignment(ctx context.Context, in *CreateCustomAssignmentRequest, opts ...grpc.CallOption) (*CreateCustomAssignmentResponse, error)
	MarkTheSubmissions(ctx context.Context, in *MarkTheSubmissionsRequest, opts ...grpc.CallOption) (*MarkTheSubmissionsResponse, error)
	ListSubmissions(ctx context.Context, in *ListSubmissionsRequest, opts ...grpc.CallOption) (*ListSubmissionsResponse, error)
	RetrieveScore(ctx context.Context, in *RetrieveScoreRequest, opts ...grpc.CallOption) (*RetrieveScoreResponse, error)
	UpdateClassCode(ctx context.Context, in *UpdateClassCodeRequest, opts ...grpc.CallOption) (*UpdateClassCodeResponse, error)
	AddClassMember(ctx context.Context, in *AddClassMemberRequest, opts ...grpc.CallOption) (*AddClassMemberResponse, error)
	TeacherRetrieveStreamToken(ctx context.Context, in *TeacherRetrieveStreamTokenRequest, opts ...grpc.CallOption) (*TeacherRetrieveStreamTokenResponse, error)
	StudentRetrieveStreamToken(ctx context.Context, in *StudentRetrieveStreamTokenRequest, opts ...grpc.CallOption) (*StudentRetrieveStreamTokenResponse, error)
	EndLiveLesson(ctx context.Context, in *EndLiveLessonRequest, opts ...grpc.CallOption) (*EndLiveLessonResponse, error)
	JoinLesson(ctx context.Context, in *JoinLessonRequest, opts ...grpc.CallOption) (*JoinLessonResponse, error)
	LeaveLesson(ctx context.Context, in *LeaveLessonRequest, opts ...grpc.CallOption) (*LeaveLessonResponse, error)
	TeacherAssignStudentWithTopic(ctx context.Context, in *TeacherAssignStudentWithTopicRequest, opts ...grpc.CallOption) (*TeacherAssignStudentWithTopicResponse, error)
	RetrieveMedia(ctx context.Context, in *RetrieveMediaRequest, opts ...grpc.CallOption) (*RetrieveMediaResponse, error)
	UpsertMedia(ctx context.Context, in *UpsertMediaRequest, opts ...grpc.CallOption) (*UpsertMediaResponse, error)
}

type classClient struct {
	cc *grpc.ClientConn
}

func NewClassClient(cc *grpc.ClientConn) ClassClient {
	return &classClient{cc}
}

// Deprecated: Do not use.
func (c *classClient) RegisterTeacher(ctx context.Context, in *RegisterTeacherRequest, opts ...grpc.CallOption) (*RegisterTeacherResponse, error) {
	out := new(RegisterTeacherResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Class/RegisterTeacher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classClient) CreateClass(ctx context.Context, in *CreateClassRequest, opts ...grpc.CallOption) (*CreateClassResponse, error) {
	out := new(CreateClassResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Class/CreateClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classClient) EditClass(ctx context.Context, in *EditClassRequest, opts ...grpc.CallOption) (*EditClassResponse, error) {
	out := new(EditClassResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Class/EditClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classClient) JoinClass(ctx context.Context, in *JoinClassRequest, opts ...grpc.CallOption) (*JoinClassResponse, error) {
	out := new(JoinClassResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Class/JoinClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classClient) RemoveMember(ctx context.Context, in *RemoveMemberRequest, opts ...grpc.CallOption) (*RemoveMemberResponse, error) {
	out := new(RemoveMemberResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Class/RemoveMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classClient) LeaveClass(ctx context.Context, in *LeaveClassRequest, opts ...grpc.CallOption) (*LeaveClassResponse, error) {
	out := new(LeaveClassResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Class/LeaveClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classClient) RetrieveAssignedPresetStudyPlan(ctx context.Context, in *RetrieveAssignedPresetStudyPlanRequest, opts ...grpc.CallOption) (*RetrieveAssignedPresetStudyPlanResponse, error) {
	out := new(RetrieveAssignedPresetStudyPlanResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Class/RetrieveAssignedPresetStudyPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classClient) RetrieveClassMember(ctx context.Context, in *RetrieveClassMemberRequest, opts ...grpc.CallOption) (*RetrieveClassMemberResponse, error) {
	out := new(RetrieveClassMemberResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Class/RetrieveClassMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classClient) TeacherAssignClassWithTopic(ctx context.Context, in *TeacherAssignClassWithTopicRequest, opts ...grpc.CallOption) (*TeacherAssignClassWithTopicResponse, error) {
	out := new(TeacherAssignClassWithTopicResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Class/TeacherAssignClassWithTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *classClient) RemoveAssignedTopic(ctx context.Context, in *RemoveAssignedTopicRequest, opts ...grpc.CallOption) (*RemoveAssignedTopicResponse, error) {
	out := new(RemoveAssignedTopicResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Class/RemoveAssignedTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *classClient) EditAssignedTopic(ctx context.Context, in *EditAssignedTopicRequest, opts ...grpc.CallOption) (*EditAssignedTopicResponse, error) {
	out := new(EditAssignedTopicResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Class/EditAssignedTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *classClient) RetrieveActiveClassAssignment(ctx context.Context, in *RetrieveActiveClassAssignmentRequest, opts ...grpc.CallOption) (*RetrieveActiveClassAssignmentResponse, error) {
	out := new(RetrieveActiveClassAssignmentResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Class/RetrieveActiveClassAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *classClient) RetrievePastClassAssignment(ctx context.Context, in *RetrievePastClassAssignmentRequest, opts ...grpc.CallOption) (*RetrievePastClassAssignmentResponse, error) {
	out := new(RetrievePastClassAssignmentResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Class/RetrievePastClassAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *classClient) RetrieveClassLearningStatistics(ctx context.Context, in *RetrieveClassLearningStatisticsRequest, opts ...grpc.CallOption) (*RetrieveClassLearningStatisticsResponse, error) {
	out := new(RetrieveClassLearningStatisticsResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Class/RetrieveClassLearningStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *classClient) RetrieveStudentLearningStatistics(ctx context.Context, in *RetrieveStudentLearningStatisticsRequest, opts ...grpc.CallOption) (*RetrieveStudentLearningStatisticsResponse, error) {
	out := new(RetrieveStudentLearningStatisticsResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Class/RetrieveStudentLearningStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *classClient) CreateCustomAssignment(ctx context.Context, in *CreateCustomAssignmentRequest, opts ...grpc.CallOption) (*CreateCustomAssignmentResponse, error) {
	out := new(CreateCustomAssignmentResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Class/CreateCustomAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *classClient) MarkTheSubmissions(ctx context.Context, in *MarkTheSubmissionsRequest, opts ...grpc.CallOption) (*MarkTheSubmissionsResponse, error) {
	out := new(MarkTheSubmissionsResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Class/MarkTheSubmissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *classClient) ListSubmissions(ctx context.Context, in *ListSubmissionsRequest, opts ...grpc.CallOption) (*ListSubmissionsResponse, error) {
	out := new(ListSubmissionsResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Class/ListSubmissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *classClient) RetrieveScore(ctx context.Context, in *RetrieveScoreRequest, opts ...grpc.CallOption) (*RetrieveScoreResponse, error) {
	out := new(RetrieveScoreResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Class/RetrieveScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classClient) UpdateClassCode(ctx context.Context, in *UpdateClassCodeRequest, opts ...grpc.CallOption) (*UpdateClassCodeResponse, error) {
	out := new(UpdateClassCodeResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Class/UpdateClassCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classClient) AddClassMember(ctx context.Context, in *AddClassMemberRequest, opts ...grpc.CallOption) (*AddClassMemberResponse, error) {
	out := new(AddClassMemberResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Class/AddClassMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classClient) TeacherRetrieveStreamToken(ctx context.Context, in *TeacherRetrieveStreamTokenRequest, opts ...grpc.CallOption) (*TeacherRetrieveStreamTokenResponse, error) {
	out := new(TeacherRetrieveStreamTokenResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Class/TeacherRetrieveStreamToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classClient) StudentRetrieveStreamToken(ctx context.Context, in *StudentRetrieveStreamTokenRequest, opts ...grpc.CallOption) (*StudentRetrieveStreamTokenResponse, error) {
	out := new(StudentRetrieveStreamTokenResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Class/StudentRetrieveStreamToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classClient) EndLiveLesson(ctx context.Context, in *EndLiveLessonRequest, opts ...grpc.CallOption) (*EndLiveLessonResponse, error) {
	out := new(EndLiveLessonResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Class/EndLiveLesson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classClient) JoinLesson(ctx context.Context, in *JoinLessonRequest, opts ...grpc.CallOption) (*JoinLessonResponse, error) {
	out := new(JoinLessonResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Class/JoinLesson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classClient) LeaveLesson(ctx context.Context, in *LeaveLessonRequest, opts ...grpc.CallOption) (*LeaveLessonResponse, error) {
	out := new(LeaveLessonResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Class/LeaveLesson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *classClient) TeacherAssignStudentWithTopic(ctx context.Context, in *TeacherAssignStudentWithTopicRequest, opts ...grpc.CallOption) (*TeacherAssignStudentWithTopicResponse, error) {
	out := new(TeacherAssignStudentWithTopicResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Class/TeacherAssignStudentWithTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classClient) RetrieveMedia(ctx context.Context, in *RetrieveMediaRequest, opts ...grpc.CallOption) (*RetrieveMediaResponse, error) {
	out := new(RetrieveMediaResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Class/RetrieveMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classClient) UpsertMedia(ctx context.Context, in *UpsertMediaRequest, opts ...grpc.CallOption) (*UpsertMediaResponse, error) {
	out := new(UpsertMediaResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Class/UpsertMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClassServer is the server API for Class service.
type ClassServer interface {
	RegisterTeacher(context.Context, *RegisterTeacherRequest) (*RegisterTeacherResponse, error)
	CreateClass(context.Context, *CreateClassRequest) (*CreateClassResponse, error)
	EditClass(context.Context, *EditClassRequest) (*EditClassResponse, error)
	JoinClass(context.Context, *JoinClassRequest) (*JoinClassResponse, error)
	RemoveMember(context.Context, *RemoveMemberRequest) (*RemoveMemberResponse, error)
	LeaveClass(context.Context, *LeaveClassRequest) (*LeaveClassResponse, error)
	RetrieveAssignedPresetStudyPlan(context.Context, *RetrieveAssignedPresetStudyPlanRequest) (*RetrieveAssignedPresetStudyPlanResponse, error)
	RetrieveClassMember(context.Context, *RetrieveClassMemberRequest) (*RetrieveClassMemberResponse, error)
	TeacherAssignClassWithTopic(context.Context, *TeacherAssignClassWithTopicRequest) (*TeacherAssignClassWithTopicResponse, error)
	RemoveAssignedTopic(context.Context, *RemoveAssignedTopicRequest) (*RemoveAssignedTopicResponse, error)
	EditAssignedTopic(context.Context, *EditAssignedTopicRequest) (*EditAssignedTopicResponse, error)
	RetrieveActiveClassAssignment(context.Context, *RetrieveActiveClassAssignmentRequest) (*RetrieveActiveClassAssignmentResponse, error)
	RetrievePastClassAssignment(context.Context, *RetrievePastClassAssignmentRequest) (*RetrievePastClassAssignmentResponse, error)
	RetrieveClassLearningStatistics(context.Context, *RetrieveClassLearningStatisticsRequest) (*RetrieveClassLearningStatisticsResponse, error)
	RetrieveStudentLearningStatistics(context.Context, *RetrieveStudentLearningStatisticsRequest) (*RetrieveStudentLearningStatisticsResponse, error)
	CreateCustomAssignment(context.Context, *CreateCustomAssignmentRequest) (*CreateCustomAssignmentResponse, error)
	MarkTheSubmissions(context.Context, *MarkTheSubmissionsRequest) (*MarkTheSubmissionsResponse, error)
	ListSubmissions(context.Context, *ListSubmissionsRequest) (*ListSubmissionsResponse, error)
	RetrieveScore(context.Context, *RetrieveScoreRequest) (*RetrieveScoreResponse, error)
	UpdateClassCode(context.Context, *UpdateClassCodeRequest) (*UpdateClassCodeResponse, error)
	AddClassMember(context.Context, *AddClassMemberRequest) (*AddClassMemberResponse, error)
	TeacherRetrieveStreamToken(context.Context, *TeacherRetrieveStreamTokenRequest) (*TeacherRetrieveStreamTokenResponse, error)
	StudentRetrieveStreamToken(context.Context, *StudentRetrieveStreamTokenRequest) (*StudentRetrieveStreamTokenResponse, error)
	EndLiveLesson(context.Context, *EndLiveLessonRequest) (*EndLiveLessonResponse, error)
	JoinLesson(context.Context, *JoinLessonRequest) (*JoinLessonResponse, error)
	LeaveLesson(context.Context, *LeaveLessonRequest) (*LeaveLessonResponse, error)
	TeacherAssignStudentWithTopic(context.Context, *TeacherAssignStudentWithTopicRequest) (*TeacherAssignStudentWithTopicResponse, error)
	RetrieveMedia(context.Context, *RetrieveMediaRequest) (*RetrieveMediaResponse, error)
	UpsertMedia(context.Context, *UpsertMediaRequest) (*UpsertMediaResponse, error)
}

// UnimplementedClassServer can be embedded to have forward compatible implementations.
type UnimplementedClassServer struct {
}

func (*UnimplementedClassServer) RegisterTeacher(ctx context.Context, req *RegisterTeacherRequest) (*RegisterTeacherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTeacher not implemented")
}
func (*UnimplementedClassServer) CreateClass(ctx context.Context, req *CreateClassRequest) (*CreateClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClass not implemented")
}
func (*UnimplementedClassServer) EditClass(ctx context.Context, req *EditClassRequest) (*EditClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditClass not implemented")
}
func (*UnimplementedClassServer) JoinClass(ctx context.Context, req *JoinClassRequest) (*JoinClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinClass not implemented")
}
func (*UnimplementedClassServer) RemoveMember(ctx context.Context, req *RemoveMemberRequest) (*RemoveMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMember not implemented")
}
func (*UnimplementedClassServer) LeaveClass(ctx context.Context, req *LeaveClassRequest) (*LeaveClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveClass not implemented")
}
func (*UnimplementedClassServer) RetrieveAssignedPresetStudyPlan(ctx context.Context, req *RetrieveAssignedPresetStudyPlanRequest) (*RetrieveAssignedPresetStudyPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveAssignedPresetStudyPlan not implemented")
}
func (*UnimplementedClassServer) RetrieveClassMember(ctx context.Context, req *RetrieveClassMemberRequest) (*RetrieveClassMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveClassMember not implemented")
}
func (*UnimplementedClassServer) TeacherAssignClassWithTopic(ctx context.Context, req *TeacherAssignClassWithTopicRequest) (*TeacherAssignClassWithTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherAssignClassWithTopic not implemented")
}
func (*UnimplementedClassServer) RemoveAssignedTopic(ctx context.Context, req *RemoveAssignedTopicRequest) (*RemoveAssignedTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAssignedTopic not implemented")
}
func (*UnimplementedClassServer) EditAssignedTopic(ctx context.Context, req *EditAssignedTopicRequest) (*EditAssignedTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditAssignedTopic not implemented")
}
func (*UnimplementedClassServer) RetrieveActiveClassAssignment(ctx context.Context, req *RetrieveActiveClassAssignmentRequest) (*RetrieveActiveClassAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveActiveClassAssignment not implemented")
}
func (*UnimplementedClassServer) RetrievePastClassAssignment(ctx context.Context, req *RetrievePastClassAssignmentRequest) (*RetrievePastClassAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrievePastClassAssignment not implemented")
}
func (*UnimplementedClassServer) RetrieveClassLearningStatistics(ctx context.Context, req *RetrieveClassLearningStatisticsRequest) (*RetrieveClassLearningStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveClassLearningStatistics not implemented")
}
func (*UnimplementedClassServer) RetrieveStudentLearningStatistics(ctx context.Context, req *RetrieveStudentLearningStatisticsRequest) (*RetrieveStudentLearningStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveStudentLearningStatistics not implemented")
}
func (*UnimplementedClassServer) CreateCustomAssignment(ctx context.Context, req *CreateCustomAssignmentRequest) (*CreateCustomAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomAssignment not implemented")
}
func (*UnimplementedClassServer) MarkTheSubmissions(ctx context.Context, req *MarkTheSubmissionsRequest) (*MarkTheSubmissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkTheSubmissions not implemented")
}
func (*UnimplementedClassServer) ListSubmissions(ctx context.Context, req *ListSubmissionsRequest) (*ListSubmissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubmissions not implemented")
}
func (*UnimplementedClassServer) RetrieveScore(ctx context.Context, req *RetrieveScoreRequest) (*RetrieveScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveScore not implemented")
}
func (*UnimplementedClassServer) UpdateClassCode(ctx context.Context, req *UpdateClassCodeRequest) (*UpdateClassCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClassCode not implemented")
}
func (*UnimplementedClassServer) AddClassMember(ctx context.Context, req *AddClassMemberRequest) (*AddClassMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddClassMember not implemented")
}
func (*UnimplementedClassServer) TeacherRetrieveStreamToken(ctx context.Context, req *TeacherRetrieveStreamTokenRequest) (*TeacherRetrieveStreamTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherRetrieveStreamToken not implemented")
}
func (*UnimplementedClassServer) StudentRetrieveStreamToken(ctx context.Context, req *StudentRetrieveStreamTokenRequest) (*StudentRetrieveStreamTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StudentRetrieveStreamToken not implemented")
}
func (*UnimplementedClassServer) EndLiveLesson(ctx context.Context, req *EndLiveLessonRequest) (*EndLiveLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndLiveLesson not implemented")
}
func (*UnimplementedClassServer) JoinLesson(ctx context.Context, req *JoinLessonRequest) (*JoinLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinLesson not implemented")
}
func (*UnimplementedClassServer) LeaveLesson(ctx context.Context, req *LeaveLessonRequest) (*LeaveLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveLesson not implemented")
}
func (*UnimplementedClassServer) TeacherAssignStudentWithTopic(ctx context.Context, req *TeacherAssignStudentWithTopicRequest) (*TeacherAssignStudentWithTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherAssignStudentWithTopic not implemented")
}
func (*UnimplementedClassServer) RetrieveMedia(ctx context.Context, req *RetrieveMediaRequest) (*RetrieveMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveMedia not implemented")
}
func (*UnimplementedClassServer) UpsertMedia(ctx context.Context, req *UpsertMediaRequest) (*UpsertMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertMedia not implemented")
}

func RegisterClassServer(s *grpc.Server, srv ClassServer) {
	s.RegisterService(&_Class_serviceDesc, srv)
}

func _Class_RegisterTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServer).RegisterTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Class/RegisterTeacher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServer).RegisterTeacher(ctx, req.(*RegisterTeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Class_CreateClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServer).CreateClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Class/CreateClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServer).CreateClass(ctx, req.(*CreateClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Class_EditClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServer).EditClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Class/EditClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServer).EditClass(ctx, req.(*EditClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Class_JoinClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServer).JoinClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Class/JoinClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServer).JoinClass(ctx, req.(*JoinClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Class_RemoveMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServer).RemoveMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Class/RemoveMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServer).RemoveMember(ctx, req.(*RemoveMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Class_LeaveClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServer).LeaveClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Class/LeaveClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServer).LeaveClass(ctx, req.(*LeaveClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Class_RetrieveAssignedPresetStudyPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveAssignedPresetStudyPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServer).RetrieveAssignedPresetStudyPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Class/RetrieveAssignedPresetStudyPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServer).RetrieveAssignedPresetStudyPlan(ctx, req.(*RetrieveAssignedPresetStudyPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Class_RetrieveClassMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveClassMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServer).RetrieveClassMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Class/RetrieveClassMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServer).RetrieveClassMember(ctx, req.(*RetrieveClassMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Class_TeacherAssignClassWithTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeacherAssignClassWithTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServer).TeacherAssignClassWithTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Class/TeacherAssignClassWithTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServer).TeacherAssignClassWithTopic(ctx, req.(*TeacherAssignClassWithTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Class_RemoveAssignedTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAssignedTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServer).RemoveAssignedTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Class/RemoveAssignedTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServer).RemoveAssignedTopic(ctx, req.(*RemoveAssignedTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Class_EditAssignedTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditAssignedTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServer).EditAssignedTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Class/EditAssignedTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServer).EditAssignedTopic(ctx, req.(*EditAssignedTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Class_RetrieveActiveClassAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveActiveClassAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServer).RetrieveActiveClassAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Class/RetrieveActiveClassAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServer).RetrieveActiveClassAssignment(ctx, req.(*RetrieveActiveClassAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Class_RetrievePastClassAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrievePastClassAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServer).RetrievePastClassAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Class/RetrievePastClassAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServer).RetrievePastClassAssignment(ctx, req.(*RetrievePastClassAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Class_RetrieveClassLearningStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveClassLearningStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServer).RetrieveClassLearningStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Class/RetrieveClassLearningStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServer).RetrieveClassLearningStatistics(ctx, req.(*RetrieveClassLearningStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Class_RetrieveStudentLearningStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveStudentLearningStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServer).RetrieveStudentLearningStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Class/RetrieveStudentLearningStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServer).RetrieveStudentLearningStatistics(ctx, req.(*RetrieveStudentLearningStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Class_CreateCustomAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServer).CreateCustomAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Class/CreateCustomAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServer).CreateCustomAssignment(ctx, req.(*CreateCustomAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Class_MarkTheSubmissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkTheSubmissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServer).MarkTheSubmissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Class/MarkTheSubmissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServer).MarkTheSubmissions(ctx, req.(*MarkTheSubmissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Class_ListSubmissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubmissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServer).ListSubmissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Class/ListSubmissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServer).ListSubmissions(ctx, req.(*ListSubmissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Class_RetrieveScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServer).RetrieveScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Class/RetrieveScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServer).RetrieveScore(ctx, req.(*RetrieveScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Class_UpdateClassCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClassCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServer).UpdateClassCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Class/UpdateClassCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServer).UpdateClassCode(ctx, req.(*UpdateClassCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Class_AddClassMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddClassMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServer).AddClassMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Class/AddClassMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServer).AddClassMember(ctx, req.(*AddClassMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Class_TeacherRetrieveStreamToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeacherRetrieveStreamTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServer).TeacherRetrieveStreamToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Class/TeacherRetrieveStreamToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServer).TeacherRetrieveStreamToken(ctx, req.(*TeacherRetrieveStreamTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Class_StudentRetrieveStreamToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentRetrieveStreamTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServer).StudentRetrieveStreamToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Class/StudentRetrieveStreamToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServer).StudentRetrieveStreamToken(ctx, req.(*StudentRetrieveStreamTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Class_EndLiveLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndLiveLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServer).EndLiveLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Class/EndLiveLesson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServer).EndLiveLesson(ctx, req.(*EndLiveLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Class_JoinLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServer).JoinLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Class/JoinLesson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServer).JoinLesson(ctx, req.(*JoinLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Class_LeaveLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServer).LeaveLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Class/LeaveLesson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServer).LeaveLesson(ctx, req.(*LeaveLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Class_TeacherAssignStudentWithTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeacherAssignStudentWithTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServer).TeacherAssignStudentWithTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Class/TeacherAssignStudentWithTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServer).TeacherAssignStudentWithTopic(ctx, req.(*TeacherAssignStudentWithTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Class_RetrieveMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServer).RetrieveMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Class/RetrieveMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServer).RetrieveMedia(ctx, req.(*RetrieveMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Class_UpsertMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServer).UpsertMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Class/UpsertMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServer).UpsertMedia(ctx, req.(*UpsertMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Class_serviceDesc = grpc.ServiceDesc{
	ServiceName: "manabie.bob.Class",
	HandlerType: (*ClassServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterTeacher",
			Handler:    _Class_RegisterTeacher_Handler,
		},
		{
			MethodName: "CreateClass",
			Handler:    _Class_CreateClass_Handler,
		},
		{
			MethodName: "EditClass",
			Handler:    _Class_EditClass_Handler,
		},
		{
			MethodName: "JoinClass",
			Handler:    _Class_JoinClass_Handler,
		},
		{
			MethodName: "RemoveMember",
			Handler:    _Class_RemoveMember_Handler,
		},
		{
			MethodName: "LeaveClass",
			Handler:    _Class_LeaveClass_Handler,
		},
		{
			MethodName: "RetrieveAssignedPresetStudyPlan",
			Handler:    _Class_RetrieveAssignedPresetStudyPlan_Handler,
		},
		{
			MethodName: "RetrieveClassMember",
			Handler:    _Class_RetrieveClassMember_Handler,
		},
		{
			MethodName: "TeacherAssignClassWithTopic",
			Handler:    _Class_TeacherAssignClassWithTopic_Handler,
		},
		{
			MethodName: "RemoveAssignedTopic",
			Handler:    _Class_RemoveAssignedTopic_Handler,
		},
		{
			MethodName: "EditAssignedTopic",
			Handler:    _Class_EditAssignedTopic_Handler,
		},
		{
			MethodName: "RetrieveActiveClassAssignment",
			Handler:    _Class_RetrieveActiveClassAssignment_Handler,
		},
		{
			MethodName: "RetrievePastClassAssignment",
			Handler:    _Class_RetrievePastClassAssignment_Handler,
		},
		{
			MethodName: "RetrieveClassLearningStatistics",
			Handler:    _Class_RetrieveClassLearningStatistics_Handler,
		},
		{
			MethodName: "RetrieveStudentLearningStatistics",
			Handler:    _Class_RetrieveStudentLearningStatistics_Handler,
		},
		{
			MethodName: "CreateCustomAssignment",
			Handler:    _Class_CreateCustomAssignment_Handler,
		},
		{
			MethodName: "MarkTheSubmissions",
			Handler:    _Class_MarkTheSubmissions_Handler,
		},
		{
			MethodName: "ListSubmissions",
			Handler:    _Class_ListSubmissions_Handler,
		},
		{
			MethodName: "RetrieveScore",
			Handler:    _Class_RetrieveScore_Handler,
		},
		{
			MethodName: "UpdateClassCode",
			Handler:    _Class_UpdateClassCode_Handler,
		},
		{
			MethodName: "AddClassMember",
			Handler:    _Class_AddClassMember_Handler,
		},
		{
			MethodName: "TeacherRetrieveStreamToken",
			Handler:    _Class_TeacherRetrieveStreamToken_Handler,
		},
		{
			MethodName: "StudentRetrieveStreamToken",
			Handler:    _Class_StudentRetrieveStreamToken_Handler,
		},
		{
			MethodName: "EndLiveLesson",
			Handler:    _Class_EndLiveLesson_Handler,
		},
		{
			MethodName: "JoinLesson",
			Handler:    _Class_JoinLesson_Handler,
		},
		{
			MethodName: "LeaveLesson",
			Handler:    _Class_LeaveLesson_Handler,
		},
		{
			MethodName: "TeacherAssignStudentWithTopic",
			Handler:    _Class_TeacherAssignStudentWithTopic_Handler,
		},
		{
			MethodName: "RetrieveMedia",
			Handler:    _Class_RetrieveMedia_Handler,
		},
		{
			MethodName: "UpsertMedia",
			Handler:    _Class_UpsertMedia_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "class.proto",
}

func (m *CreateClassRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateClassRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateClassRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OwnerIds) > 0 {
		for iNdEx := len(m.OwnerIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OwnerIds[iNdEx])
			copy(dAtA[i:], m.OwnerIds[iNdEx])
			i = encodeVarintClass(dAtA, i, uint64(len(m.OwnerIds[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.OwnerId) > 0 {
		i -= len(m.OwnerId)
		copy(dAtA[i:], m.OwnerId)
		i = encodeVarintClass(dAtA, i, uint64(len(m.OwnerId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Subjects) > 0 {
		dAtA2 := make([]byte, len(m.Subjects)*10)
		var j1 int
		for _, num := range m.Subjects {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintClass(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Grades) > 0 {
		for iNdEx := len(m.Grades) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Grades[iNdEx])
			copy(dAtA[i:], m.Grades[iNdEx])
			i = encodeVarintClass(dAtA, i, uint64(len(m.Grades[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ClassName) > 0 {
		i -= len(m.ClassName)
		copy(dAtA[i:], m.ClassName)
		i = encodeVarintClass(dAtA, i, uint64(len(m.ClassName)))
		i--
		dAtA[i] = 0x12
	}
	if m.SchoolId != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.SchoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateClassResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateClassResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateClassResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClassId != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EditClassRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditClassRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EditClassRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClassName) > 0 {
		i -= len(m.ClassName)
		copy(dAtA[i:], m.ClassName)
		i = encodeVarintClass(dAtA, i, uint64(len(m.ClassName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ClassId != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EditClassResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditClassResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EditClassResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *JoinClassRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinClassRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JoinClassRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClassCode) > 0 {
		i -= len(m.ClassCode)
		copy(dAtA[i:], m.ClassCode)
		i = encodeVarintClass(dAtA, i, uint64(len(m.ClassCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JoinClassResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinClassResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JoinClassResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClassId != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClassEntity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClassEntity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClassEntity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalStudent != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.TotalStudent))
		i--
		dAtA[i] = 0x48
	}
	if len(m.OwnerIds) > 0 {
		for iNdEx := len(m.OwnerIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OwnerIds[iNdEx])
			copy(dAtA[i:], m.OwnerIds[iNdEx])
			i = encodeVarintClass(dAtA, i, uint64(len(m.OwnerIds[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Grades) > 0 {
		for iNdEx := len(m.Grades) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Grades[iNdEx])
			copy(dAtA[i:], m.Grades[iNdEx])
			i = encodeVarintClass(dAtA, i, uint64(len(m.Grades[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Subject) > 0 {
		dAtA4 := make([]byte, len(m.Subject)*10)
		var j3 int
		for _, num := range m.Subject {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintClass(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ClassCode) > 0 {
		i -= len(m.ClassCode)
		copy(dAtA[i:], m.ClassCode)
		i = encodeVarintClass(dAtA, i, uint64(len(m.ClassCode)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SchoolId != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.SchoolId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintClass(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintClass(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemoveMemberRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveMemberRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveMemberRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserIds) > 0 {
		for iNdEx := len(m.UserIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UserIds[iNdEx])
			copy(dAtA[i:], m.UserIds[iNdEx])
			i = encodeVarintClass(dAtA, i, uint64(len(m.UserIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ClassId != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemoveMemberResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveMemberResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveMemberResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *LeaveClassRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaveClassRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaveClassRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClassId != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LeaveClassResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaveClassResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaveClassResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AssignPresetStudyPlanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssignPresetStudyPlanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssignPresetStudyPlanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RetrieveAssignedPresetStudyPlanRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveAssignedPresetStudyPlanRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveAssignedPresetStudyPlanRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClassId != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveAssignedPresetStudyPlanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveAssignedPresetStudyPlanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveAssignedPresetStudyPlanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PresetStudyPlans) > 0 {
		for iNdEx := len(m.PresetStudyPlans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PresetStudyPlans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClass(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveClassMemberRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveClassMemberRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveClassMemberRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClassId != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveClassMemberResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveClassMemberResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveClassMemberResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClass(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveClassMemberResponse_Member) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveClassMemberResponse_Member) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveClassMemberResponse_Member) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.JoinAt != nil {
		{
			size, err := m.JoinAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClass(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.UserGroup != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.UserGroup))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintClass(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TeacherAssignClassWithTopicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeacherAssignClassWithTopicRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeacherAssignClassWithTopicRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndDate != nil {
		{
			size, err := m.EndDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClass(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.StartDate != nil {
		{
			size, err := m.StartDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClass(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TopicId) > 0 {
		i -= len(m.TopicId)
		copy(dAtA[i:], m.TopicId)
		i = encodeVarintClass(dAtA, i, uint64(len(m.TopicId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ClassId != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TeacherAssignClassWithTopicResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeacherAssignClassWithTopicResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeacherAssignClassWithTopicResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssignmentId) > 0 {
		i -= len(m.AssignmentId)
		copy(dAtA[i:], m.AssignmentId)
		i = encodeVarintClass(dAtA, i, uint64(len(m.AssignmentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveActiveClassAssignmentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveActiveClassAssignmentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveActiveClassAssignmentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.ClassId != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Assignment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Assignment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Assignment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudentIds) > 0 {
		for iNdEx := len(m.StudentIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StudentIds[iNdEx])
			copy(dAtA[i:], m.StudentIds[iNdEx])
			i = encodeVarintClass(dAtA, i, uint64(len(m.StudentIds[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.EndDate != nil {
		{
			size, err := m.EndDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClass(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.StartDate != nil {
		{
			size, err := m.StartDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClass(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Status != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.Topic != nil {
		{
			size, err := m.Topic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClass(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AssignmentId) > 0 {
		i -= len(m.AssignmentId)
		copy(dAtA[i:], m.AssignmentId)
		i = encodeVarintClass(dAtA, i, uint64(len(m.AssignmentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveActiveClassAssignmentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveActiveClassAssignmentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveActiveClassAssignmentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Assignments) > 0 {
		for iNdEx := len(m.Assignments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assignments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClass(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RetrievePastClassAssignmentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrievePastClassAssignmentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrievePastClassAssignmentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x18
	}
	if m.Limit != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.ClassId != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RetrievePastClassAssignmentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrievePastClassAssignmentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrievePastClassAssignmentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Total != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Assignments) > 0 {
		for iNdEx := len(m.Assignments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assignments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClass(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RemoveAssignedTopicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveAssignedTopicRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveAssignedTopicRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssignmentId) > 0 {
		i -= len(m.AssignmentId)
		copy(dAtA[i:], m.AssignmentId)
		i = encodeVarintClass(dAtA, i, uint64(len(m.AssignmentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveAssignedTopicResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveAssignedTopicResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveAssignedTopicResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EditAssignedTopicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditAssignedTopicRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EditAssignedTopicRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndDate != nil {
		{
			size, err := m.EndDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClass(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.StartDate != nil {
		{
			size, err := m.StartDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClass(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AssignmentId) > 0 {
		i -= len(m.AssignmentId)
		copy(dAtA[i:], m.AssignmentId)
		i = encodeVarintClass(dAtA, i, uint64(len(m.AssignmentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EditAssignedTopicResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EditAssignedTopicResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EditAssignedTopicResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewAssignmentId) > 0 {
		i -= len(m.NewAssignmentId)
		copy(dAtA[i:], m.NewAssignmentId)
		i = encodeVarintClass(dAtA, i, uint64(len(m.NewAssignmentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveClassLearningStatisticsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveClassLearningStatisticsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveClassLearningStatisticsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TopicId) > 0 {
		i -= len(m.TopicId)
		copy(dAtA[i:], m.TopicId)
		i = encodeVarintClass(dAtA, i, uint64(len(m.TopicId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ClassId != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StudentLearningStatistics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudentLearningStatistics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudentLearningStatistics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size := m.Data.Size()
			i -= size
			if _, err := m.Data.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *StudentLearningStatistics_ByTopic_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudentLearningStatistics_ByTopic_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ByTopic != nil {
		{
			size, err := m.ByTopic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClass(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *StudentLearningStatistics_ByTopic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudentLearningStatistics_ByTopic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudentLearningStatistics_ByTopic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Date != nil {
		{
			size, err := m.Date.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClass(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Accuracy != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Accuracy))))
		i--
		dAtA[i] = 0x35
	}
	if m.TimeSpent != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.TimeSpent))
		i--
		dAtA[i] = 0x28
	}
	if m.Completion != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Completion))))
		i--
		dAtA[i] = 0x25
	}
	if len(m.StudentName) > 0 {
		i -= len(m.StudentName)
		copy(dAtA[i:], m.StudentName)
		i = encodeVarintClass(dAtA, i, uint64(len(m.StudentName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintClass(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveClassLearningStatisticsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveClassLearningStatisticsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveClassLearningStatisticsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalSubmitted != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.TotalSubmitted))
		i--
		dAtA[i] = 0x20
	}
	if m.AverageScore != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.AverageScore))))
		i--
		dAtA[i] = 0x1d
	}
	if m.TotalCompletion != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.TotalCompletion))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Stats) > 0 {
		for iNdEx := len(m.Stats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClass(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveStudentLearningStatisticsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveStudentLearningStatisticsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveStudentLearningStatisticsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintClass(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TopicId) > 0 {
		i -= len(m.TopicId)
		copy(dAtA[i:], m.TopicId)
		i = encodeVarintClass(dAtA, i, uint64(len(m.TopicId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ClassId != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveStudentLearningStatisticsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveStudentLearningStatisticsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveStudentLearningStatisticsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Stats) > 0 {
		for iNdEx := len(m.Stats) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stats[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClass(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RegisterTeacherRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterTeacherRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterTeacherRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Country != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SchoolName) > 0 {
		i -= len(m.SchoolName)
		copy(dAtA[i:], m.SchoolName)
		i = encodeVarintClass(dAtA, i, uint64(len(m.SchoolName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintClass(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintClass(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterTeacherResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterTeacherResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterTeacherResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Successful {
		i--
		if m.Successful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubmissionScore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmissionScore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmissionScore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Notes) > 0 {
		i -= len(m.Notes)
		copy(dAtA[i:], m.Notes)
		i = encodeVarintClass(dAtA, i, uint64(len(m.Notes)))
		i--
		dAtA[i] = 0x22
	}
	if m.TotalScore != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TotalScore))))
		i--
		dAtA[i] = 0x1d
	}
	if m.GivenScore != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.GivenScore))))
		i--
		dAtA[i] = 0x15
	}
	if len(m.SubmissionId) > 0 {
		i -= len(m.SubmissionId)
		copy(dAtA[i:], m.SubmissionId)
		i = encodeVarintClass(dAtA, i, uint64(len(m.SubmissionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MarkTheSubmissionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarkTheSubmissionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarkTheSubmissionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Scores) > 0 {
		for iNdEx := len(m.Scores) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Scores[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClass(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MarkTheSubmissionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarkTheSubmissionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarkTheSubmissionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Successful {
		i--
		if m.Successful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateCustomAssignmentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateCustomAssignmentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateCustomAssignmentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SelectedLoIds) > 0 {
		for iNdEx := len(m.SelectedLoIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SelectedLoIds[iNdEx])
			copy(dAtA[i:], m.SelectedLoIds[iNdEx])
			i = encodeVarintClass(dAtA, i, uint64(len(m.SelectedLoIds[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if m.EndDate != nil {
		{
			size, err := m.EndDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClass(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.StartDate != nil {
		{
			size, err := m.StartDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClass(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.EssayRequired {
		i--
		if m.EssayRequired {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.Attachments) > 0 {
		for iNdEx := len(m.Attachments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attachments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClass(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Instruction != nil {
		{
			size, err := m.Instruction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClass(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.CopiedTopicId != nil {
		{
			size, err := m.CopiedTopicId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClass(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Grade != nil {
		{
			size, err := m.Grade.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClass(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Name != nil {
		{
			size, err := m.Name.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClass(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Subject != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.Subject))
		i--
		dAtA[i] = 0x18
	}
	if m.Country != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x10
	}
	if m.ClassId != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateCustomAssignmentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateCustomAssignmentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateCustomAssignmentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssignmentId) > 0 {
		i -= len(m.AssignmentId)
		copy(dAtA[i:], m.AssignmentId)
		i = encodeVarintClass(dAtA, i, uint64(len(m.AssignmentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TopicId) > 0 {
		i -= len(m.TopicId)
		copy(dAtA[i:], m.TopicId)
		i = encodeVarintClass(dAtA, i, uint64(len(m.TopicId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateClassCodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateClassCodeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateClassCodeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClassId != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateClassCodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateClassCodeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateClassCodeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClassCode) > 0 {
		i -= len(m.ClassCode)
		copy(dAtA[i:], m.ClassCode)
		i = encodeVarintClass(dAtA, i, uint64(len(m.ClassCode)))
		i--
		dAtA[i] = 0x12
	}
	if m.ClassId != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddClassMemberRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddClassMemberRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddClassMemberRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TeacherIds) > 0 {
		for iNdEx := len(m.TeacherIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TeacherIds[iNdEx])
			copy(dAtA[i:], m.TeacherIds[iNdEx])
			i = encodeVarintClass(dAtA, i, uint64(len(m.TeacherIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ClassId != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddClassMemberResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddClassMemberResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddClassMemberResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RetrieveScoreRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveScoreRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveScoreRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TopicId) > 0 {
		i -= len(m.TopicId)
		copy(dAtA[i:], m.TopicId)
		i = encodeVarintClass(dAtA, i, uint64(len(m.TopicId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Filter != nil {
		{
			size := m.Filter.Size()
			i -= size
			if _, err := m.Filter.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveScoreRequest_StudentId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveScoreRequest_StudentId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.StudentId)
	copy(dAtA[i:], m.StudentId)
	i = encodeVarintClass(dAtA, i, uint64(len(m.StudentId)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *RetrieveScoreRequest_ClassId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveScoreRequest_ClassId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintClass(dAtA, i, uint64(m.ClassId))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *RetrieveScoreResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveScoreResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveScoreResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AverageScore != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.AverageScore))))
		i--
		dAtA[i] = 0x15
	}
	if len(m.Scores) > 0 {
		for iNdEx := len(m.Scores) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Scores[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClass(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveScoreResponse_Score) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveScoreResponse_Score) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveScoreResponse_Score) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalScore != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TotalScore))))
		i--
		dAtA[i] = 0x1d
	}
	if m.GivenScore != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.GivenScore))))
		i--
		dAtA[i] = 0x15
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintClass(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TeacherRetrieveStreamTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeacherRetrieveStreamTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeacherRetrieveStreamTokenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LessonId) > 0 {
		i -= len(m.LessonId)
		copy(dAtA[i:], m.LessonId)
		i = encodeVarintClass(dAtA, i, uint64(len(m.LessonId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TeacherRetrieveStreamTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeacherRetrieveStreamTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeacherRetrieveStreamTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StreamToken) > 0 {
		i -= len(m.StreamToken)
		copy(dAtA[i:], m.StreamToken)
		i = encodeVarintClass(dAtA, i, uint64(len(m.StreamToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VideoToken) > 0 {
		i -= len(m.VideoToken)
		copy(dAtA[i:], m.VideoToken)
		i = encodeVarintClass(dAtA, i, uint64(len(m.VideoToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StudentRetrieveStreamTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudentRetrieveStreamTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudentRetrieveStreamTokenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LessonId) > 0 {
		i -= len(m.LessonId)
		copy(dAtA[i:], m.LessonId)
		i = encodeVarintClass(dAtA, i, uint64(len(m.LessonId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StudentRetrieveStreamTokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudentRetrieveStreamTokenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudentRetrieveStreamTokenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StreamToken) > 0 {
		i -= len(m.StreamToken)
		copy(dAtA[i:], m.StreamToken)
		i = encodeVarintClass(dAtA, i, uint64(len(m.StreamToken)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *EndLiveLessonRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndLiveLessonRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndLiveLessonRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LessonId) > 0 {
		i -= len(m.LessonId)
		copy(dAtA[i:], m.LessonId)
		i = encodeVarintClass(dAtA, i, uint64(len(m.LessonId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EndLiveLessonResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EndLiveLessonResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EndLiveLessonResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *JoinLessonRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinLessonRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JoinLessonRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LessonId) > 0 {
		i -= len(m.LessonId)
		copy(dAtA[i:], m.LessonId)
		i = encodeVarintClass(dAtA, i, uint64(len(m.LessonId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *JoinLessonResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoinLessonResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JoinLessonResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VideoToken) > 0 {
		i -= len(m.VideoToken)
		copy(dAtA[i:], m.VideoToken)
		i = encodeVarintClass(dAtA, i, uint64(len(m.VideoToken)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RoomId) > 0 {
		i -= len(m.RoomId)
		copy(dAtA[i:], m.RoomId)
		i = encodeVarintClass(dAtA, i, uint64(len(m.RoomId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WhiteboardToken) > 0 {
		i -= len(m.WhiteboardToken)
		copy(dAtA[i:], m.WhiteboardToken)
		i = encodeVarintClass(dAtA, i, uint64(len(m.WhiteboardToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StreamToken) > 0 {
		i -= len(m.StreamToken)
		copy(dAtA[i:], m.StreamToken)
		i = encodeVarintClass(dAtA, i, uint64(len(m.StreamToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LeaveLessonRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaveLessonRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaveLessonRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LessonId) > 0 {
		i -= len(m.LessonId)
		copy(dAtA[i:], m.LessonId)
		i = encodeVarintClass(dAtA, i, uint64(len(m.LessonId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintClass(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LeaveLessonResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaveLessonResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LeaveLessonResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TeacherAssignStudentWithTopicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeacherAssignStudentWithTopicRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeacherAssignStudentWithTopicRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClassId != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x28
	}
	if m.EndDate != nil {
		{
			size, err := m.EndDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClass(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.StartDate != nil {
		{
			size, err := m.StartDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClass(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TopicId) > 0 {
		i -= len(m.TopicId)
		copy(dAtA[i:], m.TopicId)
		i = encodeVarintClass(dAtA, i, uint64(len(m.TopicId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StudentIds) > 0 {
		for iNdEx := len(m.StudentIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StudentIds[iNdEx])
			copy(dAtA[i:], m.StudentIds[iNdEx])
			i = encodeVarintClass(dAtA, i, uint64(len(m.StudentIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TeacherAssignStudentWithTopicResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeacherAssignStudentWithTopicResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeacherAssignStudentWithTopicResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssignmentId) > 0 {
		i -= len(m.AssignmentId)
		copy(dAtA[i:], m.AssignmentId)
		i = encodeVarintClass(dAtA, i, uint64(len(m.AssignmentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Comment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Comment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Comment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Duration != nil {
		{
			size, err := m.Duration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClass(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintClass(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConvertedImage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConvertedImage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConvertedImage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ImageUrl) > 0 {
		i -= len(m.ImageUrl)
		copy(dAtA[i:], m.ImageUrl)
		i = encodeVarintClass(dAtA, i, uint64(len(m.ImageUrl)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Height != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x10
	}
	if m.Width != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.Width))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Media) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Media) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Media) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Images) > 0 {
		for iNdEx := len(m.Images) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Images[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClass(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClass(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClass(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Type != 0 {
		i = encodeVarintClass(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Comments) > 0 {
		for iNdEx := len(m.Comments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Comments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClass(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Resource) > 0 {
		i -= len(m.Resource)
		copy(dAtA[i:], m.Resource)
		i = encodeVarintClass(dAtA, i, uint64(len(m.Resource)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintClass(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MediaId) > 0 {
		i -= len(m.MediaId)
		copy(dAtA[i:], m.MediaId)
		i = encodeVarintClass(dAtA, i, uint64(len(m.MediaId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveMediaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveMediaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveMediaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MediaIds) > 0 {
		for iNdEx := len(m.MediaIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MediaIds[iNdEx])
			copy(dAtA[i:], m.MediaIds[iNdEx])
			i = encodeVarintClass(dAtA, i, uint64(len(m.MediaIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveMediaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveMediaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveMediaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Media) > 0 {
		for iNdEx := len(m.Media) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Media[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClass(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpsertMediaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertMediaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertMediaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Media) > 0 {
		for iNdEx := len(m.Media) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Media[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClass(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpsertMediaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertMediaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertMediaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MediaIds) > 0 {
		for iNdEx := len(m.MediaIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MediaIds[iNdEx])
			copy(dAtA[i:], m.MediaIds[iNdEx])
			i = encodeVarintClass(dAtA, i, uint64(len(m.MediaIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintClass(dAtA []byte, offset int, v uint64) int {
	offset -= sovClass(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateClassRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SchoolId != 0 {
		n += 1 + sovClass(uint64(m.SchoolId))
	}
	l = len(m.ClassName)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	if len(m.Grades) > 0 {
		for _, s := range m.Grades {
			l = len(s)
			n += 1 + l + sovClass(uint64(l))
		}
	}
	if len(m.Subjects) > 0 {
		l = 0
		for _, e := range m.Subjects {
			l += sovClass(uint64(e))
		}
		n += 1 + sovClass(uint64(l)) + l
	}
	l = len(m.OwnerId)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	if len(m.OwnerIds) > 0 {
		for _, s := range m.OwnerIds {
			l = len(s)
			n += 1 + l + sovClass(uint64(l))
		}
	}
	return n
}

func (m *CreateClassResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClassId != 0 {
		n += 1 + sovClass(uint64(m.ClassId))
	}
	return n
}

func (m *EditClassRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClassId != 0 {
		n += 1 + sovClass(uint64(m.ClassId))
	}
	l = len(m.ClassName)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *EditClassResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *JoinClassRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClassCode)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *JoinClassResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClassId != 0 {
		n += 1 + sovClass(uint64(m.ClassId))
	}
	return n
}

func (m *ClassEntity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovClass(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	if m.SchoolId != 0 {
		n += 1 + sovClass(uint64(m.SchoolId))
	}
	l = len(m.ClassCode)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	if len(m.Subject) > 0 {
		l = 0
		for _, e := range m.Subject {
			l += sovClass(uint64(e))
		}
		n += 1 + sovClass(uint64(l)) + l
	}
	if len(m.Grades) > 0 {
		for _, s := range m.Grades {
			l = len(s)
			n += 1 + l + sovClass(uint64(l))
		}
	}
	if len(m.OwnerIds) > 0 {
		for _, s := range m.OwnerIds {
			l = len(s)
			n += 1 + l + sovClass(uint64(l))
		}
	}
	if m.TotalStudent != 0 {
		n += 1 + sovClass(uint64(m.TotalStudent))
	}
	return n
}

func (m *RemoveMemberRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClassId != 0 {
		n += 1 + sovClass(uint64(m.ClassId))
	}
	if len(m.UserIds) > 0 {
		for _, s := range m.UserIds {
			l = len(s)
			n += 1 + l + sovClass(uint64(l))
		}
	}
	return n
}

func (m *RemoveMemberResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LeaveClassRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClassId != 0 {
		n += 1 + sovClass(uint64(m.ClassId))
	}
	return n
}

func (m *LeaveClassResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AssignPresetStudyPlanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RetrieveAssignedPresetStudyPlanRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClassId != 0 {
		n += 1 + sovClass(uint64(m.ClassId))
	}
	return n
}

func (m *RetrieveAssignedPresetStudyPlanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PresetStudyPlans) > 0 {
		for _, e := range m.PresetStudyPlans {
			l = e.Size()
			n += 1 + l + sovClass(uint64(l))
		}
	}
	return n
}

func (m *RetrieveClassMemberRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClassId != 0 {
		n += 1 + sovClass(uint64(m.ClassId))
	}
	return n
}

func (m *RetrieveClassMemberResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovClass(uint64(l))
		}
	}
	return n
}

func (m *RetrieveClassMemberResponse_Member) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	if m.UserGroup != 0 {
		n += 1 + sovClass(uint64(m.UserGroup))
	}
	if m.JoinAt != nil {
		l = m.JoinAt.Size()
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *TeacherAssignClassWithTopicRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClassId != 0 {
		n += 1 + sovClass(uint64(m.ClassId))
	}
	l = len(m.TopicId)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	if m.StartDate != nil {
		l = m.StartDate.Size()
		n += 1 + l + sovClass(uint64(l))
	}
	if m.EndDate != nil {
		l = m.EndDate.Size()
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *TeacherAssignClassWithTopicResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssignmentId)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *RetrieveActiveClassAssignmentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClassId != 0 {
		n += 1 + sovClass(uint64(m.ClassId))
	}
	if m.Limit != 0 {
		n += 1 + sovClass(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovClass(uint64(m.Page))
	}
	return n
}

func (m *Assignment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssignmentId)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	if m.Topic != nil {
		l = m.Topic.Size()
		n += 1 + l + sovClass(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovClass(uint64(m.Status))
	}
	if m.StartDate != nil {
		l = m.StartDate.Size()
		n += 1 + l + sovClass(uint64(l))
	}
	if m.EndDate != nil {
		l = m.EndDate.Size()
		n += 1 + l + sovClass(uint64(l))
	}
	if len(m.StudentIds) > 0 {
		for _, s := range m.StudentIds {
			l = len(s)
			n += 1 + l + sovClass(uint64(l))
		}
	}
	return n
}

func (m *RetrieveActiveClassAssignmentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Assignments) > 0 {
		for _, e := range m.Assignments {
			l = e.Size()
			n += 1 + l + sovClass(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovClass(uint64(m.Total))
	}
	return n
}

func (m *RetrievePastClassAssignmentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClassId != 0 {
		n += 1 + sovClass(uint64(m.ClassId))
	}
	if m.Limit != 0 {
		n += 1 + sovClass(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovClass(uint64(m.Page))
	}
	return n
}

func (m *RetrievePastClassAssignmentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Assignments) > 0 {
		for _, e := range m.Assignments {
			l = e.Size()
			n += 1 + l + sovClass(uint64(l))
		}
	}
	if m.Total != 0 {
		n += 1 + sovClass(uint64(m.Total))
	}
	return n
}

func (m *RemoveAssignedTopicRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssignmentId)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *RemoveAssignedTopicResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EditAssignedTopicRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssignmentId)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	if m.StartDate != nil {
		l = m.StartDate.Size()
		n += 1 + l + sovClass(uint64(l))
	}
	if m.EndDate != nil {
		l = m.EndDate.Size()
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *EditAssignedTopicResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NewAssignmentId)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *RetrieveClassLearningStatisticsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClassId != 0 {
		n += 1 + sovClass(uint64(m.ClassId))
	}
	l = len(m.TopicId)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *StudentLearningStatistics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		n += m.Data.Size()
	}
	return n
}

func (m *StudentLearningStatistics_ByTopic_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ByTopic != nil {
		l = m.ByTopic.Size()
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}
func (m *StudentLearningStatistics_ByTopic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.StudentName)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	if m.Completion != 0 {
		n += 5
	}
	if m.TimeSpent != 0 {
		n += 1 + sovClass(uint64(m.TimeSpent))
	}
	if m.Accuracy != 0 {
		n += 5
	}
	if m.Date != nil {
		l = m.Date.Size()
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *RetrieveClassLearningStatisticsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Stats) > 0 {
		for _, e := range m.Stats {
			l = e.Size()
			n += 1 + l + sovClass(uint64(l))
		}
	}
	if m.TotalCompletion != 0 {
		n += 1 + sovClass(uint64(m.TotalCompletion))
	}
	if m.AverageScore != 0 {
		n += 5
	}
	if m.TotalSubmitted != 0 {
		n += 1 + sovClass(uint64(m.TotalSubmitted))
	}
	return n
}

func (m *RetrieveStudentLearningStatisticsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClassId != 0 {
		n += 1 + sovClass(uint64(m.ClassId))
	}
	l = len(m.TopicId)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *RetrieveStudentLearningStatisticsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Stats) > 0 {
		for _, e := range m.Stats {
			l = e.Size()
			n += 1 + l + sovClass(uint64(l))
		}
	}
	return n
}

func (m *RegisterTeacherRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.SchoolName)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	if m.Country != 0 {
		n += 1 + sovClass(uint64(m.Country))
	}
	return n
}

func (m *RegisterTeacherResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Successful {
		n += 2
	}
	return n
}

func (m *SubmissionScore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubmissionId)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	if m.GivenScore != 0 {
		n += 5
	}
	if m.TotalScore != 0 {
		n += 5
	}
	l = len(m.Notes)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *MarkTheSubmissionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Scores) > 0 {
		for _, e := range m.Scores {
			l = e.Size()
			n += 1 + l + sovClass(uint64(l))
		}
	}
	return n
}

func (m *MarkTheSubmissionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Successful {
		n += 2
	}
	return n
}

func (m *CreateCustomAssignmentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClassId != 0 {
		n += 1 + sovClass(uint64(m.ClassId))
	}
	if m.Country != 0 {
		n += 1 + sovClass(uint64(m.Country))
	}
	if m.Subject != 0 {
		n += 1 + sovClass(uint64(m.Subject))
	}
	if m.Name != nil {
		l = m.Name.Size()
		n += 1 + l + sovClass(uint64(l))
	}
	if m.Grade != nil {
		l = m.Grade.Size()
		n += 1 + l + sovClass(uint64(l))
	}
	if m.CopiedTopicId != nil {
		l = m.CopiedTopicId.Size()
		n += 1 + l + sovClass(uint64(l))
	}
	if m.Instruction != nil {
		l = m.Instruction.Size()
		n += 1 + l + sovClass(uint64(l))
	}
	if len(m.Attachments) > 0 {
		for _, e := range m.Attachments {
			l = e.Size()
			n += 1 + l + sovClass(uint64(l))
		}
	}
	if m.EssayRequired {
		n += 2
	}
	if m.StartDate != nil {
		l = m.StartDate.Size()
		n += 1 + l + sovClass(uint64(l))
	}
	if m.EndDate != nil {
		l = m.EndDate.Size()
		n += 1 + l + sovClass(uint64(l))
	}
	if len(m.SelectedLoIds) > 0 {
		for _, s := range m.SelectedLoIds {
			l = len(s)
			n += 1 + l + sovClass(uint64(l))
		}
	}
	return n
}

func (m *CreateCustomAssignmentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TopicId)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.AssignmentId)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *UpdateClassCodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClassId != 0 {
		n += 1 + sovClass(uint64(m.ClassId))
	}
	return n
}

func (m *UpdateClassCodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClassId != 0 {
		n += 1 + sovClass(uint64(m.ClassId))
	}
	l = len(m.ClassCode)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *AddClassMemberRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClassId != 0 {
		n += 1 + sovClass(uint64(m.ClassId))
	}
	if len(m.TeacherIds) > 0 {
		for _, s := range m.TeacherIds {
			l = len(s)
			n += 1 + l + sovClass(uint64(l))
		}
	}
	return n
}

func (m *AddClassMemberResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RetrieveScoreRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Filter != nil {
		n += m.Filter.Size()
	}
	l = len(m.TopicId)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *RetrieveScoreRequest_StudentId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentId)
	n += 1 + l + sovClass(uint64(l))
	return n
}
func (m *RetrieveScoreRequest_ClassId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovClass(uint64(m.ClassId))
	return n
}
func (m *RetrieveScoreResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Scores) > 0 {
		for _, e := range m.Scores {
			l = e.Size()
			n += 1 + l + sovClass(uint64(l))
		}
	}
	if m.AverageScore != 0 {
		n += 5
	}
	return n
}

func (m *RetrieveScoreResponse_Score) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	if m.GivenScore != 0 {
		n += 5
	}
	if m.TotalScore != 0 {
		n += 5
	}
	return n
}

func (m *TeacherRetrieveStreamTokenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LessonId)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *TeacherRetrieveStreamTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VideoToken)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.StreamToken)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *StudentRetrieveStreamTokenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LessonId)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *StudentRetrieveStreamTokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StreamToken)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *EndLiveLessonRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LessonId)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *EndLiveLessonResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *JoinLessonRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LessonId)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *JoinLessonResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StreamToken)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.WhiteboardToken)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.RoomId)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.VideoToken)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *LeaveLessonRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.LessonId)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *LeaveLessonResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TeacherAssignStudentWithTopicRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StudentIds) > 0 {
		for _, s := range m.StudentIds {
			l = len(s)
			n += 1 + l + sovClass(uint64(l))
		}
	}
	l = len(m.TopicId)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	if m.StartDate != nil {
		l = m.StartDate.Size()
		n += 1 + l + sovClass(uint64(l))
	}
	if m.EndDate != nil {
		l = m.EndDate.Size()
		n += 1 + l + sovClass(uint64(l))
	}
	if m.ClassId != 0 {
		n += 1 + sovClass(uint64(m.ClassId))
	}
	return n
}

func (m *TeacherAssignStudentWithTopicResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssignmentId)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *Comment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	if m.Duration != nil {
		l = m.Duration.Size()
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *ConvertedImage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Width != 0 {
		n += 1 + sovClass(uint64(m.Width))
	}
	if m.Height != 0 {
		n += 1 + sovClass(uint64(m.Height))
	}
	l = len(m.ImageUrl)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	return n
}

func (m *Media) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MediaId)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	l = len(m.Resource)
	if l > 0 {
		n += 1 + l + sovClass(uint64(l))
	}
	if len(m.Comments) > 0 {
		for _, e := range m.Comments {
			l = e.Size()
			n += 1 + l + sovClass(uint64(l))
		}
	}
	if m.Type != 0 {
		n += 1 + sovClass(uint64(m.Type))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovClass(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovClass(uint64(l))
	}
	if len(m.Images) > 0 {
		for _, e := range m.Images {
			l = e.Size()
			n += 1 + l + sovClass(uint64(l))
		}
	}
	return n
}

func (m *RetrieveMediaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MediaIds) > 0 {
		for _, s := range m.MediaIds {
			l = len(s)
			n += 1 + l + sovClass(uint64(l))
		}
	}
	return n
}

func (m *RetrieveMediaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Media) > 0 {
		for _, e := range m.Media {
			l = e.Size()
			n += 1 + l + sovClass(uint64(l))
		}
	}
	return n
}

func (m *UpsertMediaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Media) > 0 {
		for _, e := range m.Media {
			l = e.Size()
			n += 1 + l + sovClass(uint64(l))
		}
	}
	return n
}

func (m *UpsertMediaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MediaIds) > 0 {
		for _, s := range m.MediaIds {
			l = len(s)
			n += 1 + l + sovClass(uint64(l))
		}
	}
	return n
}

func sovClass(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClass(x uint64) (n int) {
	return sovClass(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CreateClassRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateClassRequest{`,
		`SchoolId:` + fmt.Sprintf("%v", this.SchoolId) + `,`,
		`ClassName:` + fmt.Sprintf("%v", this.ClassName) + `,`,
		`Grades:` + fmt.Sprintf("%v", this.Grades) + `,`,
		`Subjects:` + fmt.Sprintf("%v", this.Subjects) + `,`,
		`OwnerId:` + fmt.Sprintf("%v", this.OwnerId) + `,`,
		`OwnerIds:` + fmt.Sprintf("%v", this.OwnerIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateClassResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateClassResponse{`,
		`ClassId:` + fmt.Sprintf("%v", this.ClassId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EditClassRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EditClassRequest{`,
		`ClassId:` + fmt.Sprintf("%v", this.ClassId) + `,`,
		`ClassName:` + fmt.Sprintf("%v", this.ClassName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EditClassResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EditClassResponse{`,
		`}`,
	}, "")
	return s
}
func (this *JoinClassRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JoinClassRequest{`,
		`ClassCode:` + fmt.Sprintf("%v", this.ClassCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JoinClassResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JoinClassResponse{`,
		`ClassId:` + fmt.Sprintf("%v", this.ClassId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ClassEntity) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ClassEntity{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Avatar:` + fmt.Sprintf("%v", this.Avatar) + `,`,
		`SchoolId:` + fmt.Sprintf("%v", this.SchoolId) + `,`,
		`ClassCode:` + fmt.Sprintf("%v", this.ClassCode) + `,`,
		`Subject:` + fmt.Sprintf("%v", this.Subject) + `,`,
		`Grades:` + fmt.Sprintf("%v", this.Grades) + `,`,
		`OwnerIds:` + fmt.Sprintf("%v", this.OwnerIds) + `,`,
		`TotalStudent:` + fmt.Sprintf("%v", this.TotalStudent) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveMemberRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveMemberRequest{`,
		`ClassId:` + fmt.Sprintf("%v", this.ClassId) + `,`,
		`UserIds:` + fmt.Sprintf("%v", this.UserIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveMemberResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveMemberResponse{`,
		`}`,
	}, "")
	return s
}
func (this *LeaveClassRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LeaveClassRequest{`,
		`ClassId:` + fmt.Sprintf("%v", this.ClassId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LeaveClassResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LeaveClassResponse{`,
		`}`,
	}, "")
	return s
}
func (this *AssignPresetStudyPlanResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AssignPresetStudyPlanResponse{`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveAssignedPresetStudyPlanRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveAssignedPresetStudyPlanRequest{`,
		`ClassId:` + fmt.Sprintf("%v", this.ClassId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveAssignedPresetStudyPlanResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPresetStudyPlans := "[]*PresetStudyPlan{"
	for _, f := range this.PresetStudyPlans {
		repeatedStringForPresetStudyPlans += strings.Replace(fmt.Sprintf("%v", f), "PresetStudyPlan", "PresetStudyPlan", 1) + ","
	}
	repeatedStringForPresetStudyPlans += "}"
	s := strings.Join([]string{`&RetrieveAssignedPresetStudyPlanResponse{`,
		`PresetStudyPlans:` + repeatedStringForPresetStudyPlans + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveClassMemberRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveClassMemberRequest{`,
		`ClassId:` + fmt.Sprintf("%v", this.ClassId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveClassMemberResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMembers := "[]*RetrieveClassMemberResponse_Member{"
	for _, f := range this.Members {
		repeatedStringForMembers += strings.Replace(fmt.Sprintf("%v", f), "RetrieveClassMemberResponse_Member", "RetrieveClassMemberResponse_Member", 1) + ","
	}
	repeatedStringForMembers += "}"
	s := strings.Join([]string{`&RetrieveClassMemberResponse{`,
		`Members:` + repeatedStringForMembers + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveClassMemberResponse_Member) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveClassMemberResponse_Member{`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`UserGroup:` + fmt.Sprintf("%v", this.UserGroup) + `,`,
		`JoinAt:` + strings.Replace(fmt.Sprintf("%v", this.JoinAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TeacherAssignClassWithTopicRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TeacherAssignClassWithTopicRequest{`,
		`ClassId:` + fmt.Sprintf("%v", this.ClassId) + `,`,
		`TopicId:` + fmt.Sprintf("%v", this.TopicId) + `,`,
		`StartDate:` + strings.Replace(fmt.Sprintf("%v", this.StartDate), "Timestamp", "types.Timestamp", 1) + `,`,
		`EndDate:` + strings.Replace(fmt.Sprintf("%v", this.EndDate), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TeacherAssignClassWithTopicResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TeacherAssignClassWithTopicResponse{`,
		`AssignmentId:` + fmt.Sprintf("%v", this.AssignmentId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveActiveClassAssignmentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveActiveClassAssignmentRequest{`,
		`ClassId:` + fmt.Sprintf("%v", this.ClassId) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Assignment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Assignment{`,
		`AssignmentId:` + fmt.Sprintf("%v", this.AssignmentId) + `,`,
		`Topic:` + strings.Replace(fmt.Sprintf("%v", this.Topic), "Topic", "Topic", 1) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`StartDate:` + strings.Replace(fmt.Sprintf("%v", this.StartDate), "Timestamp", "types.Timestamp", 1) + `,`,
		`EndDate:` + strings.Replace(fmt.Sprintf("%v", this.EndDate), "Timestamp", "types.Timestamp", 1) + `,`,
		`StudentIds:` + fmt.Sprintf("%v", this.StudentIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveActiveClassAssignmentResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAssignments := "[]*Assignment{"
	for _, f := range this.Assignments {
		repeatedStringForAssignments += strings.Replace(f.String(), "Assignment", "Assignment", 1) + ","
	}
	repeatedStringForAssignments += "}"
	s := strings.Join([]string{`&RetrieveActiveClassAssignmentResponse{`,
		`Assignments:` + repeatedStringForAssignments + `,`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrievePastClassAssignmentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrievePastClassAssignmentRequest{`,
		`ClassId:` + fmt.Sprintf("%v", this.ClassId) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrievePastClassAssignmentResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAssignments := "[]*Assignment{"
	for _, f := range this.Assignments {
		repeatedStringForAssignments += strings.Replace(f.String(), "Assignment", "Assignment", 1) + ","
	}
	repeatedStringForAssignments += "}"
	s := strings.Join([]string{`&RetrievePastClassAssignmentResponse{`,
		`Assignments:` + repeatedStringForAssignments + `,`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveAssignedTopicRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveAssignedTopicRequest{`,
		`AssignmentId:` + fmt.Sprintf("%v", this.AssignmentId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveAssignedTopicResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveAssignedTopicResponse{`,
		`}`,
	}, "")
	return s
}
func (this *EditAssignedTopicRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EditAssignedTopicRequest{`,
		`AssignmentId:` + fmt.Sprintf("%v", this.AssignmentId) + `,`,
		`StartDate:` + strings.Replace(fmt.Sprintf("%v", this.StartDate), "Timestamp", "types.Timestamp", 1) + `,`,
		`EndDate:` + strings.Replace(fmt.Sprintf("%v", this.EndDate), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EditAssignedTopicResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EditAssignedTopicResponse{`,
		`NewAssignmentId:` + fmt.Sprintf("%v", this.NewAssignmentId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveClassLearningStatisticsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveClassLearningStatisticsRequest{`,
		`ClassId:` + fmt.Sprintf("%v", this.ClassId) + `,`,
		`TopicId:` + fmt.Sprintf("%v", this.TopicId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StudentLearningStatistics) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StudentLearningStatistics{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StudentLearningStatistics_ByTopic_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StudentLearningStatistics_ByTopic_{`,
		`ByTopic:` + strings.Replace(fmt.Sprintf("%v", this.ByTopic), "StudentLearningStatistics_ByTopic", "StudentLearningStatistics_ByTopic", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StudentLearningStatistics_ByTopic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StudentLearningStatistics_ByTopic{`,
		`StudentId:` + fmt.Sprintf("%v", this.StudentId) + `,`,
		`StudentName:` + fmt.Sprintf("%v", this.StudentName) + `,`,
		`Completion:` + fmt.Sprintf("%v", this.Completion) + `,`,
		`TimeSpent:` + fmt.Sprintf("%v", this.TimeSpent) + `,`,
		`Accuracy:` + fmt.Sprintf("%v", this.Accuracy) + `,`,
		`Date:` + strings.Replace(fmt.Sprintf("%v", this.Date), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveClassLearningStatisticsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStats := "[]*StudentLearningStatistics{"
	for _, f := range this.Stats {
		repeatedStringForStats += strings.Replace(f.String(), "StudentLearningStatistics", "StudentLearningStatistics", 1) + ","
	}
	repeatedStringForStats += "}"
	s := strings.Join([]string{`&RetrieveClassLearningStatisticsResponse{`,
		`Stats:` + repeatedStringForStats + `,`,
		`TotalCompletion:` + fmt.Sprintf("%v", this.TotalCompletion) + `,`,
		`AverageScore:` + fmt.Sprintf("%v", this.AverageScore) + `,`,
		`TotalSubmitted:` + fmt.Sprintf("%v", this.TotalSubmitted) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveStudentLearningStatisticsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveStudentLearningStatisticsRequest{`,
		`ClassId:` + fmt.Sprintf("%v", this.ClassId) + `,`,
		`TopicId:` + fmt.Sprintf("%v", this.TopicId) + `,`,
		`StudentId:` + fmt.Sprintf("%v", this.StudentId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveStudentLearningStatisticsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStats := "[]*StudentLearningStatistics{"
	for _, f := range this.Stats {
		repeatedStringForStats += strings.Replace(f.String(), "StudentLearningStatistics", "StudentLearningStatistics", 1) + ","
	}
	repeatedStringForStats += "}"
	s := strings.Join([]string{`&RetrieveStudentLearningStatisticsResponse{`,
		`Stats:` + repeatedStringForStats + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterTeacherRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterTeacherRequest{`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`SchoolName:` + fmt.Sprintf("%v", this.SchoolName) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterTeacherResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterTeacherResponse{`,
		`Successful:` + fmt.Sprintf("%v", this.Successful) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubmissionScore) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubmissionScore{`,
		`SubmissionId:` + fmt.Sprintf("%v", this.SubmissionId) + `,`,
		`GivenScore:` + fmt.Sprintf("%v", this.GivenScore) + `,`,
		`TotalScore:` + fmt.Sprintf("%v", this.TotalScore) + `,`,
		`Notes:` + fmt.Sprintf("%v", this.Notes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MarkTheSubmissionsRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForScores := "[]*SubmissionScore{"
	for _, f := range this.Scores {
		repeatedStringForScores += strings.Replace(f.String(), "SubmissionScore", "SubmissionScore", 1) + ","
	}
	repeatedStringForScores += "}"
	s := strings.Join([]string{`&MarkTheSubmissionsRequest{`,
		`Scores:` + repeatedStringForScores + `,`,
		`}`,
	}, "")
	return s
}
func (this *MarkTheSubmissionsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MarkTheSubmissionsResponse{`,
		`Successful:` + fmt.Sprintf("%v", this.Successful) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateCustomAssignmentRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAttachments := "[]*Attachment{"
	for _, f := range this.Attachments {
		repeatedStringForAttachments += strings.Replace(fmt.Sprintf("%v", f), "Attachment", "Attachment", 1) + ","
	}
	repeatedStringForAttachments += "}"
	s := strings.Join([]string{`&CreateCustomAssignmentRequest{`,
		`ClassId:` + fmt.Sprintf("%v", this.ClassId) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`Subject:` + fmt.Sprintf("%v", this.Subject) + `,`,
		`Name:` + strings.Replace(fmt.Sprintf("%v", this.Name), "StringValue", "types.StringValue", 1) + `,`,
		`Grade:` + strings.Replace(fmt.Sprintf("%v", this.Grade), "StringValue", "types.StringValue", 1) + `,`,
		`CopiedTopicId:` + strings.Replace(fmt.Sprintf("%v", this.CopiedTopicId), "StringValue", "types.StringValue", 1) + `,`,
		`Instruction:` + strings.Replace(fmt.Sprintf("%v", this.Instruction), "StringValue", "types.StringValue", 1) + `,`,
		`Attachments:` + repeatedStringForAttachments + `,`,
		`EssayRequired:` + fmt.Sprintf("%v", this.EssayRequired) + `,`,
		`StartDate:` + strings.Replace(fmt.Sprintf("%v", this.StartDate), "Timestamp", "types.Timestamp", 1) + `,`,
		`EndDate:` + strings.Replace(fmt.Sprintf("%v", this.EndDate), "Timestamp", "types.Timestamp", 1) + `,`,
		`SelectedLoIds:` + fmt.Sprintf("%v", this.SelectedLoIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateCustomAssignmentResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateCustomAssignmentResponse{`,
		`TopicId:` + fmt.Sprintf("%v", this.TopicId) + `,`,
		`AssignmentId:` + fmt.Sprintf("%v", this.AssignmentId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateClassCodeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateClassCodeRequest{`,
		`ClassId:` + fmt.Sprintf("%v", this.ClassId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateClassCodeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateClassCodeResponse{`,
		`ClassId:` + fmt.Sprintf("%v", this.ClassId) + `,`,
		`ClassCode:` + fmt.Sprintf("%v", this.ClassCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddClassMemberRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddClassMemberRequest{`,
		`ClassId:` + fmt.Sprintf("%v", this.ClassId) + `,`,
		`TeacherIds:` + fmt.Sprintf("%v", this.TeacherIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddClassMemberResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddClassMemberResponse{`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveScoreRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveScoreRequest{`,
		`Filter:` + fmt.Sprintf("%v", this.Filter) + `,`,
		`TopicId:` + fmt.Sprintf("%v", this.TopicId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveScoreRequest_StudentId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveScoreRequest_StudentId{`,
		`StudentId:` + fmt.Sprintf("%v", this.StudentId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveScoreRequest_ClassId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveScoreRequest_ClassId{`,
		`ClassId:` + fmt.Sprintf("%v", this.ClassId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveScoreResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForScores := "[]*RetrieveScoreResponse_Score{"
	for _, f := range this.Scores {
		repeatedStringForScores += strings.Replace(fmt.Sprintf("%v", f), "RetrieveScoreResponse_Score", "RetrieveScoreResponse_Score", 1) + ","
	}
	repeatedStringForScores += "}"
	s := strings.Join([]string{`&RetrieveScoreResponse{`,
		`Scores:` + repeatedStringForScores + `,`,
		`AverageScore:` + fmt.Sprintf("%v", this.AverageScore) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveScoreResponse_Score) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveScoreResponse_Score{`,
		`StudentId:` + fmt.Sprintf("%v", this.StudentId) + `,`,
		`GivenScore:` + fmt.Sprintf("%v", this.GivenScore) + `,`,
		`TotalScore:` + fmt.Sprintf("%v", this.TotalScore) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TeacherRetrieveStreamTokenRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TeacherRetrieveStreamTokenRequest{`,
		`LessonId:` + fmt.Sprintf("%v", this.LessonId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TeacherRetrieveStreamTokenResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TeacherRetrieveStreamTokenResponse{`,
		`VideoToken:` + fmt.Sprintf("%v", this.VideoToken) + `,`,
		`StreamToken:` + fmt.Sprintf("%v", this.StreamToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StudentRetrieveStreamTokenRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StudentRetrieveStreamTokenRequest{`,
		`LessonId:` + fmt.Sprintf("%v", this.LessonId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StudentRetrieveStreamTokenResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StudentRetrieveStreamTokenResponse{`,
		`StreamToken:` + fmt.Sprintf("%v", this.StreamToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndLiveLessonRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndLiveLessonRequest{`,
		`LessonId:` + fmt.Sprintf("%v", this.LessonId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EndLiveLessonResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EndLiveLessonResponse{`,
		`}`,
	}, "")
	return s
}
func (this *JoinLessonRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JoinLessonRequest{`,
		`LessonId:` + fmt.Sprintf("%v", this.LessonId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *JoinLessonResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&JoinLessonResponse{`,
		`StreamToken:` + fmt.Sprintf("%v", this.StreamToken) + `,`,
		`WhiteboardToken:` + fmt.Sprintf("%v", this.WhiteboardToken) + `,`,
		`RoomId:` + fmt.Sprintf("%v", this.RoomId) + `,`,
		`VideoToken:` + fmt.Sprintf("%v", this.VideoToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LeaveLessonRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LeaveLessonRequest{`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`LessonId:` + fmt.Sprintf("%v", this.LessonId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LeaveLessonResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LeaveLessonResponse{`,
		`}`,
	}, "")
	return s
}
func (this *TeacherAssignStudentWithTopicRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TeacherAssignStudentWithTopicRequest{`,
		`StudentIds:` + fmt.Sprintf("%v", this.StudentIds) + `,`,
		`TopicId:` + fmt.Sprintf("%v", this.TopicId) + `,`,
		`StartDate:` + strings.Replace(fmt.Sprintf("%v", this.StartDate), "Timestamp", "types.Timestamp", 1) + `,`,
		`EndDate:` + strings.Replace(fmt.Sprintf("%v", this.EndDate), "Timestamp", "types.Timestamp", 1) + `,`,
		`ClassId:` + fmt.Sprintf("%v", this.ClassId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TeacherAssignStudentWithTopicResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TeacherAssignStudentWithTopicResponse{`,
		`AssignmentId:` + fmt.Sprintf("%v", this.AssignmentId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Comment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Comment{`,
		`Comment:` + fmt.Sprintf("%v", this.Comment) + `,`,
		`Duration:` + strings.Replace(fmt.Sprintf("%v", this.Duration), "Duration", "types.Duration", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConvertedImage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConvertedImage{`,
		`Width:` + fmt.Sprintf("%v", this.Width) + `,`,
		`Height:` + fmt.Sprintf("%v", this.Height) + `,`,
		`ImageUrl:` + fmt.Sprintf("%v", this.ImageUrl) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Media) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForComments := "[]*Comment{"
	for _, f := range this.Comments {
		repeatedStringForComments += strings.Replace(f.String(), "Comment", "Comment", 1) + ","
	}
	repeatedStringForComments += "}"
	repeatedStringForImages := "[]*ConvertedImage{"
	for _, f := range this.Images {
		repeatedStringForImages += strings.Replace(f.String(), "ConvertedImage", "ConvertedImage", 1) + ","
	}
	repeatedStringForImages += "}"
	s := strings.Join([]string{`&Media{`,
		`MediaId:` + fmt.Sprintf("%v", this.MediaId) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Resource:` + fmt.Sprintf("%v", this.Resource) + `,`,
		`Comments:` + repeatedStringForComments + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`Images:` + repeatedStringForImages + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveMediaRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveMediaRequest{`,
		`MediaIds:` + fmt.Sprintf("%v", this.MediaIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveMediaResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMedia := "[]*Media{"
	for _, f := range this.Media {
		repeatedStringForMedia += strings.Replace(f.String(), "Media", "Media", 1) + ","
	}
	repeatedStringForMedia += "}"
	s := strings.Join([]string{`&RetrieveMediaResponse{`,
		`Media:` + repeatedStringForMedia + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertMediaRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMedia := "[]*Media{"
	for _, f := range this.Media {
		repeatedStringForMedia += strings.Replace(f.String(), "Media", "Media", 1) + ","
	}
	repeatedStringForMedia += "}"
	s := strings.Join([]string{`&UpsertMediaRequest{`,
		`Media:` + repeatedStringForMedia + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertMediaResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpsertMediaResponse{`,
		`MediaIds:` + fmt.Sprintf("%v", this.MediaIds) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringClass(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CreateClassRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateClassRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateClassRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchoolId", wireType)
			}
			m.SchoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchoolId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grades", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grades = append(m.Grades, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v Subject
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClass
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Subject(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Subjects = append(m.Subjects, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClass
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthClass
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthClass
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Subjects) == 0 {
					m.Subjects = make([]Subject, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Subject
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowClass
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Subject(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Subjects = append(m.Subjects, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Subjects", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerIds = append(m.OwnerIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateClassResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateClassResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateClassResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditClassRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditClassRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditClassRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditClassResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditClassResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditClassResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinClassRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinClassRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinClassRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinClassResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinClassResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinClassResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClassEntity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClassEntity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClassEntity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchoolId", wireType)
			}
			m.SchoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchoolId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v Subject
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClass
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Subject(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Subject = append(m.Subject, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClass
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthClass
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthClass
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Subject) == 0 {
					m.Subject = make([]Subject, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Subject
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowClass
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Subject(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Subject = append(m.Subject, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grades", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grades = append(m.Grades, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerIds = append(m.OwnerIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStudent", wireType)
			}
			m.TotalStudent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalStudent |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveMemberRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveMemberRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveMemberRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIds = append(m.UserIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveMemberResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveMemberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveMemberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaveClassRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaveClassRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaveClassRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaveClassResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaveClassResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaveClassResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssignPresetStudyPlanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssignPresetStudyPlanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssignPresetStudyPlanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveAssignedPresetStudyPlanRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveAssignedPresetStudyPlanRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveAssignedPresetStudyPlanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveAssignedPresetStudyPlanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveAssignedPresetStudyPlanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveAssignedPresetStudyPlanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PresetStudyPlans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PresetStudyPlans = append(m.PresetStudyPlans, &PresetStudyPlan{})
			if err := m.PresetStudyPlans[len(m.PresetStudyPlans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveClassMemberRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveClassMemberRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveClassMemberRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveClassMemberResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveClassMemberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveClassMemberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &RetrieveClassMemberResponse_Member{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveClassMemberResponse_Member) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Member: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Member: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserGroup", wireType)
			}
			m.UserGroup = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserGroup |= UserGroup(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.JoinAt == nil {
				m.JoinAt = &types.Timestamp{}
			}
			if err := m.JoinAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeacherAssignClassWithTopicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeacherAssignClassWithTopicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeacherAssignClassWithTopicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartDate == nil {
				m.StartDate = &types.Timestamp{}
			}
			if err := m.StartDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndDate == nil {
				m.EndDate = &types.Timestamp{}
			}
			if err := m.EndDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeacherAssignClassWithTopicResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeacherAssignClassWithTopicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeacherAssignClassWithTopicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssignmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveActiveClassAssignmentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveActiveClassAssignmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveActiveClassAssignmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Assignment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Assignment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Assignment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssignmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Topic == nil {
				m.Topic = &Topic{}
			}
			if err := m.Topic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= AssignmentStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartDate == nil {
				m.StartDate = &types.Timestamp{}
			}
			if err := m.StartDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndDate == nil {
				m.EndDate = &types.Timestamp{}
			}
			if err := m.EndDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentIds = append(m.StudentIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveActiveClassAssignmentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveActiveClassAssignmentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveActiveClassAssignmentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assignments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assignments = append(m.Assignments, &Assignment{})
			if err := m.Assignments[len(m.Assignments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrievePastClassAssignmentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrievePastClassAssignmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrievePastClassAssignmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrievePastClassAssignmentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrievePastClassAssignmentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrievePastClassAssignmentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assignments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assignments = append(m.Assignments, &Assignment{})
			if err := m.Assignments[len(m.Assignments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveAssignedTopicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveAssignedTopicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveAssignedTopicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssignmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveAssignedTopicResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveAssignedTopicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveAssignedTopicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditAssignedTopicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditAssignedTopicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditAssignedTopicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssignmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartDate == nil {
				m.StartDate = &types.Timestamp{}
			}
			if err := m.StartDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndDate == nil {
				m.EndDate = &types.Timestamp{}
			}
			if err := m.EndDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EditAssignedTopicResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditAssignedTopicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditAssignedTopicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewAssignmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewAssignmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveClassLearningStatisticsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveClassLearningStatisticsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveClassLearningStatisticsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StudentLearningStatistics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudentLearningStatistics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudentLearningStatistics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByTopic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StudentLearningStatistics_ByTopic{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &StudentLearningStatistics_ByTopic_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StudentLearningStatistics_ByTopic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ByTopic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ByTopic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completion", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Completion = float32(math.Float32frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeSpent", wireType)
			}
			m.TimeSpent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeSpent |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accuracy", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Accuracy = float32(math.Float32frombits(v))
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Date == nil {
				m.Date = &types.Timestamp{}
			}
			if err := m.Date.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveClassLearningStatisticsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveClassLearningStatisticsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveClassLearningStatisticsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats, &StudentLearningStatistics{})
			if err := m.Stats[len(m.Stats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCompletion", wireType)
			}
			m.TotalCompletion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCompletion |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageScore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.AverageScore = float32(math.Float32frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSubmitted", wireType)
			}
			m.TotalSubmitted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalSubmitted |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveStudentLearningStatisticsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveStudentLearningStatisticsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveStudentLearningStatisticsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveStudentLearningStatisticsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveStudentLearningStatisticsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveStudentLearningStatisticsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stats = append(m.Stats, &StudentLearningStatistics{})
			if err := m.Stats[len(m.Stats)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterTeacherRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterTeacherRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterTeacherRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterTeacherResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterTeacherResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterTeacherResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Successful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Successful = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmissionScore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmissionScore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmissionScore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmissionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubmissionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field GivenScore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.GivenScore = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalScore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TotalScore = float32(math.Float32frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarkTheSubmissionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarkTheSubmissionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarkTheSubmissionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scores = append(m.Scores, &SubmissionScore{})
			if err := m.Scores[len(m.Scores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarkTheSubmissionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarkTheSubmissionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarkTheSubmissionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Successful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Successful = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateCustomAssignmentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCustomAssignmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCustomAssignmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			m.Subject = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subject |= Subject(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Name == nil {
				m.Name = &types.StringValue{}
			}
			if err := m.Name.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Grade == nil {
				m.Grade = &types.StringValue{}
			}
			if err := m.Grade.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CopiedTopicId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CopiedTopicId == nil {
				m.CopiedTopicId = &types.StringValue{}
			}
			if err := m.CopiedTopicId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instruction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Instruction == nil {
				m.Instruction = &types.StringValue{}
			}
			if err := m.Instruction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attachments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attachments = append(m.Attachments, &Attachment{})
			if err := m.Attachments[len(m.Attachments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EssayRequired", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EssayRequired = bool(v != 0)
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartDate == nil {
				m.StartDate = &types.Timestamp{}
			}
			if err := m.StartDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndDate == nil {
				m.EndDate = &types.Timestamp{}
			}
			if err := m.EndDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelectedLoIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SelectedLoIds = append(m.SelectedLoIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateCustomAssignmentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCustomAssignmentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCustomAssignmentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssignmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateClassCodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateClassCodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateClassCodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateClassCodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateClassCodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateClassCodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddClassMemberRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddClassMemberRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddClassMemberRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeacherIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeacherIds = append(m.TeacherIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddClassMemberResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddClassMemberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddClassMemberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveScoreRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveScoreRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveScoreRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = &RetrieveScoreRequest_StudentId{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Filter = &RetrieveScoreRequest_ClassId{v}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveScoreResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveScoreResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveScoreResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scores", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scores = append(m.Scores, &RetrieveScoreResponse_Score{})
			if err := m.Scores[len(m.Scores)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field AverageScore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.AverageScore = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveScoreResponse_Score) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Score: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Score: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field GivenScore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.GivenScore = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalScore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TotalScore = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeacherRetrieveStreamTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeacherRetrieveStreamTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeacherRetrieveStreamTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LessonId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LessonId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeacherRetrieveStreamTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeacherRetrieveStreamTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeacherRetrieveStreamTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VideoToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StudentRetrieveStreamTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudentRetrieveStreamTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudentRetrieveStreamTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LessonId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LessonId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StudentRetrieveStreamTokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudentRetrieveStreamTokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudentRetrieveStreamTokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndLiveLessonRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndLiveLessonRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndLiveLessonRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LessonId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LessonId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EndLiveLessonResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndLiveLessonResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndLiveLessonResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinLessonRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinLessonRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinLessonRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LessonId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LessonId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoinLessonResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinLessonResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinLessonResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhiteboardToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhiteboardToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoomId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoomId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VideoToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaveLessonRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaveLessonRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaveLessonRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LessonId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LessonId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaveLessonResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaveLessonResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaveLessonResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeacherAssignStudentWithTopicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeacherAssignStudentWithTopicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeacherAssignStudentWithTopicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentIds = append(m.StudentIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartDate == nil {
				m.StartDate = &types.Timestamp{}
			}
			if err := m.StartDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndDate == nil {
				m.EndDate = &types.Timestamp{}
			}
			if err := m.EndDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeacherAssignStudentWithTopicResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeacherAssignStudentWithTopicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeacherAssignStudentWithTopicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssignmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Comment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Comment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Comment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Duration == nil {
				m.Duration = &types.Duration{}
			}
			if err := m.Duration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConvertedImage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConvertedImage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConvertedImage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Width", wireType)
			}
			m.Width = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Width |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Media) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Media: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Media: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comments = append(m.Comments, &Comment{})
			if err := m.Comments[len(m.Comments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= MediaType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, &ConvertedImage{})
			if err := m.Images[len(m.Images)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveMediaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveMediaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveMediaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaIds = append(m.MediaIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveMediaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveMediaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveMediaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Media = append(m.Media, &Media{})
			if err := m.Media[len(m.Media)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertMediaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertMediaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertMediaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Media", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Media = append(m.Media, &Media{})
			if err := m.Media[len(m.Media)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertMediaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClass
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertMediaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertMediaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediaIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClass
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClass
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClass
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediaIds = append(m.MediaIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClass(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClass
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClass(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClass
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClass
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClass
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClass
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClass
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClass
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClass        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClass          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClass = fmt.Errorf("proto: unexpected end of group")
)
