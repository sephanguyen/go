// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: master_data.proto

package pb

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ImportPresetStudyPlanRequest struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *ImportPresetStudyPlanRequest) Reset()      { *m = ImportPresetStudyPlanRequest{} }
func (*ImportPresetStudyPlanRequest) ProtoMessage() {}
func (*ImportPresetStudyPlanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba343a99112eefe2, []int{0}
}
func (m *ImportPresetStudyPlanRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImportPresetStudyPlanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImportPresetStudyPlanRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImportPresetStudyPlanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportPresetStudyPlanRequest.Merge(m, src)
}
func (m *ImportPresetStudyPlanRequest) XXX_Size() int {
	return m.Size()
}
func (m *ImportPresetStudyPlanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportPresetStudyPlanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImportPresetStudyPlanRequest proto.InternalMessageInfo

func (m *ImportPresetStudyPlanRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type ImportPresetStudyPlanResponse struct {
}

func (m *ImportPresetStudyPlanResponse) Reset()      { *m = ImportPresetStudyPlanResponse{} }
func (*ImportPresetStudyPlanResponse) ProtoMessage() {}
func (*ImportPresetStudyPlanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba343a99112eefe2, []int{1}
}
func (m *ImportPresetStudyPlanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImportPresetStudyPlanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImportPresetStudyPlanResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImportPresetStudyPlanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportPresetStudyPlanResponse.Merge(m, src)
}
func (m *ImportPresetStudyPlanResponse) XXX_Size() int {
	return m.Size()
}
func (m *ImportPresetStudyPlanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportPresetStudyPlanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImportPresetStudyPlanResponse proto.InternalMessageInfo

type ImportLORequest struct {
	FileName string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Payload  []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *ImportLORequest) Reset()      { *m = ImportLORequest{} }
func (*ImportLORequest) ProtoMessage() {}
func (*ImportLORequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba343a99112eefe2, []int{2}
}
func (m *ImportLORequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImportLORequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImportLORequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImportLORequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportLORequest.Merge(m, src)
}
func (m *ImportLORequest) XXX_Size() int {
	return m.Size()
}
func (m *ImportLORequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportLORequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImportLORequest proto.InternalMessageInfo

func (m *ImportLORequest) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *ImportLORequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type ImportLOResponse struct {
}

func (m *ImportLOResponse) Reset()      { *m = ImportLOResponse{} }
func (*ImportLOResponse) ProtoMessage() {}
func (*ImportLOResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba343a99112eefe2, []int{3}
}
func (m *ImportLOResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImportLOResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImportLOResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImportLOResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportLOResponse.Merge(m, src)
}
func (m *ImportLOResponse) XXX_Size() int {
	return m.Size()
}
func (m *ImportLOResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportLOResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImportLOResponse proto.InternalMessageInfo

type ImportTopicRequest struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *ImportTopicRequest) Reset()      { *m = ImportTopicRequest{} }
func (*ImportTopicRequest) ProtoMessage() {}
func (*ImportTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba343a99112eefe2, []int{4}
}
func (m *ImportTopicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImportTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImportTopicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImportTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportTopicRequest.Merge(m, src)
}
func (m *ImportTopicRequest) XXX_Size() int {
	return m.Size()
}
func (m *ImportTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImportTopicRequest proto.InternalMessageInfo

func (m *ImportTopicRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type ImportTopicResponse struct {
}

func (m *ImportTopicResponse) Reset()      { *m = ImportTopicResponse{} }
func (*ImportTopicResponse) ProtoMessage() {}
func (*ImportTopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba343a99112eefe2, []int{5}
}
func (m *ImportTopicResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImportTopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImportTopicResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImportTopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportTopicResponse.Merge(m, src)
}
func (m *ImportTopicResponse) XXX_Size() int {
	return m.Size()
}
func (m *ImportTopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportTopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ImportTopicResponse proto.InternalMessageInfo

type GetClientVersionRequest struct {
}

func (m *GetClientVersionRequest) Reset()      { *m = GetClientVersionRequest{} }
func (*GetClientVersionRequest) ProtoMessage() {}
func (*GetClientVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba343a99112eefe2, []int{6}
}
func (m *GetClientVersionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetClientVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetClientVersionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetClientVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClientVersionRequest.Merge(m, src)
}
func (m *GetClientVersionRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetClientVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClientVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetClientVersionRequest proto.InternalMessageInfo

type GetClientVersionResponse struct {
	Versions map[string]string `protobuf:"bytes,1,rep,name=versions,proto3" json:"versions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *GetClientVersionResponse) Reset()      { *m = GetClientVersionResponse{} }
func (*GetClientVersionResponse) ProtoMessage() {}
func (*GetClientVersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba343a99112eefe2, []int{7}
}
func (m *GetClientVersionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetClientVersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetClientVersionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetClientVersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClientVersionResponse.Merge(m, src)
}
func (m *GetClientVersionResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetClientVersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClientVersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetClientVersionResponse proto.InternalMessageInfo

func (m *GetClientVersionResponse) GetVersions() map[string]string {
	if m != nil {
		return m.Versions
	}
	return nil
}

type LocationEntity struct {
	Id   int32                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string                    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Sub  map[int32]*LocationEntity `protobuf:"bytes,3,rep,name=sub,proto3" json:"sub,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *LocationEntity) Reset()      { *m = LocationEntity{} }
func (*LocationEntity) ProtoMessage() {}
func (*LocationEntity) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba343a99112eefe2, []int{8}
}
func (m *LocationEntity) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocationEntity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocationEntity.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LocationEntity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocationEntity.Merge(m, src)
}
func (m *LocationEntity) XXX_Size() int {
	return m.Size()
}
func (m *LocationEntity) XXX_DiscardUnknown() {
	xxx_messageInfo_LocationEntity.DiscardUnknown(m)
}

var xxx_messageInfo_LocationEntity proto.InternalMessageInfo

func (m *LocationEntity) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *LocationEntity) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LocationEntity) GetSub() map[int32]*LocationEntity {
	if m != nil {
		return m.Sub
	}
	return nil
}

func init() {
	proto.RegisterType((*ImportPresetStudyPlanRequest)(nil), "manabie.bob.ImportPresetStudyPlanRequest")
	golang_proto.RegisterType((*ImportPresetStudyPlanRequest)(nil), "manabie.bob.ImportPresetStudyPlanRequest")
	proto.RegisterType((*ImportPresetStudyPlanResponse)(nil), "manabie.bob.ImportPresetStudyPlanResponse")
	golang_proto.RegisterType((*ImportPresetStudyPlanResponse)(nil), "manabie.bob.ImportPresetStudyPlanResponse")
	proto.RegisterType((*ImportLORequest)(nil), "manabie.bob.ImportLORequest")
	golang_proto.RegisterType((*ImportLORequest)(nil), "manabie.bob.ImportLORequest")
	proto.RegisterType((*ImportLOResponse)(nil), "manabie.bob.ImportLOResponse")
	golang_proto.RegisterType((*ImportLOResponse)(nil), "manabie.bob.ImportLOResponse")
	proto.RegisterType((*ImportTopicRequest)(nil), "manabie.bob.ImportTopicRequest")
	golang_proto.RegisterType((*ImportTopicRequest)(nil), "manabie.bob.ImportTopicRequest")
	proto.RegisterType((*ImportTopicResponse)(nil), "manabie.bob.ImportTopicResponse")
	golang_proto.RegisterType((*ImportTopicResponse)(nil), "manabie.bob.ImportTopicResponse")
	proto.RegisterType((*GetClientVersionRequest)(nil), "manabie.bob.GetClientVersionRequest")
	golang_proto.RegisterType((*GetClientVersionRequest)(nil), "manabie.bob.GetClientVersionRequest")
	proto.RegisterType((*GetClientVersionResponse)(nil), "manabie.bob.GetClientVersionResponse")
	golang_proto.RegisterType((*GetClientVersionResponse)(nil), "manabie.bob.GetClientVersionResponse")
	proto.RegisterMapType((map[string]string)(nil), "manabie.bob.GetClientVersionResponse.VersionsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "manabie.bob.GetClientVersionResponse.VersionsEntry")
	proto.RegisterType((*LocationEntity)(nil), "manabie.bob.LocationEntity")
	golang_proto.RegisterType((*LocationEntity)(nil), "manabie.bob.LocationEntity")
	proto.RegisterMapType((map[int32]*LocationEntity)(nil), "manabie.bob.LocationEntity.SubEntry")
	golang_proto.RegisterMapType((map[int32]*LocationEntity)(nil), "manabie.bob.LocationEntity.SubEntry")
}

func init() { proto.RegisterFile("master_data.proto", fileDescriptor_ba343a99112eefe2) }
func init() { golang_proto.RegisterFile("master_data.proto", fileDescriptor_ba343a99112eefe2) }

var fileDescriptor_ba343a99112eefe2 = []byte{
	// 579 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xf5, 0xc6, 0x14, 0xd2, 0x09, 0x94, 0x76, 0xa1, 0x22, 0xb8, 0xed, 0xb6, 0x8a, 0x8a, 0x14,
	0x90, 0xea, 0x88, 0x54, 0x42, 0x15, 0xbd, 0x01, 0x15, 0x20, 0x95, 0xb6, 0x72, 0x10, 0x48, 0x5c,
	0xa2, 0xdd, 0x64, 0x1b, 0xac, 0xd8, 0x5e, 0x63, 0xaf, 0x23, 0xe5, 0xc6, 0x91, 0x1b, 0x7c, 0x46,
	0x3f, 0x03, 0x6e, 0x1c, 0x73, 0xec, 0x91, 0x38, 0x17, 0x8e, 0xfd, 0x04, 0x14, 0xaf, 0x53, 0x6c,
	0x48, 0xda, 0xde, 0x66, 0x66, 0xe7, 0xbd, 0x79, 0x3b, 0xfb, 0xb4, 0xb0, 0xe4, 0xd2, 0x50, 0xf2,
	0xa0, 0xd9, 0xa6, 0x92, 0x9a, 0x7e, 0x20, 0xa4, 0xc0, 0x25, 0x97, 0x7a, 0x94, 0xd9, 0xdc, 0x64,
	0x82, 0x19, 0x5b, 0x1d, 0x5b, 0x7e, 0x8c, 0x98, 0xd9, 0x12, 0x6e, 0xad, 0x23, 0x3a, 0xa2, 0x96,
	0xf4, 0xb0, 0xe8, 0x38, 0xc9, 0x92, 0x24, 0x89, 0x14, 0xb6, 0xb2, 0x03, 0xab, 0xaf, 0x5d, 0x5f,
	0x04, 0xf2, 0x28, 0xe0, 0x21, 0x97, 0x0d, 0x19, 0xb5, 0xfb, 0x47, 0x0e, 0xf5, 0x2c, 0xfe, 0x29,
	0xe2, 0xa1, 0xc4, 0x65, 0xb8, 0xe1, 0xd3, 0xbe, 0x23, 0x68, 0xbb, 0x8c, 0x36, 0x50, 0xf5, 0xa6,
	0x35, 0x49, 0x2b, 0xeb, 0xb0, 0x36, 0x03, 0x19, 0xfa, 0xc2, 0x0b, 0x79, 0xe5, 0x15, 0xdc, 0x56,
	0x0d, 0xfb, 0x87, 0x13, 0xb6, 0x15, 0x98, 0x3f, 0xb6, 0x1d, 0xde, 0xf4, 0xa8, 0xcb, 0x13, 0xbe,
	0x79, 0xab, 0x38, 0x2e, 0x1c, 0x50, 0x97, 0x67, 0x47, 0x15, 0xf2, 0xa3, 0x30, 0x2c, 0xfe, 0x65,
	0x4a, 0xd9, 0x4d, 0xc0, 0xaa, 0xf6, 0x56, 0xf8, 0x76, 0xeb, 0x72, 0xb9, 0xcb, 0x70, 0x27, 0xd7,
	0x9f, 0xd2, 0xdc, 0x87, 0x7b, 0x2f, 0xb9, 0x7c, 0xee, 0xd8, 0xdc, 0x93, 0xef, 0x78, 0x10, 0xda,
	0x62, 0x72, 0xf5, 0xca, 0x09, 0x82, 0xf2, 0xff, 0x67, 0x0a, 0x87, 0x0f, 0xa1, 0xd8, 0x53, 0xa5,
	0xb0, 0x8c, 0x36, 0xf4, 0x6a, 0xa9, 0xbe, 0x6d, 0x66, 0x9e, 0xc1, 0x9c, 0x05, 0x34, 0xd3, 0x3c,
	0xdc, 0xf3, 0x64, 0xd0, 0xb7, 0xce, 0x49, 0x8c, 0x5d, 0xb8, 0x95, 0x3b, 0xc2, 0x8b, 0xa0, 0x77,
	0x79, 0x3f, 0xdd, 0xd2, 0x38, 0xc4, 0x77, 0x61, 0xae, 0x47, 0x9d, 0x88, 0x27, 0xeb, 0x99, 0xb7,
	0x54, 0xf2, 0xb4, 0xb0, 0x83, 0x2a, 0x3f, 0x10, 0x2c, 0xec, 0x8b, 0x16, 0x95, 0xb6, 0xf0, 0xf6,
	0x3c, 0x69, 0xcb, 0x3e, 0x5e, 0x80, 0x82, 0xad, 0x96, 0x30, 0x67, 0x15, 0xec, 0x36, 0xc6, 0x70,
	0x2d, 0xd9, 0xba, 0xc2, 0x26, 0x31, 0x7e, 0x02, 0x7a, 0x18, 0xb1, 0xb2, 0x9e, 0xe8, 0xdf, 0xcc,
	0xe9, 0xcf, 0xb3, 0x99, 0x8d, 0x88, 0x29, 0xc1, 0x63, 0x80, 0xd1, 0x80, 0xe2, 0xa4, 0x90, 0x95,
	0x39, 0xa7, 0x64, 0x3e, 0xce, 0xca, 0x2c, 0xd5, 0x57, 0x2e, 0xe0, 0xcd, 0xdc, 0xa1, 0xfe, 0x55,
	0x87, 0xa5, 0x37, 0x89, 0xb7, 0x5f, 0x50, 0x49, 0x1b, 0x3c, 0xe8, 0xd9, 0x2d, 0x8e, 0x7d, 0x58,
	0x9e, 0xea, 0x32, 0xfc, 0x30, 0x47, 0x7b, 0x91, 0x87, 0x8d, 0x47, 0x57, 0x69, 0x55, 0xcf, 0x53,
	0x45, 0xf8, 0x00, 0x8a, 0x13, 0xb3, 0xe1, 0xd5, 0x29, 0xc8, 0x73, 0x37, 0x1b, 0x6b, 0x33, 0x4e,
	0x53, 0x6b, 0xe9, 0x5f, 0x0a, 0xa8, 0x8a, 0xf0, 0x7b, 0x28, 0x65, 0x8c, 0x87, 0xd7, 0xa7, 0x80,
	0xb2, 0x16, 0x36, 0x36, 0x66, 0x37, 0xe4, 0x89, 0x9b, 0xb0, 0xf8, 0xaf, 0xcb, 0xf0, 0xe6, 0x25,
	0x26, 0x54, 0x23, 0x1e, 0x5c, 0xc9, 0xaa, 0xcf, 0x9c, 0xc1, 0x90, 0x68, 0xa7, 0x43, 0xa2, 0x9d,
	0x0d, 0x09, 0xfa, 0x1c, 0x13, 0x74, 0x12, 0x13, 0xf4, 0x33, 0x26, 0x68, 0x10, 0x13, 0xf4, 0x2b,
	0x26, 0xe8, 0x77, 0x4c, 0xb4, 0xb3, 0x98, 0xa0, 0x6f, 0x23, 0xa2, 0x7d, 0x1f, 0x11, 0x34, 0x18,
	0x11, 0xed, 0x74, 0x44, 0xb4, 0x0f, 0xf5, 0xcc, 0x27, 0x94, 0x8e, 0xda, 0x1a, 0xc7, 0x8c, 0xb6,
	0xba, 0xdc, 0x6b, 0xd7, 0xfc, 0x6e, 0xa7, 0xd6, 0xe1, 0x9e, 0xfa, 0x8d, 0x98, 0x60, 0xbb, 0x3e,
	0x63, 0xd7, 0x93, 0x6c, 0xfb, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8d, 0x3c, 0xb0, 0x58, 0xe1,
	0x04, 0x00, 0x00,
}

func (this *ImportPresetStudyPlanRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImportPresetStudyPlanRequest)
	if !ok {
		that2, ok := that.(ImportPresetStudyPlanRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	return true
}
func (this *ImportPresetStudyPlanResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImportPresetStudyPlanResponse)
	if !ok {
		that2, ok := that.(ImportPresetStudyPlanResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ImportLORequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImportLORequest)
	if !ok {
		that2, ok := that.(ImportLORequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FileName != that1.FileName {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	return true
}
func (this *ImportLOResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImportLOResponse)
	if !ok {
		that2, ok := that.(ImportLOResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ImportTopicRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImportTopicRequest)
	if !ok {
		that2, ok := that.(ImportTopicRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	return true
}
func (this *ImportTopicResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ImportTopicResponse)
	if !ok {
		that2, ok := that.(ImportTopicResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetClientVersionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetClientVersionRequest)
	if !ok {
		that2, ok := that.(GetClientVersionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetClientVersionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetClientVersionResponse)
	if !ok {
		that2, ok := that.(GetClientVersionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Versions) != len(that1.Versions) {
		return false
	}
	for i := range this.Versions {
		if this.Versions[i] != that1.Versions[i] {
			return false
		}
	}
	return true
}
func (this *LocationEntity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LocationEntity)
	if !ok {
		that2, ok := that.(LocationEntity)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Sub) != len(that1.Sub) {
		return false
	}
	for i := range this.Sub {
		if !this.Sub[i].Equal(that1.Sub[i]) {
			return false
		}
	}
	return true
}
func (this *ImportPresetStudyPlanRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ImportPresetStudyPlanRequest{")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImportPresetStudyPlanResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.ImportPresetStudyPlanResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImportLORequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.ImportLORequest{")
	s = append(s, "FileName: "+fmt.Sprintf("%#v", this.FileName)+",\n")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImportLOResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.ImportLOResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImportTopicRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ImportTopicRequest{")
	s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ImportTopicResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.ImportTopicResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetClientVersionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.GetClientVersionRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetClientVersionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetClientVersionResponse{")
	keysForVersions := make([]string, 0, len(this.Versions))
	for k, _ := range this.Versions {
		keysForVersions = append(keysForVersions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForVersions)
	mapStringForVersions := "map[string]string{"
	for _, k := range keysForVersions {
		mapStringForVersions += fmt.Sprintf("%#v: %#v,", k, this.Versions[k])
	}
	mapStringForVersions += "}"
	if this.Versions != nil {
		s = append(s, "Versions: "+mapStringForVersions+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LocationEntity) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.LocationEntity{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	keysForSub := make([]int32, 0, len(this.Sub))
	for k, _ := range this.Sub {
		keysForSub = append(keysForSub, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForSub)
	mapStringForSub := "map[int32]*LocationEntity{"
	for _, k := range keysForSub {
		mapStringForSub += fmt.Sprintf("%#v: %#v,", k, this.Sub[k])
	}
	mapStringForSub += "}"
	if this.Sub != nil {
		s = append(s, "Sub: "+mapStringForSub+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMasterData(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MasterDataServiceClient is the client API for MasterDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MasterDataServiceClient interface {
	ImportPresetStudyPlan(ctx context.Context, opts ...grpc.CallOption) (MasterDataService_ImportPresetStudyPlanClient, error)
	ImportLO(ctx context.Context, opts ...grpc.CallOption) (MasterDataService_ImportLOClient, error)
	ImportTopic(ctx context.Context, opts ...grpc.CallOption) (MasterDataService_ImportTopicClient, error)
	GetClientVersion(ctx context.Context, in *GetClientVersionRequest, opts ...grpc.CallOption) (*GetClientVersionResponse, error)
}

type masterDataServiceClient struct {
	cc *grpc.ClientConn
}

func NewMasterDataServiceClient(cc *grpc.ClientConn) MasterDataServiceClient {
	return &masterDataServiceClient{cc}
}

func (c *masterDataServiceClient) ImportPresetStudyPlan(ctx context.Context, opts ...grpc.CallOption) (MasterDataService_ImportPresetStudyPlanClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MasterDataService_serviceDesc.Streams[0], "/manabie.bob.MasterDataService/ImportPresetStudyPlan", opts...)
	if err != nil {
		return nil, err
	}
	x := &masterDataServiceImportPresetStudyPlanClient{stream}
	return x, nil
}

type MasterDataService_ImportPresetStudyPlanClient interface {
	Send(*ImportPresetStudyPlanRequest) error
	CloseAndRecv() (*ImportPresetStudyPlanResponse, error)
	grpc.ClientStream
}

type masterDataServiceImportPresetStudyPlanClient struct {
	grpc.ClientStream
}

func (x *masterDataServiceImportPresetStudyPlanClient) Send(m *ImportPresetStudyPlanRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *masterDataServiceImportPresetStudyPlanClient) CloseAndRecv() (*ImportPresetStudyPlanResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImportPresetStudyPlanResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Deprecated: Do not use.
func (c *masterDataServiceClient) ImportLO(ctx context.Context, opts ...grpc.CallOption) (MasterDataService_ImportLOClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MasterDataService_serviceDesc.Streams[1], "/manabie.bob.MasterDataService/ImportLO", opts...)
	if err != nil {
		return nil, err
	}
	x := &masterDataServiceImportLOClient{stream}
	return x, nil
}

type MasterDataService_ImportLOClient interface {
	Send(*ImportLORequest) error
	CloseAndRecv() (*ImportLOResponse, error)
	grpc.ClientStream
}

type masterDataServiceImportLOClient struct {
	grpc.ClientStream
}

func (x *masterDataServiceImportLOClient) Send(m *ImportLORequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *masterDataServiceImportLOClient) CloseAndRecv() (*ImportLOResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImportLOResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Deprecated: Do not use.
func (c *masterDataServiceClient) ImportTopic(ctx context.Context, opts ...grpc.CallOption) (MasterDataService_ImportTopicClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MasterDataService_serviceDesc.Streams[2], "/manabie.bob.MasterDataService/ImportTopic", opts...)
	if err != nil {
		return nil, err
	}
	x := &masterDataServiceImportTopicClient{stream}
	return x, nil
}

type MasterDataService_ImportTopicClient interface {
	Send(*ImportTopicRequest) error
	CloseAndRecv() (*ImportTopicResponse, error)
	grpc.ClientStream
}

type masterDataServiceImportTopicClient struct {
	grpc.ClientStream
}

func (x *masterDataServiceImportTopicClient) Send(m *ImportTopicRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *masterDataServiceImportTopicClient) CloseAndRecv() (*ImportTopicResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImportTopicResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *masterDataServiceClient) GetClientVersion(ctx context.Context, in *GetClientVersionRequest, opts ...grpc.CallOption) (*GetClientVersionResponse, error) {
	out := new(GetClientVersionResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.MasterDataService/GetClientVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterDataServiceServer is the server API for MasterDataService service.
type MasterDataServiceServer interface {
	ImportPresetStudyPlan(MasterDataService_ImportPresetStudyPlanServer) error
	ImportLO(MasterDataService_ImportLOServer) error
	ImportTopic(MasterDataService_ImportTopicServer) error
	GetClientVersion(context.Context, *GetClientVersionRequest) (*GetClientVersionResponse, error)
}

// UnimplementedMasterDataServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMasterDataServiceServer struct {
}

func (*UnimplementedMasterDataServiceServer) ImportPresetStudyPlan(srv MasterDataService_ImportPresetStudyPlanServer) error {
	return status.Errorf(codes.Unimplemented, "method ImportPresetStudyPlan not implemented")
}
func (*UnimplementedMasterDataServiceServer) ImportLO(srv MasterDataService_ImportLOServer) error {
	return status.Errorf(codes.Unimplemented, "method ImportLO not implemented")
}
func (*UnimplementedMasterDataServiceServer) ImportTopic(srv MasterDataService_ImportTopicServer) error {
	return status.Errorf(codes.Unimplemented, "method ImportTopic not implemented")
}
func (*UnimplementedMasterDataServiceServer) GetClientVersion(ctx context.Context, req *GetClientVersionRequest) (*GetClientVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientVersion not implemented")
}

func RegisterMasterDataServiceServer(s *grpc.Server, srv MasterDataServiceServer) {
	s.RegisterService(&_MasterDataService_serviceDesc, srv)
}

func _MasterDataService_ImportPresetStudyPlan_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MasterDataServiceServer).ImportPresetStudyPlan(&masterDataServiceImportPresetStudyPlanServer{stream})
}

type MasterDataService_ImportPresetStudyPlanServer interface {
	SendAndClose(*ImportPresetStudyPlanResponse) error
	Recv() (*ImportPresetStudyPlanRequest, error)
	grpc.ServerStream
}

type masterDataServiceImportPresetStudyPlanServer struct {
	grpc.ServerStream
}

func (x *masterDataServiceImportPresetStudyPlanServer) SendAndClose(m *ImportPresetStudyPlanResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *masterDataServiceImportPresetStudyPlanServer) Recv() (*ImportPresetStudyPlanRequest, error) {
	m := new(ImportPresetStudyPlanRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MasterDataService_ImportLO_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MasterDataServiceServer).ImportLO(&masterDataServiceImportLOServer{stream})
}

type MasterDataService_ImportLOServer interface {
	SendAndClose(*ImportLOResponse) error
	Recv() (*ImportLORequest, error)
	grpc.ServerStream
}

type masterDataServiceImportLOServer struct {
	grpc.ServerStream
}

func (x *masterDataServiceImportLOServer) SendAndClose(m *ImportLOResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *masterDataServiceImportLOServer) Recv() (*ImportLORequest, error) {
	m := new(ImportLORequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MasterDataService_ImportTopic_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MasterDataServiceServer).ImportTopic(&masterDataServiceImportTopicServer{stream})
}

type MasterDataService_ImportTopicServer interface {
	SendAndClose(*ImportTopicResponse) error
	Recv() (*ImportTopicRequest, error)
	grpc.ServerStream
}

type masterDataServiceImportTopicServer struct {
	grpc.ServerStream
}

func (x *masterDataServiceImportTopicServer) SendAndClose(m *ImportTopicResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *masterDataServiceImportTopicServer) Recv() (*ImportTopicRequest, error) {
	m := new(ImportTopicRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MasterDataService_GetClientVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDataServiceServer).GetClientVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.MasterDataService/GetClientVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDataServiceServer).GetClientVersion(ctx, req.(*GetClientVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MasterDataService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "manabie.bob.MasterDataService",
	HandlerType: (*MasterDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClientVersion",
			Handler:    _MasterDataService_GetClientVersion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ImportPresetStudyPlan",
			Handler:       _MasterDataService_ImportPresetStudyPlan_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ImportLO",
			Handler:       _MasterDataService_ImportLO_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ImportTopic",
			Handler:       _MasterDataService_ImportTopic_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "master_data.proto",
}

func (m *ImportPresetStudyPlanRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImportPresetStudyPlanRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImportPresetStudyPlanRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintMasterData(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImportPresetStudyPlanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImportPresetStudyPlanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImportPresetStudyPlanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ImportLORequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImportLORequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImportLORequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintMasterData(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintMasterData(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImportLOResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImportLOResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImportLOResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ImportTopicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImportTopicRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImportTopicRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintMasterData(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImportTopicResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImportTopicResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImportTopicResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetClientVersionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetClientVersionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetClientVersionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetClientVersionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetClientVersionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetClientVersionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Versions) > 0 {
		for k := range m.Versions {
			v := m.Versions[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintMasterData(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintMasterData(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMasterData(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LocationEntity) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocationEntity) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocationEntity) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sub) > 0 {
		for k := range m.Sub {
			v := m.Sub[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMasterData(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintMasterData(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMasterData(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMasterData(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintMasterData(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMasterData(dAtA []byte, offset int, v uint64) int {
	offset -= sovMasterData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ImportPresetStudyPlanRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovMasterData(uint64(l))
	}
	return n
}

func (m *ImportPresetStudyPlanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ImportLORequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovMasterData(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovMasterData(uint64(l))
	}
	return n
}

func (m *ImportLOResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ImportTopicRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovMasterData(uint64(l))
	}
	return n
}

func (m *ImportTopicResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetClientVersionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetClientVersionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Versions) > 0 {
		for k, v := range m.Versions {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMasterData(uint64(len(k))) + 1 + len(v) + sovMasterData(uint64(len(v)))
			n += mapEntrySize + 1 + sovMasterData(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *LocationEntity) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMasterData(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMasterData(uint64(l))
	}
	if len(m.Sub) > 0 {
		for k, v := range m.Sub {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMasterData(uint64(l))
			}
			mapEntrySize := 1 + sovMasterData(uint64(k)) + l
			n += mapEntrySize + 1 + sovMasterData(uint64(mapEntrySize))
		}
	}
	return n
}

func sovMasterData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMasterData(x uint64) (n int) {
	return sovMasterData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ImportPresetStudyPlanRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImportPresetStudyPlanRequest{`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImportPresetStudyPlanResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImportPresetStudyPlanResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ImportLORequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImportLORequest{`,
		`FileName:` + fmt.Sprintf("%v", this.FileName) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImportLOResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImportLOResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ImportTopicRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImportTopicRequest{`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ImportTopicResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ImportTopicResponse{`,
		`}`,
	}, "")
	return s
}
func (this *GetClientVersionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetClientVersionRequest{`,
		`}`,
	}, "")
	return s
}
func (this *GetClientVersionResponse) String() string {
	if this == nil {
		return "nil"
	}
	keysForVersions := make([]string, 0, len(this.Versions))
	for k, _ := range this.Versions {
		keysForVersions = append(keysForVersions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForVersions)
	mapStringForVersions := "map[string]string{"
	for _, k := range keysForVersions {
		mapStringForVersions += fmt.Sprintf("%v: %v,", k, this.Versions[k])
	}
	mapStringForVersions += "}"
	s := strings.Join([]string{`&GetClientVersionResponse{`,
		`Versions:` + mapStringForVersions + `,`,
		`}`,
	}, "")
	return s
}
func (this *LocationEntity) String() string {
	if this == nil {
		return "nil"
	}
	keysForSub := make([]int32, 0, len(this.Sub))
	for k, _ := range this.Sub {
		keysForSub = append(keysForSub, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForSub)
	mapStringForSub := "map[int32]*LocationEntity{"
	for _, k := range keysForSub {
		mapStringForSub += fmt.Sprintf("%v: %v,", k, this.Sub[k])
	}
	mapStringForSub += "}"
	s := strings.Join([]string{`&LocationEntity{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Sub:` + mapStringForSub + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMasterData(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ImportPresetStudyPlanRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMasterData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImportPresetStudyPlanRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImportPresetStudyPlanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMasterData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMasterData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMasterData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMasterData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImportPresetStudyPlanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMasterData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImportPresetStudyPlanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImportPresetStudyPlanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMasterData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMasterData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImportLORequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMasterData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImportLORequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImportLORequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMasterData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMasterData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMasterData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMasterData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMasterData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMasterData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImportLOResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMasterData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImportLOResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImportLOResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMasterData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMasterData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImportTopicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMasterData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImportTopicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImportTopicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMasterData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMasterData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMasterData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMasterData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImportTopicResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMasterData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImportTopicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImportTopicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMasterData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMasterData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetClientVersionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMasterData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetClientVersionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetClientVersionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMasterData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMasterData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetClientVersionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMasterData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetClientVersionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetClientVersionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Versions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMasterData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMasterData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Versions == nil {
				m.Versions = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMasterData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMasterData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMasterData
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMasterData
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMasterData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthMasterData
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthMasterData
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMasterData(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMasterData
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Versions[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMasterData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMasterData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocationEntity) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMasterData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocationEntity: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocationEntity: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMasterData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMasterData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sub", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMasterData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMasterData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMasterData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sub == nil {
				m.Sub = make(map[int32]*LocationEntity)
			}
			var mapkey int32
			var mapvalue *LocationEntity
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMasterData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMasterData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMasterData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMasterData
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMasterData
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &LocationEntity{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMasterData(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthMasterData
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Sub[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMasterData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMasterData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMasterData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMasterData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMasterData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMasterData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMasterData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMasterData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMasterData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMasterData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMasterData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMasterData = fmt.Errorf("proto: unexpected end of group")
)
