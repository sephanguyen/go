// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: quiz.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QuizType int32

const (
	QUESTION_TYPE_MCQ QuizType = 0
	QUESTION_TYPE_FIB QuizType = 1
)

var QuizType_name = map[int32]string{
	0: "QUESTION_TYPE_MCQ",
	1: "QUESTION_TYPE_FIB",
}

var QuizType_value = map[string]int32{
	"QUESTION_TYPE_MCQ": 0,
	"QUESTION_TYPE_FIB": 1,
}

func (QuizType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_93138adfabfb5582, []int{0}
}

type RichText struct {
	Raw      string `protobuf:"bytes,1,opt,name=raw,proto3" json:"raw,omitempty"`
	Rendered string `protobuf:"bytes,2,opt,name=rendered,proto3" json:"rendered,omitempty"`
}

func (m *RichText) Reset()      { *m = RichText{} }
func (*RichText) ProtoMessage() {}
func (*RichText) Descriptor() ([]byte, []int) {
	return fileDescriptor_93138adfabfb5582, []int{0}
}
func (m *RichText) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RichText) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RichText.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RichText) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RichText.Merge(m, src)
}
func (m *RichText) XXX_Size() int {
	return m.Size()
}
func (m *RichText) XXX_DiscardUnknown() {
	xxx_messageInfo_RichText.DiscardUnknown(m)
}

var xxx_messageInfo_RichText proto.InternalMessageInfo

func (m *RichText) GetRaw() string {
	if m != nil {
		return m.Raw
	}
	return ""
}

func (m *RichText) GetRendered() string {
	if m != nil {
		return m.Rendered
	}
	return ""
}

type QuizOption struct {
	Content       *RichText `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Correctness   bool      `protobuf:"varint,2,opt,name=correctness,proto3" json:"correctness,omitempty"`
	CaseSensitive bool      `protobuf:"varint,3,opt,name=case_sensitive,json=caseSensitive,proto3" json:"case_sensitive,omitempty"`
	Label         string    `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
}

func (m *QuizOption) Reset()      { *m = QuizOption{} }
func (*QuizOption) ProtoMessage() {}
func (*QuizOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_93138adfabfb5582, []int{1}
}
func (m *QuizOption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuizOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuizOption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuizOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuizOption.Merge(m, src)
}
func (m *QuizOption) XXX_Size() int {
	return m.Size()
}
func (m *QuizOption) XXX_DiscardUnknown() {
	xxx_messageInfo_QuizOption.DiscardUnknown(m)
}

var xxx_messageInfo_QuizOption proto.InternalMessageInfo

func (m *QuizOption) GetContent() *RichText {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *QuizOption) GetCorrectness() bool {
	if m != nil {
		return m.Correctness
	}
	return false
}

func (m *QuizOption) GetCaseSensitive() bool {
	if m != nil {
		return m.CaseSensitive
	}
	return false
}

func (m *QuizOption) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

type QuizCore struct {
	MappedId        string        `protobuf:"bytes,1,opt,name=mapped_id,json=mappedId,proto3" json:"mapped_id,omitempty"`
	Kind            QuizType      `protobuf:"varint,2,opt,name=kind,proto3,enum=manabie.bob.QuizType" json:"kind,omitempty"`
	SchoolId        int32         `protobuf:"varint,3,opt,name=school_id,json=schoolId,proto3" json:"school_id,omitempty"`
	Country         Country       `protobuf:"varint,4,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"`
	QuestionContent *RichText     `protobuf:"bytes,5,opt,name=question_content,json=questionContent,proto3" json:"question_content,omitempty"`
	Explanation     *RichText     `protobuf:"bytes,6,opt,name=explanation,proto3" json:"explanation,omitempty"`
	TaggedLos       []string      `protobuf:"bytes,7,rep,name=tagged_los,json=taggedLos,proto3" json:"tagged_los,omitempty"`
	DifficultyLevel int32         `protobuf:"varint,8,opt,name=difficulty_level,json=difficultyLevel,proto3" json:"difficulty_level,omitempty"`
	Options         []*QuizOption `protobuf:"bytes,9,rep,name=options,proto3" json:"options,omitempty"`
}

func (m *QuizCore) Reset()      { *m = QuizCore{} }
func (*QuizCore) ProtoMessage() {}
func (*QuizCore) Descriptor() ([]byte, []int) {
	return fileDescriptor_93138adfabfb5582, []int{2}
}
func (m *QuizCore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuizCore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuizCore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuizCore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuizCore.Merge(m, src)
}
func (m *QuizCore) XXX_Size() int {
	return m.Size()
}
func (m *QuizCore) XXX_DiscardUnknown() {
	xxx_messageInfo_QuizCore.DiscardUnknown(m)
}

var xxx_messageInfo_QuizCore proto.InternalMessageInfo

func (m *QuizCore) GetMappedId() string {
	if m != nil {
		return m.MappedId
	}
	return ""
}

func (m *QuizCore) GetKind() QuizType {
	if m != nil {
		return m.Kind
	}
	return QUESTION_TYPE_MCQ
}

func (m *QuizCore) GetSchoolId() int32 {
	if m != nil {
		return m.SchoolId
	}
	return 0
}

func (m *QuizCore) GetCountry() Country {
	if m != nil {
		return m.Country
	}
	return COUNTRY_NONE
}

func (m *QuizCore) GetQuestionContent() *RichText {
	if m != nil {
		return m.QuestionContent
	}
	return nil
}

func (m *QuizCore) GetExplanation() *RichText {
	if m != nil {
		return m.Explanation
	}
	return nil
}

func (m *QuizCore) GetTaggedLos() []string {
	if m != nil {
		return m.TaggedLos
	}
	return nil
}

func (m *QuizCore) GetDifficultyLevel() int32 {
	if m != nil {
		return m.DifficultyLevel
	}
	return 0
}

func (m *QuizCore) GetOptions() []*QuizOption {
	if m != nil {
		return m.Options
	}
	return nil
}

type Quiz struct {
	Core                      *QuizCore        `protobuf:"bytes,1,opt,name=core,proto3" json:"core,omitempty"`
	QuestionUrl               string           `protobuf:"bytes,2,opt,name=question_url,json=questionUrl,proto3" json:"question_url,omitempty"`
	AnswersUrl                []string         `protobuf:"bytes,3,rep,name=answers_url,json=answersUrl,proto3" json:"answers_url,omitempty"`
	ExplanationUrl            string           `protobuf:"bytes,4,opt,name=explanation_url,json=explanationUrl,proto3" json:"explanation_url,omitempty"`
	ExplanationWrongAnswer    []string         `protobuf:"bytes,5,rep,name=explanation_wrong_answer,json=explanationWrongAnswer,proto3" json:"explanation_wrong_answer,omitempty"`
	ExplanationWrongAnswerUrl []string         `protobuf:"bytes,6,rep,name=explanation_wrong_answer_url,json=explanationWrongAnswerUrl,proto3" json:"explanation_wrong_answer_url,omitempty"`
	IsWaitingForRender        bool             `protobuf:"varint,7,opt,name=is_waiting_for_render,json=isWaitingForRender,proto3" json:"is_waiting_for_render,omitempty"`
	UpdatedAt                 *types.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt                 *types.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *Quiz) Reset()      { *m = Quiz{} }
func (*Quiz) ProtoMessage() {}
func (*Quiz) Descriptor() ([]byte, []int) {
	return fileDescriptor_93138adfabfb5582, []int{3}
}
func (m *Quiz) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Quiz) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Quiz.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Quiz) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Quiz.Merge(m, src)
}
func (m *Quiz) XXX_Size() int {
	return m.Size()
}
func (m *Quiz) XXX_DiscardUnknown() {
	xxx_messageInfo_Quiz.DiscardUnknown(m)
}

var xxx_messageInfo_Quiz proto.InternalMessageInfo

func (m *Quiz) GetCore() *QuizCore {
	if m != nil {
		return m.Core
	}
	return nil
}

func (m *Quiz) GetQuestionUrl() string {
	if m != nil {
		return m.QuestionUrl
	}
	return ""
}

func (m *Quiz) GetAnswersUrl() []string {
	if m != nil {
		return m.AnswersUrl
	}
	return nil
}

func (m *Quiz) GetExplanationUrl() string {
	if m != nil {
		return m.ExplanationUrl
	}
	return ""
}

func (m *Quiz) GetExplanationWrongAnswer() []string {
	if m != nil {
		return m.ExplanationWrongAnswer
	}
	return nil
}

func (m *Quiz) GetExplanationWrongAnswerUrl() []string {
	if m != nil {
		return m.ExplanationWrongAnswerUrl
	}
	return nil
}

func (m *Quiz) GetIsWaitingForRender() bool {
	if m != nil {
		return m.IsWaitingForRender
	}
	return false
}

func (m *Quiz) GetUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Quiz) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func init() {
	proto.RegisterEnum("manabie.bob.QuizType", QuizType_name, QuizType_value)
	proto.RegisterType((*RichText)(nil), "manabie.bob.RichText")
	proto.RegisterType((*QuizOption)(nil), "manabie.bob.QuizOption")
	proto.RegisterType((*QuizCore)(nil), "manabie.bob.QuizCore")
	proto.RegisterType((*Quiz)(nil), "manabie.bob.Quiz")
}

func init() { proto.RegisterFile("quiz.proto", fileDescriptor_93138adfabfb5582) }

var fileDescriptor_93138adfabfb5582 = []byte{
	// 737 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xcf, 0x4f, 0x1b, 0x47,
	0x14, 0xc7, 0xbd, 0x35, 0xc6, 0xf6, 0xdb, 0xd6, 0xb8, 0x23, 0x68, 0xb7, 0x6e, 0xbb, 0xb8, 0x96,
	0xaa, 0x42, 0xa5, 0xae, 0x85, 0x7b, 0x28, 0x55, 0x0f, 0x2d, 0x58, 0x20, 0x59, 0xa2, 0x21, 0x2c,
	0x46, 0x28, 0xb9, 0xac, 0xf6, 0xc7, 0x78, 0x3d, 0x62, 0x3d, 0xb3, 0xcc, 0xce, 0x62, 0xe0, 0x94,
	0x3f, 0x21, 0xb7, 0x5c, 0xf2, 0x07, 0xe4, 0xef, 0xc8, 0x29, 0x47, 0x8e, 0x1c, 0x83, 0xb9, 0xe4,
	0xc8, 0x9f, 0x10, 0xcd, 0xac, 0x97, 0x38, 0x81, 0x90, 0xdb, 0xce, 0xf7, 0x7d, 0xde, 0x9b, 0x37,
	0xdf, 0x7d, 0x0f, 0xe0, 0x38, 0x25, 0xe7, 0x56, 0xcc, 0x99, 0x60, 0x48, 0x1f, 0xb9, 0xd4, 0xf5,
	0x08, 0xb6, 0x3c, 0xe6, 0x35, 0x00, 0xd3, 0x74, 0x94, 0x05, 0x1a, 0xcb, 0x21, 0x63, 0x61, 0x84,
	0xdb, 0xea, 0xe4, 0xa5, 0x83, 0xb6, 0x20, 0x23, 0x9c, 0x08, 0x77, 0x14, 0x67, 0x40, 0x6b, 0x1d,
	0x2a, 0x36, 0xf1, 0x87, 0x7d, 0x7c, 0x2a, 0x50, 0x1d, 0x8a, 0xdc, 0x1d, 0x1b, 0x5a, 0x53, 0x5b,
	0xa9, 0xda, 0xf2, 0x13, 0x35, 0xa0, 0xc2, 0x31, 0x0d, 0x30, 0xc7, 0x81, 0xf1, 0x95, 0x92, 0x6f,
	0xcf, 0xad, 0x97, 0x1a, 0xc0, 0x5e, 0x4a, 0xce, 0x77, 0x63, 0x41, 0x18, 0x45, 0x6d, 0x28, 0xfb,
	0x8c, 0x0a, 0x4c, 0x85, 0x2a, 0xa0, 0x77, 0x96, 0xac, 0x99, 0xa6, 0xac, 0xfc, 0x12, 0x3b, 0xa7,
	0x50, 0x13, 0x74, 0x9f, 0x71, 0x8e, 0x7d, 0x41, 0x71, 0x92, 0xa8, 0xf2, 0x15, 0x7b, 0x56, 0x42,
	0xbf, 0x42, 0xcd, 0x77, 0x13, 0xec, 0x24, 0x98, 0x26, 0x44, 0x90, 0x13, 0x6c, 0x14, 0x15, 0xf4,
	0x8d, 0x54, 0xf7, 0x73, 0x11, 0x2d, 0x42, 0x29, 0x72, 0x3d, 0x1c, 0x19, 0x73, 0xaa, 0xc3, 0xec,
	0xd0, 0x7a, 0x51, 0x84, 0x8a, 0x6c, 0xaf, 0xcb, 0x38, 0x46, 0x3f, 0x42, 0x75, 0xe4, 0xc6, 0x31,
	0x0e, 0x1c, 0x12, 0x4c, 0xdf, 0x57, 0xc9, 0x84, 0x5e, 0x80, 0x56, 0x61, 0xee, 0x88, 0xd0, 0xec,
	0x81, 0xb5, 0x4f, 0xda, 0x96, 0x15, 0xfa, 0x67, 0x31, 0xb6, 0x15, 0x22, 0xeb, 0x24, 0xfe, 0x90,
	0xb1, 0x48, 0xd6, 0x91, 0xcd, 0x94, 0xec, 0x4a, 0x26, 0xf4, 0x02, 0x64, 0x49, 0x07, 0x52, 0x2a,
	0xf8, 0x99, 0xea, 0xa4, 0xd6, 0x59, 0xfc, 0xa8, 0x54, 0x37, 0x8b, 0xd9, 0x39, 0x84, 0xfe, 0x83,
	0xfa, 0x71, 0x8a, 0x13, 0xe9, 0x9e, 0x93, 0x5b, 0x57, 0x7a, 0xc8, 0xba, 0x85, 0x1c, 0xef, 0x4e,
	0x2d, 0xfc, 0x0b, 0x74, 0x7c, 0x1a, 0x47, 0x2e, 0x75, 0xa5, 0x6a, 0xcc, 0x3f, 0x94, 0x3c, 0x4b,
	0xa2, 0x9f, 0x01, 0x84, 0x1b, 0x86, 0x38, 0x70, 0x22, 0x96, 0x18, 0xe5, 0x66, 0x71, 0xa5, 0x6a,
	0x57, 0x33, 0x65, 0x87, 0x25, 0x68, 0x15, 0xea, 0x01, 0x19, 0x0c, 0x88, 0x9f, 0x46, 0xe2, 0xcc,
	0x89, 0xf0, 0x09, 0x8e, 0x8c, 0x8a, 0x7a, 0xed, 0xc2, 0x07, 0x7d, 0x47, 0xca, 0x68, 0x0d, 0xca,
	0x4c, 0x0d, 0x40, 0x62, 0x54, 0x9b, 0xc5, 0x15, 0xbd, 0xf3, 0xfd, 0x1d, 0xff, 0xb2, 0x01, 0xb1,
	0x73, 0xae, 0xf5, 0xba, 0x08, 0x73, 0x52, 0x97, 0xc6, 0xfb, 0x8c, 0xe3, 0x7b, 0xe7, 0x25, 0xff,
	0x75, 0xb6, 0x42, 0xd0, 0x2f, 0xf0, 0xf5, 0xad, 0x57, 0x29, 0x8f, 0xa6, 0xc3, 0xa8, 0xe7, 0xda,
	0x01, 0x8f, 0xd0, 0x32, 0xe8, 0x2e, 0x4d, 0xc6, 0x98, 0x27, 0x8a, 0x28, 0xaa, 0x47, 0xc1, 0x54,
	0x92, 0xc0, 0x6f, 0xb0, 0x30, 0xe3, 0x81, 0x82, 0xb2, 0x89, 0xa9, 0xcd, 0xc8, 0x12, 0x5c, 0x07,
	0x63, 0x16, 0x1c, 0x73, 0x46, 0x43, 0x27, 0x2b, 0x64, 0x94, 0x54, 0xd9, 0xef, 0x66, 0xe2, 0x87,
	0x32, 0xbc, 0xa1, 0xa2, 0xe8, 0x5f, 0xf8, 0xe9, 0x73, 0x99, 0xea, 0xbe, 0x79, 0x95, 0xfd, 0xc3,
	0xfd, 0xd9, 0xf2, 0xea, 0x35, 0x58, 0x22, 0x89, 0x33, 0x76, 0x89, 0x20, 0x34, 0x74, 0x06, 0x8c,
	0x3b, 0xd9, 0xbe, 0x19, 0x65, 0x35, 0xf9, 0x88, 0x24, 0x87, 0x59, 0x6c, 0x9b, 0x71, 0x5b, 0x45,
	0xd0, 0xdf, 0x00, 0x69, 0x1c, 0xb8, 0x02, 0x07, 0x8e, 0x2b, 0xd4, 0x6f, 0xd2, 0x3b, 0x0d, 0x2b,
	0xdb, 0x7b, 0x2b, 0xdf, 0x7b, 0xab, 0x9f, 0xef, 0xbd, 0x5d, 0x9d, 0xd2, 0x1b, 0x42, 0xa6, 0xfa,
	0x1c, 0xe7, 0xa9, 0xd5, 0x2f, 0xa7, 0x4e, 0xe9, 0x0d, 0xf1, 0xfb, 0x7a, 0xb6, 0x5d, 0x72, 0x37,
	0xd0, 0x12, 0x7c, 0xbb, 0x77, 0xb0, 0xb5, 0xdf, 0xef, 0xed, 0x3e, 0x72, 0xfa, 0x4f, 0x1e, 0x6f,
	0x39, 0xff, 0x77, 0xf7, 0xea, 0x85, 0xbb, 0xf2, 0x76, 0x6f, 0xb3, 0xae, 0x6d, 0x0e, 0x2f, 0xae,
	0xcc, 0xc2, 0xe5, 0x95, 0x59, 0xb8, 0xb9, 0x32, 0xb5, 0x67, 0x13, 0x53, 0x7b, 0x35, 0x31, 0xb5,
	0x37, 0x13, 0x53, 0xbb, 0x98, 0x98, 0xda, 0xdb, 0x89, 0xa9, 0xbd, 0x9b, 0x98, 0x85, 0x9b, 0x89,
	0xa9, 0x3d, 0xbf, 0x36, 0x0b, 0x17, 0xd7, 0x66, 0xe1, 0xf2, 0xda, 0x2c, 0x3c, 0xed, 0x84, 0x44,
	0x0c, 0x53, 0xcf, 0xf2, 0xd9, 0xa8, 0x3d, 0x9d, 0x93, 0x3f, 0xe4, 0xb7, 0xe7, 0xfa, 0x47, 0x98,
	0x06, 0xed, 0xf8, 0x28, 0x6c, 0x87, 0x98, 0xaa, 0xa6, 0xdb, 0x1e, 0xf3, 0xfe, 0x89, 0x3d, 0x6f,
	0x5e, 0x9d, 0xfe, 0x7c, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x6f, 0x61, 0x4d, 0x87, 0x2a, 0x05, 0x00,
	0x00,
}

func (x QuizType) String() string {
	s, ok := QuizType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *RichText) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RichText)
	if !ok {
		that2, ok := that.(RichText)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Raw != that1.Raw {
		return false
	}
	if this.Rendered != that1.Rendered {
		return false
	}
	return true
}
func (this *QuizOption) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QuizOption)
	if !ok {
		that2, ok := that.(QuizOption)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Content.Equal(that1.Content) {
		return false
	}
	if this.Correctness != that1.Correctness {
		return false
	}
	if this.CaseSensitive != that1.CaseSensitive {
		return false
	}
	if this.Label != that1.Label {
		return false
	}
	return true
}
func (this *QuizCore) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QuizCore)
	if !ok {
		that2, ok := that.(QuizCore)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MappedId != that1.MappedId {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if this.SchoolId != that1.SchoolId {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if !this.QuestionContent.Equal(that1.QuestionContent) {
		return false
	}
	if !this.Explanation.Equal(that1.Explanation) {
		return false
	}
	if len(this.TaggedLos) != len(that1.TaggedLos) {
		return false
	}
	for i := range this.TaggedLos {
		if this.TaggedLos[i] != that1.TaggedLos[i] {
			return false
		}
	}
	if this.DifficultyLevel != that1.DifficultyLevel {
		return false
	}
	if len(this.Options) != len(that1.Options) {
		return false
	}
	for i := range this.Options {
		if !this.Options[i].Equal(that1.Options[i]) {
			return false
		}
	}
	return true
}
func (this *Quiz) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Quiz)
	if !ok {
		that2, ok := that.(Quiz)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Core.Equal(that1.Core) {
		return false
	}
	if this.QuestionUrl != that1.QuestionUrl {
		return false
	}
	if len(this.AnswersUrl) != len(that1.AnswersUrl) {
		return false
	}
	for i := range this.AnswersUrl {
		if this.AnswersUrl[i] != that1.AnswersUrl[i] {
			return false
		}
	}
	if this.ExplanationUrl != that1.ExplanationUrl {
		return false
	}
	if len(this.ExplanationWrongAnswer) != len(that1.ExplanationWrongAnswer) {
		return false
	}
	for i := range this.ExplanationWrongAnswer {
		if this.ExplanationWrongAnswer[i] != that1.ExplanationWrongAnswer[i] {
			return false
		}
	}
	if len(this.ExplanationWrongAnswerUrl) != len(that1.ExplanationWrongAnswerUrl) {
		return false
	}
	for i := range this.ExplanationWrongAnswerUrl {
		if this.ExplanationWrongAnswerUrl[i] != that1.ExplanationWrongAnswerUrl[i] {
			return false
		}
	}
	if this.IsWaitingForRender != that1.IsWaitingForRender {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	return true
}
func (this *RichText) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.RichText{")
	s = append(s, "Raw: "+fmt.Sprintf("%#v", this.Raw)+",\n")
	s = append(s, "Rendered: "+fmt.Sprintf("%#v", this.Rendered)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QuizOption) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.QuizOption{")
	if this.Content != nil {
		s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	}
	s = append(s, "Correctness: "+fmt.Sprintf("%#v", this.Correctness)+",\n")
	s = append(s, "CaseSensitive: "+fmt.Sprintf("%#v", this.CaseSensitive)+",\n")
	s = append(s, "Label: "+fmt.Sprintf("%#v", this.Label)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QuizCore) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&pb.QuizCore{")
	s = append(s, "MappedId: "+fmt.Sprintf("%#v", this.MappedId)+",\n")
	s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	s = append(s, "SchoolId: "+fmt.Sprintf("%#v", this.SchoolId)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	if this.QuestionContent != nil {
		s = append(s, "QuestionContent: "+fmt.Sprintf("%#v", this.QuestionContent)+",\n")
	}
	if this.Explanation != nil {
		s = append(s, "Explanation: "+fmt.Sprintf("%#v", this.Explanation)+",\n")
	}
	s = append(s, "TaggedLos: "+fmt.Sprintf("%#v", this.TaggedLos)+",\n")
	s = append(s, "DifficultyLevel: "+fmt.Sprintf("%#v", this.DifficultyLevel)+",\n")
	if this.Options != nil {
		s = append(s, "Options: "+fmt.Sprintf("%#v", this.Options)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Quiz) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&pb.Quiz{")
	if this.Core != nil {
		s = append(s, "Core: "+fmt.Sprintf("%#v", this.Core)+",\n")
	}
	s = append(s, "QuestionUrl: "+fmt.Sprintf("%#v", this.QuestionUrl)+",\n")
	s = append(s, "AnswersUrl: "+fmt.Sprintf("%#v", this.AnswersUrl)+",\n")
	s = append(s, "ExplanationUrl: "+fmt.Sprintf("%#v", this.ExplanationUrl)+",\n")
	s = append(s, "ExplanationWrongAnswer: "+fmt.Sprintf("%#v", this.ExplanationWrongAnswer)+",\n")
	s = append(s, "ExplanationWrongAnswerUrl: "+fmt.Sprintf("%#v", this.ExplanationWrongAnswerUrl)+",\n")
	s = append(s, "IsWaitingForRender: "+fmt.Sprintf("%#v", this.IsWaitingForRender)+",\n")
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringQuiz(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *RichText) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RichText) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RichText) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rendered) > 0 {
		i -= len(m.Rendered)
		copy(dAtA[i:], m.Rendered)
		i = encodeVarintQuiz(dAtA, i, uint64(len(m.Rendered)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Raw) > 0 {
		i -= len(m.Raw)
		copy(dAtA[i:], m.Raw)
		i = encodeVarintQuiz(dAtA, i, uint64(len(m.Raw)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuizOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuizOption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuizOption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintQuiz(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x22
	}
	if m.CaseSensitive {
		i--
		if m.CaseSensitive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Correctness {
		i--
		if m.Correctness {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuiz(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuizCore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuizCore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuizCore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Options) > 0 {
		for iNdEx := len(m.Options) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Options[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuiz(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.DifficultyLevel != 0 {
		i = encodeVarintQuiz(dAtA, i, uint64(m.DifficultyLevel))
		i--
		dAtA[i] = 0x40
	}
	if len(m.TaggedLos) > 0 {
		for iNdEx := len(m.TaggedLos) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TaggedLos[iNdEx])
			copy(dAtA[i:], m.TaggedLos[iNdEx])
			i = encodeVarintQuiz(dAtA, i, uint64(len(m.TaggedLos[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Explanation != nil {
		{
			size, err := m.Explanation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuiz(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.QuestionContent != nil {
		{
			size, err := m.QuestionContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuiz(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Country != 0 {
		i = encodeVarintQuiz(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x20
	}
	if m.SchoolId != 0 {
		i = encodeVarintQuiz(dAtA, i, uint64(m.SchoolId))
		i--
		dAtA[i] = 0x18
	}
	if m.Kind != 0 {
		i = encodeVarintQuiz(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MappedId) > 0 {
		i -= len(m.MappedId)
		copy(dAtA[i:], m.MappedId)
		i = encodeVarintQuiz(dAtA, i, uint64(len(m.MappedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Quiz) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Quiz) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Quiz) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuiz(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuiz(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.IsWaitingForRender {
		i--
		if m.IsWaitingForRender {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.ExplanationWrongAnswerUrl) > 0 {
		for iNdEx := len(m.ExplanationWrongAnswerUrl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExplanationWrongAnswerUrl[iNdEx])
			copy(dAtA[i:], m.ExplanationWrongAnswerUrl[iNdEx])
			i = encodeVarintQuiz(dAtA, i, uint64(len(m.ExplanationWrongAnswerUrl[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ExplanationWrongAnswer) > 0 {
		for iNdEx := len(m.ExplanationWrongAnswer) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExplanationWrongAnswer[iNdEx])
			copy(dAtA[i:], m.ExplanationWrongAnswer[iNdEx])
			i = encodeVarintQuiz(dAtA, i, uint64(len(m.ExplanationWrongAnswer[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ExplanationUrl) > 0 {
		i -= len(m.ExplanationUrl)
		copy(dAtA[i:], m.ExplanationUrl)
		i = encodeVarintQuiz(dAtA, i, uint64(len(m.ExplanationUrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AnswersUrl) > 0 {
		for iNdEx := len(m.AnswersUrl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AnswersUrl[iNdEx])
			copy(dAtA[i:], m.AnswersUrl[iNdEx])
			i = encodeVarintQuiz(dAtA, i, uint64(len(m.AnswersUrl[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.QuestionUrl) > 0 {
		i -= len(m.QuestionUrl)
		copy(dAtA[i:], m.QuestionUrl)
		i = encodeVarintQuiz(dAtA, i, uint64(len(m.QuestionUrl)))
		i--
		dAtA[i] = 0x12
	}
	if m.Core != nil {
		{
			size, err := m.Core.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuiz(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuiz(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuiz(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RichText) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Raw)
	if l > 0 {
		n += 1 + l + sovQuiz(uint64(l))
	}
	l = len(m.Rendered)
	if l > 0 {
		n += 1 + l + sovQuiz(uint64(l))
	}
	return n
}

func (m *QuizOption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovQuiz(uint64(l))
	}
	if m.Correctness {
		n += 2
	}
	if m.CaseSensitive {
		n += 2
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovQuiz(uint64(l))
	}
	return n
}

func (m *QuizCore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MappedId)
	if l > 0 {
		n += 1 + l + sovQuiz(uint64(l))
	}
	if m.Kind != 0 {
		n += 1 + sovQuiz(uint64(m.Kind))
	}
	if m.SchoolId != 0 {
		n += 1 + sovQuiz(uint64(m.SchoolId))
	}
	if m.Country != 0 {
		n += 1 + sovQuiz(uint64(m.Country))
	}
	if m.QuestionContent != nil {
		l = m.QuestionContent.Size()
		n += 1 + l + sovQuiz(uint64(l))
	}
	if m.Explanation != nil {
		l = m.Explanation.Size()
		n += 1 + l + sovQuiz(uint64(l))
	}
	if len(m.TaggedLos) > 0 {
		for _, s := range m.TaggedLos {
			l = len(s)
			n += 1 + l + sovQuiz(uint64(l))
		}
	}
	if m.DifficultyLevel != 0 {
		n += 1 + sovQuiz(uint64(m.DifficultyLevel))
	}
	if len(m.Options) > 0 {
		for _, e := range m.Options {
			l = e.Size()
			n += 1 + l + sovQuiz(uint64(l))
		}
	}
	return n
}

func (m *Quiz) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Core != nil {
		l = m.Core.Size()
		n += 1 + l + sovQuiz(uint64(l))
	}
	l = len(m.QuestionUrl)
	if l > 0 {
		n += 1 + l + sovQuiz(uint64(l))
	}
	if len(m.AnswersUrl) > 0 {
		for _, s := range m.AnswersUrl {
			l = len(s)
			n += 1 + l + sovQuiz(uint64(l))
		}
	}
	l = len(m.ExplanationUrl)
	if l > 0 {
		n += 1 + l + sovQuiz(uint64(l))
	}
	if len(m.ExplanationWrongAnswer) > 0 {
		for _, s := range m.ExplanationWrongAnswer {
			l = len(s)
			n += 1 + l + sovQuiz(uint64(l))
		}
	}
	if len(m.ExplanationWrongAnswerUrl) > 0 {
		for _, s := range m.ExplanationWrongAnswerUrl {
			l = len(s)
			n += 1 + l + sovQuiz(uint64(l))
		}
	}
	if m.IsWaitingForRender {
		n += 2
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovQuiz(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovQuiz(uint64(l))
	}
	return n
}

func sovQuiz(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuiz(x uint64) (n int) {
	return sovQuiz(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RichText) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RichText{`,
		`Raw:` + fmt.Sprintf("%v", this.Raw) + `,`,
		`Rendered:` + fmt.Sprintf("%v", this.Rendered) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QuizOption) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QuizOption{`,
		`Content:` + strings.Replace(this.Content.String(), "RichText", "RichText", 1) + `,`,
		`Correctness:` + fmt.Sprintf("%v", this.Correctness) + `,`,
		`CaseSensitive:` + fmt.Sprintf("%v", this.CaseSensitive) + `,`,
		`Label:` + fmt.Sprintf("%v", this.Label) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QuizCore) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOptions := "[]*QuizOption{"
	for _, f := range this.Options {
		repeatedStringForOptions += strings.Replace(f.String(), "QuizOption", "QuizOption", 1) + ","
	}
	repeatedStringForOptions += "}"
	s := strings.Join([]string{`&QuizCore{`,
		`MappedId:` + fmt.Sprintf("%v", this.MappedId) + `,`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`SchoolId:` + fmt.Sprintf("%v", this.SchoolId) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`QuestionContent:` + strings.Replace(this.QuestionContent.String(), "RichText", "RichText", 1) + `,`,
		`Explanation:` + strings.Replace(this.Explanation.String(), "RichText", "RichText", 1) + `,`,
		`TaggedLos:` + fmt.Sprintf("%v", this.TaggedLos) + `,`,
		`DifficultyLevel:` + fmt.Sprintf("%v", this.DifficultyLevel) + `,`,
		`Options:` + repeatedStringForOptions + `,`,
		`}`,
	}, "")
	return s
}
func (this *Quiz) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Quiz{`,
		`Core:` + strings.Replace(this.Core.String(), "QuizCore", "QuizCore", 1) + `,`,
		`QuestionUrl:` + fmt.Sprintf("%v", this.QuestionUrl) + `,`,
		`AnswersUrl:` + fmt.Sprintf("%v", this.AnswersUrl) + `,`,
		`ExplanationUrl:` + fmt.Sprintf("%v", this.ExplanationUrl) + `,`,
		`ExplanationWrongAnswer:` + fmt.Sprintf("%v", this.ExplanationWrongAnswer) + `,`,
		`ExplanationWrongAnswerUrl:` + fmt.Sprintf("%v", this.ExplanationWrongAnswerUrl) + `,`,
		`IsWaitingForRender:` + fmt.Sprintf("%v", this.IsWaitingForRender) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringQuiz(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RichText) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuiz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RichText: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RichText: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuiz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Raw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rendered", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuiz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rendered = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuiz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuiz
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuiz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuizOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuiz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuizOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuizOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuiz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &RichText{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Correctness", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Correctness = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaseSensitive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CaseSensitive = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuiz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuiz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuiz
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuiz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuizCore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuiz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuizCore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuizCore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MappedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuiz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MappedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= QuizType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchoolId", wireType)
			}
			m.SchoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchoolId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestionContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuiz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QuestionContent == nil {
				m.QuestionContent = &RichText{}
			}
			if err := m.QuestionContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Explanation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuiz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Explanation == nil {
				m.Explanation = &RichText{}
			}
			if err := m.Explanation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaggedLos", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuiz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaggedLos = append(m.TaggedLos, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DifficultyLevel", wireType)
			}
			m.DifficultyLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DifficultyLevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuiz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = append(m.Options, &QuizOption{})
			if err := m.Options[len(m.Options)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuiz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuiz
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuiz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Quiz) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuiz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Quiz: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Quiz: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Core", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuiz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Core == nil {
				m.Core = &QuizCore{}
			}
			if err := m.Core.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestionUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuiz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuestionUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnswersUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuiz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnswersUrl = append(m.AnswersUrl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExplanationUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuiz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExplanationUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExplanationWrongAnswer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuiz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExplanationWrongAnswer = append(m.ExplanationWrongAnswer, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExplanationWrongAnswerUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuiz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExplanationWrongAnswerUrl = append(m.ExplanationWrongAnswerUrl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWaitingForRender", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWaitingForRender = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuiz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuiz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuiz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQuiz
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthQuiz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuiz(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuiz
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuiz
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuiz
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuiz
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuiz
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuiz
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuiz        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuiz          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuiz = fmt.Errorf("proto: unexpected end of group")
)
