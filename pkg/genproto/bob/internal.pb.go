// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internal.proto

package pb

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EvtStudentQuestion struct {
	// Types that are valid to be assigned to Message:
	//	*EvtStudentQuestion_CreateStudentQuestion_
	//	*EvtStudentQuestion_AllocateStudentQuestion_
	//	*EvtStudentQuestion_EventMessageChat_
	//	*EvtStudentQuestion_EventArchivedQuestion_
	Message isEvtStudentQuestion_Message `protobuf_oneof:"message"`
}

func (m *EvtStudentQuestion) Reset()      { *m = EvtStudentQuestion{} }
func (*EvtStudentQuestion) ProtoMessage() {}
func (*EvtStudentQuestion) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{0}
}
func (m *EvtStudentQuestion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvtStudentQuestion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvtStudentQuestion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvtStudentQuestion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvtStudentQuestion.Merge(m, src)
}
func (m *EvtStudentQuestion) XXX_Size() int {
	return m.Size()
}
func (m *EvtStudentQuestion) XXX_DiscardUnknown() {
	xxx_messageInfo_EvtStudentQuestion.DiscardUnknown(m)
}

var xxx_messageInfo_EvtStudentQuestion proto.InternalMessageInfo

type isEvtStudentQuestion_Message interface {
	isEvtStudentQuestion_Message()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type EvtStudentQuestion_CreateStudentQuestion_ struct {
	CreateStudentQuestion *EvtStudentQuestion_CreateStudentQuestion `protobuf:"bytes,1,opt,name=create_student_question,json=createStudentQuestion,proto3,oneof" json:"create_student_question,omitempty"`
}
type EvtStudentQuestion_AllocateStudentQuestion_ struct {
	AllocateStudentQuestion *EvtStudentQuestion_AllocateStudentQuestion `protobuf:"bytes,2,opt,name=allocate_student_question,json=allocateStudentQuestion,proto3,oneof" json:"allocate_student_question,omitempty"`
}
type EvtStudentQuestion_EventMessageChat_ struct {
	EventMessageChat *EvtStudentQuestion_EventMessageChat `protobuf:"bytes,3,opt,name=event_message_chat,json=eventMessageChat,proto3,oneof" json:"event_message_chat,omitempty"`
}
type EvtStudentQuestion_EventArchivedQuestion_ struct {
	EventArchivedQuestion *EvtStudentQuestion_EventArchivedQuestion `protobuf:"bytes,4,opt,name=event_archived_question,json=eventArchivedQuestion,proto3,oneof" json:"event_archived_question,omitempty"`
}

func (*EvtStudentQuestion_CreateStudentQuestion_) isEvtStudentQuestion_Message()   {}
func (*EvtStudentQuestion_AllocateStudentQuestion_) isEvtStudentQuestion_Message() {}
func (*EvtStudentQuestion_EventMessageChat_) isEvtStudentQuestion_Message()        {}
func (*EvtStudentQuestion_EventArchivedQuestion_) isEvtStudentQuestion_Message()   {}

func (m *EvtStudentQuestion) GetMessage() isEvtStudentQuestion_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *EvtStudentQuestion) GetCreateStudentQuestion() *EvtStudentQuestion_CreateStudentQuestion {
	if x, ok := m.GetMessage().(*EvtStudentQuestion_CreateStudentQuestion_); ok {
		return x.CreateStudentQuestion
	}
	return nil
}

func (m *EvtStudentQuestion) GetAllocateStudentQuestion() *EvtStudentQuestion_AllocateStudentQuestion {
	if x, ok := m.GetMessage().(*EvtStudentQuestion_AllocateStudentQuestion_); ok {
		return x.AllocateStudentQuestion
	}
	return nil
}

func (m *EvtStudentQuestion) GetEventMessageChat() *EvtStudentQuestion_EventMessageChat {
	if x, ok := m.GetMessage().(*EvtStudentQuestion_EventMessageChat_); ok {
		return x.EventMessageChat
	}
	return nil
}

func (m *EvtStudentQuestion) GetEventArchivedQuestion() *EvtStudentQuestion_EventArchivedQuestion {
	if x, ok := m.GetMessage().(*EvtStudentQuestion_EventArchivedQuestion_); ok {
		return x.EventArchivedQuestion
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*EvtStudentQuestion) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*EvtStudentQuestion_CreateStudentQuestion_)(nil),
		(*EvtStudentQuestion_AllocateStudentQuestion_)(nil),
		(*EvtStudentQuestion_EventMessageChat_)(nil),
		(*EvtStudentQuestion_EventArchivedQuestion_)(nil),
	}
}

type EvtStudentQuestion_CreateStudentQuestion struct {
	StudentId         string   `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	StudentQuestionId string   `protobuf:"bytes,2,opt,name=student_question_id,json=studentQuestionId,proto3" json:"student_question_id,omitempty"`
	QuizId            string   `protobuf:"bytes,3,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	Content           string   `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	UrlMedias         []string `protobuf:"bytes,5,rep,name=url_medias,json=urlMedias,proto3" json:"url_medias,omitempty"`
	Title             string   `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
}

func (m *EvtStudentQuestion_CreateStudentQuestion) Reset() {
	*m = EvtStudentQuestion_CreateStudentQuestion{}
}
func (*EvtStudentQuestion_CreateStudentQuestion) ProtoMessage() {}
func (*EvtStudentQuestion_CreateStudentQuestion) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{0, 0}
}
func (m *EvtStudentQuestion_CreateStudentQuestion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvtStudentQuestion_CreateStudentQuestion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvtStudentQuestion_CreateStudentQuestion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvtStudentQuestion_CreateStudentQuestion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvtStudentQuestion_CreateStudentQuestion.Merge(m, src)
}
func (m *EvtStudentQuestion_CreateStudentQuestion) XXX_Size() int {
	return m.Size()
}
func (m *EvtStudentQuestion_CreateStudentQuestion) XXX_DiscardUnknown() {
	xxx_messageInfo_EvtStudentQuestion_CreateStudentQuestion.DiscardUnknown(m)
}

var xxx_messageInfo_EvtStudentQuestion_CreateStudentQuestion proto.InternalMessageInfo

func (m *EvtStudentQuestion_CreateStudentQuestion) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *EvtStudentQuestion_CreateStudentQuestion) GetStudentQuestionId() string {
	if m != nil {
		return m.StudentQuestionId
	}
	return ""
}

func (m *EvtStudentQuestion_CreateStudentQuestion) GetQuizId() string {
	if m != nil {
		return m.QuizId
	}
	return ""
}

func (m *EvtStudentQuestion_CreateStudentQuestion) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *EvtStudentQuestion_CreateStudentQuestion) GetUrlMedias() []string {
	if m != nil {
		return m.UrlMedias
	}
	return nil
}

func (m *EvtStudentQuestion_CreateStudentQuestion) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type EvtStudentQuestion_AllocateStudentQuestion struct {
	StudentQuestionId string `protobuf:"bytes,1,opt,name=student_question_id,json=studentQuestionId,proto3" json:"student_question_id,omitempty"`
	TutorId           string `protobuf:"bytes,2,opt,name=tutor_id,json=tutorId,proto3" json:"tutor_id,omitempty"`
	NotificationTitle string `protobuf:"bytes,3,opt,name=notification_title,json=notificationTitle,proto3" json:"notification_title,omitempty"`
	NotificationBody  string `protobuf:"bytes,4,opt,name=notification_body,json=notificationBody,proto3" json:"notification_body,omitempty"`
}

func (m *EvtStudentQuestion_AllocateStudentQuestion) Reset() {
	*m = EvtStudentQuestion_AllocateStudentQuestion{}
}
func (*EvtStudentQuestion_AllocateStudentQuestion) ProtoMessage() {}
func (*EvtStudentQuestion_AllocateStudentQuestion) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{0, 1}
}
func (m *EvtStudentQuestion_AllocateStudentQuestion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvtStudentQuestion_AllocateStudentQuestion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvtStudentQuestion_AllocateStudentQuestion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvtStudentQuestion_AllocateStudentQuestion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvtStudentQuestion_AllocateStudentQuestion.Merge(m, src)
}
func (m *EvtStudentQuestion_AllocateStudentQuestion) XXX_Size() int {
	return m.Size()
}
func (m *EvtStudentQuestion_AllocateStudentQuestion) XXX_DiscardUnknown() {
	xxx_messageInfo_EvtStudentQuestion_AllocateStudentQuestion.DiscardUnknown(m)
}

var xxx_messageInfo_EvtStudentQuestion_AllocateStudentQuestion proto.InternalMessageInfo

func (m *EvtStudentQuestion_AllocateStudentQuestion) GetStudentQuestionId() string {
	if m != nil {
		return m.StudentQuestionId
	}
	return ""
}

func (m *EvtStudentQuestion_AllocateStudentQuestion) GetTutorId() string {
	if m != nil {
		return m.TutorId
	}
	return ""
}

func (m *EvtStudentQuestion_AllocateStudentQuestion) GetNotificationTitle() string {
	if m != nil {
		return m.NotificationTitle
	}
	return ""
}

func (m *EvtStudentQuestion_AllocateStudentQuestion) GetNotificationBody() string {
	if m != nil {
		return m.NotificationBody
	}
	return ""
}

type EvtStudentQuestion_EventMessageChat struct {
	StudentQuestionId string `protobuf:"bytes,1,opt,name=student_question_id,json=studentQuestionId,proto3" json:"student_question_id,omitempty"`
	Content           string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	NotificationTitle string `protobuf:"bytes,3,opt,name=notification_title,json=notificationTitle,proto3" json:"notification_title,omitempty"`
	NotificationBody  string `protobuf:"bytes,4,opt,name=notification_body,json=notificationBody,proto3" json:"notification_body,omitempty"`
}

func (m *EvtStudentQuestion_EventMessageChat) Reset()      { *m = EvtStudentQuestion_EventMessageChat{} }
func (*EvtStudentQuestion_EventMessageChat) ProtoMessage() {}
func (*EvtStudentQuestion_EventMessageChat) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{0, 2}
}
func (m *EvtStudentQuestion_EventMessageChat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvtStudentQuestion_EventMessageChat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvtStudentQuestion_EventMessageChat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvtStudentQuestion_EventMessageChat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvtStudentQuestion_EventMessageChat.Merge(m, src)
}
func (m *EvtStudentQuestion_EventMessageChat) XXX_Size() int {
	return m.Size()
}
func (m *EvtStudentQuestion_EventMessageChat) XXX_DiscardUnknown() {
	xxx_messageInfo_EvtStudentQuestion_EventMessageChat.DiscardUnknown(m)
}

var xxx_messageInfo_EvtStudentQuestion_EventMessageChat proto.InternalMessageInfo

func (m *EvtStudentQuestion_EventMessageChat) GetStudentQuestionId() string {
	if m != nil {
		return m.StudentQuestionId
	}
	return ""
}

func (m *EvtStudentQuestion_EventMessageChat) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *EvtStudentQuestion_EventMessageChat) GetNotificationTitle() string {
	if m != nil {
		return m.NotificationTitle
	}
	return ""
}

func (m *EvtStudentQuestion_EventMessageChat) GetNotificationBody() string {
	if m != nil {
		return m.NotificationBody
	}
	return ""
}

type EvtStudentQuestion_EventArchivedQuestion struct {
	StudentQuestionId string `protobuf:"bytes,1,opt,name=student_question_id,json=studentQuestionId,proto3" json:"student_question_id,omitempty"`
}

func (m *EvtStudentQuestion_EventArchivedQuestion) Reset() {
	*m = EvtStudentQuestion_EventArchivedQuestion{}
}
func (*EvtStudentQuestion_EventArchivedQuestion) ProtoMessage() {}
func (*EvtStudentQuestion_EventArchivedQuestion) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{0, 3}
}
func (m *EvtStudentQuestion_EventArchivedQuestion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvtStudentQuestion_EventArchivedQuestion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvtStudentQuestion_EventArchivedQuestion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvtStudentQuestion_EventArchivedQuestion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvtStudentQuestion_EventArchivedQuestion.Merge(m, src)
}
func (m *EvtStudentQuestion_EventArchivedQuestion) XXX_Size() int {
	return m.Size()
}
func (m *EvtStudentQuestion_EventArchivedQuestion) XXX_DiscardUnknown() {
	xxx_messageInfo_EvtStudentQuestion_EventArchivedQuestion.DiscardUnknown(m)
}

var xxx_messageInfo_EvtStudentQuestion_EventArchivedQuestion proto.InternalMessageInfo

func (m *EvtStudentQuestion_EventArchivedQuestion) GetStudentQuestionId() string {
	if m != nil {
		return m.StudentQuestionId
	}
	return ""
}

type EvtAllocateStudentQuestion struct {
	StudentQuestionId string `protobuf:"bytes,1,opt,name=student_question_id,json=studentQuestionId,proto3" json:"student_question_id,omitempty"`
}

func (m *EvtAllocateStudentQuestion) Reset()      { *m = EvtAllocateStudentQuestion{} }
func (*EvtAllocateStudentQuestion) ProtoMessage() {}
func (*EvtAllocateStudentQuestion) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{1}
}
func (m *EvtAllocateStudentQuestion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvtAllocateStudentQuestion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvtAllocateStudentQuestion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvtAllocateStudentQuestion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvtAllocateStudentQuestion.Merge(m, src)
}
func (m *EvtAllocateStudentQuestion) XXX_Size() int {
	return m.Size()
}
func (m *EvtAllocateStudentQuestion) XXX_DiscardUnknown() {
	xxx_messageInfo_EvtAllocateStudentQuestion.DiscardUnknown(m)
}

var xxx_messageInfo_EvtAllocateStudentQuestion proto.InternalMessageInfo

func (m *EvtAllocateStudentQuestion) GetStudentQuestionId() string {
	if m != nil {
		return m.StudentQuestionId
	}
	return ""
}

type RetryWithDelayEvent struct {
	When *types.Timestamp `protobuf:"bytes,1,opt,name=when,proto3" json:"when,omitempty"`
	// Types that are valid to be assigned to Message:
	//	*RetryWithDelayEvent_EvtAllocateStudentQuestion
	Message isRetryWithDelayEvent_Message `protobuf_oneof:"message"`
}

func (m *RetryWithDelayEvent) Reset()      { *m = RetryWithDelayEvent{} }
func (*RetryWithDelayEvent) ProtoMessage() {}
func (*RetryWithDelayEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{2}
}
func (m *RetryWithDelayEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetryWithDelayEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetryWithDelayEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetryWithDelayEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetryWithDelayEvent.Merge(m, src)
}
func (m *RetryWithDelayEvent) XXX_Size() int {
	return m.Size()
}
func (m *RetryWithDelayEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_RetryWithDelayEvent.DiscardUnknown(m)
}

var xxx_messageInfo_RetryWithDelayEvent proto.InternalMessageInfo

type isRetryWithDelayEvent_Message interface {
	isRetryWithDelayEvent_Message()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type RetryWithDelayEvent_EvtAllocateStudentQuestion struct {
	EvtAllocateStudentQuestion *EvtAllocateStudentQuestion `protobuf:"bytes,2,opt,name=evt_allocate_student_question,json=evtAllocateStudentQuestion,proto3,oneof" json:"evt_allocate_student_question,omitempty"`
}

func (*RetryWithDelayEvent_EvtAllocateStudentQuestion) isRetryWithDelayEvent_Message() {}

func (m *RetryWithDelayEvent) GetMessage() isRetryWithDelayEvent_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *RetryWithDelayEvent) GetWhen() *types.Timestamp {
	if m != nil {
		return m.When
	}
	return nil
}

func (m *RetryWithDelayEvent) GetEvtAllocateStudentQuestion() *EvtAllocateStudentQuestion {
	if x, ok := m.GetMessage().(*RetryWithDelayEvent_EvtAllocateStudentQuestion); ok {
		return x.EvtAllocateStudentQuestion
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*RetryWithDelayEvent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*RetryWithDelayEvent_EvtAllocateStudentQuestion)(nil),
	}
}

type EvtCoachAuto struct {
	Event     CoachAutoEvent `protobuf:"varint,1,opt,name=event,proto3,enum=manabie.bob.CoachAutoEvent" json:"event,omitempty"`
	StudentId string         `protobuf:"bytes,2,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	Content   string         `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *EvtCoachAuto) Reset()      { *m = EvtCoachAuto{} }
func (*EvtCoachAuto) ProtoMessage() {}
func (*EvtCoachAuto) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{3}
}
func (m *EvtCoachAuto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvtCoachAuto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvtCoachAuto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvtCoachAuto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvtCoachAuto.Merge(m, src)
}
func (m *EvtCoachAuto) XXX_Size() int {
	return m.Size()
}
func (m *EvtCoachAuto) XXX_DiscardUnknown() {
	xxx_messageInfo_EvtCoachAuto.DiscardUnknown(m)
}

var xxx_messageInfo_EvtCoachAuto proto.InternalMessageInfo

func (m *EvtCoachAuto) GetEvent() CoachAutoEvent {
	if m != nil {
		return m.Event
	}
	return COACH_AUTO_EVENT_FINISH_FIRST_LO
}

func (m *EvtCoachAuto) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *EvtCoachAuto) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type StudentLearning struct {
	StudentId   string               `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	Event       StudentLearningEvent `protobuf:"varint,2,opt,name=event,proto3,enum=manabie.bob.StudentLearningEvent" json:"event,omitempty"`
	PromotionId int32                `protobuf:"varint,3,opt,name=promotion_id,json=promotionId,proto3" json:"promotion_id,omitempty"`
}

func (m *StudentLearning) Reset()      { *m = StudentLearning{} }
func (*StudentLearning) ProtoMessage() {}
func (*StudentLearning) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{4}
}
func (m *StudentLearning) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StudentLearning) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StudentLearning.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StudentLearning) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudentLearning.Merge(m, src)
}
func (m *StudentLearning) XXX_Size() int {
	return m.Size()
}
func (m *StudentLearning) XXX_DiscardUnknown() {
	xxx_messageInfo_StudentLearning.DiscardUnknown(m)
}

var xxx_messageInfo_StudentLearning proto.InternalMessageInfo

func (m *StudentLearning) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *StudentLearning) GetEvent() StudentLearningEvent {
	if m != nil {
		return m.Event
	}
	return STUDENT_FINISH_FIRST_THREE_LO_EVENT
}

func (m *StudentLearning) GetPromotionId() int32 {
	if m != nil {
		return m.PromotionId
	}
	return 0
}

type EvtClassRoom struct {
	// Types that are valid to be assigned to Message:
	//	*EvtClassRoom_CreateClass_
	//	*EvtClassRoom_JoinClass_
	//	*EvtClassRoom_LeaveClass_
	//	*EvtClassRoom_EditClass_
	//	*EvtClassRoom_ActiveConversation_
	Message isEvtClassRoom_Message `protobuf_oneof:"message"`
}

func (m *EvtClassRoom) Reset()      { *m = EvtClassRoom{} }
func (*EvtClassRoom) ProtoMessage() {}
func (*EvtClassRoom) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{5}
}
func (m *EvtClassRoom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvtClassRoom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvtClassRoom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvtClassRoom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvtClassRoom.Merge(m, src)
}
func (m *EvtClassRoom) XXX_Size() int {
	return m.Size()
}
func (m *EvtClassRoom) XXX_DiscardUnknown() {
	xxx_messageInfo_EvtClassRoom.DiscardUnknown(m)
}

var xxx_messageInfo_EvtClassRoom proto.InternalMessageInfo

type isEvtClassRoom_Message interface {
	isEvtClassRoom_Message()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type EvtClassRoom_CreateClass_ struct {
	CreateClass *EvtClassRoom_CreateClass `protobuf:"bytes,1,opt,name=create_class,json=createClass,proto3,oneof" json:"create_class,omitempty"`
}
type EvtClassRoom_JoinClass_ struct {
	JoinClass *EvtClassRoom_JoinClass `protobuf:"bytes,2,opt,name=join_class,json=joinClass,proto3,oneof" json:"join_class,omitempty"`
}
type EvtClassRoom_LeaveClass_ struct {
	LeaveClass *EvtClassRoom_LeaveClass `protobuf:"bytes,3,opt,name=leave_class,json=leaveClass,proto3,oneof" json:"leave_class,omitempty"`
}
type EvtClassRoom_EditClass_ struct {
	EditClass *EvtClassRoom_EditClass `protobuf:"bytes,4,opt,name=edit_class,json=editClass,proto3,oneof" json:"edit_class,omitempty"`
}
type EvtClassRoom_ActiveConversation_ struct {
	ActiveConversation *EvtClassRoom_ActiveConversation `protobuf:"bytes,5,opt,name=active_conversation,json=activeConversation,proto3,oneof" json:"active_conversation,omitempty"`
}

func (*EvtClassRoom_CreateClass_) isEvtClassRoom_Message()        {}
func (*EvtClassRoom_JoinClass_) isEvtClassRoom_Message()          {}
func (*EvtClassRoom_LeaveClass_) isEvtClassRoom_Message()         {}
func (*EvtClassRoom_EditClass_) isEvtClassRoom_Message()          {}
func (*EvtClassRoom_ActiveConversation_) isEvtClassRoom_Message() {}

func (m *EvtClassRoom) GetMessage() isEvtClassRoom_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *EvtClassRoom) GetCreateClass() *EvtClassRoom_CreateClass {
	if x, ok := m.GetMessage().(*EvtClassRoom_CreateClass_); ok {
		return x.CreateClass
	}
	return nil
}

func (m *EvtClassRoom) GetJoinClass() *EvtClassRoom_JoinClass {
	if x, ok := m.GetMessage().(*EvtClassRoom_JoinClass_); ok {
		return x.JoinClass
	}
	return nil
}

func (m *EvtClassRoom) GetLeaveClass() *EvtClassRoom_LeaveClass {
	if x, ok := m.GetMessage().(*EvtClassRoom_LeaveClass_); ok {
		return x.LeaveClass
	}
	return nil
}

func (m *EvtClassRoom) GetEditClass() *EvtClassRoom_EditClass {
	if x, ok := m.GetMessage().(*EvtClassRoom_EditClass_); ok {
		return x.EditClass
	}
	return nil
}

func (m *EvtClassRoom) GetActiveConversation() *EvtClassRoom_ActiveConversation {
	if x, ok := m.GetMessage().(*EvtClassRoom_ActiveConversation_); ok {
		return x.ActiveConversation
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*EvtClassRoom) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*EvtClassRoom_CreateClass_)(nil),
		(*EvtClassRoom_JoinClass_)(nil),
		(*EvtClassRoom_LeaveClass_)(nil),
		(*EvtClassRoom_EditClass_)(nil),
		(*EvtClassRoom_ActiveConversation_)(nil),
	}
}

type EvtClassRoom_CreateClass struct {
	ClassId    int32    `protobuf:"varint,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	TeacherId  string   `protobuf:"bytes,2,opt,name=teacher_id,json=teacherId,proto3" json:"teacher_id,omitempty"`
	ClassName  string   `protobuf:"bytes,3,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	TeacherIds []string `protobuf:"bytes,4,rep,name=teacher_ids,json=teacherIds,proto3" json:"teacher_ids,omitempty"`
}

func (m *EvtClassRoom_CreateClass) Reset()      { *m = EvtClassRoom_CreateClass{} }
func (*EvtClassRoom_CreateClass) ProtoMessage() {}
func (*EvtClassRoom_CreateClass) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{5, 0}
}
func (m *EvtClassRoom_CreateClass) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvtClassRoom_CreateClass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvtClassRoom_CreateClass.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvtClassRoom_CreateClass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvtClassRoom_CreateClass.Merge(m, src)
}
func (m *EvtClassRoom_CreateClass) XXX_Size() int {
	return m.Size()
}
func (m *EvtClassRoom_CreateClass) XXX_DiscardUnknown() {
	xxx_messageInfo_EvtClassRoom_CreateClass.DiscardUnknown(m)
}

var xxx_messageInfo_EvtClassRoom_CreateClass proto.InternalMessageInfo

func (m *EvtClassRoom_CreateClass) GetClassId() int32 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

func (m *EvtClassRoom_CreateClass) GetTeacherId() string {
	if m != nil {
		return m.TeacherId
	}
	return ""
}

func (m *EvtClassRoom_CreateClass) GetClassName() string {
	if m != nil {
		return m.ClassName
	}
	return ""
}

func (m *EvtClassRoom_CreateClass) GetTeacherIds() []string {
	if m != nil {
		return m.TeacherIds
	}
	return nil
}

type EvtClassRoom_JoinClass struct {
	ClassId   int32     `protobuf:"varint,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	UserId    string    `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserGroup UserGroup `protobuf:"varint,3,opt,name=user_group,json=userGroup,proto3,enum=manabie.bob.UserGroup" json:"user_group,omitempty"`
}

func (m *EvtClassRoom_JoinClass) Reset()      { *m = EvtClassRoom_JoinClass{} }
func (*EvtClassRoom_JoinClass) ProtoMessage() {}
func (*EvtClassRoom_JoinClass) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{5, 1}
}
func (m *EvtClassRoom_JoinClass) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvtClassRoom_JoinClass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvtClassRoom_JoinClass.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvtClassRoom_JoinClass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvtClassRoom_JoinClass.Merge(m, src)
}
func (m *EvtClassRoom_JoinClass) XXX_Size() int {
	return m.Size()
}
func (m *EvtClassRoom_JoinClass) XXX_DiscardUnknown() {
	xxx_messageInfo_EvtClassRoom_JoinClass.DiscardUnknown(m)
}

var xxx_messageInfo_EvtClassRoom_JoinClass proto.InternalMessageInfo

func (m *EvtClassRoom_JoinClass) GetClassId() int32 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

func (m *EvtClassRoom_JoinClass) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *EvtClassRoom_JoinClass) GetUserGroup() UserGroup {
	if m != nil {
		return m.UserGroup
	}
	return USER_GROUP_NONE
}

type EvtClassRoom_LeaveClass struct {
	ClassId  int32    `protobuf:"varint,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	UserIds  []string `protobuf:"bytes,2,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	IsKicked bool     `protobuf:"varint,3,opt,name=is_kicked,json=isKicked,proto3" json:"is_kicked,omitempty"`
}

func (m *EvtClassRoom_LeaveClass) Reset()      { *m = EvtClassRoom_LeaveClass{} }
func (*EvtClassRoom_LeaveClass) ProtoMessage() {}
func (*EvtClassRoom_LeaveClass) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{5, 2}
}
func (m *EvtClassRoom_LeaveClass) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvtClassRoom_LeaveClass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvtClassRoom_LeaveClass.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvtClassRoom_LeaveClass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvtClassRoom_LeaveClass.Merge(m, src)
}
func (m *EvtClassRoom_LeaveClass) XXX_Size() int {
	return m.Size()
}
func (m *EvtClassRoom_LeaveClass) XXX_DiscardUnknown() {
	xxx_messageInfo_EvtClassRoom_LeaveClass.DiscardUnknown(m)
}

var xxx_messageInfo_EvtClassRoom_LeaveClass proto.InternalMessageInfo

func (m *EvtClassRoom_LeaveClass) GetClassId() int32 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

func (m *EvtClassRoom_LeaveClass) GetUserIds() []string {
	if m != nil {
		return m.UserIds
	}
	return nil
}

func (m *EvtClassRoom_LeaveClass) GetIsKicked() bool {
	if m != nil {
		return m.IsKicked
	}
	return false
}

type EvtClassRoom_EditClass struct {
	ClassId   int32  `protobuf:"varint,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	ClassName string `protobuf:"bytes,2,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
}

func (m *EvtClassRoom_EditClass) Reset()      { *m = EvtClassRoom_EditClass{} }
func (*EvtClassRoom_EditClass) ProtoMessage() {}
func (*EvtClassRoom_EditClass) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{5, 3}
}
func (m *EvtClassRoom_EditClass) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvtClassRoom_EditClass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvtClassRoom_EditClass.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvtClassRoom_EditClass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvtClassRoom_EditClass.Merge(m, src)
}
func (m *EvtClassRoom_EditClass) XXX_Size() int {
	return m.Size()
}
func (m *EvtClassRoom_EditClass) XXX_DiscardUnknown() {
	xxx_messageInfo_EvtClassRoom_EditClass.DiscardUnknown(m)
}

var xxx_messageInfo_EvtClassRoom_EditClass proto.InternalMessageInfo

func (m *EvtClassRoom_EditClass) GetClassId() int32 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

func (m *EvtClassRoom_EditClass) GetClassName() string {
	if m != nil {
		return m.ClassName
	}
	return ""
}

type EvtClassRoom_ActiveConversation struct {
	ClassId int32 `protobuf:"varint,1,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	Active  bool  `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
}

func (m *EvtClassRoom_ActiveConversation) Reset()      { *m = EvtClassRoom_ActiveConversation{} }
func (*EvtClassRoom_ActiveConversation) ProtoMessage() {}
func (*EvtClassRoom_ActiveConversation) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{5, 4}
}
func (m *EvtClassRoom_ActiveConversation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvtClassRoom_ActiveConversation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvtClassRoom_ActiveConversation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvtClassRoom_ActiveConversation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvtClassRoom_ActiveConversation.Merge(m, src)
}
func (m *EvtClassRoom_ActiveConversation) XXX_Size() int {
	return m.Size()
}
func (m *EvtClassRoom_ActiveConversation) XXX_DiscardUnknown() {
	xxx_messageInfo_EvtClassRoom_ActiveConversation.DiscardUnknown(m)
}

var xxx_messageInfo_EvtClassRoom_ActiveConversation proto.InternalMessageInfo

func (m *EvtClassRoom_ActiveConversation) GetClassId() int32 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

func (m *EvtClassRoom_ActiveConversation) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type EvtLesson struct {
	// Types that are valid to be assigned to Message:
	//	*EvtLesson_CreateLessons_
	//	*EvtLesson_JoinLesson_
	//	*EvtLesson_UpdateLesson_
	//	*EvtLesson_LeaveLesson_
	//	*EvtLesson_EndLiveLesson_
	Message isEvtLesson_Message `protobuf_oneof:"message"`
}

func (m *EvtLesson) Reset()      { *m = EvtLesson{} }
func (*EvtLesson) ProtoMessage() {}
func (*EvtLesson) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{6}
}
func (m *EvtLesson) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvtLesson) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvtLesson.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvtLesson) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvtLesson.Merge(m, src)
}
func (m *EvtLesson) XXX_Size() int {
	return m.Size()
}
func (m *EvtLesson) XXX_DiscardUnknown() {
	xxx_messageInfo_EvtLesson.DiscardUnknown(m)
}

var xxx_messageInfo_EvtLesson proto.InternalMessageInfo

type isEvtLesson_Message interface {
	isEvtLesson_Message()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type EvtLesson_CreateLessons_ struct {
	CreateLessons *EvtLesson_CreateLessons `protobuf:"bytes,1,opt,name=create_lessons,json=createLessons,proto3,oneof" json:"create_lessons,omitempty"`
}
type EvtLesson_JoinLesson_ struct {
	JoinLesson *EvtLesson_JoinLesson `protobuf:"bytes,2,opt,name=join_lesson,json=joinLesson,proto3,oneof" json:"join_lesson,omitempty"`
}
type EvtLesson_UpdateLesson_ struct {
	UpdateLesson *EvtLesson_UpdateLesson `protobuf:"bytes,3,opt,name=update_lesson,json=updateLesson,proto3,oneof" json:"update_lesson,omitempty"`
}
type EvtLesson_LeaveLesson_ struct {
	LeaveLesson *EvtLesson_LeaveLesson `protobuf:"bytes,4,opt,name=leave_lesson,json=leaveLesson,proto3,oneof" json:"leave_lesson,omitempty"`
}
type EvtLesson_EndLiveLesson_ struct {
	EndLiveLesson *EvtLesson_EndLiveLesson `protobuf:"bytes,5,opt,name=end_live_lesson,json=endLiveLesson,proto3,oneof" json:"end_live_lesson,omitempty"`
}

func (*EvtLesson_CreateLessons_) isEvtLesson_Message() {}
func (*EvtLesson_JoinLesson_) isEvtLesson_Message()    {}
func (*EvtLesson_UpdateLesson_) isEvtLesson_Message()  {}
func (*EvtLesson_LeaveLesson_) isEvtLesson_Message()   {}
func (*EvtLesson_EndLiveLesson_) isEvtLesson_Message() {}

func (m *EvtLesson) GetMessage() isEvtLesson_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *EvtLesson) GetCreateLessons() *EvtLesson_CreateLessons {
	if x, ok := m.GetMessage().(*EvtLesson_CreateLessons_); ok {
		return x.CreateLessons
	}
	return nil
}

func (m *EvtLesson) GetJoinLesson() *EvtLesson_JoinLesson {
	if x, ok := m.GetMessage().(*EvtLesson_JoinLesson_); ok {
		return x.JoinLesson
	}
	return nil
}

func (m *EvtLesson) GetUpdateLesson() *EvtLesson_UpdateLesson {
	if x, ok := m.GetMessage().(*EvtLesson_UpdateLesson_); ok {
		return x.UpdateLesson
	}
	return nil
}

func (m *EvtLesson) GetLeaveLesson() *EvtLesson_LeaveLesson {
	if x, ok := m.GetMessage().(*EvtLesson_LeaveLesson_); ok {
		return x.LeaveLesson
	}
	return nil
}

func (m *EvtLesson) GetEndLiveLesson() *EvtLesson_EndLiveLesson {
	if x, ok := m.GetMessage().(*EvtLesson_EndLiveLesson_); ok {
		return x.EndLiveLesson
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*EvtLesson) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*EvtLesson_CreateLessons_)(nil),
		(*EvtLesson_JoinLesson_)(nil),
		(*EvtLesson_UpdateLesson_)(nil),
		(*EvtLesson_LeaveLesson_)(nil),
		(*EvtLesson_EndLiveLesson_)(nil),
	}
}

type EvtLesson_Lesson struct {
	LessonId   string   `protobuf:"bytes,1,opt,name=lesson_id,json=lessonId,proto3" json:"lesson_id,omitempty"`
	Name       string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	LearnerIds []string `protobuf:"bytes,3,rep,name=learner_ids,json=learnerIds,proto3" json:"learner_ids,omitempty"`
}

func (m *EvtLesson_Lesson) Reset()      { *m = EvtLesson_Lesson{} }
func (*EvtLesson_Lesson) ProtoMessage() {}
func (*EvtLesson_Lesson) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{6, 0}
}
func (m *EvtLesson_Lesson) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvtLesson_Lesson) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvtLesson_Lesson.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvtLesson_Lesson) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvtLesson_Lesson.Merge(m, src)
}
func (m *EvtLesson_Lesson) XXX_Size() int {
	return m.Size()
}
func (m *EvtLesson_Lesson) XXX_DiscardUnknown() {
	xxx_messageInfo_EvtLesson_Lesson.DiscardUnknown(m)
}

var xxx_messageInfo_EvtLesson_Lesson proto.InternalMessageInfo

func (m *EvtLesson_Lesson) GetLessonId() string {
	if m != nil {
		return m.LessonId
	}
	return ""
}

func (m *EvtLesson_Lesson) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EvtLesson_Lesson) GetLearnerIds() []string {
	if m != nil {
		return m.LearnerIds
	}
	return nil
}

type EvtLesson_CreateLessons struct {
	Lessons []*EvtLesson_Lesson `protobuf:"bytes,1,rep,name=lessons,proto3" json:"lessons,omitempty"`
}

func (m *EvtLesson_CreateLessons) Reset()      { *m = EvtLesson_CreateLessons{} }
func (*EvtLesson_CreateLessons) ProtoMessage() {}
func (*EvtLesson_CreateLessons) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{6, 1}
}
func (m *EvtLesson_CreateLessons) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvtLesson_CreateLessons) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvtLesson_CreateLessons.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvtLesson_CreateLessons) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvtLesson_CreateLessons.Merge(m, src)
}
func (m *EvtLesson_CreateLessons) XXX_Size() int {
	return m.Size()
}
func (m *EvtLesson_CreateLessons) XXX_DiscardUnknown() {
	xxx_messageInfo_EvtLesson_CreateLessons.DiscardUnknown(m)
}

var xxx_messageInfo_EvtLesson_CreateLessons proto.InternalMessageInfo

func (m *EvtLesson_CreateLessons) GetLessons() []*EvtLesson_Lesson {
	if m != nil {
		return m.Lessons
	}
	return nil
}

type EvtLesson_JoinLesson struct {
	LessonId  string    `protobuf:"bytes,1,opt,name=lesson_id,json=lessonId,proto3" json:"lesson_id,omitempty"`
	UserId    string    `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserGroup UserGroup `protobuf:"varint,3,opt,name=user_group,json=userGroup,proto3,enum=manabie.bob.UserGroup" json:"user_group,omitempty"`
}

func (m *EvtLesson_JoinLesson) Reset()      { *m = EvtLesson_JoinLesson{} }
func (*EvtLesson_JoinLesson) ProtoMessage() {}
func (*EvtLesson_JoinLesson) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{6, 2}
}
func (m *EvtLesson_JoinLesson) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvtLesson_JoinLesson) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvtLesson_JoinLesson.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvtLesson_JoinLesson) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvtLesson_JoinLesson.Merge(m, src)
}
func (m *EvtLesson_JoinLesson) XXX_Size() int {
	return m.Size()
}
func (m *EvtLesson_JoinLesson) XXX_DiscardUnknown() {
	xxx_messageInfo_EvtLesson_JoinLesson.DiscardUnknown(m)
}

var xxx_messageInfo_EvtLesson_JoinLesson proto.InternalMessageInfo

func (m *EvtLesson_JoinLesson) GetLessonId() string {
	if m != nil {
		return m.LessonId
	}
	return ""
}

func (m *EvtLesson_JoinLesson) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *EvtLesson_JoinLesson) GetUserGroup() UserGroup {
	if m != nil {
		return m.UserGroup
	}
	return USER_GROUP_NONE
}

type EvtLesson_UpdateLesson struct {
	LessonId   string   `protobuf:"bytes,1,opt,name=lesson_id,json=lessonId,proto3" json:"lesson_id,omitempty"`
	ClassName  string   `protobuf:"bytes,2,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	LearnerIds []string `protobuf:"bytes,3,rep,name=learner_ids,json=learnerIds,proto3" json:"learner_ids,omitempty"`
}

func (m *EvtLesson_UpdateLesson) Reset()      { *m = EvtLesson_UpdateLesson{} }
func (*EvtLesson_UpdateLesson) ProtoMessage() {}
func (*EvtLesson_UpdateLesson) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{6, 3}
}
func (m *EvtLesson_UpdateLesson) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvtLesson_UpdateLesson) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvtLesson_UpdateLesson.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvtLesson_UpdateLesson) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvtLesson_UpdateLesson.Merge(m, src)
}
func (m *EvtLesson_UpdateLesson) XXX_Size() int {
	return m.Size()
}
func (m *EvtLesson_UpdateLesson) XXX_DiscardUnknown() {
	xxx_messageInfo_EvtLesson_UpdateLesson.DiscardUnknown(m)
}

var xxx_messageInfo_EvtLesson_UpdateLesson proto.InternalMessageInfo

func (m *EvtLesson_UpdateLesson) GetLessonId() string {
	if m != nil {
		return m.LessonId
	}
	return ""
}

func (m *EvtLesson_UpdateLesson) GetClassName() string {
	if m != nil {
		return m.ClassName
	}
	return ""
}

func (m *EvtLesson_UpdateLesson) GetLearnerIds() []string {
	if m != nil {
		return m.LearnerIds
	}
	return nil
}

type EvtLesson_LeaveLesson struct {
	LessonId string `protobuf:"bytes,1,opt,name=lesson_id,json=lessonId,proto3" json:"lesson_id,omitempty"`
	UserId   string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *EvtLesson_LeaveLesson) Reset()      { *m = EvtLesson_LeaveLesson{} }
func (*EvtLesson_LeaveLesson) ProtoMessage() {}
func (*EvtLesson_LeaveLesson) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{6, 4}
}
func (m *EvtLesson_LeaveLesson) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvtLesson_LeaveLesson) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvtLesson_LeaveLesson.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvtLesson_LeaveLesson) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvtLesson_LeaveLesson.Merge(m, src)
}
func (m *EvtLesson_LeaveLesson) XXX_Size() int {
	return m.Size()
}
func (m *EvtLesson_LeaveLesson) XXX_DiscardUnknown() {
	xxx_messageInfo_EvtLesson_LeaveLesson.DiscardUnknown(m)
}

var xxx_messageInfo_EvtLesson_LeaveLesson proto.InternalMessageInfo

func (m *EvtLesson_LeaveLesson) GetLessonId() string {
	if m != nil {
		return m.LessonId
	}
	return ""
}

func (m *EvtLesson_LeaveLesson) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type EvtLesson_EndLiveLesson struct {
	LessonId string `protobuf:"bytes,1,opt,name=lesson_id,json=lessonId,proto3" json:"lesson_id,omitempty"`
	UserId   string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (m *EvtLesson_EndLiveLesson) Reset()      { *m = EvtLesson_EndLiveLesson{} }
func (*EvtLesson_EndLiveLesson) ProtoMessage() {}
func (*EvtLesson_EndLiveLesson) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{6, 5}
}
func (m *EvtLesson_EndLiveLesson) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvtLesson_EndLiveLesson) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvtLesson_EndLiveLesson.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvtLesson_EndLiveLesson) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvtLesson_EndLiveLesson.Merge(m, src)
}
func (m *EvtLesson_EndLiveLesson) XXX_Size() int {
	return m.Size()
}
func (m *EvtLesson_EndLiveLesson) XXX_DiscardUnknown() {
	xxx_messageInfo_EvtLesson_EndLiveLesson.DiscardUnknown(m)
}

var xxx_messageInfo_EvtLesson_EndLiveLesson proto.InternalMessageInfo

func (m *EvtLesson_EndLiveLesson) GetLessonId() string {
	if m != nil {
		return m.LessonId
	}
	return ""
}

func (m *EvtLesson_EndLiveLesson) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

type EvtUserInfo struct {
	UserId            string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DeviceToken       string `protobuf:"bytes,2,opt,name=device_token,json=deviceToken,proto3" json:"device_token,omitempty"`
	AllowNotification bool   `protobuf:"varint,3,opt,name=allow_notification,json=allowNotification,proto3" json:"allow_notification,omitempty"`
	Name              string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *EvtUserInfo) Reset()      { *m = EvtUserInfo{} }
func (*EvtUserInfo) ProtoMessage() {}
func (*EvtUserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{7}
}
func (m *EvtUserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EvtUserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EvtUserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EvtUserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EvtUserInfo.Merge(m, src)
}
func (m *EvtUserInfo) XXX_Size() int {
	return m.Size()
}
func (m *EvtUserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_EvtUserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_EvtUserInfo proto.InternalMessageInfo

func (m *EvtUserInfo) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *EvtUserInfo) GetDeviceToken() string {
	if m != nil {
		return m.DeviceToken
	}
	return ""
}

func (m *EvtUserInfo) GetAllowNotification() bool {
	if m != nil {
		return m.AllowNotification
	}
	return false
}

func (m *EvtUserInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ProcessAllocateStudentQuestionRequest struct {
	Limit uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *ProcessAllocateStudentQuestionRequest) Reset()      { *m = ProcessAllocateStudentQuestionRequest{} }
func (*ProcessAllocateStudentQuestionRequest) ProtoMessage() {}
func (*ProcessAllocateStudentQuestionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{8}
}
func (m *ProcessAllocateStudentQuestionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessAllocateStudentQuestionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessAllocateStudentQuestionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessAllocateStudentQuestionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessAllocateStudentQuestionRequest.Merge(m, src)
}
func (m *ProcessAllocateStudentQuestionRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProcessAllocateStudentQuestionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessAllocateStudentQuestionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessAllocateStudentQuestionRequest proto.InternalMessageInfo

func (m *ProcessAllocateStudentQuestionRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type ProcessAllocateStudentQuestionResponse struct {
	TotalAllocated    uint32 `protobuf:"varint,1,opt,name=total_allocated,json=totalAllocated,proto3" json:"total_allocated,omitempty"`
	TotalNotAllocated uint32 `protobuf:"varint,2,opt,name=total_not_allocated,json=totalNotAllocated,proto3" json:"total_not_allocated,omitempty"`
}

func (m *ProcessAllocateStudentQuestionResponse) Reset() {
	*m = ProcessAllocateStudentQuestionResponse{}
}
func (*ProcessAllocateStudentQuestionResponse) ProtoMessage() {}
func (*ProcessAllocateStudentQuestionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{9}
}
func (m *ProcessAllocateStudentQuestionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessAllocateStudentQuestionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessAllocateStudentQuestionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessAllocateStudentQuestionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessAllocateStudentQuestionResponse.Merge(m, src)
}
func (m *ProcessAllocateStudentQuestionResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProcessAllocateStudentQuestionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessAllocateStudentQuestionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessAllocateStudentQuestionResponse proto.InternalMessageInfo

func (m *ProcessAllocateStudentQuestionResponse) GetTotalAllocated() uint32 {
	if m != nil {
		return m.TotalAllocated
	}
	return 0
}

func (m *ProcessAllocateStudentQuestionResponse) GetTotalNotAllocated() uint32 {
	if m != nil {
		return m.TotalNotAllocated
	}
	return 0
}

type ProcessArchivedStudentQuestionRequest struct {
	Limit    uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Duration string `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *ProcessArchivedStudentQuestionRequest) Reset()      { *m = ProcessArchivedStudentQuestionRequest{} }
func (*ProcessArchivedStudentQuestionRequest) ProtoMessage() {}
func (*ProcessArchivedStudentQuestionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{10}
}
func (m *ProcessArchivedStudentQuestionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessArchivedStudentQuestionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessArchivedStudentQuestionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessArchivedStudentQuestionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessArchivedStudentQuestionRequest.Merge(m, src)
}
func (m *ProcessArchivedStudentQuestionRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProcessArchivedStudentQuestionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessArchivedStudentQuestionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessArchivedStudentQuestionRequest proto.InternalMessageInfo

func (m *ProcessArchivedStudentQuestionRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ProcessArchivedStudentQuestionRequest) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

type ProcessArchivedStudentQuestionResponse struct {
	TotalStudentQuestions uint32 `protobuf:"varint,1,opt,name=total_student_questions,json=totalStudentQuestions,proto3" json:"total_student_questions,omitempty"`
}

func (m *ProcessArchivedStudentQuestionResponse) Reset() {
	*m = ProcessArchivedStudentQuestionResponse{}
}
func (*ProcessArchivedStudentQuestionResponse) ProtoMessage() {}
func (*ProcessArchivedStudentQuestionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{11}
}
func (m *ProcessArchivedStudentQuestionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessArchivedStudentQuestionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessArchivedStudentQuestionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessArchivedStudentQuestionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessArchivedStudentQuestionResponse.Merge(m, src)
}
func (m *ProcessArchivedStudentQuestionResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProcessArchivedStudentQuestionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessArchivedStudentQuestionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessArchivedStudentQuestionResponse proto.InternalMessageInfo

func (m *ProcessArchivedStudentQuestionResponse) GetTotalStudentQuestions() uint32 {
	if m != nil {
		return m.TotalStudentQuestions
	}
	return 0
}

type ProcessDisableProcessingStudentQuestionRequest struct {
	Duration string `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *ProcessDisableProcessingStudentQuestionRequest) Reset() {
	*m = ProcessDisableProcessingStudentQuestionRequest{}
}
func (*ProcessDisableProcessingStudentQuestionRequest) ProtoMessage() {}
func (*ProcessDisableProcessingStudentQuestionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{12}
}
func (m *ProcessDisableProcessingStudentQuestionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessDisableProcessingStudentQuestionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessDisableProcessingStudentQuestionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessDisableProcessingStudentQuestionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessDisableProcessingStudentQuestionRequest.Merge(m, src)
}
func (m *ProcessDisableProcessingStudentQuestionRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProcessDisableProcessingStudentQuestionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessDisableProcessingStudentQuestionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessDisableProcessingStudentQuestionRequest proto.InternalMessageInfo

func (m *ProcessDisableProcessingStudentQuestionRequest) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

type ProcessDisableProcessingStudentQuestionResponse struct {
	TotalStudentQuestions uint32 `protobuf:"varint,1,opt,name=total_student_questions,json=totalStudentQuestions,proto3" json:"total_student_questions,omitempty"`
}

func (m *ProcessDisableProcessingStudentQuestionResponse) Reset() {
	*m = ProcessDisableProcessingStudentQuestionResponse{}
}
func (*ProcessDisableProcessingStudentQuestionResponse) ProtoMessage() {}
func (*ProcessDisableProcessingStudentQuestionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{13}
}
func (m *ProcessDisableProcessingStudentQuestionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessDisableProcessingStudentQuestionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessDisableProcessingStudentQuestionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessDisableProcessingStudentQuestionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessDisableProcessingStudentQuestionResponse.Merge(m, src)
}
func (m *ProcessDisableProcessingStudentQuestionResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProcessDisableProcessingStudentQuestionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessDisableProcessingStudentQuestionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessDisableProcessingStudentQuestionResponse proto.InternalMessageInfo

func (m *ProcessDisableProcessingStudentQuestionResponse) GetTotalStudentQuestions() uint32 {
	if m != nil {
		return m.TotalStudentQuestions
	}
	return 0
}

type ProcessTimeOutSolvedStudentQuestionRequest struct {
	StudentQuestionIds []string `protobuf:"bytes,1,rep,name=student_question_ids,json=studentQuestionIds,proto3" json:"student_question_ids,omitempty"`
}

func (m *ProcessTimeOutSolvedStudentQuestionRequest) Reset() {
	*m = ProcessTimeOutSolvedStudentQuestionRequest{}
}
func (*ProcessTimeOutSolvedStudentQuestionRequest) ProtoMessage() {}
func (*ProcessTimeOutSolvedStudentQuestionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{14}
}
func (m *ProcessTimeOutSolvedStudentQuestionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessTimeOutSolvedStudentQuestionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessTimeOutSolvedStudentQuestionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessTimeOutSolvedStudentQuestionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessTimeOutSolvedStudentQuestionRequest.Merge(m, src)
}
func (m *ProcessTimeOutSolvedStudentQuestionRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProcessTimeOutSolvedStudentQuestionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessTimeOutSolvedStudentQuestionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessTimeOutSolvedStudentQuestionRequest proto.InternalMessageInfo

func (m *ProcessTimeOutSolvedStudentQuestionRequest) GetStudentQuestionIds() []string {
	if m != nil {
		return m.StudentQuestionIds
	}
	return nil
}

type ProcessTimeOutSolvedStudentQuestionResponse struct {
	TotalStudentQuestions uint32 `protobuf:"varint,1,opt,name=total_student_questions,json=totalStudentQuestions,proto3" json:"total_student_questions,omitempty"`
}

func (m *ProcessTimeOutSolvedStudentQuestionResponse) Reset() {
	*m = ProcessTimeOutSolvedStudentQuestionResponse{}
}
func (*ProcessTimeOutSolvedStudentQuestionResponse) ProtoMessage() {}
func (*ProcessTimeOutSolvedStudentQuestionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{15}
}
func (m *ProcessTimeOutSolvedStudentQuestionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessTimeOutSolvedStudentQuestionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessTimeOutSolvedStudentQuestionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessTimeOutSolvedStudentQuestionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessTimeOutSolvedStudentQuestionResponse.Merge(m, src)
}
func (m *ProcessTimeOutSolvedStudentQuestionResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProcessTimeOutSolvedStudentQuestionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessTimeOutSolvedStudentQuestionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessTimeOutSolvedStudentQuestionResponse proto.InternalMessageInfo

func (m *ProcessTimeOutSolvedStudentQuestionResponse) GetTotalStudentQuestions() uint32 {
	if m != nil {
		return m.TotalStudentQuestions
	}
	return 0
}

type ProcessTimeOutOrderRequest struct {
	Duration string         `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
	Gateway  PaymentGateway `protobuf:"varint,2,opt,name=gateway,proto3,enum=manabie.bob.PaymentGateway" json:"gateway,omitempty"`
	Status   OrderStatus    `protobuf:"varint,3,opt,name=status,proto3,enum=manabie.bob.OrderStatus" json:"status,omitempty"`
}

func (m *ProcessTimeOutOrderRequest) Reset()      { *m = ProcessTimeOutOrderRequest{} }
func (*ProcessTimeOutOrderRequest) ProtoMessage() {}
func (*ProcessTimeOutOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{16}
}
func (m *ProcessTimeOutOrderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessTimeOutOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessTimeOutOrderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessTimeOutOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessTimeOutOrderRequest.Merge(m, src)
}
func (m *ProcessTimeOutOrderRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProcessTimeOutOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessTimeOutOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessTimeOutOrderRequest proto.InternalMessageInfo

func (m *ProcessTimeOutOrderRequest) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *ProcessTimeOutOrderRequest) GetGateway() PaymentGateway {
	if m != nil {
		return m.Gateway
	}
	return GATEWAY_NONE
}

func (m *ProcessTimeOutOrderRequest) GetStatus() OrderStatus {
	if m != nil {
		return m.Status
	}
	return ORDER_STATUS_NONE
}

type ProcessTimeOutOrderResponse struct {
	OrderIds []int32 `protobuf:"varint,1,rep,packed,name=order_ids,json=orderIds,proto3" json:"order_ids,omitempty"`
}

func (m *ProcessTimeOutOrderResponse) Reset()      { *m = ProcessTimeOutOrderResponse{} }
func (*ProcessTimeOutOrderResponse) ProtoMessage() {}
func (*ProcessTimeOutOrderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{17}
}
func (m *ProcessTimeOutOrderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessTimeOutOrderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessTimeOutOrderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessTimeOutOrderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessTimeOutOrderResponse.Merge(m, src)
}
func (m *ProcessTimeOutOrderResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProcessTimeOutOrderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessTimeOutOrderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessTimeOutOrderResponse proto.InternalMessageInfo

func (m *ProcessTimeOutOrderResponse) GetOrderIds() []int32 {
	if m != nil {
		return m.OrderIds
	}
	return nil
}

type ProcessCancelCodOrderExpiredRequest struct {
	Limit    uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Duration string `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *ProcessCancelCodOrderExpiredRequest) Reset()      { *m = ProcessCancelCodOrderExpiredRequest{} }
func (*ProcessCancelCodOrderExpiredRequest) ProtoMessage() {}
func (*ProcessCancelCodOrderExpiredRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{18}
}
func (m *ProcessCancelCodOrderExpiredRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessCancelCodOrderExpiredRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessCancelCodOrderExpiredRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessCancelCodOrderExpiredRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessCancelCodOrderExpiredRequest.Merge(m, src)
}
func (m *ProcessCancelCodOrderExpiredRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProcessCancelCodOrderExpiredRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessCancelCodOrderExpiredRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessCancelCodOrderExpiredRequest proto.InternalMessageInfo

func (m *ProcessCancelCodOrderExpiredRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ProcessCancelCodOrderExpiredRequest) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

type ProcessCancelCodOrderExpiredResponse struct {
	TotalCodOrders uint32 `protobuf:"varint,1,opt,name=total_cod_orders,json=totalCodOrders,proto3" json:"total_cod_orders,omitempty"`
}

func (m *ProcessCancelCodOrderExpiredResponse) Reset()      { *m = ProcessCancelCodOrderExpiredResponse{} }
func (*ProcessCancelCodOrderExpiredResponse) ProtoMessage() {}
func (*ProcessCancelCodOrderExpiredResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{19}
}
func (m *ProcessCancelCodOrderExpiredResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessCancelCodOrderExpiredResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessCancelCodOrderExpiredResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessCancelCodOrderExpiredResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessCancelCodOrderExpiredResponse.Merge(m, src)
}
func (m *ProcessCancelCodOrderExpiredResponse) XXX_Size() int {
	return m.Size()
}
func (m *ProcessCancelCodOrderExpiredResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessCancelCodOrderExpiredResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessCancelCodOrderExpiredResponse proto.InternalMessageInfo

func (m *ProcessCancelCodOrderExpiredResponse) GetTotalCodOrders() uint32 {
	if m != nil {
		return m.TotalCodOrders
	}
	return 0
}

type RetrieveTopicIconRequest struct {
	TopicId string `protobuf:"bytes,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
}

func (m *RetrieveTopicIconRequest) Reset()      { *m = RetrieveTopicIconRequest{} }
func (*RetrieveTopicIconRequest) ProtoMessage() {}
func (*RetrieveTopicIconRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{20}
}
func (m *RetrieveTopicIconRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveTopicIconRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveTopicIconRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveTopicIconRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveTopicIconRequest.Merge(m, src)
}
func (m *RetrieveTopicIconRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveTopicIconRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveTopicIconRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveTopicIconRequest proto.InternalMessageInfo

func (m *RetrieveTopicIconRequest) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

type RetrieveTopicIconResponse struct {
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *RetrieveTopicIconResponse) Reset()      { *m = RetrieveTopicIconResponse{} }
func (*RetrieveTopicIconResponse) ProtoMessage() {}
func (*RetrieveTopicIconResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{21}
}
func (m *RetrieveTopicIconResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveTopicIconResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveTopicIconResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveTopicIconResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveTopicIconResponse.Merge(m, src)
}
func (m *RetrieveTopicIconResponse) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveTopicIconResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveTopicIconResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveTopicIconResponse proto.InternalMessageInfo

func (m *RetrieveTopicIconResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type CheckWaitingForAssignedQuestionsRequest struct {
	Duration string `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
	Quota    int64  `protobuf:"varint,2,opt,name=quota,proto3" json:"quota,omitempty"`
}

func (m *CheckWaitingForAssignedQuestionsRequest) Reset() {
	*m = CheckWaitingForAssignedQuestionsRequest{}
}
func (*CheckWaitingForAssignedQuestionsRequest) ProtoMessage() {}
func (*CheckWaitingForAssignedQuestionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{22}
}
func (m *CheckWaitingForAssignedQuestionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckWaitingForAssignedQuestionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckWaitingForAssignedQuestionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckWaitingForAssignedQuestionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckWaitingForAssignedQuestionsRequest.Merge(m, src)
}
func (m *CheckWaitingForAssignedQuestionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckWaitingForAssignedQuestionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckWaitingForAssignedQuestionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckWaitingForAssignedQuestionsRequest proto.InternalMessageInfo

func (m *CheckWaitingForAssignedQuestionsRequest) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *CheckWaitingForAssignedQuestionsRequest) GetQuota() int64 {
	if m != nil {
		return m.Quota
	}
	return 0
}

type CheckWaitingForAssignedQuestionsResponse struct {
	TotalWaitingForAssignedQuestions int64 `protobuf:"varint,1,opt,name=total_waiting_for_assigned_questions,json=totalWaitingForAssignedQuestions,proto3" json:"total_waiting_for_assigned_questions,omitempty"`
}

func (m *CheckWaitingForAssignedQuestionsResponse) Reset() {
	*m = CheckWaitingForAssignedQuestionsResponse{}
}
func (*CheckWaitingForAssignedQuestionsResponse) ProtoMessage() {}
func (*CheckWaitingForAssignedQuestionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{23}
}
func (m *CheckWaitingForAssignedQuestionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckWaitingForAssignedQuestionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckWaitingForAssignedQuestionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckWaitingForAssignedQuestionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckWaitingForAssignedQuestionsResponse.Merge(m, src)
}
func (m *CheckWaitingForAssignedQuestionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckWaitingForAssignedQuestionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckWaitingForAssignedQuestionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckWaitingForAssignedQuestionsResponse proto.InternalMessageInfo

func (m *CheckWaitingForAssignedQuestionsResponse) GetTotalWaitingForAssignedQuestions() int64 {
	if m != nil {
		return m.TotalWaitingForAssignedQuestions
	}
	return 0
}

type AssignmentEvent struct {
	// Types that are valid to be assigned to Event:
	//	*AssignmentEvent_Assigned_
	//	*AssignmentEvent_Returned_
	//	*AssignmentEvent_Submitted_
	//	*AssignmentEvent_Updated_
	Event isAssignmentEvent_Event `protobuf_oneof:"event"`
}

func (m *AssignmentEvent) Reset()      { *m = AssignmentEvent{} }
func (*AssignmentEvent) ProtoMessage() {}
func (*AssignmentEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{24}
}
func (m *AssignmentEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssignmentEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssignmentEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssignmentEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignmentEvent.Merge(m, src)
}
func (m *AssignmentEvent) XXX_Size() int {
	return m.Size()
}
func (m *AssignmentEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignmentEvent.DiscardUnknown(m)
}

var xxx_messageInfo_AssignmentEvent proto.InternalMessageInfo

type isAssignmentEvent_Event interface {
	isAssignmentEvent_Event()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type AssignmentEvent_Assigned_ struct {
	Assigned *AssignmentEvent_Assigned `protobuf:"bytes,1,opt,name=assigned,proto3,oneof" json:"assigned,omitempty"`
}
type AssignmentEvent_Returned_ struct {
	Returned *AssignmentEvent_Returned `protobuf:"bytes,2,opt,name=returned,proto3,oneof" json:"returned,omitempty"`
}
type AssignmentEvent_Submitted_ struct {
	Submitted *AssignmentEvent_Submitted `protobuf:"bytes,3,opt,name=submitted,proto3,oneof" json:"submitted,omitempty"`
}
type AssignmentEvent_Updated_ struct {
	Updated *AssignmentEvent_Updated `protobuf:"bytes,4,opt,name=updated,proto3,oneof" json:"updated,omitempty"`
}

func (*AssignmentEvent_Assigned_) isAssignmentEvent_Event()  {}
func (*AssignmentEvent_Returned_) isAssignmentEvent_Event()  {}
func (*AssignmentEvent_Submitted_) isAssignmentEvent_Event() {}
func (*AssignmentEvent_Updated_) isAssignmentEvent_Event()   {}

func (m *AssignmentEvent) GetEvent() isAssignmentEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *AssignmentEvent) GetAssigned() *AssignmentEvent_Assigned {
	if x, ok := m.GetEvent().(*AssignmentEvent_Assigned_); ok {
		return x.Assigned
	}
	return nil
}

func (m *AssignmentEvent) GetReturned() *AssignmentEvent_Returned {
	if x, ok := m.GetEvent().(*AssignmentEvent_Returned_); ok {
		return x.Returned
	}
	return nil
}

func (m *AssignmentEvent) GetSubmitted() *AssignmentEvent_Submitted {
	if x, ok := m.GetEvent().(*AssignmentEvent_Submitted_); ok {
		return x.Submitted
	}
	return nil
}

func (m *AssignmentEvent) GetUpdated() *AssignmentEvent_Updated {
	if x, ok := m.GetEvent().(*AssignmentEvent_Updated_); ok {
		return x.Updated
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AssignmentEvent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AssignmentEvent_Assigned_)(nil),
		(*AssignmentEvent_Returned_)(nil),
		(*AssignmentEvent_Submitted_)(nil),
		(*AssignmentEvent_Updated_)(nil),
	}
}

type AssignmentEvent_Assigned struct {
	AssignmentId string `protobuf:"bytes,1,opt,name=assignment_id,json=assignmentId,proto3" json:"assignment_id,omitempty"`
	ClassId      int32  `protobuf:"varint,2,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	// student_ids is null when teacher assigns for whole class
	// and not null when teacher assigns for students in class.
	StudentIds []string `protobuf:"bytes,3,rep,name=student_ids,json=studentIds,proto3" json:"student_ids,omitempty"`
}

func (m *AssignmentEvent_Assigned) Reset()      { *m = AssignmentEvent_Assigned{} }
func (*AssignmentEvent_Assigned) ProtoMessage() {}
func (*AssignmentEvent_Assigned) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{24, 0}
}
func (m *AssignmentEvent_Assigned) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssignmentEvent_Assigned) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssignmentEvent_Assigned.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssignmentEvent_Assigned) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignmentEvent_Assigned.Merge(m, src)
}
func (m *AssignmentEvent_Assigned) XXX_Size() int {
	return m.Size()
}
func (m *AssignmentEvent_Assigned) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignmentEvent_Assigned.DiscardUnknown(m)
}

var xxx_messageInfo_AssignmentEvent_Assigned proto.InternalMessageInfo

func (m *AssignmentEvent_Assigned) GetAssignmentId() string {
	if m != nil {
		return m.AssignmentId
	}
	return ""
}

func (m *AssignmentEvent_Assigned) GetClassId() int32 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

func (m *AssignmentEvent_Assigned) GetStudentIds() []string {
	if m != nil {
		return m.StudentIds
	}
	return nil
}

type AssignmentEvent_Returned struct {
	SubmissionId string  `protobuf:"bytes,1,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"`
	GivenScore   float32 `protobuf:"fixed32,2,opt,name=given_score,json=givenScore,proto3" json:"given_score,omitempty"`
	TotalScore   float32 `protobuf:"fixed32,3,opt,name=total_score,json=totalScore,proto3" json:"total_score,omitempty"`
}

func (m *AssignmentEvent_Returned) Reset()      { *m = AssignmentEvent_Returned{} }
func (*AssignmentEvent_Returned) ProtoMessage() {}
func (*AssignmentEvent_Returned) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{24, 1}
}
func (m *AssignmentEvent_Returned) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssignmentEvent_Returned) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssignmentEvent_Returned.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssignmentEvent_Returned) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignmentEvent_Returned.Merge(m, src)
}
func (m *AssignmentEvent_Returned) XXX_Size() int {
	return m.Size()
}
func (m *AssignmentEvent_Returned) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignmentEvent_Returned.DiscardUnknown(m)
}

var xxx_messageInfo_AssignmentEvent_Returned proto.InternalMessageInfo

func (m *AssignmentEvent_Returned) GetSubmissionId() string {
	if m != nil {
		return m.SubmissionId
	}
	return ""
}

func (m *AssignmentEvent_Returned) GetGivenScore() float32 {
	if m != nil {
		return m.GivenScore
	}
	return 0
}

func (m *AssignmentEvent_Returned) GetTotalScore() float32 {
	if m != nil {
		return m.TotalScore
	}
	return 0
}

// student submitted assignment
type AssignmentEvent_Submitted struct {
	SubmissionId string `protobuf:"bytes,1,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"`
}

func (m *AssignmentEvent_Submitted) Reset()      { *m = AssignmentEvent_Submitted{} }
func (*AssignmentEvent_Submitted) ProtoMessage() {}
func (*AssignmentEvent_Submitted) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{24, 2}
}
func (m *AssignmentEvent_Submitted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssignmentEvent_Submitted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssignmentEvent_Submitted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssignmentEvent_Submitted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignmentEvent_Submitted.Merge(m, src)
}
func (m *AssignmentEvent_Submitted) XXX_Size() int {
	return m.Size()
}
func (m *AssignmentEvent_Submitted) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignmentEvent_Submitted.DiscardUnknown(m)
}

var xxx_messageInfo_AssignmentEvent_Submitted proto.InternalMessageInfo

func (m *AssignmentEvent_Submitted) GetSubmissionId() string {
	if m != nil {
		return m.SubmissionId
	}
	return ""
}

// teacher update start date, end date
type AssignmentEvent_Updated struct {
	AssignmentId string           `protobuf:"bytes,1,opt,name=assignment_id,json=assignmentId,proto3" json:"assignment_id,omitempty"`
	StartDate    *types.Timestamp `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate      *types.Timestamp `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
}

func (m *AssignmentEvent_Updated) Reset()      { *m = AssignmentEvent_Updated{} }
func (*AssignmentEvent_Updated) ProtoMessage() {}
func (*AssignmentEvent_Updated) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f4a519b878ee3b, []int{24, 3}
}
func (m *AssignmentEvent_Updated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssignmentEvent_Updated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssignmentEvent_Updated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssignmentEvent_Updated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignmentEvent_Updated.Merge(m, src)
}
func (m *AssignmentEvent_Updated) XXX_Size() int {
	return m.Size()
}
func (m *AssignmentEvent_Updated) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignmentEvent_Updated.DiscardUnknown(m)
}

var xxx_messageInfo_AssignmentEvent_Updated proto.InternalMessageInfo

func (m *AssignmentEvent_Updated) GetAssignmentId() string {
	if m != nil {
		return m.AssignmentId
	}
	return ""
}

func (m *AssignmentEvent_Updated) GetStartDate() *types.Timestamp {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *AssignmentEvent_Updated) GetEndDate() *types.Timestamp {
	if m != nil {
		return m.EndDate
	}
	return nil
}

func init() {
	proto.RegisterType((*EvtStudentQuestion)(nil), "manabie.bob.EvtStudentQuestion")
	golang_proto.RegisterType((*EvtStudentQuestion)(nil), "manabie.bob.EvtStudentQuestion")
	proto.RegisterType((*EvtStudentQuestion_CreateStudentQuestion)(nil), "manabie.bob.EvtStudentQuestion.CreateStudentQuestion")
	golang_proto.RegisterType((*EvtStudentQuestion_CreateStudentQuestion)(nil), "manabie.bob.EvtStudentQuestion.CreateStudentQuestion")
	proto.RegisterType((*EvtStudentQuestion_AllocateStudentQuestion)(nil), "manabie.bob.EvtStudentQuestion.AllocateStudentQuestion")
	golang_proto.RegisterType((*EvtStudentQuestion_AllocateStudentQuestion)(nil), "manabie.bob.EvtStudentQuestion.AllocateStudentQuestion")
	proto.RegisterType((*EvtStudentQuestion_EventMessageChat)(nil), "manabie.bob.EvtStudentQuestion.EventMessageChat")
	golang_proto.RegisterType((*EvtStudentQuestion_EventMessageChat)(nil), "manabie.bob.EvtStudentQuestion.EventMessageChat")
	proto.RegisterType((*EvtStudentQuestion_EventArchivedQuestion)(nil), "manabie.bob.EvtStudentQuestion.EventArchivedQuestion")
	golang_proto.RegisterType((*EvtStudentQuestion_EventArchivedQuestion)(nil), "manabie.bob.EvtStudentQuestion.EventArchivedQuestion")
	proto.RegisterType((*EvtAllocateStudentQuestion)(nil), "manabie.bob.EvtAllocateStudentQuestion")
	golang_proto.RegisterType((*EvtAllocateStudentQuestion)(nil), "manabie.bob.EvtAllocateStudentQuestion")
	proto.RegisterType((*RetryWithDelayEvent)(nil), "manabie.bob.RetryWithDelayEvent")
	golang_proto.RegisterType((*RetryWithDelayEvent)(nil), "manabie.bob.RetryWithDelayEvent")
	proto.RegisterType((*EvtCoachAuto)(nil), "manabie.bob.EvtCoachAuto")
	golang_proto.RegisterType((*EvtCoachAuto)(nil), "manabie.bob.EvtCoachAuto")
	proto.RegisterType((*StudentLearning)(nil), "manabie.bob.StudentLearning")
	golang_proto.RegisterType((*StudentLearning)(nil), "manabie.bob.StudentLearning")
	proto.RegisterType((*EvtClassRoom)(nil), "manabie.bob.EvtClassRoom")
	golang_proto.RegisterType((*EvtClassRoom)(nil), "manabie.bob.EvtClassRoom")
	proto.RegisterType((*EvtClassRoom_CreateClass)(nil), "manabie.bob.EvtClassRoom.CreateClass")
	golang_proto.RegisterType((*EvtClassRoom_CreateClass)(nil), "manabie.bob.EvtClassRoom.CreateClass")
	proto.RegisterType((*EvtClassRoom_JoinClass)(nil), "manabie.bob.EvtClassRoom.JoinClass")
	golang_proto.RegisterType((*EvtClassRoom_JoinClass)(nil), "manabie.bob.EvtClassRoom.JoinClass")
	proto.RegisterType((*EvtClassRoom_LeaveClass)(nil), "manabie.bob.EvtClassRoom.LeaveClass")
	golang_proto.RegisterType((*EvtClassRoom_LeaveClass)(nil), "manabie.bob.EvtClassRoom.LeaveClass")
	proto.RegisterType((*EvtClassRoom_EditClass)(nil), "manabie.bob.EvtClassRoom.EditClass")
	golang_proto.RegisterType((*EvtClassRoom_EditClass)(nil), "manabie.bob.EvtClassRoom.EditClass")
	proto.RegisterType((*EvtClassRoom_ActiveConversation)(nil), "manabie.bob.EvtClassRoom.ActiveConversation")
	golang_proto.RegisterType((*EvtClassRoom_ActiveConversation)(nil), "manabie.bob.EvtClassRoom.ActiveConversation")
	proto.RegisterType((*EvtLesson)(nil), "manabie.bob.EvtLesson")
	golang_proto.RegisterType((*EvtLesson)(nil), "manabie.bob.EvtLesson")
	proto.RegisterType((*EvtLesson_Lesson)(nil), "manabie.bob.EvtLesson.Lesson")
	golang_proto.RegisterType((*EvtLesson_Lesson)(nil), "manabie.bob.EvtLesson.Lesson")
	proto.RegisterType((*EvtLesson_CreateLessons)(nil), "manabie.bob.EvtLesson.CreateLessons")
	golang_proto.RegisterType((*EvtLesson_CreateLessons)(nil), "manabie.bob.EvtLesson.CreateLessons")
	proto.RegisterType((*EvtLesson_JoinLesson)(nil), "manabie.bob.EvtLesson.JoinLesson")
	golang_proto.RegisterType((*EvtLesson_JoinLesson)(nil), "manabie.bob.EvtLesson.JoinLesson")
	proto.RegisterType((*EvtLesson_UpdateLesson)(nil), "manabie.bob.EvtLesson.UpdateLesson")
	golang_proto.RegisterType((*EvtLesson_UpdateLesson)(nil), "manabie.bob.EvtLesson.UpdateLesson")
	proto.RegisterType((*EvtLesson_LeaveLesson)(nil), "manabie.bob.EvtLesson.LeaveLesson")
	golang_proto.RegisterType((*EvtLesson_LeaveLesson)(nil), "manabie.bob.EvtLesson.LeaveLesson")
	proto.RegisterType((*EvtLesson_EndLiveLesson)(nil), "manabie.bob.EvtLesson.EndLiveLesson")
	golang_proto.RegisterType((*EvtLesson_EndLiveLesson)(nil), "manabie.bob.EvtLesson.EndLiveLesson")
	proto.RegisterType((*EvtUserInfo)(nil), "manabie.bob.EvtUserInfo")
	golang_proto.RegisterType((*EvtUserInfo)(nil), "manabie.bob.EvtUserInfo")
	proto.RegisterType((*ProcessAllocateStudentQuestionRequest)(nil), "manabie.bob.ProcessAllocateStudentQuestionRequest")
	golang_proto.RegisterType((*ProcessAllocateStudentQuestionRequest)(nil), "manabie.bob.ProcessAllocateStudentQuestionRequest")
	proto.RegisterType((*ProcessAllocateStudentQuestionResponse)(nil), "manabie.bob.ProcessAllocateStudentQuestionResponse")
	golang_proto.RegisterType((*ProcessAllocateStudentQuestionResponse)(nil), "manabie.bob.ProcessAllocateStudentQuestionResponse")
	proto.RegisterType((*ProcessArchivedStudentQuestionRequest)(nil), "manabie.bob.ProcessArchivedStudentQuestionRequest")
	golang_proto.RegisterType((*ProcessArchivedStudentQuestionRequest)(nil), "manabie.bob.ProcessArchivedStudentQuestionRequest")
	proto.RegisterType((*ProcessArchivedStudentQuestionResponse)(nil), "manabie.bob.ProcessArchivedStudentQuestionResponse")
	golang_proto.RegisterType((*ProcessArchivedStudentQuestionResponse)(nil), "manabie.bob.ProcessArchivedStudentQuestionResponse")
	proto.RegisterType((*ProcessDisableProcessingStudentQuestionRequest)(nil), "manabie.bob.ProcessDisableProcessingStudentQuestionRequest")
	golang_proto.RegisterType((*ProcessDisableProcessingStudentQuestionRequest)(nil), "manabie.bob.ProcessDisableProcessingStudentQuestionRequest")
	proto.RegisterType((*ProcessDisableProcessingStudentQuestionResponse)(nil), "manabie.bob.ProcessDisableProcessingStudentQuestionResponse")
	golang_proto.RegisterType((*ProcessDisableProcessingStudentQuestionResponse)(nil), "manabie.bob.ProcessDisableProcessingStudentQuestionResponse")
	proto.RegisterType((*ProcessTimeOutSolvedStudentQuestionRequest)(nil), "manabie.bob.ProcessTimeOutSolvedStudentQuestionRequest")
	golang_proto.RegisterType((*ProcessTimeOutSolvedStudentQuestionRequest)(nil), "manabie.bob.ProcessTimeOutSolvedStudentQuestionRequest")
	proto.RegisterType((*ProcessTimeOutSolvedStudentQuestionResponse)(nil), "manabie.bob.ProcessTimeOutSolvedStudentQuestionResponse")
	golang_proto.RegisterType((*ProcessTimeOutSolvedStudentQuestionResponse)(nil), "manabie.bob.ProcessTimeOutSolvedStudentQuestionResponse")
	proto.RegisterType((*ProcessTimeOutOrderRequest)(nil), "manabie.bob.ProcessTimeOutOrderRequest")
	golang_proto.RegisterType((*ProcessTimeOutOrderRequest)(nil), "manabie.bob.ProcessTimeOutOrderRequest")
	proto.RegisterType((*ProcessTimeOutOrderResponse)(nil), "manabie.bob.ProcessTimeOutOrderResponse")
	golang_proto.RegisterType((*ProcessTimeOutOrderResponse)(nil), "manabie.bob.ProcessTimeOutOrderResponse")
	proto.RegisterType((*ProcessCancelCodOrderExpiredRequest)(nil), "manabie.bob.ProcessCancelCodOrderExpiredRequest")
	golang_proto.RegisterType((*ProcessCancelCodOrderExpiredRequest)(nil), "manabie.bob.ProcessCancelCodOrderExpiredRequest")
	proto.RegisterType((*ProcessCancelCodOrderExpiredResponse)(nil), "manabie.bob.ProcessCancelCodOrderExpiredResponse")
	golang_proto.RegisterType((*ProcessCancelCodOrderExpiredResponse)(nil), "manabie.bob.ProcessCancelCodOrderExpiredResponse")
	proto.RegisterType((*RetrieveTopicIconRequest)(nil), "manabie.bob.RetrieveTopicIconRequest")
	golang_proto.RegisterType((*RetrieveTopicIconRequest)(nil), "manabie.bob.RetrieveTopicIconRequest")
	proto.RegisterType((*RetrieveTopicIconResponse)(nil), "manabie.bob.RetrieveTopicIconResponse")
	golang_proto.RegisterType((*RetrieveTopicIconResponse)(nil), "manabie.bob.RetrieveTopicIconResponse")
	proto.RegisterType((*CheckWaitingForAssignedQuestionsRequest)(nil), "manabie.bob.CheckWaitingForAssignedQuestionsRequest")
	golang_proto.RegisterType((*CheckWaitingForAssignedQuestionsRequest)(nil), "manabie.bob.CheckWaitingForAssignedQuestionsRequest")
	proto.RegisterType((*CheckWaitingForAssignedQuestionsResponse)(nil), "manabie.bob.CheckWaitingForAssignedQuestionsResponse")
	golang_proto.RegisterType((*CheckWaitingForAssignedQuestionsResponse)(nil), "manabie.bob.CheckWaitingForAssignedQuestionsResponse")
	proto.RegisterType((*AssignmentEvent)(nil), "manabie.bob.AssignmentEvent")
	golang_proto.RegisterType((*AssignmentEvent)(nil), "manabie.bob.AssignmentEvent")
	proto.RegisterType((*AssignmentEvent_Assigned)(nil), "manabie.bob.AssignmentEvent.Assigned")
	golang_proto.RegisterType((*AssignmentEvent_Assigned)(nil), "manabie.bob.AssignmentEvent.Assigned")
	proto.RegisterType((*AssignmentEvent_Returned)(nil), "manabie.bob.AssignmentEvent.Returned")
	golang_proto.RegisterType((*AssignmentEvent_Returned)(nil), "manabie.bob.AssignmentEvent.Returned")
	proto.RegisterType((*AssignmentEvent_Submitted)(nil), "manabie.bob.AssignmentEvent.Submitted")
	golang_proto.RegisterType((*AssignmentEvent_Submitted)(nil), "manabie.bob.AssignmentEvent.Submitted")
	proto.RegisterType((*AssignmentEvent_Updated)(nil), "manabie.bob.AssignmentEvent.Updated")
	golang_proto.RegisterType((*AssignmentEvent_Updated)(nil), "manabie.bob.AssignmentEvent.Updated")
}

func init() { proto.RegisterFile("internal.proto", fileDescriptor_41f4a519b878ee3b) }
func init() { golang_proto.RegisterFile("internal.proto", fileDescriptor_41f4a519b878ee3b) }

var fileDescriptor_41f4a519b878ee3b = []byte{
	// 2147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0xcd, 0x6f, 0x1b, 0xc7,
	0x15, 0xe7, 0x92, 0xa6, 0x48, 0x3e, 0x4a, 0xb6, 0x34, 0xb6, 0x23, 0x69, 0x55, 0xd3, 0x36, 0xed,
	0x58, 0x42, 0x53, 0x53, 0x8a, 0x52, 0xd5, 0x6d, 0xd3, 0x02, 0x95, 0x25, 0x46, 0xa2, 0x2b, 0x2b,
	0xee, 0xca, 0x81, 0xd1, 0x14, 0x28, 0xb3, 0xdc, 0x1d, 0x53, 0x6b, 0x2d, 0x77, 0xe8, 0x9d, 0x59,
	0xba, 0xf2, 0xa9, 0x3d, 0x35, 0x05, 0x82, 0xa2, 0x87, 0x5e, 0x0b, 0xb4, 0x40, 0x0f, 0x45, 0xff,
	0x82, 0x9e, 0x8a, 0x1c, 0x7b, 0x2a, 0x7c, 0xcc, 0xb1, 0x96, 0x2e, 0x3d, 0x06, 0xfd, 0x0b, 0x8a,
	0xf9, 0xd8, 0x2f, 0x8a, 0x5f, 0x72, 0x92, 0x93, 0xf6, 0xbd, 0x79, 0xef, 0xf7, 0x7e, 0xf3, 0x66,
	0xde, 0xcc, 0x1b, 0x0a, 0x2e, 0x3a, 0x1e, 0xc3, 0xbe, 0x67, 0xba, 0xb5, 0xae, 0x4f, 0x18, 0x41,
	0xe5, 0x8e, 0xe9, 0x99, 0x2d, 0x07, 0xd7, 0x5a, 0xa4, 0xa5, 0x03, 0xf6, 0x82, 0x8e, 0x1c, 0xd0,
	0xaf, 0xb7, 0x09, 0x69, 0xbb, 0x78, 0x55, 0x48, 0xad, 0xe0, 0xe9, 0x2a, 0x73, 0x3a, 0x98, 0x32,
	0xb3, 0xd3, 0x55, 0x06, 0x77, 0xdb, 0x0e, 0x3b, 0x0c, 0x5a, 0x35, 0x8b, 0x74, 0x56, 0xdb, 0xa4,
	0x4d, 0x62, 0x4b, 0x2e, 0x09, 0x41, 0x7c, 0x49, 0xf3, 0xea, 0xff, 0x8a, 0x80, 0xea, 0x3d, 0x76,
	0xc0, 0x02, 0x1b, 0x7b, 0xec, 0x67, 0x01, 0xa6, 0xcc, 0x21, 0x1e, 0x22, 0x30, 0x6f, 0xf9, 0xd8,
	0x64, 0xb8, 0x49, 0xe5, 0x48, 0xf3, 0xb9, 0x1a, 0x5a, 0xd0, 0x6e, 0x68, 0x2b, 0xe5, 0xf5, 0x8d,
	0x5a, 0x82, 0x61, 0xed, 0x2c, 0x42, 0x6d, 0x4b, 0xb8, 0xf7, 0x69, 0x77, 0x33, 0xc6, 0x55, 0x6b,
	0xd0, 0x00, 0x0a, 0x60, 0xd1, 0x74, 0x5d, 0x62, 0x0d, 0x0c, 0x99, 0x15, 0x21, 0xef, 0x8d, 0x0b,
	0xb9, 0xa9, 0x00, 0xce, 0x06, 0x9d, 0x37, 0x07, 0x0f, 0xa1, 0x4f, 0x00, 0xe1, 0x1e, 0x8f, 0xd5,
	0xc1, 0x94, 0x9a, 0x6d, 0xdc, 0xb4, 0x0e, 0x4d, 0xb6, 0x90, 0x13, 0xf1, 0xd6, 0xc6, 0xc5, 0xab,
	0x73, 0xcf, 0x87, 0xd2, 0x71, 0xeb, 0xd0, 0x64, 0xbb, 0x19, 0x63, 0x16, 0xf7, 0xe9, 0x78, 0x26,
	0x65, 0x04, 0xd3, 0xb7, 0x0e, 0x9d, 0x1e, 0xb6, 0xe3, 0x69, 0x5d, 0x98, 0x2c, 0x93, 0x22, 0xcc,
	0xa6, 0xf2, 0x4e, 0x66, 0x12, 0x0f, 0x1a, 0xd0, 0xff, 0xad, 0xc1, 0xd5, 0x81, 0xc9, 0x47, 0xd7,
	0x00, 0xc2, 0xd4, 0x3a, 0xb6, 0x58, 0xc7, 0x92, 0x51, 0x52, 0x9a, 0x86, 0x8d, 0x6a, 0x70, 0xb9,
	0x3f, 0xf3, 0xdc, 0x2e, 0x2b, 0xec, 0xe6, 0x68, 0x1a, 0xac, 0x61, 0xa3, 0x79, 0x28, 0x3c, 0x0f,
	0x9c, 0x97, 0xdc, 0x26, 0x27, 0x6c, 0xa6, 0xb8, 0xd8, 0xb0, 0xd1, 0x02, 0x14, 0x2c, 0xe2, 0x31,
	0xec, 0x31, 0x31, 0xc5, 0x92, 0x11, 0x8a, 0x9c, 0x41, 0xe0, 0xbb, 0xcd, 0x0e, 0xb6, 0x1d, 0x93,
	0x2e, 0xe4, 0x6f, 0xe4, 0x38, 0x83, 0xc0, 0x77, 0x1f, 0x0a, 0x05, 0xba, 0x02, 0x79, 0xe6, 0x30,
	0x17, 0x2f, 0x4c, 0x09, 0x37, 0x29, 0xe8, 0x9f, 0x6b, 0x30, 0x3f, 0x64, 0x69, 0x87, 0x71, 0xd6,
	0x86, 0x71, 0x5e, 0x84, 0x22, 0x0b, 0x18, 0xf1, 0xe3, 0x89, 0x15, 0x84, 0xdc, 0xb0, 0xd1, 0x5d,
	0x40, 0x1e, 0x61, 0xce, 0x53, 0xc7, 0x32, 0x05, 0x8c, 0x64, 0x22, 0x67, 0x36, 0x97, 0x1c, 0x79,
	0xcc, 0x07, 0xd0, 0x3b, 0x90, 0x52, 0x36, 0x5b, 0xc4, 0x3e, 0x56, 0xd3, 0x9d, 0x4d, 0x0e, 0xdc,
	0x27, 0xf6, 0xb1, 0xfe, 0x0f, 0x0d, 0x66, 0xfb, 0x77, 0xcb, 0xb9, 0xb9, 0x27, 0xd2, 0x9a, 0x4d,
	0xa7, 0xf5, 0x9b, 0xa4, 0xbe, 0x03, 0x57, 0x07, 0x6e, 0xc0, 0xf3, 0xd2, 0xbf, 0x5f, 0x82, 0x82,
	0x2a, 0xb2, 0xea, 0x1e, 0xe8, 0xf5, 0x1e, 0xfb, 0x9a, 0xd6, 0xb4, 0xfa, 0x4f, 0x0d, 0x2e, 0x1b,
	0x98, 0xf9, 0xc7, 0x4f, 0x1c, 0x76, 0xb8, 0x8d, 0x5d, 0xf3, 0x58, 0x10, 0x46, 0x35, 0xb8, 0xf0,
	0xe2, 0x10, 0x87, 0x07, 0x96, 0x5e, 0x93, 0x27, 0x67, 0x2d, 0x3c, 0x0f, 0x6b, 0x8f, 0xc3, 0x93,
	0xd3, 0x10, 0x76, 0xc8, 0x85, 0x6b, 0xb8, 0xc7, 0x9a, 0xe3, 0x8e, 0xa1, 0xe5, 0xfe, 0x7a, 0x1d,
	0x7e, 0xec, 0xe8, 0x78, 0xe8, 0x68, 0x32, 0x1d, 0x2f, 0x61, 0xba, 0xde, 0x63, 0x5b, 0xc4, 0xb4,
	0x0e, 0x37, 0x03, 0x46, 0xd0, 0xbb, 0x90, 0x17, 0xa5, 0x2d, 0x98, 0x5f, 0x5c, 0x5f, 0x4a, 0x05,
	0x8c, 0xcc, 0xc4, 0x24, 0x0d, 0x69, 0xd9, 0x57, 0xda, 0xd9, 0xfe, 0xd2, 0x4e, 0x6c, 0x9d, 0x5c,
	0x6a, 0xeb, 0x54, 0x3f, 0xd3, 0xe0, 0x92, 0xa2, 0xb6, 0x87, 0x4d, 0xdf, 0x73, 0xbc, 0xf6, 0xb8,
	0x73, 0xe2, 0x5e, 0x48, 0x2f, 0x2b, 0xe8, 0xdd, 0x4c, 0xd1, 0xeb, 0xc3, 0x4a, 0x91, 0xbc, 0x09,
	0xd3, 0x5d, 0x9f, 0x74, 0x48, 0xb8, 0xa2, 0x9c, 0x4a, 0xde, 0x28, 0x47, 0xba, 0x86, 0x5d, 0xfd,
	0x7d, 0x41, 0xe6, 0xc2, 0x35, 0x29, 0x35, 0x08, 0xe9, 0xa0, 0x07, 0x30, 0xad, 0x2e, 0x22, 0x8b,
	0xeb, 0xd4, 0x62, 0xbe, 0xdd, 0xbf, 0x06, 0x91, 0x83, 0xba, 0x77, 0x84, 0xbc, 0x9b, 0x31, 0xca,
	0x56, 0x2c, 0xa2, 0x6d, 0x80, 0x67, 0xc4, 0xf1, 0x14, 0x92, 0x5c, 0xcd, 0x5b, 0xc3, 0x91, 0x1e,
	0x10, 0xc7, 0x0b, 0x71, 0x4a, 0xcf, 0x42, 0x01, 0xed, 0x40, 0xd9, 0xc5, 0x66, 0x2f, 0x24, 0x24,
	0xef, 0x8a, 0xdb, 0xc3, 0x61, 0xf6, 0xb8, 0x71, 0x88, 0x03, 0x6e, 0x24, 0x71, 0x3a, 0xd8, 0x76,
	0x98, 0xc2, 0xb9, 0x30, 0x8e, 0x4e, 0xdd, 0x76, 0x58, 0x44, 0x07, 0x87, 0x02, 0x6a, 0xc2, 0x65,
	0xd3, 0x62, 0x0e, 0xe7, 0x43, 0xbc, 0x1e, 0xf6, 0xa9, 0x28, 0xdd, 0x85, 0xbc, 0x80, 0xfb, 0xce,
	0x70, 0xb8, 0x4d, 0xe1, 0xb4, 0x95, 0xf0, 0xd9, 0xcd, 0x18, 0xc8, 0x3c, 0xa3, 0xd5, 0x7f, 0xab,
	0x41, 0x39, 0x91, 0x54, 0x7e, 0x84, 0x0a, 0xc6, 0xe1, 0xde, 0xc8, 0x1b, 0x05, 0x21, 0x37, 0x6c,
	0xbe, 0x71, 0x18, 0x36, 0xad, 0x43, 0x9c, 0x38, 0x5f, 0x4b, 0x4a, 0x23, 0x87, 0xa5, 0xa7, 0x67,
	0x76, 0xc2, 0xe3, 0xa9, 0x24, 0x34, 0xfb, 0x66, 0x07, 0xa3, 0xeb, 0x50, 0x8e, 0xbd, 0x79, 0x42,
	0xf8, 0xed, 0x00, 0x91, 0x3b, 0xd5, 0x7b, 0x50, 0x8a, 0xd6, 0x64, 0x14, 0x8d, 0x79, 0x28, 0x04,
	0x34, 0xc9, 0x61, 0x8a, 0x8b, 0x0d, 0x1b, 0x6d, 0x00, 0x88, 0x81, 0xb6, 0x4f, 0x82, 0xae, 0x20,
	0x70, 0x71, 0xfd, 0xad, 0x54, 0x8a, 0x3e, 0xa2, 0xd8, 0xdf, 0xe1, 0xa3, 0x46, 0x29, 0x08, 0x3f,
	0xf5, 0x26, 0x40, 0xbc, 0x88, 0xa3, 0x02, 0x2f, 0x42, 0x51, 0x05, 0xe6, 0xdb, 0x8b, 0xd3, 0x2f,
	0xc8, 0xc8, 0x14, 0x2d, 0x41, 0xc9, 0xa1, 0xcd, 0x23, 0xc7, 0x3a, 0xc2, 0x72, 0xe3, 0x17, 0x8d,
	0xa2, 0x43, 0x7f, 0x2a, 0x64, 0xbd, 0x0e, 0xa5, 0x68, 0x75, 0xc7, 0xe4, 0x37, 0x91, 0xc0, 0x6c,
	0x5f, 0x02, 0xf5, 0x1d, 0x40, 0x67, 0x57, 0x75, 0x14, 0xde, 0x5b, 0x30, 0x25, 0x17, 0x5c, 0x60,
	0x15, 0x0d, 0x25, 0x25, 0xcf, 0xa6, 0xbf, 0x17, 0xa0, 0x54, 0xef, 0xb1, 0x3d, 0x4c, 0x29, 0xf1,
	0xd0, 0x43, 0xb8, 0xa8, 0xaa, 0xd1, 0x15, 0x8a, 0xb0, 0x1e, 0xcf, 0x6c, 0x7f, 0x69, 0xaf, 0x8a,
	0x51, 0x0a, 0x7c, 0xdf, 0xce, 0x58, 0x49, 0x05, 0xda, 0x86, 0xb2, 0x28, 0x48, 0x09, 0xa6, 0x2a,
	0xf2, 0xe6, 0x10, 0x2c, 0xbe, 0xf4, 0xf2, 0x93, 0xd7, 0xd1, 0xb3, 0x48, 0x42, 0x0f, 0x60, 0x26,
	0xe8, 0xda, 0x31, 0x29, 0x55, 0x92, 0xb7, 0x86, 0xe0, 0x7c, 0x24, 0x6c, 0x23, 0xa4, 0xe9, 0x20,
	0x21, 0xa3, 0x1d, 0x98, 0x96, 0xc5, 0xad, 0xa0, 0x64, 0x55, 0x56, 0x87, 0x40, 0x89, 0x5d, 0x11,
	0x21, 0xc9, 0x63, 0x41, 0x01, 0xed, 0xc3, 0x25, 0xec, 0xd9, 0x4d, 0xd7, 0x89, 0xb1, 0xf2, 0x23,
	0x53, 0x55, 0xf7, 0xec, 0x3d, 0x27, 0x81, 0x36, 0x83, 0x93, 0x0a, 0xfd, 0x63, 0x98, 0x52, 0xc8,
	0x4b, 0x50, 0x92, 0x80, 0xf1, 0xe1, 0x5c, 0x94, 0x8a, 0x86, 0x8d, 0x10, 0x5c, 0x48, 0xec, 0x0d,
	0xf1, 0xcd, 0xeb, 0xca, 0xe5, 0xc7, 0xb1, 0xda, 0x98, 0x39, 0x59, 0x57, 0x4a, 0xc5, 0xeb, 0x6a,
	0x17, 0x66, 0x52, 0x0b, 0x85, 0xee, 0x41, 0x21, 0x5e, 0xdf, 0xdc, 0x4a, 0x79, 0xfd, 0xda, 0xd0,
	0x04, 0xf0, 0x3f, 0x46, 0x68, 0xad, 0x1f, 0x03, 0xc4, 0xcb, 0x34, 0x9a, 0xe9, 0xd7, 0x5d, 0xa4,
	0x47, 0x30, 0x9d, 0x5c, 0xd9, 0xd1, 0xc1, 0x47, 0x17, 0xd2, 0xf8, 0x8c, 0x6d, 0x41, 0x39, 0xb1,
	0xf6, 0x6f, 0x36, 0x51, 0xbd, 0x0e, 0x33, 0xa9, 0x45, 0x7f, 0x33, 0x98, 0x64, 0xb1, 0x7e, 0xa6,
	0x41, 0xb9, 0xde, 0x63, 0x3c, 0x3f, 0x0d, 0xef, 0x29, 0x49, 0xfa, 0x68, 0xa9, 0x1c, 0xdf, 0x84,
	0x69, 0x1b, 0xf7, 0x1c, 0x0b, 0x37, 0x19, 0x39, 0xc2, 0x9e, 0x42, 0x2c, 0x4b, 0xdd, 0x63, 0xae,
	0xe2, 0x3d, 0x25, 0xef, 0x84, 0x5e, 0x34, 0x93, 0x1d, 0xa1, 0x3a, 0xb9, 0xe6, 0xc4, 0xc8, 0x7e,
	0x62, 0x20, 0xda, 0x78, 0x17, 0xe2, 0x8d, 0x57, 0xfd, 0x31, 0xbc, 0xfd, 0xc8, 0x27, 0x16, 0xa6,
	0x74, 0x48, 0x13, 0x64, 0x60, 0xd1, 0x5b, 0xf1, 0xbe, 0xdf, 0x75, 0x3a, 0x8e, 0x6c, 0x78, 0x66,
	0x0c, 0x29, 0x54, 0x7f, 0xa3, 0xc1, 0x9d, 0x71, 0xfe, 0xb4, 0x4b, 0x3c, 0x8a, 0xd1, 0x32, 0x5c,
	0x62, 0x84, 0x99, 0x6e, 0xd4, 0xbc, 0xd9, 0x0a, 0xea, 0xa2, 0x50, 0x87, 0xee, 0xe2, 0x8d, 0x23,
	0x0d, 0x3d, 0xc2, 0x12, 0xc6, 0x59, 0x61, 0x3c, 0x27, 0x86, 0xf6, 0x49, 0xd4, 0xb3, 0xd9, 0xd5,
	0x9f, 0xc7, 0x53, 0x50, 0xfd, 0xef, 0x79, 0xa6, 0x80, 0x74, 0x28, 0xda, 0x81, 0x6f, 0x46, 0xdd,
	0x63, 0xc9, 0x88, 0xe4, 0xea, 0x27, 0xf1, 0xec, 0x86, 0x41, 0xab, 0xd9, 0x7d, 0x0f, 0xe6, 0x25,
	0xe9, 0xfe, 0x8e, 0x94, 0xaa, 0x68, 0x57, 0xc5, 0x70, 0x9f, 0x3b, 0xad, 0xee, 0x41, 0x4d, 0x45,
	0xd8, 0x76, 0xa8, 0xd9, 0x72, 0xb1, 0x92, 0x1c, 0xaf, 0x3d, 0x64, 0x16, 0x49, 0xbe, 0x5a, 0x1f,
	0x5f, 0x07, 0x56, 0x27, 0x46, 0xfb, 0x8a, 0xc4, 0x7f, 0x09, 0xdf, 0x56, 0xe0, 0xbc, 0x47, 0xff,
	0x30, 0x60, 0x07, 0xc4, 0x1d, 0x9e, 0xfa, 0x35, 0xb8, 0x32, 0xe0, 0xbd, 0x20, 0x8f, 0xae, 0x92,
	0x81, 0xce, 0x3c, 0x18, 0x68, 0x15, 0xc3, 0x3b, 0x13, 0xe1, 0x7f, 0xc5, 0x69, 0xfc, 0x45, 0x03,
	0x3d, 0x1d, 0xe7, 0x43, 0xdf, 0xc6, 0xfe, 0x04, 0xc9, 0x46, 0x1b, 0x50, 0x68, 0x9b, 0x0c, 0xbf,
	0x30, 0x8f, 0x55, 0x97, 0x9d, 0x7e, 0x04, 0x3c, 0x32, 0x8f, 0x3b, 0xd8, 0x63, 0x3b, 0xd2, 0xc4,
	0x08, 0x6d, 0xd1, 0x1a, 0x4c, 0x51, 0x66, 0xb2, 0x80, 0xaa, 0x73, 0x73, 0x21, 0xe5, 0x25, 0xa2,
	0x1f, 0x88, 0x71, 0x43, 0xd9, 0x55, 0x7f, 0x08, 0x4b, 0x03, 0x29, 0xaa, 0xa9, 0x2f, 0x41, 0x89,
	0x70, 0x45, 0x94, 0xd0, 0xbc, 0x51, 0x14, 0x0a, 0x9e, 0xc6, 0x27, 0x70, 0x4b, 0xf9, 0x6e, 0x99,
	0x9e, 0x85, 0xdd, 0x2d, 0x62, 0x0b, 0xef, 0xfa, 0xaf, 0xba, 0x8e, 0x8f, 0xed, 0x37, 0x2f, 0x8d,
	0x47, 0x70, 0x7b, 0x34, 0xb0, 0x62, 0xb7, 0x02, 0xb3, 0x72, 0x61, 0x2c, 0x62, 0x37, 0x05, 0x2d,
	0x9a, 0xaa, 0xfb, 0xd0, 0x8f, 0x56, 0x37, 0x60, 0x81, 0x3f, 0x11, 0x1d, 0xdc, 0xc3, 0x8f, 0x49,
	0xd7, 0xb1, 0x1a, 0x56, 0xbc, 0x7f, 0x16, 0xa1, 0xc8, 0xb8, 0x2e, 0x3e, 0x26, 0x0b, 0x42, 0x6e,
	0xd8, 0xd5, 0xbb, 0xb0, 0x38, 0xc0, 0x4d, 0x45, 0x9f, 0x85, 0x5c, 0xe0, 0xbb, 0x8a, 0x3c, 0xff,
	0xac, 0xfe, 0x02, 0x96, 0xb7, 0x0e, 0xb1, 0x75, 0xf4, 0xc4, 0x74, 0x98, 0xe3, 0xb5, 0x3f, 0x20,
	0xfe, 0x26, 0xa5, 0x4e, 0xdb, 0x8b, 0x5f, 0xcd, 0x74, 0x92, 0xc5, 0xbf, 0x02, 0xf9, 0xe7, 0x01,
	0x61, 0xa6, 0x80, 0xce, 0x19, 0x52, 0xa8, 0xbe, 0x84, 0x95, 0xf1, 0xe0, 0x8a, 0xda, 0x3e, 0xdc,
	0x96, 0x89, 0x79, 0x21, 0x8d, 0x9b, 0x4f, 0x89, 0xdf, 0x34, 0x95, 0x79, 0xdf, 0xf6, 0xcd, 0x19,
	0x37, 0x84, 0xed, 0x08, 0xdc, 0xea, 0x69, 0x1e, 0x2e, 0x49, 0x2d, 0xdf, 0x76, 0xf2, 0x79, 0xbd,
	0x05, 0xc5, 0x10, 0x71, 0xe0, 0xab, 0xac, 0xcf, 0xbe, 0x16, 0xa2, 0xee, 0x66, 0x8c, 0xc8, 0x91,
	0x83, 0xf8, 0x98, 0x05, 0xbe, 0xa7, 0x0e, 0xe1, 0x71, 0x20, 0x86, 0x32, 0xe6, 0x20, 0xa1, 0x23,
	0xfa, 0x00, 0x4a, 0x34, 0x68, 0x75, 0x1c, 0xc6, 0x54, 0x6f, 0x5d, 0x5e, 0xbf, 0x33, 0x12, 0xe5,
	0x20, 0xb4, 0xe6, 0x4f, 0xa9, 0xc8, 0x15, 0xfd, 0x04, 0x0a, 0xb2, 0x19, 0xb4, 0x55, 0xdf, 0x77,
	0x7b, 0x24, 0x8a, 0x6c, 0x37, 0x38, 0x46, 0xe8, 0xa6, 0x1f, 0x41, 0x31, 0x9c, 0x26, 0xba, 0x05,
	0x33, 0x66, 0xe4, 0x11, 0xef, 0xad, 0xe9, 0x58, 0x29, 0x5f, 0x0c, 0x51, 0x73, 0x9e, 0x4d, 0x37,
	0xe7, 0xd7, 0xa1, 0x1c, 0xbf, 0xc2, 0xa3, 0x26, 0x24, 0x7a, 0x86, 0x53, 0xfd, 0x39, 0x14, 0xc3,
	0x74, 0xf0, 0x60, 0x62, 0x1e, 0x94, 0xa6, 0x7e, 0x2d, 0x99, 0x8e, 0x95, 0x12, 0xb1, 0xed, 0xf4,
	0xb0, 0xd7, 0xa4, 0x16, 0xf1, 0x65, 0xdb, 0x93, 0x35, 0x40, 0xa8, 0x0e, 0xb8, 0x46, 0xbc, 0xc0,
	0xe4, 0x41, 0x27, 0x0c, 0x72, 0xd2, 0x40, 0x1e, 0x6e, 0x5c, 0xa3, 0xaf, 0x41, 0x29, 0xca, 0xdd,
	0x44, 0x31, 0xf5, 0x3f, 0x6b, 0x50, 0x50, 0x89, 0x9a, 0x2c, 0x23, 0x3f, 0x00, 0xa0, 0xcc, 0xf4,
	0x59, 0x93, 0xfb, 0xa8, 0x3d, 0x31, 0xea, 0xb7, 0x9b, 0x92, 0xb0, 0xde, 0x36, 0x19, 0x46, 0x1b,
	0x50, 0xe4, 0x3d, 0xb7, 0x70, 0xcc, 0x8d, 0x75, 0x2c, 0x60, 0xcf, 0xe6, 0x6e, 0xf7, 0x0b, 0xea,
	0xf7, 0x8c, 0xf5, 0xd3, 0x22, 0x14, 0x1b, 0xea, 0x77, 0x78, 0xf4, 0x3b, 0x0d, 0x2a, 0xa3, 0xbb,
	0x0f, 0xb4, 0x9e, 0x3e, 0x93, 0x27, 0x69, 0x75, 0xf4, 0xf7, 0xce, 0xe5, 0xa3, 0xca, 0x39, 0xc9,
	0x65, 0x70, 0xaf, 0x30, 0x84, 0xcb, 0xc8, 0x9e, 0x65, 0x08, 0x97, 0x31, 0xcd, 0xc8, 0x5f, 0x35,
	0x58, 0x9e, 0xb0, 0x0f, 0x40, 0xef, 0x0f, 0x0a, 0x30, 0x61, 0x2f, 0xa2, 0xff, 0xe8, 0xcd, 0x9c,
	0x15, 0xcd, 0x3f, 0x69, 0xd1, 0xe5, 0x34, 0xea, 0x8e, 0x47, 0xf7, 0x06, 0x45, 0x99, 0xa0, 0xeb,
	0xd0, 0xbf, 0x7f, 0x7e, 0x47, 0x49, 0xad, 0x9a, 0xfb, 0x34, 0xab, 0xa1, 0x0e, 0x5c, 0x1e, 0x70,
	0xef, 0xa2, 0xe5, 0x11, 0xa8, 0xc9, 0xe6, 0x41, 0x5f, 0x19, 0x6f, 0x98, 0x0c, 0xf7, 0xa9, 0x06,
	0xdf, 0x1a, 0x75, 0xa5, 0xa2, 0xb5, 0x41, 0x78, 0xa3, 0xae, 0x75, 0xfd, 0xdd, 0x73, 0x78, 0x24,
	0xa9, 0xb4, 0x61, 0xee, 0xcc, 0x9d, 0x8a, 0xd2, 0xa7, 0xfe, 0xb0, 0xab, 0x5a, 0xbf, 0x33, 0xce,
	0x2c, 0x19, 0xe8, 0x8f, 0x1a, 0xdc, 0x18, 0x77, 0x63, 0xa2, 0xef, 0xa6, 0x7f, 0x5c, 0x9d, 0xec,
	0xf6, 0xd6, 0x37, 0xce, 0xe9, 0x95, 0xa0, 0x75, 0xdf, 0x7d, 0xf5, 0xba, 0x92, 0xf9, 0xe2, 0x75,
	0x25, 0xf3, 0xe5, 0xeb, 0x8a, 0xf6, 0xeb, 0x93, 0x8a, 0xf6, 0xb7, 0x93, 0x8a, 0xf6, 0xaf, 0x93,
	0x8a, 0xf6, 0xea, 0xa4, 0xa2, 0xfd, 0xe7, 0xa4, 0xa2, 0xfd, 0xf7, 0xa4, 0x92, 0xf9, 0xf2, 0xa4,
	0xa2, 0xfd, 0xe1, 0xb4, 0x92, 0xf9, 0xfc, 0xb4, 0xa2, 0xbd, 0x3a, 0xad, 0x64, 0xbe, 0x38, 0xad,
	0x64, 0x3e, 0x5e, 0x4f, 0xfc, 0x6b, 0x4f, 0xc5, 0xbf, 0xcb, 0xbf, 0x5b, 0xa6, 0x75, 0x84, 0x3d,
	0x7b, 0xb5, 0x7b, 0xd4, 0x5e, 0x6d, 0x63, 0x4f, 0xfe, 0x8f, 0xaf, 0x45, 0x5a, 0xef, 0x77, 0x5b,
	0xad, 0x29, 0x21, 0xbd, 0xf7, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x26, 0xb1, 0x83, 0xf6, 0x61,
	0x1c, 0x00, 0x00,
}

func (this *EvtStudentQuestion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtStudentQuestion)
	if !ok {
		that2, ok := that.(EvtStudentQuestion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Message == nil {
		if this.Message != nil {
			return false
		}
	} else if this.Message == nil {
		return false
	} else if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *EvtStudentQuestion_CreateStudentQuestion_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtStudentQuestion_CreateStudentQuestion_)
	if !ok {
		that2, ok := that.(EvtStudentQuestion_CreateStudentQuestion_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CreateStudentQuestion.Equal(that1.CreateStudentQuestion) {
		return false
	}
	return true
}
func (this *EvtStudentQuestion_AllocateStudentQuestion_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtStudentQuestion_AllocateStudentQuestion_)
	if !ok {
		that2, ok := that.(EvtStudentQuestion_AllocateStudentQuestion_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AllocateStudentQuestion.Equal(that1.AllocateStudentQuestion) {
		return false
	}
	return true
}
func (this *EvtStudentQuestion_EventMessageChat_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtStudentQuestion_EventMessageChat_)
	if !ok {
		that2, ok := that.(EvtStudentQuestion_EventMessageChat_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EventMessageChat.Equal(that1.EventMessageChat) {
		return false
	}
	return true
}
func (this *EvtStudentQuestion_EventArchivedQuestion_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtStudentQuestion_EventArchivedQuestion_)
	if !ok {
		that2, ok := that.(EvtStudentQuestion_EventArchivedQuestion_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EventArchivedQuestion.Equal(that1.EventArchivedQuestion) {
		return false
	}
	return true
}
func (this *EvtStudentQuestion_CreateStudentQuestion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtStudentQuestion_CreateStudentQuestion)
	if !ok {
		that2, ok := that.(EvtStudentQuestion_CreateStudentQuestion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StudentId != that1.StudentId {
		return false
	}
	if this.StudentQuestionId != that1.StudentQuestionId {
		return false
	}
	if this.QuizId != that1.QuizId {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	if len(this.UrlMedias) != len(that1.UrlMedias) {
		return false
	}
	for i := range this.UrlMedias {
		if this.UrlMedias[i] != that1.UrlMedias[i] {
			return false
		}
	}
	if this.Title != that1.Title {
		return false
	}
	return true
}
func (this *EvtStudentQuestion_AllocateStudentQuestion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtStudentQuestion_AllocateStudentQuestion)
	if !ok {
		that2, ok := that.(EvtStudentQuestion_AllocateStudentQuestion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StudentQuestionId != that1.StudentQuestionId {
		return false
	}
	if this.TutorId != that1.TutorId {
		return false
	}
	if this.NotificationTitle != that1.NotificationTitle {
		return false
	}
	if this.NotificationBody != that1.NotificationBody {
		return false
	}
	return true
}
func (this *EvtStudentQuestion_EventMessageChat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtStudentQuestion_EventMessageChat)
	if !ok {
		that2, ok := that.(EvtStudentQuestion_EventMessageChat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StudentQuestionId != that1.StudentQuestionId {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	if this.NotificationTitle != that1.NotificationTitle {
		return false
	}
	if this.NotificationBody != that1.NotificationBody {
		return false
	}
	return true
}
func (this *EvtStudentQuestion_EventArchivedQuestion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtStudentQuestion_EventArchivedQuestion)
	if !ok {
		that2, ok := that.(EvtStudentQuestion_EventArchivedQuestion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StudentQuestionId != that1.StudentQuestionId {
		return false
	}
	return true
}
func (this *EvtAllocateStudentQuestion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtAllocateStudentQuestion)
	if !ok {
		that2, ok := that.(EvtAllocateStudentQuestion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StudentQuestionId != that1.StudentQuestionId {
		return false
	}
	return true
}
func (this *RetryWithDelayEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetryWithDelayEvent)
	if !ok {
		that2, ok := that.(RetryWithDelayEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.When.Equal(that1.When) {
		return false
	}
	if that1.Message == nil {
		if this.Message != nil {
			return false
		}
	} else if this.Message == nil {
		return false
	} else if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *RetryWithDelayEvent_EvtAllocateStudentQuestion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetryWithDelayEvent_EvtAllocateStudentQuestion)
	if !ok {
		that2, ok := that.(RetryWithDelayEvent_EvtAllocateStudentQuestion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EvtAllocateStudentQuestion.Equal(that1.EvtAllocateStudentQuestion) {
		return false
	}
	return true
}
func (this *EvtCoachAuto) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtCoachAuto)
	if !ok {
		that2, ok := that.(EvtCoachAuto)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Event != that1.Event {
		return false
	}
	if this.StudentId != that1.StudentId {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	return true
}
func (this *StudentLearning) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StudentLearning)
	if !ok {
		that2, ok := that.(StudentLearning)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StudentId != that1.StudentId {
		return false
	}
	if this.Event != that1.Event {
		return false
	}
	if this.PromotionId != that1.PromotionId {
		return false
	}
	return true
}
func (this *EvtClassRoom) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtClassRoom)
	if !ok {
		that2, ok := that.(EvtClassRoom)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Message == nil {
		if this.Message != nil {
			return false
		}
	} else if this.Message == nil {
		return false
	} else if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *EvtClassRoom_CreateClass_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtClassRoom_CreateClass_)
	if !ok {
		that2, ok := that.(EvtClassRoom_CreateClass_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CreateClass.Equal(that1.CreateClass) {
		return false
	}
	return true
}
func (this *EvtClassRoom_JoinClass_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtClassRoom_JoinClass_)
	if !ok {
		that2, ok := that.(EvtClassRoom_JoinClass_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JoinClass.Equal(that1.JoinClass) {
		return false
	}
	return true
}
func (this *EvtClassRoom_LeaveClass_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtClassRoom_LeaveClass_)
	if !ok {
		that2, ok := that.(EvtClassRoom_LeaveClass_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LeaveClass.Equal(that1.LeaveClass) {
		return false
	}
	return true
}
func (this *EvtClassRoom_EditClass_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtClassRoom_EditClass_)
	if !ok {
		that2, ok := that.(EvtClassRoom_EditClass_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EditClass.Equal(that1.EditClass) {
		return false
	}
	return true
}
func (this *EvtClassRoom_ActiveConversation_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtClassRoom_ActiveConversation_)
	if !ok {
		that2, ok := that.(EvtClassRoom_ActiveConversation_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActiveConversation.Equal(that1.ActiveConversation) {
		return false
	}
	return true
}
func (this *EvtClassRoom_CreateClass) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtClassRoom_CreateClass)
	if !ok {
		that2, ok := that.(EvtClassRoom_CreateClass)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClassId != that1.ClassId {
		return false
	}
	if this.TeacherId != that1.TeacherId {
		return false
	}
	if this.ClassName != that1.ClassName {
		return false
	}
	if len(this.TeacherIds) != len(that1.TeacherIds) {
		return false
	}
	for i := range this.TeacherIds {
		if this.TeacherIds[i] != that1.TeacherIds[i] {
			return false
		}
	}
	return true
}
func (this *EvtClassRoom_JoinClass) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtClassRoom_JoinClass)
	if !ok {
		that2, ok := that.(EvtClassRoom_JoinClass)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClassId != that1.ClassId {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.UserGroup != that1.UserGroup {
		return false
	}
	return true
}
func (this *EvtClassRoom_LeaveClass) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtClassRoom_LeaveClass)
	if !ok {
		that2, ok := that.(EvtClassRoom_LeaveClass)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClassId != that1.ClassId {
		return false
	}
	if len(this.UserIds) != len(that1.UserIds) {
		return false
	}
	for i := range this.UserIds {
		if this.UserIds[i] != that1.UserIds[i] {
			return false
		}
	}
	if this.IsKicked != that1.IsKicked {
		return false
	}
	return true
}
func (this *EvtClassRoom_EditClass) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtClassRoom_EditClass)
	if !ok {
		that2, ok := that.(EvtClassRoom_EditClass)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClassId != that1.ClassId {
		return false
	}
	if this.ClassName != that1.ClassName {
		return false
	}
	return true
}
func (this *EvtClassRoom_ActiveConversation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtClassRoom_ActiveConversation)
	if !ok {
		that2, ok := that.(EvtClassRoom_ActiveConversation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClassId != that1.ClassId {
		return false
	}
	if this.Active != that1.Active {
		return false
	}
	return true
}
func (this *EvtLesson) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtLesson)
	if !ok {
		that2, ok := that.(EvtLesson)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Message == nil {
		if this.Message != nil {
			return false
		}
	} else if this.Message == nil {
		return false
	} else if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *EvtLesson_CreateLessons_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtLesson_CreateLessons_)
	if !ok {
		that2, ok := that.(EvtLesson_CreateLessons_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CreateLessons.Equal(that1.CreateLessons) {
		return false
	}
	return true
}
func (this *EvtLesson_JoinLesson_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtLesson_JoinLesson_)
	if !ok {
		that2, ok := that.(EvtLesson_JoinLesson_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JoinLesson.Equal(that1.JoinLesson) {
		return false
	}
	return true
}
func (this *EvtLesson_UpdateLesson_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtLesson_UpdateLesson_)
	if !ok {
		that2, ok := that.(EvtLesson_UpdateLesson_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateLesson.Equal(that1.UpdateLesson) {
		return false
	}
	return true
}
func (this *EvtLesson_LeaveLesson_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtLesson_LeaveLesson_)
	if !ok {
		that2, ok := that.(EvtLesson_LeaveLesson_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.LeaveLesson.Equal(that1.LeaveLesson) {
		return false
	}
	return true
}
func (this *EvtLesson_EndLiveLesson_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtLesson_EndLiveLesson_)
	if !ok {
		that2, ok := that.(EvtLesson_EndLiveLesson_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EndLiveLesson.Equal(that1.EndLiveLesson) {
		return false
	}
	return true
}
func (this *EvtLesson_Lesson) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtLesson_Lesson)
	if !ok {
		that2, ok := that.(EvtLesson_Lesson)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LessonId != that1.LessonId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.LearnerIds) != len(that1.LearnerIds) {
		return false
	}
	for i := range this.LearnerIds {
		if this.LearnerIds[i] != that1.LearnerIds[i] {
			return false
		}
	}
	return true
}
func (this *EvtLesson_CreateLessons) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtLesson_CreateLessons)
	if !ok {
		that2, ok := that.(EvtLesson_CreateLessons)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Lessons) != len(that1.Lessons) {
		return false
	}
	for i := range this.Lessons {
		if !this.Lessons[i].Equal(that1.Lessons[i]) {
			return false
		}
	}
	return true
}
func (this *EvtLesson_JoinLesson) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtLesson_JoinLesson)
	if !ok {
		that2, ok := that.(EvtLesson_JoinLesson)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LessonId != that1.LessonId {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.UserGroup != that1.UserGroup {
		return false
	}
	return true
}
func (this *EvtLesson_UpdateLesson) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtLesson_UpdateLesson)
	if !ok {
		that2, ok := that.(EvtLesson_UpdateLesson)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LessonId != that1.LessonId {
		return false
	}
	if this.ClassName != that1.ClassName {
		return false
	}
	if len(this.LearnerIds) != len(that1.LearnerIds) {
		return false
	}
	for i := range this.LearnerIds {
		if this.LearnerIds[i] != that1.LearnerIds[i] {
			return false
		}
	}
	return true
}
func (this *EvtLesson_LeaveLesson) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtLesson_LeaveLesson)
	if !ok {
		that2, ok := that.(EvtLesson_LeaveLesson)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LessonId != that1.LessonId {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	return true
}
func (this *EvtLesson_EndLiveLesson) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtLesson_EndLiveLesson)
	if !ok {
		that2, ok := that.(EvtLesson_EndLiveLesson)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LessonId != that1.LessonId {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	return true
}
func (this *EvtUserInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EvtUserInfo)
	if !ok {
		that2, ok := that.(EvtUserInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.DeviceToken != that1.DeviceToken {
		return false
	}
	if this.AllowNotification != that1.AllowNotification {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *ProcessAllocateStudentQuestionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProcessAllocateStudentQuestionRequest)
	if !ok {
		that2, ok := that.(ProcessAllocateStudentQuestionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	return true
}
func (this *ProcessAllocateStudentQuestionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProcessAllocateStudentQuestionResponse)
	if !ok {
		that2, ok := that.(ProcessAllocateStudentQuestionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalAllocated != that1.TotalAllocated {
		return false
	}
	if this.TotalNotAllocated != that1.TotalNotAllocated {
		return false
	}
	return true
}
func (this *ProcessArchivedStudentQuestionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProcessArchivedStudentQuestionRequest)
	if !ok {
		that2, ok := that.(ProcessArchivedStudentQuestionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	return true
}
func (this *ProcessArchivedStudentQuestionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProcessArchivedStudentQuestionResponse)
	if !ok {
		that2, ok := that.(ProcessArchivedStudentQuestionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalStudentQuestions != that1.TotalStudentQuestions {
		return false
	}
	return true
}
func (this *ProcessDisableProcessingStudentQuestionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProcessDisableProcessingStudentQuestionRequest)
	if !ok {
		that2, ok := that.(ProcessDisableProcessingStudentQuestionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	return true
}
func (this *ProcessDisableProcessingStudentQuestionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProcessDisableProcessingStudentQuestionResponse)
	if !ok {
		that2, ok := that.(ProcessDisableProcessingStudentQuestionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalStudentQuestions != that1.TotalStudentQuestions {
		return false
	}
	return true
}
func (this *ProcessTimeOutSolvedStudentQuestionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProcessTimeOutSolvedStudentQuestionRequest)
	if !ok {
		that2, ok := that.(ProcessTimeOutSolvedStudentQuestionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.StudentQuestionIds) != len(that1.StudentQuestionIds) {
		return false
	}
	for i := range this.StudentQuestionIds {
		if this.StudentQuestionIds[i] != that1.StudentQuestionIds[i] {
			return false
		}
	}
	return true
}
func (this *ProcessTimeOutSolvedStudentQuestionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProcessTimeOutSolvedStudentQuestionResponse)
	if !ok {
		that2, ok := that.(ProcessTimeOutSolvedStudentQuestionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalStudentQuestions != that1.TotalStudentQuestions {
		return false
	}
	return true
}
func (this *ProcessTimeOutOrderRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProcessTimeOutOrderRequest)
	if !ok {
		that2, ok := that.(ProcessTimeOutOrderRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	if this.Gateway != that1.Gateway {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *ProcessTimeOutOrderResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProcessTimeOutOrderResponse)
	if !ok {
		that2, ok := that.(ProcessTimeOutOrderResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.OrderIds) != len(that1.OrderIds) {
		return false
	}
	for i := range this.OrderIds {
		if this.OrderIds[i] != that1.OrderIds[i] {
			return false
		}
	}
	return true
}
func (this *ProcessCancelCodOrderExpiredRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProcessCancelCodOrderExpiredRequest)
	if !ok {
		that2, ok := that.(ProcessCancelCodOrderExpiredRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	return true
}
func (this *ProcessCancelCodOrderExpiredResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProcessCancelCodOrderExpiredResponse)
	if !ok {
		that2, ok := that.(ProcessCancelCodOrderExpiredResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalCodOrders != that1.TotalCodOrders {
		return false
	}
	return true
}
func (this *RetrieveTopicIconRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveTopicIconRequest)
	if !ok {
		that2, ok := that.(RetrieveTopicIconRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TopicId != that1.TopicId {
		return false
	}
	return true
}
func (this *RetrieveTopicIconResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveTopicIconResponse)
	if !ok {
		that2, ok := that.(RetrieveTopicIconResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	return true
}
func (this *CheckWaitingForAssignedQuestionsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CheckWaitingForAssignedQuestionsRequest)
	if !ok {
		that2, ok := that.(CheckWaitingForAssignedQuestionsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	if this.Quota != that1.Quota {
		return false
	}
	return true
}
func (this *CheckWaitingForAssignedQuestionsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CheckWaitingForAssignedQuestionsResponse)
	if !ok {
		that2, ok := that.(CheckWaitingForAssignedQuestionsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalWaitingForAssignedQuestions != that1.TotalWaitingForAssignedQuestions {
		return false
	}
	return true
}
func (this *AssignmentEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AssignmentEvent)
	if !ok {
		that2, ok := that.(AssignmentEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Event == nil {
		if this.Event != nil {
			return false
		}
	} else if this.Event == nil {
		return false
	} else if !this.Event.Equal(that1.Event) {
		return false
	}
	return true
}
func (this *AssignmentEvent_Assigned_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AssignmentEvent_Assigned_)
	if !ok {
		that2, ok := that.(AssignmentEvent_Assigned_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Assigned.Equal(that1.Assigned) {
		return false
	}
	return true
}
func (this *AssignmentEvent_Returned_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AssignmentEvent_Returned_)
	if !ok {
		that2, ok := that.(AssignmentEvent_Returned_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Returned.Equal(that1.Returned) {
		return false
	}
	return true
}
func (this *AssignmentEvent_Submitted_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AssignmentEvent_Submitted_)
	if !ok {
		that2, ok := that.(AssignmentEvent_Submitted_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Submitted.Equal(that1.Submitted) {
		return false
	}
	return true
}
func (this *AssignmentEvent_Updated_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AssignmentEvent_Updated_)
	if !ok {
		that2, ok := that.(AssignmentEvent_Updated_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Updated.Equal(that1.Updated) {
		return false
	}
	return true
}
func (this *AssignmentEvent_Assigned) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AssignmentEvent_Assigned)
	if !ok {
		that2, ok := that.(AssignmentEvent_Assigned)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AssignmentId != that1.AssignmentId {
		return false
	}
	if this.ClassId != that1.ClassId {
		return false
	}
	if len(this.StudentIds) != len(that1.StudentIds) {
		return false
	}
	for i := range this.StudentIds {
		if this.StudentIds[i] != that1.StudentIds[i] {
			return false
		}
	}
	return true
}
func (this *AssignmentEvent_Returned) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AssignmentEvent_Returned)
	if !ok {
		that2, ok := that.(AssignmentEvent_Returned)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SubmissionId != that1.SubmissionId {
		return false
	}
	if this.GivenScore != that1.GivenScore {
		return false
	}
	if this.TotalScore != that1.TotalScore {
		return false
	}
	return true
}
func (this *AssignmentEvent_Submitted) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AssignmentEvent_Submitted)
	if !ok {
		that2, ok := that.(AssignmentEvent_Submitted)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SubmissionId != that1.SubmissionId {
		return false
	}
	return true
}
func (this *AssignmentEvent_Updated) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AssignmentEvent_Updated)
	if !ok {
		that2, ok := that.(AssignmentEvent_Updated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AssignmentId != that1.AssignmentId {
		return false
	}
	if !this.StartDate.Equal(that1.StartDate) {
		return false
	}
	if !this.EndDate.Equal(that1.EndDate) {
		return false
	}
	return true
}
func (this *EvtStudentQuestion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.EvtStudentQuestion{")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvtStudentQuestion_CreateStudentQuestion_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.EvtStudentQuestion_CreateStudentQuestion_{` +
		`CreateStudentQuestion:` + fmt.Sprintf("%#v", this.CreateStudentQuestion) + `}`}, ", ")
	return s
}
func (this *EvtStudentQuestion_AllocateStudentQuestion_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.EvtStudentQuestion_AllocateStudentQuestion_{` +
		`AllocateStudentQuestion:` + fmt.Sprintf("%#v", this.AllocateStudentQuestion) + `}`}, ", ")
	return s
}
func (this *EvtStudentQuestion_EventMessageChat_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.EvtStudentQuestion_EventMessageChat_{` +
		`EventMessageChat:` + fmt.Sprintf("%#v", this.EventMessageChat) + `}`}, ", ")
	return s
}
func (this *EvtStudentQuestion_EventArchivedQuestion_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.EvtStudentQuestion_EventArchivedQuestion_{` +
		`EventArchivedQuestion:` + fmt.Sprintf("%#v", this.EventArchivedQuestion) + `}`}, ", ")
	return s
}
func (this *EvtStudentQuestion_CreateStudentQuestion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.EvtStudentQuestion_CreateStudentQuestion{")
	s = append(s, "StudentId: "+fmt.Sprintf("%#v", this.StudentId)+",\n")
	s = append(s, "StudentQuestionId: "+fmt.Sprintf("%#v", this.StudentQuestionId)+",\n")
	s = append(s, "QuizId: "+fmt.Sprintf("%#v", this.QuizId)+",\n")
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	s = append(s, "UrlMedias: "+fmt.Sprintf("%#v", this.UrlMedias)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvtStudentQuestion_AllocateStudentQuestion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.EvtStudentQuestion_AllocateStudentQuestion{")
	s = append(s, "StudentQuestionId: "+fmt.Sprintf("%#v", this.StudentQuestionId)+",\n")
	s = append(s, "TutorId: "+fmt.Sprintf("%#v", this.TutorId)+",\n")
	s = append(s, "NotificationTitle: "+fmt.Sprintf("%#v", this.NotificationTitle)+",\n")
	s = append(s, "NotificationBody: "+fmt.Sprintf("%#v", this.NotificationBody)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvtStudentQuestion_EventMessageChat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.EvtStudentQuestion_EventMessageChat{")
	s = append(s, "StudentQuestionId: "+fmt.Sprintf("%#v", this.StudentQuestionId)+",\n")
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	s = append(s, "NotificationTitle: "+fmt.Sprintf("%#v", this.NotificationTitle)+",\n")
	s = append(s, "NotificationBody: "+fmt.Sprintf("%#v", this.NotificationBody)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvtStudentQuestion_EventArchivedQuestion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.EvtStudentQuestion_EventArchivedQuestion{")
	s = append(s, "StudentQuestionId: "+fmt.Sprintf("%#v", this.StudentQuestionId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvtAllocateStudentQuestion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.EvtAllocateStudentQuestion{")
	s = append(s, "StudentQuestionId: "+fmt.Sprintf("%#v", this.StudentQuestionId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetryWithDelayEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.RetryWithDelayEvent{")
	if this.When != nil {
		s = append(s, "When: "+fmt.Sprintf("%#v", this.When)+",\n")
	}
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetryWithDelayEvent_EvtAllocateStudentQuestion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.RetryWithDelayEvent_EvtAllocateStudentQuestion{` +
		`EvtAllocateStudentQuestion:` + fmt.Sprintf("%#v", this.EvtAllocateStudentQuestion) + `}`}, ", ")
	return s
}
func (this *EvtCoachAuto) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.EvtCoachAuto{")
	s = append(s, "Event: "+fmt.Sprintf("%#v", this.Event)+",\n")
	s = append(s, "StudentId: "+fmt.Sprintf("%#v", this.StudentId)+",\n")
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StudentLearning) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.StudentLearning{")
	s = append(s, "StudentId: "+fmt.Sprintf("%#v", this.StudentId)+",\n")
	s = append(s, "Event: "+fmt.Sprintf("%#v", this.Event)+",\n")
	s = append(s, "PromotionId: "+fmt.Sprintf("%#v", this.PromotionId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvtClassRoom) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.EvtClassRoom{")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvtClassRoom_CreateClass_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.EvtClassRoom_CreateClass_{` +
		`CreateClass:` + fmt.Sprintf("%#v", this.CreateClass) + `}`}, ", ")
	return s
}
func (this *EvtClassRoom_JoinClass_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.EvtClassRoom_JoinClass_{` +
		`JoinClass:` + fmt.Sprintf("%#v", this.JoinClass) + `}`}, ", ")
	return s
}
func (this *EvtClassRoom_LeaveClass_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.EvtClassRoom_LeaveClass_{` +
		`LeaveClass:` + fmt.Sprintf("%#v", this.LeaveClass) + `}`}, ", ")
	return s
}
func (this *EvtClassRoom_EditClass_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.EvtClassRoom_EditClass_{` +
		`EditClass:` + fmt.Sprintf("%#v", this.EditClass) + `}`}, ", ")
	return s
}
func (this *EvtClassRoom_ActiveConversation_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.EvtClassRoom_ActiveConversation_{` +
		`ActiveConversation:` + fmt.Sprintf("%#v", this.ActiveConversation) + `}`}, ", ")
	return s
}
func (this *EvtClassRoom_CreateClass) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.EvtClassRoom_CreateClass{")
	s = append(s, "ClassId: "+fmt.Sprintf("%#v", this.ClassId)+",\n")
	s = append(s, "TeacherId: "+fmt.Sprintf("%#v", this.TeacherId)+",\n")
	s = append(s, "ClassName: "+fmt.Sprintf("%#v", this.ClassName)+",\n")
	s = append(s, "TeacherIds: "+fmt.Sprintf("%#v", this.TeacherIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvtClassRoom_JoinClass) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.EvtClassRoom_JoinClass{")
	s = append(s, "ClassId: "+fmt.Sprintf("%#v", this.ClassId)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "UserGroup: "+fmt.Sprintf("%#v", this.UserGroup)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvtClassRoom_LeaveClass) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.EvtClassRoom_LeaveClass{")
	s = append(s, "ClassId: "+fmt.Sprintf("%#v", this.ClassId)+",\n")
	s = append(s, "UserIds: "+fmt.Sprintf("%#v", this.UserIds)+",\n")
	s = append(s, "IsKicked: "+fmt.Sprintf("%#v", this.IsKicked)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvtClassRoom_EditClass) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.EvtClassRoom_EditClass{")
	s = append(s, "ClassId: "+fmt.Sprintf("%#v", this.ClassId)+",\n")
	s = append(s, "ClassName: "+fmt.Sprintf("%#v", this.ClassName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvtClassRoom_ActiveConversation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.EvtClassRoom_ActiveConversation{")
	s = append(s, "ClassId: "+fmt.Sprintf("%#v", this.ClassId)+",\n")
	s = append(s, "Active: "+fmt.Sprintf("%#v", this.Active)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvtLesson) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.EvtLesson{")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvtLesson_CreateLessons_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.EvtLesson_CreateLessons_{` +
		`CreateLessons:` + fmt.Sprintf("%#v", this.CreateLessons) + `}`}, ", ")
	return s
}
func (this *EvtLesson_JoinLesson_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.EvtLesson_JoinLesson_{` +
		`JoinLesson:` + fmt.Sprintf("%#v", this.JoinLesson) + `}`}, ", ")
	return s
}
func (this *EvtLesson_UpdateLesson_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.EvtLesson_UpdateLesson_{` +
		`UpdateLesson:` + fmt.Sprintf("%#v", this.UpdateLesson) + `}`}, ", ")
	return s
}
func (this *EvtLesson_LeaveLesson_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.EvtLesson_LeaveLesson_{` +
		`LeaveLesson:` + fmt.Sprintf("%#v", this.LeaveLesson) + `}`}, ", ")
	return s
}
func (this *EvtLesson_EndLiveLesson_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.EvtLesson_EndLiveLesson_{` +
		`EndLiveLesson:` + fmt.Sprintf("%#v", this.EndLiveLesson) + `}`}, ", ")
	return s
}
func (this *EvtLesson_Lesson) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.EvtLesson_Lesson{")
	s = append(s, "LessonId: "+fmt.Sprintf("%#v", this.LessonId)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "LearnerIds: "+fmt.Sprintf("%#v", this.LearnerIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvtLesson_CreateLessons) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.EvtLesson_CreateLessons{")
	if this.Lessons != nil {
		s = append(s, "Lessons: "+fmt.Sprintf("%#v", this.Lessons)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvtLesson_JoinLesson) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.EvtLesson_JoinLesson{")
	s = append(s, "LessonId: "+fmt.Sprintf("%#v", this.LessonId)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "UserGroup: "+fmt.Sprintf("%#v", this.UserGroup)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvtLesson_UpdateLesson) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.EvtLesson_UpdateLesson{")
	s = append(s, "LessonId: "+fmt.Sprintf("%#v", this.LessonId)+",\n")
	s = append(s, "ClassName: "+fmt.Sprintf("%#v", this.ClassName)+",\n")
	s = append(s, "LearnerIds: "+fmt.Sprintf("%#v", this.LearnerIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvtLesson_LeaveLesson) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.EvtLesson_LeaveLesson{")
	s = append(s, "LessonId: "+fmt.Sprintf("%#v", this.LessonId)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvtLesson_EndLiveLesson) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.EvtLesson_EndLiveLesson{")
	s = append(s, "LessonId: "+fmt.Sprintf("%#v", this.LessonId)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EvtUserInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.EvtUserInfo{")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "DeviceToken: "+fmt.Sprintf("%#v", this.DeviceToken)+",\n")
	s = append(s, "AllowNotification: "+fmt.Sprintf("%#v", this.AllowNotification)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProcessAllocateStudentQuestionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ProcessAllocateStudentQuestionRequest{")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProcessAllocateStudentQuestionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.ProcessAllocateStudentQuestionResponse{")
	s = append(s, "TotalAllocated: "+fmt.Sprintf("%#v", this.TotalAllocated)+",\n")
	s = append(s, "TotalNotAllocated: "+fmt.Sprintf("%#v", this.TotalNotAllocated)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProcessArchivedStudentQuestionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.ProcessArchivedStudentQuestionRequest{")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProcessArchivedStudentQuestionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ProcessArchivedStudentQuestionResponse{")
	s = append(s, "TotalStudentQuestions: "+fmt.Sprintf("%#v", this.TotalStudentQuestions)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProcessDisableProcessingStudentQuestionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ProcessDisableProcessingStudentQuestionRequest{")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProcessDisableProcessingStudentQuestionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ProcessDisableProcessingStudentQuestionResponse{")
	s = append(s, "TotalStudentQuestions: "+fmt.Sprintf("%#v", this.TotalStudentQuestions)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProcessTimeOutSolvedStudentQuestionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ProcessTimeOutSolvedStudentQuestionRequest{")
	s = append(s, "StudentQuestionIds: "+fmt.Sprintf("%#v", this.StudentQuestionIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProcessTimeOutSolvedStudentQuestionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ProcessTimeOutSolvedStudentQuestionResponse{")
	s = append(s, "TotalStudentQuestions: "+fmt.Sprintf("%#v", this.TotalStudentQuestions)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProcessTimeOutOrderRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.ProcessTimeOutOrderRequest{")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "Gateway: "+fmt.Sprintf("%#v", this.Gateway)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProcessTimeOutOrderResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ProcessTimeOutOrderResponse{")
	s = append(s, "OrderIds: "+fmt.Sprintf("%#v", this.OrderIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProcessCancelCodOrderExpiredRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.ProcessCancelCodOrderExpiredRequest{")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProcessCancelCodOrderExpiredResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ProcessCancelCodOrderExpiredResponse{")
	s = append(s, "TotalCodOrders: "+fmt.Sprintf("%#v", this.TotalCodOrders)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveTopicIconRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RetrieveTopicIconRequest{")
	s = append(s, "TopicId: "+fmt.Sprintf("%#v", this.TopicId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveTopicIconResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RetrieveTopicIconResponse{")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CheckWaitingForAssignedQuestionsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CheckWaitingForAssignedQuestionsRequest{")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "Quota: "+fmt.Sprintf("%#v", this.Quota)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CheckWaitingForAssignedQuestionsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CheckWaitingForAssignedQuestionsResponse{")
	s = append(s, "TotalWaitingForAssignedQuestions: "+fmt.Sprintf("%#v", this.TotalWaitingForAssignedQuestions)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AssignmentEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.AssignmentEvent{")
	if this.Event != nil {
		s = append(s, "Event: "+fmt.Sprintf("%#v", this.Event)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AssignmentEvent_Assigned_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.AssignmentEvent_Assigned_{` +
		`Assigned:` + fmt.Sprintf("%#v", this.Assigned) + `}`}, ", ")
	return s
}
func (this *AssignmentEvent_Returned_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.AssignmentEvent_Returned_{` +
		`Returned:` + fmt.Sprintf("%#v", this.Returned) + `}`}, ", ")
	return s
}
func (this *AssignmentEvent_Submitted_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.AssignmentEvent_Submitted_{` +
		`Submitted:` + fmt.Sprintf("%#v", this.Submitted) + `}`}, ", ")
	return s
}
func (this *AssignmentEvent_Updated_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.AssignmentEvent_Updated_{` +
		`Updated:` + fmt.Sprintf("%#v", this.Updated) + `}`}, ", ")
	return s
}
func (this *AssignmentEvent_Assigned) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.AssignmentEvent_Assigned{")
	s = append(s, "AssignmentId: "+fmt.Sprintf("%#v", this.AssignmentId)+",\n")
	s = append(s, "ClassId: "+fmt.Sprintf("%#v", this.ClassId)+",\n")
	s = append(s, "StudentIds: "+fmt.Sprintf("%#v", this.StudentIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AssignmentEvent_Returned) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.AssignmentEvent_Returned{")
	s = append(s, "SubmissionId: "+fmt.Sprintf("%#v", this.SubmissionId)+",\n")
	s = append(s, "GivenScore: "+fmt.Sprintf("%#v", this.GivenScore)+",\n")
	s = append(s, "TotalScore: "+fmt.Sprintf("%#v", this.TotalScore)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AssignmentEvent_Submitted) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.AssignmentEvent_Submitted{")
	s = append(s, "SubmissionId: "+fmt.Sprintf("%#v", this.SubmissionId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AssignmentEvent_Updated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.AssignmentEvent_Updated{")
	s = append(s, "AssignmentId: "+fmt.Sprintf("%#v", this.AssignmentId)+",\n")
	if this.StartDate != nil {
		s = append(s, "StartDate: "+fmt.Sprintf("%#v", this.StartDate)+",\n")
	}
	if this.EndDate != nil {
		s = append(s, "EndDate: "+fmt.Sprintf("%#v", this.EndDate)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringInternal(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InternalClient is the client API for Internal service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InternalClient interface {
	ProcessAllocateStudentQuestion(ctx context.Context, in *ProcessAllocateStudentQuestionRequest, opts ...grpc.CallOption) (*ProcessAllocateStudentQuestionResponse, error)
	ProcessArchivedStudentQuestion(ctx context.Context, in *ProcessArchivedStudentQuestionRequest, opts ...grpc.CallOption) (*ProcessArchivedStudentQuestionResponse, error)
	ProcessDisableProcessingStudentQuestion(ctx context.Context, in *ProcessDisableProcessingStudentQuestionRequest, opts ...grpc.CallOption) (*ProcessDisableProcessingStudentQuestionResponse, error)
	ProcessTimeOutSolvedStudentQuestion(ctx context.Context, in *ProcessTimeOutSolvedStudentQuestionRequest, opts ...grpc.CallOption) (*ProcessTimeOutSolvedStudentQuestionResponse, error)
	ProcessTimeOutOrder(ctx context.Context, in *ProcessTimeOutOrderRequest, opts ...grpc.CallOption) (*ProcessTimeOutOrderResponse, error)
	ProcessCancelCodOrderExpired(ctx context.Context, in *ProcessCancelCodOrderExpiredRequest, opts ...grpc.CallOption) (*ProcessCancelCodOrderExpiredResponse, error)
	RetrieveTopicIcon(ctx context.Context, in *RetrieveTopicIconRequest, opts ...grpc.CallOption) (*RetrieveTopicIconResponse, error)
	CheckWaitingForAssignedQuestions(ctx context.Context, in *CheckWaitingForAssignedQuestionsRequest, opts ...grpc.CallOption) (*CheckWaitingForAssignedQuestionsResponse, error)
}

type internalClient struct {
	cc *grpc.ClientConn
}

func NewInternalClient(cc *grpc.ClientConn) InternalClient {
	return &internalClient{cc}
}

func (c *internalClient) ProcessAllocateStudentQuestion(ctx context.Context, in *ProcessAllocateStudentQuestionRequest, opts ...grpc.CallOption) (*ProcessAllocateStudentQuestionResponse, error) {
	out := new(ProcessAllocateStudentQuestionResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Internal/ProcessAllocateStudentQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) ProcessArchivedStudentQuestion(ctx context.Context, in *ProcessArchivedStudentQuestionRequest, opts ...grpc.CallOption) (*ProcessArchivedStudentQuestionResponse, error) {
	out := new(ProcessArchivedStudentQuestionResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Internal/ProcessArchivedStudentQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalClient) ProcessDisableProcessingStudentQuestion(ctx context.Context, in *ProcessDisableProcessingStudentQuestionRequest, opts ...grpc.CallOption) (*ProcessDisableProcessingStudentQuestionResponse, error) {
	out := new(ProcessDisableProcessingStudentQuestionResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Internal/ProcessDisableProcessingStudentQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *internalClient) ProcessTimeOutSolvedStudentQuestion(ctx context.Context, in *ProcessTimeOutSolvedStudentQuestionRequest, opts ...grpc.CallOption) (*ProcessTimeOutSolvedStudentQuestionResponse, error) {
	out := new(ProcessTimeOutSolvedStudentQuestionResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Internal/ProcessTimeOutSolvedStudentQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *internalClient) ProcessTimeOutOrder(ctx context.Context, in *ProcessTimeOutOrderRequest, opts ...grpc.CallOption) (*ProcessTimeOutOrderResponse, error) {
	out := new(ProcessTimeOutOrderResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Internal/ProcessTimeOutOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *internalClient) ProcessCancelCodOrderExpired(ctx context.Context, in *ProcessCancelCodOrderExpiredRequest, opts ...grpc.CallOption) (*ProcessCancelCodOrderExpiredResponse, error) {
	out := new(ProcessCancelCodOrderExpiredResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Internal/ProcessCancelCodOrderExpired", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *internalClient) RetrieveTopicIcon(ctx context.Context, in *RetrieveTopicIconRequest, opts ...grpc.CallOption) (*RetrieveTopicIconResponse, error) {
	out := new(RetrieveTopicIconResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Internal/RetrieveTopicIcon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *internalClient) CheckWaitingForAssignedQuestions(ctx context.Context, in *CheckWaitingForAssignedQuestionsRequest, opts ...grpc.CallOption) (*CheckWaitingForAssignedQuestionsResponse, error) {
	out := new(CheckWaitingForAssignedQuestionsResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Internal/CheckWaitingForAssignedQuestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalServer is the server API for Internal service.
type InternalServer interface {
	ProcessAllocateStudentQuestion(context.Context, *ProcessAllocateStudentQuestionRequest) (*ProcessAllocateStudentQuestionResponse, error)
	ProcessArchivedStudentQuestion(context.Context, *ProcessArchivedStudentQuestionRequest) (*ProcessArchivedStudentQuestionResponse, error)
	ProcessDisableProcessingStudentQuestion(context.Context, *ProcessDisableProcessingStudentQuestionRequest) (*ProcessDisableProcessingStudentQuestionResponse, error)
	ProcessTimeOutSolvedStudentQuestion(context.Context, *ProcessTimeOutSolvedStudentQuestionRequest) (*ProcessTimeOutSolvedStudentQuestionResponse, error)
	ProcessTimeOutOrder(context.Context, *ProcessTimeOutOrderRequest) (*ProcessTimeOutOrderResponse, error)
	ProcessCancelCodOrderExpired(context.Context, *ProcessCancelCodOrderExpiredRequest) (*ProcessCancelCodOrderExpiredResponse, error)
	RetrieveTopicIcon(context.Context, *RetrieveTopicIconRequest) (*RetrieveTopicIconResponse, error)
	CheckWaitingForAssignedQuestions(context.Context, *CheckWaitingForAssignedQuestionsRequest) (*CheckWaitingForAssignedQuestionsResponse, error)
}

// UnimplementedInternalServer can be embedded to have forward compatible implementations.
type UnimplementedInternalServer struct {
}

func (*UnimplementedInternalServer) ProcessAllocateStudentQuestion(ctx context.Context, req *ProcessAllocateStudentQuestionRequest) (*ProcessAllocateStudentQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessAllocateStudentQuestion not implemented")
}
func (*UnimplementedInternalServer) ProcessArchivedStudentQuestion(ctx context.Context, req *ProcessArchivedStudentQuestionRequest) (*ProcessArchivedStudentQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessArchivedStudentQuestion not implemented")
}
func (*UnimplementedInternalServer) ProcessDisableProcessingStudentQuestion(ctx context.Context, req *ProcessDisableProcessingStudentQuestionRequest) (*ProcessDisableProcessingStudentQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessDisableProcessingStudentQuestion not implemented")
}
func (*UnimplementedInternalServer) ProcessTimeOutSolvedStudentQuestion(ctx context.Context, req *ProcessTimeOutSolvedStudentQuestionRequest) (*ProcessTimeOutSolvedStudentQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessTimeOutSolvedStudentQuestion not implemented")
}
func (*UnimplementedInternalServer) ProcessTimeOutOrder(ctx context.Context, req *ProcessTimeOutOrderRequest) (*ProcessTimeOutOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessTimeOutOrder not implemented")
}
func (*UnimplementedInternalServer) ProcessCancelCodOrderExpired(ctx context.Context, req *ProcessCancelCodOrderExpiredRequest) (*ProcessCancelCodOrderExpiredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessCancelCodOrderExpired not implemented")
}
func (*UnimplementedInternalServer) RetrieveTopicIcon(ctx context.Context, req *RetrieveTopicIconRequest) (*RetrieveTopicIconResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveTopicIcon not implemented")
}
func (*UnimplementedInternalServer) CheckWaitingForAssignedQuestions(ctx context.Context, req *CheckWaitingForAssignedQuestionsRequest) (*CheckWaitingForAssignedQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckWaitingForAssignedQuestions not implemented")
}

func RegisterInternalServer(s *grpc.Server, srv InternalServer) {
	s.RegisterService(&_Internal_serviceDesc, srv)
}

func _Internal_ProcessAllocateStudentQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessAllocateStudentQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).ProcessAllocateStudentQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Internal/ProcessAllocateStudentQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).ProcessAllocateStudentQuestion(ctx, req.(*ProcessAllocateStudentQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_ProcessArchivedStudentQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessArchivedStudentQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).ProcessArchivedStudentQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Internal/ProcessArchivedStudentQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).ProcessArchivedStudentQuestion(ctx, req.(*ProcessArchivedStudentQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_ProcessDisableProcessingStudentQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessDisableProcessingStudentQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).ProcessDisableProcessingStudentQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Internal/ProcessDisableProcessingStudentQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).ProcessDisableProcessingStudentQuestion(ctx, req.(*ProcessDisableProcessingStudentQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_ProcessTimeOutSolvedStudentQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessTimeOutSolvedStudentQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).ProcessTimeOutSolvedStudentQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Internal/ProcessTimeOutSolvedStudentQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).ProcessTimeOutSolvedStudentQuestion(ctx, req.(*ProcessTimeOutSolvedStudentQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_ProcessTimeOutOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessTimeOutOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).ProcessTimeOutOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Internal/ProcessTimeOutOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).ProcessTimeOutOrder(ctx, req.(*ProcessTimeOutOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_ProcessCancelCodOrderExpired_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessCancelCodOrderExpiredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).ProcessCancelCodOrderExpired(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Internal/ProcessCancelCodOrderExpired",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).ProcessCancelCodOrderExpired(ctx, req.(*ProcessCancelCodOrderExpiredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_RetrieveTopicIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveTopicIconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).RetrieveTopicIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Internal/RetrieveTopicIcon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).RetrieveTopicIcon(ctx, req.(*RetrieveTopicIconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Internal_CheckWaitingForAssignedQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckWaitingForAssignedQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServer).CheckWaitingForAssignedQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Internal/CheckWaitingForAssignedQuestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServer).CheckWaitingForAssignedQuestions(ctx, req.(*CheckWaitingForAssignedQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Internal_serviceDesc = grpc.ServiceDesc{
	ServiceName: "manabie.bob.Internal",
	HandlerType: (*InternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessAllocateStudentQuestion",
			Handler:    _Internal_ProcessAllocateStudentQuestion_Handler,
		},
		{
			MethodName: "ProcessArchivedStudentQuestion",
			Handler:    _Internal_ProcessArchivedStudentQuestion_Handler,
		},
		{
			MethodName: "ProcessDisableProcessingStudentQuestion",
			Handler:    _Internal_ProcessDisableProcessingStudentQuestion_Handler,
		},
		{
			MethodName: "ProcessTimeOutSolvedStudentQuestion",
			Handler:    _Internal_ProcessTimeOutSolvedStudentQuestion_Handler,
		},
		{
			MethodName: "ProcessTimeOutOrder",
			Handler:    _Internal_ProcessTimeOutOrder_Handler,
		},
		{
			MethodName: "ProcessCancelCodOrderExpired",
			Handler:    _Internal_ProcessCancelCodOrderExpired_Handler,
		},
		{
			MethodName: "RetrieveTopicIcon",
			Handler:    _Internal_RetrieveTopicIcon_Handler,
		},
		{
			MethodName: "CheckWaitingForAssignedQuestions",
			Handler:    _Internal_CheckWaitingForAssignedQuestions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal.proto",
}

func (m *EvtStudentQuestion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvtStudentQuestion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtStudentQuestion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size := m.Message.Size()
			i -= size
			if _, err := m.Message.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *EvtStudentQuestion_CreateStudentQuestion_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtStudentQuestion_CreateStudentQuestion_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CreateStudentQuestion != nil {
		{
			size, err := m.CreateStudentQuestion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *EvtStudentQuestion_AllocateStudentQuestion_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtStudentQuestion_AllocateStudentQuestion_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllocateStudentQuestion != nil {
		{
			size, err := m.AllocateStudentQuestion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *EvtStudentQuestion_EventMessageChat_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtStudentQuestion_EventMessageChat_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EventMessageChat != nil {
		{
			size, err := m.EventMessageChat.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *EvtStudentQuestion_EventArchivedQuestion_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtStudentQuestion_EventArchivedQuestion_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EventArchivedQuestion != nil {
		{
			size, err := m.EventArchivedQuestion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *EvtStudentQuestion_CreateStudentQuestion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvtStudentQuestion_CreateStudentQuestion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtStudentQuestion_CreateStudentQuestion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.UrlMedias) > 0 {
		for iNdEx := len(m.UrlMedias) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UrlMedias[iNdEx])
			copy(dAtA[i:], m.UrlMedias[iNdEx])
			i = encodeVarintInternal(dAtA, i, uint64(len(m.UrlMedias[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.QuizId) > 0 {
		i -= len(m.QuizId)
		copy(dAtA[i:], m.QuizId)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.QuizId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StudentQuestionId) > 0 {
		i -= len(m.StudentQuestionId)
		copy(dAtA[i:], m.StudentQuestionId)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.StudentQuestionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EvtStudentQuestion_AllocateStudentQuestion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvtStudentQuestion_AllocateStudentQuestion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtStudentQuestion_AllocateStudentQuestion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NotificationBody) > 0 {
		i -= len(m.NotificationBody)
		copy(dAtA[i:], m.NotificationBody)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.NotificationBody)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NotificationTitle) > 0 {
		i -= len(m.NotificationTitle)
		copy(dAtA[i:], m.NotificationTitle)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.NotificationTitle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TutorId) > 0 {
		i -= len(m.TutorId)
		copy(dAtA[i:], m.TutorId)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.TutorId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StudentQuestionId) > 0 {
		i -= len(m.StudentQuestionId)
		copy(dAtA[i:], m.StudentQuestionId)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.StudentQuestionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EvtStudentQuestion_EventMessageChat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvtStudentQuestion_EventMessageChat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtStudentQuestion_EventMessageChat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NotificationBody) > 0 {
		i -= len(m.NotificationBody)
		copy(dAtA[i:], m.NotificationBody)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.NotificationBody)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NotificationTitle) > 0 {
		i -= len(m.NotificationTitle)
		copy(dAtA[i:], m.NotificationTitle)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.NotificationTitle)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StudentQuestionId) > 0 {
		i -= len(m.StudentQuestionId)
		copy(dAtA[i:], m.StudentQuestionId)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.StudentQuestionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EvtStudentQuestion_EventArchivedQuestion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvtStudentQuestion_EventArchivedQuestion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtStudentQuestion_EventArchivedQuestion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudentQuestionId) > 0 {
		i -= len(m.StudentQuestionId)
		copy(dAtA[i:], m.StudentQuestionId)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.StudentQuestionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EvtAllocateStudentQuestion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvtAllocateStudentQuestion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtAllocateStudentQuestion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudentQuestionId) > 0 {
		i -= len(m.StudentQuestionId)
		copy(dAtA[i:], m.StudentQuestionId)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.StudentQuestionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetryWithDelayEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetryWithDelayEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetryWithDelayEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size := m.Message.Size()
			i -= size
			if _, err := m.Message.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.When != nil {
		{
			size, err := m.When.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetryWithDelayEvent_EvtAllocateStudentQuestion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetryWithDelayEvent_EvtAllocateStudentQuestion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EvtAllocateStudentQuestion != nil {
		{
			size, err := m.EvtAllocateStudentQuestion.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *EvtCoachAuto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvtCoachAuto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtCoachAuto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Event != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.Event))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StudentLearning) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudentLearning) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudentLearning) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PromotionId != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.PromotionId))
		i--
		dAtA[i] = 0x18
	}
	if m.Event != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.Event))
		i--
		dAtA[i] = 0x10
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EvtClassRoom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvtClassRoom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtClassRoom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size := m.Message.Size()
			i -= size
			if _, err := m.Message.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *EvtClassRoom_CreateClass_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtClassRoom_CreateClass_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CreateClass != nil {
		{
			size, err := m.CreateClass.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *EvtClassRoom_JoinClass_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtClassRoom_JoinClass_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JoinClass != nil {
		{
			size, err := m.JoinClass.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *EvtClassRoom_LeaveClass_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtClassRoom_LeaveClass_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LeaveClass != nil {
		{
			size, err := m.LeaveClass.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *EvtClassRoom_EditClass_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtClassRoom_EditClass_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EditClass != nil {
		{
			size, err := m.EditClass.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *EvtClassRoom_ActiveConversation_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtClassRoom_ActiveConversation_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ActiveConversation != nil {
		{
			size, err := m.ActiveConversation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *EvtClassRoom_CreateClass) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvtClassRoom_CreateClass) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtClassRoom_CreateClass) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TeacherIds) > 0 {
		for iNdEx := len(m.TeacherIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TeacherIds[iNdEx])
			copy(dAtA[i:], m.TeacherIds[iNdEx])
			i = encodeVarintInternal(dAtA, i, uint64(len(m.TeacherIds[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ClassName) > 0 {
		i -= len(m.ClassName)
		copy(dAtA[i:], m.ClassName)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.ClassName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TeacherId) > 0 {
		i -= len(m.TeacherId)
		copy(dAtA[i:], m.TeacherId)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.TeacherId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ClassId != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EvtClassRoom_JoinClass) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvtClassRoom_JoinClass) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtClassRoom_JoinClass) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserGroup != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.UserGroup))
		i--
		dAtA[i] = 0x18
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ClassId != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EvtClassRoom_LeaveClass) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvtClassRoom_LeaveClass) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtClassRoom_LeaveClass) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsKicked {
		i--
		if m.IsKicked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.UserIds) > 0 {
		for iNdEx := len(m.UserIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UserIds[iNdEx])
			copy(dAtA[i:], m.UserIds[iNdEx])
			i = encodeVarintInternal(dAtA, i, uint64(len(m.UserIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ClassId != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EvtClassRoom_EditClass) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvtClassRoom_EditClass) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtClassRoom_EditClass) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClassName) > 0 {
		i -= len(m.ClassName)
		copy(dAtA[i:], m.ClassName)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.ClassName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ClassId != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EvtClassRoom_ActiveConversation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvtClassRoom_ActiveConversation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtClassRoom_ActiveConversation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.ClassId != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EvtLesson) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvtLesson) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtLesson) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size := m.Message.Size()
			i -= size
			if _, err := m.Message.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *EvtLesson_CreateLessons_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtLesson_CreateLessons_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.CreateLessons != nil {
		{
			size, err := m.CreateLessons.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *EvtLesson_JoinLesson_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtLesson_JoinLesson_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.JoinLesson != nil {
		{
			size, err := m.JoinLesson.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *EvtLesson_UpdateLesson_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtLesson_UpdateLesson_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateLesson != nil {
		{
			size, err := m.UpdateLesson.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *EvtLesson_LeaveLesson_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtLesson_LeaveLesson_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LeaveLesson != nil {
		{
			size, err := m.LeaveLesson.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *EvtLesson_EndLiveLesson_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtLesson_EndLiveLesson_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EndLiveLesson != nil {
		{
			size, err := m.EndLiveLesson.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *EvtLesson_Lesson) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvtLesson_Lesson) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtLesson_Lesson) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LearnerIds) > 0 {
		for iNdEx := len(m.LearnerIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LearnerIds[iNdEx])
			copy(dAtA[i:], m.LearnerIds[iNdEx])
			i = encodeVarintInternal(dAtA, i, uint64(len(m.LearnerIds[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LessonId) > 0 {
		i -= len(m.LessonId)
		copy(dAtA[i:], m.LessonId)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.LessonId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EvtLesson_CreateLessons) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvtLesson_CreateLessons) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtLesson_CreateLessons) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Lessons) > 0 {
		for iNdEx := len(m.Lessons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Lessons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInternal(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EvtLesson_JoinLesson) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvtLesson_JoinLesson) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtLesson_JoinLesson) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UserGroup != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.UserGroup))
		i--
		dAtA[i] = 0x18
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LessonId) > 0 {
		i -= len(m.LessonId)
		copy(dAtA[i:], m.LessonId)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.LessonId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EvtLesson_UpdateLesson) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvtLesson_UpdateLesson) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtLesson_UpdateLesson) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LearnerIds) > 0 {
		for iNdEx := len(m.LearnerIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LearnerIds[iNdEx])
			copy(dAtA[i:], m.LearnerIds[iNdEx])
			i = encodeVarintInternal(dAtA, i, uint64(len(m.LearnerIds[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ClassName) > 0 {
		i -= len(m.ClassName)
		copy(dAtA[i:], m.ClassName)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.ClassName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LessonId) > 0 {
		i -= len(m.LessonId)
		copy(dAtA[i:], m.LessonId)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.LessonId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EvtLesson_LeaveLesson) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvtLesson_LeaveLesson) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtLesson_LeaveLesson) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LessonId) > 0 {
		i -= len(m.LessonId)
		copy(dAtA[i:], m.LessonId)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.LessonId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EvtLesson_EndLiveLesson) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvtLesson_EndLiveLesson) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtLesson_EndLiveLesson) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LessonId) > 0 {
		i -= len(m.LessonId)
		copy(dAtA[i:], m.LessonId)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.LessonId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EvtUserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EvtUserInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EvtUserInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.AllowNotification {
		i--
		if m.AllowNotification {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.DeviceToken) > 0 {
		i -= len(m.DeviceToken)
		copy(dAtA[i:], m.DeviceToken)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.DeviceToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProcessAllocateStudentQuestionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessAllocateStudentQuestionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessAllocateStudentQuestionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProcessAllocateStudentQuestionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessAllocateStudentQuestionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessAllocateStudentQuestionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalNotAllocated != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.TotalNotAllocated))
		i--
		dAtA[i] = 0x10
	}
	if m.TotalAllocated != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.TotalAllocated))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProcessArchivedStudentQuestionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessArchivedStudentQuestionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessArchivedStudentQuestionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Duration) > 0 {
		i -= len(m.Duration)
		copy(dAtA[i:], m.Duration)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Duration)))
		i--
		dAtA[i] = 0x12
	}
	if m.Limit != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProcessArchivedStudentQuestionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessArchivedStudentQuestionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessArchivedStudentQuestionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalStudentQuestions != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.TotalStudentQuestions))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProcessDisableProcessingStudentQuestionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessDisableProcessingStudentQuestionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessDisableProcessingStudentQuestionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Duration) > 0 {
		i -= len(m.Duration)
		copy(dAtA[i:], m.Duration)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Duration)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProcessDisableProcessingStudentQuestionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessDisableProcessingStudentQuestionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessDisableProcessingStudentQuestionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalStudentQuestions != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.TotalStudentQuestions))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProcessTimeOutSolvedStudentQuestionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessTimeOutSolvedStudentQuestionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessTimeOutSolvedStudentQuestionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudentQuestionIds) > 0 {
		for iNdEx := len(m.StudentQuestionIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StudentQuestionIds[iNdEx])
			copy(dAtA[i:], m.StudentQuestionIds[iNdEx])
			i = encodeVarintInternal(dAtA, i, uint64(len(m.StudentQuestionIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProcessTimeOutSolvedStudentQuestionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessTimeOutSolvedStudentQuestionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessTimeOutSolvedStudentQuestionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalStudentQuestions != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.TotalStudentQuestions))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProcessTimeOutOrderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessTimeOutOrderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessTimeOutOrderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.Gateway != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.Gateway))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Duration) > 0 {
		i -= len(m.Duration)
		copy(dAtA[i:], m.Duration)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Duration)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProcessTimeOutOrderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessTimeOutOrderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessTimeOutOrderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrderIds) > 0 {
		dAtA18 := make([]byte, len(m.OrderIds)*10)
		var j17 int
		for _, num1 := range m.OrderIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA18[j17] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j17++
			}
			dAtA18[j17] = uint8(num)
			j17++
		}
		i -= j17
		copy(dAtA[i:], dAtA18[:j17])
		i = encodeVarintInternal(dAtA, i, uint64(j17))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProcessCancelCodOrderExpiredRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessCancelCodOrderExpiredRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessCancelCodOrderExpiredRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Duration) > 0 {
		i -= len(m.Duration)
		copy(dAtA[i:], m.Duration)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Duration)))
		i--
		dAtA[i] = 0x12
	}
	if m.Limit != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProcessCancelCodOrderExpiredResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessCancelCodOrderExpiredResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessCancelCodOrderExpiredResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalCodOrders != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.TotalCodOrders))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveTopicIconRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveTopicIconRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveTopicIconRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TopicId) > 0 {
		i -= len(m.TopicId)
		copy(dAtA[i:], m.TopicId)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.TopicId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveTopicIconResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveTopicIconResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveTopicIconResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *CheckWaitingForAssignedQuestionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckWaitingForAssignedQuestionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckWaitingForAssignedQuestionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Quota != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.Quota))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Duration) > 0 {
		i -= len(m.Duration)
		copy(dAtA[i:], m.Duration)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.Duration)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CheckWaitingForAssignedQuestionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckWaitingForAssignedQuestionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CheckWaitingForAssignedQuestionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalWaitingForAssignedQuestions != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.TotalWaitingForAssignedQuestions))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AssignmentEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssignmentEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssignmentEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		{
			size := m.Event.Size()
			i -= size
			if _, err := m.Event.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *AssignmentEvent_Assigned_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssignmentEvent_Assigned_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Assigned != nil {
		{
			size, err := m.Assigned.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *AssignmentEvent_Returned_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssignmentEvent_Returned_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Returned != nil {
		{
			size, err := m.Returned.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *AssignmentEvent_Submitted_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssignmentEvent_Submitted_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Submitted != nil {
		{
			size, err := m.Submitted.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *AssignmentEvent_Updated_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssignmentEvent_Updated_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Updated != nil {
		{
			size, err := m.Updated.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *AssignmentEvent_Assigned) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssignmentEvent_Assigned) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssignmentEvent_Assigned) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudentIds) > 0 {
		for iNdEx := len(m.StudentIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StudentIds[iNdEx])
			copy(dAtA[i:], m.StudentIds[iNdEx])
			i = encodeVarintInternal(dAtA, i, uint64(len(m.StudentIds[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ClassId != 0 {
		i = encodeVarintInternal(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AssignmentId) > 0 {
		i -= len(m.AssignmentId)
		copy(dAtA[i:], m.AssignmentId)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.AssignmentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AssignmentEvent_Returned) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssignmentEvent_Returned) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssignmentEvent_Returned) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalScore != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TotalScore))))
		i--
		dAtA[i] = 0x1d
	}
	if m.GivenScore != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.GivenScore))))
		i--
		dAtA[i] = 0x15
	}
	if len(m.SubmissionId) > 0 {
		i -= len(m.SubmissionId)
		copy(dAtA[i:], m.SubmissionId)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.SubmissionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AssignmentEvent_Submitted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssignmentEvent_Submitted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssignmentEvent_Submitted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubmissionId) > 0 {
		i -= len(m.SubmissionId)
		copy(dAtA[i:], m.SubmissionId)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.SubmissionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AssignmentEvent_Updated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssignmentEvent_Updated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssignmentEvent_Updated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndDate != nil {
		{
			size, err := m.EndDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.StartDate != nil {
		{
			size, err := m.StartDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInternal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AssignmentId) > 0 {
		i -= len(m.AssignmentId)
		copy(dAtA[i:], m.AssignmentId)
		i = encodeVarintInternal(dAtA, i, uint64(len(m.AssignmentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintInternal(dAtA []byte, offset int, v uint64) int {
	offset -= sovInternal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EvtStudentQuestion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		n += m.Message.Size()
	}
	return n
}

func (m *EvtStudentQuestion_CreateStudentQuestion_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateStudentQuestion != nil {
		l = m.CreateStudentQuestion.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *EvtStudentQuestion_AllocateStudentQuestion_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllocateStudentQuestion != nil {
		l = m.AllocateStudentQuestion.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *EvtStudentQuestion_EventMessageChat_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventMessageChat != nil {
		l = m.EventMessageChat.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *EvtStudentQuestion_EventArchivedQuestion_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventArchivedQuestion != nil {
		l = m.EventArchivedQuestion.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *EvtStudentQuestion_CreateStudentQuestion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.StudentQuestionId)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.QuizId)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if len(m.UrlMedias) > 0 {
		for _, s := range m.UrlMedias {
			l = len(s)
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *EvtStudentQuestion_AllocateStudentQuestion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentQuestionId)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.TutorId)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.NotificationTitle)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.NotificationBody)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *EvtStudentQuestion_EventMessageChat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentQuestionId)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.NotificationTitle)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.NotificationBody)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *EvtStudentQuestion_EventArchivedQuestion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentQuestionId)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *EvtAllocateStudentQuestion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentQuestionId)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *RetryWithDelayEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.When != nil {
		l = m.When.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.Message != nil {
		n += m.Message.Size()
	}
	return n
}

func (m *RetryWithDelayEvent_EvtAllocateStudentQuestion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EvtAllocateStudentQuestion != nil {
		l = m.EvtAllocateStudentQuestion.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *EvtCoachAuto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != 0 {
		n += 1 + sovInternal(uint64(m.Event))
	}
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *StudentLearning) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.Event != 0 {
		n += 1 + sovInternal(uint64(m.Event))
	}
	if m.PromotionId != 0 {
		n += 1 + sovInternal(uint64(m.PromotionId))
	}
	return n
}

func (m *EvtClassRoom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		n += m.Message.Size()
	}
	return n
}

func (m *EvtClassRoom_CreateClass_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateClass != nil {
		l = m.CreateClass.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *EvtClassRoom_JoinClass_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JoinClass != nil {
		l = m.JoinClass.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *EvtClassRoom_LeaveClass_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LeaveClass != nil {
		l = m.LeaveClass.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *EvtClassRoom_EditClass_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EditClass != nil {
		l = m.EditClass.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *EvtClassRoom_ActiveConversation_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ActiveConversation != nil {
		l = m.ActiveConversation.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *EvtClassRoom_CreateClass) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClassId != 0 {
		n += 1 + sovInternal(uint64(m.ClassId))
	}
	l = len(m.TeacherId)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.ClassName)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if len(m.TeacherIds) > 0 {
		for _, s := range m.TeacherIds {
			l = len(s)
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *EvtClassRoom_JoinClass) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClassId != 0 {
		n += 1 + sovInternal(uint64(m.ClassId))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.UserGroup != 0 {
		n += 1 + sovInternal(uint64(m.UserGroup))
	}
	return n
}

func (m *EvtClassRoom_LeaveClass) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClassId != 0 {
		n += 1 + sovInternal(uint64(m.ClassId))
	}
	if len(m.UserIds) > 0 {
		for _, s := range m.UserIds {
			l = len(s)
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	if m.IsKicked {
		n += 2
	}
	return n
}

func (m *EvtClassRoom_EditClass) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClassId != 0 {
		n += 1 + sovInternal(uint64(m.ClassId))
	}
	l = len(m.ClassName)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *EvtClassRoom_ActiveConversation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClassId != 0 {
		n += 1 + sovInternal(uint64(m.ClassId))
	}
	if m.Active {
		n += 2
	}
	return n
}

func (m *EvtLesson) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		n += m.Message.Size()
	}
	return n
}

func (m *EvtLesson_CreateLessons_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateLessons != nil {
		l = m.CreateLessons.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *EvtLesson_JoinLesson_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JoinLesson != nil {
		l = m.JoinLesson.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *EvtLesson_UpdateLesson_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateLesson != nil {
		l = m.UpdateLesson.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *EvtLesson_LeaveLesson_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LeaveLesson != nil {
		l = m.LeaveLesson.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *EvtLesson_EndLiveLesson_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EndLiveLesson != nil {
		l = m.EndLiveLesson.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *EvtLesson_Lesson) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LessonId)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if len(m.LearnerIds) > 0 {
		for _, s := range m.LearnerIds {
			l = len(s)
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *EvtLesson_CreateLessons) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Lessons) > 0 {
		for _, e := range m.Lessons {
			l = e.Size()
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *EvtLesson_JoinLesson) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LessonId)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.UserGroup != 0 {
		n += 1 + sovInternal(uint64(m.UserGroup))
	}
	return n
}

func (m *EvtLesson_UpdateLesson) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LessonId)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.ClassName)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if len(m.LearnerIds) > 0 {
		for _, s := range m.LearnerIds {
			l = len(s)
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *EvtLesson_LeaveLesson) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LessonId)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *EvtLesson_EndLiveLesson) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LessonId)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *EvtUserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	l = len(m.DeviceToken)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.AllowNotification {
		n += 2
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *ProcessAllocateStudentQuestionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovInternal(uint64(m.Limit))
	}
	return n
}

func (m *ProcessAllocateStudentQuestionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalAllocated != 0 {
		n += 1 + sovInternal(uint64(m.TotalAllocated))
	}
	if m.TotalNotAllocated != 0 {
		n += 1 + sovInternal(uint64(m.TotalNotAllocated))
	}
	return n
}

func (m *ProcessArchivedStudentQuestionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovInternal(uint64(m.Limit))
	}
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *ProcessArchivedStudentQuestionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalStudentQuestions != 0 {
		n += 1 + sovInternal(uint64(m.TotalStudentQuestions))
	}
	return n
}

func (m *ProcessDisableProcessingStudentQuestionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *ProcessDisableProcessingStudentQuestionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalStudentQuestions != 0 {
		n += 1 + sovInternal(uint64(m.TotalStudentQuestions))
	}
	return n
}

func (m *ProcessTimeOutSolvedStudentQuestionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StudentQuestionIds) > 0 {
		for _, s := range m.StudentQuestionIds {
			l = len(s)
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *ProcessTimeOutSolvedStudentQuestionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalStudentQuestions != 0 {
		n += 1 + sovInternal(uint64(m.TotalStudentQuestions))
	}
	return n
}

func (m *ProcessTimeOutOrderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.Gateway != 0 {
		n += 1 + sovInternal(uint64(m.Gateway))
	}
	if m.Status != 0 {
		n += 1 + sovInternal(uint64(m.Status))
	}
	return n
}

func (m *ProcessTimeOutOrderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OrderIds) > 0 {
		l = 0
		for _, e := range m.OrderIds {
			l += sovInternal(uint64(e))
		}
		n += 1 + sovInternal(uint64(l)) + l
	}
	return n
}

func (m *ProcessCancelCodOrderExpiredRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovInternal(uint64(m.Limit))
	}
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *ProcessCancelCodOrderExpiredResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalCodOrders != 0 {
		n += 1 + sovInternal(uint64(m.TotalCodOrders))
	}
	return n
}

func (m *RetrieveTopicIconRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TopicId)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *RetrieveTopicIconResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *CheckWaitingForAssignedQuestionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.Quota != 0 {
		n += 1 + sovInternal(uint64(m.Quota))
	}
	return n
}

func (m *CheckWaitingForAssignedQuestionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalWaitingForAssignedQuestions != 0 {
		n += 1 + sovInternal(uint64(m.TotalWaitingForAssignedQuestions))
	}
	return n
}

func (m *AssignmentEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		n += m.Event.Size()
	}
	return n
}

func (m *AssignmentEvent_Assigned_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Assigned != nil {
		l = m.Assigned.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *AssignmentEvent_Returned_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Returned != nil {
		l = m.Returned.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *AssignmentEvent_Submitted_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Submitted != nil {
		l = m.Submitted.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *AssignmentEvent_Updated_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Updated != nil {
		l = m.Updated.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}
func (m *AssignmentEvent_Assigned) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssignmentId)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.ClassId != 0 {
		n += 1 + sovInternal(uint64(m.ClassId))
	}
	if len(m.StudentIds) > 0 {
		for _, s := range m.StudentIds {
			l = len(s)
			n += 1 + l + sovInternal(uint64(l))
		}
	}
	return n
}

func (m *AssignmentEvent_Returned) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubmissionId)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.GivenScore != 0 {
		n += 5
	}
	if m.TotalScore != 0 {
		n += 5
	}
	return n
}

func (m *AssignmentEvent_Submitted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubmissionId)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func (m *AssignmentEvent_Updated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AssignmentId)
	if l > 0 {
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.StartDate != nil {
		l = m.StartDate.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	if m.EndDate != nil {
		l = m.EndDate.Size()
		n += 1 + l + sovInternal(uint64(l))
	}
	return n
}

func sovInternal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInternal(x uint64) (n int) {
	return sovInternal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *EvtStudentQuestion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvtStudentQuestion{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvtStudentQuestion_CreateStudentQuestion_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvtStudentQuestion_CreateStudentQuestion_{`,
		`CreateStudentQuestion:` + strings.Replace(fmt.Sprintf("%v", this.CreateStudentQuestion), "EvtStudentQuestion_CreateStudentQuestion", "EvtStudentQuestion_CreateStudentQuestion", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvtStudentQuestion_AllocateStudentQuestion_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvtStudentQuestion_AllocateStudentQuestion_{`,
		`AllocateStudentQuestion:` + strings.Replace(fmt.Sprintf("%v", this.AllocateStudentQuestion), "EvtStudentQuestion_AllocateStudentQuestion", "EvtStudentQuestion_AllocateStudentQuestion", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvtStudentQuestion_EventMessageChat_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvtStudentQuestion_EventMessageChat_{`,
		`EventMessageChat:` + strings.Replace(fmt.Sprintf("%v", this.EventMessageChat), "EvtStudentQuestion_EventMessageChat", "EvtStudentQuestion_EventMessageChat", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvtStudentQuestion_EventArchivedQuestion_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvtStudentQuestion_EventArchivedQuestion_{`,
		`EventArchivedQuestion:` + strings.Replace(fmt.Sprintf("%v", this.EventArchivedQuestion), "EvtStudentQuestion_EventArchivedQuestion", "EvtStudentQuestion_EventArchivedQuestion", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvtStudentQuestion_CreateStudentQuestion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvtStudentQuestion_CreateStudentQuestion{`,
		`StudentId:` + fmt.Sprintf("%v", this.StudentId) + `,`,
		`StudentQuestionId:` + fmt.Sprintf("%v", this.StudentQuestionId) + `,`,
		`QuizId:` + fmt.Sprintf("%v", this.QuizId) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`UrlMedias:` + fmt.Sprintf("%v", this.UrlMedias) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvtStudentQuestion_AllocateStudentQuestion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvtStudentQuestion_AllocateStudentQuestion{`,
		`StudentQuestionId:` + fmt.Sprintf("%v", this.StudentQuestionId) + `,`,
		`TutorId:` + fmt.Sprintf("%v", this.TutorId) + `,`,
		`NotificationTitle:` + fmt.Sprintf("%v", this.NotificationTitle) + `,`,
		`NotificationBody:` + fmt.Sprintf("%v", this.NotificationBody) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvtStudentQuestion_EventMessageChat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvtStudentQuestion_EventMessageChat{`,
		`StudentQuestionId:` + fmt.Sprintf("%v", this.StudentQuestionId) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`NotificationTitle:` + fmt.Sprintf("%v", this.NotificationTitle) + `,`,
		`NotificationBody:` + fmt.Sprintf("%v", this.NotificationBody) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvtStudentQuestion_EventArchivedQuestion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvtStudentQuestion_EventArchivedQuestion{`,
		`StudentQuestionId:` + fmt.Sprintf("%v", this.StudentQuestionId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvtAllocateStudentQuestion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvtAllocateStudentQuestion{`,
		`StudentQuestionId:` + fmt.Sprintf("%v", this.StudentQuestionId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetryWithDelayEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetryWithDelayEvent{`,
		`When:` + strings.Replace(fmt.Sprintf("%v", this.When), "Timestamp", "types.Timestamp", 1) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetryWithDelayEvent_EvtAllocateStudentQuestion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetryWithDelayEvent_EvtAllocateStudentQuestion{`,
		`EvtAllocateStudentQuestion:` + strings.Replace(fmt.Sprintf("%v", this.EvtAllocateStudentQuestion), "EvtAllocateStudentQuestion", "EvtAllocateStudentQuestion", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvtCoachAuto) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvtCoachAuto{`,
		`Event:` + fmt.Sprintf("%v", this.Event) + `,`,
		`StudentId:` + fmt.Sprintf("%v", this.StudentId) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StudentLearning) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StudentLearning{`,
		`StudentId:` + fmt.Sprintf("%v", this.StudentId) + `,`,
		`Event:` + fmt.Sprintf("%v", this.Event) + `,`,
		`PromotionId:` + fmt.Sprintf("%v", this.PromotionId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvtClassRoom) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvtClassRoom{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvtClassRoom_CreateClass_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvtClassRoom_CreateClass_{`,
		`CreateClass:` + strings.Replace(fmt.Sprintf("%v", this.CreateClass), "EvtClassRoom_CreateClass", "EvtClassRoom_CreateClass", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvtClassRoom_JoinClass_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvtClassRoom_JoinClass_{`,
		`JoinClass:` + strings.Replace(fmt.Sprintf("%v", this.JoinClass), "EvtClassRoom_JoinClass", "EvtClassRoom_JoinClass", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvtClassRoom_LeaveClass_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvtClassRoom_LeaveClass_{`,
		`LeaveClass:` + strings.Replace(fmt.Sprintf("%v", this.LeaveClass), "EvtClassRoom_LeaveClass", "EvtClassRoom_LeaveClass", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvtClassRoom_EditClass_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvtClassRoom_EditClass_{`,
		`EditClass:` + strings.Replace(fmt.Sprintf("%v", this.EditClass), "EvtClassRoom_EditClass", "EvtClassRoom_EditClass", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvtClassRoom_ActiveConversation_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvtClassRoom_ActiveConversation_{`,
		`ActiveConversation:` + strings.Replace(fmt.Sprintf("%v", this.ActiveConversation), "EvtClassRoom_ActiveConversation", "EvtClassRoom_ActiveConversation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvtClassRoom_CreateClass) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvtClassRoom_CreateClass{`,
		`ClassId:` + fmt.Sprintf("%v", this.ClassId) + `,`,
		`TeacherId:` + fmt.Sprintf("%v", this.TeacherId) + `,`,
		`ClassName:` + fmt.Sprintf("%v", this.ClassName) + `,`,
		`TeacherIds:` + fmt.Sprintf("%v", this.TeacherIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvtClassRoom_JoinClass) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvtClassRoom_JoinClass{`,
		`ClassId:` + fmt.Sprintf("%v", this.ClassId) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`UserGroup:` + fmt.Sprintf("%v", this.UserGroup) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvtClassRoom_LeaveClass) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvtClassRoom_LeaveClass{`,
		`ClassId:` + fmt.Sprintf("%v", this.ClassId) + `,`,
		`UserIds:` + fmt.Sprintf("%v", this.UserIds) + `,`,
		`IsKicked:` + fmt.Sprintf("%v", this.IsKicked) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvtClassRoom_EditClass) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvtClassRoom_EditClass{`,
		`ClassId:` + fmt.Sprintf("%v", this.ClassId) + `,`,
		`ClassName:` + fmt.Sprintf("%v", this.ClassName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvtClassRoom_ActiveConversation) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvtClassRoom_ActiveConversation{`,
		`ClassId:` + fmt.Sprintf("%v", this.ClassId) + `,`,
		`Active:` + fmt.Sprintf("%v", this.Active) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvtLesson) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvtLesson{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvtLesson_CreateLessons_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvtLesson_CreateLessons_{`,
		`CreateLessons:` + strings.Replace(fmt.Sprintf("%v", this.CreateLessons), "EvtLesson_CreateLessons", "EvtLesson_CreateLessons", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvtLesson_JoinLesson_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvtLesson_JoinLesson_{`,
		`JoinLesson:` + strings.Replace(fmt.Sprintf("%v", this.JoinLesson), "EvtLesson_JoinLesson", "EvtLesson_JoinLesson", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvtLesson_UpdateLesson_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvtLesson_UpdateLesson_{`,
		`UpdateLesson:` + strings.Replace(fmt.Sprintf("%v", this.UpdateLesson), "EvtLesson_UpdateLesson", "EvtLesson_UpdateLesson", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvtLesson_LeaveLesson_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvtLesson_LeaveLesson_{`,
		`LeaveLesson:` + strings.Replace(fmt.Sprintf("%v", this.LeaveLesson), "EvtLesson_LeaveLesson", "EvtLesson_LeaveLesson", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvtLesson_EndLiveLesson_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvtLesson_EndLiveLesson_{`,
		`EndLiveLesson:` + strings.Replace(fmt.Sprintf("%v", this.EndLiveLesson), "EvtLesson_EndLiveLesson", "EvtLesson_EndLiveLesson", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvtLesson_Lesson) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvtLesson_Lesson{`,
		`LessonId:` + fmt.Sprintf("%v", this.LessonId) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`LearnerIds:` + fmt.Sprintf("%v", this.LearnerIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvtLesson_CreateLessons) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLessons := "[]*EvtLesson_Lesson{"
	for _, f := range this.Lessons {
		repeatedStringForLessons += strings.Replace(fmt.Sprintf("%v", f), "EvtLesson_Lesson", "EvtLesson_Lesson", 1) + ","
	}
	repeatedStringForLessons += "}"
	s := strings.Join([]string{`&EvtLesson_CreateLessons{`,
		`Lessons:` + repeatedStringForLessons + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvtLesson_JoinLesson) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvtLesson_JoinLesson{`,
		`LessonId:` + fmt.Sprintf("%v", this.LessonId) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`UserGroup:` + fmt.Sprintf("%v", this.UserGroup) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvtLesson_UpdateLesson) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvtLesson_UpdateLesson{`,
		`LessonId:` + fmt.Sprintf("%v", this.LessonId) + `,`,
		`ClassName:` + fmt.Sprintf("%v", this.ClassName) + `,`,
		`LearnerIds:` + fmt.Sprintf("%v", this.LearnerIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvtLesson_LeaveLesson) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvtLesson_LeaveLesson{`,
		`LessonId:` + fmt.Sprintf("%v", this.LessonId) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvtLesson_EndLiveLesson) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvtLesson_EndLiveLesson{`,
		`LessonId:` + fmt.Sprintf("%v", this.LessonId) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *EvtUserInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EvtUserInfo{`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`DeviceToken:` + fmt.Sprintf("%v", this.DeviceToken) + `,`,
		`AllowNotification:` + fmt.Sprintf("%v", this.AllowNotification) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProcessAllocateStudentQuestionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProcessAllocateStudentQuestionRequest{`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProcessAllocateStudentQuestionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProcessAllocateStudentQuestionResponse{`,
		`TotalAllocated:` + fmt.Sprintf("%v", this.TotalAllocated) + `,`,
		`TotalNotAllocated:` + fmt.Sprintf("%v", this.TotalNotAllocated) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProcessArchivedStudentQuestionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProcessArchivedStudentQuestionRequest{`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProcessArchivedStudentQuestionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProcessArchivedStudentQuestionResponse{`,
		`TotalStudentQuestions:` + fmt.Sprintf("%v", this.TotalStudentQuestions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProcessDisableProcessingStudentQuestionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProcessDisableProcessingStudentQuestionRequest{`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProcessDisableProcessingStudentQuestionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProcessDisableProcessingStudentQuestionResponse{`,
		`TotalStudentQuestions:` + fmt.Sprintf("%v", this.TotalStudentQuestions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProcessTimeOutSolvedStudentQuestionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProcessTimeOutSolvedStudentQuestionRequest{`,
		`StudentQuestionIds:` + fmt.Sprintf("%v", this.StudentQuestionIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProcessTimeOutSolvedStudentQuestionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProcessTimeOutSolvedStudentQuestionResponse{`,
		`TotalStudentQuestions:` + fmt.Sprintf("%v", this.TotalStudentQuestions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProcessTimeOutOrderRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProcessTimeOutOrderRequest{`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`Gateway:` + fmt.Sprintf("%v", this.Gateway) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProcessTimeOutOrderResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProcessTimeOutOrderResponse{`,
		`OrderIds:` + fmt.Sprintf("%v", this.OrderIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProcessCancelCodOrderExpiredRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProcessCancelCodOrderExpiredRequest{`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProcessCancelCodOrderExpiredResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProcessCancelCodOrderExpiredResponse{`,
		`TotalCodOrders:` + fmt.Sprintf("%v", this.TotalCodOrders) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveTopicIconRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveTopicIconRequest{`,
		`TopicId:` + fmt.Sprintf("%v", this.TopicId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveTopicIconResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveTopicIconResponse{`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CheckWaitingForAssignedQuestionsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CheckWaitingForAssignedQuestionsRequest{`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`Quota:` + fmt.Sprintf("%v", this.Quota) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CheckWaitingForAssignedQuestionsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CheckWaitingForAssignedQuestionsResponse{`,
		`TotalWaitingForAssignedQuestions:` + fmt.Sprintf("%v", this.TotalWaitingForAssignedQuestions) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AssignmentEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AssignmentEvent{`,
		`Event:` + fmt.Sprintf("%v", this.Event) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AssignmentEvent_Assigned_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AssignmentEvent_Assigned_{`,
		`Assigned:` + strings.Replace(fmt.Sprintf("%v", this.Assigned), "AssignmentEvent_Assigned", "AssignmentEvent_Assigned", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AssignmentEvent_Returned_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AssignmentEvent_Returned_{`,
		`Returned:` + strings.Replace(fmt.Sprintf("%v", this.Returned), "AssignmentEvent_Returned", "AssignmentEvent_Returned", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AssignmentEvent_Submitted_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AssignmentEvent_Submitted_{`,
		`Submitted:` + strings.Replace(fmt.Sprintf("%v", this.Submitted), "AssignmentEvent_Submitted", "AssignmentEvent_Submitted", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AssignmentEvent_Updated_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AssignmentEvent_Updated_{`,
		`Updated:` + strings.Replace(fmt.Sprintf("%v", this.Updated), "AssignmentEvent_Updated", "AssignmentEvent_Updated", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AssignmentEvent_Assigned) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AssignmentEvent_Assigned{`,
		`AssignmentId:` + fmt.Sprintf("%v", this.AssignmentId) + `,`,
		`ClassId:` + fmt.Sprintf("%v", this.ClassId) + `,`,
		`StudentIds:` + fmt.Sprintf("%v", this.StudentIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AssignmentEvent_Returned) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AssignmentEvent_Returned{`,
		`SubmissionId:` + fmt.Sprintf("%v", this.SubmissionId) + `,`,
		`GivenScore:` + fmt.Sprintf("%v", this.GivenScore) + `,`,
		`TotalScore:` + fmt.Sprintf("%v", this.TotalScore) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AssignmentEvent_Submitted) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AssignmentEvent_Submitted{`,
		`SubmissionId:` + fmt.Sprintf("%v", this.SubmissionId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AssignmentEvent_Updated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AssignmentEvent_Updated{`,
		`AssignmentId:` + fmt.Sprintf("%v", this.AssignmentId) + `,`,
		`StartDate:` + strings.Replace(fmt.Sprintf("%v", this.StartDate), "Timestamp", "types.Timestamp", 1) + `,`,
		`EndDate:` + strings.Replace(fmt.Sprintf("%v", this.EndDate), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringInternal(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *EvtStudentQuestion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvtStudentQuestion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvtStudentQuestion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateStudentQuestion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EvtStudentQuestion_CreateStudentQuestion{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &EvtStudentQuestion_CreateStudentQuestion_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllocateStudentQuestion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EvtStudentQuestion_AllocateStudentQuestion{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &EvtStudentQuestion_AllocateStudentQuestion_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventMessageChat", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EvtStudentQuestion_EventMessageChat{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &EvtStudentQuestion_EventMessageChat_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventArchivedQuestion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EvtStudentQuestion_EventArchivedQuestion{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &EvtStudentQuestion_EventArchivedQuestion_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvtStudentQuestion_CreateStudentQuestion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateStudentQuestion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateStudentQuestion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentQuestionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentQuestionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuizId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuizId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UrlMedias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UrlMedias = append(m.UrlMedias, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvtStudentQuestion_AllocateStudentQuestion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocateStudentQuestion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocateStudentQuestion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentQuestionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentQuestionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TutorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TutorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotificationTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationBody", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotificationBody = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvtStudentQuestion_EventMessageChat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventMessageChat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventMessageChat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentQuestionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentQuestionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationTitle", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotificationTitle = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationBody", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotificationBody = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvtStudentQuestion_EventArchivedQuestion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventArchivedQuestion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventArchivedQuestion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentQuestionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentQuestionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvtAllocateStudentQuestion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvtAllocateStudentQuestion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvtAllocateStudentQuestion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentQuestionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentQuestionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetryWithDelayEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetryWithDelayEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetryWithDelayEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field When", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.When == nil {
				m.When = &types.Timestamp{}
			}
			if err := m.When.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvtAllocateStudentQuestion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EvtAllocateStudentQuestion{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &RetryWithDelayEvent_EvtAllocateStudentQuestion{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvtCoachAuto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvtCoachAuto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvtCoachAuto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			m.Event = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Event |= CoachAutoEvent(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StudentLearning) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudentLearning: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudentLearning: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			m.Event = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Event |= StudentLearningEvent(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PromotionId", wireType)
			}
			m.PromotionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PromotionId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvtClassRoom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvtClassRoom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvtClassRoom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateClass", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EvtClassRoom_CreateClass{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &EvtClassRoom_CreateClass_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinClass", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EvtClassRoom_JoinClass{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &EvtClassRoom_JoinClass_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaveClass", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EvtClassRoom_LeaveClass{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &EvtClassRoom_LeaveClass_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EditClass", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EvtClassRoom_EditClass{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &EvtClassRoom_EditClass_{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveConversation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EvtClassRoom_ActiveConversation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &EvtClassRoom_ActiveConversation_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvtClassRoom_CreateClass) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateClass: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateClass: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeacherId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeacherId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeacherIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeacherIds = append(m.TeacherIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvtClassRoom_JoinClass) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinClass: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinClass: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserGroup", wireType)
			}
			m.UserGroup = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserGroup |= UserGroup(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvtClassRoom_LeaveClass) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaveClass: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaveClass: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserIds = append(m.UserIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsKicked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsKicked = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvtClassRoom_EditClass) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EditClass: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EditClass: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvtClassRoom_ActiveConversation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActiveConversation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActiveConversation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvtLesson) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvtLesson: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvtLesson: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateLessons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EvtLesson_CreateLessons{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &EvtLesson_CreateLessons_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinLesson", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EvtLesson_JoinLesson{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &EvtLesson_JoinLesson_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateLesson", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EvtLesson_UpdateLesson{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &EvtLesson_UpdateLesson_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaveLesson", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EvtLesson_LeaveLesson{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &EvtLesson_LeaveLesson_{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndLiveLesson", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EvtLesson_EndLiveLesson{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &EvtLesson_EndLiveLesson_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvtLesson_Lesson) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Lesson: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Lesson: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LessonId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LessonId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LearnerIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LearnerIds = append(m.LearnerIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvtLesson_CreateLessons) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateLessons: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateLessons: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lessons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lessons = append(m.Lessons, &EvtLesson_Lesson{})
			if err := m.Lessons[len(m.Lessons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvtLesson_JoinLesson) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoinLesson: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoinLesson: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LessonId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LessonId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserGroup", wireType)
			}
			m.UserGroup = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserGroup |= UserGroup(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvtLesson_UpdateLesson) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateLesson: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateLesson: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LessonId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LessonId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LearnerIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LearnerIds = append(m.LearnerIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvtLesson_LeaveLesson) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaveLesson: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaveLesson: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LessonId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LessonId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvtLesson_EndLiveLesson) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EndLiveLesson: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EndLiveLesson: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LessonId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LessonId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EvtUserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EvtUserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EvtUserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowNotification", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowNotification = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessAllocateStudentQuestionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessAllocateStudentQuestionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessAllocateStudentQuestionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessAllocateStudentQuestionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessAllocateStudentQuestionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessAllocateStudentQuestionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAllocated", wireType)
			}
			m.TotalAllocated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalAllocated |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalNotAllocated", wireType)
			}
			m.TotalNotAllocated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalNotAllocated |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessArchivedStudentQuestionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessArchivedStudentQuestionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessArchivedStudentQuestionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessArchivedStudentQuestionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessArchivedStudentQuestionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessArchivedStudentQuestionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStudentQuestions", wireType)
			}
			m.TotalStudentQuestions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalStudentQuestions |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessDisableProcessingStudentQuestionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessDisableProcessingStudentQuestionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessDisableProcessingStudentQuestionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessDisableProcessingStudentQuestionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessDisableProcessingStudentQuestionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessDisableProcessingStudentQuestionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStudentQuestions", wireType)
			}
			m.TotalStudentQuestions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalStudentQuestions |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessTimeOutSolvedStudentQuestionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessTimeOutSolvedStudentQuestionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessTimeOutSolvedStudentQuestionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentQuestionIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentQuestionIds = append(m.StudentQuestionIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessTimeOutSolvedStudentQuestionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessTimeOutSolvedStudentQuestionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessTimeOutSolvedStudentQuestionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStudentQuestions", wireType)
			}
			m.TotalStudentQuestions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalStudentQuestions |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessTimeOutOrderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessTimeOutOrderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessTimeOutOrderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			m.Gateway = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gateway |= PaymentGateway(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= OrderStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessTimeOutOrderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessTimeOutOrderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessTimeOutOrderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInternal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OrderIds = append(m.OrderIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInternal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthInternal
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthInternal
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OrderIds) == 0 {
					m.OrderIds = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInternal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OrderIds = append(m.OrderIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessCancelCodOrderExpiredRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessCancelCodOrderExpiredRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessCancelCodOrderExpiredRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProcessCancelCodOrderExpiredResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessCancelCodOrderExpiredResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessCancelCodOrderExpiredResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCodOrders", wireType)
			}
			m.TotalCodOrders = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCodOrders |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveTopicIconRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveTopicIconRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveTopicIconRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveTopicIconResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveTopicIconResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveTopicIconResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckWaitingForAssignedQuestionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckWaitingForAssignedQuestionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckWaitingForAssignedQuestionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quota", wireType)
			}
			m.Quota = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quota |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckWaitingForAssignedQuestionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckWaitingForAssignedQuestionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckWaitingForAssignedQuestionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalWaitingForAssignedQuestions", wireType)
			}
			m.TotalWaitingForAssignedQuestions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalWaitingForAssignedQuestions |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssignmentEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssignmentEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssignmentEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assigned", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AssignmentEvent_Assigned{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &AssignmentEvent_Assigned_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Returned", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AssignmentEvent_Returned{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &AssignmentEvent_Returned_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submitted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AssignmentEvent_Submitted{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &AssignmentEvent_Submitted_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AssignmentEvent_Updated{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &AssignmentEvent_Updated_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssignmentEvent_Assigned) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Assigned: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Assigned: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssignmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentIds = append(m.StudentIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssignmentEvent_Returned) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Returned: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Returned: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmissionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubmissionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field GivenScore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.GivenScore = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalScore", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TotalScore = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssignmentEvent_Submitted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Submitted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Submitted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmissionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubmissionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssignmentEvent_Updated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Updated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Updated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignmentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssignmentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartDate == nil {
				m.StartDate = &types.Timestamp{}
			}
			if err := m.StartDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInternal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInternal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndDate == nil {
				m.EndDate = &types.Timestamp{}
			}
			if err := m.EndDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInternal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInternal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInternal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInternal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInternal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInternal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInternal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInternal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInternal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInternal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInternal = fmt.Errorf("proto: unexpected end of group")
)
