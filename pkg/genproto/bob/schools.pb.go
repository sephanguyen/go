// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: schools.proto

package pb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type School struct {
	Id       int32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Country  Country   `protobuf:"varint,3,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"`
	City     *City     `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	District *District `protobuf:"bytes,5,opt,name=district,proto3" json:"district,omitempty"`
	Point    *Point    `protobuf:"bytes,6,opt,name=point,proto3" json:"point,omitempty"`
}

func (m *School) Reset()      { *m = School{} }
func (*School) ProtoMessage() {}
func (*School) Descriptor() ([]byte, []int) {
	return fileDescriptor_a04194eb9afe6926, []int{0}
}
func (m *School) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *School) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_School.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *School) XXX_Merge(src proto.Message) {
	xxx_messageInfo_School.Merge(m, src)
}
func (m *School) XXX_Size() int {
	return m.Size()
}
func (m *School) XXX_DiscardUnknown() {
	xxx_messageInfo_School.DiscardUnknown(m)
}

var xxx_messageInfo_School proto.InternalMessageInfo

func (m *School) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *School) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *School) GetCountry() Country {
	if m != nil {
		return m.Country
	}
	return COUNTRY_NONE
}

func (m *School) GetCity() *City {
	if m != nil {
		return m.City
	}
	return nil
}

func (m *School) GetDistrict() *District {
	if m != nil {
		return m.District
	}
	return nil
}

func (m *School) GetPoint() *Point {
	if m != nil {
		return m.Point
	}
	return nil
}

func init() {
	proto.RegisterType((*School)(nil), "manabie.bob.School")
	golang_proto.RegisterType((*School)(nil), "manabie.bob.School")
}

func init() { proto.RegisterFile("schools.proto", fileDescriptor_a04194eb9afe6926) }
func init() { golang_proto.RegisterFile("schools.proto", fileDescriptor_a04194eb9afe6926) }

var fileDescriptor_a04194eb9afe6926 = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xb1, 0x4e, 0xf3, 0x30,
	0x14, 0x85, 0x73, 0xfb, 0xb7, 0xfd, 0xc1, 0x15, 0x95, 0xb0, 0x40, 0x8a, 0x3a, 0x5c, 0x45, 0x48,
	0x48, 0x59, 0x9a, 0x88, 0x32, 0xb2, 0x01, 0x0f, 0x80, 0xc2, 0xc6, 0x16, 0x27, 0x21, 0xb5, 0xda,
	0xf8, 0x46, 0xad, 0x33, 0x74, 0xe3, 0x11, 0x78, 0x0c, 0x1e, 0x83, 0x91, 0xb1, 0x63, 0xc7, 0xd6,
	0x59, 0x18, 0xfb, 0x08, 0xa8, 0x4e, 0x41, 0xed, 0x76, 0x8e, 0xbf, 0x4f, 0xb6, 0x75, 0xd8, 0xd9,
	0x3c, 0x19, 0x13, 0x4d, 0xe7, 0x41, 0x39, 0x23, 0x4d, 0xbc, 0x57, 0xc4, 0x2a, 0x16, 0x32, 0x0b,
	0x04, 0x89, 0x01, 0xcb, 0x54, 0x55, 0x34, 0x60, 0xd0, 0x9f, 0x52, 0x12, 0x6b, 0x49, 0x6a, 0xdf,
	0x87, 0xb9, 0xd4, 0xe3, 0x4a, 0x04, 0x09, 0x15, 0x61, 0x4e, 0x39, 0x85, 0xf6, 0x58, 0x54, 0xaf,
	0xb6, 0xd9, 0x62, 0x53, 0xa3, 0x5f, 0xad, 0x81, 0x75, 0x9f, 0xed, 0x4b, 0xbc, 0xcf, 0x5a, 0x32,
	0x75, 0xc1, 0x03, 0xbf, 0x13, 0xb5, 0x64, 0xca, 0x39, 0x6b, 0xab, 0xb8, 0xc8, 0xdc, 0x96, 0x07,
	0xfe, 0x69, 0x64, 0x33, 0x0f, 0xd8, 0xff, 0x84, 0x2a, 0xa5, 0x67, 0x0b, 0xf7, 0x9f, 0x07, 0x7e,
	0x7f, 0x74, 0x11, 0x1c, 0x7c, 0x2c, 0x78, 0x68, 0x58, 0xf4, 0x2b, 0xf1, 0x6b, 0xd6, 0x4e, 0xa4,
	0x5e, 0xb8, 0x6d, 0x0f, 0xfc, 0xde, 0xe8, 0xfc, 0x58, 0x96, 0x7a, 0x11, 0x59, 0xcc, 0x6f, 0xd8,
	0x49, 0x2a, 0xe7, 0x7a, 0x26, 0x13, 0xed, 0x76, 0xac, 0x7a, 0x79, 0xa4, 0x3e, 0xee, 0x61, 0xf4,
	0xa7, 0x71, 0x9f, 0x75, 0x4a, 0x92, 0x4a, 0xbb, 0x5d, 0xeb, 0xf3, 0x23, 0xff, 0x69, 0x47, 0xa2,
	0x46, 0xb8, 0x9f, 0x2e, 0x37, 0xe8, 0xac, 0x36, 0xe8, 0x6c, 0x37, 0x08, 0x6f, 0x06, 0xe1, 0xc3,
	0x20, 0x7c, 0x19, 0x84, 0xa5, 0x41, 0x58, 0x1b, 0x84, 0x6f, 0x83, 0xce, 0xd6, 0x20, 0xbc, 0xd7,
	0xe8, 0x7c, 0xd6, 0x08, 0xcb, 0x1a, 0x9d, 0x55, 0x8d, 0xce, 0xcb, 0xe8, 0x60, 0xcb, 0xfd, 0xf5,
	0xc3, 0x5d, 0x16, 0x71, 0x32, 0xc9, 0x54, 0x1a, 0x96, 0x93, 0x3c, 0xcc, 0x33, 0xd5, 0x8c, 0x2a,
	0x48, 0xdc, 0x95, 0x42, 0x74, 0x6d, 0xbb, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0x71, 0x9a, 0x9a,
	0xde, 0xc0, 0x01, 0x00, 0x00,
}

func (this *School) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*School)
	if !ok {
		that2, ok := that.(School)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if !this.City.Equal(that1.City) {
		return false
	}
	if !this.District.Equal(that1.District) {
		return false
	}
	if !this.Point.Equal(that1.Point) {
		return false
	}
	return true
}
func (this *School) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.School{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	if this.City != nil {
		s = append(s, "City: "+fmt.Sprintf("%#v", this.City)+",\n")
	}
	if this.District != nil {
		s = append(s, "District: "+fmt.Sprintf("%#v", this.District)+",\n")
	}
	if this.Point != nil {
		s = append(s, "Point: "+fmt.Sprintf("%#v", this.Point)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSchools(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *School) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *School) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *School) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Point != nil {
		{
			size, err := m.Point.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchools(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.District != nil {
		{
			size, err := m.District.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchools(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.City != nil {
		{
			size, err := m.City.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSchools(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Country != 0 {
		i = encodeVarintSchools(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSchools(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintSchools(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSchools(dAtA []byte, offset int, v uint64) int {
	offset -= sovSchools(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *School) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSchools(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSchools(uint64(l))
	}
	if m.Country != 0 {
		n += 1 + sovSchools(uint64(m.Country))
	}
	if m.City != nil {
		l = m.City.Size()
		n += 1 + l + sovSchools(uint64(l))
	}
	if m.District != nil {
		l = m.District.Size()
		n += 1 + l + sovSchools(uint64(l))
	}
	if m.Point != nil {
		l = m.Point.Size()
		n += 1 + l + sovSchools(uint64(l))
	}
	return n
}

func sovSchools(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSchools(x uint64) (n int) {
	return sovSchools(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *School) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&School{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`City:` + strings.Replace(fmt.Sprintf("%v", this.City), "City", "City", 1) + `,`,
		`District:` + strings.Replace(fmt.Sprintf("%v", this.District), "District", "District", 1) + `,`,
		`Point:` + strings.Replace(fmt.Sprintf("%v", this.Point), "Point", "Point", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSchools(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *School) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSchools
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: School: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: School: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSchools
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSchools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchools
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.City == nil {
				m.City = &City{}
			}
			if err := m.City.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field District", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchools
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.District == nil {
				m.District = &District{}
			}
			if err := m.District.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSchools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSchools
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSchools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Point == nil {
				m.Point = &Point{}
			}
			if err := m.Point.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSchools(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSchools
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSchools(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSchools
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchools
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSchools
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSchools
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSchools
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSchools
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSchools        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSchools          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSchools = fmt.Errorf("proto: unexpected end of group")
)
