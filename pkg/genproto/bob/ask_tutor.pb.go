// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ask_tutor.proto

package pb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CreateQuestionRequest struct {
	QuizId    string   `protobuf:"bytes,1,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	Content   string   `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	UrlMedias []string `protobuf:"bytes,3,rep,name=url_medias,json=urlMedias,proto3" json:"url_medias,omitempty"`
	Subject   Subject  `protobuf:"varint,4,opt,name=subject,proto3,enum=manabie.bob.Subject" json:"subject,omitempty"`
	Title     string   `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
}

func (m *CreateQuestionRequest) Reset()      { *m = CreateQuestionRequest{} }
func (*CreateQuestionRequest) ProtoMessage() {}
func (*CreateQuestionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_32fac3b775080119, []int{0}
}
func (m *CreateQuestionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateQuestionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateQuestionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateQuestionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateQuestionRequest.Merge(m, src)
}
func (m *CreateQuestionRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateQuestionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateQuestionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateQuestionRequest proto.InternalMessageInfo

func (m *CreateQuestionRequest) GetQuizId() string {
	if m != nil {
		return m.QuizId
	}
	return ""
}

func (m *CreateQuestionRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *CreateQuestionRequest) GetUrlMedias() []string {
	if m != nil {
		return m.UrlMedias
	}
	return nil
}

func (m *CreateQuestionRequest) GetSubject() Subject {
	if m != nil {
		return m.Subject
	}
	return SUBJECT_NONE
}

func (m *CreateQuestionRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type CreateQuestionResponse struct {
}

func (m *CreateQuestionResponse) Reset()      { *m = CreateQuestionResponse{} }
func (*CreateQuestionResponse) ProtoMessage() {}
func (*CreateQuestionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_32fac3b775080119, []int{1}
}
func (m *CreateQuestionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateQuestionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateQuestionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateQuestionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateQuestionResponse.Merge(m, src)
}
func (m *CreateQuestionResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateQuestionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateQuestionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateQuestionResponse proto.InternalMessageInfo

type QuestionRemainRequest struct {
}

func (m *QuestionRemainRequest) Reset()      { *m = QuestionRemainRequest{} }
func (*QuestionRemainRequest) ProtoMessage() {}
func (*QuestionRemainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_32fac3b775080119, []int{2}
}
func (m *QuestionRemainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuestionRemainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuestionRemainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuestionRemainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuestionRemainRequest.Merge(m, src)
}
func (m *QuestionRemainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuestionRemainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuestionRemainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuestionRemainRequest proto.InternalMessageInfo

type QuestionRemainResponse struct {
	Remain   int32       `protobuf:"varint,1,opt,name=remain,proto3" json:"remain,omitempty"`
	Total    int32       `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Duration AskDuration `protobuf:"varint,3,opt,name=duration,proto3,enum=manabie.bob.AskDuration" json:"duration,omitempty"`
}

func (m *QuestionRemainResponse) Reset()      { *m = QuestionRemainResponse{} }
func (*QuestionRemainResponse) ProtoMessage() {}
func (*QuestionRemainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_32fac3b775080119, []int{3}
}
func (m *QuestionRemainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuestionRemainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuestionRemainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuestionRemainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuestionRemainResponse.Merge(m, src)
}
func (m *QuestionRemainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuestionRemainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuestionRemainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuestionRemainResponse proto.InternalMessageInfo

func (m *QuestionRemainResponse) GetRemain() int32 {
	if m != nil {
		return m.Remain
	}
	return 0
}

func (m *QuestionRemainResponse) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *QuestionRemainResponse) GetDuration() AskDuration {
	if m != nil {
		return m.Duration
	}
	return THIS_DAY
}

type GetStudentQuestionRequest struct {
	StudentQuestionIds []string `protobuf:"bytes,1,rep,name=student_question_ids,json=studentQuestionIds,proto3" json:"student_question_ids,omitempty"`
}

func (m *GetStudentQuestionRequest) Reset()      { *m = GetStudentQuestionRequest{} }
func (*GetStudentQuestionRequest) ProtoMessage() {}
func (*GetStudentQuestionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_32fac3b775080119, []int{4}
}
func (m *GetStudentQuestionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStudentQuestionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStudentQuestionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStudentQuestionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStudentQuestionRequest.Merge(m, src)
}
func (m *GetStudentQuestionRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetStudentQuestionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStudentQuestionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetStudentQuestionRequest proto.InternalMessageInfo

func (m *GetStudentQuestionRequest) GetStudentQuestionIds() []string {
	if m != nil {
		return m.StudentQuestionIds
	}
	return nil
}

type StudentQuestion struct {
	StudentQuestionId string         `protobuf:"bytes,1,opt,name=student_question_id,json=studentQuestionId,proto3" json:"student_question_id,omitempty"`
	QuizId            string         `protobuf:"bytes,2,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	Content           string         `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	UrlMedias         []string       `protobuf:"bytes,4,rep,name=url_medias,json=urlMedias,proto3" json:"url_medias,omitempty"`
	Status            QuestionStatus `protobuf:"varint,5,opt,name=status,proto3,enum=manabie.bob.QuestionStatus" json:"status,omitempty"`
	LoName            string         `protobuf:"bytes,6,opt,name=lo_name,json=loName,proto3" json:"lo_name,omitempty"`
	Subject           Subject        `protobuf:"varint,7,opt,name=subject,proto3,enum=manabie.bob.Subject" json:"subject,omitempty"`
	Rate              string         `protobuf:"bytes,8,opt,name=rate,proto3" json:"rate,omitempty"`
	TopicName         string         `protobuf:"bytes,9,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	TopicDisplayOrder uint32         `protobuf:"varint,10,opt,name=topic_display_order,json=topicDisplayOrder,proto3" json:"topic_display_order,omitempty"`
	StudyGuide        string         `protobuf:"bytes,11,opt,name=study_guide,json=studyGuide,proto3" json:"study_guide,omitempty"`
	Grade             string         `protobuf:"bytes,12,opt,name=grade,proto3" json:"grade,omitempty"`
	Title             string         `protobuf:"bytes,13,opt,name=title,proto3" json:"title,omitempty"`
}

func (m *StudentQuestion) Reset()      { *m = StudentQuestion{} }
func (*StudentQuestion) ProtoMessage() {}
func (*StudentQuestion) Descriptor() ([]byte, []int) {
	return fileDescriptor_32fac3b775080119, []int{5}
}
func (m *StudentQuestion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StudentQuestion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StudentQuestion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StudentQuestion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudentQuestion.Merge(m, src)
}
func (m *StudentQuestion) XXX_Size() int {
	return m.Size()
}
func (m *StudentQuestion) XXX_DiscardUnknown() {
	xxx_messageInfo_StudentQuestion.DiscardUnknown(m)
}

var xxx_messageInfo_StudentQuestion proto.InternalMessageInfo

func (m *StudentQuestion) GetStudentQuestionId() string {
	if m != nil {
		return m.StudentQuestionId
	}
	return ""
}

func (m *StudentQuestion) GetQuizId() string {
	if m != nil {
		return m.QuizId
	}
	return ""
}

func (m *StudentQuestion) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *StudentQuestion) GetUrlMedias() []string {
	if m != nil {
		return m.UrlMedias
	}
	return nil
}

func (m *StudentQuestion) GetStatus() QuestionStatus {
	if m != nil {
		return m.Status
	}
	return QUESTION_STATUS_WAITING_FOR_ASSIGN
}

func (m *StudentQuestion) GetLoName() string {
	if m != nil {
		return m.LoName
	}
	return ""
}

func (m *StudentQuestion) GetSubject() Subject {
	if m != nil {
		return m.Subject
	}
	return SUBJECT_NONE
}

func (m *StudentQuestion) GetRate() string {
	if m != nil {
		return m.Rate
	}
	return ""
}

func (m *StudentQuestion) GetTopicName() string {
	if m != nil {
		return m.TopicName
	}
	return ""
}

func (m *StudentQuestion) GetTopicDisplayOrder() uint32 {
	if m != nil {
		return m.TopicDisplayOrder
	}
	return 0
}

func (m *StudentQuestion) GetStudyGuide() string {
	if m != nil {
		return m.StudyGuide
	}
	return ""
}

func (m *StudentQuestion) GetGrade() string {
	if m != nil {
		return m.Grade
	}
	return ""
}

func (m *StudentQuestion) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type GetStudentQuestionResponse struct {
	StudentQuestions []*StudentQuestion `protobuf:"bytes,1,rep,name=student_questions,json=studentQuestions,proto3" json:"student_questions,omitempty"`
}

func (m *GetStudentQuestionResponse) Reset()      { *m = GetStudentQuestionResponse{} }
func (*GetStudentQuestionResponse) ProtoMessage() {}
func (*GetStudentQuestionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_32fac3b775080119, []int{6}
}
func (m *GetStudentQuestionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStudentQuestionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStudentQuestionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStudentQuestionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStudentQuestionResponse.Merge(m, src)
}
func (m *GetStudentQuestionResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetStudentQuestionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStudentQuestionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetStudentQuestionResponse proto.InternalMessageInfo

func (m *GetStudentQuestionResponse) GetStudentQuestions() []*StudentQuestion {
	if m != nil {
		return m.StudentQuestions
	}
	return nil
}

type TransitionStudentQuestionRequest struct {
	// Types that are valid to be assigned to Message:
	//
	//	*TransitionStudentQuestionRequest_MarkedAsResolved_
	//	*TransitionStudentQuestionRequest_MarkedAsInvalid_
	//	*TransitionStudentQuestionRequest_AgreeInvalid_
	//	*TransitionStudentQuestionRequest_AgreeResolved_
	//	*TransitionStudentQuestionRequest_Rate_
	Message isTransitionStudentQuestionRequest_Message `protobuf_oneof:"message"`
}

func (m *TransitionStudentQuestionRequest) Reset()      { *m = TransitionStudentQuestionRequest{} }
func (*TransitionStudentQuestionRequest) ProtoMessage() {}
func (*TransitionStudentQuestionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_32fac3b775080119, []int{7}
}
func (m *TransitionStudentQuestionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransitionStudentQuestionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransitionStudentQuestionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransitionStudentQuestionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransitionStudentQuestionRequest.Merge(m, src)
}
func (m *TransitionStudentQuestionRequest) XXX_Size() int {
	return m.Size()
}
func (m *TransitionStudentQuestionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransitionStudentQuestionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransitionStudentQuestionRequest proto.InternalMessageInfo

type isTransitionStudentQuestionRequest_Message interface {
	isTransitionStudentQuestionRequest_Message()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type TransitionStudentQuestionRequest_MarkedAsResolved_ struct {
	MarkedAsResolved *TransitionStudentQuestionRequest_MarkedAsResolved `protobuf:"bytes,1,opt,name=marked_as_resolved,json=markedAsResolved,proto3,oneof" json:"marked_as_resolved,omitempty"`
}
type TransitionStudentQuestionRequest_MarkedAsInvalid_ struct {
	MarkedAsInvalid *TransitionStudentQuestionRequest_MarkedAsInvalid `protobuf:"bytes,2,opt,name=marked_as_invalid,json=markedAsInvalid,proto3,oneof" json:"marked_as_invalid,omitempty"`
}
type TransitionStudentQuestionRequest_AgreeInvalid_ struct {
	AgreeInvalid *TransitionStudentQuestionRequest_AgreeInvalid `protobuf:"bytes,3,opt,name=agree_invalid,json=agreeInvalid,proto3,oneof" json:"agree_invalid,omitempty"`
}
type TransitionStudentQuestionRequest_AgreeResolved_ struct {
	AgreeResolved *TransitionStudentQuestionRequest_AgreeResolved `protobuf:"bytes,4,opt,name=agree_resolved,json=agreeResolved,proto3,oneof" json:"agree_resolved,omitempty"`
}
type TransitionStudentQuestionRequest_Rate_ struct {
	Rate *TransitionStudentQuestionRequest_Rate `protobuf:"bytes,5,opt,name=rate,proto3,oneof" json:"rate,omitempty"`
}

func (*TransitionStudentQuestionRequest_MarkedAsResolved_) isTransitionStudentQuestionRequest_Message() {
}
func (*TransitionStudentQuestionRequest_MarkedAsInvalid_) isTransitionStudentQuestionRequest_Message() {
}
func (*TransitionStudentQuestionRequest_AgreeInvalid_) isTransitionStudentQuestionRequest_Message() {}
func (*TransitionStudentQuestionRequest_AgreeResolved_) isTransitionStudentQuestionRequest_Message() {
}
func (*TransitionStudentQuestionRequest_Rate_) isTransitionStudentQuestionRequest_Message() {}

func (m *TransitionStudentQuestionRequest) GetMessage() isTransitionStudentQuestionRequest_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *TransitionStudentQuestionRequest) GetMarkedAsResolved() *TransitionStudentQuestionRequest_MarkedAsResolved {
	if x, ok := m.GetMessage().(*TransitionStudentQuestionRequest_MarkedAsResolved_); ok {
		return x.MarkedAsResolved
	}
	return nil
}

func (m *TransitionStudentQuestionRequest) GetMarkedAsInvalid() *TransitionStudentQuestionRequest_MarkedAsInvalid {
	if x, ok := m.GetMessage().(*TransitionStudentQuestionRequest_MarkedAsInvalid_); ok {
		return x.MarkedAsInvalid
	}
	return nil
}

func (m *TransitionStudentQuestionRequest) GetAgreeInvalid() *TransitionStudentQuestionRequest_AgreeInvalid {
	if x, ok := m.GetMessage().(*TransitionStudentQuestionRequest_AgreeInvalid_); ok {
		return x.AgreeInvalid
	}
	return nil
}

func (m *TransitionStudentQuestionRequest) GetAgreeResolved() *TransitionStudentQuestionRequest_AgreeResolved {
	if x, ok := m.GetMessage().(*TransitionStudentQuestionRequest_AgreeResolved_); ok {
		return x.AgreeResolved
	}
	return nil
}

func (m *TransitionStudentQuestionRequest) GetRate() *TransitionStudentQuestionRequest_Rate {
	if x, ok := m.GetMessage().(*TransitionStudentQuestionRequest_Rate_); ok {
		return x.Rate
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TransitionStudentQuestionRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TransitionStudentQuestionRequest_MarkedAsResolved_)(nil),
		(*TransitionStudentQuestionRequest_MarkedAsInvalid_)(nil),
		(*TransitionStudentQuestionRequest_AgreeInvalid_)(nil),
		(*TransitionStudentQuestionRequest_AgreeResolved_)(nil),
		(*TransitionStudentQuestionRequest_Rate_)(nil),
	}
}

type TransitionStudentQuestionRequest_MarkedAsResolved struct {
	StudentQuestionId string `protobuf:"bytes,1,opt,name=student_question_id,json=studentQuestionId,proto3" json:"student_question_id,omitempty"`
}

func (m *TransitionStudentQuestionRequest_MarkedAsResolved) Reset() {
	*m = TransitionStudentQuestionRequest_MarkedAsResolved{}
}
func (*TransitionStudentQuestionRequest_MarkedAsResolved) ProtoMessage() {}
func (*TransitionStudentQuestionRequest_MarkedAsResolved) Descriptor() ([]byte, []int) {
	return fileDescriptor_32fac3b775080119, []int{7, 0}
}
func (m *TransitionStudentQuestionRequest_MarkedAsResolved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransitionStudentQuestionRequest_MarkedAsResolved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransitionStudentQuestionRequest_MarkedAsResolved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransitionStudentQuestionRequest_MarkedAsResolved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransitionStudentQuestionRequest_MarkedAsResolved.Merge(m, src)
}
func (m *TransitionStudentQuestionRequest_MarkedAsResolved) XXX_Size() int {
	return m.Size()
}
func (m *TransitionStudentQuestionRequest_MarkedAsResolved) XXX_DiscardUnknown() {
	xxx_messageInfo_TransitionStudentQuestionRequest_MarkedAsResolved.DiscardUnknown(m)
}

var xxx_messageInfo_TransitionStudentQuestionRequest_MarkedAsResolved proto.InternalMessageInfo

func (m *TransitionStudentQuestionRequest_MarkedAsResolved) GetStudentQuestionId() string {
	if m != nil {
		return m.StudentQuestionId
	}
	return ""
}

type TransitionStudentQuestionRequest_MarkedAsInvalid struct {
	StudentQuestionId string `protobuf:"bytes,1,opt,name=student_question_id,json=studentQuestionId,proto3" json:"student_question_id,omitempty"`
}

func (m *TransitionStudentQuestionRequest_MarkedAsInvalid) Reset() {
	*m = TransitionStudentQuestionRequest_MarkedAsInvalid{}
}
func (*TransitionStudentQuestionRequest_MarkedAsInvalid) ProtoMessage() {}
func (*TransitionStudentQuestionRequest_MarkedAsInvalid) Descriptor() ([]byte, []int) {
	return fileDescriptor_32fac3b775080119, []int{7, 1}
}
func (m *TransitionStudentQuestionRequest_MarkedAsInvalid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransitionStudentQuestionRequest_MarkedAsInvalid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransitionStudentQuestionRequest_MarkedAsInvalid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransitionStudentQuestionRequest_MarkedAsInvalid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransitionStudentQuestionRequest_MarkedAsInvalid.Merge(m, src)
}
func (m *TransitionStudentQuestionRequest_MarkedAsInvalid) XXX_Size() int {
	return m.Size()
}
func (m *TransitionStudentQuestionRequest_MarkedAsInvalid) XXX_DiscardUnknown() {
	xxx_messageInfo_TransitionStudentQuestionRequest_MarkedAsInvalid.DiscardUnknown(m)
}

var xxx_messageInfo_TransitionStudentQuestionRequest_MarkedAsInvalid proto.InternalMessageInfo

func (m *TransitionStudentQuestionRequest_MarkedAsInvalid) GetStudentQuestionId() string {
	if m != nil {
		return m.StudentQuestionId
	}
	return ""
}

type TransitionStudentQuestionRequest_AgreeInvalid struct {
	StudentQuestionId string `protobuf:"bytes,1,opt,name=student_question_id,json=studentQuestionId,proto3" json:"student_question_id,omitempty"`
	Agree             bool   `protobuf:"varint,2,opt,name=agree,proto3" json:"agree,omitempty"`
}

func (m *TransitionStudentQuestionRequest_AgreeInvalid) Reset() {
	*m = TransitionStudentQuestionRequest_AgreeInvalid{}
}
func (*TransitionStudentQuestionRequest_AgreeInvalid) ProtoMessage() {}
func (*TransitionStudentQuestionRequest_AgreeInvalid) Descriptor() ([]byte, []int) {
	return fileDescriptor_32fac3b775080119, []int{7, 2}
}
func (m *TransitionStudentQuestionRequest_AgreeInvalid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransitionStudentQuestionRequest_AgreeInvalid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransitionStudentQuestionRequest_AgreeInvalid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransitionStudentQuestionRequest_AgreeInvalid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransitionStudentQuestionRequest_AgreeInvalid.Merge(m, src)
}
func (m *TransitionStudentQuestionRequest_AgreeInvalid) XXX_Size() int {
	return m.Size()
}
func (m *TransitionStudentQuestionRequest_AgreeInvalid) XXX_DiscardUnknown() {
	xxx_messageInfo_TransitionStudentQuestionRequest_AgreeInvalid.DiscardUnknown(m)
}

var xxx_messageInfo_TransitionStudentQuestionRequest_AgreeInvalid proto.InternalMessageInfo

func (m *TransitionStudentQuestionRequest_AgreeInvalid) GetStudentQuestionId() string {
	if m != nil {
		return m.StudentQuestionId
	}
	return ""
}

func (m *TransitionStudentQuestionRequest_AgreeInvalid) GetAgree() bool {
	if m != nil {
		return m.Agree
	}
	return false
}

type TransitionStudentQuestionRequest_AgreeResolved struct {
	StudentQuestionId string `protobuf:"bytes,1,opt,name=student_question_id,json=studentQuestionId,proto3" json:"student_question_id,omitempty"`
	Agree             bool   `protobuf:"varint,2,opt,name=agree,proto3" json:"agree,omitempty"`
}

func (m *TransitionStudentQuestionRequest_AgreeResolved) Reset() {
	*m = TransitionStudentQuestionRequest_AgreeResolved{}
}
func (*TransitionStudentQuestionRequest_AgreeResolved) ProtoMessage() {}
func (*TransitionStudentQuestionRequest_AgreeResolved) Descriptor() ([]byte, []int) {
	return fileDescriptor_32fac3b775080119, []int{7, 3}
}
func (m *TransitionStudentQuestionRequest_AgreeResolved) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransitionStudentQuestionRequest_AgreeResolved) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransitionStudentQuestionRequest_AgreeResolved.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransitionStudentQuestionRequest_AgreeResolved) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransitionStudentQuestionRequest_AgreeResolved.Merge(m, src)
}
func (m *TransitionStudentQuestionRequest_AgreeResolved) XXX_Size() int {
	return m.Size()
}
func (m *TransitionStudentQuestionRequest_AgreeResolved) XXX_DiscardUnknown() {
	xxx_messageInfo_TransitionStudentQuestionRequest_AgreeResolved.DiscardUnknown(m)
}

var xxx_messageInfo_TransitionStudentQuestionRequest_AgreeResolved proto.InternalMessageInfo

func (m *TransitionStudentQuestionRequest_AgreeResolved) GetStudentQuestionId() string {
	if m != nil {
		return m.StudentQuestionId
	}
	return ""
}

func (m *TransitionStudentQuestionRequest_AgreeResolved) GetAgree() bool {
	if m != nil {
		return m.Agree
	}
	return false
}

type TransitionStudentQuestionRequest_Rate struct {
	StudentQuestionId string `protobuf:"bytes,1,opt,name=student_question_id,json=studentQuestionId,proto3" json:"student_question_id,omitempty"`
	Rate              string `protobuf:"bytes,2,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (m *TransitionStudentQuestionRequest_Rate) Reset()      { *m = TransitionStudentQuestionRequest_Rate{} }
func (*TransitionStudentQuestionRequest_Rate) ProtoMessage() {}
func (*TransitionStudentQuestionRequest_Rate) Descriptor() ([]byte, []int) {
	return fileDescriptor_32fac3b775080119, []int{7, 4}
}
func (m *TransitionStudentQuestionRequest_Rate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransitionStudentQuestionRequest_Rate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransitionStudentQuestionRequest_Rate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransitionStudentQuestionRequest_Rate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransitionStudentQuestionRequest_Rate.Merge(m, src)
}
func (m *TransitionStudentQuestionRequest_Rate) XXX_Size() int {
	return m.Size()
}
func (m *TransitionStudentQuestionRequest_Rate) XXX_DiscardUnknown() {
	xxx_messageInfo_TransitionStudentQuestionRequest_Rate.DiscardUnknown(m)
}

var xxx_messageInfo_TransitionStudentQuestionRequest_Rate proto.InternalMessageInfo

func (m *TransitionStudentQuestionRequest_Rate) GetStudentQuestionId() string {
	if m != nil {
		return m.StudentQuestionId
	}
	return ""
}

func (m *TransitionStudentQuestionRequest_Rate) GetRate() string {
	if m != nil {
		return m.Rate
	}
	return ""
}

type TransitionStudentQuestionResponse struct {
	StudentQuestionStatus QuestionStatus `protobuf:"varint,1,opt,name=student_question_status,json=studentQuestionStatus,proto3,enum=manabie.bob.QuestionStatus" json:"student_question_status,omitempty"`
}

func (m *TransitionStudentQuestionResponse) Reset()      { *m = TransitionStudentQuestionResponse{} }
func (*TransitionStudentQuestionResponse) ProtoMessage() {}
func (*TransitionStudentQuestionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_32fac3b775080119, []int{8}
}
func (m *TransitionStudentQuestionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransitionStudentQuestionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransitionStudentQuestionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransitionStudentQuestionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransitionStudentQuestionResponse.Merge(m, src)
}
func (m *TransitionStudentQuestionResponse) XXX_Size() int {
	return m.Size()
}
func (m *TransitionStudentQuestionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TransitionStudentQuestionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TransitionStudentQuestionResponse proto.InternalMessageInfo

func (m *TransitionStudentQuestionResponse) GetStudentQuestionStatus() QuestionStatus {
	if m != nil {
		return m.StudentQuestionStatus
	}
	return QUESTION_STATUS_WAITING_FOR_ASSIGN
}

type GetArchivedStudentQuestionRequest struct {
	Page  uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *GetArchivedStudentQuestionRequest) Reset()      { *m = GetArchivedStudentQuestionRequest{} }
func (*GetArchivedStudentQuestionRequest) ProtoMessage() {}
func (*GetArchivedStudentQuestionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_32fac3b775080119, []int{9}
}
func (m *GetArchivedStudentQuestionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetArchivedStudentQuestionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetArchivedStudentQuestionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetArchivedStudentQuestionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetArchivedStudentQuestionRequest.Merge(m, src)
}
func (m *GetArchivedStudentQuestionRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetArchivedStudentQuestionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetArchivedStudentQuestionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetArchivedStudentQuestionRequest proto.InternalMessageInfo

func (m *GetArchivedStudentQuestionRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetArchivedStudentQuestionRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type GetArchivedStudentQuestionResponse struct {
	StudentQuestions []*StudentQuestion `protobuf:"bytes,1,rep,name=student_questions,json=studentQuestions,proto3" json:"student_questions,omitempty"`
}

func (m *GetArchivedStudentQuestionResponse) Reset()      { *m = GetArchivedStudentQuestionResponse{} }
func (*GetArchivedStudentQuestionResponse) ProtoMessage() {}
func (*GetArchivedStudentQuestionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_32fac3b775080119, []int{10}
}
func (m *GetArchivedStudentQuestionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetArchivedStudentQuestionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetArchivedStudentQuestionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetArchivedStudentQuestionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetArchivedStudentQuestionResponse.Merge(m, src)
}
func (m *GetArchivedStudentQuestionResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetArchivedStudentQuestionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetArchivedStudentQuestionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetArchivedStudentQuestionResponse proto.InternalMessageInfo

func (m *GetArchivedStudentQuestionResponse) GetStudentQuestions() []*StudentQuestion {
	if m != nil {
		return m.StudentQuestions
	}
	return nil
}

type GetOpenStudentQuestionRequest struct {
	Page  uint32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *GetOpenStudentQuestionRequest) Reset()      { *m = GetOpenStudentQuestionRequest{} }
func (*GetOpenStudentQuestionRequest) ProtoMessage() {}
func (*GetOpenStudentQuestionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_32fac3b775080119, []int{11}
}
func (m *GetOpenStudentQuestionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOpenStudentQuestionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOpenStudentQuestionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOpenStudentQuestionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOpenStudentQuestionRequest.Merge(m, src)
}
func (m *GetOpenStudentQuestionRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOpenStudentQuestionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOpenStudentQuestionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOpenStudentQuestionRequest proto.InternalMessageInfo

func (m *GetOpenStudentQuestionRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *GetOpenStudentQuestionRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type GetOpenStudentQuestionResponse struct {
	StudentQuestions []*StudentQuestion `protobuf:"bytes,1,rep,name=student_questions,json=studentQuestions,proto3" json:"student_questions,omitempty"`
}

func (m *GetOpenStudentQuestionResponse) Reset()      { *m = GetOpenStudentQuestionResponse{} }
func (*GetOpenStudentQuestionResponse) ProtoMessage() {}
func (*GetOpenStudentQuestionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_32fac3b775080119, []int{12}
}
func (m *GetOpenStudentQuestionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOpenStudentQuestionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOpenStudentQuestionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOpenStudentQuestionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOpenStudentQuestionResponse.Merge(m, src)
}
func (m *GetOpenStudentQuestionResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetOpenStudentQuestionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOpenStudentQuestionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetOpenStudentQuestionResponse proto.InternalMessageInfo

func (m *GetOpenStudentQuestionResponse) GetStudentQuestions() []*StudentQuestion {
	if m != nil {
		return m.StudentQuestions
	}
	return nil
}

type AllocateStudentQuestionRequest struct {
	StudentQuestionId string `protobuf:"bytes,1,opt,name=student_question_id,json=studentQuestionId,proto3" json:"student_question_id,omitempty"`
}

func (m *AllocateStudentQuestionRequest) Reset()      { *m = AllocateStudentQuestionRequest{} }
func (*AllocateStudentQuestionRequest) ProtoMessage() {}
func (*AllocateStudentQuestionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_32fac3b775080119, []int{13}
}
func (m *AllocateStudentQuestionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllocateStudentQuestionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllocateStudentQuestionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllocateStudentQuestionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocateStudentQuestionRequest.Merge(m, src)
}
func (m *AllocateStudentQuestionRequest) XXX_Size() int {
	return m.Size()
}
func (m *AllocateStudentQuestionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocateStudentQuestionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllocateStudentQuestionRequest proto.InternalMessageInfo

func (m *AllocateStudentQuestionRequest) GetStudentQuestionId() string {
	if m != nil {
		return m.StudentQuestionId
	}
	return ""
}

type AllocateStudentQuestionResponse struct {
}

func (m *AllocateStudentQuestionResponse) Reset()      { *m = AllocateStudentQuestionResponse{} }
func (*AllocateStudentQuestionResponse) ProtoMessage() {}
func (*AllocateStudentQuestionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_32fac3b775080119, []int{14}
}
func (m *AllocateStudentQuestionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllocateStudentQuestionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllocateStudentQuestionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllocateStudentQuestionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocateStudentQuestionResponse.Merge(m, src)
}
func (m *AllocateStudentQuestionResponse) XXX_Size() int {
	return m.Size()
}
func (m *AllocateStudentQuestionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocateStudentQuestionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AllocateStudentQuestionResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CreateQuestionRequest)(nil), "manabie.bob.CreateQuestionRequest")
	golang_proto.RegisterType((*CreateQuestionRequest)(nil), "manabie.bob.CreateQuestionRequest")
	proto.RegisterType((*CreateQuestionResponse)(nil), "manabie.bob.CreateQuestionResponse")
	golang_proto.RegisterType((*CreateQuestionResponse)(nil), "manabie.bob.CreateQuestionResponse")
	proto.RegisterType((*QuestionRemainRequest)(nil), "manabie.bob.QuestionRemainRequest")
	golang_proto.RegisterType((*QuestionRemainRequest)(nil), "manabie.bob.QuestionRemainRequest")
	proto.RegisterType((*QuestionRemainResponse)(nil), "manabie.bob.QuestionRemainResponse")
	golang_proto.RegisterType((*QuestionRemainResponse)(nil), "manabie.bob.QuestionRemainResponse")
	proto.RegisterType((*GetStudentQuestionRequest)(nil), "manabie.bob.GetStudentQuestionRequest")
	golang_proto.RegisterType((*GetStudentQuestionRequest)(nil), "manabie.bob.GetStudentQuestionRequest")
	proto.RegisterType((*StudentQuestion)(nil), "manabie.bob.StudentQuestion")
	golang_proto.RegisterType((*StudentQuestion)(nil), "manabie.bob.StudentQuestion")
	proto.RegisterType((*GetStudentQuestionResponse)(nil), "manabie.bob.GetStudentQuestionResponse")
	golang_proto.RegisterType((*GetStudentQuestionResponse)(nil), "manabie.bob.GetStudentQuestionResponse")
	proto.RegisterType((*TransitionStudentQuestionRequest)(nil), "manabie.bob.TransitionStudentQuestionRequest")
	golang_proto.RegisterType((*TransitionStudentQuestionRequest)(nil), "manabie.bob.TransitionStudentQuestionRequest")
	proto.RegisterType((*TransitionStudentQuestionRequest_MarkedAsResolved)(nil), "manabie.bob.TransitionStudentQuestionRequest.MarkedAsResolved")
	golang_proto.RegisterType((*TransitionStudentQuestionRequest_MarkedAsResolved)(nil), "manabie.bob.TransitionStudentQuestionRequest.MarkedAsResolved")
	proto.RegisterType((*TransitionStudentQuestionRequest_MarkedAsInvalid)(nil), "manabie.bob.TransitionStudentQuestionRequest.MarkedAsInvalid")
	golang_proto.RegisterType((*TransitionStudentQuestionRequest_MarkedAsInvalid)(nil), "manabie.bob.TransitionStudentQuestionRequest.MarkedAsInvalid")
	proto.RegisterType((*TransitionStudentQuestionRequest_AgreeInvalid)(nil), "manabie.bob.TransitionStudentQuestionRequest.AgreeInvalid")
	golang_proto.RegisterType((*TransitionStudentQuestionRequest_AgreeInvalid)(nil), "manabie.bob.TransitionStudentQuestionRequest.AgreeInvalid")
	proto.RegisterType((*TransitionStudentQuestionRequest_AgreeResolved)(nil), "manabie.bob.TransitionStudentQuestionRequest.AgreeResolved")
	golang_proto.RegisterType((*TransitionStudentQuestionRequest_AgreeResolved)(nil), "manabie.bob.TransitionStudentQuestionRequest.AgreeResolved")
	proto.RegisterType((*TransitionStudentQuestionRequest_Rate)(nil), "manabie.bob.TransitionStudentQuestionRequest.Rate")
	golang_proto.RegisterType((*TransitionStudentQuestionRequest_Rate)(nil), "manabie.bob.TransitionStudentQuestionRequest.Rate")
	proto.RegisterType((*TransitionStudentQuestionResponse)(nil), "manabie.bob.TransitionStudentQuestionResponse")
	golang_proto.RegisterType((*TransitionStudentQuestionResponse)(nil), "manabie.bob.TransitionStudentQuestionResponse")
	proto.RegisterType((*GetArchivedStudentQuestionRequest)(nil), "manabie.bob.GetArchivedStudentQuestionRequest")
	golang_proto.RegisterType((*GetArchivedStudentQuestionRequest)(nil), "manabie.bob.GetArchivedStudentQuestionRequest")
	proto.RegisterType((*GetArchivedStudentQuestionResponse)(nil), "manabie.bob.GetArchivedStudentQuestionResponse")
	golang_proto.RegisterType((*GetArchivedStudentQuestionResponse)(nil), "manabie.bob.GetArchivedStudentQuestionResponse")
	proto.RegisterType((*GetOpenStudentQuestionRequest)(nil), "manabie.bob.GetOpenStudentQuestionRequest")
	golang_proto.RegisterType((*GetOpenStudentQuestionRequest)(nil), "manabie.bob.GetOpenStudentQuestionRequest")
	proto.RegisterType((*GetOpenStudentQuestionResponse)(nil), "manabie.bob.GetOpenStudentQuestionResponse")
	golang_proto.RegisterType((*GetOpenStudentQuestionResponse)(nil), "manabie.bob.GetOpenStudentQuestionResponse")
	proto.RegisterType((*AllocateStudentQuestionRequest)(nil), "manabie.bob.AllocateStudentQuestionRequest")
	golang_proto.RegisterType((*AllocateStudentQuestionRequest)(nil), "manabie.bob.AllocateStudentQuestionRequest")
	proto.RegisterType((*AllocateStudentQuestionResponse)(nil), "manabie.bob.AllocateStudentQuestionResponse")
	golang_proto.RegisterType((*AllocateStudentQuestionResponse)(nil), "manabie.bob.AllocateStudentQuestionResponse")
}

func init() { proto.RegisterFile("ask_tutor.proto", fileDescriptor_32fac3b775080119) }
func init() { golang_proto.RegisterFile("ask_tutor.proto", fileDescriptor_32fac3b775080119) }

var fileDescriptor_32fac3b775080119 = []byte{
	// 1076 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x4b, 0x73, 0xe3, 0x44,
	0x10, 0x96, 0xe2, 0x57, 0xdc, 0x8e, 0xf3, 0x98, 0xcd, 0x43, 0x2b, 0x58, 0x6d, 0x22, 0xaa, 0x20,
	0x05, 0xc4, 0xa1, 0xbc, 0x9c, 0xd8, 0x82, 0x2a, 0x87, 0xad, 0x4a, 0x42, 0x55, 0x58, 0x50, 0xc2,
	0x05, 0x0e, 0xaa, 0x91, 0x35, 0x68, 0x85, 0xf5, 0x70, 0x34, 0xa3, 0x14, 0x4b, 0x6d, 0x15, 0xfc,
	0x04, 0xae, 0x1c, 0xb8, 0x73, 0xe3, 0x2f, 0xc0, 0x8d, 0x63, 0x8e, 0x7b, 0x24, 0xce, 0x85, 0xe3,
	0xfe, 0x04, 0x4a, 0x33, 0xb2, 0x63, 0x29, 0x96, 0x13, 0xef, 0xe6, 0x36, 0xfd, 0xd0, 0xf7, 0xf5,
	0x74, 0xf7, 0xb4, 0xdb, 0xb0, 0x84, 0x69, 0xcf, 0x64, 0x31, 0x0b, 0xa3, 0x56, 0x3f, 0x0a, 0x59,
	0x88, 0x1a, 0x3e, 0x0e, 0xb0, 0xe5, 0x92, 0x96, 0x15, 0x5a, 0x2a, 0x90, 0x20, 0xf6, 0x85, 0x41,
	0xdd, 0x71, 0x5c, 0xf6, 0x2c, 0xb6, 0x5a, 0xdd, 0xd0, 0xdf, 0x75, 0x42, 0x27, 0xdc, 0xe5, 0x6a,
	0x2b, 0xfe, 0x9e, 0x4b, 0x5c, 0xe0, 0x27, 0xe1, 0xae, 0xff, 0x29, 0xc3, 0xda, 0xe7, 0x11, 0xc1,
	0x8c, 0x7c, 0x1d, 0x13, 0xca, 0xdc, 0x30, 0x30, 0xc8, 0x69, 0x72, 0x42, 0x1b, 0x50, 0x3b, 0x8d,
	0xdd, 0x9f, 0x4c, 0xd7, 0x56, 0xe4, 0x4d, 0x79, 0xbb, 0x6e, 0x54, 0x13, 0xf1, 0xd0, 0x46, 0x0a,
	0xd4, 0xba, 0x61, 0xc0, 0x48, 0xc0, 0x94, 0x39, 0x6e, 0x18, 0x8a, 0xe8, 0x01, 0x40, 0x1c, 0x79,
	0xa6, 0x4f, 0x6c, 0x17, 0x53, 0xa5, 0xb4, 0x59, 0xda, 0xae, 0x1b, 0xf5, 0x38, 0xf2, 0x8e, 0xb8,
	0x02, 0xb5, 0xa0, 0x46, 0x63, 0xeb, 0x07, 0xd2, 0x65, 0x4a, 0x79, 0x53, 0xde, 0x5e, 0x6c, 0xaf,
	0xb6, 0xc6, 0x6e, 0xd1, 0x3a, 0x16, 0x36, 0x63, 0xe8, 0x84, 0x56, 0xa1, 0xc2, 0x5c, 0xe6, 0x11,
	0xa5, 0xc2, 0x69, 0x84, 0xa0, 0x2b, 0xb0, 0x9e, 0x0f, 0x98, 0xf6, 0xc3, 0x80, 0x12, 0x7d, 0x03,
	0xd6, 0xae, 0x74, 0x3e, 0x76, 0x87, 0x57, 0xd1, 0x5f, 0xc0, 0x7a, 0xde, 0x20, 0x3e, 0x41, 0xeb,
	0x50, 0x8d, 0xb8, 0x86, 0xdf, 0xb1, 0x62, 0xa4, 0x12, 0xa7, 0x0e, 0x19, 0xf6, 0xf8, 0x0d, 0x2b,
	0x86, 0x10, 0xd0, 0xc7, 0x30, 0x6f, 0xc7, 0x11, 0x4e, 0x70, 0x94, 0x12, 0xbf, 0x81, 0x92, 0xb9,
	0x41, 0x87, 0xf6, 0x9e, 0xa4, 0x76, 0x63, 0xe4, 0xa9, 0x1f, 0xc1, 0xfd, 0x7d, 0xc2, 0x8e, 0x59,
	0x6c, 0x93, 0x80, 0xe5, 0xb3, 0xfc, 0x11, 0xac, 0x52, 0x61, 0x31, 0x4f, 0x53, 0x93, 0xe9, 0xda,
	0x54, 0x91, 0x79, 0xf2, 0x10, 0xcd, 0x7e, 0x75, 0x68, 0x53, 0xfd, 0xef, 0x12, 0x2c, 0xe5, 0xc0,
	0x50, 0x0b, 0xee, 0x4d, 0x40, 0x49, 0xeb, 0xb6, 0x72, 0x0d, 0x64, 0xbc, 0xb6, 0x73, 0x45, 0xb5,
	0x2d, 0x4d, 0xab, 0x6d, 0x39, 0x5f, 0xdb, 0x47, 0x50, 0xa5, 0x0c, 0xb3, 0x98, 0xf2, 0x62, 0x2d,
	0xb6, 0xdf, 0xca, 0x24, 0x66, 0x48, 0x7d, 0xcc, 0x5d, 0x8c, 0xd4, 0x35, 0x09, 0xc3, 0x0b, 0xcd,
	0x00, 0xfb, 0x44, 0xa9, 0x8a, 0x30, 0xbc, 0xf0, 0x4b, 0xec, 0x93, 0xf1, 0x4e, 0xa9, 0xdd, 0xa6,
	0x53, 0x10, 0x94, 0x23, 0xcc, 0x88, 0x32, 0xcf, 0x51, 0xf8, 0x39, 0x09, 0x98, 0x85, 0x7d, 0xb7,
	0x2b, 0xf0, 0xeb, 0xdc, 0x52, 0xe7, 0x9a, 0x94, 0xe2, 0x9e, 0x30, 0xdb, 0x2e, 0xed, 0x7b, 0xf8,
	0xb9, 0x19, 0x46, 0x36, 0x89, 0x14, 0xd8, 0x94, 0xb7, 0x9b, 0xc6, 0x0a, 0x37, 0x3d, 0x11, 0x96,
	0xa7, 0x89, 0x01, 0x3d, 0x84, 0x46, 0x92, 0xc7, 0xe7, 0xa6, 0x13, 0xbb, 0x36, 0x51, 0x1a, 0x1c,
	0x0f, 0xb8, 0x6a, 0x3f, 0xd1, 0x24, 0x2d, 0xe3, 0x44, 0xd8, 0x26, 0xca, 0x82, 0xe8, 0x56, 0x2e,
	0x5c, 0xf5, 0x70, 0x73, 0xbc, 0x87, 0x1d, 0x50, 0x27, 0xb5, 0x44, 0xda, 0x94, 0x87, 0xb0, 0x92,
	0xaf, 0xa6, 0x68, 0x88, 0x46, 0xfb, 0xed, 0x6c, 0x1e, 0x72, 0x00, 0xcb, 0xb9, 0x4a, 0x53, 0xfd,
	0xf7, 0x1a, 0x6c, 0x9e, 0x44, 0x38, 0xa0, 0xae, 0x48, 0xff, 0xc4, 0x1e, 0x0c, 0x00, 0xf9, 0x38,
	0xea, 0x11, 0xdb, 0xc4, 0xd4, 0x8c, 0x08, 0x0d, 0xbd, 0x33, 0x22, 0x9a, 0xa7, 0xd1, 0xfe, 0x2c,
	0x43, 0x78, 0x13, 0x54, 0xeb, 0x88, 0xe3, 0x74, 0xa8, 0x91, 0xa2, 0x1c, 0x48, 0xc6, 0xb2, 0x9f,
	0xd3, 0xa1, 0x1e, 0xac, 0x5c, 0xf1, 0xb9, 0xc1, 0x19, 0xf6, 0xd2, 0x3e, 0x6c, 0xb4, 0x3f, 0x7d,
	0x3d, 0xba, 0x43, 0x01, 0x72, 0x20, 0x19, 0x4b, 0x7e, 0x56, 0x85, 0x30, 0x34, 0xb1, 0x13, 0x11,
	0x32, 0x22, 0x2a, 0x71, 0xa2, 0x4f, 0x66, 0x23, 0xea, 0x24, 0x10, 0x57, 0x2c, 0x0b, 0x78, 0x4c,
	0x46, 0x36, 0x2c, 0x0a, 0x8a, 0x51, 0xee, 0xca, 0x9c, 0xe3, 0xf1, 0x6b, 0x70, 0x8c, 0x25, 0x4e,
	0xc4, 0x3d, 0xca, 0xda, 0x41, 0xda, 0xe3, 0x15, 0x8e, 0xdd, 0x9e, 0x0d, 0xdb, 0xc0, 0x8c, 0x1c,
	0x48, 0xe2, 0x65, 0xa8, 0x7b, 0xb0, 0x9c, 0xaf, 0xd3, 0xac, 0x13, 0x44, 0xed, 0xc0, 0x52, 0x2e,
	0xf9, 0x33, 0x43, 0x9c, 0xc0, 0xc2, 0x78, 0x5a, 0x67, 0x1e, 0x62, 0xab, 0x50, 0xe1, 0x19, 0xe2,
	0xad, 0x33, 0x6f, 0x08, 0x41, 0xfd, 0x06, 0x9a, 0x99, 0x44, 0xde, 0x11, 0xec, 0x17, 0x50, 0x4e,
	0x72, 0x38, 0x33, 0xda, 0x70, 0x32, 0xcd, 0x5d, 0x4d, 0xa6, 0xbd, 0x3a, 0xd4, 0x7c, 0x42, 0x29,
	0x76, 0x88, 0xfe, 0x23, 0x6c, 0x4d, 0xa9, 0x5d, 0x3a, 0x0f, 0x8e, 0x61, 0xe3, 0x1a, 0x67, 0x3a,
	0x6c, 0xe5, 0x9b, 0x87, 0xed, 0x5a, 0x2e, 0x28, 0xa1, 0xd6, 0x8f, 0x60, 0x6b, 0x9f, 0xb0, 0x4e,
	0xd4, 0x7d, 0xe6, 0x9e, 0x11, 0xbb, 0x60, 0x32, 0x20, 0x28, 0xf7, 0xb1, 0x43, 0x38, 0x4d, 0xd3,
	0xe0, 0xe7, 0x24, 0x3f, 0x9e, 0xeb, 0xbb, 0xe2, 0xc7, 0xbf, 0x69, 0x08, 0x41, 0x0f, 0x41, 0x9f,
	0x06, 0x77, 0xf7, 0x93, 0xed, 0x10, 0x1e, 0xec, 0x13, 0xf6, 0xb4, 0x4f, 0x82, 0x37, 0x8e, 0xbd,
	0x07, 0x5a, 0x11, 0xd4, 0xdd, 0xc7, 0xfd, 0x15, 0x68, 0x1d, 0xcf, 0x0b, 0xbb, 0x98, 0x91, 0x82,
	0xc0, 0x67, 0x6c, 0x31, 0x7d, 0x0b, 0x1e, 0x16, 0x22, 0x8a, 0xf8, 0xdb, 0xbf, 0x55, 0x61, 0xbe,
	0x43, 0x7b, 0x27, 0xc9, 0x02, 0x89, 0xbe, 0x83, 0xc5, 0xec, 0x02, 0x85, 0xf4, 0xcc, 0x1d, 0x26,
	0xae, 0x83, 0xea, 0x3b, 0x53, 0x7d, 0xd2, 0x0d, 0x4c, 0x4a, 0xc0, 0xb3, 0xab, 0x56, 0x0e, 0x7c,
	0xe2, 0x82, 0x96, 0x03, 0x9f, 0xbc, 0xab, 0xe9, 0x12, 0x72, 0x00, 0x5d, 0xff, 0xd9, 0x44, 0xef,
	0x66, 0x3e, 0x2e, 0x5c, 0xb5, 0xd4, 0xf7, 0x6e, 0xf4, 0x1b, 0x11, 0xbd, 0x80, 0xfb, 0x85, 0xcf,
	0x12, 0xed, 0xcc, 0x34, 0x7a, 0xd5, 0xd6, 0x6d, 0xdd, 0x47, 0xec, 0x3f, 0xf3, 0xed, 0xa0, 0xe0,
	0x2d, 0xa1, 0x56, 0xfe, 0x1a, 0xd3, 0xdf, 0xb0, 0xba, 0x7b, 0x6b, 0xff, 0x51, 0x00, 0x14, 0xd6,
	0x27, 0x3f, 0x08, 0xf4, 0x7e, 0x1e, 0xac, 0xf8, 0x01, 0xaa, 0x1f, 0xdc, 0xca, 0x77, 0x44, 0x7a,
	0x06, 0x1b, 0x05, 0x6d, 0x8c, 0xb2, 0x48, 0xd3, 0x9f, 0x8f, 0xfa, 0xe1, 0xed, 0x9c, 0x87, 0xbc,
	0x7b, 0xde, 0xf9, 0x85, 0x26, 0xbd, 0xbc, 0xd0, 0xa4, 0x57, 0x17, 0x9a, 0xfc, 0xcb, 0x40, 0x93,
	0xff, 0x18, 0x68, 0xf2, 0x3f, 0x03, 0x4d, 0x3e, 0x1f, 0x68, 0xf2, 0xbf, 0x03, 0x4d, 0xfe, 0x6f,
	0xa0, 0x49, 0xaf, 0x06, 0x9a, 0xfc, 0xeb, 0xa5, 0x26, 0xfd, 0x75, 0xa9, 0xc9, 0xe7, 0x97, 0x9a,
	0xf4, 0xf2, 0x52, 0x93, 0xbe, 0x6d, 0x8f, 0xfd, 0xd5, 0x4a, 0x39, 0x77, 0x92, 0xb3, 0x85, 0xbb,
	0x3d, 0x12, 0xd8, 0xbb, 0xfd, 0x9e, 0xb3, 0xeb, 0x90, 0x40, 0xfc, 0xe7, 0xb2, 0x42, 0xeb, 0x71,
	0xdf, 0xb2, 0xaa, 0x5c, 0x7a, 0xf4, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2d, 0xac, 0x5e, 0xed,
	0xd1, 0x0d, 0x00, 0x00,
}

func (this *CreateQuestionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateQuestionRequest)
	if !ok {
		that2, ok := that.(CreateQuestionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.QuizId != that1.QuizId {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	if len(this.UrlMedias) != len(that1.UrlMedias) {
		return false
	}
	for i := range this.UrlMedias {
		if this.UrlMedias[i] != that1.UrlMedias[i] {
			return false
		}
	}
	if this.Subject != that1.Subject {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	return true
}
func (this *CreateQuestionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateQuestionResponse)
	if !ok {
		that2, ok := that.(CreateQuestionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *QuestionRemainRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QuestionRemainRequest)
	if !ok {
		that2, ok := that.(QuestionRemainRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *QuestionRemainResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QuestionRemainResponse)
	if !ok {
		that2, ok := that.(QuestionRemainResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Remain != that1.Remain {
		return false
	}
	if this.Total != that1.Total {
		return false
	}
	if this.Duration != that1.Duration {
		return false
	}
	return true
}
func (this *GetStudentQuestionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetStudentQuestionRequest)
	if !ok {
		that2, ok := that.(GetStudentQuestionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.StudentQuestionIds) != len(that1.StudentQuestionIds) {
		return false
	}
	for i := range this.StudentQuestionIds {
		if this.StudentQuestionIds[i] != that1.StudentQuestionIds[i] {
			return false
		}
	}
	return true
}
func (this *StudentQuestion) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StudentQuestion)
	if !ok {
		that2, ok := that.(StudentQuestion)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StudentQuestionId != that1.StudentQuestionId {
		return false
	}
	if this.QuizId != that1.QuizId {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	if len(this.UrlMedias) != len(that1.UrlMedias) {
		return false
	}
	for i := range this.UrlMedias {
		if this.UrlMedias[i] != that1.UrlMedias[i] {
			return false
		}
	}
	if this.Status != that1.Status {
		return false
	}
	if this.LoName != that1.LoName {
		return false
	}
	if this.Subject != that1.Subject {
		return false
	}
	if this.Rate != that1.Rate {
		return false
	}
	if this.TopicName != that1.TopicName {
		return false
	}
	if this.TopicDisplayOrder != that1.TopicDisplayOrder {
		return false
	}
	if this.StudyGuide != that1.StudyGuide {
		return false
	}
	if this.Grade != that1.Grade {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	return true
}
func (this *GetStudentQuestionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetStudentQuestionResponse)
	if !ok {
		that2, ok := that.(GetStudentQuestionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.StudentQuestions) != len(that1.StudentQuestions) {
		return false
	}
	for i := range this.StudentQuestions {
		if !this.StudentQuestions[i].Equal(that1.StudentQuestions[i]) {
			return false
		}
	}
	return true
}
func (this *TransitionStudentQuestionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransitionStudentQuestionRequest)
	if !ok {
		that2, ok := that.(TransitionStudentQuestionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Message == nil {
		if this.Message != nil {
			return false
		}
	} else if this.Message == nil {
		return false
	} else if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *TransitionStudentQuestionRequest_MarkedAsResolved_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransitionStudentQuestionRequest_MarkedAsResolved_)
	if !ok {
		that2, ok := that.(TransitionStudentQuestionRequest_MarkedAsResolved_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MarkedAsResolved.Equal(that1.MarkedAsResolved) {
		return false
	}
	return true
}
func (this *TransitionStudentQuestionRequest_MarkedAsInvalid_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransitionStudentQuestionRequest_MarkedAsInvalid_)
	if !ok {
		that2, ok := that.(TransitionStudentQuestionRequest_MarkedAsInvalid_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MarkedAsInvalid.Equal(that1.MarkedAsInvalid) {
		return false
	}
	return true
}
func (this *TransitionStudentQuestionRequest_AgreeInvalid_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransitionStudentQuestionRequest_AgreeInvalid_)
	if !ok {
		that2, ok := that.(TransitionStudentQuestionRequest_AgreeInvalid_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AgreeInvalid.Equal(that1.AgreeInvalid) {
		return false
	}
	return true
}
func (this *TransitionStudentQuestionRequest_AgreeResolved_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransitionStudentQuestionRequest_AgreeResolved_)
	if !ok {
		that2, ok := that.(TransitionStudentQuestionRequest_AgreeResolved_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AgreeResolved.Equal(that1.AgreeResolved) {
		return false
	}
	return true
}
func (this *TransitionStudentQuestionRequest_Rate_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransitionStudentQuestionRequest_Rate_)
	if !ok {
		that2, ok := that.(TransitionStudentQuestionRequest_Rate_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Rate.Equal(that1.Rate) {
		return false
	}
	return true
}
func (this *TransitionStudentQuestionRequest_MarkedAsResolved) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransitionStudentQuestionRequest_MarkedAsResolved)
	if !ok {
		that2, ok := that.(TransitionStudentQuestionRequest_MarkedAsResolved)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StudentQuestionId != that1.StudentQuestionId {
		return false
	}
	return true
}
func (this *TransitionStudentQuestionRequest_MarkedAsInvalid) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransitionStudentQuestionRequest_MarkedAsInvalid)
	if !ok {
		that2, ok := that.(TransitionStudentQuestionRequest_MarkedAsInvalid)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StudentQuestionId != that1.StudentQuestionId {
		return false
	}
	return true
}
func (this *TransitionStudentQuestionRequest_AgreeInvalid) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransitionStudentQuestionRequest_AgreeInvalid)
	if !ok {
		that2, ok := that.(TransitionStudentQuestionRequest_AgreeInvalid)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StudentQuestionId != that1.StudentQuestionId {
		return false
	}
	if this.Agree != that1.Agree {
		return false
	}
	return true
}
func (this *TransitionStudentQuestionRequest_AgreeResolved) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransitionStudentQuestionRequest_AgreeResolved)
	if !ok {
		that2, ok := that.(TransitionStudentQuestionRequest_AgreeResolved)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StudentQuestionId != that1.StudentQuestionId {
		return false
	}
	if this.Agree != that1.Agree {
		return false
	}
	return true
}
func (this *TransitionStudentQuestionRequest_Rate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransitionStudentQuestionRequest_Rate)
	if !ok {
		that2, ok := that.(TransitionStudentQuestionRequest_Rate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StudentQuestionId != that1.StudentQuestionId {
		return false
	}
	if this.Rate != that1.Rate {
		return false
	}
	return true
}
func (this *TransitionStudentQuestionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TransitionStudentQuestionResponse)
	if !ok {
		that2, ok := that.(TransitionStudentQuestionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StudentQuestionStatus != that1.StudentQuestionStatus {
		return false
	}
	return true
}
func (this *GetArchivedStudentQuestionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetArchivedStudentQuestionRequest)
	if !ok {
		that2, ok := that.(GetArchivedStudentQuestionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	return true
}
func (this *GetArchivedStudentQuestionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetArchivedStudentQuestionResponse)
	if !ok {
		that2, ok := that.(GetArchivedStudentQuestionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.StudentQuestions) != len(that1.StudentQuestions) {
		return false
	}
	for i := range this.StudentQuestions {
		if !this.StudentQuestions[i].Equal(that1.StudentQuestions[i]) {
			return false
		}
	}
	return true
}
func (this *GetOpenStudentQuestionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetOpenStudentQuestionRequest)
	if !ok {
		that2, ok := that.(GetOpenStudentQuestionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	return true
}
func (this *GetOpenStudentQuestionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetOpenStudentQuestionResponse)
	if !ok {
		that2, ok := that.(GetOpenStudentQuestionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.StudentQuestions) != len(that1.StudentQuestions) {
		return false
	}
	for i := range this.StudentQuestions {
		if !this.StudentQuestions[i].Equal(that1.StudentQuestions[i]) {
			return false
		}
	}
	return true
}
func (this *AllocateStudentQuestionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllocateStudentQuestionRequest)
	if !ok {
		that2, ok := that.(AllocateStudentQuestionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StudentQuestionId != that1.StudentQuestionId {
		return false
	}
	return true
}
func (this *AllocateStudentQuestionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AllocateStudentQuestionResponse)
	if !ok {
		that2, ok := that.(AllocateStudentQuestionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CreateQuestionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.CreateQuestionRequest{")
	s = append(s, "QuizId: "+fmt.Sprintf("%#v", this.QuizId)+",\n")
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	s = append(s, "UrlMedias: "+fmt.Sprintf("%#v", this.UrlMedias)+",\n")
	s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateQuestionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.CreateQuestionResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QuestionRemainRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.QuestionRemainRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QuestionRemainResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.QuestionRemainResponse{")
	s = append(s, "Remain: "+fmt.Sprintf("%#v", this.Remain)+",\n")
	s = append(s, "Total: "+fmt.Sprintf("%#v", this.Total)+",\n")
	s = append(s, "Duration: "+fmt.Sprintf("%#v", this.Duration)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetStudentQuestionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetStudentQuestionRequest{")
	s = append(s, "StudentQuestionIds: "+fmt.Sprintf("%#v", this.StudentQuestionIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StudentQuestion) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&pb.StudentQuestion{")
	s = append(s, "StudentQuestionId: "+fmt.Sprintf("%#v", this.StudentQuestionId)+",\n")
	s = append(s, "QuizId: "+fmt.Sprintf("%#v", this.QuizId)+",\n")
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	s = append(s, "UrlMedias: "+fmt.Sprintf("%#v", this.UrlMedias)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "LoName: "+fmt.Sprintf("%#v", this.LoName)+",\n")
	s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	s = append(s, "Rate: "+fmt.Sprintf("%#v", this.Rate)+",\n")
	s = append(s, "TopicName: "+fmt.Sprintf("%#v", this.TopicName)+",\n")
	s = append(s, "TopicDisplayOrder: "+fmt.Sprintf("%#v", this.TopicDisplayOrder)+",\n")
	s = append(s, "StudyGuide: "+fmt.Sprintf("%#v", this.StudyGuide)+",\n")
	s = append(s, "Grade: "+fmt.Sprintf("%#v", this.Grade)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetStudentQuestionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetStudentQuestionResponse{")
	if this.StudentQuestions != nil {
		s = append(s, "StudentQuestions: "+fmt.Sprintf("%#v", this.StudentQuestions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransitionStudentQuestionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.TransitionStudentQuestionRequest{")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransitionStudentQuestionRequest_MarkedAsResolved_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.TransitionStudentQuestionRequest_MarkedAsResolved_{` +
		`MarkedAsResolved:` + fmt.Sprintf("%#v", this.MarkedAsResolved) + `}`}, ", ")
	return s
}
func (this *TransitionStudentQuestionRequest_MarkedAsInvalid_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.TransitionStudentQuestionRequest_MarkedAsInvalid_{` +
		`MarkedAsInvalid:` + fmt.Sprintf("%#v", this.MarkedAsInvalid) + `}`}, ", ")
	return s
}
func (this *TransitionStudentQuestionRequest_AgreeInvalid_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.TransitionStudentQuestionRequest_AgreeInvalid_{` +
		`AgreeInvalid:` + fmt.Sprintf("%#v", this.AgreeInvalid) + `}`}, ", ")
	return s
}
func (this *TransitionStudentQuestionRequest_AgreeResolved_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.TransitionStudentQuestionRequest_AgreeResolved_{` +
		`AgreeResolved:` + fmt.Sprintf("%#v", this.AgreeResolved) + `}`}, ", ")
	return s
}
func (this *TransitionStudentQuestionRequest_Rate_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.TransitionStudentQuestionRequest_Rate_{` +
		`Rate:` + fmt.Sprintf("%#v", this.Rate) + `}`}, ", ")
	return s
}
func (this *TransitionStudentQuestionRequest_MarkedAsResolved) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.TransitionStudentQuestionRequest_MarkedAsResolved{")
	s = append(s, "StudentQuestionId: "+fmt.Sprintf("%#v", this.StudentQuestionId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransitionStudentQuestionRequest_MarkedAsInvalid) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.TransitionStudentQuestionRequest_MarkedAsInvalid{")
	s = append(s, "StudentQuestionId: "+fmt.Sprintf("%#v", this.StudentQuestionId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransitionStudentQuestionRequest_AgreeInvalid) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.TransitionStudentQuestionRequest_AgreeInvalid{")
	s = append(s, "StudentQuestionId: "+fmt.Sprintf("%#v", this.StudentQuestionId)+",\n")
	s = append(s, "Agree: "+fmt.Sprintf("%#v", this.Agree)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransitionStudentQuestionRequest_AgreeResolved) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.TransitionStudentQuestionRequest_AgreeResolved{")
	s = append(s, "StudentQuestionId: "+fmt.Sprintf("%#v", this.StudentQuestionId)+",\n")
	s = append(s, "Agree: "+fmt.Sprintf("%#v", this.Agree)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransitionStudentQuestionRequest_Rate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.TransitionStudentQuestionRequest_Rate{")
	s = append(s, "StudentQuestionId: "+fmt.Sprintf("%#v", this.StudentQuestionId)+",\n")
	s = append(s, "Rate: "+fmt.Sprintf("%#v", this.Rate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TransitionStudentQuestionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.TransitionStudentQuestionResponse{")
	s = append(s, "StudentQuestionStatus: "+fmt.Sprintf("%#v", this.StudentQuestionStatus)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetArchivedStudentQuestionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.GetArchivedStudentQuestionRequest{")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetArchivedStudentQuestionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetArchivedStudentQuestionResponse{")
	if this.StudentQuestions != nil {
		s = append(s, "StudentQuestions: "+fmt.Sprintf("%#v", this.StudentQuestions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetOpenStudentQuestionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.GetOpenStudentQuestionRequest{")
	s = append(s, "Page: "+fmt.Sprintf("%#v", this.Page)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetOpenStudentQuestionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetOpenStudentQuestionResponse{")
	if this.StudentQuestions != nil {
		s = append(s, "StudentQuestions: "+fmt.Sprintf("%#v", this.StudentQuestions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AllocateStudentQuestionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.AllocateStudentQuestionRequest{")
	s = append(s, "StudentQuestionId: "+fmt.Sprintf("%#v", this.StudentQuestionId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AllocateStudentQuestionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.AllocateStudentQuestionResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAskTutor(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AskTutorClient is the client API for AskTutor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AskTutorClient interface {
	CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*CreateQuestionResponse, error)
	QuestionRemain(ctx context.Context, in *QuestionRemainRequest, opts ...grpc.CallOption) (*QuestionRemainResponse, error)
	GetStudentQuestion(ctx context.Context, in *GetStudentQuestionRequest, opts ...grpc.CallOption) (*GetStudentQuestionResponse, error)
	TransitionStudentQuestion(ctx context.Context, in *TransitionStudentQuestionRequest, opts ...grpc.CallOption) (*TransitionStudentQuestionResponse, error)
	GetArchivedStudentQuestion(ctx context.Context, in *GetArchivedStudentQuestionRequest, opts ...grpc.CallOption) (*GetArchivedStudentQuestionResponse, error)
	GetOpenStudentQuestion(ctx context.Context, in *GetOpenStudentQuestionRequest, opts ...grpc.CallOption) (*GetOpenStudentQuestionResponse, error)
	AllocateStudentQuestion(ctx context.Context, in *AllocateStudentQuestionRequest, opts ...grpc.CallOption) (*AllocateStudentQuestionResponse, error)
}

type askTutorClient struct {
	cc *grpc.ClientConn
}

func NewAskTutorClient(cc *grpc.ClientConn) AskTutorClient {
	return &askTutorClient{cc}
}

func (c *askTutorClient) CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*CreateQuestionResponse, error) {
	out := new(CreateQuestionResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.AskTutor/CreateQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askTutorClient) QuestionRemain(ctx context.Context, in *QuestionRemainRequest, opts ...grpc.CallOption) (*QuestionRemainResponse, error) {
	out := new(QuestionRemainResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.AskTutor/QuestionRemain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askTutorClient) GetStudentQuestion(ctx context.Context, in *GetStudentQuestionRequest, opts ...grpc.CallOption) (*GetStudentQuestionResponse, error) {
	out := new(GetStudentQuestionResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.AskTutor/GetStudentQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askTutorClient) TransitionStudentQuestion(ctx context.Context, in *TransitionStudentQuestionRequest, opts ...grpc.CallOption) (*TransitionStudentQuestionResponse, error) {
	out := new(TransitionStudentQuestionResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.AskTutor/TransitionStudentQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askTutorClient) GetArchivedStudentQuestion(ctx context.Context, in *GetArchivedStudentQuestionRequest, opts ...grpc.CallOption) (*GetArchivedStudentQuestionResponse, error) {
	out := new(GetArchivedStudentQuestionResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.AskTutor/GetArchivedStudentQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askTutorClient) GetOpenStudentQuestion(ctx context.Context, in *GetOpenStudentQuestionRequest, opts ...grpc.CallOption) (*GetOpenStudentQuestionResponse, error) {
	out := new(GetOpenStudentQuestionResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.AskTutor/GetOpenStudentQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askTutorClient) AllocateStudentQuestion(ctx context.Context, in *AllocateStudentQuestionRequest, opts ...grpc.CallOption) (*AllocateStudentQuestionResponse, error) {
	out := new(AllocateStudentQuestionResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.AskTutor/AllocateStudentQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AskTutorServer is the server API for AskTutor service.
type AskTutorServer interface {
	CreateQuestion(context.Context, *CreateQuestionRequest) (*CreateQuestionResponse, error)
	QuestionRemain(context.Context, *QuestionRemainRequest) (*QuestionRemainResponse, error)
	GetStudentQuestion(context.Context, *GetStudentQuestionRequest) (*GetStudentQuestionResponse, error)
	TransitionStudentQuestion(context.Context, *TransitionStudentQuestionRequest) (*TransitionStudentQuestionResponse, error)
	GetArchivedStudentQuestion(context.Context, *GetArchivedStudentQuestionRequest) (*GetArchivedStudentQuestionResponse, error)
	GetOpenStudentQuestion(context.Context, *GetOpenStudentQuestionRequest) (*GetOpenStudentQuestionResponse, error)
	AllocateStudentQuestion(context.Context, *AllocateStudentQuestionRequest) (*AllocateStudentQuestionResponse, error)
}

// UnimplementedAskTutorServer can be embedded to have forward compatible implementations.
type UnimplementedAskTutorServer struct {
}

func (*UnimplementedAskTutorServer) CreateQuestion(ctx context.Context, req *CreateQuestionRequest) (*CreateQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestion not implemented")
}
func (*UnimplementedAskTutorServer) QuestionRemain(ctx context.Context, req *QuestionRemainRequest) (*QuestionRemainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuestionRemain not implemented")
}
func (*UnimplementedAskTutorServer) GetStudentQuestion(ctx context.Context, req *GetStudentQuestionRequest) (*GetStudentQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentQuestion not implemented")
}
func (*UnimplementedAskTutorServer) TransitionStudentQuestion(ctx context.Context, req *TransitionStudentQuestionRequest) (*TransitionStudentQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransitionStudentQuestion not implemented")
}
func (*UnimplementedAskTutorServer) GetArchivedStudentQuestion(ctx context.Context, req *GetArchivedStudentQuestionRequest) (*GetArchivedStudentQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArchivedStudentQuestion not implemented")
}
func (*UnimplementedAskTutorServer) GetOpenStudentQuestion(ctx context.Context, req *GetOpenStudentQuestionRequest) (*GetOpenStudentQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenStudentQuestion not implemented")
}
func (*UnimplementedAskTutorServer) AllocateStudentQuestion(ctx context.Context, req *AllocateStudentQuestionRequest) (*AllocateStudentQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateStudentQuestion not implemented")
}

func RegisterAskTutorServer(s *grpc.Server, srv AskTutorServer) {
	s.RegisterService(&_AskTutor_serviceDesc, srv)
}

func _AskTutor_CreateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskTutorServer).CreateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.AskTutor/CreateQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskTutorServer).CreateQuestion(ctx, req.(*CreateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AskTutor_QuestionRemain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionRemainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskTutorServer).QuestionRemain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.AskTutor/QuestionRemain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskTutorServer).QuestionRemain(ctx, req.(*QuestionRemainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AskTutor_GetStudentQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskTutorServer).GetStudentQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.AskTutor/GetStudentQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskTutorServer).GetStudentQuestion(ctx, req.(*GetStudentQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AskTutor_TransitionStudentQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransitionStudentQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskTutorServer).TransitionStudentQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.AskTutor/TransitionStudentQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskTutorServer).TransitionStudentQuestion(ctx, req.(*TransitionStudentQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AskTutor_GetArchivedStudentQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArchivedStudentQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskTutorServer).GetArchivedStudentQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.AskTutor/GetArchivedStudentQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskTutorServer).GetArchivedStudentQuestion(ctx, req.(*GetArchivedStudentQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AskTutor_GetOpenStudentQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpenStudentQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskTutorServer).GetOpenStudentQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.AskTutor/GetOpenStudentQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskTutorServer).GetOpenStudentQuestion(ctx, req.(*GetOpenStudentQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AskTutor_AllocateStudentQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateStudentQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskTutorServer).AllocateStudentQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.AskTutor/AllocateStudentQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskTutorServer).AllocateStudentQuestion(ctx, req.(*AllocateStudentQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AskTutor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "manabie.bob.AskTutor",
	HandlerType: (*AskTutorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQuestion",
			Handler:    _AskTutor_CreateQuestion_Handler,
		},
		{
			MethodName: "QuestionRemain",
			Handler:    _AskTutor_QuestionRemain_Handler,
		},
		{
			MethodName: "GetStudentQuestion",
			Handler:    _AskTutor_GetStudentQuestion_Handler,
		},
		{
			MethodName: "TransitionStudentQuestion",
			Handler:    _AskTutor_TransitionStudentQuestion_Handler,
		},
		{
			MethodName: "GetArchivedStudentQuestion",
			Handler:    _AskTutor_GetArchivedStudentQuestion_Handler,
		},
		{
			MethodName: "GetOpenStudentQuestion",
			Handler:    _AskTutor_GetOpenStudentQuestion_Handler,
		},
		{
			MethodName: "AllocateStudentQuestion",
			Handler:    _AskTutor_AllocateStudentQuestion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ask_tutor.proto",
}

func (m *CreateQuestionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateQuestionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateQuestionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintAskTutor(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Subject != 0 {
		i = encodeVarintAskTutor(dAtA, i, uint64(m.Subject))
		i--
		dAtA[i] = 0x20
	}
	if len(m.UrlMedias) > 0 {
		for iNdEx := len(m.UrlMedias) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UrlMedias[iNdEx])
			copy(dAtA[i:], m.UrlMedias[iNdEx])
			i = encodeVarintAskTutor(dAtA, i, uint64(len(m.UrlMedias[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintAskTutor(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.QuizId) > 0 {
		i -= len(m.QuizId)
		copy(dAtA[i:], m.QuizId)
		i = encodeVarintAskTutor(dAtA, i, uint64(len(m.QuizId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateQuestionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateQuestionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateQuestionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QuestionRemainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuestionRemainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuestionRemainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QuestionRemainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuestionRemainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuestionRemainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Duration != 0 {
		i = encodeVarintAskTutor(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x18
	}
	if m.Total != 0 {
		i = encodeVarintAskTutor(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x10
	}
	if m.Remain != 0 {
		i = encodeVarintAskTutor(dAtA, i, uint64(m.Remain))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetStudentQuestionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStudentQuestionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStudentQuestionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudentQuestionIds) > 0 {
		for iNdEx := len(m.StudentQuestionIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StudentQuestionIds[iNdEx])
			copy(dAtA[i:], m.StudentQuestionIds[iNdEx])
			i = encodeVarintAskTutor(dAtA, i, uint64(len(m.StudentQuestionIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StudentQuestion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudentQuestion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudentQuestion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintAskTutor(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Grade) > 0 {
		i -= len(m.Grade)
		copy(dAtA[i:], m.Grade)
		i = encodeVarintAskTutor(dAtA, i, uint64(len(m.Grade)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.StudyGuide) > 0 {
		i -= len(m.StudyGuide)
		copy(dAtA[i:], m.StudyGuide)
		i = encodeVarintAskTutor(dAtA, i, uint64(len(m.StudyGuide)))
		i--
		dAtA[i] = 0x5a
	}
	if m.TopicDisplayOrder != 0 {
		i = encodeVarintAskTutor(dAtA, i, uint64(m.TopicDisplayOrder))
		i--
		dAtA[i] = 0x50
	}
	if len(m.TopicName) > 0 {
		i -= len(m.TopicName)
		copy(dAtA[i:], m.TopicName)
		i = encodeVarintAskTutor(dAtA, i, uint64(len(m.TopicName)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Rate) > 0 {
		i -= len(m.Rate)
		copy(dAtA[i:], m.Rate)
		i = encodeVarintAskTutor(dAtA, i, uint64(len(m.Rate)))
		i--
		dAtA[i] = 0x42
	}
	if m.Subject != 0 {
		i = encodeVarintAskTutor(dAtA, i, uint64(m.Subject))
		i--
		dAtA[i] = 0x38
	}
	if len(m.LoName) > 0 {
		i -= len(m.LoName)
		copy(dAtA[i:], m.LoName)
		i = encodeVarintAskTutor(dAtA, i, uint64(len(m.LoName)))
		i--
		dAtA[i] = 0x32
	}
	if m.Status != 0 {
		i = encodeVarintAskTutor(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.UrlMedias) > 0 {
		for iNdEx := len(m.UrlMedias) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UrlMedias[iNdEx])
			copy(dAtA[i:], m.UrlMedias[iNdEx])
			i = encodeVarintAskTutor(dAtA, i, uint64(len(m.UrlMedias[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintAskTutor(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.QuizId) > 0 {
		i -= len(m.QuizId)
		copy(dAtA[i:], m.QuizId)
		i = encodeVarintAskTutor(dAtA, i, uint64(len(m.QuizId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StudentQuestionId) > 0 {
		i -= len(m.StudentQuestionId)
		copy(dAtA[i:], m.StudentQuestionId)
		i = encodeVarintAskTutor(dAtA, i, uint64(len(m.StudentQuestionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetStudentQuestionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStudentQuestionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStudentQuestionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudentQuestions) > 0 {
		for iNdEx := len(m.StudentQuestions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StudentQuestions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAskTutor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TransitionStudentQuestionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransitionStudentQuestionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransitionStudentQuestionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size := m.Message.Size()
			i -= size
			if _, err := m.Message.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *TransitionStudentQuestionRequest_MarkedAsResolved_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransitionStudentQuestionRequest_MarkedAsResolved_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MarkedAsResolved != nil {
		{
			size, err := m.MarkedAsResolved.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAskTutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *TransitionStudentQuestionRequest_MarkedAsInvalid_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransitionStudentQuestionRequest_MarkedAsInvalid_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MarkedAsInvalid != nil {
		{
			size, err := m.MarkedAsInvalid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAskTutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *TransitionStudentQuestionRequest_AgreeInvalid_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransitionStudentQuestionRequest_AgreeInvalid_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AgreeInvalid != nil {
		{
			size, err := m.AgreeInvalid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAskTutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *TransitionStudentQuestionRequest_AgreeResolved_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransitionStudentQuestionRequest_AgreeResolved_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AgreeResolved != nil {
		{
			size, err := m.AgreeResolved.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAskTutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *TransitionStudentQuestionRequest_Rate_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransitionStudentQuestionRequest_Rate_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Rate != nil {
		{
			size, err := m.Rate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAskTutor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *TransitionStudentQuestionRequest_MarkedAsResolved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransitionStudentQuestionRequest_MarkedAsResolved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransitionStudentQuestionRequest_MarkedAsResolved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudentQuestionId) > 0 {
		i -= len(m.StudentQuestionId)
		copy(dAtA[i:], m.StudentQuestionId)
		i = encodeVarintAskTutor(dAtA, i, uint64(len(m.StudentQuestionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransitionStudentQuestionRequest_MarkedAsInvalid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransitionStudentQuestionRequest_MarkedAsInvalid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransitionStudentQuestionRequest_MarkedAsInvalid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudentQuestionId) > 0 {
		i -= len(m.StudentQuestionId)
		copy(dAtA[i:], m.StudentQuestionId)
		i = encodeVarintAskTutor(dAtA, i, uint64(len(m.StudentQuestionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransitionStudentQuestionRequest_AgreeInvalid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransitionStudentQuestionRequest_AgreeInvalid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransitionStudentQuestionRequest_AgreeInvalid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Agree {
		i--
		if m.Agree {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.StudentQuestionId) > 0 {
		i -= len(m.StudentQuestionId)
		copy(dAtA[i:], m.StudentQuestionId)
		i = encodeVarintAskTutor(dAtA, i, uint64(len(m.StudentQuestionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransitionStudentQuestionRequest_AgreeResolved) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransitionStudentQuestionRequest_AgreeResolved) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransitionStudentQuestionRequest_AgreeResolved) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Agree {
		i--
		if m.Agree {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.StudentQuestionId) > 0 {
		i -= len(m.StudentQuestionId)
		copy(dAtA[i:], m.StudentQuestionId)
		i = encodeVarintAskTutor(dAtA, i, uint64(len(m.StudentQuestionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransitionStudentQuestionRequest_Rate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransitionStudentQuestionRequest_Rate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransitionStudentQuestionRequest_Rate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rate) > 0 {
		i -= len(m.Rate)
		copy(dAtA[i:], m.Rate)
		i = encodeVarintAskTutor(dAtA, i, uint64(len(m.Rate)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StudentQuestionId) > 0 {
		i -= len(m.StudentQuestionId)
		copy(dAtA[i:], m.StudentQuestionId)
		i = encodeVarintAskTutor(dAtA, i, uint64(len(m.StudentQuestionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransitionStudentQuestionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransitionStudentQuestionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransitionStudentQuestionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StudentQuestionStatus != 0 {
		i = encodeVarintAskTutor(dAtA, i, uint64(m.StudentQuestionStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetArchivedStudentQuestionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetArchivedStudentQuestionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetArchivedStudentQuestionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintAskTutor(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintAskTutor(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetArchivedStudentQuestionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetArchivedStudentQuestionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetArchivedStudentQuestionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudentQuestions) > 0 {
		for iNdEx := len(m.StudentQuestions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StudentQuestions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAskTutor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetOpenStudentQuestionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOpenStudentQuestionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOpenStudentQuestionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintAskTutor(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintAskTutor(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetOpenStudentQuestionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOpenStudentQuestionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOpenStudentQuestionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudentQuestions) > 0 {
		for iNdEx := len(m.StudentQuestions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StudentQuestions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAskTutor(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AllocateStudentQuestionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocateStudentQuestionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllocateStudentQuestionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudentQuestionId) > 0 {
		i -= len(m.StudentQuestionId)
		copy(dAtA[i:], m.StudentQuestionId)
		i = encodeVarintAskTutor(dAtA, i, uint64(len(m.StudentQuestionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AllocateStudentQuestionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllocateStudentQuestionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllocateStudentQuestionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintAskTutor(dAtA []byte, offset int, v uint64) int {
	offset -= sovAskTutor(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateQuestionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QuizId)
	if l > 0 {
		n += 1 + l + sovAskTutor(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovAskTutor(uint64(l))
	}
	if len(m.UrlMedias) > 0 {
		for _, s := range m.UrlMedias {
			l = len(s)
			n += 1 + l + sovAskTutor(uint64(l))
		}
	}
	if m.Subject != 0 {
		n += 1 + sovAskTutor(uint64(m.Subject))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovAskTutor(uint64(l))
	}
	return n
}

func (m *CreateQuestionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QuestionRemainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QuestionRemainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Remain != 0 {
		n += 1 + sovAskTutor(uint64(m.Remain))
	}
	if m.Total != 0 {
		n += 1 + sovAskTutor(uint64(m.Total))
	}
	if m.Duration != 0 {
		n += 1 + sovAskTutor(uint64(m.Duration))
	}
	return n
}

func (m *GetStudentQuestionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StudentQuestionIds) > 0 {
		for _, s := range m.StudentQuestionIds {
			l = len(s)
			n += 1 + l + sovAskTutor(uint64(l))
		}
	}
	return n
}

func (m *StudentQuestion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentQuestionId)
	if l > 0 {
		n += 1 + l + sovAskTutor(uint64(l))
	}
	l = len(m.QuizId)
	if l > 0 {
		n += 1 + l + sovAskTutor(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovAskTutor(uint64(l))
	}
	if len(m.UrlMedias) > 0 {
		for _, s := range m.UrlMedias {
			l = len(s)
			n += 1 + l + sovAskTutor(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovAskTutor(uint64(m.Status))
	}
	l = len(m.LoName)
	if l > 0 {
		n += 1 + l + sovAskTutor(uint64(l))
	}
	if m.Subject != 0 {
		n += 1 + sovAskTutor(uint64(m.Subject))
	}
	l = len(m.Rate)
	if l > 0 {
		n += 1 + l + sovAskTutor(uint64(l))
	}
	l = len(m.TopicName)
	if l > 0 {
		n += 1 + l + sovAskTutor(uint64(l))
	}
	if m.TopicDisplayOrder != 0 {
		n += 1 + sovAskTutor(uint64(m.TopicDisplayOrder))
	}
	l = len(m.StudyGuide)
	if l > 0 {
		n += 1 + l + sovAskTutor(uint64(l))
	}
	l = len(m.Grade)
	if l > 0 {
		n += 1 + l + sovAskTutor(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovAskTutor(uint64(l))
	}
	return n
}

func (m *GetStudentQuestionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StudentQuestions) > 0 {
		for _, e := range m.StudentQuestions {
			l = e.Size()
			n += 1 + l + sovAskTutor(uint64(l))
		}
	}
	return n
}

func (m *TransitionStudentQuestionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		n += m.Message.Size()
	}
	return n
}

func (m *TransitionStudentQuestionRequest_MarkedAsResolved_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarkedAsResolved != nil {
		l = m.MarkedAsResolved.Size()
		n += 1 + l + sovAskTutor(uint64(l))
	}
	return n
}
func (m *TransitionStudentQuestionRequest_MarkedAsInvalid_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarkedAsInvalid != nil {
		l = m.MarkedAsInvalid.Size()
		n += 1 + l + sovAskTutor(uint64(l))
	}
	return n
}
func (m *TransitionStudentQuestionRequest_AgreeInvalid_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AgreeInvalid != nil {
		l = m.AgreeInvalid.Size()
		n += 1 + l + sovAskTutor(uint64(l))
	}
	return n
}
func (m *TransitionStudentQuestionRequest_AgreeResolved_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AgreeResolved != nil {
		l = m.AgreeResolved.Size()
		n += 1 + l + sovAskTutor(uint64(l))
	}
	return n
}
func (m *TransitionStudentQuestionRequest_Rate_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rate != nil {
		l = m.Rate.Size()
		n += 1 + l + sovAskTutor(uint64(l))
	}
	return n
}
func (m *TransitionStudentQuestionRequest_MarkedAsResolved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentQuestionId)
	if l > 0 {
		n += 1 + l + sovAskTutor(uint64(l))
	}
	return n
}

func (m *TransitionStudentQuestionRequest_MarkedAsInvalid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentQuestionId)
	if l > 0 {
		n += 1 + l + sovAskTutor(uint64(l))
	}
	return n
}

func (m *TransitionStudentQuestionRequest_AgreeInvalid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentQuestionId)
	if l > 0 {
		n += 1 + l + sovAskTutor(uint64(l))
	}
	if m.Agree {
		n += 2
	}
	return n
}

func (m *TransitionStudentQuestionRequest_AgreeResolved) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentQuestionId)
	if l > 0 {
		n += 1 + l + sovAskTutor(uint64(l))
	}
	if m.Agree {
		n += 2
	}
	return n
}

func (m *TransitionStudentQuestionRequest_Rate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentQuestionId)
	if l > 0 {
		n += 1 + l + sovAskTutor(uint64(l))
	}
	l = len(m.Rate)
	if l > 0 {
		n += 1 + l + sovAskTutor(uint64(l))
	}
	return n
}

func (m *TransitionStudentQuestionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StudentQuestionStatus != 0 {
		n += 1 + sovAskTutor(uint64(m.StudentQuestionStatus))
	}
	return n
}

func (m *GetArchivedStudentQuestionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovAskTutor(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovAskTutor(uint64(m.Limit))
	}
	return n
}

func (m *GetArchivedStudentQuestionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StudentQuestions) > 0 {
		for _, e := range m.StudentQuestions {
			l = e.Size()
			n += 1 + l + sovAskTutor(uint64(l))
		}
	}
	return n
}

func (m *GetOpenStudentQuestionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovAskTutor(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovAskTutor(uint64(m.Limit))
	}
	return n
}

func (m *GetOpenStudentQuestionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StudentQuestions) > 0 {
		for _, e := range m.StudentQuestions {
			l = e.Size()
			n += 1 + l + sovAskTutor(uint64(l))
		}
	}
	return n
}

func (m *AllocateStudentQuestionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentQuestionId)
	if l > 0 {
		n += 1 + l + sovAskTutor(uint64(l))
	}
	return n
}

func (m *AllocateStudentQuestionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovAskTutor(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAskTutor(x uint64) (n int) {
	return sovAskTutor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CreateQuestionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateQuestionRequest{`,
		`QuizId:` + fmt.Sprintf("%v", this.QuizId) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`UrlMedias:` + fmt.Sprintf("%v", this.UrlMedias) + `,`,
		`Subject:` + fmt.Sprintf("%v", this.Subject) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateQuestionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateQuestionResponse{`,
		`}`,
	}, "")
	return s
}
func (this *QuestionRemainRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QuestionRemainRequest{`,
		`}`,
	}, "")
	return s
}
func (this *QuestionRemainResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QuestionRemainResponse{`,
		`Remain:` + fmt.Sprintf("%v", this.Remain) + `,`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`Duration:` + fmt.Sprintf("%v", this.Duration) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetStudentQuestionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetStudentQuestionRequest{`,
		`StudentQuestionIds:` + fmt.Sprintf("%v", this.StudentQuestionIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StudentQuestion) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StudentQuestion{`,
		`StudentQuestionId:` + fmt.Sprintf("%v", this.StudentQuestionId) + `,`,
		`QuizId:` + fmt.Sprintf("%v", this.QuizId) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`UrlMedias:` + fmt.Sprintf("%v", this.UrlMedias) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`LoName:` + fmt.Sprintf("%v", this.LoName) + `,`,
		`Subject:` + fmt.Sprintf("%v", this.Subject) + `,`,
		`Rate:` + fmt.Sprintf("%v", this.Rate) + `,`,
		`TopicName:` + fmt.Sprintf("%v", this.TopicName) + `,`,
		`TopicDisplayOrder:` + fmt.Sprintf("%v", this.TopicDisplayOrder) + `,`,
		`StudyGuide:` + fmt.Sprintf("%v", this.StudyGuide) + `,`,
		`Grade:` + fmt.Sprintf("%v", this.Grade) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetStudentQuestionResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStudentQuestions := "[]*StudentQuestion{"
	for _, f := range this.StudentQuestions {
		repeatedStringForStudentQuestions += strings.Replace(f.String(), "StudentQuestion", "StudentQuestion", 1) + ","
	}
	repeatedStringForStudentQuestions += "}"
	s := strings.Join([]string{`&GetStudentQuestionResponse{`,
		`StudentQuestions:` + repeatedStringForStudentQuestions + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransitionStudentQuestionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransitionStudentQuestionRequest{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransitionStudentQuestionRequest_MarkedAsResolved_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransitionStudentQuestionRequest_MarkedAsResolved_{`,
		`MarkedAsResolved:` + strings.Replace(fmt.Sprintf("%v", this.MarkedAsResolved), "TransitionStudentQuestionRequest_MarkedAsResolved", "TransitionStudentQuestionRequest_MarkedAsResolved", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransitionStudentQuestionRequest_MarkedAsInvalid_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransitionStudentQuestionRequest_MarkedAsInvalid_{`,
		`MarkedAsInvalid:` + strings.Replace(fmt.Sprintf("%v", this.MarkedAsInvalid), "TransitionStudentQuestionRequest_MarkedAsInvalid", "TransitionStudentQuestionRequest_MarkedAsInvalid", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransitionStudentQuestionRequest_AgreeInvalid_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransitionStudentQuestionRequest_AgreeInvalid_{`,
		`AgreeInvalid:` + strings.Replace(fmt.Sprintf("%v", this.AgreeInvalid), "TransitionStudentQuestionRequest_AgreeInvalid", "TransitionStudentQuestionRequest_AgreeInvalid", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransitionStudentQuestionRequest_AgreeResolved_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransitionStudentQuestionRequest_AgreeResolved_{`,
		`AgreeResolved:` + strings.Replace(fmt.Sprintf("%v", this.AgreeResolved), "TransitionStudentQuestionRequest_AgreeResolved", "TransitionStudentQuestionRequest_AgreeResolved", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransitionStudentQuestionRequest_Rate_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransitionStudentQuestionRequest_Rate_{`,
		`Rate:` + strings.Replace(fmt.Sprintf("%v", this.Rate), "TransitionStudentQuestionRequest_Rate", "TransitionStudentQuestionRequest_Rate", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransitionStudentQuestionRequest_MarkedAsResolved) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransitionStudentQuestionRequest_MarkedAsResolved{`,
		`StudentQuestionId:` + fmt.Sprintf("%v", this.StudentQuestionId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransitionStudentQuestionRequest_MarkedAsInvalid) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransitionStudentQuestionRequest_MarkedAsInvalid{`,
		`StudentQuestionId:` + fmt.Sprintf("%v", this.StudentQuestionId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransitionStudentQuestionRequest_AgreeInvalid) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransitionStudentQuestionRequest_AgreeInvalid{`,
		`StudentQuestionId:` + fmt.Sprintf("%v", this.StudentQuestionId) + `,`,
		`Agree:` + fmt.Sprintf("%v", this.Agree) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransitionStudentQuestionRequest_AgreeResolved) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransitionStudentQuestionRequest_AgreeResolved{`,
		`StudentQuestionId:` + fmt.Sprintf("%v", this.StudentQuestionId) + `,`,
		`Agree:` + fmt.Sprintf("%v", this.Agree) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransitionStudentQuestionRequest_Rate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransitionStudentQuestionRequest_Rate{`,
		`StudentQuestionId:` + fmt.Sprintf("%v", this.StudentQuestionId) + `,`,
		`Rate:` + fmt.Sprintf("%v", this.Rate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransitionStudentQuestionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransitionStudentQuestionResponse{`,
		`StudentQuestionStatus:` + fmt.Sprintf("%v", this.StudentQuestionStatus) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetArchivedStudentQuestionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetArchivedStudentQuestionRequest{`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetArchivedStudentQuestionResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStudentQuestions := "[]*StudentQuestion{"
	for _, f := range this.StudentQuestions {
		repeatedStringForStudentQuestions += strings.Replace(f.String(), "StudentQuestion", "StudentQuestion", 1) + ","
	}
	repeatedStringForStudentQuestions += "}"
	s := strings.Join([]string{`&GetArchivedStudentQuestionResponse{`,
		`StudentQuestions:` + repeatedStringForStudentQuestions + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetOpenStudentQuestionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetOpenStudentQuestionRequest{`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetOpenStudentQuestionResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStudentQuestions := "[]*StudentQuestion{"
	for _, f := range this.StudentQuestions {
		repeatedStringForStudentQuestions += strings.Replace(f.String(), "StudentQuestion", "StudentQuestion", 1) + ","
	}
	repeatedStringForStudentQuestions += "}"
	s := strings.Join([]string{`&GetOpenStudentQuestionResponse{`,
		`StudentQuestions:` + repeatedStringForStudentQuestions + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllocateStudentQuestionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllocateStudentQuestionRequest{`,
		`StudentQuestionId:` + fmt.Sprintf("%v", this.StudentQuestionId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AllocateStudentQuestionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AllocateStudentQuestionResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringAskTutor(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CreateQuestionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAskTutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateQuestionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateQuestionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuizId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAskTutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAskTutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuizId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAskTutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAskTutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UrlMedias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAskTutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAskTutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UrlMedias = append(m.UrlMedias, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			m.Subject = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subject |= Subject(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAskTutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAskTutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAskTutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAskTutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateQuestionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAskTutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateQuestionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateQuestionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAskTutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAskTutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuestionRemainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAskTutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuestionRemainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuestionRemainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAskTutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAskTutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuestionRemainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAskTutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuestionRemainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuestionRemainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remain", wireType)
			}
			m.Remain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Remain |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= AskDuration(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAskTutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAskTutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStudentQuestionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAskTutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStudentQuestionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStudentQuestionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentQuestionIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAskTutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAskTutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentQuestionIds = append(m.StudentQuestionIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAskTutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAskTutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StudentQuestion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAskTutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudentQuestion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudentQuestion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentQuestionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAskTutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAskTutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentQuestionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuizId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAskTutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAskTutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuizId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAskTutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAskTutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UrlMedias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAskTutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAskTutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UrlMedias = append(m.UrlMedias, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= QuestionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAskTutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAskTutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			m.Subject = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subject |= Subject(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAskTutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAskTutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAskTutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAskTutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicDisplayOrder", wireType)
			}
			m.TopicDisplayOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TopicDisplayOrder |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudyGuide", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAskTutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAskTutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudyGuide = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAskTutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAskTutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grade = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAskTutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAskTutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAskTutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAskTutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStudentQuestionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAskTutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStudentQuestionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStudentQuestionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentQuestions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAskTutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAskTutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentQuestions = append(m.StudentQuestions, &StudentQuestion{})
			if err := m.StudentQuestions[len(m.StudentQuestions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAskTutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAskTutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransitionStudentQuestionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAskTutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransitionStudentQuestionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransitionStudentQuestionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkedAsResolved", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAskTutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAskTutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TransitionStudentQuestionRequest_MarkedAsResolved{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &TransitionStudentQuestionRequest_MarkedAsResolved_{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarkedAsInvalid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAskTutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAskTutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TransitionStudentQuestionRequest_MarkedAsInvalid{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &TransitionStudentQuestionRequest_MarkedAsInvalid_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgreeInvalid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAskTutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAskTutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TransitionStudentQuestionRequest_AgreeInvalid{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &TransitionStudentQuestionRequest_AgreeInvalid_{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgreeResolved", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAskTutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAskTutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TransitionStudentQuestionRequest_AgreeResolved{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &TransitionStudentQuestionRequest_AgreeResolved_{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAskTutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAskTutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TransitionStudentQuestionRequest_Rate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &TransitionStudentQuestionRequest_Rate_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAskTutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAskTutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransitionStudentQuestionRequest_MarkedAsResolved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAskTutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarkedAsResolved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarkedAsResolved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentQuestionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAskTutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAskTutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentQuestionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAskTutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAskTutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransitionStudentQuestionRequest_MarkedAsInvalid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAskTutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarkedAsInvalid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarkedAsInvalid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentQuestionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAskTutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAskTutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentQuestionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAskTutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAskTutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransitionStudentQuestionRequest_AgreeInvalid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAskTutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgreeInvalid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgreeInvalid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentQuestionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAskTutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAskTutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentQuestionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agree", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Agree = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAskTutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAskTutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransitionStudentQuestionRequest_AgreeResolved) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAskTutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgreeResolved: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgreeResolved: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentQuestionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAskTutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAskTutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentQuestionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Agree", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Agree = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAskTutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAskTutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransitionStudentQuestionRequest_Rate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAskTutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentQuestionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAskTutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAskTutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentQuestionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAskTutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAskTutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAskTutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAskTutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransitionStudentQuestionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAskTutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransitionStudentQuestionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransitionStudentQuestionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentQuestionStatus", wireType)
			}
			m.StudentQuestionStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StudentQuestionStatus |= QuestionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAskTutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAskTutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetArchivedStudentQuestionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAskTutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetArchivedStudentQuestionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetArchivedStudentQuestionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAskTutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAskTutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetArchivedStudentQuestionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAskTutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetArchivedStudentQuestionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetArchivedStudentQuestionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentQuestions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAskTutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAskTutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentQuestions = append(m.StudentQuestions, &StudentQuestion{})
			if err := m.StudentQuestions[len(m.StudentQuestions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAskTutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAskTutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOpenStudentQuestionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAskTutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOpenStudentQuestionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOpenStudentQuestionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAskTutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAskTutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOpenStudentQuestionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAskTutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOpenStudentQuestionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOpenStudentQuestionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentQuestions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAskTutor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAskTutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentQuestions = append(m.StudentQuestions, &StudentQuestion{})
			if err := m.StudentQuestions[len(m.StudentQuestions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAskTutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAskTutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllocateStudentQuestionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAskTutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocateStudentQuestionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocateStudentQuestionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentQuestionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAskTutor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAskTutor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentQuestionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAskTutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAskTutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllocateStudentQuestionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAskTutor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllocateStudentQuestionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllocateStudentQuestionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAskTutor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAskTutor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAskTutor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAskTutor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAskTutor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAskTutor
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAskTutor
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAskTutor
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAskTutor        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAskTutor          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAskTutor = fmt.Errorf("proto: unexpected end of group")
)
