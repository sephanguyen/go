// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: hub.proto

package pb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HubEvent struct {
	Title       string           `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string           `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Date        *types.Timestamp `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	Price       int32            `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
}

func (m *HubEvent) Reset()      { *m = HubEvent{} }
func (*HubEvent) ProtoMessage() {}
func (*HubEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3103f8d3056b01c, []int{0}
}
func (m *HubEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HubEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HubEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HubEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HubEvent.Merge(m, src)
}
func (m *HubEvent) XXX_Size() int {
	return m.Size()
}
func (m *HubEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_HubEvent.DiscardUnknown(m)
}

var xxx_messageInfo_HubEvent proto.InternalMessageInfo

func (m *HubEvent) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *HubEvent) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *HubEvent) GetDate() *types.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *HubEvent) GetPrice() int32 {
	if m != nil {
		return m.Price
	}
	return 0
}

type Hub struct {
	Id           int32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description  string      `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	PhoneNumber  string      `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	Address      string      `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	Country      Country     `protobuf:"varint,6,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"`
	City         *City       `protobuf:"bytes,7,opt,name=city,proto3" json:"city,omitempty"`
	District     *District   `protobuf:"bytes,8,opt,name=district,proto3" json:"district,omitempty"`
	Point        *Point      `protobuf:"bytes,9,opt,name=point,proto3" json:"point,omitempty"`
	Images       []string    `protobuf:"bytes,10,rep,name=images,proto3" json:"images,omitempty"`
	OpeningHours []string    `protobuf:"bytes,11,rep,name=opening_hours,json=openingHours,proto3" json:"opening_hours,omitempty"`
	Events       []*HubEvent `protobuf:"bytes,12,rep,name=events,proto3" json:"events,omitempty"`
}

func (m *Hub) Reset()      { *m = Hub{} }
func (*Hub) ProtoMessage() {}
func (*Hub) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3103f8d3056b01c, []int{1}
}
func (m *Hub) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Hub) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Hub.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Hub) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hub.Merge(m, src)
}
func (m *Hub) XXX_Size() int {
	return m.Size()
}
func (m *Hub) XXX_DiscardUnknown() {
	xxx_messageInfo_Hub.DiscardUnknown(m)
}

var xxx_messageInfo_Hub proto.InternalMessageInfo

func (m *Hub) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Hub) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Hub) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Hub) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

func (m *Hub) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Hub) GetCountry() Country {
	if m != nil {
		return m.Country
	}
	return COUNTRY_NONE
}

func (m *Hub) GetCity() *City {
	if m != nil {
		return m.City
	}
	return nil
}

func (m *Hub) GetDistrict() *District {
	if m != nil {
		return m.District
	}
	return nil
}

func (m *Hub) GetPoint() *Point {
	if m != nil {
		return m.Point
	}
	return nil
}

func (m *Hub) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *Hub) GetOpeningHours() []string {
	if m != nil {
		return m.OpeningHours
	}
	return nil
}

func (m *Hub) GetEvents() []*HubEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type RetrieveHubsRequest struct {
	Country    Country `protobuf:"varint,1,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"`
	CityId     int32   `protobuf:"varint,2,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	DistrictId int32   `protobuf:"varint,3,opt,name=district_id,json=districtId,proto3" json:"district_id,omitempty"`
	Point      *Point  `protobuf:"bytes,4,opt,name=point,proto3" json:"point,omitempty"`
}

func (m *RetrieveHubsRequest) Reset()      { *m = RetrieveHubsRequest{} }
func (*RetrieveHubsRequest) ProtoMessage() {}
func (*RetrieveHubsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3103f8d3056b01c, []int{2}
}
func (m *RetrieveHubsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveHubsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveHubsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveHubsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveHubsRequest.Merge(m, src)
}
func (m *RetrieveHubsRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveHubsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveHubsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveHubsRequest proto.InternalMessageInfo

func (m *RetrieveHubsRequest) GetCountry() Country {
	if m != nil {
		return m.Country
	}
	return COUNTRY_NONE
}

func (m *RetrieveHubsRequest) GetCityId() int32 {
	if m != nil {
		return m.CityId
	}
	return 0
}

func (m *RetrieveHubsRequest) GetDistrictId() int32 {
	if m != nil {
		return m.DistrictId
	}
	return 0
}

func (m *RetrieveHubsRequest) GetPoint() *Point {
	if m != nil {
		return m.Point
	}
	return nil
}

type RetrieveHubsResponse struct {
	Hubs []*Hub `protobuf:"bytes,1,rep,name=hubs,proto3" json:"hubs,omitempty"`
}

func (m *RetrieveHubsResponse) Reset()      { *m = RetrieveHubsResponse{} }
func (*RetrieveHubsResponse) ProtoMessage() {}
func (*RetrieveHubsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3103f8d3056b01c, []int{3}
}
func (m *RetrieveHubsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveHubsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveHubsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveHubsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveHubsResponse.Merge(m, src)
}
func (m *RetrieveHubsResponse) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveHubsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveHubsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveHubsResponse proto.InternalMessageInfo

func (m *RetrieveHubsResponse) GetHubs() []*Hub {
	if m != nil {
		return m.Hubs
	}
	return nil
}

type RequestATourRequest struct {
	HubId             int32  `protobuf:"varint,1,opt,name=hub_id,json=hubId,proto3" json:"hub_id,omitempty"`
	ParentPhoneNumber string `protobuf:"bytes,2,opt,name=parent_phone_number,json=parentPhoneNumber,proto3" json:"parent_phone_number,omitempty"`
}

func (m *RequestATourRequest) Reset()      { *m = RequestATourRequest{} }
func (*RequestATourRequest) ProtoMessage() {}
func (*RequestATourRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3103f8d3056b01c, []int{4}
}
func (m *RequestATourRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestATourRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestATourRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestATourRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestATourRequest.Merge(m, src)
}
func (m *RequestATourRequest) XXX_Size() int {
	return m.Size()
}
func (m *RequestATourRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestATourRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RequestATourRequest proto.InternalMessageInfo

func (m *RequestATourRequest) GetHubId() int32 {
	if m != nil {
		return m.HubId
	}
	return 0
}

func (m *RequestATourRequest) GetParentPhoneNumber() string {
	if m != nil {
		return m.ParentPhoneNumber
	}
	return ""
}

type RequestATourResponse struct {
}

func (m *RequestATourResponse) Reset()      { *m = RequestATourResponse{} }
func (*RequestATourResponse) ProtoMessage() {}
func (*RequestATourResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b3103f8d3056b01c, []int{5}
}
func (m *RequestATourResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestATourResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestATourResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestATourResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestATourResponse.Merge(m, src)
}
func (m *RequestATourResponse) XXX_Size() int {
	return m.Size()
}
func (m *RequestATourResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestATourResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RequestATourResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*HubEvent)(nil), "manabie.bob.HubEvent")
	golang_proto.RegisterType((*HubEvent)(nil), "manabie.bob.HubEvent")
	proto.RegisterType((*Hub)(nil), "manabie.bob.Hub")
	golang_proto.RegisterType((*Hub)(nil), "manabie.bob.Hub")
	proto.RegisterType((*RetrieveHubsRequest)(nil), "manabie.bob.RetrieveHubsRequest")
	golang_proto.RegisterType((*RetrieveHubsRequest)(nil), "manabie.bob.RetrieveHubsRequest")
	proto.RegisterType((*RetrieveHubsResponse)(nil), "manabie.bob.RetrieveHubsResponse")
	golang_proto.RegisterType((*RetrieveHubsResponse)(nil), "manabie.bob.RetrieveHubsResponse")
	proto.RegisterType((*RequestATourRequest)(nil), "manabie.bob.RequestATourRequest")
	golang_proto.RegisterType((*RequestATourRequest)(nil), "manabie.bob.RequestATourRequest")
	proto.RegisterType((*RequestATourResponse)(nil), "manabie.bob.RequestATourResponse")
	golang_proto.RegisterType((*RequestATourResponse)(nil), "manabie.bob.RequestATourResponse")
}

func init() { proto.RegisterFile("hub.proto", fileDescriptor_b3103f8d3056b01c) }
func init() { golang_proto.RegisterFile("hub.proto", fileDescriptor_b3103f8d3056b01c) }

var fileDescriptor_b3103f8d3056b01c = []byte{
	// 691 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x3d, 0x6f, 0xdb, 0x48,
	0x10, 0xd5, 0x5a, 0x5f, 0xd6, 0x48, 0x67, 0x9c, 0xd7, 0x1f, 0x47, 0xa8, 0xa0, 0x69, 0xdd, 0x1d,
	0xa0, 0xc6, 0x14, 0x4e, 0x57, 0x26, 0x4d, 0xbe, 0x00, 0xb9, 0x09, 0x8c, 0xb5, 0xab, 0x20, 0x80,
	0xc0, 0x25, 0x37, 0xd4, 0xc2, 0xe2, 0x2e, 0x43, 0xee, 0x1a, 0x70, 0x97, 0x32, 0x65, 0x7e, 0x86,
	0xf3, 0x07, 0x52, 0xa7, 0x4c, 0xe9, 0xd2, 0x65, 0x2c, 0x35, 0x29, 0xfd, 0x13, 0x02, 0x2e, 0x49,
	0x4b, 0xb2, 0x82, 0x24, 0x1d, 0xdf, 0xbc, 0x87, 0x99, 0xf7, 0x66, 0x07, 0x84, 0xd6, 0x44, 0x53,
	0x37, 0x4e, 0xa4, 0x92, 0xb8, 0x1d, 0x79, 0xc2, 0xa3, 0x9c, 0xb9, 0x54, 0xd2, 0x2e, 0x30, 0xa1,
	0xa3, 0x9c, 0xe8, 0x6e, 0x4d, 0xa5, 0xef, 0x29, 0x2e, 0x45, 0x81, 0x0f, 0x42, 0x29, 0xc3, 0x29,
	0x1b, 0x18, 0x44, 0xf5, 0x9b, 0x81, 0xe2, 0x11, 0x4b, 0x95, 0x17, 0xc5, 0x85, 0xe0, 0x28, 0xe4,
	0x2a, 0xeb, 0xeb, 0xcb, 0x68, 0x10, 0xca, 0x50, 0x2e, 0x94, 0x19, 0x32, 0xc0, 0x7c, 0xe5, 0xf2,
	0xde, 0x7b, 0x04, 0x9b, 0x23, 0x4d, 0x5f, 0x5c, 0x30, 0xa1, 0xf0, 0x2e, 0xd4, 0x15, 0x57, 0x53,
	0x66, 0x21, 0x07, 0xf5, 0x5b, 0x24, 0x07, 0xd8, 0x81, 0x76, 0xc0, 0x52, 0x3f, 0xe1, 0x71, 0xe6,
	0xc3, 0xda, 0x30, 0xdc, 0x72, 0x09, 0xbb, 0x50, 0x0b, 0x3c, 0xc5, 0xac, 0xaa, 0x83, 0xfa, 0xed,
	0x61, 0xd7, 0xcd, 0x3d, 0xba, 0xe5, 0x64, 0xf7, 0xac, 0xf4, 0x48, 0x8c, 0x2e, 0x9b, 0x13, 0x27,
	0xdc, 0x67, 0x56, 0xcd, 0x41, 0xfd, 0x3a, 0xc9, 0x41, 0xef, 0xaa, 0x0a, 0xd5, 0x91, 0xa6, 0x78,
	0x0b, 0x36, 0x78, 0x60, 0x2c, 0xd4, 0xc9, 0x06, 0x0f, 0x30, 0x86, 0x9a, 0xf0, 0x22, 0x56, 0x0c,
	0x36, 0xdf, 0x0f, 0x3d, 0x55, 0xd7, 0x3d, 0x1d, 0x42, 0x27, 0x9e, 0x48, 0xc1, 0xc6, 0x42, 0x47,
	0x94, 0x25, 0x66, 0x54, 0x8b, 0xb4, 0x4d, 0xed, 0xa5, 0x29, 0x61, 0x0b, 0x9a, 0x5e, 0x10, 0x24,
	0x2c, 0x4d, 0xad, 0xba, 0x61, 0x4b, 0x88, 0x5d, 0x68, 0xfa, 0x52, 0x0b, 0x95, 0x5c, 0x5a, 0x0d,
	0x07, 0xf5, 0xb7, 0x86, 0xbb, 0xee, 0xd2, 0x03, 0xb9, 0xcf, 0x72, 0x8e, 0x94, 0x22, 0xfc, 0x2f,
	0xd4, 0x7c, 0xae, 0x2e, 0xad, 0xa6, 0x59, 0xc0, 0xf6, 0xaa, 0x98, 0xab, 0x4b, 0x62, 0x68, 0xfc,
	0x1f, 0x6c, 0x06, 0x3c, 0x55, 0x09, 0xf7, 0x95, 0xb5, 0x69, 0xa4, 0x7b, 0x2b, 0xd2, 0xe7, 0x05,
	0x49, 0xee, 0x65, 0xb8, 0x0f, 0xf5, 0x58, 0x72, 0xa1, 0xac, 0x96, 0xd1, 0xe3, 0x15, 0xfd, 0x49,
	0xc6, 0x90, 0x5c, 0x80, 0xf7, 0xa1, 0xc1, 0x23, 0x2f, 0x64, 0xa9, 0x05, 0x4e, 0xb5, 0xdf, 0x22,
	0x05, 0xc2, 0x7f, 0xc3, 0x1f, 0x32, 0x66, 0x82, 0x8b, 0x70, 0x3c, 0x91, 0x3a, 0x49, 0xad, 0xb6,
	0xa1, 0x3b, 0x45, 0x71, 0x94, 0xd5, 0xf0, 0x11, 0x34, 0x58, 0x76, 0x02, 0xa9, 0xd5, 0x71, 0xaa,
	0x6b, 0xbe, 0xca, 0x03, 0x21, 0x85, 0xa8, 0xf7, 0x11, 0xc1, 0x0e, 0x61, 0x2a, 0xe1, 0xec, 0x82,
	0x8d, 0x34, 0x4d, 0x09, 0x7b, 0xab, 0x59, 0xaa, 0x96, 0xf7, 0x86, 0x7e, 0x67, 0x6f, 0x7f, 0x41,
	0x33, 0x5b, 0xcc, 0x98, 0x07, 0xe6, 0x75, 0xeb, 0xa4, 0x91, 0xc1, 0xe3, 0x00, 0x1f, 0x40, 0xbb,
	0x5c, 0x41, 0x46, 0x56, 0x0d, 0x09, 0x65, 0xe9, 0x38, 0x58, 0xec, 0xa5, 0xf6, 0x8b, 0xbd, 0xf4,
	0x1e, 0xc3, 0xee, 0xaa, 0xd5, 0x34, 0x96, 0x22, 0x65, 0xf8, 0x1f, 0xa8, 0x4d, 0x34, 0x4d, 0x2d,
	0x64, 0x02, 0xff, 0xf9, 0x30, 0x30, 0x31, 0x6c, 0xef, 0x75, 0x16, 0xd4, 0x84, 0x7b, 0x72, 0x26,
	0x75, 0x52, 0x06, 0xdd, 0x83, 0xc6, 0x44, 0xd3, 0xf1, 0xfd, 0x9d, 0xd6, 0x27, 0x9a, 0x1e, 0x07,
	0xd8, 0x85, 0x9d, 0xd8, 0x4b, 0x98, 0x50, 0xe3, 0x95, 0xdb, 0xcb, 0x2f, 0x77, 0x3b, 0xa7, 0x4e,
	0x16, 0x17, 0xd8, 0xdb, 0xcf, 0xbc, 0x2d, 0x77, 0xcf, 0xbd, 0x0d, 0x3f, 0x21, 0x80, 0x91, 0xa6,
	0xa7, 0x2c, 0xb9, 0xe0, 0x3e, 0xc3, 0xa7, 0xd0, 0x59, 0x8e, 0x80, 0x9d, 0x15, 0xb3, 0x3f, 0x78,
	0x88, 0xee, 0xe1, 0x4f, 0x14, 0x45, 0x7e, 0xd3, 0x74, 0x31, 0x7b, 0xad, 0xe9, 0x5a, 0xe8, 0xb5,
	0xa6, 0xeb, 0xc6, 0x9f, 0x4e, 0xaf, 0x6f, 0xed, 0xca, 0xcd, 0xad, 0x5d, 0xb9, 0xbb, 0xb5, 0xd1,
	0xbb, 0x99, 0x8d, 0xae, 0x66, 0x36, 0xfa, 0x32, 0xb3, 0xd1, 0xf5, 0xcc, 0x46, 0x5f, 0x67, 0x36,
	0xfa, 0x36, 0xb3, 0x2b, 0x77, 0x33, 0x1b, 0x7d, 0x98, 0xdb, 0x95, 0xcf, 0x73, 0x1b, 0x5d, 0xcf,
	0xed, 0xca, 0xcd, 0xdc, 0xae, 0xbc, 0x1a, 0x2e, 0xfd, 0xb7, 0x8a, 0x31, 0x47, 0xd9, 0x37, 0xf5,
	0xfc, 0x73, 0x26, 0x82, 0x41, 0x7c, 0x1e, 0x0e, 0x42, 0x26, 0xf2, 0x1f, 0x18, 0x95, 0xf4, 0x51,
	0x4c, 0x69, 0xc3, 0xa0, 0xff, 0xbf, 0x07, 0x00, 0x00, 0xff, 0xff, 0x8a, 0x0d, 0xa8, 0x4e, 0x49,
	0x05, 0x00, 0x00,
}

func (this *HubEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HubEvent)
	if !ok {
		that2, ok := that.(HubEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if !this.Date.Equal(that1.Date) {
		return false
	}
	if this.Price != that1.Price {
		return false
	}
	return true
}
func (this *Hub) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Hub)
	if !ok {
		that2, ok := that.(Hub)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.PhoneNumber != that1.PhoneNumber {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if !this.City.Equal(that1.City) {
		return false
	}
	if !this.District.Equal(that1.District) {
		return false
	}
	if !this.Point.Equal(that1.Point) {
		return false
	}
	if len(this.Images) != len(that1.Images) {
		return false
	}
	for i := range this.Images {
		if this.Images[i] != that1.Images[i] {
			return false
		}
	}
	if len(this.OpeningHours) != len(that1.OpeningHours) {
		return false
	}
	for i := range this.OpeningHours {
		if this.OpeningHours[i] != that1.OpeningHours[i] {
			return false
		}
	}
	if len(this.Events) != len(that1.Events) {
		return false
	}
	for i := range this.Events {
		if !this.Events[i].Equal(that1.Events[i]) {
			return false
		}
	}
	return true
}
func (this *RetrieveHubsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveHubsRequest)
	if !ok {
		that2, ok := that.(RetrieveHubsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if this.CityId != that1.CityId {
		return false
	}
	if this.DistrictId != that1.DistrictId {
		return false
	}
	if !this.Point.Equal(that1.Point) {
		return false
	}
	return true
}
func (this *RetrieveHubsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveHubsResponse)
	if !ok {
		that2, ok := that.(RetrieveHubsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Hubs) != len(that1.Hubs) {
		return false
	}
	for i := range this.Hubs {
		if !this.Hubs[i].Equal(that1.Hubs[i]) {
			return false
		}
	}
	return true
}
func (this *RequestATourRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestATourRequest)
	if !ok {
		that2, ok := that.(RequestATourRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HubId != that1.HubId {
		return false
	}
	if this.ParentPhoneNumber != that1.ParentPhoneNumber {
		return false
	}
	return true
}
func (this *RequestATourResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestATourResponse)
	if !ok {
		that2, ok := that.(RequestATourResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *HubEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.HubEvent{")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	if this.Date != nil {
		s = append(s, "Date: "+fmt.Sprintf("%#v", this.Date)+",\n")
	}
	s = append(s, "Price: "+fmt.Sprintf("%#v", this.Price)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Hub) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&pb.Hub{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "PhoneNumber: "+fmt.Sprintf("%#v", this.PhoneNumber)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	if this.City != nil {
		s = append(s, "City: "+fmt.Sprintf("%#v", this.City)+",\n")
	}
	if this.District != nil {
		s = append(s, "District: "+fmt.Sprintf("%#v", this.District)+",\n")
	}
	if this.Point != nil {
		s = append(s, "Point: "+fmt.Sprintf("%#v", this.Point)+",\n")
	}
	s = append(s, "Images: "+fmt.Sprintf("%#v", this.Images)+",\n")
	s = append(s, "OpeningHours: "+fmt.Sprintf("%#v", this.OpeningHours)+",\n")
	if this.Events != nil {
		s = append(s, "Events: "+fmt.Sprintf("%#v", this.Events)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveHubsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.RetrieveHubsRequest{")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "CityId: "+fmt.Sprintf("%#v", this.CityId)+",\n")
	s = append(s, "DistrictId: "+fmt.Sprintf("%#v", this.DistrictId)+",\n")
	if this.Point != nil {
		s = append(s, "Point: "+fmt.Sprintf("%#v", this.Point)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveHubsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RetrieveHubsResponse{")
	if this.Hubs != nil {
		s = append(s, "Hubs: "+fmt.Sprintf("%#v", this.Hubs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestATourRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.RequestATourRequest{")
	s = append(s, "HubId: "+fmt.Sprintf("%#v", this.HubId)+",\n")
	s = append(s, "ParentPhoneNumber: "+fmt.Sprintf("%#v", this.ParentPhoneNumber)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RequestATourResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.RequestATourResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringHub(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// HubServiceClient is the client API for HubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HubServiceClient interface {
	RetrieveHubs(ctx context.Context, in *RetrieveHubsRequest, opts ...grpc.CallOption) (*RetrieveHubsResponse, error)
	RequestATour(ctx context.Context, in *RequestATourRequest, opts ...grpc.CallOption) (*RequestATourResponse, error)
}

type hubServiceClient struct {
	cc *grpc.ClientConn
}

func NewHubServiceClient(cc *grpc.ClientConn) HubServiceClient {
	return &hubServiceClient{cc}
}

func (c *hubServiceClient) RetrieveHubs(ctx context.Context, in *RetrieveHubsRequest, opts ...grpc.CallOption) (*RetrieveHubsResponse, error) {
	out := new(RetrieveHubsResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.HubService/RetrieveHubs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hubServiceClient) RequestATour(ctx context.Context, in *RequestATourRequest, opts ...grpc.CallOption) (*RequestATourResponse, error) {
	out := new(RequestATourResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.HubService/RequestATour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HubServiceServer is the server API for HubService service.
type HubServiceServer interface {
	RetrieveHubs(context.Context, *RetrieveHubsRequest) (*RetrieveHubsResponse, error)
	RequestATour(context.Context, *RequestATourRequest) (*RequestATourResponse, error)
}

// UnimplementedHubServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHubServiceServer struct {
}

func (*UnimplementedHubServiceServer) RetrieveHubs(ctx context.Context, req *RetrieveHubsRequest) (*RetrieveHubsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveHubs not implemented")
}
func (*UnimplementedHubServiceServer) RequestATour(ctx context.Context, req *RequestATourRequest) (*RequestATourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestATour not implemented")
}

func RegisterHubServiceServer(s *grpc.Server, srv HubServiceServer) {
	s.RegisterService(&_HubService_serviceDesc, srv)
}

func _HubService_RetrieveHubs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveHubsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).RetrieveHubs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.HubService/RetrieveHubs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).RetrieveHubs(ctx, req.(*RetrieveHubsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HubService_RequestATour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestATourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubServiceServer).RequestATour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.HubService/RequestATour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubServiceServer).RequestATour(ctx, req.(*RequestATourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HubService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "manabie.bob.HubService",
	HandlerType: (*HubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveHubs",
			Handler:    _HubService_RetrieveHubs_Handler,
		},
		{
			MethodName: "RequestATour",
			Handler:    _HubService_RequestATour_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hub.proto",
}

func (m *HubEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HubEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HubEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Price != 0 {
		i = encodeVarintHub(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x20
	}
	if m.Date != nil {
		{
			size, err := m.Date.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHub(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintHub(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintHub(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Hub) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hub) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Hub) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHub(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.OpeningHours) > 0 {
		for iNdEx := len(m.OpeningHours) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OpeningHours[iNdEx])
			copy(dAtA[i:], m.OpeningHours[iNdEx])
			i = encodeVarintHub(dAtA, i, uint64(len(m.OpeningHours[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.Images) > 0 {
		for iNdEx := len(m.Images) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Images[iNdEx])
			copy(dAtA[i:], m.Images[iNdEx])
			i = encodeVarintHub(dAtA, i, uint64(len(m.Images[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Point != nil {
		{
			size, err := m.Point.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHub(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.District != nil {
		{
			size, err := m.District.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHub(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.City != nil {
		{
			size, err := m.City.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHub(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Country != 0 {
		i = encodeVarintHub(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintHub(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintHub(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintHub(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintHub(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintHub(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveHubsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveHubsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveHubsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Point != nil {
		{
			size, err := m.Point.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHub(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DistrictId != 0 {
		i = encodeVarintHub(dAtA, i, uint64(m.DistrictId))
		i--
		dAtA[i] = 0x18
	}
	if m.CityId != 0 {
		i = encodeVarintHub(dAtA, i, uint64(m.CityId))
		i--
		dAtA[i] = 0x10
	}
	if m.Country != 0 {
		i = encodeVarintHub(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveHubsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveHubsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveHubsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hubs) > 0 {
		for iNdEx := len(m.Hubs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Hubs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintHub(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestATourRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestATourRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestATourRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ParentPhoneNumber) > 0 {
		i -= len(m.ParentPhoneNumber)
		copy(dAtA[i:], m.ParentPhoneNumber)
		i = encodeVarintHub(dAtA, i, uint64(len(m.ParentPhoneNumber)))
		i--
		dAtA[i] = 0x12
	}
	if m.HubId != 0 {
		i = encodeVarintHub(dAtA, i, uint64(m.HubId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RequestATourResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestATourResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestATourResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintHub(dAtA []byte, offset int, v uint64) int {
	offset -= sovHub(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HubEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovHub(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovHub(uint64(l))
	}
	if m.Date != nil {
		l = m.Date.Size()
		n += 1 + l + sovHub(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovHub(uint64(m.Price))
	}
	return n
}

func (m *Hub) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovHub(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovHub(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovHub(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovHub(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovHub(uint64(l))
	}
	if m.Country != 0 {
		n += 1 + sovHub(uint64(m.Country))
	}
	if m.City != nil {
		l = m.City.Size()
		n += 1 + l + sovHub(uint64(l))
	}
	if m.District != nil {
		l = m.District.Size()
		n += 1 + l + sovHub(uint64(l))
	}
	if m.Point != nil {
		l = m.Point.Size()
		n += 1 + l + sovHub(uint64(l))
	}
	if len(m.Images) > 0 {
		for _, s := range m.Images {
			l = len(s)
			n += 1 + l + sovHub(uint64(l))
		}
	}
	if len(m.OpeningHours) > 0 {
		for _, s := range m.OpeningHours {
			l = len(s)
			n += 1 + l + sovHub(uint64(l))
		}
	}
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovHub(uint64(l))
		}
	}
	return n
}

func (m *RetrieveHubsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Country != 0 {
		n += 1 + sovHub(uint64(m.Country))
	}
	if m.CityId != 0 {
		n += 1 + sovHub(uint64(m.CityId))
	}
	if m.DistrictId != 0 {
		n += 1 + sovHub(uint64(m.DistrictId))
	}
	if m.Point != nil {
		l = m.Point.Size()
		n += 1 + l + sovHub(uint64(l))
	}
	return n
}

func (m *RetrieveHubsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Hubs) > 0 {
		for _, e := range m.Hubs {
			l = e.Size()
			n += 1 + l + sovHub(uint64(l))
		}
	}
	return n
}

func (m *RequestATourRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HubId != 0 {
		n += 1 + sovHub(uint64(m.HubId))
	}
	l = len(m.ParentPhoneNumber)
	if l > 0 {
		n += 1 + l + sovHub(uint64(l))
	}
	return n
}

func (m *RequestATourResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovHub(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHub(x uint64) (n int) {
	return sovHub(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *HubEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HubEvent{`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Date:` + strings.Replace(fmt.Sprintf("%v", this.Date), "Timestamp", "types.Timestamp", 1) + `,`,
		`Price:` + fmt.Sprintf("%v", this.Price) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Hub) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEvents := "[]*HubEvent{"
	for _, f := range this.Events {
		repeatedStringForEvents += strings.Replace(f.String(), "HubEvent", "HubEvent", 1) + ","
	}
	repeatedStringForEvents += "}"
	s := strings.Join([]string{`&Hub{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`PhoneNumber:` + fmt.Sprintf("%v", this.PhoneNumber) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`City:` + strings.Replace(fmt.Sprintf("%v", this.City), "City", "City", 1) + `,`,
		`District:` + strings.Replace(fmt.Sprintf("%v", this.District), "District", "District", 1) + `,`,
		`Point:` + strings.Replace(fmt.Sprintf("%v", this.Point), "Point", "Point", 1) + `,`,
		`Images:` + fmt.Sprintf("%v", this.Images) + `,`,
		`OpeningHours:` + fmt.Sprintf("%v", this.OpeningHours) + `,`,
		`Events:` + repeatedStringForEvents + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveHubsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveHubsRequest{`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`CityId:` + fmt.Sprintf("%v", this.CityId) + `,`,
		`DistrictId:` + fmt.Sprintf("%v", this.DistrictId) + `,`,
		`Point:` + strings.Replace(fmt.Sprintf("%v", this.Point), "Point", "Point", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveHubsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHubs := "[]*Hub{"
	for _, f := range this.Hubs {
		repeatedStringForHubs += strings.Replace(f.String(), "Hub", "Hub", 1) + ","
	}
	repeatedStringForHubs += "}"
	s := strings.Join([]string{`&RetrieveHubsResponse{`,
		`Hubs:` + repeatedStringForHubs + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestATourRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestATourRequest{`,
		`HubId:` + fmt.Sprintf("%v", this.HubId) + `,`,
		`ParentPhoneNumber:` + fmt.Sprintf("%v", this.ParentPhoneNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RequestATourResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestATourResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringHub(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *HubEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HubEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HubEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Date == nil {
				m.Date = &types.Timestamp{}
			}
			if err := m.Date.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Hub) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hub: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hub: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.City == nil {
				m.City = &City{}
			}
			if err := m.City.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field District", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.District == nil {
				m.District = &District{}
			}
			if err := m.District.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Point == nil {
				m.Point = &Point{}
			}
			if err := m.Point.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpeningHours", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OpeningHours = append(m.OpeningHours, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &HubEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveHubsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveHubsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveHubsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityId", wireType)
			}
			m.CityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistrictId", wireType)
			}
			m.DistrictId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DistrictId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Point == nil {
				m.Point = &Point{}
			}
			if err := m.Point.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveHubsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveHubsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveHubsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hubs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hubs = append(m.Hubs, &Hub{})
			if err := m.Hubs[len(m.Hubs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestATourRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestATourRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestATourRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HubId", wireType)
			}
			m.HubId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HubId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentPhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHub
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHub
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHub
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentPhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestATourResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHub
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestATourResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestATourResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipHub(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHub
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHub(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHub
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHub
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHub
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHub
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHub
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHub        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHub          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHub = fmt.Errorf("proto: unexpected end of group")
)
