// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: location.proto

package pb

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type City struct {
	Id      int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Country Country `protobuf:"varint,3,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"`
}

func (m *City) Reset()      { *m = City{} }
func (*City) ProtoMessage() {}
func (*City) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f0f35158dcf9f2c, []int{0}
}
func (m *City) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *City) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_City.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *City) XXX_Merge(src proto.Message) {
	xxx_messageInfo_City.Merge(m, src)
}
func (m *City) XXX_Size() int {
	return m.Size()
}
func (m *City) XXX_DiscardUnknown() {
	xxx_messageInfo_City.DiscardUnknown(m)
}

var xxx_messageInfo_City proto.InternalMessageInfo

func (m *City) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *City) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *City) GetCountry() Country {
	if m != nil {
		return m.Country
	}
	return COUNTRY_NONE
}

type RetrieveCitiesRequest struct {
	Country Country `protobuf:"varint,1,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"`
}

func (m *RetrieveCitiesRequest) Reset()      { *m = RetrieveCitiesRequest{} }
func (*RetrieveCitiesRequest) ProtoMessage() {}
func (*RetrieveCitiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f0f35158dcf9f2c, []int{1}
}
func (m *RetrieveCitiesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveCitiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveCitiesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveCitiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveCitiesRequest.Merge(m, src)
}
func (m *RetrieveCitiesRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveCitiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveCitiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveCitiesRequest proto.InternalMessageInfo

func (m *RetrieveCitiesRequest) GetCountry() Country {
	if m != nil {
		return m.Country
	}
	return COUNTRY_NONE
}

type RetrieveCitiesResponse struct {
	Cities []*City `protobuf:"bytes,1,rep,name=cities,proto3" json:"cities,omitempty"`
}

func (m *RetrieveCitiesResponse) Reset()      { *m = RetrieveCitiesResponse{} }
func (*RetrieveCitiesResponse) ProtoMessage() {}
func (*RetrieveCitiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f0f35158dcf9f2c, []int{2}
}
func (m *RetrieveCitiesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveCitiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveCitiesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveCitiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveCitiesResponse.Merge(m, src)
}
func (m *RetrieveCitiesResponse) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveCitiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveCitiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveCitiesResponse proto.InternalMessageInfo

func (m *RetrieveCitiesResponse) GetCities() []*City {
	if m != nil {
		return m.Cities
	}
	return nil
}

type District struct {
	Id      int32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Country Country `protobuf:"varint,3,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"`
	City    *City   `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
}

func (m *District) Reset()      { *m = District{} }
func (*District) ProtoMessage() {}
func (*District) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f0f35158dcf9f2c, []int{3}
}
func (m *District) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *District) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_District.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *District) XXX_Merge(src proto.Message) {
	xxx_messageInfo_District.Merge(m, src)
}
func (m *District) XXX_Size() int {
	return m.Size()
}
func (m *District) XXX_DiscardUnknown() {
	xxx_messageInfo_District.DiscardUnknown(m)
}

var xxx_messageInfo_District proto.InternalMessageInfo

func (m *District) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *District) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *District) GetCountry() Country {
	if m != nil {
		return m.Country
	}
	return COUNTRY_NONE
}

func (m *District) GetCity() *City {
	if m != nil {
		return m.City
	}
	return nil
}

type RetrieveDistrictsRequest struct {
	Country Country `protobuf:"varint,1,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"`
	CityId  int32   `protobuf:"varint,2,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
}

func (m *RetrieveDistrictsRequest) Reset()      { *m = RetrieveDistrictsRequest{} }
func (*RetrieveDistrictsRequest) ProtoMessage() {}
func (*RetrieveDistrictsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f0f35158dcf9f2c, []int{4}
}
func (m *RetrieveDistrictsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveDistrictsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveDistrictsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveDistrictsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveDistrictsRequest.Merge(m, src)
}
func (m *RetrieveDistrictsRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveDistrictsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveDistrictsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveDistrictsRequest proto.InternalMessageInfo

func (m *RetrieveDistrictsRequest) GetCountry() Country {
	if m != nil {
		return m.Country
	}
	return COUNTRY_NONE
}

func (m *RetrieveDistrictsRequest) GetCityId() int32 {
	if m != nil {
		return m.CityId
	}
	return 0
}

type RetrieveDistrictsResponse struct {
	Districts []*District `protobuf:"bytes,1,rep,name=districts,proto3" json:"districts,omitempty"`
}

func (m *RetrieveDistrictsResponse) Reset()      { *m = RetrieveDistrictsResponse{} }
func (*RetrieveDistrictsResponse) ProtoMessage() {}
func (*RetrieveDistrictsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f0f35158dcf9f2c, []int{5}
}
func (m *RetrieveDistrictsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveDistrictsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveDistrictsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveDistrictsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveDistrictsResponse.Merge(m, src)
}
func (m *RetrieveDistrictsResponse) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveDistrictsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveDistrictsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveDistrictsResponse proto.InternalMessageInfo

func (m *RetrieveDistrictsResponse) GetDistricts() []*District {
	if m != nil {
		return m.Districts
	}
	return nil
}

type Point struct {
	Lat  float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Long float64 `protobuf:"fixed64,2,opt,name=long,proto3" json:"long,omitempty"`
}

func (m *Point) Reset()      { *m = Point{} }
func (*Point) ProtoMessage() {}
func (*Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f0f35158dcf9f2c, []int{6}
}
func (m *Point) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Point.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Point.Merge(m, src)
}
func (m *Point) XXX_Size() int {
	return m.Size()
}
func (m *Point) XXX_DiscardUnknown() {
	xxx_messageInfo_Point.DiscardUnknown(m)
}

var xxx_messageInfo_Point proto.InternalMessageInfo

func (m *Point) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Point) GetLong() float64 {
	if m != nil {
		return m.Long
	}
	return 0
}

func init() {
	proto.RegisterType((*City)(nil), "manabie.bob.City")
	golang_proto.RegisterType((*City)(nil), "manabie.bob.City")
	proto.RegisterType((*RetrieveCitiesRequest)(nil), "manabie.bob.RetrieveCitiesRequest")
	golang_proto.RegisterType((*RetrieveCitiesRequest)(nil), "manabie.bob.RetrieveCitiesRequest")
	proto.RegisterType((*RetrieveCitiesResponse)(nil), "manabie.bob.RetrieveCitiesResponse")
	golang_proto.RegisterType((*RetrieveCitiesResponse)(nil), "manabie.bob.RetrieveCitiesResponse")
	proto.RegisterType((*District)(nil), "manabie.bob.District")
	golang_proto.RegisterType((*District)(nil), "manabie.bob.District")
	proto.RegisterType((*RetrieveDistrictsRequest)(nil), "manabie.bob.RetrieveDistrictsRequest")
	golang_proto.RegisterType((*RetrieveDistrictsRequest)(nil), "manabie.bob.RetrieveDistrictsRequest")
	proto.RegisterType((*RetrieveDistrictsResponse)(nil), "manabie.bob.RetrieveDistrictsResponse")
	golang_proto.RegisterType((*RetrieveDistrictsResponse)(nil), "manabie.bob.RetrieveDistrictsResponse")
	proto.RegisterType((*Point)(nil), "manabie.bob.Point")
	golang_proto.RegisterType((*Point)(nil), "manabie.bob.Point")
}

func init() { proto.RegisterFile("location.proto", fileDescriptor_4f0f35158dcf9f2c) }
func init() { golang_proto.RegisterFile("location.proto", fileDescriptor_4f0f35158dcf9f2c) }

var fileDescriptor_4f0f35158dcf9f2c = []byte{
	// 425 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x52, 0x3d, 0x6f, 0xd4, 0x40,
	0x10, 0xf5, 0xdc, 0x47, 0x42, 0x26, 0xd2, 0x09, 0x56, 0x04, 0x4c, 0x8a, 0x95, 0x65, 0x09, 0xe9,
	0x28, 0xce, 0x27, 0x5d, 0x4a, 0x3a, 0x0e, 0x09, 0xd1, 0x45, 0x5b, 0xa6, 0x41, 0xde, 0xf5, 0x62,
	0x56, 0xb9, 0xdb, 0x3d, 0xec, 0x35, 0x92, 0x3b, 0x1a, 0x7a, 0x7e, 0x06, 0x3f, 0x83, 0x92, 0xf2,
	0xca, 0x94, 0x9c, 0xdd, 0x50, 0xe6, 0x27, 0x20, 0xaf, 0x6d, 0x71, 0x41, 0x57, 0x20, 0xa4, 0x74,
	0x6f, 0x66, 0xde, 0xbe, 0x7d, 0xf3, 0x34, 0x38, 0x59, 0x19, 0x11, 0x5b, 0x65, 0x74, 0xb4, 0xc9,
	0x8c, 0x35, 0xe4, 0x74, 0x1d, 0xeb, 0x98, 0x2b, 0x19, 0x71, 0xc3, 0xcf, 0x51, 0xea, 0x62, 0xdd,
	0x0e, 0xce, 0x67, 0xa9, 0xb2, 0x1f, 0x0a, 0x1e, 0x09, 0xb3, 0x9e, 0xa7, 0x26, 0x35, 0x73, 0xd7,
	0xe6, 0xc5, 0x7b, 0x57, 0xb9, 0xc2, 0xa1, 0x96, 0x1e, 0x5e, 0xe1, 0x68, 0xa9, 0x6c, 0x49, 0x26,
	0x38, 0x50, 0x89, 0x0f, 0x01, 0x4c, 0xc7, 0x6c, 0xa0, 0x12, 0x42, 0x70, 0xa4, 0xe3, 0xb5, 0xf4,
	0x07, 0x01, 0x4c, 0x4f, 0x98, 0xc3, 0x24, 0xc2, 0x63, 0x61, 0x0a, 0x6d, 0xb3, 0xd2, 0x1f, 0x06,
	0x30, 0x9d, 0x2c, 0x1e, 0x47, 0x7b, 0x2e, 0xa2, 0x65, 0x3b, 0x63, 0x3d, 0x29, 0x7c, 0x83, 0x67,
	0x4c, 0xda, 0x4c, 0xc9, 0x4f, 0x72, 0xa9, 0xac, 0x92, 0x39, 0x93, 0x1f, 0x0b, 0x99, 0xdb, 0x7d,
	0x21, 0xf8, 0x17, 0xa1, 0x25, 0x3e, 0xf9, 0x5b, 0x28, 0xdf, 0x18, 0x9d, 0x4b, 0xf2, 0x02, 0x8f,
	0x84, 0xeb, 0xf8, 0x10, 0x0c, 0xa7, 0xa7, 0x8b, 0x47, 0x77, 0x85, 0x94, 0x2d, 0x59, 0x47, 0x08,
	0xbf, 0x00, 0x3e, 0x78, 0xad, 0x72, 0x9b, 0x29, 0x61, 0xef, 0x63, 0x5d, 0xf2, 0x1c, 0x47, 0x42,
	0xd9, 0xd2, 0x1f, 0x05, 0x70, 0xd8, 0x89, 0x1b, 0x87, 0x02, 0xfd, 0x7e, 0x99, 0xde, 0xce, 0xff,
	0x06, 0x43, 0x9e, 0xe2, 0x71, 0xa3, 0xf9, 0x4e, 0x25, 0xce, 0xf9, 0xd8, 0x2d, 0x5b, 0xbe, 0x4d,
	0xc2, 0x4b, 0x7c, 0x76, 0xe0, 0x93, 0x2e, 0xb4, 0x0b, 0x3c, 0x49, 0xfa, 0x66, 0x97, 0xdb, 0xd9,
	0x9d, 0x7f, 0xfa, 0x27, 0xec, 0x0f, 0x2f, 0x9c, 0xe1, 0xf8, 0xd2, 0x28, 0x6d, 0xc9, 0x43, 0x1c,
	0xae, 0x62, 0xeb, 0xfc, 0x01, 0x6b, 0x60, 0x13, 0xde, 0xca, 0xe8, 0xd4, 0x59, 0x00, 0xe6, 0xf0,
	0xab, 0xd5, 0x76, 0x47, 0xbd, 0x9b, 0x1d, 0xf5, 0x6e, 0x77, 0x14, 0x3e, 0x57, 0x14, 0xbe, 0x55,
	0x14, 0x7e, 0x54, 0x14, 0xb6, 0x15, 0x85, 0x9f, 0x15, 0x85, 0x5f, 0x15, 0xf5, 0x6e, 0x2b, 0x0a,
	0x5f, 0x6b, 0xea, 0x7d, 0xaf, 0x29, 0x6c, 0x6b, 0xea, 0xdd, 0xd4, 0xd4, 0xbb, 0x5a, 0xec, 0x1d,
	0x70, 0x67, 0x6a, 0xd6, 0x60, 0x1e, 0x8b, 0x6b, 0xa9, 0x93, 0xf9, 0xe6, 0x3a, 0x9d, 0xa7, 0x52,
	0xb7, 0x97, 0xcc, 0x0d, 0x7f, 0xb9, 0xe1, 0xfc, 0xc8, 0x55, 0x17, 0xbf, 0x03, 0x00, 0x00, 0xff,
	0xff, 0xb7, 0x66, 0x88, 0x0c, 0x26, 0x03, 0x00, 0x00,
}

func (this *City) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*City)
	if !ok {
		that2, ok := that.(City)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	return true
}
func (this *RetrieveCitiesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveCitiesRequest)
	if !ok {
		that2, ok := that.(RetrieveCitiesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	return true
}
func (this *RetrieveCitiesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveCitiesResponse)
	if !ok {
		that2, ok := that.(RetrieveCitiesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Cities) != len(that1.Cities) {
		return false
	}
	for i := range this.Cities {
		if !this.Cities[i].Equal(that1.Cities[i]) {
			return false
		}
	}
	return true
}
func (this *District) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*District)
	if !ok {
		that2, ok := that.(District)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if !this.City.Equal(that1.City) {
		return false
	}
	return true
}
func (this *RetrieveDistrictsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveDistrictsRequest)
	if !ok {
		that2, ok := that.(RetrieveDistrictsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if this.CityId != that1.CityId {
		return false
	}
	return true
}
func (this *RetrieveDistrictsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveDistrictsResponse)
	if !ok {
		that2, ok := that.(RetrieveDistrictsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Districts) != len(that1.Districts) {
		return false
	}
	for i := range this.Districts {
		if !this.Districts[i].Equal(that1.Districts[i]) {
			return false
		}
	}
	return true
}
func (this *Point) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Point)
	if !ok {
		that2, ok := that.(Point)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Lat != that1.Lat {
		return false
	}
	if this.Long != that1.Long {
		return false
	}
	return true
}
func (this *City) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.City{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveCitiesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RetrieveCitiesRequest{")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveCitiesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RetrieveCitiesResponse{")
	if this.Cities != nil {
		s = append(s, "Cities: "+fmt.Sprintf("%#v", this.Cities)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *District) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.District{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	if this.City != nil {
		s = append(s, "City: "+fmt.Sprintf("%#v", this.City)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveDistrictsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.RetrieveDistrictsRequest{")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "CityId: "+fmt.Sprintf("%#v", this.CityId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveDistrictsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RetrieveDistrictsResponse{")
	if this.Districts != nil {
		s = append(s, "Districts: "+fmt.Sprintf("%#v", this.Districts)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Point) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.Point{")
	s = append(s, "Lat: "+fmt.Sprintf("%#v", this.Lat)+",\n")
	s = append(s, "Long: "+fmt.Sprintf("%#v", this.Long)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringLocation(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *City) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *City) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *City) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Country != 0 {
		i = encodeVarintLocation(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLocation(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintLocation(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveCitiesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveCitiesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveCitiesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Country != 0 {
		i = encodeVarintLocation(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveCitiesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveCitiesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveCitiesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cities) > 0 {
		for iNdEx := len(m.Cities) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cities[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLocation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *District) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *District) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *District) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.City != nil {
		{
			size, err := m.City.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLocation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Country != 0 {
		i = encodeVarintLocation(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLocation(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintLocation(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveDistrictsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveDistrictsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveDistrictsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CityId != 0 {
		i = encodeVarintLocation(dAtA, i, uint64(m.CityId))
		i--
		dAtA[i] = 0x10
	}
	if m.Country != 0 {
		i = encodeVarintLocation(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveDistrictsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveDistrictsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveDistrictsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Districts) > 0 {
		for iNdEx := len(m.Districts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Districts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLocation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Point) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Point) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Point) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Long != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Long))))
		i--
		dAtA[i] = 0x11
	}
	if m.Lat != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lat))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func encodeVarintLocation(dAtA []byte, offset int, v uint64) int {
	offset -= sovLocation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *City) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLocation(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLocation(uint64(l))
	}
	if m.Country != 0 {
		n += 1 + sovLocation(uint64(m.Country))
	}
	return n
}

func (m *RetrieveCitiesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Country != 0 {
		n += 1 + sovLocation(uint64(m.Country))
	}
	return n
}

func (m *RetrieveCitiesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cities) > 0 {
		for _, e := range m.Cities {
			l = e.Size()
			n += 1 + l + sovLocation(uint64(l))
		}
	}
	return n
}

func (m *District) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLocation(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLocation(uint64(l))
	}
	if m.Country != 0 {
		n += 1 + sovLocation(uint64(m.Country))
	}
	if m.City != nil {
		l = m.City.Size()
		n += 1 + l + sovLocation(uint64(l))
	}
	return n
}

func (m *RetrieveDistrictsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Country != 0 {
		n += 1 + sovLocation(uint64(m.Country))
	}
	if m.CityId != 0 {
		n += 1 + sovLocation(uint64(m.CityId))
	}
	return n
}

func (m *RetrieveDistrictsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Districts) > 0 {
		for _, e := range m.Districts {
			l = e.Size()
			n += 1 + l + sovLocation(uint64(l))
		}
	}
	return n
}

func (m *Point) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lat != 0 {
		n += 9
	}
	if m.Long != 0 {
		n += 9
	}
	return n
}

func sovLocation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLocation(x uint64) (n int) {
	return sovLocation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *City) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&City{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveCitiesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveCitiesRequest{`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveCitiesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCities := "[]*City{"
	for _, f := range this.Cities {
		repeatedStringForCities += strings.Replace(f.String(), "City", "City", 1) + ","
	}
	repeatedStringForCities += "}"
	s := strings.Join([]string{`&RetrieveCitiesResponse{`,
		`Cities:` + repeatedStringForCities + `,`,
		`}`,
	}, "")
	return s
}
func (this *District) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&District{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`City:` + strings.Replace(this.City.String(), "City", "City", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveDistrictsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveDistrictsRequest{`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`CityId:` + fmt.Sprintf("%v", this.CityId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveDistrictsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDistricts := "[]*District{"
	for _, f := range this.Districts {
		repeatedStringForDistricts += strings.Replace(f.String(), "District", "District", 1) + ","
	}
	repeatedStringForDistricts += "}"
	s := strings.Join([]string{`&RetrieveDistrictsResponse{`,
		`Districts:` + repeatedStringForDistricts + `,`,
		`}`,
	}, "")
	return s
}
func (this *Point) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Point{`,
		`Lat:` + fmt.Sprintf("%v", this.Lat) + `,`,
		`Long:` + fmt.Sprintf("%v", this.Long) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringLocation(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *City) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: City: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: City: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLocation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveCitiesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveCitiesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveCitiesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLocation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveCitiesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveCitiesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveCitiesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cities = append(m.Cities, &City{})
			if err := m.Cities[len(m.Cities)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *District) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: District: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: District: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLocation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.City == nil {
				m.City = &City{}
			}
			if err := m.City.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveDistrictsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveDistrictsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveDistrictsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityId", wireType)
			}
			m.CityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLocation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveDistrictsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveDistrictsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveDistrictsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Districts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLocation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLocation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLocation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Districts = append(m.Districts, &District{})
			if err := m.Districts[len(m.Districts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLocation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Point) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLocation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Point: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Point: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lat = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Long", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Long = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipLocation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLocation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLocation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLocation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLocation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLocation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLocation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLocation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLocation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLocation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLocation = fmt.Errorf("proto: unexpected end of group")
)
