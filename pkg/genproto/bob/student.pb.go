// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: student.proto

package pb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ArchivedTopic_Status int32

const (
	ARCHIVED_STATUS_COMPLETED ArchivedTopic_Status = 0
	ARCHIVED_STATUS_EXPIRED   ArchivedTopic_Status = 1
)

var ArchivedTopic_Status_name = map[int32]string{
	0: "ARCHIVED_STATUS_COMPLETED",
	1: "ARCHIVED_STATUS_EXPIRED",
}

var ArchivedTopic_Status_value = map[string]int32{
	"ARCHIVED_STATUS_COMPLETED": 0,
	"ARCHIVED_STATUS_EXPIRED":   1,
}

func (ArchivedTopic_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{39, 0}
}

type RegisterRequest struct {
	Name             string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Country          Country `protobuf:"varint,2,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"`
	Phone            string  `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	Email            string  `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Grade            string  `protobuf:"bytes,5,opt,name=grade,proto3" json:"grade,omitempty"`
	TargetUniversity string  `protobuf:"bytes,6,opt,name=target_university,json=targetUniversity,proto3" json:"target_university,omitempty"`
	School           *School `protobuf:"bytes,7,opt,name=school,proto3" json:"school,omitempty"`
	ActivationCode   string  `protobuf:"bytes,8,opt,name=activation_code,json=activationCode,proto3" json:"activation_code,omitempty"`
}

func (m *RegisterRequest) Reset()      { *m = RegisterRequest{} }
func (*RegisterRequest) ProtoMessage() {}
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{0}
}
func (m *RegisterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterRequest.Merge(m, src)
}
func (m *RegisterRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterRequest proto.InternalMessageInfo

func (m *RegisterRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RegisterRequest) GetCountry() Country {
	if m != nil {
		return m.Country
	}
	return COUNTRY_NONE
}

func (m *RegisterRequest) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *RegisterRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *RegisterRequest) GetGrade() string {
	if m != nil {
		return m.Grade
	}
	return ""
}

func (m *RegisterRequest) GetTargetUniversity() string {
	if m != nil {
		return m.TargetUniversity
	}
	return ""
}

func (m *RegisterRequest) GetSchool() *School {
	if m != nil {
		return m.School
	}
	return nil
}

func (m *RegisterRequest) GetActivationCode() string {
	if m != nil {
		return m.ActivationCode
	}
	return ""
}

type RegisterResponse struct {
	Successful  bool             `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
	OnTrial     bool             `protobuf:"varint,2,opt,name=on_trial,json=onTrial,proto3" json:"on_trial,omitempty"`
	BillingDate *types.Timestamp `protobuf:"bytes,3,opt,name=billing_date,json=billingDate,proto3" json:"billing_date,omitempty"`
}

func (m *RegisterResponse) Reset()      { *m = RegisterResponse{} }
func (*RegisterResponse) ProtoMessage() {}
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{1}
}
func (m *RegisterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterResponse.Merge(m, src)
}
func (m *RegisterResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterResponse proto.InternalMessageInfo

func (m *RegisterResponse) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

func (m *RegisterResponse) GetOnTrial() bool {
	if m != nil {
		return m.OnTrial
	}
	return false
}

func (m *RegisterResponse) GetBillingDate() *types.Timestamp {
	if m != nil {
		return m.BillingDate
	}
	return nil
}

type GetStudentProfileRequest struct {
	StudentIds []string `protobuf:"bytes,1,rep,name=student_ids,json=studentIds,proto3" json:"student_ids,omitempty"`
}

func (m *GetStudentProfileRequest) Reset()      { *m = GetStudentProfileRequest{} }
func (*GetStudentProfileRequest) ProtoMessage() {}
func (*GetStudentProfileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{2}
}
func (m *GetStudentProfileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStudentProfileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStudentProfileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStudentProfileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStudentProfileRequest.Merge(m, src)
}
func (m *GetStudentProfileRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetStudentProfileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStudentProfileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetStudentProfileRequest proto.InternalMessageInfo

func (m *GetStudentProfileRequest) GetStudentIds() []string {
	if m != nil {
		return m.StudentIds
	}
	return nil
}

type StudentProfile struct {
	Id               string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Country          Country          `protobuf:"varint,3,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"`
	Phone            string           `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	Email            string           `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	Grade            string           `protobuf:"bytes,6,opt,name=grade,proto3" json:"grade,omitempty"`
	TargetUniversity string           `protobuf:"bytes,7,opt,name=target_university,json=targetUniversity,proto3" json:"target_university,omitempty"`
	Avatar           string           `protobuf:"bytes,8,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Birthday         *types.Timestamp `protobuf:"bytes,9,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Biography        string           `protobuf:"bytes,10,opt,name=biography,proto3" json:"biography,omitempty"`
	PaymentStatus    PaymentStatus    `protobuf:"varint,11,opt,name=payment_status,json=paymentStatus,proto3,enum=manabie.bob.PaymentStatus" json:"payment_status,omitempty"`
	BillingDate      *types.Timestamp `protobuf:"bytes,12,opt,name=billing_date,json=billingDate,proto3" json:"billing_date,omitempty"`
	CreatedAt        *types.Timestamp `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	School           *School          `protobuf:"bytes,14,opt,name=school,proto3" json:"school,omitempty"`
	PlanId           string           `protobuf:"bytes,15,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	BillingAt        *types.Timestamp `protobuf:"bytes,16,opt,name=billing_at,json=billingAt,proto3" json:"billing_at,omitempty"`
	IsTester         bool             `protobuf:"varint,17,opt,name=is_tester,json=isTester,proto3" json:"is_tester,omitempty"`
	FacebookId       string           `protobuf:"bytes,18,opt,name=facebook_id,json=facebookId,proto3" json:"facebook_id,omitempty"`
	Divs             []int64          `protobuf:"varint,19,rep,packed,name=divs,proto3" json:"divs,omitempty"`
}

func (m *StudentProfile) Reset()      { *m = StudentProfile{} }
func (*StudentProfile) ProtoMessage() {}
func (*StudentProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{3}
}
func (m *StudentProfile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StudentProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StudentProfile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StudentProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudentProfile.Merge(m, src)
}
func (m *StudentProfile) XXX_Size() int {
	return m.Size()
}
func (m *StudentProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_StudentProfile.DiscardUnknown(m)
}

var xxx_messageInfo_StudentProfile proto.InternalMessageInfo

func (m *StudentProfile) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StudentProfile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StudentProfile) GetCountry() Country {
	if m != nil {
		return m.Country
	}
	return COUNTRY_NONE
}

func (m *StudentProfile) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *StudentProfile) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *StudentProfile) GetGrade() string {
	if m != nil {
		return m.Grade
	}
	return ""
}

func (m *StudentProfile) GetTargetUniversity() string {
	if m != nil {
		return m.TargetUniversity
	}
	return ""
}

func (m *StudentProfile) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *StudentProfile) GetBirthday() *types.Timestamp {
	if m != nil {
		return m.Birthday
	}
	return nil
}

func (m *StudentProfile) GetBiography() string {
	if m != nil {
		return m.Biography
	}
	return ""
}

func (m *StudentProfile) GetPaymentStatus() PaymentStatus {
	if m != nil {
		return m.PaymentStatus
	}
	return PAYMENT_STATUS_ON_TRIAL
}

func (m *StudentProfile) GetBillingDate() *types.Timestamp {
	if m != nil {
		return m.BillingDate
	}
	return nil
}

func (m *StudentProfile) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *StudentProfile) GetSchool() *School {
	if m != nil {
		return m.School
	}
	return nil
}

func (m *StudentProfile) GetPlanId() string {
	if m != nil {
		return m.PlanId
	}
	return ""
}

func (m *StudentProfile) GetBillingAt() *types.Timestamp {
	if m != nil {
		return m.BillingAt
	}
	return nil
}

func (m *StudentProfile) GetIsTester() bool {
	if m != nil {
		return m.IsTester
	}
	return false
}

func (m *StudentProfile) GetFacebookId() string {
	if m != nil {
		return m.FacebookId
	}
	return ""
}

func (m *StudentProfile) GetDivs() []int64 {
	if m != nil {
		return m.Divs
	}
	return nil
}

type GetStudentProfileResponse struct {
	Datas []*GetStudentProfileResponse_Data `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (m *GetStudentProfileResponse) Reset()      { *m = GetStudentProfileResponse{} }
func (*GetStudentProfileResponse) ProtoMessage() {}
func (*GetStudentProfileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{4}
}
func (m *GetStudentProfileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStudentProfileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStudentProfileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStudentProfileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStudentProfileResponse.Merge(m, src)
}
func (m *GetStudentProfileResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetStudentProfileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStudentProfileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetStudentProfileResponse proto.InternalMessageInfo

func (m *GetStudentProfileResponse) GetDatas() []*GetStudentProfileResponse_Data {
	if m != nil {
		return m.Datas
	}
	return nil
}

type GetStudentProfileResponse_Data struct {
	Profile *StudentProfile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
	CoachId string          `protobuf:"bytes,2,opt,name=coach_id,json=coachId,proto3" json:"coach_id,omitempty"` // Deprecated: Do not use.
}

func (m *GetStudentProfileResponse_Data) Reset()      { *m = GetStudentProfileResponse_Data{} }
func (*GetStudentProfileResponse_Data) ProtoMessage() {}
func (*GetStudentProfileResponse_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{4, 0}
}
func (m *GetStudentProfileResponse_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetStudentProfileResponse_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetStudentProfileResponse_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetStudentProfileResponse_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStudentProfileResponse_Data.Merge(m, src)
}
func (m *GetStudentProfileResponse_Data) XXX_Size() int {
	return m.Size()
}
func (m *GetStudentProfileResponse_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStudentProfileResponse_Data.DiscardUnknown(m)
}

var xxx_messageInfo_GetStudentProfileResponse_Data proto.InternalMessageInfo

func (m *GetStudentProfileResponse_Data) GetProfile() *StudentProfile {
	if m != nil {
		return m.Profile
	}
	return nil
}

// Deprecated: Do not use.
func (m *GetStudentProfileResponse_Data) GetCoachId() string {
	if m != nil {
		return m.CoachId
	}
	return ""
}

type UpdateProfileRequest struct {
	Name             string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Grade            string           `protobuf:"bytes,2,opt,name=grade,proto3" json:"grade,omitempty"`
	TargetUniversity string           `protobuf:"bytes,3,opt,name=target_university,json=targetUniversity,proto3" json:"target_university,omitempty"`
	Avatar           string           `protobuf:"bytes,4,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Birthday         *types.Timestamp `protobuf:"bytes,5,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Biography        string           `protobuf:"bytes,6,opt,name=biography,proto3" json:"biography,omitempty"`
	School           *School          `protobuf:"bytes,7,opt,name=school,proto3" json:"school,omitempty"`
}

func (m *UpdateProfileRequest) Reset()      { *m = UpdateProfileRequest{} }
func (*UpdateProfileRequest) ProtoMessage() {}
func (*UpdateProfileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{5}
}
func (m *UpdateProfileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateProfileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateProfileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateProfileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateProfileRequest.Merge(m, src)
}
func (m *UpdateProfileRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateProfileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateProfileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateProfileRequest proto.InternalMessageInfo

func (m *UpdateProfileRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateProfileRequest) GetGrade() string {
	if m != nil {
		return m.Grade
	}
	return ""
}

func (m *UpdateProfileRequest) GetTargetUniversity() string {
	if m != nil {
		return m.TargetUniversity
	}
	return ""
}

func (m *UpdateProfileRequest) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *UpdateProfileRequest) GetBirthday() *types.Timestamp {
	if m != nil {
		return m.Birthday
	}
	return nil
}

func (m *UpdateProfileRequest) GetBiography() string {
	if m != nil {
		return m.Biography
	}
	return ""
}

func (m *UpdateProfileRequest) GetSchool() *School {
	if m != nil {
		return m.School
	}
	return nil
}

type UpdateProfileResponse struct {
	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (m *UpdateProfileResponse) Reset()      { *m = UpdateProfileResponse{} }
func (*UpdateProfileResponse) ProtoMessage() {}
func (*UpdateProfileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{6}
}
func (m *UpdateProfileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateProfileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateProfileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateProfileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateProfileResponse.Merge(m, src)
}
func (m *UpdateProfileResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateProfileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateProfileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateProfileResponse proto.InternalMessageInfo

func (m *UpdateProfileResponse) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

type RetrieveLearningProgressRequest struct {
	StudentId string           `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	SessionId string           `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	From      *types.Timestamp `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To        *types.Timestamp `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *RetrieveLearningProgressRequest) Reset()      { *m = RetrieveLearningProgressRequest{} }
func (*RetrieveLearningProgressRequest) ProtoMessage() {}
func (*RetrieveLearningProgressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{7}
}
func (m *RetrieveLearningProgressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveLearningProgressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveLearningProgressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveLearningProgressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveLearningProgressRequest.Merge(m, src)
}
func (m *RetrieveLearningProgressRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveLearningProgressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveLearningProgressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveLearningProgressRequest proto.InternalMessageInfo

func (m *RetrieveLearningProgressRequest) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *RetrieveLearningProgressRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *RetrieveLearningProgressRequest) GetFrom() *types.Timestamp {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *RetrieveLearningProgressRequest) GetTo() *types.Timestamp {
	if m != nil {
		return m.To
	}
	return nil
}

type RetrieveLearningProgressResponse struct {
	Dailies []*RetrieveLearningProgressResponse_DailyLearningTime `protobuf:"bytes,1,rep,name=dailies,proto3" json:"dailies,omitempty"`
}

func (m *RetrieveLearningProgressResponse) Reset()      { *m = RetrieveLearningProgressResponse{} }
func (*RetrieveLearningProgressResponse) ProtoMessage() {}
func (*RetrieveLearningProgressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{8}
}
func (m *RetrieveLearningProgressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveLearningProgressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveLearningProgressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveLearningProgressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveLearningProgressResponse.Merge(m, src)
}
func (m *RetrieveLearningProgressResponse) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveLearningProgressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveLearningProgressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveLearningProgressResponse proto.InternalMessageInfo

func (m *RetrieveLearningProgressResponse) GetDailies() []*RetrieveLearningProgressResponse_DailyLearningTime {
	if m != nil {
		return m.Dailies
	}
	return nil
}

type RetrieveLearningProgressResponse_DailyLearningTime struct {
	TotalTimeSpentInDay int64            `protobuf:"varint,1,opt,name=total_time_spent_in_day,json=totalTimeSpentInDay,proto3" json:"total_time_spent_in_day,omitempty"`
	Day                 *types.Timestamp `protobuf:"bytes,2,opt,name=day,proto3" json:"day,omitempty"`
}

func (m *RetrieveLearningProgressResponse_DailyLearningTime) Reset() {
	*m = RetrieveLearningProgressResponse_DailyLearningTime{}
}
func (*RetrieveLearningProgressResponse_DailyLearningTime) ProtoMessage() {}
func (*RetrieveLearningProgressResponse_DailyLearningTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{8, 0}
}
func (m *RetrieveLearningProgressResponse_DailyLearningTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveLearningProgressResponse_DailyLearningTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveLearningProgressResponse_DailyLearningTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveLearningProgressResponse_DailyLearningTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveLearningProgressResponse_DailyLearningTime.Merge(m, src)
}
func (m *RetrieveLearningProgressResponse_DailyLearningTime) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveLearningProgressResponse_DailyLearningTime) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveLearningProgressResponse_DailyLearningTime.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveLearningProgressResponse_DailyLearningTime proto.InternalMessageInfo

func (m *RetrieveLearningProgressResponse_DailyLearningTime) GetTotalTimeSpentInDay() int64 {
	if m != nil {
		return m.TotalTimeSpentInDay
	}
	return 0
}

func (m *RetrieveLearningProgressResponse_DailyLearningTime) GetDay() *types.Timestamp {
	if m != nil {
		return m.Day
	}
	return nil
}

type StudentEventLog struct {
	EventId   string           `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	EventType string           `protobuf:"bytes,2,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	CreatedAt *types.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Payload   *types.Struct    `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *StudentEventLog) Reset()      { *m = StudentEventLog{} }
func (*StudentEventLog) ProtoMessage() {}
func (*StudentEventLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{9}
}
func (m *StudentEventLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StudentEventLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StudentEventLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StudentEventLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudentEventLog.Merge(m, src)
}
func (m *StudentEventLog) XXX_Size() int {
	return m.Size()
}
func (m *StudentEventLog) XXX_DiscardUnknown() {
	xxx_messageInfo_StudentEventLog.DiscardUnknown(m)
}

var xxx_messageInfo_StudentEventLog proto.InternalMessageInfo

func (m *StudentEventLog) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *StudentEventLog) GetEventType() string {
	if m != nil {
		return m.EventType
	}
	return ""
}

func (m *StudentEventLog) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *StudentEventLog) GetPayload() *types.Struct {
	if m != nil {
		return m.Payload
	}
	return nil
}

type StudentComment struct {
	CommentId      string           `protobuf:"bytes,1,opt,name=comment_id,json=commentId,proto3" json:"comment_id,omitempty"`
	CoachId        string           `protobuf:"bytes,2,opt,name=coach_id,json=coachId,proto3" json:"coach_id,omitempty"` // Deprecated: Do not use.
	StudentId      string           `protobuf:"bytes,3,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	CommentContent string           `protobuf:"bytes,4,opt,name=comment_content,json=commentContent,proto3" json:"comment_content,omitempty"`
	UpdatedAt      *types.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt      *types.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *StudentComment) Reset()      { *m = StudentComment{} }
func (*StudentComment) ProtoMessage() {}
func (*StudentComment) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{10}
}
func (m *StudentComment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StudentComment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StudentComment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StudentComment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudentComment.Merge(m, src)
}
func (m *StudentComment) XXX_Size() int {
	return m.Size()
}
func (m *StudentComment) XXX_DiscardUnknown() {
	xxx_messageInfo_StudentComment.DiscardUnknown(m)
}

var xxx_messageInfo_StudentComment proto.InternalMessageInfo

func (m *StudentComment) GetCommentId() string {
	if m != nil {
		return m.CommentId
	}
	return ""
}

// Deprecated: Do not use.
func (m *StudentComment) GetCoachId() string {
	if m != nil {
		return m.CoachId
	}
	return ""
}

func (m *StudentComment) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *StudentComment) GetCommentContent() string {
	if m != nil {
		return m.CommentContent
	}
	return ""
}

func (m *StudentComment) GetUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *StudentComment) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type AssignToCoachRequest struct {
	CoachId   string `protobuf:"bytes,1,opt,name=coach_id,json=coachId,proto3" json:"coach_id,omitempty"`
	StudentId string `protobuf:"bytes,2,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
}

func (m *AssignToCoachRequest) Reset()      { *m = AssignToCoachRequest{} }
func (*AssignToCoachRequest) ProtoMessage() {}
func (*AssignToCoachRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{11}
}
func (m *AssignToCoachRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssignToCoachRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssignToCoachRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssignToCoachRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignToCoachRequest.Merge(m, src)
}
func (m *AssignToCoachRequest) XXX_Size() int {
	return m.Size()
}
func (m *AssignToCoachRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignToCoachRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AssignToCoachRequest proto.InternalMessageInfo

func (m *AssignToCoachRequest) GetCoachId() string {
	if m != nil {
		return m.CoachId
	}
	return ""
}

func (m *AssignToCoachRequest) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

type AssignToCoachResponse struct {
	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (m *AssignToCoachResponse) Reset()      { *m = AssignToCoachResponse{} }
func (*AssignToCoachResponse) ProtoMessage() {}
func (*AssignToCoachResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{12}
}
func (m *AssignToCoachResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssignToCoachResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssignToCoachResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssignToCoachResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignToCoachResponse.Merge(m, src)
}
func (m *AssignToCoachResponse) XXX_Size() int {
	return m.Size()
}
func (m *AssignToCoachResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignToCoachResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AssignToCoachResponse proto.InternalMessageInfo

func (m *AssignToCoachResponse) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

type RetrievePresetStudyPlansRequest struct {
	Name    string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Country Country `protobuf:"varint,2,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"`
	Grade   string  `protobuf:"bytes,3,opt,name=grade,proto3" json:"grade,omitempty"`
	Subject Subject `protobuf:"varint,4,opt,name=subject,proto3,enum=manabie.bob.Subject" json:"subject,omitempty"`
}

func (m *RetrievePresetStudyPlansRequest) Reset()      { *m = RetrievePresetStudyPlansRequest{} }
func (*RetrievePresetStudyPlansRequest) ProtoMessage() {}
func (*RetrievePresetStudyPlansRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{13}
}
func (m *RetrievePresetStudyPlansRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrievePresetStudyPlansRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrievePresetStudyPlansRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrievePresetStudyPlansRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrievePresetStudyPlansRequest.Merge(m, src)
}
func (m *RetrievePresetStudyPlansRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrievePresetStudyPlansRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrievePresetStudyPlansRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrievePresetStudyPlansRequest proto.InternalMessageInfo

func (m *RetrievePresetStudyPlansRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RetrievePresetStudyPlansRequest) GetCountry() Country {
	if m != nil {
		return m.Country
	}
	return COUNTRY_NONE
}

func (m *RetrievePresetStudyPlansRequest) GetGrade() string {
	if m != nil {
		return m.Grade
	}
	return ""
}

func (m *RetrievePresetStudyPlansRequest) GetSubject() Subject {
	if m != nil {
		return m.Subject
	}
	return SUBJECT_NONE
}

type RetrievePresetStudyPlansResponse struct {
	PresetStudyPlans []*PresetStudyPlan `protobuf:"bytes,1,rep,name=preset_study_plans,json=presetStudyPlans,proto3" json:"preset_study_plans,omitempty"`
}

func (m *RetrievePresetStudyPlansResponse) Reset()      { *m = RetrievePresetStudyPlansResponse{} }
func (*RetrievePresetStudyPlansResponse) ProtoMessage() {}
func (*RetrievePresetStudyPlansResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{14}
}
func (m *RetrievePresetStudyPlansResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrievePresetStudyPlansResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrievePresetStudyPlansResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrievePresetStudyPlansResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrievePresetStudyPlansResponse.Merge(m, src)
}
func (m *RetrievePresetStudyPlansResponse) XXX_Size() int {
	return m.Size()
}
func (m *RetrievePresetStudyPlansResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrievePresetStudyPlansResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrievePresetStudyPlansResponse proto.InternalMessageInfo

func (m *RetrievePresetStudyPlansResponse) GetPresetStudyPlans() []*PresetStudyPlan {
	if m != nil {
		return m.PresetStudyPlans
	}
	return nil
}

type RetrievePresetStudyPlanWeekliesRequest struct {
	PresetStudyPlanId string `protobuf:"bytes,1,opt,name=preset_study_plan_id,json=presetStudyPlanId,proto3" json:"preset_study_plan_id,omitempty"`
}

func (m *RetrievePresetStudyPlanWeekliesRequest) Reset() {
	*m = RetrievePresetStudyPlanWeekliesRequest{}
}
func (*RetrievePresetStudyPlanWeekliesRequest) ProtoMessage() {}
func (*RetrievePresetStudyPlanWeekliesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{15}
}
func (m *RetrievePresetStudyPlanWeekliesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrievePresetStudyPlanWeekliesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrievePresetStudyPlanWeekliesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrievePresetStudyPlanWeekliesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrievePresetStudyPlanWeekliesRequest.Merge(m, src)
}
func (m *RetrievePresetStudyPlanWeekliesRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrievePresetStudyPlanWeekliesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrievePresetStudyPlanWeekliesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrievePresetStudyPlanWeekliesRequest proto.InternalMessageInfo

func (m *RetrievePresetStudyPlanWeekliesRequest) GetPresetStudyPlanId() string {
	if m != nil {
		return m.PresetStudyPlanId
	}
	return ""
}

type RetrievePresetStudyPlanWeekliesResponse struct {
	PresetStudyPlanWeeklies []*PresetStudyPlanWeekly `protobuf:"bytes,1,rep,name=preset_study_plan_weeklies,json=presetStudyPlanWeeklies,proto3" json:"preset_study_plan_weeklies,omitempty"`
}

func (m *RetrievePresetStudyPlanWeekliesResponse) Reset() {
	*m = RetrievePresetStudyPlanWeekliesResponse{}
}
func (*RetrievePresetStudyPlanWeekliesResponse) ProtoMessage() {}
func (*RetrievePresetStudyPlanWeekliesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{16}
}
func (m *RetrievePresetStudyPlanWeekliesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrievePresetStudyPlanWeekliesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrievePresetStudyPlanWeekliesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrievePresetStudyPlanWeekliesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrievePresetStudyPlanWeekliesResponse.Merge(m, src)
}
func (m *RetrievePresetStudyPlanWeekliesResponse) XXX_Size() int {
	return m.Size()
}
func (m *RetrievePresetStudyPlanWeekliesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrievePresetStudyPlanWeekliesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrievePresetStudyPlanWeekliesResponse proto.InternalMessageInfo

func (m *RetrievePresetStudyPlanWeekliesResponse) GetPresetStudyPlanWeeklies() []*PresetStudyPlanWeekly {
	if m != nil {
		return m.PresetStudyPlanWeeklies
	}
	return nil
}

type AssignPresetStudyPlansRequest struct {
	StudentId   string                                      `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	PlanDetails []*AssignPresetStudyPlansRequest_PlanDetail `protobuf:"bytes,2,rep,name=plan_details,json=planDetails,proto3" json:"plan_details,omitempty"`
}

func (m *AssignPresetStudyPlansRequest) Reset()      { *m = AssignPresetStudyPlansRequest{} }
func (*AssignPresetStudyPlansRequest) ProtoMessage() {}
func (*AssignPresetStudyPlansRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{17}
}
func (m *AssignPresetStudyPlansRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssignPresetStudyPlansRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssignPresetStudyPlansRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssignPresetStudyPlansRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignPresetStudyPlansRequest.Merge(m, src)
}
func (m *AssignPresetStudyPlansRequest) XXX_Size() int {
	return m.Size()
}
func (m *AssignPresetStudyPlansRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignPresetStudyPlansRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AssignPresetStudyPlansRequest proto.InternalMessageInfo

func (m *AssignPresetStudyPlansRequest) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *AssignPresetStudyPlansRequest) GetPlanDetails() []*AssignPresetStudyPlansRequest_PlanDetail {
	if m != nil {
		return m.PlanDetails
	}
	return nil
}

type AssignPresetStudyPlansRequest_PlanDetail struct {
	PresetStudyPlanId string           `protobuf:"bytes,1,opt,name=preset_study_plan_id,json=presetStudyPlanId,proto3" json:"preset_study_plan_id,omitempty"`
	StartWeek         int32            `protobuf:"varint,2,opt,name=start_week,json=startWeek,proto3" json:"start_week,omitempty"`
	StartDate         *types.Timestamp `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
}

func (m *AssignPresetStudyPlansRequest_PlanDetail) Reset() {
	*m = AssignPresetStudyPlansRequest_PlanDetail{}
}
func (*AssignPresetStudyPlansRequest_PlanDetail) ProtoMessage() {}
func (*AssignPresetStudyPlansRequest_PlanDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{17, 0}
}
func (m *AssignPresetStudyPlansRequest_PlanDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssignPresetStudyPlansRequest_PlanDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssignPresetStudyPlansRequest_PlanDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssignPresetStudyPlansRequest_PlanDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignPresetStudyPlansRequest_PlanDetail.Merge(m, src)
}
func (m *AssignPresetStudyPlansRequest_PlanDetail) XXX_Size() int {
	return m.Size()
}
func (m *AssignPresetStudyPlansRequest_PlanDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignPresetStudyPlansRequest_PlanDetail.DiscardUnknown(m)
}

var xxx_messageInfo_AssignPresetStudyPlansRequest_PlanDetail proto.InternalMessageInfo

func (m *AssignPresetStudyPlansRequest_PlanDetail) GetPresetStudyPlanId() string {
	if m != nil {
		return m.PresetStudyPlanId
	}
	return ""
}

func (m *AssignPresetStudyPlansRequest_PlanDetail) GetStartWeek() int32 {
	if m != nil {
		return m.StartWeek
	}
	return 0
}

func (m *AssignPresetStudyPlansRequest_PlanDetail) GetStartDate() *types.Timestamp {
	if m != nil {
		return m.StartDate
	}
	return nil
}

type AssignPresetStudyPlansResponse struct {
	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (m *AssignPresetStudyPlansResponse) Reset()      { *m = AssignPresetStudyPlansResponse{} }
func (*AssignPresetStudyPlansResponse) ProtoMessage() {}
func (*AssignPresetStudyPlansResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{18}
}
func (m *AssignPresetStudyPlansResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssignPresetStudyPlansResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssignPresetStudyPlansResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssignPresetStudyPlansResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignPresetStudyPlansResponse.Merge(m, src)
}
func (m *AssignPresetStudyPlansResponse) XXX_Size() int {
	return m.Size()
}
func (m *AssignPresetStudyPlansResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignPresetStudyPlansResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AssignPresetStudyPlansResponse proto.InternalMessageInfo

func (m *AssignPresetStudyPlansResponse) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

type RetrieveStudentStudyPlansRequest struct {
	StudentId string           `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	From      *types.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To        *types.Timestamp `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *RetrieveStudentStudyPlansRequest) Reset()      { *m = RetrieveStudentStudyPlansRequest{} }
func (*RetrieveStudentStudyPlansRequest) ProtoMessage() {}
func (*RetrieveStudentStudyPlansRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{19}
}
func (m *RetrieveStudentStudyPlansRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveStudentStudyPlansRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveStudentStudyPlansRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveStudentStudyPlansRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveStudentStudyPlansRequest.Merge(m, src)
}
func (m *RetrieveStudentStudyPlansRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveStudentStudyPlansRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveStudentStudyPlansRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveStudentStudyPlansRequest proto.InternalMessageInfo

func (m *RetrieveStudentStudyPlansRequest) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *RetrieveStudentStudyPlansRequest) GetFrom() *types.Timestamp {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *RetrieveStudentStudyPlansRequest) GetTo() *types.Timestamp {
	if m != nil {
		return m.To
	}
	return nil
}

type RetrieveStudentStudyPlansResponse struct {
	PlanWithStartDates []*RetrieveStudentStudyPlansResponse_PlanWithStartDate `protobuf:"bytes,1,rep,name=plan_with_start_dates,json=planWithStartDates,proto3" json:"plan_with_start_dates,omitempty"`
}

func (m *RetrieveStudentStudyPlansResponse) Reset()      { *m = RetrieveStudentStudyPlansResponse{} }
func (*RetrieveStudentStudyPlansResponse) ProtoMessage() {}
func (*RetrieveStudentStudyPlansResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{20}
}
func (m *RetrieveStudentStudyPlansResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveStudentStudyPlansResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveStudentStudyPlansResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveStudentStudyPlansResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveStudentStudyPlansResponse.Merge(m, src)
}
func (m *RetrieveStudentStudyPlansResponse) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveStudentStudyPlansResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveStudentStudyPlansResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveStudentStudyPlansResponse proto.InternalMessageInfo

func (m *RetrieveStudentStudyPlansResponse) GetPlanWithStartDates() []*RetrieveStudentStudyPlansResponse_PlanWithStartDate {
	if m != nil {
		return m.PlanWithStartDates
	}
	return nil
}

type RetrieveStudentStudyPlansResponse_PlanWithStartDate struct {
	Plan      *PresetStudyPlan `protobuf:"bytes,1,opt,name=plan,proto3" json:"plan,omitempty"`
	Week      int32            `protobuf:"varint,2,opt,name=week,proto3" json:"week,omitempty"`
	StartDate *types.Timestamp `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
}

func (m *RetrieveStudentStudyPlansResponse_PlanWithStartDate) Reset() {
	*m = RetrieveStudentStudyPlansResponse_PlanWithStartDate{}
}
func (*RetrieveStudentStudyPlansResponse_PlanWithStartDate) ProtoMessage() {}
func (*RetrieveStudentStudyPlansResponse_PlanWithStartDate) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{20, 0}
}
func (m *RetrieveStudentStudyPlansResponse_PlanWithStartDate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveStudentStudyPlansResponse_PlanWithStartDate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveStudentStudyPlansResponse_PlanWithStartDate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveStudentStudyPlansResponse_PlanWithStartDate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveStudentStudyPlansResponse_PlanWithStartDate.Merge(m, src)
}
func (m *RetrieveStudentStudyPlansResponse_PlanWithStartDate) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveStudentStudyPlansResponse_PlanWithStartDate) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveStudentStudyPlansResponse_PlanWithStartDate.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveStudentStudyPlansResponse_PlanWithStartDate proto.InternalMessageInfo

func (m *RetrieveStudentStudyPlansResponse_PlanWithStartDate) GetPlan() *PresetStudyPlan {
	if m != nil {
		return m.Plan
	}
	return nil
}

func (m *RetrieveStudentStudyPlansResponse_PlanWithStartDate) GetWeek() int32 {
	if m != nil {
		return m.Week
	}
	return 0
}

func (m *RetrieveStudentStudyPlansResponse_PlanWithStartDate) GetStartDate() *types.Timestamp {
	if m != nil {
		return m.StartDate
	}
	return nil
}

type RetrieveStudentStudyPlanWeekliesRequest struct {
	StudentId   string           `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	From        *types.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To          *types.Timestamp `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	RetrieveAll bool             `protobuf:"varint,4,opt,name=retrieve_all,json=retrieveAll,proto3" json:"retrieve_all,omitempty"`
}

func (m *RetrieveStudentStudyPlanWeekliesRequest) Reset() {
	*m = RetrieveStudentStudyPlanWeekliesRequest{}
}
func (*RetrieveStudentStudyPlanWeekliesRequest) ProtoMessage() {}
func (*RetrieveStudentStudyPlanWeekliesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{21}
}
func (m *RetrieveStudentStudyPlanWeekliesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveStudentStudyPlanWeekliesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveStudentStudyPlanWeekliesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveStudentStudyPlanWeekliesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveStudentStudyPlanWeekliesRequest.Merge(m, src)
}
func (m *RetrieveStudentStudyPlanWeekliesRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveStudentStudyPlanWeekliesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveStudentStudyPlanWeekliesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveStudentStudyPlanWeekliesRequest proto.InternalMessageInfo

func (m *RetrieveStudentStudyPlanWeekliesRequest) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *RetrieveStudentStudyPlanWeekliesRequest) GetFrom() *types.Timestamp {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *RetrieveStudentStudyPlanWeekliesRequest) GetTo() *types.Timestamp {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *RetrieveStudentStudyPlanWeekliesRequest) GetRetrieveAll() bool {
	if m != nil {
		return m.RetrieveAll
	}
	return false
}

type RetrieveStudentStudyPlanWeekliesResponse struct {
	TopicWithStartDates []*RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate `protobuf:"bytes,1,rep,name=topic_with_start_dates,json=topicWithStartDates,proto3" json:"topic_with_start_dates,omitempty"`
}

func (m *RetrieveStudentStudyPlanWeekliesResponse) Reset() {
	*m = RetrieveStudentStudyPlanWeekliesResponse{}
}
func (*RetrieveStudentStudyPlanWeekliesResponse) ProtoMessage() {}
func (*RetrieveStudentStudyPlanWeekliesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{22}
}
func (m *RetrieveStudentStudyPlanWeekliesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveStudentStudyPlanWeekliesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveStudentStudyPlanWeekliesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveStudentStudyPlanWeekliesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveStudentStudyPlanWeekliesResponse.Merge(m, src)
}
func (m *RetrieveStudentStudyPlanWeekliesResponse) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveStudentStudyPlanWeekliesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveStudentStudyPlanWeekliesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveStudentStudyPlanWeekliesResponse proto.InternalMessageInfo

func (m *RetrieveStudentStudyPlanWeekliesResponse) GetTopicWithStartDates() []*RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate {
	if m != nil {
		return m.TopicWithStartDates
	}
	return nil
}

type RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate struct {
	TopicId          string           `protobuf:"bytes,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	TopicName        string           `protobuf:"bytes,2,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty"`
	StartDate        *types.Timestamp `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	TotalLos         int32            `protobuf:"varint,4,opt,name=total_los,json=totalLos,proto3" json:"total_los,omitempty"`
	TotalFinishedLos int32            `protobuf:"varint,5,opt,name=total_finished_los,json=totalFinishedLos,proto3" json:"total_finished_los,omitempty"`
	AssignedBy       *BasicProfile    `protobuf:"bytes,6,opt,name=assigned_by,json=assignedBy,proto3" json:"assigned_by,omitempty"`
	EndDate          *types.Timestamp `protobuf:"bytes,7,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
}

func (m *RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate) Reset() {
	*m = RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate{}
}
func (*RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate) ProtoMessage() {}
func (*RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{22, 0}
}
func (m *RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate.Merge(m, src)
}
func (m *RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate proto.InternalMessageInfo

func (m *RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

func (m *RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate) GetTopicName() string {
	if m != nil {
		return m.TopicName
	}
	return ""
}

func (m *RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate) GetStartDate() *types.Timestamp {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate) GetTotalLos() int32 {
	if m != nil {
		return m.TotalLos
	}
	return 0
}

func (m *RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate) GetTotalFinishedLos() int32 {
	if m != nil {
		return m.TotalFinishedLos
	}
	return 0
}

func (m *RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate) GetAssignedBy() *BasicProfile {
	if m != nil {
		return m.AssignedBy
	}
	return nil
}

func (m *RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate) GetEndDate() *types.Timestamp {
	if m != nil {
		return m.EndDate
	}
	return nil
}

type StudentStat struct {
	TotalLearningTime int32            `protobuf:"varint,1,opt,name=total_learning_time,json=totalLearningTime,proto3" json:"total_learning_time,omitempty"`
	TotalLoFinished   int32            `protobuf:"varint,2,opt,name=total_lo_finished,json=totalLoFinished,proto3" json:"total_lo_finished,omitempty"`
	TotalLo           int32            `protobuf:"varint,3,opt,name=total_lo,json=totalLo,proto3" json:"total_lo,omitempty"`
	Crowns            map[string]int32 `protobuf:"bytes,4,rep,name=crowns,proto3" json:"crowns,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *StudentStat) Reset()      { *m = StudentStat{} }
func (*StudentStat) ProtoMessage() {}
func (*StudentStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{23}
}
func (m *StudentStat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StudentStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StudentStat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StudentStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudentStat.Merge(m, src)
}
func (m *StudentStat) XXX_Size() int {
	return m.Size()
}
func (m *StudentStat) XXX_DiscardUnknown() {
	xxx_messageInfo_StudentStat.DiscardUnknown(m)
}

var xxx_messageInfo_StudentStat proto.InternalMessageInfo

func (m *StudentStat) GetTotalLearningTime() int32 {
	if m != nil {
		return m.TotalLearningTime
	}
	return 0
}

func (m *StudentStat) GetTotalLoFinished() int32 {
	if m != nil {
		return m.TotalLoFinished
	}
	return 0
}

func (m *StudentStat) GetTotalLo() int32 {
	if m != nil {
		return m.TotalLo
	}
	return 0
}

func (m *StudentStat) GetCrowns() map[string]int32 {
	if m != nil {
		return m.Crowns
	}
	return nil
}

type FindStudentRequest struct {
	Phone string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (m *FindStudentRequest) Reset()      { *m = FindStudentRequest{} }
func (*FindStudentRequest) ProtoMessage() {}
func (*FindStudentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{24}
}
func (m *FindStudentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindStudentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindStudentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindStudentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindStudentRequest.Merge(m, src)
}
func (m *FindStudentRequest) XXX_Size() int {
	return m.Size()
}
func (m *FindStudentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindStudentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindStudentRequest proto.InternalMessageInfo

func (m *FindStudentRequest) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

type FindStudentResponse struct {
	Profile *StudentProfile `protobuf:"bytes,1,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (m *FindStudentResponse) Reset()      { *m = FindStudentResponse{} }
func (*FindStudentResponse) ProtoMessage() {}
func (*FindStudentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{25}
}
func (m *FindStudentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindStudentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindStudentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindStudentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindStudentResponse.Merge(m, src)
}
func (m *FindStudentResponse) XXX_Size() int {
	return m.Size()
}
func (m *FindStudentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindStudentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindStudentResponse proto.InternalMessageInfo

func (m *FindStudentResponse) GetProfile() *StudentProfile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type UpsertStudentCommentRequest struct {
	StudentComment *StudentComment `protobuf:"bytes,1,opt,name=student_comment,json=studentComment,proto3" json:"student_comment,omitempty"`
}

func (m *UpsertStudentCommentRequest) Reset()      { *m = UpsertStudentCommentRequest{} }
func (*UpsertStudentCommentRequest) ProtoMessage() {}
func (*UpsertStudentCommentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{26}
}
func (m *UpsertStudentCommentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertStudentCommentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertStudentCommentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertStudentCommentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertStudentCommentRequest.Merge(m, src)
}
func (m *UpsertStudentCommentRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpsertStudentCommentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertStudentCommentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertStudentCommentRequest proto.InternalMessageInfo

func (m *UpsertStudentCommentRequest) GetStudentComment() *StudentComment {
	if m != nil {
		return m.StudentComment
	}
	return nil
}

type UpsertStudentCommentResponse struct {
	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (m *UpsertStudentCommentResponse) Reset()      { *m = UpsertStudentCommentResponse{} }
func (*UpsertStudentCommentResponse) ProtoMessage() {}
func (*UpsertStudentCommentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{27}
}
func (m *UpsertStudentCommentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertStudentCommentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertStudentCommentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertStudentCommentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertStudentCommentResponse.Merge(m, src)
}
func (m *UpsertStudentCommentResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpsertStudentCommentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertStudentCommentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertStudentCommentResponse proto.InternalMessageInfo

func (m *UpsertStudentCommentResponse) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

type RetrieveStudentCommentRequest struct {
	StudentId string `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
}

func (m *RetrieveStudentCommentRequest) Reset()      { *m = RetrieveStudentCommentRequest{} }
func (*RetrieveStudentCommentRequest) ProtoMessage() {}
func (*RetrieveStudentCommentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{28}
}
func (m *RetrieveStudentCommentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveStudentCommentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveStudentCommentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveStudentCommentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveStudentCommentRequest.Merge(m, src)
}
func (m *RetrieveStudentCommentRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveStudentCommentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveStudentCommentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveStudentCommentRequest proto.InternalMessageInfo

func (m *RetrieveStudentCommentRequest) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

type CommentInfo struct {
	CoachName      string          `protobuf:"bytes,1,opt,name=coach_name,json=coachName,proto3" json:"coach_name,omitempty"` // Deprecated: Do not use.
	StudentComment *StudentComment `protobuf:"bytes,2,opt,name=student_comment,json=studentComment,proto3" json:"student_comment,omitempty"`
}

func (m *CommentInfo) Reset()      { *m = CommentInfo{} }
func (*CommentInfo) ProtoMessage() {}
func (*CommentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{29}
}
func (m *CommentInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommentInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentInfo.Merge(m, src)
}
func (m *CommentInfo) XXX_Size() int {
	return m.Size()
}
func (m *CommentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CommentInfo proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *CommentInfo) GetCoachName() string {
	if m != nil {
		return m.CoachName
	}
	return ""
}

func (m *CommentInfo) GetStudentComment() *StudentComment {
	if m != nil {
		return m.StudentComment
	}
	return nil
}

type RetrieveStudentCommentResponse struct {
	Comment []*CommentInfo `protobuf:"bytes,1,rep,name=comment,proto3" json:"comment,omitempty"`
}

func (m *RetrieveStudentCommentResponse) Reset()      { *m = RetrieveStudentCommentResponse{} }
func (*RetrieveStudentCommentResponse) ProtoMessage() {}
func (*RetrieveStudentCommentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{30}
}
func (m *RetrieveStudentCommentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveStudentCommentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveStudentCommentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveStudentCommentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveStudentCommentResponse.Merge(m, src)
}
func (m *RetrieveStudentCommentResponse) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveStudentCommentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveStudentCommentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveStudentCommentResponse proto.InternalMessageInfo

func (m *RetrieveStudentCommentResponse) GetComment() []*CommentInfo {
	if m != nil {
		return m.Comment
	}
	return nil
}

type RetrieveDailyLOFinishedRequest struct {
	StudentId string           `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	From      *types.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To        *types.Timestamp `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *RetrieveDailyLOFinishedRequest) Reset()      { *m = RetrieveDailyLOFinishedRequest{} }
func (*RetrieveDailyLOFinishedRequest) ProtoMessage() {}
func (*RetrieveDailyLOFinishedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{31}
}
func (m *RetrieveDailyLOFinishedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveDailyLOFinishedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveDailyLOFinishedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveDailyLOFinishedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveDailyLOFinishedRequest.Merge(m, src)
}
func (m *RetrieveDailyLOFinishedRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveDailyLOFinishedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveDailyLOFinishedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveDailyLOFinishedRequest proto.InternalMessageInfo

func (m *RetrieveDailyLOFinishedRequest) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *RetrieveDailyLOFinishedRequest) GetFrom() *types.Timestamp {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *RetrieveDailyLOFinishedRequest) GetTo() *types.Timestamp {
	if m != nil {
		return m.To
	}
	return nil
}

type RetrieveDailyLOFinishedResponse struct {
	TotalLo int32                                              `protobuf:"varint,1,opt,name=total_lo,json=totalLo,proto3" json:"total_lo,omitempty"`
	Dailies []*RetrieveDailyLOFinishedResponse_DailyLOFinished `protobuf:"bytes,2,rep,name=dailies,proto3" json:"dailies,omitempty"`
}

func (m *RetrieveDailyLOFinishedResponse) Reset()      { *m = RetrieveDailyLOFinishedResponse{} }
func (*RetrieveDailyLOFinishedResponse) ProtoMessage() {}
func (*RetrieveDailyLOFinishedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{32}
}
func (m *RetrieveDailyLOFinishedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveDailyLOFinishedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveDailyLOFinishedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveDailyLOFinishedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveDailyLOFinishedResponse.Merge(m, src)
}
func (m *RetrieveDailyLOFinishedResponse) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveDailyLOFinishedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveDailyLOFinishedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveDailyLOFinishedResponse proto.InternalMessageInfo

func (m *RetrieveDailyLOFinishedResponse) GetTotalLo() int32 {
	if m != nil {
		return m.TotalLo
	}
	return 0
}

func (m *RetrieveDailyLOFinishedResponse) GetDailies() []*RetrieveDailyLOFinishedResponse_DailyLOFinished {
	if m != nil {
		return m.Dailies
	}
	return nil
}

type RetrieveDailyLOFinishedResponse_DailyLOFinished struct {
	TotalLoFinished int32            `protobuf:"varint,1,opt,name=total_lo_finished,json=totalLoFinished,proto3" json:"total_lo_finished,omitempty"`
	Day             *types.Timestamp `protobuf:"bytes,2,opt,name=day,proto3" json:"day,omitempty"`
}

func (m *RetrieveDailyLOFinishedResponse_DailyLOFinished) Reset() {
	*m = RetrieveDailyLOFinishedResponse_DailyLOFinished{}
}
func (*RetrieveDailyLOFinishedResponse_DailyLOFinished) ProtoMessage() {}
func (*RetrieveDailyLOFinishedResponse_DailyLOFinished) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{32, 0}
}
func (m *RetrieveDailyLOFinishedResponse_DailyLOFinished) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveDailyLOFinishedResponse_DailyLOFinished) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveDailyLOFinishedResponse_DailyLOFinished.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveDailyLOFinishedResponse_DailyLOFinished) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveDailyLOFinishedResponse_DailyLOFinished.Merge(m, src)
}
func (m *RetrieveDailyLOFinishedResponse_DailyLOFinished) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveDailyLOFinishedResponse_DailyLOFinished) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveDailyLOFinishedResponse_DailyLOFinished.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveDailyLOFinishedResponse_DailyLOFinished proto.InternalMessageInfo

func (m *RetrieveDailyLOFinishedResponse_DailyLOFinished) GetTotalLoFinished() int32 {
	if m != nil {
		return m.TotalLoFinished
	}
	return 0
}

func (m *RetrieveDailyLOFinishedResponse_DailyLOFinished) GetDay() *types.Timestamp {
	if m != nil {
		return m.Day
	}
	return nil
}

type StudyAheadTopic struct {
	TopicId string `protobuf:"bytes,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Week    int32  `protobuf:"varint,2,opt,name=week,proto3" json:"week,omitempty"`
}

func (m *StudyAheadTopic) Reset()      { *m = StudyAheadTopic{} }
func (*StudyAheadTopic) ProtoMessage() {}
func (*StudyAheadTopic) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{33}
}
func (m *StudyAheadTopic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StudyAheadTopic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StudyAheadTopic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StudyAheadTopic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudyAheadTopic.Merge(m, src)
}
func (m *StudyAheadTopic) XXX_Size() int {
	return m.Size()
}
func (m *StudyAheadTopic) XXX_DiscardUnknown() {
	xxx_messageInfo_StudyAheadTopic.DiscardUnknown(m)
}

var xxx_messageInfo_StudyAheadTopic proto.InternalMessageInfo

func (m *StudyAheadTopic) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

func (m *StudyAheadTopic) GetWeek() int32 {
	if m != nil {
		return m.Week
	}
	return 0
}

type RetrieveStudyAheadTopicsRequest struct {
	StudentId string `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
}

func (m *RetrieveStudyAheadTopicsRequest) Reset()      { *m = RetrieveStudyAheadTopicsRequest{} }
func (*RetrieveStudyAheadTopicsRequest) ProtoMessage() {}
func (*RetrieveStudyAheadTopicsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{34}
}
func (m *RetrieveStudyAheadTopicsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveStudyAheadTopicsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveStudyAheadTopicsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveStudyAheadTopicsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveStudyAheadTopicsRequest.Merge(m, src)
}
func (m *RetrieveStudyAheadTopicsRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveStudyAheadTopicsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveStudyAheadTopicsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveStudyAheadTopicsRequest proto.InternalMessageInfo

func (m *RetrieveStudyAheadTopicsRequest) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

type RetrieveStudyAheadTopicsResponse struct {
	StudyAheadTopics []*StudyAheadTopic `protobuf:"bytes,1,rep,name=study_ahead_topics,json=studyAheadTopics,proto3" json:"study_ahead_topics,omitempty"`
}

func (m *RetrieveStudyAheadTopicsResponse) Reset()      { *m = RetrieveStudyAheadTopicsResponse{} }
func (*RetrieveStudyAheadTopicsResponse) ProtoMessage() {}
func (*RetrieveStudyAheadTopicsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{35}
}
func (m *RetrieveStudyAheadTopicsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveStudyAheadTopicsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveStudyAheadTopicsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveStudyAheadTopicsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveStudyAheadTopicsResponse.Merge(m, src)
}
func (m *RetrieveStudyAheadTopicsResponse) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveStudyAheadTopicsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveStudyAheadTopicsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveStudyAheadTopicsResponse proto.InternalMessageInfo

func (m *RetrieveStudyAheadTopicsResponse) GetStudyAheadTopics() []*StudyAheadTopic {
	if m != nil {
		return m.StudyAheadTopics
	}
	return nil
}

type CountTotalLOsFinishedRequest struct {
	StudentId string           `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	From      *types.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To        *types.Timestamp `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *CountTotalLOsFinishedRequest) Reset()      { *m = CountTotalLOsFinishedRequest{} }
func (*CountTotalLOsFinishedRequest) ProtoMessage() {}
func (*CountTotalLOsFinishedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{36}
}
func (m *CountTotalLOsFinishedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountTotalLOsFinishedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountTotalLOsFinishedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountTotalLOsFinishedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountTotalLOsFinishedRequest.Merge(m, src)
}
func (m *CountTotalLOsFinishedRequest) XXX_Size() int {
	return m.Size()
}
func (m *CountTotalLOsFinishedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CountTotalLOsFinishedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CountTotalLOsFinishedRequest proto.InternalMessageInfo

func (m *CountTotalLOsFinishedRequest) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *CountTotalLOsFinishedRequest) GetFrom() *types.Timestamp {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *CountTotalLOsFinishedRequest) GetTo() *types.Timestamp {
	if m != nil {
		return m.To
	}
	return nil
}

type CountTotalLOsFinishedResponse struct {
	TotalLosFinished int32 `protobuf:"varint,1,opt,name=total_los_finished,json=totalLosFinished,proto3" json:"total_los_finished,omitempty"`
}

func (m *CountTotalLOsFinishedResponse) Reset()      { *m = CountTotalLOsFinishedResponse{} }
func (*CountTotalLOsFinishedResponse) ProtoMessage() {}
func (*CountTotalLOsFinishedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{37}
}
func (m *CountTotalLOsFinishedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CountTotalLOsFinishedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CountTotalLOsFinishedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CountTotalLOsFinishedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountTotalLOsFinishedResponse.Merge(m, src)
}
func (m *CountTotalLOsFinishedResponse) XXX_Size() int {
	return m.Size()
}
func (m *CountTotalLOsFinishedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CountTotalLOsFinishedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CountTotalLOsFinishedResponse proto.InternalMessageInfo

func (m *CountTotalLOsFinishedResponse) GetTotalLosFinished() int32 {
	if m != nil {
		return m.TotalLosFinished
	}
	return 0
}

type RetrieveArchivedTopicsRequest struct {
	StudentId string `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
}

func (m *RetrieveArchivedTopicsRequest) Reset()      { *m = RetrieveArchivedTopicsRequest{} }
func (*RetrieveArchivedTopicsRequest) ProtoMessage() {}
func (*RetrieveArchivedTopicsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{38}
}
func (m *RetrieveArchivedTopicsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveArchivedTopicsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveArchivedTopicsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveArchivedTopicsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveArchivedTopicsRequest.Merge(m, src)
}
func (m *RetrieveArchivedTopicsRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveArchivedTopicsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveArchivedTopicsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveArchivedTopicsRequest proto.InternalMessageInfo

func (m *RetrieveArchivedTopicsRequest) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

type ArchivedTopic struct {
	TopicId string               `protobuf:"bytes,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Status  ArchivedTopic_Status `protobuf:"varint,2,opt,name=status,proto3,enum=manabie.bob.ArchivedTopic_Status" json:"status,omitempty"`
}

func (m *ArchivedTopic) Reset()      { *m = ArchivedTopic{} }
func (*ArchivedTopic) ProtoMessage() {}
func (*ArchivedTopic) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{39}
}
func (m *ArchivedTopic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArchivedTopic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArchivedTopic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArchivedTopic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArchivedTopic.Merge(m, src)
}
func (m *ArchivedTopic) XXX_Size() int {
	return m.Size()
}
func (m *ArchivedTopic) XXX_DiscardUnknown() {
	xxx_messageInfo_ArchivedTopic.DiscardUnknown(m)
}

var xxx_messageInfo_ArchivedTopic proto.InternalMessageInfo

func (m *ArchivedTopic) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

func (m *ArchivedTopic) GetStatus() ArchivedTopic_Status {
	if m != nil {
		return m.Status
	}
	return ARCHIVED_STATUS_COMPLETED
}

type RetrieveArchivedTopicsResponse struct {
	Topics []*ArchivedTopic `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
}

func (m *RetrieveArchivedTopicsResponse) Reset()      { *m = RetrieveArchivedTopicsResponse{} }
func (*RetrieveArchivedTopicsResponse) ProtoMessage() {}
func (*RetrieveArchivedTopicsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{40}
}
func (m *RetrieveArchivedTopicsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveArchivedTopicsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveArchivedTopicsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveArchivedTopicsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveArchivedTopicsResponse.Merge(m, src)
}
func (m *RetrieveArchivedTopicsResponse) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveArchivedTopicsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveArchivedTopicsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveArchivedTopicsResponse proto.InternalMessageInfo

func (m *RetrieveArchivedTopicsResponse) GetTopics() []*ArchivedTopic {
	if m != nil {
		return m.Topics
	}
	return nil
}

type StudentPermissionRequest struct {
}

func (m *StudentPermissionRequest) Reset()      { *m = StudentPermissionRequest{} }
func (*StudentPermissionRequest) ProtoMessage() {}
func (*StudentPermissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{41}
}
func (m *StudentPermissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StudentPermissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StudentPermissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StudentPermissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudentPermissionRequest.Merge(m, src)
}
func (m *StudentPermissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *StudentPermissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StudentPermissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StudentPermissionRequest proto.InternalMessageInfo

type PermissionAllowGrade struct {
	Subject        Subject         `protobuf:"varint,1,opt,name=subject,proto3,enum=manabie.bob.Subject" json:"subject,omitempty"`
	PlanPrivileges []PlanPrivilege `protobuf:"varint,2,rep,packed,name=plan_privileges,json=planPrivileges,proto3,enum=manabie.bob.PlanPrivilege" json:"plan_privileges,omitempty"`
}

func (m *PermissionAllowGrade) Reset()      { *m = PermissionAllowGrade{} }
func (*PermissionAllowGrade) ProtoMessage() {}
func (*PermissionAllowGrade) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{42}
}
func (m *PermissionAllowGrade) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PermissionAllowGrade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PermissionAllowGrade.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PermissionAllowGrade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PermissionAllowGrade.Merge(m, src)
}
func (m *PermissionAllowGrade) XXX_Size() int {
	return m.Size()
}
func (m *PermissionAllowGrade) XXX_DiscardUnknown() {
	xxx_messageInfo_PermissionAllowGrade.DiscardUnknown(m)
}

var xxx_messageInfo_PermissionAllowGrade proto.InternalMessageInfo

func (m *PermissionAllowGrade) GetSubject() Subject {
	if m != nil {
		return m.Subject
	}
	return SUBJECT_NONE
}

func (m *PermissionAllowGrade) GetPlanPrivileges() []PlanPrivilege {
	if m != nil {
		return m.PlanPrivileges
	}
	return nil
}

type Permission struct {
	PermissionAllowGrades []*PermissionAllowGrade `protobuf:"bytes,1,rep,name=permissionAllowGrades,proto3" json:"permissionAllowGrades,omitempty"`
}

func (m *Permission) Reset()      { *m = Permission{} }
func (*Permission) ProtoMessage() {}
func (*Permission) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{43}
}
func (m *Permission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Permission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Permission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Permission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Permission.Merge(m, src)
}
func (m *Permission) XXX_Size() int {
	return m.Size()
}
func (m *Permission) XXX_DiscardUnknown() {
	xxx_messageInfo_Permission.DiscardUnknown(m)
}

var xxx_messageInfo_Permission proto.InternalMessageInfo

func (m *Permission) GetPermissionAllowGrades() []*PermissionAllowGrade {
	if m != nil {
		return m.PermissionAllowGrades
	}
	return nil
}

type StudentPermissionResponse struct {
	Permissions map[int32]*Permission `protobuf:"bytes,1,rep,name=permissions,proto3" json:"permissions,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *StudentPermissionResponse) Reset()      { *m = StudentPermissionResponse{} }
func (*StudentPermissionResponse) ProtoMessage() {}
func (*StudentPermissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{44}
}
func (m *StudentPermissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StudentPermissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StudentPermissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StudentPermissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudentPermissionResponse.Merge(m, src)
}
func (m *StudentPermissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *StudentPermissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StudentPermissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StudentPermissionResponse proto.InternalMessageInfo

func (m *StudentPermissionResponse) GetPermissions() map[int32]*Permission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type TopicOverdue struct {
	Topic      *Topic           `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	DueDate    *types.Timestamp `protobuf:"bytes,2,opt,name=due_date,json=dueDate,proto3" json:"due_date,omitempty"`
	AssignedBy *BasicProfile    `protobuf:"bytes,3,opt,name=assigned_by,json=assignedBy,proto3" json:"assigned_by,omitempty"`
}

func (m *TopicOverdue) Reset()      { *m = TopicOverdue{} }
func (*TopicOverdue) ProtoMessage() {}
func (*TopicOverdue) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{45}
}
func (m *TopicOverdue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TopicOverdue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TopicOverdue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TopicOverdue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopicOverdue.Merge(m, src)
}
func (m *TopicOverdue) XXX_Size() int {
	return m.Size()
}
func (m *TopicOverdue) XXX_DiscardUnknown() {
	xxx_messageInfo_TopicOverdue.DiscardUnknown(m)
}

var xxx_messageInfo_TopicOverdue proto.InternalMessageInfo

func (m *TopicOverdue) GetTopic() *Topic {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *TopicOverdue) GetDueDate() *types.Timestamp {
	if m != nil {
		return m.DueDate
	}
	return nil
}

func (m *TopicOverdue) GetAssignedBy() *BasicProfile {
	if m != nil {
		return m.AssignedBy
	}
	return nil
}

type RetrieveOverdueTopicRequest struct {
	StudentId string `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
}

func (m *RetrieveOverdueTopicRequest) Reset()      { *m = RetrieveOverdueTopicRequest{} }
func (*RetrieveOverdueTopicRequest) ProtoMessage() {}
func (*RetrieveOverdueTopicRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{46}
}
func (m *RetrieveOverdueTopicRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveOverdueTopicRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveOverdueTopicRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveOverdueTopicRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveOverdueTopicRequest.Merge(m, src)
}
func (m *RetrieveOverdueTopicRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveOverdueTopicRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveOverdueTopicRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveOverdueTopicRequest proto.InternalMessageInfo

func (m *RetrieveOverdueTopicRequest) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

type RetrieveOverdueTopicResponse struct {
	Topics []*TopicOverdue `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
}

func (m *RetrieveOverdueTopicResponse) Reset()      { *m = RetrieveOverdueTopicResponse{} }
func (*RetrieveOverdueTopicResponse) ProtoMessage() {}
func (*RetrieveOverdueTopicResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{47}
}
func (m *RetrieveOverdueTopicResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveOverdueTopicResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveOverdueTopicResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveOverdueTopicResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveOverdueTopicResponse.Merge(m, src)
}
func (m *RetrieveOverdueTopicResponse) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveOverdueTopicResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveOverdueTopicResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveOverdueTopicResponse proto.InternalMessageInfo

func (m *RetrieveOverdueTopicResponse) GetTopics() []*TopicOverdue {
	if m != nil {
		return m.Topics
	}
	return nil
}

type RetrieveCompletedTopicWeekliesRequest struct {
	StudentId string           `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	From      *types.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To        *types.Timestamp `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *RetrieveCompletedTopicWeekliesRequest) Reset()      { *m = RetrieveCompletedTopicWeekliesRequest{} }
func (*RetrieveCompletedTopicWeekliesRequest) ProtoMessage() {}
func (*RetrieveCompletedTopicWeekliesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{48}
}
func (m *RetrieveCompletedTopicWeekliesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveCompletedTopicWeekliesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveCompletedTopicWeekliesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveCompletedTopicWeekliesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveCompletedTopicWeekliesRequest.Merge(m, src)
}
func (m *RetrieveCompletedTopicWeekliesRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveCompletedTopicWeekliesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveCompletedTopicWeekliesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveCompletedTopicWeekliesRequest proto.InternalMessageInfo

func (m *RetrieveCompletedTopicWeekliesRequest) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *RetrieveCompletedTopicWeekliesRequest) GetFrom() *types.Timestamp {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *RetrieveCompletedTopicWeekliesRequest) GetTo() *types.Timestamp {
	if m != nil {
		return m.To
	}
	return nil
}

type RetrieveCompletedTopicWeekliesResponse struct {
	Topics             []*Topic                                                    `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"` // Deprecated: Do not use.
	TopicsWithAssignBy []*RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy `protobuf:"bytes,2,rep,name=topics_with_assign_by,json=topicsWithAssignBy,proto3" json:"topics_with_assign_by,omitempty"`
}

func (m *RetrieveCompletedTopicWeekliesResponse) Reset() {
	*m = RetrieveCompletedTopicWeekliesResponse{}
}
func (*RetrieveCompletedTopicWeekliesResponse) ProtoMessage() {}
func (*RetrieveCompletedTopicWeekliesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{49}
}
func (m *RetrieveCompletedTopicWeekliesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveCompletedTopicWeekliesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveCompletedTopicWeekliesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveCompletedTopicWeekliesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveCompletedTopicWeekliesResponse.Merge(m, src)
}
func (m *RetrieveCompletedTopicWeekliesResponse) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveCompletedTopicWeekliesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveCompletedTopicWeekliesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveCompletedTopicWeekliesResponse proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *RetrieveCompletedTopicWeekliesResponse) GetTopics() []*Topic {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *RetrieveCompletedTopicWeekliesResponse) GetTopicsWithAssignBy() []*RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy {
	if m != nil {
		return m.TopicsWithAssignBy
	}
	return nil
}

type RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy struct {
	Topics      *Topic           `protobuf:"bytes,1,opt,name=topics,proto3" json:"topics,omitempty"`
	AssignedBy  *BasicProfile    `protobuf:"bytes,2,opt,name=assigned_by,json=assignedBy,proto3" json:"assigned_by,omitempty"`
	CompletedAt *types.Timestamp `protobuf:"bytes,3,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
}

func (m *RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy) Reset() {
	*m = RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy{}
}
func (*RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy) ProtoMessage() {}
func (*RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{49, 0}
}
func (m *RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy.Merge(m, src)
}
func (m *RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy proto.InternalMessageInfo

func (m *RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy) GetTopics() *Topic {
	if m != nil {
		return m.Topics
	}
	return nil
}

func (m *RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy) GetAssignedBy() *BasicProfile {
	if m != nil {
		return m.AssignedBy
	}
	return nil
}

func (m *RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy) GetCompletedAt() *types.Timestamp {
	if m != nil {
		return m.CompletedAt
	}
	return nil
}

type SubmitAssignmentRequest struct {
	TopicId     string             `protobuf:"bytes,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Content     *types.StringValue `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Attachments []*Attachment      `protobuf:"bytes,3,rep,name=attachments,proto3" json:"attachments,omitempty"`
}

func (m *SubmitAssignmentRequest) Reset()      { *m = SubmitAssignmentRequest{} }
func (*SubmitAssignmentRequest) ProtoMessage() {}
func (*SubmitAssignmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{50}
}
func (m *SubmitAssignmentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitAssignmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitAssignmentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmitAssignmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitAssignmentRequest.Merge(m, src)
}
func (m *SubmitAssignmentRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubmitAssignmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitAssignmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitAssignmentRequest proto.InternalMessageInfo

func (m *SubmitAssignmentRequest) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

func (m *SubmitAssignmentRequest) GetContent() *types.StringValue {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *SubmitAssignmentRequest) GetAttachments() []*Attachment {
	if m != nil {
		return m.Attachments
	}
	return nil
}

type SubmitAssignmentResponse struct {
	SubmissionId string `protobuf:"bytes,1,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"`
}

func (m *SubmitAssignmentResponse) Reset()      { *m = SubmitAssignmentResponse{} }
func (*SubmitAssignmentResponse) ProtoMessage() {}
func (*SubmitAssignmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{51}
}
func (m *SubmitAssignmentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubmitAssignmentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubmitAssignmentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubmitAssignmentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitAssignmentResponse.Merge(m, src)
}
func (m *SubmitAssignmentResponse) XXX_Size() int {
	return m.Size()
}
func (m *SubmitAssignmentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitAssignmentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitAssignmentResponse proto.InternalMessageInfo

func (m *SubmitAssignmentResponse) GetSubmissionId() string {
	if m != nil {
		return m.SubmissionId
	}
	return ""
}

type ListStudentSubmissionsRequest struct {
	TopicId  string             `protobuf:"bytes,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Limit    int32              `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	OffsetId *types.StringValue `protobuf:"bytes,3,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
}

func (m *ListStudentSubmissionsRequest) Reset()      { *m = ListStudentSubmissionsRequest{} }
func (*ListStudentSubmissionsRequest) ProtoMessage() {}
func (*ListStudentSubmissionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_94a1c1b032ad0c00, []int{52}
}
func (m *ListStudentSubmissionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListStudentSubmissionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListStudentSubmissionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListStudentSubmissionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListStudentSubmissionsRequest.Merge(m, src)
}
func (m *ListStudentSubmissionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListStudentSubmissionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListStudentSubmissionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListStudentSubmissionsRequest proto.InternalMessageInfo

func (m *ListStudentSubmissionsRequest) GetTopicId() string {
	if m != nil {
		return m.TopicId
	}
	return ""
}

func (m *ListStudentSubmissionsRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListStudentSubmissionsRequest) GetOffsetId() *types.StringValue {
	if m != nil {
		return m.OffsetId
	}
	return nil
}

func init() {
	proto.RegisterEnum("manabie.bob.ArchivedTopic_Status", ArchivedTopic_Status_name, ArchivedTopic_Status_value)
	golang_proto.RegisterEnum("manabie.bob.ArchivedTopic_Status", ArchivedTopic_Status_name, ArchivedTopic_Status_value)
	proto.RegisterType((*RegisterRequest)(nil), "manabie.bob.RegisterRequest")
	golang_proto.RegisterType((*RegisterRequest)(nil), "manabie.bob.RegisterRequest")
	proto.RegisterType((*RegisterResponse)(nil), "manabie.bob.RegisterResponse")
	golang_proto.RegisterType((*RegisterResponse)(nil), "manabie.bob.RegisterResponse")
	proto.RegisterType((*GetStudentProfileRequest)(nil), "manabie.bob.GetStudentProfileRequest")
	golang_proto.RegisterType((*GetStudentProfileRequest)(nil), "manabie.bob.GetStudentProfileRequest")
	proto.RegisterType((*StudentProfile)(nil), "manabie.bob.StudentProfile")
	golang_proto.RegisterType((*StudentProfile)(nil), "manabie.bob.StudentProfile")
	proto.RegisterType((*GetStudentProfileResponse)(nil), "manabie.bob.GetStudentProfileResponse")
	golang_proto.RegisterType((*GetStudentProfileResponse)(nil), "manabie.bob.GetStudentProfileResponse")
	proto.RegisterType((*GetStudentProfileResponse_Data)(nil), "manabie.bob.GetStudentProfileResponse.Data")
	golang_proto.RegisterType((*GetStudentProfileResponse_Data)(nil), "manabie.bob.GetStudentProfileResponse.Data")
	proto.RegisterType((*UpdateProfileRequest)(nil), "manabie.bob.UpdateProfileRequest")
	golang_proto.RegisterType((*UpdateProfileRequest)(nil), "manabie.bob.UpdateProfileRequest")
	proto.RegisterType((*UpdateProfileResponse)(nil), "manabie.bob.UpdateProfileResponse")
	golang_proto.RegisterType((*UpdateProfileResponse)(nil), "manabie.bob.UpdateProfileResponse")
	proto.RegisterType((*RetrieveLearningProgressRequest)(nil), "manabie.bob.RetrieveLearningProgressRequest")
	golang_proto.RegisterType((*RetrieveLearningProgressRequest)(nil), "manabie.bob.RetrieveLearningProgressRequest")
	proto.RegisterType((*RetrieveLearningProgressResponse)(nil), "manabie.bob.RetrieveLearningProgressResponse")
	golang_proto.RegisterType((*RetrieveLearningProgressResponse)(nil), "manabie.bob.RetrieveLearningProgressResponse")
	proto.RegisterType((*RetrieveLearningProgressResponse_DailyLearningTime)(nil), "manabie.bob.RetrieveLearningProgressResponse.DailyLearningTime")
	golang_proto.RegisterType((*RetrieveLearningProgressResponse_DailyLearningTime)(nil), "manabie.bob.RetrieveLearningProgressResponse.DailyLearningTime")
	proto.RegisterType((*StudentEventLog)(nil), "manabie.bob.StudentEventLog")
	golang_proto.RegisterType((*StudentEventLog)(nil), "manabie.bob.StudentEventLog")
	proto.RegisterType((*StudentComment)(nil), "manabie.bob.StudentComment")
	golang_proto.RegisterType((*StudentComment)(nil), "manabie.bob.StudentComment")
	proto.RegisterType((*AssignToCoachRequest)(nil), "manabie.bob.AssignToCoachRequest")
	golang_proto.RegisterType((*AssignToCoachRequest)(nil), "manabie.bob.AssignToCoachRequest")
	proto.RegisterType((*AssignToCoachResponse)(nil), "manabie.bob.AssignToCoachResponse")
	golang_proto.RegisterType((*AssignToCoachResponse)(nil), "manabie.bob.AssignToCoachResponse")
	proto.RegisterType((*RetrievePresetStudyPlansRequest)(nil), "manabie.bob.RetrievePresetStudyPlansRequest")
	golang_proto.RegisterType((*RetrievePresetStudyPlansRequest)(nil), "manabie.bob.RetrievePresetStudyPlansRequest")
	proto.RegisterType((*RetrievePresetStudyPlansResponse)(nil), "manabie.bob.RetrievePresetStudyPlansResponse")
	golang_proto.RegisterType((*RetrievePresetStudyPlansResponse)(nil), "manabie.bob.RetrievePresetStudyPlansResponse")
	proto.RegisterType((*RetrievePresetStudyPlanWeekliesRequest)(nil), "manabie.bob.RetrievePresetStudyPlanWeekliesRequest")
	golang_proto.RegisterType((*RetrievePresetStudyPlanWeekliesRequest)(nil), "manabie.bob.RetrievePresetStudyPlanWeekliesRequest")
	proto.RegisterType((*RetrievePresetStudyPlanWeekliesResponse)(nil), "manabie.bob.RetrievePresetStudyPlanWeekliesResponse")
	golang_proto.RegisterType((*RetrievePresetStudyPlanWeekliesResponse)(nil), "manabie.bob.RetrievePresetStudyPlanWeekliesResponse")
	proto.RegisterType((*AssignPresetStudyPlansRequest)(nil), "manabie.bob.AssignPresetStudyPlansRequest")
	golang_proto.RegisterType((*AssignPresetStudyPlansRequest)(nil), "manabie.bob.AssignPresetStudyPlansRequest")
	proto.RegisterType((*AssignPresetStudyPlansRequest_PlanDetail)(nil), "manabie.bob.AssignPresetStudyPlansRequest.PlanDetail")
	golang_proto.RegisterType((*AssignPresetStudyPlansRequest_PlanDetail)(nil), "manabie.bob.AssignPresetStudyPlansRequest.PlanDetail")
	proto.RegisterType((*AssignPresetStudyPlansResponse)(nil), "manabie.bob.AssignPresetStudyPlansResponse")
	golang_proto.RegisterType((*AssignPresetStudyPlansResponse)(nil), "manabie.bob.AssignPresetStudyPlansResponse")
	proto.RegisterType((*RetrieveStudentStudyPlansRequest)(nil), "manabie.bob.RetrieveStudentStudyPlansRequest")
	golang_proto.RegisterType((*RetrieveStudentStudyPlansRequest)(nil), "manabie.bob.RetrieveStudentStudyPlansRequest")
	proto.RegisterType((*RetrieveStudentStudyPlansResponse)(nil), "manabie.bob.RetrieveStudentStudyPlansResponse")
	golang_proto.RegisterType((*RetrieveStudentStudyPlansResponse)(nil), "manabie.bob.RetrieveStudentStudyPlansResponse")
	proto.RegisterType((*RetrieveStudentStudyPlansResponse_PlanWithStartDate)(nil), "manabie.bob.RetrieveStudentStudyPlansResponse.PlanWithStartDate")
	golang_proto.RegisterType((*RetrieveStudentStudyPlansResponse_PlanWithStartDate)(nil), "manabie.bob.RetrieveStudentStudyPlansResponse.PlanWithStartDate")
	proto.RegisterType((*RetrieveStudentStudyPlanWeekliesRequest)(nil), "manabie.bob.RetrieveStudentStudyPlanWeekliesRequest")
	golang_proto.RegisterType((*RetrieveStudentStudyPlanWeekliesRequest)(nil), "manabie.bob.RetrieveStudentStudyPlanWeekliesRequest")
	proto.RegisterType((*RetrieveStudentStudyPlanWeekliesResponse)(nil), "manabie.bob.RetrieveStudentStudyPlanWeekliesResponse")
	golang_proto.RegisterType((*RetrieveStudentStudyPlanWeekliesResponse)(nil), "manabie.bob.RetrieveStudentStudyPlanWeekliesResponse")
	proto.RegisterType((*RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate)(nil), "manabie.bob.RetrieveStudentStudyPlanWeekliesResponse.TopicWithStartDate")
	golang_proto.RegisterType((*RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate)(nil), "manabie.bob.RetrieveStudentStudyPlanWeekliesResponse.TopicWithStartDate")
	proto.RegisterType((*StudentStat)(nil), "manabie.bob.StudentStat")
	golang_proto.RegisterType((*StudentStat)(nil), "manabie.bob.StudentStat")
	proto.RegisterMapType((map[string]int32)(nil), "manabie.bob.StudentStat.CrownsEntry")
	golang_proto.RegisterMapType((map[string]int32)(nil), "manabie.bob.StudentStat.CrownsEntry")
	proto.RegisterType((*FindStudentRequest)(nil), "manabie.bob.FindStudentRequest")
	golang_proto.RegisterType((*FindStudentRequest)(nil), "manabie.bob.FindStudentRequest")
	proto.RegisterType((*FindStudentResponse)(nil), "manabie.bob.FindStudentResponse")
	golang_proto.RegisterType((*FindStudentResponse)(nil), "manabie.bob.FindStudentResponse")
	proto.RegisterType((*UpsertStudentCommentRequest)(nil), "manabie.bob.UpsertStudentCommentRequest")
	golang_proto.RegisterType((*UpsertStudentCommentRequest)(nil), "manabie.bob.UpsertStudentCommentRequest")
	proto.RegisterType((*UpsertStudentCommentResponse)(nil), "manabie.bob.UpsertStudentCommentResponse")
	golang_proto.RegisterType((*UpsertStudentCommentResponse)(nil), "manabie.bob.UpsertStudentCommentResponse")
	proto.RegisterType((*RetrieveStudentCommentRequest)(nil), "manabie.bob.RetrieveStudentCommentRequest")
	golang_proto.RegisterType((*RetrieveStudentCommentRequest)(nil), "manabie.bob.RetrieveStudentCommentRequest")
	proto.RegisterType((*CommentInfo)(nil), "manabie.bob.CommentInfo")
	golang_proto.RegisterType((*CommentInfo)(nil), "manabie.bob.CommentInfo")
	proto.RegisterType((*RetrieveStudentCommentResponse)(nil), "manabie.bob.RetrieveStudentCommentResponse")
	golang_proto.RegisterType((*RetrieveStudentCommentResponse)(nil), "manabie.bob.RetrieveStudentCommentResponse")
	proto.RegisterType((*RetrieveDailyLOFinishedRequest)(nil), "manabie.bob.RetrieveDailyLOFinishedRequest")
	golang_proto.RegisterType((*RetrieveDailyLOFinishedRequest)(nil), "manabie.bob.RetrieveDailyLOFinishedRequest")
	proto.RegisterType((*RetrieveDailyLOFinishedResponse)(nil), "manabie.bob.RetrieveDailyLOFinishedResponse")
	golang_proto.RegisterType((*RetrieveDailyLOFinishedResponse)(nil), "manabie.bob.RetrieveDailyLOFinishedResponse")
	proto.RegisterType((*RetrieveDailyLOFinishedResponse_DailyLOFinished)(nil), "manabie.bob.RetrieveDailyLOFinishedResponse.DailyLOFinished")
	golang_proto.RegisterType((*RetrieveDailyLOFinishedResponse_DailyLOFinished)(nil), "manabie.bob.RetrieveDailyLOFinishedResponse.DailyLOFinished")
	proto.RegisterType((*StudyAheadTopic)(nil), "manabie.bob.StudyAheadTopic")
	golang_proto.RegisterType((*StudyAheadTopic)(nil), "manabie.bob.StudyAheadTopic")
	proto.RegisterType((*RetrieveStudyAheadTopicsRequest)(nil), "manabie.bob.RetrieveStudyAheadTopicsRequest")
	golang_proto.RegisterType((*RetrieveStudyAheadTopicsRequest)(nil), "manabie.bob.RetrieveStudyAheadTopicsRequest")
	proto.RegisterType((*RetrieveStudyAheadTopicsResponse)(nil), "manabie.bob.RetrieveStudyAheadTopicsResponse")
	golang_proto.RegisterType((*RetrieveStudyAheadTopicsResponse)(nil), "manabie.bob.RetrieveStudyAheadTopicsResponse")
	proto.RegisterType((*CountTotalLOsFinishedRequest)(nil), "manabie.bob.CountTotalLOsFinishedRequest")
	golang_proto.RegisterType((*CountTotalLOsFinishedRequest)(nil), "manabie.bob.CountTotalLOsFinishedRequest")
	proto.RegisterType((*CountTotalLOsFinishedResponse)(nil), "manabie.bob.CountTotalLOsFinishedResponse")
	golang_proto.RegisterType((*CountTotalLOsFinishedResponse)(nil), "manabie.bob.CountTotalLOsFinishedResponse")
	proto.RegisterType((*RetrieveArchivedTopicsRequest)(nil), "manabie.bob.RetrieveArchivedTopicsRequest")
	golang_proto.RegisterType((*RetrieveArchivedTopicsRequest)(nil), "manabie.bob.RetrieveArchivedTopicsRequest")
	proto.RegisterType((*ArchivedTopic)(nil), "manabie.bob.ArchivedTopic")
	golang_proto.RegisterType((*ArchivedTopic)(nil), "manabie.bob.ArchivedTopic")
	proto.RegisterType((*RetrieveArchivedTopicsResponse)(nil), "manabie.bob.RetrieveArchivedTopicsResponse")
	golang_proto.RegisterType((*RetrieveArchivedTopicsResponse)(nil), "manabie.bob.RetrieveArchivedTopicsResponse")
	proto.RegisterType((*StudentPermissionRequest)(nil), "manabie.bob.StudentPermissionRequest")
	golang_proto.RegisterType((*StudentPermissionRequest)(nil), "manabie.bob.StudentPermissionRequest")
	proto.RegisterType((*PermissionAllowGrade)(nil), "manabie.bob.PermissionAllowGrade")
	golang_proto.RegisterType((*PermissionAllowGrade)(nil), "manabie.bob.PermissionAllowGrade")
	proto.RegisterType((*Permission)(nil), "manabie.bob.Permission")
	golang_proto.RegisterType((*Permission)(nil), "manabie.bob.Permission")
	proto.RegisterType((*StudentPermissionResponse)(nil), "manabie.bob.StudentPermissionResponse")
	golang_proto.RegisterType((*StudentPermissionResponse)(nil), "manabie.bob.StudentPermissionResponse")
	proto.RegisterMapType((map[int32]*Permission)(nil), "manabie.bob.StudentPermissionResponse.PermissionsEntry")
	golang_proto.RegisterMapType((map[int32]*Permission)(nil), "manabie.bob.StudentPermissionResponse.PermissionsEntry")
	proto.RegisterType((*TopicOverdue)(nil), "manabie.bob.TopicOverdue")
	golang_proto.RegisterType((*TopicOverdue)(nil), "manabie.bob.TopicOverdue")
	proto.RegisterType((*RetrieveOverdueTopicRequest)(nil), "manabie.bob.RetrieveOverdueTopicRequest")
	golang_proto.RegisterType((*RetrieveOverdueTopicRequest)(nil), "manabie.bob.RetrieveOverdueTopicRequest")
	proto.RegisterType((*RetrieveOverdueTopicResponse)(nil), "manabie.bob.RetrieveOverdueTopicResponse")
	golang_proto.RegisterType((*RetrieveOverdueTopicResponse)(nil), "manabie.bob.RetrieveOverdueTopicResponse")
	proto.RegisterType((*RetrieveCompletedTopicWeekliesRequest)(nil), "manabie.bob.RetrieveCompletedTopicWeekliesRequest")
	golang_proto.RegisterType((*RetrieveCompletedTopicWeekliesRequest)(nil), "manabie.bob.RetrieveCompletedTopicWeekliesRequest")
	proto.RegisterType((*RetrieveCompletedTopicWeekliesResponse)(nil), "manabie.bob.RetrieveCompletedTopicWeekliesResponse")
	golang_proto.RegisterType((*RetrieveCompletedTopicWeekliesResponse)(nil), "manabie.bob.RetrieveCompletedTopicWeekliesResponse")
	proto.RegisterType((*RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy)(nil), "manabie.bob.RetrieveCompletedTopicWeekliesResponse.TopicWithAssignBy")
	golang_proto.RegisterType((*RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy)(nil), "manabie.bob.RetrieveCompletedTopicWeekliesResponse.TopicWithAssignBy")
	proto.RegisterType((*SubmitAssignmentRequest)(nil), "manabie.bob.SubmitAssignmentRequest")
	golang_proto.RegisterType((*SubmitAssignmentRequest)(nil), "manabie.bob.SubmitAssignmentRequest")
	proto.RegisterType((*SubmitAssignmentResponse)(nil), "manabie.bob.SubmitAssignmentResponse")
	golang_proto.RegisterType((*SubmitAssignmentResponse)(nil), "manabie.bob.SubmitAssignmentResponse")
	proto.RegisterType((*ListStudentSubmissionsRequest)(nil), "manabie.bob.ListStudentSubmissionsRequest")
	golang_proto.RegisterType((*ListStudentSubmissionsRequest)(nil), "manabie.bob.ListStudentSubmissionsRequest")
}

func init() { proto.RegisterFile("student.proto", fileDescriptor_94a1c1b032ad0c00) }
func init() { golang_proto.RegisterFile("student.proto", fileDescriptor_94a1c1b032ad0c00) }

var fileDescriptor_94a1c1b032ad0c00 = []byte{
	// 3025 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x3a, 0x4b, 0x6c, 0x24, 0x47,
	0xd9, 0xee, 0x19, 0x8f, 0xc7, 0xfe, 0xc6, 0xcf, 0xb2, 0x77, 0x3d, 0x9e, 0xb5, 0x67, 0x9d, 0xfe,
	0xf3, 0x70, 0xbc, 0xbb, 0xb3, 0x7f, 0x9c, 0x6c, 0xc2, 0xe6, 0xb9, 0xb3, 0xb6, 0x93, 0x18, 0x39,
	0xac, 0x69, 0x7b, 0x77, 0x13, 0x40, 0x1a, 0xf5, 0x4c, 0x97, 0x67, 0x1a, 0xf7, 0x74, 0x77, 0xba,
	0x6b, 0x66, 0x19, 0x04, 0x12, 0xdc, 0x02, 0x44, 0x0a, 0x07, 0x24, 0x04, 0x88, 0x0b, 0x17, 0x90,
	0x72, 0x40, 0xe2, 0x82, 0x78, 0x1c, 0xb8, 0x85, 0x1b, 0xe1, 0x96, 0x23, 0xf1, 0x5e, 0x38, 0x46,
	0x42, 0xe2, 0x86, 0x84, 0xea, 0xd1, 0x33, 0xdd, 0x35, 0xdd, 0xf3, 0x58, 0x90, 0xc8, 0xad, 0xab,
	0xea, 0xab, 0xaf, 0xbe, 0xf7, 0xa3, 0xaa, 0x61, 0xce, 0x27, 0x2d, 0x03, 0xdb, 0xa4, 0xe4, 0x7a,
	0x0e, 0x71, 0x50, 0xae, 0xa9, 0xdb, 0x7a, 0xd5, 0xc4, 0xa5, 0xaa, 0x53, 0x2d, 0x00, 0xb6, 0x5b,
	0x4d, 0xbe, 0x50, 0x98, 0xab, 0x39, 0x2d, 0xcf, 0xc7, 0x7e, 0x30, 0xf4, 0x6b, 0x0d, 0xc7, 0xb1,
	0x82, 0x21, 0xb4, 0x7c, 0xec, 0x89, 0xef, 0xcb, 0x75, 0xc7, 0xa9, 0x5b, 0xf8, 0x3a, 0x1b, 0x55,
	0x5b, 0xa7, 0xd7, 0x89, 0xd9, 0xc4, 0x3e, 0xd1, 0x9b, 0xae, 0x00, 0x58, 0x97, 0x01, 0x7c, 0xe2,
	0xb5, 0x6a, 0x82, 0x82, 0x42, 0x51, 0x5e, 0x7d, 0xe0, 0xe9, 0xae, 0x8b, 0xbd, 0xe0, 0xa8, 0x6b,
	0x75, 0x93, 0x34, 0x5a, 0xd5, 0x52, 0xcd, 0x69, 0x5e, 0xaf, 0x3b, 0x75, 0xa7, 0x07, 0x48, 0x47,
	0x6c, 0xc0, 0xbe, 0x38, 0xb8, 0xfa, 0xd3, 0x14, 0x2c, 0x68, 0xb8, 0x6e, 0xfa, 0x04, 0x7b, 0x1a,
	0x7e, 0xb7, 0x85, 0x7d, 0x82, 0x10, 0x4c, 0xda, 0x7a, 0x13, 0xe7, 0x95, 0x4d, 0x65, 0x6b, 0x46,
	0x63, 0xdf, 0xa8, 0x04, 0xd9, 0x9a, 0xd3, 0xb2, 0x89, 0xd7, 0xc9, 0xa7, 0x36, 0x95, 0xad, 0xf9,
	0x9d, 0x95, 0x52, 0x48, 0x14, 0xa5, 0x5d, 0xbe, 0xa6, 0x05, 0x40, 0x68, 0x05, 0x32, 0x6e, 0xc3,
	0xb1, 0x71, 0x3e, 0xcd, 0x90, 0xf0, 0x01, 0x9d, 0xc5, 0x4d, 0xdd, 0xb4, 0xf2, 0x93, 0x7c, 0x96,
	0x0d, 0xe8, 0x6c, 0xdd, 0xd3, 0x0d, 0x9c, 0xcf, 0xf0, 0x59, 0x36, 0x40, 0x57, 0x60, 0x89, 0xe8,
	0x5e, 0x1d, 0x93, 0x4a, 0xcb, 0x36, 0xdb, 0xd8, 0xf3, 0x4d, 0xd2, 0xc9, 0x4f, 0x31, 0x88, 0x45,
	0xbe, 0x70, 0xb7, 0x3b, 0x8f, 0xae, 0xc0, 0x14, 0x97, 0x78, 0x3e, 0xbb, 0xa9, 0x6c, 0xe5, 0x76,
	0x96, 0x23, 0xd4, 0x1d, 0xb3, 0x25, 0x4d, 0x80, 0xa0, 0xa7, 0x60, 0x41, 0xaf, 0x11, 0xb3, 0xad,
	0x13, 0xd3, 0xb1, 0x2b, 0x35, 0xc7, 0xc0, 0xf9, 0x69, 0x86, 0x77, 0xbe, 0x37, 0xbd, 0xeb, 0x18,
	0x58, 0x7d, 0x5f, 0x81, 0xc5, 0x9e, 0x70, 0x7c, 0xd7, 0xb1, 0x7d, 0x8c, 0x8a, 0x00, 0x7e, 0xab,
	0x56, 0xc3, 0xbe, 0x7f, 0xda, 0xb2, 0x98, 0x8c, 0xa6, 0xb5, 0xd0, 0x0c, 0x5a, 0x83, 0x69, 0xc7,
	0xae, 0x10, 0xcf, 0xd4, 0x2d, 0x26, 0xaa, 0x69, 0x2d, 0xeb, 0xd8, 0x27, 0x74, 0x88, 0x5e, 0x81,
	0xd9, 0xaa, 0x69, 0x59, 0xa6, 0x5d, 0xaf, 0x18, 0x3a, 0xe1, 0xb2, 0xc9, 0xed, 0x14, 0x4a, 0x5c,
	0xa5, 0xa5, 0x40, 0x53, 0xa5, 0x93, 0xc0, 0x22, 0xb4, 0x9c, 0x80, 0xdf, 0xd3, 0x09, 0x56, 0x5f,
	0x82, 0xfc, 0x1b, 0x98, 0x1c, 0x73, 0x83, 0x3c, 0xf2, 0x9c, 0x53, 0xd3, 0xc2, 0x81, 0xce, 0x2e,
	0x43, 0x4e, 0x58, 0x6a, 0xc5, 0x34, 0xfc, 0xbc, 0xb2, 0x99, 0xde, 0x9a, 0xd1, 0x40, 0x4c, 0x1d,
	0x18, 0xbe, 0xfa, 0xd7, 0x0c, 0xcc, 0x47, 0xb7, 0xa2, 0x79, 0x48, 0x99, 0x86, 0xd0, 0x72, 0xca,
	0x34, 0xba, 0x7a, 0x4f, 0xc5, 0xeb, 0x3d, 0x3d, 0x96, 0xde, 0x27, 0x63, 0xf5, 0x9e, 0x89, 0xd5,
	0xfb, 0xd4, 0x50, 0xbd, 0x67, 0x13, 0xf4, 0x7e, 0x11, 0xa6, 0xf4, 0xb6, 0x4e, 0x74, 0x4f, 0x68,
	0x50, 0x8c, 0xd0, 0xf3, 0x30, 0x5d, 0x35, 0x3d, 0xd2, 0x30, 0xf4, 0x4e, 0x7e, 0x66, 0xa8, 0x94,
	0xbb, 0xb0, 0x68, 0x1d, 0x66, 0xaa, 0xa6, 0x53, 0xf7, 0x74, 0xb7, 0xd1, 0xc9, 0x03, 0x43, 0xd9,
	0x9b, 0x40, 0x65, 0x98, 0x77, 0xf5, 0x4e, 0x93, 0x0a, 0xd9, 0x27, 0x3a, 0x69, 0xf9, 0xf9, 0x1c,
	0x93, 0x49, 0x21, 0x22, 0x93, 0x23, 0x0e, 0x72, 0xcc, 0x20, 0xb4, 0x39, 0x37, 0x3c, 0xec, 0x33,
	0x81, 0xd9, 0xb1, 0x4c, 0x00, 0xdd, 0x04, 0xa8, 0x79, 0x58, 0x27, 0xd8, 0xa8, 0xe8, 0x24, 0x3f,
	0x37, 0x74, 0xf3, 0x8c, 0x80, 0x2e, 0x93, 0x90, 0x8b, 0xcc, 0x0f, 0x77, 0x91, 0x55, 0xc8, 0xba,
	0x96, 0x6e, 0x57, 0x4c, 0x23, 0xbf, 0xc0, 0x05, 0x4b, 0x87, 0x07, 0x06, 0x25, 0x20, 0xa0, 0x5f,
	0x27, 0xf9, 0xc5, 0xe1, 0x04, 0x08, 0xe8, 0x32, 0x41, 0x97, 0x60, 0xc6, 0xf4, 0x2b, 0x04, 0x53,
	0x6f, 0xca, 0x2f, 0x31, 0xcf, 0x98, 0x36, 0xfd, 0x13, 0x36, 0xa6, 0xf6, 0x7b, 0xaa, 0xd7, 0x70,
	0xd5, 0x71, 0xce, 0xe8, 0xa1, 0x88, 0x1d, 0x0a, 0xc1, 0xd4, 0x01, 0x33, 0x4e, 0xc3, 0x6c, 0xfb,
	0xf9, 0xe5, 0xcd, 0xf4, 0x56, 0x5a, 0x63, 0xdf, 0xea, 0x1f, 0x15, 0x58, 0x8b, 0xf1, 0x08, 0xe1,
	0xa8, 0x65, 0xc8, 0x18, 0x3a, 0xd1, 0xb9, 0x33, 0xe4, 0x76, 0xae, 0x44, 0xf8, 0x4d, 0xdc, 0x56,
	0xda, 0xd3, 0x89, 0xae, 0xf1, 0x9d, 0x85, 0xaf, 0xc1, 0x24, 0x1d, 0xa2, 0x1b, 0x90, 0x75, 0x39,
	0x18, 0x73, 0x97, 0xdc, 0xce, 0xa5, 0xa8, 0xf0, 0xa2, 0x98, 0x02, 0x58, 0xb4, 0x01, 0xd3, 0x35,
	0x47, 0xaf, 0x35, 0x28, 0x47, 0xcc, 0xa9, 0x6e, 0xa7, 0xf2, 0x0a, 0xf5, 0x15, 0xbd, 0xd6, 0x38,
	0x30, 0xd4, 0xf7, 0x52, 0xb0, 0x72, 0xd7, 0xa5, 0x66, 0x20, 0x39, 0x73, 0x5c, 0x00, 0xee, 0x3a,
	0x4b, 0x6a, 0xa8, 0xb3, 0xa4, 0x87, 0x3a, 0xcb, 0x64, 0xa2, 0xb3, 0x64, 0x1e, 0xd5, 0x59, 0xa6,
	0x64, 0x67, 0x19, 0x27, 0x24, 0xab, 0x2f, 0xc0, 0x05, 0x49, 0x12, 0xa3, 0x45, 0x5b, 0xf5, 0x0f,
	0x0a, 0x5c, 0xd6, 0x30, 0xf1, 0x4c, 0xdc, 0xc6, 0x87, 0x58, 0xf7, 0x6c, 0xd3, 0xae, 0x1f, 0x79,
	0x4e, 0xdd, 0xc3, 0xbe, 0x1f, 0x88, 0x73, 0x03, 0xa0, 0x17, 0x1b, 0x85, 0x50, 0x67, 0xba, 0xa1,
	0x91, 0x2d, 0x63, 0xdf, 0xa7, 0xb9, 0x20, 0xd0, 0x93, 0x36, 0x23, 0x66, 0x0e, 0x0c, 0x54, 0x82,
	0xc9, 0x53, 0xcf, 0x69, 0x8e, 0x10, 0xac, 0x19, 0x1c, 0xda, 0x86, 0x14, 0x71, 0x98, 0x84, 0x07,
	0x43, 0xa7, 0x88, 0xa3, 0xfe, 0x53, 0x81, 0xcd, 0x64, 0xea, 0x85, 0x08, 0xde, 0x81, 0xac, 0xa1,
	0x9b, 0x96, 0x89, 0x03, 0x4b, 0x7e, 0x2d, 0x22, 0xc9, 0x61, 0xfb, 0x4b, 0x7b, 0xba, 0x69, 0x75,
	0x82, 0x55, 0x7a, 0xbe, 0x16, 0xe0, 0x2b, 0x3c, 0x80, 0xa5, 0xbe, 0x55, 0xf4, 0x1c, 0xac, 0x12,
	0x87, 0xe8, 0x56, 0x85, 0x16, 0x26, 0x15, 0xdf, 0x65, 0x72, 0xb3, 0x2b, 0xd4, 0x3a, 0xa8, 0xec,
	0xd2, 0xda, 0x32, 0x5b, 0xa6, 0xb0, 0xc7, 0x74, 0xf1, 0xc0, 0xde, 0xd3, 0x3b, 0xe8, 0x2a, 0xa4,
	0x29, 0x44, 0x6a, 0x28, 0xdf, 0x14, 0x4c, 0xfd, 0x9d, 0x02, 0x0b, 0xc2, 0x6b, 0xf6, 0xdb, 0xd8,
	0x26, 0x87, 0x4e, 0x9d, 0x26, 0x4e, 0xdc, 0x8e, 0x28, 0x29, 0xcb, 0xc6, 0x5c, 0x45, 0x7c, 0x89,
	0x74, 0xdc, 0xc0, 0x03, 0x66, 0xd8, 0xcc, 0x49, 0xc7, 0x95, 0xa3, 0x62, 0x7a, 0x9c, 0xa8, 0xf8,
	0x0c, 0x64, 0x5d, 0xbd, 0x63, 0x39, 0xba, 0x21, 0x54, 0xb6, 0xda, 0xb7, 0xef, 0x98, 0x95, 0x5f,
	0x5a, 0x00, 0xa7, 0xbe, 0x9f, 0xea, 0x66, 0xd2, 0x5d, 0xa7, 0x49, 0x63, 0x3b, 0xa5, 0xaf, 0xc6,
	0x3f, 0x43, 0x16, 0x26, 0x66, 0x18, 0xf9, 0x83, 0xe2, 0x80, 0x64, 0x9f, 0x69, 0xd9, 0x3e, 0x9f,
	0x82, 0x85, 0x00, 0x79, 0xcd, 0xb1, 0x09, 0xb6, 0x89, 0xf0, 0xdf, 0x79, 0x31, 0xbd, 0xcb, 0x67,
	0xa9, 0x18, 0x5a, 0xcc, 0x89, 0x98, 0x18, 0x86, 0x7b, 0xf2, 0x8c, 0x80, 0x2e, 0x13, 0x49, 0x82,
	0x53, 0x63, 0x48, 0x50, 0x3d, 0x82, 0x95, 0xb2, 0xef, 0x9b, 0x75, 0xfb, 0xc4, 0xd9, 0xa5, 0x0c,
	0x05, 0x5e, 0xb7, 0x16, 0x62, 0x5a, 0xa8, 0x33, 0x9e, 0xe1, 0x94, 0xc4, 0x30, 0x0d, 0x06, 0x12,
	0xc6, 0x11, 0x83, 0xc1, 0x87, 0xa1, 0x60, 0x70, 0xe4, 0x61, 0x9f, 0xc7, 0xf8, 0xce, 0x91, 0xa5,
	0xdb, 0xfe, 0x7f, 0xb9, 0xb8, 0xe5, 0xb1, 0x38, 0x1d, 0x8e, 0xc5, 0x25, 0xc8, 0xfa, 0xad, 0xea,
	0xd7, 0x71, 0x8d, 0xeb, 0x47, 0xc6, 0x72, 0xcc, 0xd7, 0xb4, 0x00, 0x48, 0xb5, 0x7b, 0xbe, 0xdf,
	0x4f, 0xac, 0xe0, 0xf8, 0x8b, 0x80, 0x5c, 0xb6, 0x56, 0xa1, 0xe2, 0xe9, 0x54, 0x68, 0x16, 0x0e,
	0xc2, 0xc0, 0x7a, 0xb4, 0xea, 0x88, 0xa2, 0xd0, 0x16, 0x5d, 0x09, 0xa7, 0xfa, 0x0e, 0x3c, 0x99,
	0x70, 0xde, 0x7d, 0x8c, 0xcf, 0x68, 0x3c, 0x08, 0x64, 0x74, 0x1d, 0x56, 0xfa, 0x4e, 0xed, 0xa9,
	0x71, 0x49, 0xc2, 0x7c, 0x60, 0xa8, 0xdf, 0x57, 0xe0, 0xa9, 0xa1, 0xb8, 0x05, 0x4b, 0x15, 0x28,
	0xf4, 0x23, 0x7f, 0x20, 0xa0, 0x04, 0x6b, 0xea, 0x20, 0xd6, 0x18, 0xc6, 0x8e, 0xb6, 0xea, 0xc6,
	0x1f, 0xa4, 0xfe, 0x26, 0x05, 0x1b, 0xdc, 0x7e, 0x92, 0x6c, 0x60, 0x48, 0x42, 0x78, 0x1b, 0x66,
	0x19, 0x51, 0x06, 0x26, 0xba, 0x69, 0xf9, 0xf9, 0x14, 0xa3, 0xe9, 0x46, 0x84, 0xa6, 0x81, 0x07,
	0x94, 0xe8, 0x60, 0x8f, 0xed, 0xd6, 0x72, 0x6e, 0xf7, 0xdb, 0x2f, 0xfc, 0x58, 0x01, 0xe8, 0xad,
	0x8d, 0x2d, 0x67, 0x4e, 0xb8, 0xee, 0x11, 0x26, 0x2f, 0x66, 0xab, 0x19, 0x4a, 0xb8, 0xee, 0x11,
	0xca, 0x3d, 0xf5, 0x62, 0xbe, 0x3c, 0x62, 0x77, 0xc1, 0xb7, 0xb2, 0xde, 0xe2, 0x16, 0x14, 0x93,
	0x58, 0x1a, 0xd1, 0xf9, 0x7e, 0x1e, 0xca, 0x65, 0x22, 0x3c, 0x8e, 0x2d, 0xf9, 0x20, 0xd7, 0xa6,
	0xc6, 0xca, 0xb5, 0xe9, 0x91, 0x72, 0xed, 0xaf, 0x53, 0xf0, 0xd8, 0x00, 0xfa, 0x04, 0x97, 0x3e,
	0x5c, 0xe0, 0x06, 0x69, 0x92, 0x46, 0xa5, 0x27, 0xcc, 0xc0, 0x30, 0x6f, 0xc5, 0xa6, 0xde, 0x44,
	0x74, 0xcc, 0x10, 0xee, 0x9b, 0xa4, 0x71, 0x1c, 0x08, 0x5a, 0x43, 0xae, 0x3c, 0xe5, 0x17, 0x7e,
	0xa4, 0xc0, 0x52, 0x1f, 0x24, 0xfa, 0x7f, 0x98, 0xa4, 0xb0, 0xa2, 0xe2, 0x1c, 0xec, 0xed, 0x0c,
	0x92, 0xc6, 0xb6, 0x90, 0x61, 0xb0, 0xef, 0xff, 0xc4, 0x26, 0x3e, 0x0a, 0x79, 0xb5, 0xcc, 0xa2,
	0x1c, 0x32, 0xfe, 0x77, 0x8a, 0x45, 0x8f, 0xc1, 0xac, 0x27, 0xa8, 0xac, 0xe8, 0x16, 0xbf, 0x5b,
	0x98, 0xd6, 0x72, 0xc1, 0x5c, 0xd9, 0xb2, 0xd4, 0x7f, 0xa4, 0x61, 0x6b, 0x38, 0x27, 0xc2, 0x04,
	0xbe, 0x0d, 0x17, 0x89, 0xe3, 0x9a, 0xb5, 0x24, 0x1b, 0x78, 0x73, 0x24, 0x1b, 0x90, 0xd1, 0x96,
	0x4e, 0x28, 0xce, 0xa8, 0x2d, 0x2c, 0x93, 0xbe, 0x39, 0xbf, 0xf0, 0x51, 0x0a, 0x50, 0x3f, 0x2c,
	0x4d, 0xa7, 0x9c, 0xaa, 0x5e, 0x3a, 0x65, 0x63, 0x1e, 0x15, 0xf8, 0x52, 0xa8, 0x7b, 0x9f, 0x61,
	0x33, 0x5f, 0xa2, 0xd9, 0xed, 0xd1, 0x2d, 0x80, 0xb6, 0x6c, 0xbc, 0x14, 0xb4, 0x1c, 0x9f, 0xc9,
	0x35, 0xa3, 0x4d, 0xb3, 0x89, 0x43, 0xc7, 0x47, 0x57, 0x01, 0xf1, 0xc5, 0x53, 0xd3, 0x36, 0xfd,
	0x06, 0x36, 0x18, 0x54, 0x86, 0x41, 0x2d, 0xb2, 0x95, 0xd7, 0xc5, 0x02, 0x85, 0x7e, 0x11, 0x72,
	0x3a, 0x0b, 0x30, 0xd8, 0xa8, 0x54, 0x3b, 0xa2, 0xc4, 0x58, 0x8b, 0x88, 0xf2, 0xb6, 0xee, 0x9b,
	0xb5, 0xa0, 0x01, 0x80, 0x00, 0xfa, 0x76, 0x07, 0xdd, 0x80, 0x69, 0x6c, 0x1b, 0x9c, 0xfe, 0xec,
	0x50, 0xfa, 0xb3, 0xd8, 0x36, 0x98, 0xfd, 0xfe, 0x4b, 0x81, 0x5c, 0x57, 0x2d, 0x3a, 0x41, 0x25,
	0x58, 0x16, 0xdc, 0x88, 0x72, 0x97, 0x55, 0xb8, 0x4c, 0x9a, 0x19, 0x6d, 0x89, 0xf3, 0x15, 0x2e,
	0x84, 0xb7, 0x61, 0x29, 0xe0, 0xbe, 0xcb, 0xa3, 0xf0, 0xad, 0x05, 0x21, 0x85, 0x80, 0x43, 0xae,
	0x1e, 0x0e, 0xcb, 0x44, 0x9c, 0xa1, 0xea, 0x61, 0x20, 0xe8, 0x65, 0x98, 0xaa, 0x79, 0xce, 0x03,
	0x9b, 0x4a, 0x90, 0xda, 0xcf, 0xe3, 0x71, 0xbd, 0x23, 0x25, 0xb0, 0xb4, 0xcb, 0xc0, 0xf6, 0x59,
	0xb1, 0x21, 0xf6, 0x14, 0x6e, 0x42, 0x2e, 0x34, 0x8d, 0x16, 0x21, 0x7d, 0x86, 0x3b, 0xc2, 0x02,
	0xe8, 0x27, 0x2d, 0x46, 0xda, 0xba, 0xd5, 0xc2, 0x82, 0x32, 0x3e, 0x78, 0x31, 0xf5, 0x05, 0x45,
	0xdd, 0x06, 0xf4, 0xba, 0x69, 0x1b, 0xe2, 0x84, 0xc0, 0x53, 0xbb, 0x37, 0x34, 0x4a, 0xe8, 0x86,
	0x46, 0x3d, 0x84, 0xe5, 0x08, 0xac, 0xf0, 0x85, 0x47, 0x6b, 0x7c, 0xd5, 0x1a, 0x5c, 0xba, 0xeb,
	0xfa, 0xd8, 0x23, 0xd1, 0x3a, 0x39, 0x20, 0x61, 0x0f, 0x16, 0x82, 0x60, 0x21, 0x4a, 0xd8, 0x41,
	0xd8, 0x83, 0xcd, 0xf3, 0x7e, 0x64, 0xac, 0xbe, 0x0a, 0xeb, 0xf1, 0x87, 0x8c, 0x98, 0xb0, 0x5e,
	0x85, 0x0d, 0xc9, 0x79, 0x25, 0x32, 0x07, 0xc7, 0x34, 0xb5, 0x0d, 0x39, 0xb1, 0xe1, 0xc0, 0x3e,
	0xa5, 0x61, 0x08, 0x78, 0xbd, 0xdb, 0x2b, 0x2f, 0x59, 0x99, 0x3f, 0xc3, 0x66, 0x99, 0x27, 0xc6,
	0xf0, 0x9d, 0x1a, 0x9f, 0xef, 0x13, 0x28, 0x26, 0xd1, 0x2d, 0x38, 0xdf, 0xa1, 0xf5, 0x6c, 0x20,
	0x57, 0x6a, 0x72, 0x79, 0xa9, 0x9e, 0xed, 0x52, 0xad, 0x05, 0x80, 0xea, 0xcf, 0x94, 0x1e, 0x5a,
	0xde, 0x13, 0xde, 0x09, 0x8c, 0xfb, 0x73, 0x90, 0xbc, 0xbf, 0x9b, 0xea, 0x55, 0xf6, 0x7d, 0xd4,
	0x09, 0xae, 0xc3, 0x2e, 0xa8, 0x44, 0x5d, 0xf0, 0x5e, 0xaf, 0x85, 0xe6, 0xc5, 0xdc, 0xcb, 0xb1,
	0x31, 0x3c, 0x01, 0x73, 0x49, 0x9e, 0xef, 0xf6, 0xcf, 0x67, 0xb0, 0x20, 0xad, 0xc5, 0x07, 0x0d,
	0x25, 0x3e, 0x68, 0x8c, 0xd7, 0x33, 0xdf, 0xe2, 0x2d, 0x73, 0xa7, 0xdc, 0xc0, 0xba, 0xc1, 0x32,
	0xc4, 0xa0, 0xa4, 0x10, 0x53, 0x0b, 0xa8, 0xb7, 0x7a, 0x42, 0x94, 0x30, 0x8d, 0x98, 0xc7, 0xc3,
	0x3d, 0x4b, 0x3f, 0x86, 0x5e, 0xcf, 0xc2, 0xcb, 0x59, 0x9d, 0x2e, 0x56, 0x18, 0x41, 0xf1, 0x3d,
	0x8b, 0x84, 0x42, 0x5b, 0xf4, 0x25, 0x9c, 0xea, 0x4f, 0x14, 0x58, 0x67, 0xed, 0xd7, 0x09, 0x13,
	0xdd, 0x1d, 0xff, 0x73, 0x64, 0x93, 0x6f, 0xc1, 0x46, 0x02, 0x69, 0x42, 0x10, 0xdd, 0x04, 0x69,
	0x39, 0xbe, 0x6c, 0x0b, 0x8b, 0x41, 0x1a, 0x0d, 0x76, 0x85, 0xc3, 0x51, 0xd9, 0xab, 0x35, 0xcc,
	0x36, 0x1e, 0x4f, 0x35, 0x1f, 0x2a, 0x30, 0x17, 0xd9, 0x38, 0xc8, 0x3a, 0x6e, 0xc2, 0x94, 0xb8,
	0xc1, 0xe6, 0x0d, 0xef, 0x63, 0xd1, 0xe6, 0x26, 0x8c, 0xa6, 0x24, 0x2e, 0xb2, 0xc5, 0x06, 0x75,
	0x0f, 0xa6, 0xc4, 0x5d, 0xf6, 0x06, 0xac, 0x95, 0xb5, 0xdd, 0x37, 0x0f, 0xee, 0xed, 0xef, 0x55,
	0x8e, 0x4f, 0xca, 0x27, 0x77, 0x8f, 0x2b, 0xbb, 0x77, 0xde, 0x3a, 0x3a, 0xdc, 0x3f, 0xd9, 0xdf,
	0x5b, 0x9c, 0x40, 0x97, 0x60, 0x55, 0x5e, 0xde, 0x7f, 0xfb, 0xe8, 0x40, 0xdb, 0xdf, 0x5b, 0x54,
	0xc2, 0x41, 0x4c, 0xe6, 0xb6, 0x1b, 0xc4, 0xa6, 0x22, 0xa6, 0x53, 0x48, 0x26, 0x51, 0x13, 0x90,
	0x6a, 0x01, 0xf2, 0x41, 0x4a, 0xc2, 0x5e, 0xd3, 0x64, 0x57, 0x78, 0x42, 0x7c, 0xea, 0x0f, 0x14,
	0x58, 0xe9, 0xcd, 0x96, 0x2d, 0xcb, 0x79, 0xf0, 0x86, 0xdc, 0xb7, 0x2b, 0x23, 0xf4, 0xed, 0x68,
	0x17, 0x16, 0x58, 0x8b, 0xe0, 0x7a, 0x66, 0xdb, 0xb4, 0x70, 0x5d, 0x04, 0x95, 0xbe, 0x67, 0x00,
	0x4b, 0xb7, 0x8f, 0x02, 0x10, 0x6d, 0xde, 0x0d, 0x0f, 0x7d, 0x15, 0x03, 0xf4, 0x88, 0x41, 0xf7,
	0xe1, 0x82, 0x1b, 0x43, 0x5a, 0xc0, 0x7a, 0x54, 0x3b, 0x71, 0x4c, 0x68, 0xf1, 0xfb, 0xd5, 0xbf,
	0x28, 0xb0, 0x16, 0x23, 0x91, 0xee, 0xcd, 0x62, 0xae, 0xb7, 0x2d, 0x38, 0xec, 0x85, 0xd8, 0x0c,
	0xdf, 0xb7, 0x39, 0x44, 0x86, 0xa8, 0x58, 0xc2, 0xb8, 0x0a, 0xf7, 0x61, 0x51, 0x06, 0x08, 0xd7,
	0x2e, 0x19, 0x5e, 0xbb, 0x5c, 0x0b, 0xd7, 0x2e, 0xb9, 0x9d, 0xd5, 0x04, 0x3e, 0xc3, 0x45, 0xcd,
	0x87, 0x0a, 0xcc, 0x32, 0xa5, 0xdf, 0x69, 0x63, 0xcf, 0x68, 0x61, 0xb4, 0x05, 0x19, 0xa6, 0x7d,
	0x51, 0x42, 0xa0, 0x08, 0x0e, 0x6e, 0x1e, 0x1c, 0x80, 0x96, 0x91, 0x46, 0x0b, 0xf3, 0x32, 0x72,
	0x78, 0x40, 0xc8, 0x1a, 0x2d, 0xcc, 0x8a, 0x60, 0xa9, 0x72, 0x4d, 0x8f, 0x51, 0xb9, 0xaa, 0x2f,
	0xc3, 0xa5, 0xc0, 0xcc, 0x05, 0xbd, 0x9c, 0xa2, 0xd1, 0x5c, 0xfa, 0xcb, 0xb0, 0x1e, 0xbf, 0x5b,
	0xe8, 0xef, 0x19, 0xc9, 0x45, 0xd6, 0xfa, 0x79, 0x17, 0xfb, 0xba, 0x1e, 0xf2, 0x0b, 0x05, 0x9e,
	0x08, 0x70, 0xee, 0x3a, 0x4d, 0xd7, 0xc2, 0x44, 0x38, 0xd1, 0xe7, 0xa7, 0xa3, 0x53, 0x3f, 0x48,
	0xf7, 0xae, 0xaa, 0x92, 0x88, 0x14, 0x22, 0x28, 0x49, 0x22, 0x88, 0x51, 0x3f, 0xab, 0xc2, 0x04,
	0x14, 0xfa, 0x06, 0x5c, 0xe0, 0x5f, 0xbc, 0xbb, 0xe3, 0xaa, 0xa2, 0x6a, 0xe5, 0x75, 0xc1, 0x7e,
	0x6c, 0x5d, 0x30, 0x98, 0x86, 0x5e, 0x67, 0xc7, 0x6f, 0x50, 0x6e, 0x77, 0x34, 0xc4, 0xcf, 0x08,
	0xcf, 0x15, 0x7e, 0xaf, 0xc0, 0x52, 0x1f, 0x24, 0xda, 0x0e, 0xd1, 0x9f, 0x64, 0xbe, 0x01, 0xed,
	0x92, 0x21, 0xa6, 0xc6, 0x69, 0xa1, 0x5e, 0x81, 0xd9, 0x5a, 0xc0, 0xc5, 0x68, 0x97, 0xe4, 0xb9,
	0x2e, 0x7c, 0x99, 0xa8, 0xbf, 0x54, 0x60, 0xf5, 0xb8, 0x55, 0x6d, 0x9a, 0x84, 0x53, 0x1e, 0x2e,
	0x93, 0x07, 0xa4, 0x99, 0xe7, 0x69, 0x21, 0xca, 0xaf, 0xac, 0x53, 0xe2, 0x16, 0x23, 0xe6, 0x76,
	0xdd, 0xb4, 0xeb, 0xf7, 0xa8, 0x7f, 0x6b, 0x01, 0x30, 0xba, 0x09, 0x39, 0x9d, 0x10, 0xbd, 0xd6,
	0xa0, 0xe7, 0xf8, 0xf9, 0x34, 0xd3, 0x4d, 0x34, 0x3a, 0x94, 0xbb, 0xeb, 0x5a, 0x18, 0x56, 0x7d,
	0x0d, 0xf2, 0xfd, 0x84, 0x0a, 0x63, 0xf9, 0x3f, 0x98, 0xf3, 0xe9, 0x5a, 0xf7, 0xb1, 0x87, 0x93,
	0x3b, 0xdb, 0x9b, 0x3c, 0x30, 0x68, 0x9e, 0xd8, 0x38, 0x34, 0xfd, 0xa0, 0xab, 0x38, 0xee, 0xae,
	0xf9, 0x23, 0x30, 0xbc, 0x02, 0x19, 0xcb, 0x6c, 0x9a, 0x24, 0x68, 0xc6, 0xd8, 0x00, 0xdd, 0x84,
	0x19, 0xe7, 0xf4, 0xd4, 0xc7, 0xdd, 0xfb, 0xfd, 0x61, 0x82, 0x98, 0xe6, 0xe0, 0x07, 0xc6, 0xce,
	0x6f, 0x97, 0x21, 0x2b, 0x28, 0x41, 0x87, 0x30, 0x1d, 0xfc, 0x8d, 0x80, 0xd6, 0x25, 0x43, 0x8d,
	0xfc, 0xc1, 0x51, 0xd8, 0x48, 0x58, 0xe5, 0x72, 0x50, 0xd3, 0xef, 0xa5, 0x14, 0x54, 0x85, 0xa5,
	0xbe, 0x47, 0x50, 0xf4, 0xc4, 0xb0, 0x47, 0x52, 0x8e, 0xff, 0xc9, 0xd1, 0xde, 0x52, 0xd1, 0x3d,
	0x98, 0x8b, 0x3c, 0xeb, 0xa1, 0x68, 0x26, 0x8b, 0x7b, 0xfc, 0x2c, 0xa8, 0x83, 0x40, 0x04, 0xde,
	0x23, 0xc8, 0x85, 0xba, 0x55, 0x74, 0x39, 0xb2, 0xa5, 0xbf, 0xe7, 0x2d, 0x6c, 0x26, 0x03, 0x08,
	0x8c, 0x04, 0x56, 0x13, 0xba, 0x00, 0x74, 0x65, 0xb4, 0x5e, 0x81, 0x9f, 0x74, 0x75, 0x9c, 0xc6,
	0x02, 0x7d, 0x0b, 0xf2, 0x49, 0xe5, 0x34, 0xba, 0x9a, 0x78, 0xcd, 0x14, 0x53, 0xb7, 0x17, 0xae,
	0x8d, 0x08, 0x1d, 0xb6, 0x80, 0x36, 0x5c, 0x8c, 0xaf, 0xc1, 0xd0, 0x76, 0x2c, 0xb6, 0xd8, 0xb2,
	0xb4, 0x70, 0x65, 0x24, 0xd8, 0xf0, 0xb9, 0x36, 0x5c, 0x88, 0x2d, 0x9c, 0xd1, 0xd3, 0xfd, 0xcf,
	0x2e, 0x09, 0x75, 0x7f, 0x61, 0x7b, 0x14, 0x50, 0x21, 0xe5, 0x07, 0x3d, 0x29, 0xcb, 0x8f, 0xa4,
	0x09, 0x52, 0x4e, 0x78, 0x49, 0x4e, 0x90, 0x72, 0xe2, 0xcb, 0xed, 0x57, 0x61, 0x2e, 0xf2, 0x90,
	0x25, 0x99, 0x7f, 0xdc, 0xb3, 0x99, 0x64, 0xfe, 0xb1, 0xef, 0x60, 0x5c, 0x8a, 0x21, 0xae, 0xe4,
	0x3b, 0xfb, 0x04, 0xae, 0x12, 0x5e, 0x2b, 0x12, 0xb8, 0x4a, 0x7c, 0x08, 0x78, 0x3f, 0xf9, 0x95,
	0x2d, 0x48, 0x8d, 0xe8, 0xd9, 0x51, 0x50, 0x4a, 0x15, 0x47, 0xe1, 0xb9, 0xf1, 0x36, 0x09, 0x72,
	0xda, 0x70, 0x31, 0xfe, 0xe5, 0x42, 0xb2, 0xe2, 0x81, 0x2f, 0x36, 0x92, 0x15, 0x0f, 0x7e, 0x0a,
	0xe1, 0xf2, 0xff, 0x26, 0xac, 0x25, 0xde, 0xff, 0xa3, 0x6b, 0xa3, 0xbe, 0x13, 0xf0, 0xd3, 0x4b,
	0xe3, 0x3d, 0x2b, 0xa0, 0x0f, 0x06, 0xbc, 0xb5, 0x74, 0x75, 0xf0, 0xdc, 0x98, 0xf7, 0xd4, 0x9c,
	0x94, 0x1b, 0x8f, 0x74, 0xbb, 0x8d, 0xce, 0x60, 0x25, 0xee, 0x32, 0x0e, 0x6d, 0x49, 0xd1, 0x3c,
	0xf1, 0x52, 0xb0, 0xf0, 0xf4, 0x08, 0x90, 0xe2, 0xb0, 0x77, 0x7b, 0x81, 0x4b, 0x3a, 0x6e, 0x7b,
	0x10, 0xf5, 0xd2, 0x81, 0x57, 0x46, 0x82, 0x15, 0x47, 0x56, 0x61, 0xa9, 0xaf, 0x15, 0x92, 0xb2,
	0x65, 0x52, 0xe7, 0x29, 0x65, 0xcb, 0xe4, 0x76, 0xcc, 0x85, 0x95, 0xb8, 0x72, 0x5f, 0x92, 0xe1,
	0x80, 0x7e, 0x42, 0x92, 0xe1, 0xa0, 0xde, 0x81, 0xdb, 0xf0, 0xf7, 0x42, 0x97, 0x7e, 0xf1, 0x45,
	0x2e, 0xda, 0x19, 0xab, 0x22, 0xe6, 0x64, 0x3c, 0xfb, 0x08, 0x55, 0x34, 0x32, 0x60, 0x51, 0x2e,
	0xdc, 0xd0, 0xe3, 0x72, 0x27, 0x1e, 0x57, 0x80, 0x16, 0x9e, 0x18, 0x02, 0x15, 0xe6, 0xb8, 0x01,
	0x0b, 0xac, 0xb8, 0xeb, 0x55, 0x75, 0x92, 0xcd, 0x0c, 0x2c, 0xfd, 0x0a, 0x8f, 0xf7, 0xc3, 0x86,
	0x81, 0x42, 0x27, 0xdd, 0xb6, 0x3e, 0xfe, 0xb4, 0x38, 0xf1, 0xc9, 0xa7, 0xc5, 0x89, 0xcf, 0x3e,
	0x2d, 0x2a, 0xdf, 0x39, 0x2f, 0x2a, 0xbf, 0x3a, 0x2f, 0x2a, 0x7f, 0x3e, 0x2f, 0x2a, 0x1f, 0x9f,
	0x17, 0x95, 0xbf, 0x9d, 0x17, 0x95, 0xbf, 0x9f, 0x17, 0x27, 0x3e, 0x3b, 0x2f, 0x2a, 0x3f, 0x7c,
	0x58, 0x9c, 0xf8, 0xd3, 0xc3, 0xa2, 0xf2, 0xf1, 0xc3, 0xe2, 0xc4, 0x27, 0x0f, 0x8b, 0x13, 0x5f,
	0xd9, 0x09, 0xfd, 0xc2, 0x2b, 0x8e, 0xbb, 0x46, 0xbf, 0xab, 0x7a, 0xed, 0x0c, 0xdb, 0xc6, 0x75,
	0xf7, 0xac, 0x7e, 0xbd, 0x8e, 0x6d, 0xfe, 0x2f, 0x6f, 0xd5, 0xa9, 0xbe, 0xe4, 0x56, 0xab, 0x53,
	0x6c, 0xf4, 0xec, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x82, 0x92, 0xa5, 0x78, 0xb0, 0x2c, 0x00,
	0x00,
}

func (x ArchivedTopic_Status) String() string {
	s, ok := ArchivedTopic_Status_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *RegisterRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterRequest)
	if !ok {
		that2, ok := that.(RegisterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Grade != that1.Grade {
		return false
	}
	if this.TargetUniversity != that1.TargetUniversity {
		return false
	}
	if !this.School.Equal(that1.School) {
		return false
	}
	if this.ActivationCode != that1.ActivationCode {
		return false
	}
	return true
}
func (this *RegisterResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RegisterResponse)
	if !ok {
		that2, ok := that.(RegisterResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Successful != that1.Successful {
		return false
	}
	if this.OnTrial != that1.OnTrial {
		return false
	}
	if !this.BillingDate.Equal(that1.BillingDate) {
		return false
	}
	return true
}
func (this *GetStudentProfileRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetStudentProfileRequest)
	if !ok {
		that2, ok := that.(GetStudentProfileRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.StudentIds) != len(that1.StudentIds) {
		return false
	}
	for i := range this.StudentIds {
		if this.StudentIds[i] != that1.StudentIds[i] {
			return false
		}
	}
	return true
}
func (this *StudentProfile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StudentProfile)
	if !ok {
		that2, ok := that.(StudentProfile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if this.Grade != that1.Grade {
		return false
	}
	if this.TargetUniversity != that1.TargetUniversity {
		return false
	}
	if this.Avatar != that1.Avatar {
		return false
	}
	if !this.Birthday.Equal(that1.Birthday) {
		return false
	}
	if this.Biography != that1.Biography {
		return false
	}
	if this.PaymentStatus != that1.PaymentStatus {
		return false
	}
	if !this.BillingDate.Equal(that1.BillingDate) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.School.Equal(that1.School) {
		return false
	}
	if this.PlanId != that1.PlanId {
		return false
	}
	if !this.BillingAt.Equal(that1.BillingAt) {
		return false
	}
	if this.IsTester != that1.IsTester {
		return false
	}
	if this.FacebookId != that1.FacebookId {
		return false
	}
	if len(this.Divs) != len(that1.Divs) {
		return false
	}
	for i := range this.Divs {
		if this.Divs[i] != that1.Divs[i] {
			return false
		}
	}
	return true
}
func (this *GetStudentProfileResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetStudentProfileResponse)
	if !ok {
		that2, ok := that.(GetStudentProfileResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Datas) != len(that1.Datas) {
		return false
	}
	for i := range this.Datas {
		if !this.Datas[i].Equal(that1.Datas[i]) {
			return false
		}
	}
	return true
}
func (this *GetStudentProfileResponse_Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetStudentProfileResponse_Data)
	if !ok {
		that2, ok := that.(GetStudentProfileResponse_Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Profile.Equal(that1.Profile) {
		return false
	}
	if this.CoachId != that1.CoachId {
		return false
	}
	return true
}
func (this *UpdateProfileRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateProfileRequest)
	if !ok {
		that2, ok := that.(UpdateProfileRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Grade != that1.Grade {
		return false
	}
	if this.TargetUniversity != that1.TargetUniversity {
		return false
	}
	if this.Avatar != that1.Avatar {
		return false
	}
	if !this.Birthday.Equal(that1.Birthday) {
		return false
	}
	if this.Biography != that1.Biography {
		return false
	}
	if !this.School.Equal(that1.School) {
		return false
	}
	return true
}
func (this *UpdateProfileResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateProfileResponse)
	if !ok {
		that2, ok := that.(UpdateProfileResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Successful != that1.Successful {
		return false
	}
	return true
}
func (this *RetrieveLearningProgressRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveLearningProgressRequest)
	if !ok {
		that2, ok := that.(RetrieveLearningProgressRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StudentId != that1.StudentId {
		return false
	}
	if this.SessionId != that1.SessionId {
		return false
	}
	if !this.From.Equal(that1.From) {
		return false
	}
	if !this.To.Equal(that1.To) {
		return false
	}
	return true
}
func (this *RetrieveLearningProgressResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveLearningProgressResponse)
	if !ok {
		that2, ok := that.(RetrieveLearningProgressResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Dailies) != len(that1.Dailies) {
		return false
	}
	for i := range this.Dailies {
		if !this.Dailies[i].Equal(that1.Dailies[i]) {
			return false
		}
	}
	return true
}
func (this *RetrieveLearningProgressResponse_DailyLearningTime) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveLearningProgressResponse_DailyLearningTime)
	if !ok {
		that2, ok := that.(RetrieveLearningProgressResponse_DailyLearningTime)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalTimeSpentInDay != that1.TotalTimeSpentInDay {
		return false
	}
	if !this.Day.Equal(that1.Day) {
		return false
	}
	return true
}
func (this *StudentEventLog) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StudentEventLog)
	if !ok {
		that2, ok := that.(StudentEventLog)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.EventId != that1.EventId {
		return false
	}
	if this.EventType != that1.EventType {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.Payload.Equal(that1.Payload) {
		return false
	}
	return true
}
func (this *StudentComment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StudentComment)
	if !ok {
		that2, ok := that.(StudentComment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CommentId != that1.CommentId {
		return false
	}
	if this.CoachId != that1.CoachId {
		return false
	}
	if this.StudentId != that1.StudentId {
		return false
	}
	if this.CommentContent != that1.CommentContent {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	return true
}
func (this *AssignToCoachRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AssignToCoachRequest)
	if !ok {
		that2, ok := that.(AssignToCoachRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CoachId != that1.CoachId {
		return false
	}
	if this.StudentId != that1.StudentId {
		return false
	}
	return true
}
func (this *AssignToCoachResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AssignToCoachResponse)
	if !ok {
		that2, ok := that.(AssignToCoachResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Successful != that1.Successful {
		return false
	}
	return true
}
func (this *RetrievePresetStudyPlansRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrievePresetStudyPlansRequest)
	if !ok {
		that2, ok := that.(RetrievePresetStudyPlansRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if this.Grade != that1.Grade {
		return false
	}
	if this.Subject != that1.Subject {
		return false
	}
	return true
}
func (this *RetrievePresetStudyPlansResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrievePresetStudyPlansResponse)
	if !ok {
		that2, ok := that.(RetrievePresetStudyPlansResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PresetStudyPlans) != len(that1.PresetStudyPlans) {
		return false
	}
	for i := range this.PresetStudyPlans {
		if !this.PresetStudyPlans[i].Equal(that1.PresetStudyPlans[i]) {
			return false
		}
	}
	return true
}
func (this *RetrievePresetStudyPlanWeekliesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrievePresetStudyPlanWeekliesRequest)
	if !ok {
		that2, ok := that.(RetrievePresetStudyPlanWeekliesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PresetStudyPlanId != that1.PresetStudyPlanId {
		return false
	}
	return true
}
func (this *RetrievePresetStudyPlanWeekliesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrievePresetStudyPlanWeekliesResponse)
	if !ok {
		that2, ok := that.(RetrievePresetStudyPlanWeekliesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PresetStudyPlanWeeklies) != len(that1.PresetStudyPlanWeeklies) {
		return false
	}
	for i := range this.PresetStudyPlanWeeklies {
		if !this.PresetStudyPlanWeeklies[i].Equal(that1.PresetStudyPlanWeeklies[i]) {
			return false
		}
	}
	return true
}
func (this *AssignPresetStudyPlansRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AssignPresetStudyPlansRequest)
	if !ok {
		that2, ok := that.(AssignPresetStudyPlansRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StudentId != that1.StudentId {
		return false
	}
	if len(this.PlanDetails) != len(that1.PlanDetails) {
		return false
	}
	for i := range this.PlanDetails {
		if !this.PlanDetails[i].Equal(that1.PlanDetails[i]) {
			return false
		}
	}
	return true
}
func (this *AssignPresetStudyPlansRequest_PlanDetail) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AssignPresetStudyPlansRequest_PlanDetail)
	if !ok {
		that2, ok := that.(AssignPresetStudyPlansRequest_PlanDetail)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PresetStudyPlanId != that1.PresetStudyPlanId {
		return false
	}
	if this.StartWeek != that1.StartWeek {
		return false
	}
	if !this.StartDate.Equal(that1.StartDate) {
		return false
	}
	return true
}
func (this *AssignPresetStudyPlansResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AssignPresetStudyPlansResponse)
	if !ok {
		that2, ok := that.(AssignPresetStudyPlansResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Successful != that1.Successful {
		return false
	}
	return true
}
func (this *RetrieveStudentStudyPlansRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveStudentStudyPlansRequest)
	if !ok {
		that2, ok := that.(RetrieveStudentStudyPlansRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StudentId != that1.StudentId {
		return false
	}
	if !this.From.Equal(that1.From) {
		return false
	}
	if !this.To.Equal(that1.To) {
		return false
	}
	return true
}
func (this *RetrieveStudentStudyPlansResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveStudentStudyPlansResponse)
	if !ok {
		that2, ok := that.(RetrieveStudentStudyPlansResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PlanWithStartDates) != len(that1.PlanWithStartDates) {
		return false
	}
	for i := range this.PlanWithStartDates {
		if !this.PlanWithStartDates[i].Equal(that1.PlanWithStartDates[i]) {
			return false
		}
	}
	return true
}
func (this *RetrieveStudentStudyPlansResponse_PlanWithStartDate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveStudentStudyPlansResponse_PlanWithStartDate)
	if !ok {
		that2, ok := that.(RetrieveStudentStudyPlansResponse_PlanWithStartDate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Plan.Equal(that1.Plan) {
		return false
	}
	if this.Week != that1.Week {
		return false
	}
	if !this.StartDate.Equal(that1.StartDate) {
		return false
	}
	return true
}
func (this *RetrieveStudentStudyPlanWeekliesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveStudentStudyPlanWeekliesRequest)
	if !ok {
		that2, ok := that.(RetrieveStudentStudyPlanWeekliesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StudentId != that1.StudentId {
		return false
	}
	if !this.From.Equal(that1.From) {
		return false
	}
	if !this.To.Equal(that1.To) {
		return false
	}
	if this.RetrieveAll != that1.RetrieveAll {
		return false
	}
	return true
}
func (this *RetrieveStudentStudyPlanWeekliesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveStudentStudyPlanWeekliesResponse)
	if !ok {
		that2, ok := that.(RetrieveStudentStudyPlanWeekliesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.TopicWithStartDates) != len(that1.TopicWithStartDates) {
		return false
	}
	for i := range this.TopicWithStartDates {
		if !this.TopicWithStartDates[i].Equal(that1.TopicWithStartDates[i]) {
			return false
		}
	}
	return true
}
func (this *RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate)
	if !ok {
		that2, ok := that.(RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TopicId != that1.TopicId {
		return false
	}
	if this.TopicName != that1.TopicName {
		return false
	}
	if !this.StartDate.Equal(that1.StartDate) {
		return false
	}
	if this.TotalLos != that1.TotalLos {
		return false
	}
	if this.TotalFinishedLos != that1.TotalFinishedLos {
		return false
	}
	if !this.AssignedBy.Equal(that1.AssignedBy) {
		return false
	}
	if !this.EndDate.Equal(that1.EndDate) {
		return false
	}
	return true
}
func (this *StudentStat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StudentStat)
	if !ok {
		that2, ok := that.(StudentStat)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalLearningTime != that1.TotalLearningTime {
		return false
	}
	if this.TotalLoFinished != that1.TotalLoFinished {
		return false
	}
	if this.TotalLo != that1.TotalLo {
		return false
	}
	if len(this.Crowns) != len(that1.Crowns) {
		return false
	}
	for i := range this.Crowns {
		if this.Crowns[i] != that1.Crowns[i] {
			return false
		}
	}
	return true
}
func (this *FindStudentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FindStudentRequest)
	if !ok {
		that2, ok := that.(FindStudentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	return true
}
func (this *FindStudentResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FindStudentResponse)
	if !ok {
		that2, ok := that.(FindStudentResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Profile.Equal(that1.Profile) {
		return false
	}
	return true
}
func (this *UpsertStudentCommentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertStudentCommentRequest)
	if !ok {
		that2, ok := that.(UpsertStudentCommentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.StudentComment.Equal(that1.StudentComment) {
		return false
	}
	return true
}
func (this *UpsertStudentCommentResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertStudentCommentResponse)
	if !ok {
		that2, ok := that.(UpsertStudentCommentResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Successful != that1.Successful {
		return false
	}
	return true
}
func (this *RetrieveStudentCommentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveStudentCommentRequest)
	if !ok {
		that2, ok := that.(RetrieveStudentCommentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StudentId != that1.StudentId {
		return false
	}
	return true
}
func (this *CommentInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CommentInfo)
	if !ok {
		that2, ok := that.(CommentInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CoachName != that1.CoachName {
		return false
	}
	if !this.StudentComment.Equal(that1.StudentComment) {
		return false
	}
	return true
}
func (this *RetrieveStudentCommentResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveStudentCommentResponse)
	if !ok {
		that2, ok := that.(RetrieveStudentCommentResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Comment) != len(that1.Comment) {
		return false
	}
	for i := range this.Comment {
		if !this.Comment[i].Equal(that1.Comment[i]) {
			return false
		}
	}
	return true
}
func (this *RetrieveDailyLOFinishedRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveDailyLOFinishedRequest)
	if !ok {
		that2, ok := that.(RetrieveDailyLOFinishedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StudentId != that1.StudentId {
		return false
	}
	if !this.From.Equal(that1.From) {
		return false
	}
	if !this.To.Equal(that1.To) {
		return false
	}
	return true
}
func (this *RetrieveDailyLOFinishedResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveDailyLOFinishedResponse)
	if !ok {
		that2, ok := that.(RetrieveDailyLOFinishedResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalLo != that1.TotalLo {
		return false
	}
	if len(this.Dailies) != len(that1.Dailies) {
		return false
	}
	for i := range this.Dailies {
		if !this.Dailies[i].Equal(that1.Dailies[i]) {
			return false
		}
	}
	return true
}
func (this *RetrieveDailyLOFinishedResponse_DailyLOFinished) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveDailyLOFinishedResponse_DailyLOFinished)
	if !ok {
		that2, ok := that.(RetrieveDailyLOFinishedResponse_DailyLOFinished)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalLoFinished != that1.TotalLoFinished {
		return false
	}
	if !this.Day.Equal(that1.Day) {
		return false
	}
	return true
}
func (this *StudyAheadTopic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StudyAheadTopic)
	if !ok {
		that2, ok := that.(StudyAheadTopic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TopicId != that1.TopicId {
		return false
	}
	if this.Week != that1.Week {
		return false
	}
	return true
}
func (this *RetrieveStudyAheadTopicsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveStudyAheadTopicsRequest)
	if !ok {
		that2, ok := that.(RetrieveStudyAheadTopicsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StudentId != that1.StudentId {
		return false
	}
	return true
}
func (this *RetrieveStudyAheadTopicsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveStudyAheadTopicsResponse)
	if !ok {
		that2, ok := that.(RetrieveStudyAheadTopicsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.StudyAheadTopics) != len(that1.StudyAheadTopics) {
		return false
	}
	for i := range this.StudyAheadTopics {
		if !this.StudyAheadTopics[i].Equal(that1.StudyAheadTopics[i]) {
			return false
		}
	}
	return true
}
func (this *CountTotalLOsFinishedRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CountTotalLOsFinishedRequest)
	if !ok {
		that2, ok := that.(CountTotalLOsFinishedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StudentId != that1.StudentId {
		return false
	}
	if !this.From.Equal(that1.From) {
		return false
	}
	if !this.To.Equal(that1.To) {
		return false
	}
	return true
}
func (this *CountTotalLOsFinishedResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CountTotalLOsFinishedResponse)
	if !ok {
		that2, ok := that.(CountTotalLOsFinishedResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalLosFinished != that1.TotalLosFinished {
		return false
	}
	return true
}
func (this *RetrieveArchivedTopicsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveArchivedTopicsRequest)
	if !ok {
		that2, ok := that.(RetrieveArchivedTopicsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StudentId != that1.StudentId {
		return false
	}
	return true
}
func (this *ArchivedTopic) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ArchivedTopic)
	if !ok {
		that2, ok := that.(ArchivedTopic)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TopicId != that1.TopicId {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *RetrieveArchivedTopicsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveArchivedTopicsResponse)
	if !ok {
		that2, ok := that.(RetrieveArchivedTopicsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Topics) != len(that1.Topics) {
		return false
	}
	for i := range this.Topics {
		if !this.Topics[i].Equal(that1.Topics[i]) {
			return false
		}
	}
	return true
}
func (this *StudentPermissionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StudentPermissionRequest)
	if !ok {
		that2, ok := that.(StudentPermissionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *PermissionAllowGrade) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PermissionAllowGrade)
	if !ok {
		that2, ok := that.(PermissionAllowGrade)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Subject != that1.Subject {
		return false
	}
	if len(this.PlanPrivileges) != len(that1.PlanPrivileges) {
		return false
	}
	for i := range this.PlanPrivileges {
		if this.PlanPrivileges[i] != that1.PlanPrivileges[i] {
			return false
		}
	}
	return true
}
func (this *Permission) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Permission)
	if !ok {
		that2, ok := that.(Permission)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PermissionAllowGrades) != len(that1.PermissionAllowGrades) {
		return false
	}
	for i := range this.PermissionAllowGrades {
		if !this.PermissionAllowGrades[i].Equal(that1.PermissionAllowGrades[i]) {
			return false
		}
	}
	return true
}
func (this *StudentPermissionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StudentPermissionResponse)
	if !ok {
		that2, ok := that.(StudentPermissionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Permissions) != len(that1.Permissions) {
		return false
	}
	for i := range this.Permissions {
		if !this.Permissions[i].Equal(that1.Permissions[i]) {
			return false
		}
	}
	return true
}
func (this *TopicOverdue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TopicOverdue)
	if !ok {
		that2, ok := that.(TopicOverdue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Topic.Equal(that1.Topic) {
		return false
	}
	if !this.DueDate.Equal(that1.DueDate) {
		return false
	}
	if !this.AssignedBy.Equal(that1.AssignedBy) {
		return false
	}
	return true
}
func (this *RetrieveOverdueTopicRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveOverdueTopicRequest)
	if !ok {
		that2, ok := that.(RetrieveOverdueTopicRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StudentId != that1.StudentId {
		return false
	}
	return true
}
func (this *RetrieveOverdueTopicResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveOverdueTopicResponse)
	if !ok {
		that2, ok := that.(RetrieveOverdueTopicResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Topics) != len(that1.Topics) {
		return false
	}
	for i := range this.Topics {
		if !this.Topics[i].Equal(that1.Topics[i]) {
			return false
		}
	}
	return true
}
func (this *RetrieveCompletedTopicWeekliesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveCompletedTopicWeekliesRequest)
	if !ok {
		that2, ok := that.(RetrieveCompletedTopicWeekliesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StudentId != that1.StudentId {
		return false
	}
	if !this.From.Equal(that1.From) {
		return false
	}
	if !this.To.Equal(that1.To) {
		return false
	}
	return true
}
func (this *RetrieveCompletedTopicWeekliesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveCompletedTopicWeekliesResponse)
	if !ok {
		that2, ok := that.(RetrieveCompletedTopicWeekliesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Topics) != len(that1.Topics) {
		return false
	}
	for i := range this.Topics {
		if !this.Topics[i].Equal(that1.Topics[i]) {
			return false
		}
	}
	if len(this.TopicsWithAssignBy) != len(that1.TopicsWithAssignBy) {
		return false
	}
	for i := range this.TopicsWithAssignBy {
		if !this.TopicsWithAssignBy[i].Equal(that1.TopicsWithAssignBy[i]) {
			return false
		}
	}
	return true
}
func (this *RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy)
	if !ok {
		that2, ok := that.(RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Topics.Equal(that1.Topics) {
		return false
	}
	if !this.AssignedBy.Equal(that1.AssignedBy) {
		return false
	}
	if !this.CompletedAt.Equal(that1.CompletedAt) {
		return false
	}
	return true
}
func (this *SubmitAssignmentRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubmitAssignmentRequest)
	if !ok {
		that2, ok := that.(SubmitAssignmentRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TopicId != that1.TopicId {
		return false
	}
	if !this.Content.Equal(that1.Content) {
		return false
	}
	if len(this.Attachments) != len(that1.Attachments) {
		return false
	}
	for i := range this.Attachments {
		if !this.Attachments[i].Equal(that1.Attachments[i]) {
			return false
		}
	}
	return true
}
func (this *SubmitAssignmentResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubmitAssignmentResponse)
	if !ok {
		that2, ok := that.(SubmitAssignmentResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SubmissionId != that1.SubmissionId {
		return false
	}
	return true
}
func (this *ListStudentSubmissionsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListStudentSubmissionsRequest)
	if !ok {
		that2, ok := that.(ListStudentSubmissionsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TopicId != that1.TopicId {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if !this.OffsetId.Equal(that1.OffsetId) {
		return false
	}
	return true
}
func (this *RegisterRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pb.RegisterRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "Grade: "+fmt.Sprintf("%#v", this.Grade)+",\n")
	s = append(s, "TargetUniversity: "+fmt.Sprintf("%#v", this.TargetUniversity)+",\n")
	if this.School != nil {
		s = append(s, "School: "+fmt.Sprintf("%#v", this.School)+",\n")
	}
	s = append(s, "ActivationCode: "+fmt.Sprintf("%#v", this.ActivationCode)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RegisterResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.RegisterResponse{")
	s = append(s, "Successful: "+fmt.Sprintf("%#v", this.Successful)+",\n")
	s = append(s, "OnTrial: "+fmt.Sprintf("%#v", this.OnTrial)+",\n")
	if this.BillingDate != nil {
		s = append(s, "BillingDate: "+fmt.Sprintf("%#v", this.BillingDate)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetStudentProfileRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetStudentProfileRequest{")
	s = append(s, "StudentIds: "+fmt.Sprintf("%#v", this.StudentIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StudentProfile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 23)
	s = append(s, "&pb.StudentProfile{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	s = append(s, "Grade: "+fmt.Sprintf("%#v", this.Grade)+",\n")
	s = append(s, "TargetUniversity: "+fmt.Sprintf("%#v", this.TargetUniversity)+",\n")
	s = append(s, "Avatar: "+fmt.Sprintf("%#v", this.Avatar)+",\n")
	if this.Birthday != nil {
		s = append(s, "Birthday: "+fmt.Sprintf("%#v", this.Birthday)+",\n")
	}
	s = append(s, "Biography: "+fmt.Sprintf("%#v", this.Biography)+",\n")
	s = append(s, "PaymentStatus: "+fmt.Sprintf("%#v", this.PaymentStatus)+",\n")
	if this.BillingDate != nil {
		s = append(s, "BillingDate: "+fmt.Sprintf("%#v", this.BillingDate)+",\n")
	}
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.School != nil {
		s = append(s, "School: "+fmt.Sprintf("%#v", this.School)+",\n")
	}
	s = append(s, "PlanId: "+fmt.Sprintf("%#v", this.PlanId)+",\n")
	if this.BillingAt != nil {
		s = append(s, "BillingAt: "+fmt.Sprintf("%#v", this.BillingAt)+",\n")
	}
	s = append(s, "IsTester: "+fmt.Sprintf("%#v", this.IsTester)+",\n")
	s = append(s, "FacebookId: "+fmt.Sprintf("%#v", this.FacebookId)+",\n")
	s = append(s, "Divs: "+fmt.Sprintf("%#v", this.Divs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetStudentProfileResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetStudentProfileResponse{")
	if this.Datas != nil {
		s = append(s, "Datas: "+fmt.Sprintf("%#v", this.Datas)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetStudentProfileResponse_Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.GetStudentProfileResponse_Data{")
	if this.Profile != nil {
		s = append(s, "Profile: "+fmt.Sprintf("%#v", this.Profile)+",\n")
	}
	s = append(s, "CoachId: "+fmt.Sprintf("%#v", this.CoachId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateProfileRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.UpdateProfileRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Grade: "+fmt.Sprintf("%#v", this.Grade)+",\n")
	s = append(s, "TargetUniversity: "+fmt.Sprintf("%#v", this.TargetUniversity)+",\n")
	s = append(s, "Avatar: "+fmt.Sprintf("%#v", this.Avatar)+",\n")
	if this.Birthday != nil {
		s = append(s, "Birthday: "+fmt.Sprintf("%#v", this.Birthday)+",\n")
	}
	s = append(s, "Biography: "+fmt.Sprintf("%#v", this.Biography)+",\n")
	if this.School != nil {
		s = append(s, "School: "+fmt.Sprintf("%#v", this.School)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateProfileResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpdateProfileResponse{")
	s = append(s, "Successful: "+fmt.Sprintf("%#v", this.Successful)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveLearningProgressRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.RetrieveLearningProgressRequest{")
	s = append(s, "StudentId: "+fmt.Sprintf("%#v", this.StudentId)+",\n")
	s = append(s, "SessionId: "+fmt.Sprintf("%#v", this.SessionId)+",\n")
	if this.From != nil {
		s = append(s, "From: "+fmt.Sprintf("%#v", this.From)+",\n")
	}
	if this.To != nil {
		s = append(s, "To: "+fmt.Sprintf("%#v", this.To)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveLearningProgressResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RetrieveLearningProgressResponse{")
	if this.Dailies != nil {
		s = append(s, "Dailies: "+fmt.Sprintf("%#v", this.Dailies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveLearningProgressResponse_DailyLearningTime) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.RetrieveLearningProgressResponse_DailyLearningTime{")
	s = append(s, "TotalTimeSpentInDay: "+fmt.Sprintf("%#v", this.TotalTimeSpentInDay)+",\n")
	if this.Day != nil {
		s = append(s, "Day: "+fmt.Sprintf("%#v", this.Day)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StudentEventLog) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.StudentEventLog{")
	s = append(s, "EventId: "+fmt.Sprintf("%#v", this.EventId)+",\n")
	s = append(s, "EventType: "+fmt.Sprintf("%#v", this.EventType)+",\n")
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.Payload != nil {
		s = append(s, "Payload: "+fmt.Sprintf("%#v", this.Payload)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StudentComment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.StudentComment{")
	s = append(s, "CommentId: "+fmt.Sprintf("%#v", this.CommentId)+",\n")
	s = append(s, "CoachId: "+fmt.Sprintf("%#v", this.CoachId)+",\n")
	s = append(s, "StudentId: "+fmt.Sprintf("%#v", this.StudentId)+",\n")
	s = append(s, "CommentContent: "+fmt.Sprintf("%#v", this.CommentContent)+",\n")
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AssignToCoachRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.AssignToCoachRequest{")
	s = append(s, "CoachId: "+fmt.Sprintf("%#v", this.CoachId)+",\n")
	s = append(s, "StudentId: "+fmt.Sprintf("%#v", this.StudentId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AssignToCoachResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.AssignToCoachResponse{")
	s = append(s, "Successful: "+fmt.Sprintf("%#v", this.Successful)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrievePresetStudyPlansRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.RetrievePresetStudyPlansRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "Grade: "+fmt.Sprintf("%#v", this.Grade)+",\n")
	s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrievePresetStudyPlansResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RetrievePresetStudyPlansResponse{")
	if this.PresetStudyPlans != nil {
		s = append(s, "PresetStudyPlans: "+fmt.Sprintf("%#v", this.PresetStudyPlans)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrievePresetStudyPlanWeekliesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RetrievePresetStudyPlanWeekliesRequest{")
	s = append(s, "PresetStudyPlanId: "+fmt.Sprintf("%#v", this.PresetStudyPlanId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrievePresetStudyPlanWeekliesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RetrievePresetStudyPlanWeekliesResponse{")
	if this.PresetStudyPlanWeeklies != nil {
		s = append(s, "PresetStudyPlanWeeklies: "+fmt.Sprintf("%#v", this.PresetStudyPlanWeeklies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AssignPresetStudyPlansRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.AssignPresetStudyPlansRequest{")
	s = append(s, "StudentId: "+fmt.Sprintf("%#v", this.StudentId)+",\n")
	if this.PlanDetails != nil {
		s = append(s, "PlanDetails: "+fmt.Sprintf("%#v", this.PlanDetails)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AssignPresetStudyPlansRequest_PlanDetail) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.AssignPresetStudyPlansRequest_PlanDetail{")
	s = append(s, "PresetStudyPlanId: "+fmt.Sprintf("%#v", this.PresetStudyPlanId)+",\n")
	s = append(s, "StartWeek: "+fmt.Sprintf("%#v", this.StartWeek)+",\n")
	if this.StartDate != nil {
		s = append(s, "StartDate: "+fmt.Sprintf("%#v", this.StartDate)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AssignPresetStudyPlansResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.AssignPresetStudyPlansResponse{")
	s = append(s, "Successful: "+fmt.Sprintf("%#v", this.Successful)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveStudentStudyPlansRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.RetrieveStudentStudyPlansRequest{")
	s = append(s, "StudentId: "+fmt.Sprintf("%#v", this.StudentId)+",\n")
	if this.From != nil {
		s = append(s, "From: "+fmt.Sprintf("%#v", this.From)+",\n")
	}
	if this.To != nil {
		s = append(s, "To: "+fmt.Sprintf("%#v", this.To)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveStudentStudyPlansResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RetrieveStudentStudyPlansResponse{")
	if this.PlanWithStartDates != nil {
		s = append(s, "PlanWithStartDates: "+fmt.Sprintf("%#v", this.PlanWithStartDates)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveStudentStudyPlansResponse_PlanWithStartDate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.RetrieveStudentStudyPlansResponse_PlanWithStartDate{")
	if this.Plan != nil {
		s = append(s, "Plan: "+fmt.Sprintf("%#v", this.Plan)+",\n")
	}
	s = append(s, "Week: "+fmt.Sprintf("%#v", this.Week)+",\n")
	if this.StartDate != nil {
		s = append(s, "StartDate: "+fmt.Sprintf("%#v", this.StartDate)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveStudentStudyPlanWeekliesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.RetrieveStudentStudyPlanWeekliesRequest{")
	s = append(s, "StudentId: "+fmt.Sprintf("%#v", this.StudentId)+",\n")
	if this.From != nil {
		s = append(s, "From: "+fmt.Sprintf("%#v", this.From)+",\n")
	}
	if this.To != nil {
		s = append(s, "To: "+fmt.Sprintf("%#v", this.To)+",\n")
	}
	s = append(s, "RetrieveAll: "+fmt.Sprintf("%#v", this.RetrieveAll)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveStudentStudyPlanWeekliesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RetrieveStudentStudyPlanWeekliesResponse{")
	if this.TopicWithStartDates != nil {
		s = append(s, "TopicWithStartDates: "+fmt.Sprintf("%#v", this.TopicWithStartDates)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate{")
	s = append(s, "TopicId: "+fmt.Sprintf("%#v", this.TopicId)+",\n")
	s = append(s, "TopicName: "+fmt.Sprintf("%#v", this.TopicName)+",\n")
	if this.StartDate != nil {
		s = append(s, "StartDate: "+fmt.Sprintf("%#v", this.StartDate)+",\n")
	}
	s = append(s, "TotalLos: "+fmt.Sprintf("%#v", this.TotalLos)+",\n")
	s = append(s, "TotalFinishedLos: "+fmt.Sprintf("%#v", this.TotalFinishedLos)+",\n")
	if this.AssignedBy != nil {
		s = append(s, "AssignedBy: "+fmt.Sprintf("%#v", this.AssignedBy)+",\n")
	}
	if this.EndDate != nil {
		s = append(s, "EndDate: "+fmt.Sprintf("%#v", this.EndDate)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StudentStat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.StudentStat{")
	s = append(s, "TotalLearningTime: "+fmt.Sprintf("%#v", this.TotalLearningTime)+",\n")
	s = append(s, "TotalLoFinished: "+fmt.Sprintf("%#v", this.TotalLoFinished)+",\n")
	s = append(s, "TotalLo: "+fmt.Sprintf("%#v", this.TotalLo)+",\n")
	keysForCrowns := make([]string, 0, len(this.Crowns))
	for k, _ := range this.Crowns {
		keysForCrowns = append(keysForCrowns, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForCrowns)
	mapStringForCrowns := "map[string]int32{"
	for _, k := range keysForCrowns {
		mapStringForCrowns += fmt.Sprintf("%#v: %#v,", k, this.Crowns[k])
	}
	mapStringForCrowns += "}"
	if this.Crowns != nil {
		s = append(s, "Crowns: "+mapStringForCrowns+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FindStudentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.FindStudentRequest{")
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FindStudentResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.FindStudentResponse{")
	if this.Profile != nil {
		s = append(s, "Profile: "+fmt.Sprintf("%#v", this.Profile)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertStudentCommentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpsertStudentCommentRequest{")
	if this.StudentComment != nil {
		s = append(s, "StudentComment: "+fmt.Sprintf("%#v", this.StudentComment)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertStudentCommentResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpsertStudentCommentResponse{")
	s = append(s, "Successful: "+fmt.Sprintf("%#v", this.Successful)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveStudentCommentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RetrieveStudentCommentRequest{")
	s = append(s, "StudentId: "+fmt.Sprintf("%#v", this.StudentId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CommentInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CommentInfo{")
	s = append(s, "CoachName: "+fmt.Sprintf("%#v", this.CoachName)+",\n")
	if this.StudentComment != nil {
		s = append(s, "StudentComment: "+fmt.Sprintf("%#v", this.StudentComment)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveStudentCommentResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RetrieveStudentCommentResponse{")
	if this.Comment != nil {
		s = append(s, "Comment: "+fmt.Sprintf("%#v", this.Comment)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveDailyLOFinishedRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.RetrieveDailyLOFinishedRequest{")
	s = append(s, "StudentId: "+fmt.Sprintf("%#v", this.StudentId)+",\n")
	if this.From != nil {
		s = append(s, "From: "+fmt.Sprintf("%#v", this.From)+",\n")
	}
	if this.To != nil {
		s = append(s, "To: "+fmt.Sprintf("%#v", this.To)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveDailyLOFinishedResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.RetrieveDailyLOFinishedResponse{")
	s = append(s, "TotalLo: "+fmt.Sprintf("%#v", this.TotalLo)+",\n")
	if this.Dailies != nil {
		s = append(s, "Dailies: "+fmt.Sprintf("%#v", this.Dailies)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveDailyLOFinishedResponse_DailyLOFinished) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.RetrieveDailyLOFinishedResponse_DailyLOFinished{")
	s = append(s, "TotalLoFinished: "+fmt.Sprintf("%#v", this.TotalLoFinished)+",\n")
	if this.Day != nil {
		s = append(s, "Day: "+fmt.Sprintf("%#v", this.Day)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StudyAheadTopic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.StudyAheadTopic{")
	s = append(s, "TopicId: "+fmt.Sprintf("%#v", this.TopicId)+",\n")
	s = append(s, "Week: "+fmt.Sprintf("%#v", this.Week)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveStudyAheadTopicsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RetrieveStudyAheadTopicsRequest{")
	s = append(s, "StudentId: "+fmt.Sprintf("%#v", this.StudentId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveStudyAheadTopicsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RetrieveStudyAheadTopicsResponse{")
	if this.StudyAheadTopics != nil {
		s = append(s, "StudyAheadTopics: "+fmt.Sprintf("%#v", this.StudyAheadTopics)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CountTotalLOsFinishedRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.CountTotalLOsFinishedRequest{")
	s = append(s, "StudentId: "+fmt.Sprintf("%#v", this.StudentId)+",\n")
	if this.From != nil {
		s = append(s, "From: "+fmt.Sprintf("%#v", this.From)+",\n")
	}
	if this.To != nil {
		s = append(s, "To: "+fmt.Sprintf("%#v", this.To)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CountTotalLOsFinishedResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CountTotalLOsFinishedResponse{")
	s = append(s, "TotalLosFinished: "+fmt.Sprintf("%#v", this.TotalLosFinished)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveArchivedTopicsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RetrieveArchivedTopicsRequest{")
	s = append(s, "StudentId: "+fmt.Sprintf("%#v", this.StudentId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ArchivedTopic) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.ArchivedTopic{")
	s = append(s, "TopicId: "+fmt.Sprintf("%#v", this.TopicId)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveArchivedTopicsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RetrieveArchivedTopicsResponse{")
	if this.Topics != nil {
		s = append(s, "Topics: "+fmt.Sprintf("%#v", this.Topics)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StudentPermissionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.StudentPermissionRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PermissionAllowGrade) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.PermissionAllowGrade{")
	s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	s = append(s, "PlanPrivileges: "+fmt.Sprintf("%#v", this.PlanPrivileges)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Permission) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.Permission{")
	if this.PermissionAllowGrades != nil {
		s = append(s, "PermissionAllowGrades: "+fmt.Sprintf("%#v", this.PermissionAllowGrades)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StudentPermissionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.StudentPermissionResponse{")
	keysForPermissions := make([]int32, 0, len(this.Permissions))
	for k, _ := range this.Permissions {
		keysForPermissions = append(keysForPermissions, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForPermissions)
	mapStringForPermissions := "map[int32]*Permission{"
	for _, k := range keysForPermissions {
		mapStringForPermissions += fmt.Sprintf("%#v: %#v,", k, this.Permissions[k])
	}
	mapStringForPermissions += "}"
	if this.Permissions != nil {
		s = append(s, "Permissions: "+mapStringForPermissions+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TopicOverdue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.TopicOverdue{")
	if this.Topic != nil {
		s = append(s, "Topic: "+fmt.Sprintf("%#v", this.Topic)+",\n")
	}
	if this.DueDate != nil {
		s = append(s, "DueDate: "+fmt.Sprintf("%#v", this.DueDate)+",\n")
	}
	if this.AssignedBy != nil {
		s = append(s, "AssignedBy: "+fmt.Sprintf("%#v", this.AssignedBy)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveOverdueTopicRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RetrieveOverdueTopicRequest{")
	s = append(s, "StudentId: "+fmt.Sprintf("%#v", this.StudentId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveOverdueTopicResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RetrieveOverdueTopicResponse{")
	if this.Topics != nil {
		s = append(s, "Topics: "+fmt.Sprintf("%#v", this.Topics)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveCompletedTopicWeekliesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.RetrieveCompletedTopicWeekliesRequest{")
	s = append(s, "StudentId: "+fmt.Sprintf("%#v", this.StudentId)+",\n")
	if this.From != nil {
		s = append(s, "From: "+fmt.Sprintf("%#v", this.From)+",\n")
	}
	if this.To != nil {
		s = append(s, "To: "+fmt.Sprintf("%#v", this.To)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveCompletedTopicWeekliesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.RetrieveCompletedTopicWeekliesResponse{")
	if this.Topics != nil {
		s = append(s, "Topics: "+fmt.Sprintf("%#v", this.Topics)+",\n")
	}
	if this.TopicsWithAssignBy != nil {
		s = append(s, "TopicsWithAssignBy: "+fmt.Sprintf("%#v", this.TopicsWithAssignBy)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy{")
	if this.Topics != nil {
		s = append(s, "Topics: "+fmt.Sprintf("%#v", this.Topics)+",\n")
	}
	if this.AssignedBy != nil {
		s = append(s, "AssignedBy: "+fmt.Sprintf("%#v", this.AssignedBy)+",\n")
	}
	if this.CompletedAt != nil {
		s = append(s, "CompletedAt: "+fmt.Sprintf("%#v", this.CompletedAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SubmitAssignmentRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.SubmitAssignmentRequest{")
	s = append(s, "TopicId: "+fmt.Sprintf("%#v", this.TopicId)+",\n")
	if this.Content != nil {
		s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	}
	if this.Attachments != nil {
		s = append(s, "Attachments: "+fmt.Sprintf("%#v", this.Attachments)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SubmitAssignmentResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SubmitAssignmentResponse{")
	s = append(s, "SubmissionId: "+fmt.Sprintf("%#v", this.SubmissionId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListStudentSubmissionsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.ListStudentSubmissionsRequest{")
	s = append(s, "TopicId: "+fmt.Sprintf("%#v", this.TopicId)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	if this.OffsetId != nil {
		s = append(s, "OffsetId: "+fmt.Sprintf("%#v", this.OffsetId)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringStudent(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StudentClient is the client API for Student service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StudentClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	GetStudentProfile(ctx context.Context, in *GetStudentProfileRequest, opts ...grpc.CallOption) (*GetStudentProfileResponse, error)
	UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error)
	FindStudent(ctx context.Context, in *FindStudentRequest, opts ...grpc.CallOption) (*FindStudentResponse, error)
	RetrieveDailyLOFinished(ctx context.Context, in *RetrieveDailyLOFinishedRequest, opts ...grpc.CallOption) (*RetrieveDailyLOFinishedResponse, error)
	RetrieveStudyAheadTopics(ctx context.Context, in *RetrieveStudyAheadTopicsRequest, opts ...grpc.CallOption) (*RetrieveStudyAheadTopicsResponse, error)
	RetrieveArchivedTopics(ctx context.Context, in *RetrieveArchivedTopicsRequest, opts ...grpc.CallOption) (*RetrieveArchivedTopicsResponse, error)
	CountTotalLOsFinished(ctx context.Context, in *CountTotalLOsFinishedRequest, opts ...grpc.CallOption) (*CountTotalLOsFinishedResponse, error)
	RetrieveLearningProgress(ctx context.Context, in *RetrieveLearningProgressRequest, opts ...grpc.CallOption) (*RetrieveLearningProgressResponse, error)
	AssignToCoach(ctx context.Context, in *AssignToCoachRequest, opts ...grpc.CallOption) (*AssignToCoachResponse, error)
	RetrievePresetStudyPlans(ctx context.Context, in *RetrievePresetStudyPlansRequest, opts ...grpc.CallOption) (*RetrievePresetStudyPlansResponse, error)
	RetrievePresetStudyPlanWeeklies(ctx context.Context, in *RetrievePresetStudyPlanWeekliesRequest, opts ...grpc.CallOption) (*RetrievePresetStudyPlanWeekliesResponse, error)
	AssignPresetStudyPlans(ctx context.Context, in *AssignPresetStudyPlansRequest, opts ...grpc.CallOption) (*AssignPresetStudyPlansResponse, error)
	RetrieveStudentStudyPlans(ctx context.Context, in *RetrieveStudentStudyPlansRequest, opts ...grpc.CallOption) (*RetrieveStudentStudyPlansResponse, error)
	RetrieveStudentStudyPlanWeeklies(ctx context.Context, in *RetrieveStudentStudyPlanWeekliesRequest, opts ...grpc.CallOption) (*RetrieveStudentStudyPlanWeekliesResponse, error)
	UpsertStudentComment(ctx context.Context, in *UpsertStudentCommentRequest, opts ...grpc.CallOption) (*UpsertStudentCommentResponse, error)
	RetrieveStudentComment(ctx context.Context, in *RetrieveStudentCommentRequest, opts ...grpc.CallOption) (*RetrieveStudentCommentResponse, error)
	StudentPermission(ctx context.Context, in *StudentPermissionRequest, opts ...grpc.CallOption) (*StudentPermissionResponse, error)
	RetrieveOverdueTopic(ctx context.Context, in *RetrieveOverdueTopicRequest, opts ...grpc.CallOption) (*RetrieveOverdueTopicResponse, error)
	RetrieveCompletedTopicWeeklies(ctx context.Context, in *RetrieveCompletedTopicWeekliesRequest, opts ...grpc.CallOption) (*RetrieveCompletedTopicWeekliesResponse, error)
	SubmitAssignment(ctx context.Context, in *SubmitAssignmentRequest, opts ...grpc.CallOption) (*SubmitAssignmentResponse, error)
	ListSubmissions(ctx context.Context, in *ListStudentSubmissionsRequest, opts ...grpc.CallOption) (*ListSubmissionsResponse, error)
}

type studentClient struct {
	cc *grpc.ClientConn
}

func NewStudentClient(cc *grpc.ClientConn) StudentClient {
	return &studentClient{cc}
}

// Deprecated: Do not use.
func (c *studentClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Student/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentClient) GetStudentProfile(ctx context.Context, in *GetStudentProfileRequest, opts ...grpc.CallOption) (*GetStudentProfileResponse, error) {
	out := new(GetStudentProfileResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Student/GetStudentProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentClient) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error) {
	out := new(UpdateProfileResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Student/UpdateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentClient) FindStudent(ctx context.Context, in *FindStudentRequest, opts ...grpc.CallOption) (*FindStudentResponse, error) {
	out := new(FindStudentResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Student/FindStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentClient) RetrieveDailyLOFinished(ctx context.Context, in *RetrieveDailyLOFinishedRequest, opts ...grpc.CallOption) (*RetrieveDailyLOFinishedResponse, error) {
	out := new(RetrieveDailyLOFinishedResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Student/RetrieveDailyLOFinished", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *studentClient) RetrieveStudyAheadTopics(ctx context.Context, in *RetrieveStudyAheadTopicsRequest, opts ...grpc.CallOption) (*RetrieveStudyAheadTopicsResponse, error) {
	out := new(RetrieveStudyAheadTopicsResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Student/RetrieveStudyAheadTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *studentClient) RetrieveArchivedTopics(ctx context.Context, in *RetrieveArchivedTopicsRequest, opts ...grpc.CallOption) (*RetrieveArchivedTopicsResponse, error) {
	out := new(RetrieveArchivedTopicsResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Student/RetrieveArchivedTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentClient) CountTotalLOsFinished(ctx context.Context, in *CountTotalLOsFinishedRequest, opts ...grpc.CallOption) (*CountTotalLOsFinishedResponse, error) {
	out := new(CountTotalLOsFinishedResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Student/CountTotalLOsFinished", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentClient) RetrieveLearningProgress(ctx context.Context, in *RetrieveLearningProgressRequest, opts ...grpc.CallOption) (*RetrieveLearningProgressResponse, error) {
	out := new(RetrieveLearningProgressResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Student/RetrieveLearningProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *studentClient) AssignToCoach(ctx context.Context, in *AssignToCoachRequest, opts ...grpc.CallOption) (*AssignToCoachResponse, error) {
	out := new(AssignToCoachResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Student/AssignToCoach", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentClient) RetrievePresetStudyPlans(ctx context.Context, in *RetrievePresetStudyPlansRequest, opts ...grpc.CallOption) (*RetrievePresetStudyPlansResponse, error) {
	out := new(RetrievePresetStudyPlansResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Student/RetrievePresetStudyPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentClient) RetrievePresetStudyPlanWeeklies(ctx context.Context, in *RetrievePresetStudyPlanWeekliesRequest, opts ...grpc.CallOption) (*RetrievePresetStudyPlanWeekliesResponse, error) {
	out := new(RetrievePresetStudyPlanWeekliesResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Student/RetrievePresetStudyPlanWeeklies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *studentClient) AssignPresetStudyPlans(ctx context.Context, in *AssignPresetStudyPlansRequest, opts ...grpc.CallOption) (*AssignPresetStudyPlansResponse, error) {
	out := new(AssignPresetStudyPlansResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Student/AssignPresetStudyPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentClient) RetrieveStudentStudyPlans(ctx context.Context, in *RetrieveStudentStudyPlansRequest, opts ...grpc.CallOption) (*RetrieveStudentStudyPlansResponse, error) {
	out := new(RetrieveStudentStudyPlansResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Student/RetrieveStudentStudyPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentClient) RetrieveStudentStudyPlanWeeklies(ctx context.Context, in *RetrieveStudentStudyPlanWeekliesRequest, opts ...grpc.CallOption) (*RetrieveStudentStudyPlanWeekliesResponse, error) {
	out := new(RetrieveStudentStudyPlanWeekliesResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Student/RetrieveStudentStudyPlanWeeklies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentClient) UpsertStudentComment(ctx context.Context, in *UpsertStudentCommentRequest, opts ...grpc.CallOption) (*UpsertStudentCommentResponse, error) {
	out := new(UpsertStudentCommentResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Student/UpsertStudentComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentClient) RetrieveStudentComment(ctx context.Context, in *RetrieveStudentCommentRequest, opts ...grpc.CallOption) (*RetrieveStudentCommentResponse, error) {
	out := new(RetrieveStudentCommentResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Student/RetrieveStudentComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentClient) StudentPermission(ctx context.Context, in *StudentPermissionRequest, opts ...grpc.CallOption) (*StudentPermissionResponse, error) {
	out := new(StudentPermissionResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Student/StudentPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *studentClient) RetrieveOverdueTopic(ctx context.Context, in *RetrieveOverdueTopicRequest, opts ...grpc.CallOption) (*RetrieveOverdueTopicResponse, error) {
	out := new(RetrieveOverdueTopicResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Student/RetrieveOverdueTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentClient) RetrieveCompletedTopicWeeklies(ctx context.Context, in *RetrieveCompletedTopicWeekliesRequest, opts ...grpc.CallOption) (*RetrieveCompletedTopicWeekliesResponse, error) {
	out := new(RetrieveCompletedTopicWeekliesResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Student/RetrieveCompletedTopicWeeklies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *studentClient) SubmitAssignment(ctx context.Context, in *SubmitAssignmentRequest, opts ...grpc.CallOption) (*SubmitAssignmentResponse, error) {
	out := new(SubmitAssignmentResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Student/SubmitAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *studentClient) ListSubmissions(ctx context.Context, in *ListStudentSubmissionsRequest, opts ...grpc.CallOption) (*ListSubmissionsResponse, error) {
	out := new(ListSubmissionsResponse)
	err := c.cc.Invoke(ctx, "/manabie.bob.Student/ListSubmissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentServer is the server API for Student service.
type StudentServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	GetStudentProfile(context.Context, *GetStudentProfileRequest) (*GetStudentProfileResponse, error)
	UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error)
	FindStudent(context.Context, *FindStudentRequest) (*FindStudentResponse, error)
	RetrieveDailyLOFinished(context.Context, *RetrieveDailyLOFinishedRequest) (*RetrieveDailyLOFinishedResponse, error)
	RetrieveStudyAheadTopics(context.Context, *RetrieveStudyAheadTopicsRequest) (*RetrieveStudyAheadTopicsResponse, error)
	RetrieveArchivedTopics(context.Context, *RetrieveArchivedTopicsRequest) (*RetrieveArchivedTopicsResponse, error)
	CountTotalLOsFinished(context.Context, *CountTotalLOsFinishedRequest) (*CountTotalLOsFinishedResponse, error)
	RetrieveLearningProgress(context.Context, *RetrieveLearningProgressRequest) (*RetrieveLearningProgressResponse, error)
	AssignToCoach(context.Context, *AssignToCoachRequest) (*AssignToCoachResponse, error)
	RetrievePresetStudyPlans(context.Context, *RetrievePresetStudyPlansRequest) (*RetrievePresetStudyPlansResponse, error)
	RetrievePresetStudyPlanWeeklies(context.Context, *RetrievePresetStudyPlanWeekliesRequest) (*RetrievePresetStudyPlanWeekliesResponse, error)
	AssignPresetStudyPlans(context.Context, *AssignPresetStudyPlansRequest) (*AssignPresetStudyPlansResponse, error)
	RetrieveStudentStudyPlans(context.Context, *RetrieveStudentStudyPlansRequest) (*RetrieveStudentStudyPlansResponse, error)
	RetrieveStudentStudyPlanWeeklies(context.Context, *RetrieveStudentStudyPlanWeekliesRequest) (*RetrieveStudentStudyPlanWeekliesResponse, error)
	UpsertStudentComment(context.Context, *UpsertStudentCommentRequest) (*UpsertStudentCommentResponse, error)
	RetrieveStudentComment(context.Context, *RetrieveStudentCommentRequest) (*RetrieveStudentCommentResponse, error)
	StudentPermission(context.Context, *StudentPermissionRequest) (*StudentPermissionResponse, error)
	RetrieveOverdueTopic(context.Context, *RetrieveOverdueTopicRequest) (*RetrieveOverdueTopicResponse, error)
	RetrieveCompletedTopicWeeklies(context.Context, *RetrieveCompletedTopicWeekliesRequest) (*RetrieveCompletedTopicWeekliesResponse, error)
	SubmitAssignment(context.Context, *SubmitAssignmentRequest) (*SubmitAssignmentResponse, error)
	ListSubmissions(context.Context, *ListStudentSubmissionsRequest) (*ListSubmissionsResponse, error)
}

// UnimplementedStudentServer can be embedded to have forward compatible implementations.
type UnimplementedStudentServer struct {
}

func (*UnimplementedStudentServer) Register(ctx context.Context, req *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedStudentServer) GetStudentProfile(ctx context.Context, req *GetStudentProfileRequest) (*GetStudentProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentProfile not implemented")
}
func (*UnimplementedStudentServer) UpdateProfile(ctx context.Context, req *UpdateProfileRequest) (*UpdateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (*UnimplementedStudentServer) FindStudent(ctx context.Context, req *FindStudentRequest) (*FindStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindStudent not implemented")
}
func (*UnimplementedStudentServer) RetrieveDailyLOFinished(ctx context.Context, req *RetrieveDailyLOFinishedRequest) (*RetrieveDailyLOFinishedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveDailyLOFinished not implemented")
}
func (*UnimplementedStudentServer) RetrieveStudyAheadTopics(ctx context.Context, req *RetrieveStudyAheadTopicsRequest) (*RetrieveStudyAheadTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveStudyAheadTopics not implemented")
}
func (*UnimplementedStudentServer) RetrieveArchivedTopics(ctx context.Context, req *RetrieveArchivedTopicsRequest) (*RetrieveArchivedTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveArchivedTopics not implemented")
}
func (*UnimplementedStudentServer) CountTotalLOsFinished(ctx context.Context, req *CountTotalLOsFinishedRequest) (*CountTotalLOsFinishedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountTotalLOsFinished not implemented")
}
func (*UnimplementedStudentServer) RetrieveLearningProgress(ctx context.Context, req *RetrieveLearningProgressRequest) (*RetrieveLearningProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveLearningProgress not implemented")
}
func (*UnimplementedStudentServer) AssignToCoach(ctx context.Context, req *AssignToCoachRequest) (*AssignToCoachResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignToCoach not implemented")
}
func (*UnimplementedStudentServer) RetrievePresetStudyPlans(ctx context.Context, req *RetrievePresetStudyPlansRequest) (*RetrievePresetStudyPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrievePresetStudyPlans not implemented")
}
func (*UnimplementedStudentServer) RetrievePresetStudyPlanWeeklies(ctx context.Context, req *RetrievePresetStudyPlanWeekliesRequest) (*RetrievePresetStudyPlanWeekliesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrievePresetStudyPlanWeeklies not implemented")
}
func (*UnimplementedStudentServer) AssignPresetStudyPlans(ctx context.Context, req *AssignPresetStudyPlansRequest) (*AssignPresetStudyPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignPresetStudyPlans not implemented")
}
func (*UnimplementedStudentServer) RetrieveStudentStudyPlans(ctx context.Context, req *RetrieveStudentStudyPlansRequest) (*RetrieveStudentStudyPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveStudentStudyPlans not implemented")
}
func (*UnimplementedStudentServer) RetrieveStudentStudyPlanWeeklies(ctx context.Context, req *RetrieveStudentStudyPlanWeekliesRequest) (*RetrieveStudentStudyPlanWeekliesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveStudentStudyPlanWeeklies not implemented")
}
func (*UnimplementedStudentServer) UpsertStudentComment(ctx context.Context, req *UpsertStudentCommentRequest) (*UpsertStudentCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertStudentComment not implemented")
}
func (*UnimplementedStudentServer) RetrieveStudentComment(ctx context.Context, req *RetrieveStudentCommentRequest) (*RetrieveStudentCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveStudentComment not implemented")
}
func (*UnimplementedStudentServer) StudentPermission(ctx context.Context, req *StudentPermissionRequest) (*StudentPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StudentPermission not implemented")
}
func (*UnimplementedStudentServer) RetrieveOverdueTopic(ctx context.Context, req *RetrieveOverdueTopicRequest) (*RetrieveOverdueTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveOverdueTopic not implemented")
}
func (*UnimplementedStudentServer) RetrieveCompletedTopicWeeklies(ctx context.Context, req *RetrieveCompletedTopicWeekliesRequest) (*RetrieveCompletedTopicWeekliesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveCompletedTopicWeeklies not implemented")
}
func (*UnimplementedStudentServer) SubmitAssignment(ctx context.Context, req *SubmitAssignmentRequest) (*SubmitAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitAssignment not implemented")
}
func (*UnimplementedStudentServer) ListSubmissions(ctx context.Context, req *ListStudentSubmissionsRequest) (*ListSubmissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubmissions not implemented")
}

func RegisterStudentServer(s *grpc.Server, srv StudentServer) {
	s.RegisterService(&_Student_serviceDesc, srv)
}

func _Student_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Student/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Student_GetStudentProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServer).GetStudentProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Student/GetStudentProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServer).GetStudentProfile(ctx, req.(*GetStudentProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Student_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Student/UpdateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServer).UpdateProfile(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Student_FindStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServer).FindStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Student/FindStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServer).FindStudent(ctx, req.(*FindStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Student_RetrieveDailyLOFinished_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveDailyLOFinishedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServer).RetrieveDailyLOFinished(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Student/RetrieveDailyLOFinished",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServer).RetrieveDailyLOFinished(ctx, req.(*RetrieveDailyLOFinishedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Student_RetrieveStudyAheadTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveStudyAheadTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServer).RetrieveStudyAheadTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Student/RetrieveStudyAheadTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServer).RetrieveStudyAheadTopics(ctx, req.(*RetrieveStudyAheadTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Student_RetrieveArchivedTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveArchivedTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServer).RetrieveArchivedTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Student/RetrieveArchivedTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServer).RetrieveArchivedTopics(ctx, req.(*RetrieveArchivedTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Student_CountTotalLOsFinished_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountTotalLOsFinishedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServer).CountTotalLOsFinished(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Student/CountTotalLOsFinished",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServer).CountTotalLOsFinished(ctx, req.(*CountTotalLOsFinishedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Student_RetrieveLearningProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveLearningProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServer).RetrieveLearningProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Student/RetrieveLearningProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServer).RetrieveLearningProgress(ctx, req.(*RetrieveLearningProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Student_AssignToCoach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignToCoachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServer).AssignToCoach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Student/AssignToCoach",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServer).AssignToCoach(ctx, req.(*AssignToCoachRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Student_RetrievePresetStudyPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrievePresetStudyPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServer).RetrievePresetStudyPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Student/RetrievePresetStudyPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServer).RetrievePresetStudyPlans(ctx, req.(*RetrievePresetStudyPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Student_RetrievePresetStudyPlanWeeklies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrievePresetStudyPlanWeekliesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServer).RetrievePresetStudyPlanWeeklies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Student/RetrievePresetStudyPlanWeeklies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServer).RetrievePresetStudyPlanWeeklies(ctx, req.(*RetrievePresetStudyPlanWeekliesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Student_AssignPresetStudyPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignPresetStudyPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServer).AssignPresetStudyPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Student/AssignPresetStudyPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServer).AssignPresetStudyPlans(ctx, req.(*AssignPresetStudyPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Student_RetrieveStudentStudyPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveStudentStudyPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServer).RetrieveStudentStudyPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Student/RetrieveStudentStudyPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServer).RetrieveStudentStudyPlans(ctx, req.(*RetrieveStudentStudyPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Student_RetrieveStudentStudyPlanWeeklies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveStudentStudyPlanWeekliesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServer).RetrieveStudentStudyPlanWeeklies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Student/RetrieveStudentStudyPlanWeeklies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServer).RetrieveStudentStudyPlanWeeklies(ctx, req.(*RetrieveStudentStudyPlanWeekliesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Student_UpsertStudentComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertStudentCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServer).UpsertStudentComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Student/UpsertStudentComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServer).UpsertStudentComment(ctx, req.(*UpsertStudentCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Student_RetrieveStudentComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveStudentCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServer).RetrieveStudentComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Student/RetrieveStudentComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServer).RetrieveStudentComment(ctx, req.(*RetrieveStudentCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Student_StudentPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServer).StudentPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Student/StudentPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServer).StudentPermission(ctx, req.(*StudentPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Student_RetrieveOverdueTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveOverdueTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServer).RetrieveOverdueTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Student/RetrieveOverdueTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServer).RetrieveOverdueTopic(ctx, req.(*RetrieveOverdueTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Student_RetrieveCompletedTopicWeeklies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveCompletedTopicWeekliesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServer).RetrieveCompletedTopicWeeklies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Student/RetrieveCompletedTopicWeeklies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServer).RetrieveCompletedTopicWeeklies(ctx, req.(*RetrieveCompletedTopicWeekliesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Student_SubmitAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServer).SubmitAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Student/SubmitAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServer).SubmitAssignment(ctx, req.(*SubmitAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Student_ListSubmissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStudentSubmissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServer).ListSubmissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.bob.Student/ListSubmissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServer).ListSubmissions(ctx, req.(*ListStudentSubmissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Student_serviceDesc = grpc.ServiceDesc{
	ServiceName: "manabie.bob.Student",
	HandlerType: (*StudentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Student_Register_Handler,
		},
		{
			MethodName: "GetStudentProfile",
			Handler:    _Student_GetStudentProfile_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _Student_UpdateProfile_Handler,
		},
		{
			MethodName: "FindStudent",
			Handler:    _Student_FindStudent_Handler,
		},
		{
			MethodName: "RetrieveDailyLOFinished",
			Handler:    _Student_RetrieveDailyLOFinished_Handler,
		},
		{
			MethodName: "RetrieveStudyAheadTopics",
			Handler:    _Student_RetrieveStudyAheadTopics_Handler,
		},
		{
			MethodName: "RetrieveArchivedTopics",
			Handler:    _Student_RetrieveArchivedTopics_Handler,
		},
		{
			MethodName: "CountTotalLOsFinished",
			Handler:    _Student_CountTotalLOsFinished_Handler,
		},
		{
			MethodName: "RetrieveLearningProgress",
			Handler:    _Student_RetrieveLearningProgress_Handler,
		},
		{
			MethodName: "AssignToCoach",
			Handler:    _Student_AssignToCoach_Handler,
		},
		{
			MethodName: "RetrievePresetStudyPlans",
			Handler:    _Student_RetrievePresetStudyPlans_Handler,
		},
		{
			MethodName: "RetrievePresetStudyPlanWeeklies",
			Handler:    _Student_RetrievePresetStudyPlanWeeklies_Handler,
		},
		{
			MethodName: "AssignPresetStudyPlans",
			Handler:    _Student_AssignPresetStudyPlans_Handler,
		},
		{
			MethodName: "RetrieveStudentStudyPlans",
			Handler:    _Student_RetrieveStudentStudyPlans_Handler,
		},
		{
			MethodName: "RetrieveStudentStudyPlanWeeklies",
			Handler:    _Student_RetrieveStudentStudyPlanWeeklies_Handler,
		},
		{
			MethodName: "UpsertStudentComment",
			Handler:    _Student_UpsertStudentComment_Handler,
		},
		{
			MethodName: "RetrieveStudentComment",
			Handler:    _Student_RetrieveStudentComment_Handler,
		},
		{
			MethodName: "StudentPermission",
			Handler:    _Student_StudentPermission_Handler,
		},
		{
			MethodName: "RetrieveOverdueTopic",
			Handler:    _Student_RetrieveOverdueTopic_Handler,
		},
		{
			MethodName: "RetrieveCompletedTopicWeeklies",
			Handler:    _Student_RetrieveCompletedTopicWeeklies_Handler,
		},
		{
			MethodName: "SubmitAssignment",
			Handler:    _Student_SubmitAssignment_Handler,
		},
		{
			MethodName: "ListSubmissions",
			Handler:    _Student_ListSubmissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "student.proto",
}

func (m *RegisterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ActivationCode) > 0 {
		i -= len(m.ActivationCode)
		copy(dAtA[i:], m.ActivationCode)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.ActivationCode)))
		i--
		dAtA[i] = 0x42
	}
	if m.School != nil {
		{
			size, err := m.School.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TargetUniversity) > 0 {
		i -= len(m.TargetUniversity)
		copy(dAtA[i:], m.TargetUniversity)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.TargetUniversity)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Grade) > 0 {
		i -= len(m.Grade)
		copy(dAtA[i:], m.Grade)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.Grade)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Country != 0 {
		i = encodeVarintStudent(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RegisterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BillingDate != nil {
		{
			size, err := m.BillingDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.OnTrial {
		i--
		if m.OnTrial {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Successful {
		i--
		if m.Successful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetStudentProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStudentProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStudentProfileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudentIds) > 0 {
		for iNdEx := len(m.StudentIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StudentIds[iNdEx])
			copy(dAtA[i:], m.StudentIds[iNdEx])
			i = encodeVarintStudent(dAtA, i, uint64(len(m.StudentIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StudentProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudentProfile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudentProfile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Divs) > 0 {
		dAtA4 := make([]byte, len(m.Divs)*10)
		var j3 int
		for _, num1 := range m.Divs {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintStudent(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.FacebookId) > 0 {
		i -= len(m.FacebookId)
		copy(dAtA[i:], m.FacebookId)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.FacebookId)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.IsTester {
		i--
		if m.IsTester {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.BillingAt != nil {
		{
			size, err := m.BillingAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.PlanId) > 0 {
		i -= len(m.PlanId)
		copy(dAtA[i:], m.PlanId)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.PlanId)))
		i--
		dAtA[i] = 0x7a
	}
	if m.School != nil {
		{
			size, err := m.School.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.BillingDate != nil {
		{
			size, err := m.BillingDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.PaymentStatus != 0 {
		i = encodeVarintStudent(dAtA, i, uint64(m.PaymentStatus))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Biography) > 0 {
		i -= len(m.Biography)
		copy(dAtA[i:], m.Biography)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.Biography)))
		i--
		dAtA[i] = 0x52
	}
	if m.Birthday != nil {
		{
			size, err := m.Birthday.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TargetUniversity) > 0 {
		i -= len(m.TargetUniversity)
		copy(dAtA[i:], m.TargetUniversity)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.TargetUniversity)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Grade) > 0 {
		i -= len(m.Grade)
		copy(dAtA[i:], m.Grade)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.Grade)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x22
	}
	if m.Country != 0 {
		i = encodeVarintStudent(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetStudentProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStudentProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStudentProfileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for iNdEx := len(m.Datas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Datas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStudent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetStudentProfileResponse_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetStudentProfileResponse_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetStudentProfileResponse_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CoachId) > 0 {
		i -= len(m.CoachId)
		copy(dAtA[i:], m.CoachId)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.CoachId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Profile != nil {
		{
			size, err := m.Profile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateProfileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.School != nil {
		{
			size, err := m.School.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Biography) > 0 {
		i -= len(m.Biography)
		copy(dAtA[i:], m.Biography)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.Biography)))
		i--
		dAtA[i] = 0x32
	}
	if m.Birthday != nil {
		{
			size, err := m.Birthday.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TargetUniversity) > 0 {
		i -= len(m.TargetUniversity)
		copy(dAtA[i:], m.TargetUniversity)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.TargetUniversity)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Grade) > 0 {
		i -= len(m.Grade)
		copy(dAtA[i:], m.Grade)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.Grade)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateProfileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Successful {
		i--
		if m.Successful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveLearningProgressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveLearningProgressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveLearningProgressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.To != nil {
		{
			size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveLearningProgressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveLearningProgressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveLearningProgressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Dailies) > 0 {
		for iNdEx := len(m.Dailies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dailies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStudent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveLearningProgressResponse_DailyLearningTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveLearningProgressResponse_DailyLearningTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveLearningProgressResponse_DailyLearningTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Day != nil {
		{
			size, err := m.Day.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TotalTimeSpentInDay != 0 {
		i = encodeVarintStudent(dAtA, i, uint64(m.TotalTimeSpentInDay))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StudentEventLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudentEventLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudentEventLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size, err := m.Payload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EventType) > 0 {
		i -= len(m.EventType)
		copy(dAtA[i:], m.EventType)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.EventType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EventId) > 0 {
		i -= len(m.EventId)
		copy(dAtA[i:], m.EventId)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.EventId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StudentComment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudentComment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudentComment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CommentContent) > 0 {
		i -= len(m.CommentContent)
		copy(dAtA[i:], m.CommentContent)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.CommentContent)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CoachId) > 0 {
		i -= len(m.CoachId)
		copy(dAtA[i:], m.CoachId)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.CoachId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CommentId) > 0 {
		i -= len(m.CommentId)
		copy(dAtA[i:], m.CommentId)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.CommentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AssignToCoachRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssignToCoachRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssignToCoachRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CoachId) > 0 {
		i -= len(m.CoachId)
		copy(dAtA[i:], m.CoachId)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.CoachId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AssignToCoachResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssignToCoachResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssignToCoachResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Successful {
		i--
		if m.Successful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RetrievePresetStudyPlansRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrievePresetStudyPlansRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrievePresetStudyPlansRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Subject != 0 {
		i = encodeVarintStudent(dAtA, i, uint64(m.Subject))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Grade) > 0 {
		i -= len(m.Grade)
		copy(dAtA[i:], m.Grade)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.Grade)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Country != 0 {
		i = encodeVarintStudent(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrievePresetStudyPlansResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrievePresetStudyPlansResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrievePresetStudyPlansResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PresetStudyPlans) > 0 {
		for iNdEx := len(m.PresetStudyPlans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PresetStudyPlans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStudent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RetrievePresetStudyPlanWeekliesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrievePresetStudyPlanWeekliesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrievePresetStudyPlanWeekliesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PresetStudyPlanId) > 0 {
		i -= len(m.PresetStudyPlanId)
		copy(dAtA[i:], m.PresetStudyPlanId)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.PresetStudyPlanId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrievePresetStudyPlanWeekliesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrievePresetStudyPlanWeekliesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrievePresetStudyPlanWeekliesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PresetStudyPlanWeeklies) > 0 {
		for iNdEx := len(m.PresetStudyPlanWeeklies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PresetStudyPlanWeeklies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStudent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AssignPresetStudyPlansRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssignPresetStudyPlansRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssignPresetStudyPlansRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PlanDetails) > 0 {
		for iNdEx := len(m.PlanDetails) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PlanDetails[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStudent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AssignPresetStudyPlansRequest_PlanDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssignPresetStudyPlansRequest_PlanDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssignPresetStudyPlansRequest_PlanDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartDate != nil {
		{
			size, err := m.StartDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.StartWeek != 0 {
		i = encodeVarintStudent(dAtA, i, uint64(m.StartWeek))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PresetStudyPlanId) > 0 {
		i -= len(m.PresetStudyPlanId)
		copy(dAtA[i:], m.PresetStudyPlanId)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.PresetStudyPlanId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AssignPresetStudyPlansResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssignPresetStudyPlansResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssignPresetStudyPlansResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Successful {
		i--
		if m.Successful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveStudentStudyPlansRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveStudentStudyPlansRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveStudentStudyPlansRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.To != nil {
		{
			size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveStudentStudyPlansResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveStudentStudyPlansResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveStudentStudyPlansResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PlanWithStartDates) > 0 {
		for iNdEx := len(m.PlanWithStartDates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PlanWithStartDates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStudent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveStudentStudyPlansResponse_PlanWithStartDate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveStudentStudyPlansResponse_PlanWithStartDate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveStudentStudyPlansResponse_PlanWithStartDate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartDate != nil {
		{
			size, err := m.StartDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Week != 0 {
		i = encodeVarintStudent(dAtA, i, uint64(m.Week))
		i--
		dAtA[i] = 0x10
	}
	if m.Plan != nil {
		{
			size, err := m.Plan.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveStudentStudyPlanWeekliesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveStudentStudyPlanWeekliesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveStudentStudyPlanWeekliesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RetrieveAll {
		i--
		if m.RetrieveAll {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.To != nil {
		{
			size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveStudentStudyPlanWeekliesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveStudentStudyPlanWeekliesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveStudentStudyPlanWeekliesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TopicWithStartDates) > 0 {
		for iNdEx := len(m.TopicWithStartDates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TopicWithStartDates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStudent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndDate != nil {
		{
			size, err := m.EndDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.AssignedBy != nil {
		{
			size, err := m.AssignedBy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.TotalFinishedLos != 0 {
		i = encodeVarintStudent(dAtA, i, uint64(m.TotalFinishedLos))
		i--
		dAtA[i] = 0x28
	}
	if m.TotalLos != 0 {
		i = encodeVarintStudent(dAtA, i, uint64(m.TotalLos))
		i--
		dAtA[i] = 0x20
	}
	if m.StartDate != nil {
		{
			size, err := m.StartDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TopicName) > 0 {
		i -= len(m.TopicName)
		copy(dAtA[i:], m.TopicName)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.TopicName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TopicId) > 0 {
		i -= len(m.TopicId)
		copy(dAtA[i:], m.TopicId)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.TopicId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StudentStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudentStat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudentStat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Crowns) > 0 {
		for k := range m.Crowns {
			v := m.Crowns[k]
			baseI := i
			i = encodeVarintStudent(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintStudent(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintStudent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.TotalLo != 0 {
		i = encodeVarintStudent(dAtA, i, uint64(m.TotalLo))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalLoFinished != 0 {
		i = encodeVarintStudent(dAtA, i, uint64(m.TotalLoFinished))
		i--
		dAtA[i] = 0x10
	}
	if m.TotalLearningTime != 0 {
		i = encodeVarintStudent(dAtA, i, uint64(m.TotalLearningTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FindStudentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindStudentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FindStudentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FindStudentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindStudentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FindStudentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Profile != nil {
		{
			size, err := m.Profile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpsertStudentCommentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertStudentCommentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertStudentCommentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StudentComment != nil {
		{
			size, err := m.StudentComment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpsertStudentCommentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertStudentCommentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertStudentCommentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Successful {
		i--
		if m.Successful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveStudentCommentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveStudentCommentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveStudentCommentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommentInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommentInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StudentComment != nil {
		{
			size, err := m.StudentComment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CoachName) > 0 {
		i -= len(m.CoachName)
		copy(dAtA[i:], m.CoachName)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.CoachName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveStudentCommentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveStudentCommentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveStudentCommentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Comment) > 0 {
		for iNdEx := len(m.Comment) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Comment[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStudent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveDailyLOFinishedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveDailyLOFinishedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveDailyLOFinishedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.To != nil {
		{
			size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveDailyLOFinishedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveDailyLOFinishedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveDailyLOFinishedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Dailies) > 0 {
		for iNdEx := len(m.Dailies) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dailies[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStudent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.TotalLo != 0 {
		i = encodeVarintStudent(dAtA, i, uint64(m.TotalLo))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveDailyLOFinishedResponse_DailyLOFinished) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveDailyLOFinishedResponse_DailyLOFinished) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveDailyLOFinishedResponse_DailyLOFinished) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Day != nil {
		{
			size, err := m.Day.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TotalLoFinished != 0 {
		i = encodeVarintStudent(dAtA, i, uint64(m.TotalLoFinished))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StudyAheadTopic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudyAheadTopic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudyAheadTopic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Week != 0 {
		i = encodeVarintStudent(dAtA, i, uint64(m.Week))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TopicId) > 0 {
		i -= len(m.TopicId)
		copy(dAtA[i:], m.TopicId)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.TopicId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveStudyAheadTopicsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveStudyAheadTopicsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveStudyAheadTopicsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveStudyAheadTopicsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveStudyAheadTopicsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveStudyAheadTopicsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudyAheadTopics) > 0 {
		for iNdEx := len(m.StudyAheadTopics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StudyAheadTopics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStudent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CountTotalLOsFinishedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountTotalLOsFinishedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountTotalLOsFinishedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.To != nil {
		{
			size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CountTotalLOsFinishedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CountTotalLOsFinishedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CountTotalLOsFinishedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalLosFinished != 0 {
		i = encodeVarintStudent(dAtA, i, uint64(m.TotalLosFinished))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveArchivedTopicsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveArchivedTopicsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveArchivedTopicsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ArchivedTopic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArchivedTopic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArchivedTopic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintStudent(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TopicId) > 0 {
		i -= len(m.TopicId)
		copy(dAtA[i:], m.TopicId)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.TopicId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveArchivedTopicsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveArchivedTopicsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveArchivedTopicsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Topics) > 0 {
		for iNdEx := len(m.Topics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Topics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStudent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StudentPermissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudentPermissionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudentPermissionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PermissionAllowGrade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PermissionAllowGrade) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PermissionAllowGrade) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PlanPrivileges) > 0 {
		dAtA39 := make([]byte, len(m.PlanPrivileges)*10)
		var j38 int
		for _, num := range m.PlanPrivileges {
			for num >= 1<<7 {
				dAtA39[j38] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j38++
			}
			dAtA39[j38] = uint8(num)
			j38++
		}
		i -= j38
		copy(dAtA[i:], dAtA39[:j38])
		i = encodeVarintStudent(dAtA, i, uint64(j38))
		i--
		dAtA[i] = 0x12
	}
	if m.Subject != 0 {
		i = encodeVarintStudent(dAtA, i, uint64(m.Subject))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Permission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Permission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Permission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PermissionAllowGrades) > 0 {
		for iNdEx := len(m.PermissionAllowGrades) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PermissionAllowGrades[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStudent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StudentPermissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudentPermissionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudentPermissionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Permissions) > 0 {
		for k := range m.Permissions {
			v := m.Permissions[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintStudent(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintStudent(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintStudent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TopicOverdue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TopicOverdue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TopicOverdue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssignedBy != nil {
		{
			size, err := m.AssignedBy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.DueDate != nil {
		{
			size, err := m.DueDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Topic != nil {
		{
			size, err := m.Topic.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveOverdueTopicRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveOverdueTopicRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveOverdueTopicRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveOverdueTopicResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveOverdueTopicResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveOverdueTopicResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Topics) > 0 {
		for iNdEx := len(m.Topics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Topics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStudent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveCompletedTopicWeekliesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveCompletedTopicWeekliesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveCompletedTopicWeekliesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.To != nil {
		{
			size, err := m.To.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.From != nil {
		{
			size, err := m.From.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveCompletedTopicWeekliesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveCompletedTopicWeekliesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveCompletedTopicWeekliesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TopicsWithAssignBy) > 0 {
		for iNdEx := len(m.TopicsWithAssignBy) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TopicsWithAssignBy[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStudent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Topics) > 0 {
		for iNdEx := len(m.Topics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Topics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStudent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CompletedAt != nil {
		{
			size, err := m.CompletedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.AssignedBy != nil {
		{
			size, err := m.AssignedBy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Topics != nil {
		{
			size, err := m.Topics.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubmitAssignmentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitAssignmentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmitAssignmentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attachments) > 0 {
		for iNdEx := len(m.Attachments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attachments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStudent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TopicId) > 0 {
		i -= len(m.TopicId)
		copy(dAtA[i:], m.TopicId)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.TopicId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubmitAssignmentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubmitAssignmentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubmitAssignmentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubmissionId) > 0 {
		i -= len(m.SubmissionId)
		copy(dAtA[i:], m.SubmissionId)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.SubmissionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListStudentSubmissionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListStudentSubmissionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListStudentSubmissionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OffsetId != nil {
		{
			size, err := m.OffsetId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStudent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Limit != 0 {
		i = encodeVarintStudent(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TopicId) > 0 {
		i -= len(m.TopicId)
		copy(dAtA[i:], m.TopicId)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.TopicId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStudent(dAtA []byte, offset int, v uint64) int {
	offset -= sovStudent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RegisterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.Country != 0 {
		n += 1 + sovStudent(uint64(m.Country))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	l = len(m.Grade)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	l = len(m.TargetUniversity)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.School != nil {
		l = m.School.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	l = len(m.ActivationCode)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	return n
}

func (m *RegisterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Successful {
		n += 2
	}
	if m.OnTrial {
		n += 2
	}
	if m.BillingDate != nil {
		l = m.BillingDate.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	return n
}

func (m *GetStudentProfileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StudentIds) > 0 {
		for _, s := range m.StudentIds {
			l = len(s)
			n += 1 + l + sovStudent(uint64(l))
		}
	}
	return n
}

func (m *StudentProfile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.Country != 0 {
		n += 1 + sovStudent(uint64(m.Country))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	l = len(m.Grade)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	l = len(m.TargetUniversity)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.Birthday != nil {
		l = m.Birthday.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	l = len(m.Biography)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.PaymentStatus != 0 {
		n += 1 + sovStudent(uint64(m.PaymentStatus))
	}
	if m.BillingDate != nil {
		l = m.BillingDate.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.School != nil {
		l = m.School.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	l = len(m.PlanId)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.BillingAt != nil {
		l = m.BillingAt.Size()
		n += 2 + l + sovStudent(uint64(l))
	}
	if m.IsTester {
		n += 3
	}
	l = len(m.FacebookId)
	if l > 0 {
		n += 2 + l + sovStudent(uint64(l))
	}
	if len(m.Divs) > 0 {
		l = 0
		for _, e := range m.Divs {
			l += sovStudent(uint64(e))
		}
		n += 2 + sovStudent(uint64(l)) + l
	}
	return n
}

func (m *GetStudentProfileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Datas) > 0 {
		for _, e := range m.Datas {
			l = e.Size()
			n += 1 + l + sovStudent(uint64(l))
		}
	}
	return n
}

func (m *GetStudentProfileResponse_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Profile != nil {
		l = m.Profile.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	l = len(m.CoachId)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	return n
}

func (m *UpdateProfileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	l = len(m.Grade)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	l = len(m.TargetUniversity)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.Birthday != nil {
		l = m.Birthday.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	l = len(m.Biography)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.School != nil {
		l = m.School.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	return n
}

func (m *UpdateProfileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Successful {
		n += 2
	}
	return n
}

func (m *RetrieveLearningProgressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	return n
}

func (m *RetrieveLearningProgressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Dailies) > 0 {
		for _, e := range m.Dailies {
			l = e.Size()
			n += 1 + l + sovStudent(uint64(l))
		}
	}
	return n
}

func (m *RetrieveLearningProgressResponse_DailyLearningTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalTimeSpentInDay != 0 {
		n += 1 + sovStudent(uint64(m.TotalTimeSpentInDay))
	}
	if m.Day != nil {
		l = m.Day.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	return n
}

func (m *StudentEventLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EventId)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	l = len(m.EventType)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.Payload != nil {
		l = m.Payload.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	return n
}

func (m *StudentComment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CommentId)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	l = len(m.CoachId)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	l = len(m.CommentContent)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	return n
}

func (m *AssignToCoachRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CoachId)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	return n
}

func (m *AssignToCoachResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Successful {
		n += 2
	}
	return n
}

func (m *RetrievePresetStudyPlansRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.Country != 0 {
		n += 1 + sovStudent(uint64(m.Country))
	}
	l = len(m.Grade)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.Subject != 0 {
		n += 1 + sovStudent(uint64(m.Subject))
	}
	return n
}

func (m *RetrievePresetStudyPlansResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PresetStudyPlans) > 0 {
		for _, e := range m.PresetStudyPlans {
			l = e.Size()
			n += 1 + l + sovStudent(uint64(l))
		}
	}
	return n
}

func (m *RetrievePresetStudyPlanWeekliesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PresetStudyPlanId)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	return n
}

func (m *RetrievePresetStudyPlanWeekliesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PresetStudyPlanWeeklies) > 0 {
		for _, e := range m.PresetStudyPlanWeeklies {
			l = e.Size()
			n += 1 + l + sovStudent(uint64(l))
		}
	}
	return n
}

func (m *AssignPresetStudyPlansRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	if len(m.PlanDetails) > 0 {
		for _, e := range m.PlanDetails {
			l = e.Size()
			n += 1 + l + sovStudent(uint64(l))
		}
	}
	return n
}

func (m *AssignPresetStudyPlansRequest_PlanDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PresetStudyPlanId)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.StartWeek != 0 {
		n += 1 + sovStudent(uint64(m.StartWeek))
	}
	if m.StartDate != nil {
		l = m.StartDate.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	return n
}

func (m *AssignPresetStudyPlansResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Successful {
		n += 2
	}
	return n
}

func (m *RetrieveStudentStudyPlansRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	return n
}

func (m *RetrieveStudentStudyPlansResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PlanWithStartDates) > 0 {
		for _, e := range m.PlanWithStartDates {
			l = e.Size()
			n += 1 + l + sovStudent(uint64(l))
		}
	}
	return n
}

func (m *RetrieveStudentStudyPlansResponse_PlanWithStartDate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Plan != nil {
		l = m.Plan.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.Week != 0 {
		n += 1 + sovStudent(uint64(m.Week))
	}
	if m.StartDate != nil {
		l = m.StartDate.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	return n
}

func (m *RetrieveStudentStudyPlanWeekliesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.RetrieveAll {
		n += 2
	}
	return n
}

func (m *RetrieveStudentStudyPlanWeekliesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TopicWithStartDates) > 0 {
		for _, e := range m.TopicWithStartDates {
			l = e.Size()
			n += 1 + l + sovStudent(uint64(l))
		}
	}
	return n
}

func (m *RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TopicId)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	l = len(m.TopicName)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.StartDate != nil {
		l = m.StartDate.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.TotalLos != 0 {
		n += 1 + sovStudent(uint64(m.TotalLos))
	}
	if m.TotalFinishedLos != 0 {
		n += 1 + sovStudent(uint64(m.TotalFinishedLos))
	}
	if m.AssignedBy != nil {
		l = m.AssignedBy.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.EndDate != nil {
		l = m.EndDate.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	return n
}

func (m *StudentStat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalLearningTime != 0 {
		n += 1 + sovStudent(uint64(m.TotalLearningTime))
	}
	if m.TotalLoFinished != 0 {
		n += 1 + sovStudent(uint64(m.TotalLoFinished))
	}
	if m.TotalLo != 0 {
		n += 1 + sovStudent(uint64(m.TotalLo))
	}
	if len(m.Crowns) > 0 {
		for k, v := range m.Crowns {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovStudent(uint64(len(k))) + 1 + sovStudent(uint64(v))
			n += mapEntrySize + 1 + sovStudent(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *FindStudentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	return n
}

func (m *FindStudentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Profile != nil {
		l = m.Profile.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	return n
}

func (m *UpsertStudentCommentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StudentComment != nil {
		l = m.StudentComment.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	return n
}

func (m *UpsertStudentCommentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Successful {
		n += 2
	}
	return n
}

func (m *RetrieveStudentCommentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	return n
}

func (m *CommentInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CoachName)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.StudentComment != nil {
		l = m.StudentComment.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	return n
}

func (m *RetrieveStudentCommentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Comment) > 0 {
		for _, e := range m.Comment {
			l = e.Size()
			n += 1 + l + sovStudent(uint64(l))
		}
	}
	return n
}

func (m *RetrieveDailyLOFinishedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	return n
}

func (m *RetrieveDailyLOFinishedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalLo != 0 {
		n += 1 + sovStudent(uint64(m.TotalLo))
	}
	if len(m.Dailies) > 0 {
		for _, e := range m.Dailies {
			l = e.Size()
			n += 1 + l + sovStudent(uint64(l))
		}
	}
	return n
}

func (m *RetrieveDailyLOFinishedResponse_DailyLOFinished) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalLoFinished != 0 {
		n += 1 + sovStudent(uint64(m.TotalLoFinished))
	}
	if m.Day != nil {
		l = m.Day.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	return n
}

func (m *StudyAheadTopic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TopicId)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.Week != 0 {
		n += 1 + sovStudent(uint64(m.Week))
	}
	return n
}

func (m *RetrieveStudyAheadTopicsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	return n
}

func (m *RetrieveStudyAheadTopicsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StudyAheadTopics) > 0 {
		for _, e := range m.StudyAheadTopics {
			l = e.Size()
			n += 1 + l + sovStudent(uint64(l))
		}
	}
	return n
}

func (m *CountTotalLOsFinishedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	return n
}

func (m *CountTotalLOsFinishedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalLosFinished != 0 {
		n += 1 + sovStudent(uint64(m.TotalLosFinished))
	}
	return n
}

func (m *RetrieveArchivedTopicsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	return n
}

func (m *ArchivedTopic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TopicId)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovStudent(uint64(m.Status))
	}
	return n
}

func (m *RetrieveArchivedTopicsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Topics) > 0 {
		for _, e := range m.Topics {
			l = e.Size()
			n += 1 + l + sovStudent(uint64(l))
		}
	}
	return n
}

func (m *StudentPermissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PermissionAllowGrade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Subject != 0 {
		n += 1 + sovStudent(uint64(m.Subject))
	}
	if len(m.PlanPrivileges) > 0 {
		l = 0
		for _, e := range m.PlanPrivileges {
			l += sovStudent(uint64(e))
		}
		n += 1 + sovStudent(uint64(l)) + l
	}
	return n
}

func (m *Permission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PermissionAllowGrades) > 0 {
		for _, e := range m.PermissionAllowGrades {
			l = e.Size()
			n += 1 + l + sovStudent(uint64(l))
		}
	}
	return n
}

func (m *StudentPermissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Permissions) > 0 {
		for k, v := range m.Permissions {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovStudent(uint64(l))
			}
			mapEntrySize := 1 + sovStudent(uint64(k)) + l
			n += mapEntrySize + 1 + sovStudent(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *TopicOverdue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Topic != nil {
		l = m.Topic.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.DueDate != nil {
		l = m.DueDate.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.AssignedBy != nil {
		l = m.AssignedBy.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	return n
}

func (m *RetrieveOverdueTopicRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	return n
}

func (m *RetrieveOverdueTopicResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Topics) > 0 {
		for _, e := range m.Topics {
			l = e.Size()
			n += 1 + l + sovStudent(uint64(l))
		}
	}
	return n
}

func (m *RetrieveCompletedTopicWeekliesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	return n
}

func (m *RetrieveCompletedTopicWeekliesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Topics) > 0 {
		for _, e := range m.Topics {
			l = e.Size()
			n += 1 + l + sovStudent(uint64(l))
		}
	}
	if len(m.TopicsWithAssignBy) > 0 {
		for _, e := range m.TopicsWithAssignBy {
			l = e.Size()
			n += 1 + l + sovStudent(uint64(l))
		}
	}
	return n
}

func (m *RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Topics != nil {
		l = m.Topics.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.AssignedBy != nil {
		l = m.AssignedBy.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.CompletedAt != nil {
		l = m.CompletedAt.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	return n
}

func (m *SubmitAssignmentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TopicId)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	if len(m.Attachments) > 0 {
		for _, e := range m.Attachments {
			l = e.Size()
			n += 1 + l + sovStudent(uint64(l))
		}
	}
	return n
}

func (m *SubmitAssignmentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubmissionId)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	return n
}

func (m *ListStudentSubmissionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TopicId)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovStudent(uint64(m.Limit))
	}
	if m.OffsetId != nil {
		l = m.OffsetId.Size()
		n += 1 + l + sovStudent(uint64(l))
	}
	return n
}

func sovStudent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStudent(x uint64) (n int) {
	return sovStudent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RegisterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Grade:` + fmt.Sprintf("%v", this.Grade) + `,`,
		`TargetUniversity:` + fmt.Sprintf("%v", this.TargetUniversity) + `,`,
		`School:` + strings.Replace(fmt.Sprintf("%v", this.School), "School", "School", 1) + `,`,
		`ActivationCode:` + fmt.Sprintf("%v", this.ActivationCode) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RegisterResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RegisterResponse{`,
		`Successful:` + fmt.Sprintf("%v", this.Successful) + `,`,
		`OnTrial:` + fmt.Sprintf("%v", this.OnTrial) + `,`,
		`BillingDate:` + strings.Replace(fmt.Sprintf("%v", this.BillingDate), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetStudentProfileRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetStudentProfileRequest{`,
		`StudentIds:` + fmt.Sprintf("%v", this.StudentIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StudentProfile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StudentProfile{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Grade:` + fmt.Sprintf("%v", this.Grade) + `,`,
		`TargetUniversity:` + fmt.Sprintf("%v", this.TargetUniversity) + `,`,
		`Avatar:` + fmt.Sprintf("%v", this.Avatar) + `,`,
		`Birthday:` + strings.Replace(fmt.Sprintf("%v", this.Birthday), "Timestamp", "types.Timestamp", 1) + `,`,
		`Biography:` + fmt.Sprintf("%v", this.Biography) + `,`,
		`PaymentStatus:` + fmt.Sprintf("%v", this.PaymentStatus) + `,`,
		`BillingDate:` + strings.Replace(fmt.Sprintf("%v", this.BillingDate), "Timestamp", "types.Timestamp", 1) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`School:` + strings.Replace(fmt.Sprintf("%v", this.School), "School", "School", 1) + `,`,
		`PlanId:` + fmt.Sprintf("%v", this.PlanId) + `,`,
		`BillingAt:` + strings.Replace(fmt.Sprintf("%v", this.BillingAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`IsTester:` + fmt.Sprintf("%v", this.IsTester) + `,`,
		`FacebookId:` + fmt.Sprintf("%v", this.FacebookId) + `,`,
		`Divs:` + fmt.Sprintf("%v", this.Divs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetStudentProfileResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDatas := "[]*GetStudentProfileResponse_Data{"
	for _, f := range this.Datas {
		repeatedStringForDatas += strings.Replace(fmt.Sprintf("%v", f), "GetStudentProfileResponse_Data", "GetStudentProfileResponse_Data", 1) + ","
	}
	repeatedStringForDatas += "}"
	s := strings.Join([]string{`&GetStudentProfileResponse{`,
		`Datas:` + repeatedStringForDatas + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetStudentProfileResponse_Data) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetStudentProfileResponse_Data{`,
		`Profile:` + strings.Replace(this.Profile.String(), "StudentProfile", "StudentProfile", 1) + `,`,
		`CoachId:` + fmt.Sprintf("%v", this.CoachId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateProfileRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateProfileRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Grade:` + fmt.Sprintf("%v", this.Grade) + `,`,
		`TargetUniversity:` + fmt.Sprintf("%v", this.TargetUniversity) + `,`,
		`Avatar:` + fmt.Sprintf("%v", this.Avatar) + `,`,
		`Birthday:` + strings.Replace(fmt.Sprintf("%v", this.Birthday), "Timestamp", "types.Timestamp", 1) + `,`,
		`Biography:` + fmt.Sprintf("%v", this.Biography) + `,`,
		`School:` + strings.Replace(fmt.Sprintf("%v", this.School), "School", "School", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateProfileResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateProfileResponse{`,
		`Successful:` + fmt.Sprintf("%v", this.Successful) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveLearningProgressRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveLearningProgressRequest{`,
		`StudentId:` + fmt.Sprintf("%v", this.StudentId) + `,`,
		`SessionId:` + fmt.Sprintf("%v", this.SessionId) + `,`,
		`From:` + strings.Replace(fmt.Sprintf("%v", this.From), "Timestamp", "types.Timestamp", 1) + `,`,
		`To:` + strings.Replace(fmt.Sprintf("%v", this.To), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveLearningProgressResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDailies := "[]*RetrieveLearningProgressResponse_DailyLearningTime{"
	for _, f := range this.Dailies {
		repeatedStringForDailies += strings.Replace(fmt.Sprintf("%v", f), "RetrieveLearningProgressResponse_DailyLearningTime", "RetrieveLearningProgressResponse_DailyLearningTime", 1) + ","
	}
	repeatedStringForDailies += "}"
	s := strings.Join([]string{`&RetrieveLearningProgressResponse{`,
		`Dailies:` + repeatedStringForDailies + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveLearningProgressResponse_DailyLearningTime) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveLearningProgressResponse_DailyLearningTime{`,
		`TotalTimeSpentInDay:` + fmt.Sprintf("%v", this.TotalTimeSpentInDay) + `,`,
		`Day:` + strings.Replace(fmt.Sprintf("%v", this.Day), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StudentEventLog) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StudentEventLog{`,
		`EventId:` + fmt.Sprintf("%v", this.EventId) + `,`,
		`EventType:` + fmt.Sprintf("%v", this.EventType) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`Payload:` + strings.Replace(fmt.Sprintf("%v", this.Payload), "Struct", "types.Struct", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StudentComment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StudentComment{`,
		`CommentId:` + fmt.Sprintf("%v", this.CommentId) + `,`,
		`CoachId:` + fmt.Sprintf("%v", this.CoachId) + `,`,
		`StudentId:` + fmt.Sprintf("%v", this.StudentId) + `,`,
		`CommentContent:` + fmt.Sprintf("%v", this.CommentContent) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AssignToCoachRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AssignToCoachRequest{`,
		`CoachId:` + fmt.Sprintf("%v", this.CoachId) + `,`,
		`StudentId:` + fmt.Sprintf("%v", this.StudentId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AssignToCoachResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AssignToCoachResponse{`,
		`Successful:` + fmt.Sprintf("%v", this.Successful) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrievePresetStudyPlansRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrievePresetStudyPlansRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`Grade:` + fmt.Sprintf("%v", this.Grade) + `,`,
		`Subject:` + fmt.Sprintf("%v", this.Subject) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrievePresetStudyPlansResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPresetStudyPlans := "[]*PresetStudyPlan{"
	for _, f := range this.PresetStudyPlans {
		repeatedStringForPresetStudyPlans += strings.Replace(fmt.Sprintf("%v", f), "PresetStudyPlan", "PresetStudyPlan", 1) + ","
	}
	repeatedStringForPresetStudyPlans += "}"
	s := strings.Join([]string{`&RetrievePresetStudyPlansResponse{`,
		`PresetStudyPlans:` + repeatedStringForPresetStudyPlans + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrievePresetStudyPlanWeekliesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrievePresetStudyPlanWeekliesRequest{`,
		`PresetStudyPlanId:` + fmt.Sprintf("%v", this.PresetStudyPlanId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrievePresetStudyPlanWeekliesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPresetStudyPlanWeeklies := "[]*PresetStudyPlanWeekly{"
	for _, f := range this.PresetStudyPlanWeeklies {
		repeatedStringForPresetStudyPlanWeeklies += strings.Replace(fmt.Sprintf("%v", f), "PresetStudyPlanWeekly", "PresetStudyPlanWeekly", 1) + ","
	}
	repeatedStringForPresetStudyPlanWeeklies += "}"
	s := strings.Join([]string{`&RetrievePresetStudyPlanWeekliesResponse{`,
		`PresetStudyPlanWeeklies:` + repeatedStringForPresetStudyPlanWeeklies + `,`,
		`}`,
	}, "")
	return s
}
func (this *AssignPresetStudyPlansRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPlanDetails := "[]*AssignPresetStudyPlansRequest_PlanDetail{"
	for _, f := range this.PlanDetails {
		repeatedStringForPlanDetails += strings.Replace(fmt.Sprintf("%v", f), "AssignPresetStudyPlansRequest_PlanDetail", "AssignPresetStudyPlansRequest_PlanDetail", 1) + ","
	}
	repeatedStringForPlanDetails += "}"
	s := strings.Join([]string{`&AssignPresetStudyPlansRequest{`,
		`StudentId:` + fmt.Sprintf("%v", this.StudentId) + `,`,
		`PlanDetails:` + repeatedStringForPlanDetails + `,`,
		`}`,
	}, "")
	return s
}
func (this *AssignPresetStudyPlansRequest_PlanDetail) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AssignPresetStudyPlansRequest_PlanDetail{`,
		`PresetStudyPlanId:` + fmt.Sprintf("%v", this.PresetStudyPlanId) + `,`,
		`StartWeek:` + fmt.Sprintf("%v", this.StartWeek) + `,`,
		`StartDate:` + strings.Replace(fmt.Sprintf("%v", this.StartDate), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AssignPresetStudyPlansResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AssignPresetStudyPlansResponse{`,
		`Successful:` + fmt.Sprintf("%v", this.Successful) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveStudentStudyPlansRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveStudentStudyPlansRequest{`,
		`StudentId:` + fmt.Sprintf("%v", this.StudentId) + `,`,
		`From:` + strings.Replace(fmt.Sprintf("%v", this.From), "Timestamp", "types.Timestamp", 1) + `,`,
		`To:` + strings.Replace(fmt.Sprintf("%v", this.To), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveStudentStudyPlansResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPlanWithStartDates := "[]*RetrieveStudentStudyPlansResponse_PlanWithStartDate{"
	for _, f := range this.PlanWithStartDates {
		repeatedStringForPlanWithStartDates += strings.Replace(fmt.Sprintf("%v", f), "RetrieveStudentStudyPlansResponse_PlanWithStartDate", "RetrieveStudentStudyPlansResponse_PlanWithStartDate", 1) + ","
	}
	repeatedStringForPlanWithStartDates += "}"
	s := strings.Join([]string{`&RetrieveStudentStudyPlansResponse{`,
		`PlanWithStartDates:` + repeatedStringForPlanWithStartDates + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveStudentStudyPlansResponse_PlanWithStartDate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveStudentStudyPlansResponse_PlanWithStartDate{`,
		`Plan:` + strings.Replace(fmt.Sprintf("%v", this.Plan), "PresetStudyPlan", "PresetStudyPlan", 1) + `,`,
		`Week:` + fmt.Sprintf("%v", this.Week) + `,`,
		`StartDate:` + strings.Replace(fmt.Sprintf("%v", this.StartDate), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveStudentStudyPlanWeekliesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveStudentStudyPlanWeekliesRequest{`,
		`StudentId:` + fmt.Sprintf("%v", this.StudentId) + `,`,
		`From:` + strings.Replace(fmt.Sprintf("%v", this.From), "Timestamp", "types.Timestamp", 1) + `,`,
		`To:` + strings.Replace(fmt.Sprintf("%v", this.To), "Timestamp", "types.Timestamp", 1) + `,`,
		`RetrieveAll:` + fmt.Sprintf("%v", this.RetrieveAll) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveStudentStudyPlanWeekliesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTopicWithStartDates := "[]*RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate{"
	for _, f := range this.TopicWithStartDates {
		repeatedStringForTopicWithStartDates += strings.Replace(fmt.Sprintf("%v", f), "RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate", "RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate", 1) + ","
	}
	repeatedStringForTopicWithStartDates += "}"
	s := strings.Join([]string{`&RetrieveStudentStudyPlanWeekliesResponse{`,
		`TopicWithStartDates:` + repeatedStringForTopicWithStartDates + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate{`,
		`TopicId:` + fmt.Sprintf("%v", this.TopicId) + `,`,
		`TopicName:` + fmt.Sprintf("%v", this.TopicName) + `,`,
		`StartDate:` + strings.Replace(fmt.Sprintf("%v", this.StartDate), "Timestamp", "types.Timestamp", 1) + `,`,
		`TotalLos:` + fmt.Sprintf("%v", this.TotalLos) + `,`,
		`TotalFinishedLos:` + fmt.Sprintf("%v", this.TotalFinishedLos) + `,`,
		`AssignedBy:` + strings.Replace(fmt.Sprintf("%v", this.AssignedBy), "BasicProfile", "BasicProfile", 1) + `,`,
		`EndDate:` + strings.Replace(fmt.Sprintf("%v", this.EndDate), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StudentStat) String() string {
	if this == nil {
		return "nil"
	}
	keysForCrowns := make([]string, 0, len(this.Crowns))
	for k, _ := range this.Crowns {
		keysForCrowns = append(keysForCrowns, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForCrowns)
	mapStringForCrowns := "map[string]int32{"
	for _, k := range keysForCrowns {
		mapStringForCrowns += fmt.Sprintf("%v: %v,", k, this.Crowns[k])
	}
	mapStringForCrowns += "}"
	s := strings.Join([]string{`&StudentStat{`,
		`TotalLearningTime:` + fmt.Sprintf("%v", this.TotalLearningTime) + `,`,
		`TotalLoFinished:` + fmt.Sprintf("%v", this.TotalLoFinished) + `,`,
		`TotalLo:` + fmt.Sprintf("%v", this.TotalLo) + `,`,
		`Crowns:` + mapStringForCrowns + `,`,
		`}`,
	}, "")
	return s
}
func (this *FindStudentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FindStudentRequest{`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FindStudentResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FindStudentResponse{`,
		`Profile:` + strings.Replace(this.Profile.String(), "StudentProfile", "StudentProfile", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertStudentCommentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpsertStudentCommentRequest{`,
		`StudentComment:` + strings.Replace(this.StudentComment.String(), "StudentComment", "StudentComment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertStudentCommentResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpsertStudentCommentResponse{`,
		`Successful:` + fmt.Sprintf("%v", this.Successful) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveStudentCommentRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveStudentCommentRequest{`,
		`StudentId:` + fmt.Sprintf("%v", this.StudentId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CommentInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CommentInfo{`,
		`CoachName:` + fmt.Sprintf("%v", this.CoachName) + `,`,
		`StudentComment:` + strings.Replace(this.StudentComment.String(), "StudentComment", "StudentComment", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveStudentCommentResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForComment := "[]*CommentInfo{"
	for _, f := range this.Comment {
		repeatedStringForComment += strings.Replace(f.String(), "CommentInfo", "CommentInfo", 1) + ","
	}
	repeatedStringForComment += "}"
	s := strings.Join([]string{`&RetrieveStudentCommentResponse{`,
		`Comment:` + repeatedStringForComment + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveDailyLOFinishedRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveDailyLOFinishedRequest{`,
		`StudentId:` + fmt.Sprintf("%v", this.StudentId) + `,`,
		`From:` + strings.Replace(fmt.Sprintf("%v", this.From), "Timestamp", "types.Timestamp", 1) + `,`,
		`To:` + strings.Replace(fmt.Sprintf("%v", this.To), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveDailyLOFinishedResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForDailies := "[]*RetrieveDailyLOFinishedResponse_DailyLOFinished{"
	for _, f := range this.Dailies {
		repeatedStringForDailies += strings.Replace(fmt.Sprintf("%v", f), "RetrieveDailyLOFinishedResponse_DailyLOFinished", "RetrieveDailyLOFinishedResponse_DailyLOFinished", 1) + ","
	}
	repeatedStringForDailies += "}"
	s := strings.Join([]string{`&RetrieveDailyLOFinishedResponse{`,
		`TotalLo:` + fmt.Sprintf("%v", this.TotalLo) + `,`,
		`Dailies:` + repeatedStringForDailies + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveDailyLOFinishedResponse_DailyLOFinished) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveDailyLOFinishedResponse_DailyLOFinished{`,
		`TotalLoFinished:` + fmt.Sprintf("%v", this.TotalLoFinished) + `,`,
		`Day:` + strings.Replace(fmt.Sprintf("%v", this.Day), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StudyAheadTopic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StudyAheadTopic{`,
		`TopicId:` + fmt.Sprintf("%v", this.TopicId) + `,`,
		`Week:` + fmt.Sprintf("%v", this.Week) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveStudyAheadTopicsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveStudyAheadTopicsRequest{`,
		`StudentId:` + fmt.Sprintf("%v", this.StudentId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveStudyAheadTopicsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStudyAheadTopics := "[]*StudyAheadTopic{"
	for _, f := range this.StudyAheadTopics {
		repeatedStringForStudyAheadTopics += strings.Replace(f.String(), "StudyAheadTopic", "StudyAheadTopic", 1) + ","
	}
	repeatedStringForStudyAheadTopics += "}"
	s := strings.Join([]string{`&RetrieveStudyAheadTopicsResponse{`,
		`StudyAheadTopics:` + repeatedStringForStudyAheadTopics + `,`,
		`}`,
	}, "")
	return s
}
func (this *CountTotalLOsFinishedRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CountTotalLOsFinishedRequest{`,
		`StudentId:` + fmt.Sprintf("%v", this.StudentId) + `,`,
		`From:` + strings.Replace(fmt.Sprintf("%v", this.From), "Timestamp", "types.Timestamp", 1) + `,`,
		`To:` + strings.Replace(fmt.Sprintf("%v", this.To), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CountTotalLOsFinishedResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CountTotalLOsFinishedResponse{`,
		`TotalLosFinished:` + fmt.Sprintf("%v", this.TotalLosFinished) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveArchivedTopicsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveArchivedTopicsRequest{`,
		`StudentId:` + fmt.Sprintf("%v", this.StudentId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ArchivedTopic) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ArchivedTopic{`,
		`TopicId:` + fmt.Sprintf("%v", this.TopicId) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveArchivedTopicsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTopics := "[]*ArchivedTopic{"
	for _, f := range this.Topics {
		repeatedStringForTopics += strings.Replace(f.String(), "ArchivedTopic", "ArchivedTopic", 1) + ","
	}
	repeatedStringForTopics += "}"
	s := strings.Join([]string{`&RetrieveArchivedTopicsResponse{`,
		`Topics:` + repeatedStringForTopics + `,`,
		`}`,
	}, "")
	return s
}
func (this *StudentPermissionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StudentPermissionRequest{`,
		`}`,
	}, "")
	return s
}
func (this *PermissionAllowGrade) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PermissionAllowGrade{`,
		`Subject:` + fmt.Sprintf("%v", this.Subject) + `,`,
		`PlanPrivileges:` + fmt.Sprintf("%v", this.PlanPrivileges) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Permission) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPermissionAllowGrades := "[]*PermissionAllowGrade{"
	for _, f := range this.PermissionAllowGrades {
		repeatedStringForPermissionAllowGrades += strings.Replace(f.String(), "PermissionAllowGrade", "PermissionAllowGrade", 1) + ","
	}
	repeatedStringForPermissionAllowGrades += "}"
	s := strings.Join([]string{`&Permission{`,
		`PermissionAllowGrades:` + repeatedStringForPermissionAllowGrades + `,`,
		`}`,
	}, "")
	return s
}
func (this *StudentPermissionResponse) String() string {
	if this == nil {
		return "nil"
	}
	keysForPermissions := make([]int32, 0, len(this.Permissions))
	for k, _ := range this.Permissions {
		keysForPermissions = append(keysForPermissions, k)
	}
	github_com_gogo_protobuf_sortkeys.Int32s(keysForPermissions)
	mapStringForPermissions := "map[int32]*Permission{"
	for _, k := range keysForPermissions {
		mapStringForPermissions += fmt.Sprintf("%v: %v,", k, this.Permissions[k])
	}
	mapStringForPermissions += "}"
	s := strings.Join([]string{`&StudentPermissionResponse{`,
		`Permissions:` + mapStringForPermissions + `,`,
		`}`,
	}, "")
	return s
}
func (this *TopicOverdue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TopicOverdue{`,
		`Topic:` + strings.Replace(fmt.Sprintf("%v", this.Topic), "Topic", "Topic", 1) + `,`,
		`DueDate:` + strings.Replace(fmt.Sprintf("%v", this.DueDate), "Timestamp", "types.Timestamp", 1) + `,`,
		`AssignedBy:` + strings.Replace(fmt.Sprintf("%v", this.AssignedBy), "BasicProfile", "BasicProfile", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveOverdueTopicRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveOverdueTopicRequest{`,
		`StudentId:` + fmt.Sprintf("%v", this.StudentId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveOverdueTopicResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTopics := "[]*TopicOverdue{"
	for _, f := range this.Topics {
		repeatedStringForTopics += strings.Replace(f.String(), "TopicOverdue", "TopicOverdue", 1) + ","
	}
	repeatedStringForTopics += "}"
	s := strings.Join([]string{`&RetrieveOverdueTopicResponse{`,
		`Topics:` + repeatedStringForTopics + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveCompletedTopicWeekliesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveCompletedTopicWeekliesRequest{`,
		`StudentId:` + fmt.Sprintf("%v", this.StudentId) + `,`,
		`From:` + strings.Replace(fmt.Sprintf("%v", this.From), "Timestamp", "types.Timestamp", 1) + `,`,
		`To:` + strings.Replace(fmt.Sprintf("%v", this.To), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveCompletedTopicWeekliesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTopics := "[]*Topic{"
	for _, f := range this.Topics {
		repeatedStringForTopics += strings.Replace(fmt.Sprintf("%v", f), "Topic", "Topic", 1) + ","
	}
	repeatedStringForTopics += "}"
	repeatedStringForTopicsWithAssignBy := "[]*RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy{"
	for _, f := range this.TopicsWithAssignBy {
		repeatedStringForTopicsWithAssignBy += strings.Replace(fmt.Sprintf("%v", f), "RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy", "RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy", 1) + ","
	}
	repeatedStringForTopicsWithAssignBy += "}"
	s := strings.Join([]string{`&RetrieveCompletedTopicWeekliesResponse{`,
		`Topics:` + repeatedStringForTopics + `,`,
		`TopicsWithAssignBy:` + repeatedStringForTopicsWithAssignBy + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy{`,
		`Topics:` + strings.Replace(fmt.Sprintf("%v", this.Topics), "Topic", "Topic", 1) + `,`,
		`AssignedBy:` + strings.Replace(fmt.Sprintf("%v", this.AssignedBy), "BasicProfile", "BasicProfile", 1) + `,`,
		`CompletedAt:` + strings.Replace(fmt.Sprintf("%v", this.CompletedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubmitAssignmentRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAttachments := "[]*Attachment{"
	for _, f := range this.Attachments {
		repeatedStringForAttachments += strings.Replace(fmt.Sprintf("%v", f), "Attachment", "Attachment", 1) + ","
	}
	repeatedStringForAttachments += "}"
	s := strings.Join([]string{`&SubmitAssignmentRequest{`,
		`TopicId:` + fmt.Sprintf("%v", this.TopicId) + `,`,
		`Content:` + strings.Replace(fmt.Sprintf("%v", this.Content), "StringValue", "types.StringValue", 1) + `,`,
		`Attachments:` + repeatedStringForAttachments + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubmitAssignmentResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubmitAssignmentResponse{`,
		`SubmissionId:` + fmt.Sprintf("%v", this.SubmissionId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListStudentSubmissionsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListStudentSubmissionsRequest{`,
		`TopicId:` + fmt.Sprintf("%v", this.TopicId) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`OffsetId:` + strings.Replace(fmt.Sprintf("%v", this.OffsetId), "StringValue", "types.StringValue", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringStudent(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RegisterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grade = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetUniversity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetUniversity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field School", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.School == nil {
				m.School = &School{}
			}
			if err := m.School.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ActivationCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Successful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Successful = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnTrial", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnTrial = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillingDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BillingDate == nil {
				m.BillingDate = &types.Timestamp{}
			}
			if err := m.BillingDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStudentProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStudentProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStudentProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentIds = append(m.StudentIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StudentProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudentProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudentProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grade = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetUniversity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetUniversity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Birthday == nil {
				m.Birthday = &types.Timestamp{}
			}
			if err := m.Birthday.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Biography", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Biography = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentStatus", wireType)
			}
			m.PaymentStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentStatus |= PaymentStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillingDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BillingDate == nil {
				m.BillingDate = &types.Timestamp{}
			}
			if err := m.BillingDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field School", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.School == nil {
				m.School = &School{}
			}
			if err := m.School.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillingAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BillingAt == nil {
				m.BillingAt = &types.Timestamp{}
			}
			if err := m.BillingAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTester", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTester = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FacebookId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FacebookId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStudent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Divs = append(m.Divs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStudent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStudent
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStudent
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Divs) == 0 {
					m.Divs = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStudent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Divs = append(m.Divs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Divs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStudentProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetStudentProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetStudentProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, &GetStudentProfileResponse_Data{})
			if err := m.Datas[len(m.Datas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetStudentProfileResponse_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Profile == nil {
				m.Profile = &StudentProfile{}
			}
			if err := m.Profile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoachId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoachId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grade = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetUniversity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetUniversity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Birthday == nil {
				m.Birthday = &types.Timestamp{}
			}
			if err := m.Birthday.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Biography", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Biography = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field School", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.School == nil {
				m.School = &School{}
			}
			if err := m.School.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Successful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Successful = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveLearningProgressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveLearningProgressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveLearningProgressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &types.Timestamp{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &types.Timestamp{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveLearningProgressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveLearningProgressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveLearningProgressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dailies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dailies = append(m.Dailies, &RetrieveLearningProgressResponse_DailyLearningTime{})
			if err := m.Dailies[len(m.Dailies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveLearningProgressResponse_DailyLearningTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DailyLearningTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DailyLearningTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTimeSpentInDay", wireType)
			}
			m.TotalTimeSpentInDay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalTimeSpentInDay |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Day == nil {
				m.Day = &types.Timestamp{}
			}
			if err := m.Day.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StudentEventLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudentEventLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudentEventLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payload == nil {
				m.Payload = &types.Struct{}
			}
			if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StudentComment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudentComment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudentComment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoachId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoachId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommentContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssignToCoachRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssignToCoachRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssignToCoachRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoachId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoachId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssignToCoachResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssignToCoachResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssignToCoachResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Successful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Successful = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrievePresetStudyPlansRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrievePresetStudyPlansRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrievePresetStudyPlansRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grade = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			m.Subject = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subject |= Subject(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrievePresetStudyPlansResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrievePresetStudyPlansResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrievePresetStudyPlansResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PresetStudyPlans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PresetStudyPlans = append(m.PresetStudyPlans, &PresetStudyPlan{})
			if err := m.PresetStudyPlans[len(m.PresetStudyPlans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrievePresetStudyPlanWeekliesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrievePresetStudyPlanWeekliesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrievePresetStudyPlanWeekliesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PresetStudyPlanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PresetStudyPlanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrievePresetStudyPlanWeekliesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrievePresetStudyPlanWeekliesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrievePresetStudyPlanWeekliesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PresetStudyPlanWeeklies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PresetStudyPlanWeeklies = append(m.PresetStudyPlanWeeklies, &PresetStudyPlanWeekly{})
			if err := m.PresetStudyPlanWeeklies[len(m.PresetStudyPlanWeeklies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssignPresetStudyPlansRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssignPresetStudyPlansRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssignPresetStudyPlansRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlanDetails = append(m.PlanDetails, &AssignPresetStudyPlansRequest_PlanDetail{})
			if err := m.PlanDetails[len(m.PlanDetails)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssignPresetStudyPlansRequest_PlanDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlanDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlanDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PresetStudyPlanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PresetStudyPlanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartWeek", wireType)
			}
			m.StartWeek = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartWeek |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartDate == nil {
				m.StartDate = &types.Timestamp{}
			}
			if err := m.StartDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssignPresetStudyPlansResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssignPresetStudyPlansResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssignPresetStudyPlansResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Successful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Successful = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveStudentStudyPlansRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveStudentStudyPlansRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveStudentStudyPlansRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &types.Timestamp{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &types.Timestamp{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveStudentStudyPlansResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveStudentStudyPlansResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveStudentStudyPlansResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanWithStartDates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlanWithStartDates = append(m.PlanWithStartDates, &RetrieveStudentStudyPlansResponse_PlanWithStartDate{})
			if err := m.PlanWithStartDates[len(m.PlanWithStartDates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveStudentStudyPlansResponse_PlanWithStartDate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlanWithStartDate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlanWithStartDate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Plan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Plan == nil {
				m.Plan = &PresetStudyPlan{}
			}
			if err := m.Plan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Week", wireType)
			}
			m.Week = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Week |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartDate == nil {
				m.StartDate = &types.Timestamp{}
			}
			if err := m.StartDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveStudentStudyPlanWeekliesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveStudentStudyPlanWeekliesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveStudentStudyPlanWeekliesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &types.Timestamp{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &types.Timestamp{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetrieveAll", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RetrieveAll = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveStudentStudyPlanWeekliesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveStudentStudyPlanWeekliesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveStudentStudyPlanWeekliesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicWithStartDates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicWithStartDates = append(m.TopicWithStartDates, &RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate{})
			if err := m.TopicWithStartDates[len(m.TopicWithStartDates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveStudentStudyPlanWeekliesResponse_TopicWithStartDate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicWithStartDate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicWithStartDate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartDate == nil {
				m.StartDate = &types.Timestamp{}
			}
			if err := m.StartDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLos", wireType)
			}
			m.TotalLos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalLos |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFinishedLos", wireType)
			}
			m.TotalFinishedLos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalFinishedLos |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignedBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AssignedBy == nil {
				m.AssignedBy = &BasicProfile{}
			}
			if err := m.AssignedBy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndDate == nil {
				m.EndDate = &types.Timestamp{}
			}
			if err := m.EndDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StudentStat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudentStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudentStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLearningTime", wireType)
			}
			m.TotalLearningTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalLearningTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLoFinished", wireType)
			}
			m.TotalLoFinished = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalLoFinished |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLo", wireType)
			}
			m.TotalLo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalLo |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crowns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Crowns == nil {
				m.Crowns = make(map[string]int32)
			}
			var mapkey string
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStudent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStudent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthStudent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthStudent
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStudent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipStudent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthStudent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Crowns[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindStudentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindStudentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindStudentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindStudentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindStudentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindStudentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Profile == nil {
				m.Profile = &StudentProfile{}
			}
			if err := m.Profile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertStudentCommentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertStudentCommentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertStudentCommentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentComment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StudentComment == nil {
				m.StudentComment = &StudentComment{}
			}
			if err := m.StudentComment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertStudentCommentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertStudentCommentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertStudentCommentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Successful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Successful = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveStudentCommentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveStudentCommentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveStudentCommentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoachName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoachName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentComment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StudentComment == nil {
				m.StudentComment = &StudentComment{}
			}
			if err := m.StudentComment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveStudentCommentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveStudentCommentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveStudentCommentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = append(m.Comment, &CommentInfo{})
			if err := m.Comment[len(m.Comment)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveDailyLOFinishedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveDailyLOFinishedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveDailyLOFinishedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &types.Timestamp{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &types.Timestamp{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveDailyLOFinishedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveDailyLOFinishedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveDailyLOFinishedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLo", wireType)
			}
			m.TotalLo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalLo |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dailies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dailies = append(m.Dailies, &RetrieveDailyLOFinishedResponse_DailyLOFinished{})
			if err := m.Dailies[len(m.Dailies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveDailyLOFinishedResponse_DailyLOFinished) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DailyLOFinished: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DailyLOFinished: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLoFinished", wireType)
			}
			m.TotalLoFinished = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalLoFinished |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Day", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Day == nil {
				m.Day = &types.Timestamp{}
			}
			if err := m.Day.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StudyAheadTopic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudyAheadTopic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudyAheadTopic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Week", wireType)
			}
			m.Week = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Week |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveStudyAheadTopicsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveStudyAheadTopicsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveStudyAheadTopicsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveStudyAheadTopicsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveStudyAheadTopicsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveStudyAheadTopicsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudyAheadTopics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudyAheadTopics = append(m.StudyAheadTopics, &StudyAheadTopic{})
			if err := m.StudyAheadTopics[len(m.StudyAheadTopics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountTotalLOsFinishedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountTotalLOsFinishedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountTotalLOsFinishedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &types.Timestamp{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &types.Timestamp{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CountTotalLOsFinishedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CountTotalLOsFinishedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CountTotalLOsFinishedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLosFinished", wireType)
			}
			m.TotalLosFinished = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalLosFinished |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveArchivedTopicsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveArchivedTopicsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveArchivedTopicsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ArchivedTopic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArchivedTopic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArchivedTopic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ArchivedTopic_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveArchivedTopicsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveArchivedTopicsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveArchivedTopicsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topics = append(m.Topics, &ArchivedTopic{})
			if err := m.Topics[len(m.Topics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StudentPermissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudentPermissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudentPermissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PermissionAllowGrade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PermissionAllowGrade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PermissionAllowGrade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			m.Subject = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subject |= Subject(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v PlanPrivilege
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStudent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= PlanPrivilege(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PlanPrivileges = append(m.PlanPrivileges, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStudent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStudent
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStudent
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.PlanPrivileges) == 0 {
					m.PlanPrivileges = make([]PlanPrivilege, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v PlanPrivilege
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStudent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= PlanPrivilege(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PlanPrivileges = append(m.PlanPrivileges, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanPrivileges", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Permission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Permission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Permission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionAllowGrades", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PermissionAllowGrades = append(m.PermissionAllowGrades, &PermissionAllowGrade{})
			if err := m.PermissionAllowGrades[len(m.PermissionAllowGrades)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StudentPermissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudentPermissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudentPermissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Permissions == nil {
				m.Permissions = make(map[int32]*Permission)
			}
			var mapkey int32
			var mapvalue *Permission
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStudent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStudent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStudent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthStudent
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthStudent
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Permission{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipStudent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthStudent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Permissions[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TopicOverdue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicOverdue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicOverdue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Topic == nil {
				m.Topic = &Topic{}
			}
			if err := m.Topic.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DueDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DueDate == nil {
				m.DueDate = &types.Timestamp{}
			}
			if err := m.DueDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignedBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AssignedBy == nil {
				m.AssignedBy = &BasicProfile{}
			}
			if err := m.AssignedBy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveOverdueTopicRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveOverdueTopicRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveOverdueTopicRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveOverdueTopicResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveOverdueTopicResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveOverdueTopicResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topics = append(m.Topics, &TopicOverdue{})
			if err := m.Topics[len(m.Topics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveCompletedTopicWeekliesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveCompletedTopicWeekliesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveCompletedTopicWeekliesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &types.Timestamp{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &types.Timestamp{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveCompletedTopicWeekliesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveCompletedTopicWeekliesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveCompletedTopicWeekliesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topics = append(m.Topics, &Topic{})
			if err := m.Topics[len(m.Topics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicsWithAssignBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicsWithAssignBy = append(m.TopicsWithAssignBy, &RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy{})
			if err := m.TopicsWithAssignBy[len(m.TopicsWithAssignBy)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveCompletedTopicWeekliesResponse_TopicWithAssignBy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TopicWithAssignBy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TopicWithAssignBy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Topics == nil {
				m.Topics = &Topic{}
			}
			if err := m.Topics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignedBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AssignedBy == nil {
				m.AssignedBy = &BasicProfile{}
			}
			if err := m.AssignedBy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompletedAt == nil {
				m.CompletedAt = &types.Timestamp{}
			}
			if err := m.CompletedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitAssignmentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitAssignmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitAssignmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &types.StringValue{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attachments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attachments = append(m.Attachments, &Attachment{})
			if err := m.Attachments[len(m.Attachments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubmitAssignmentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubmitAssignmentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubmitAssignmentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmissionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubmissionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListStudentSubmissionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListStudentSubmissionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListStudentSubmissionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TopicId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TopicId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OffsetId == nil {
				m.OffsetId = &types.StringValue{}
			}
			if err := m.OffsetId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStudent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStudent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStudent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStudent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStudent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStudent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStudent = fmt.Errorf("proto: unexpected end of group")
)
