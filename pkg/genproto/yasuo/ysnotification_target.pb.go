// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ysnotification_target.proto

package pb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NotificationTarget struct {
	Id         string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Conditions string                   `protobuf:"bytes,3,opt,name=conditions,proto3" json:"conditions,omitempty"`
	Status     NotificationTargetStatus `protobuf:"varint,4,opt,name=status,proto3,enum=manabie.yasuo.NotificationTargetStatus" json:"status,omitempty"`
	ScheduleAt *types.Timestamp         `protobuf:"bytes,7,opt,name=schedule_at,json=scheduleAt,proto3" json:"schedule_at,omitempty"`
}

func (m *NotificationTarget) Reset()      { *m = NotificationTarget{} }
func (*NotificationTarget) ProtoMessage() {}
func (*NotificationTarget) Descriptor() ([]byte, []int) {
	return fileDescriptor_33a19ec9c4541c4e, []int{0}
}
func (m *NotificationTarget) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotificationTarget) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotificationTarget.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotificationTarget) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotificationTarget.Merge(m, src)
}
func (m *NotificationTarget) XXX_Size() int {
	return m.Size()
}
func (m *NotificationTarget) XXX_DiscardUnknown() {
	xxx_messageInfo_NotificationTarget.DiscardUnknown(m)
}

var xxx_messageInfo_NotificationTarget proto.InternalMessageInfo

func (m *NotificationTarget) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NotificationTarget) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NotificationTarget) GetConditions() string {
	if m != nil {
		return m.Conditions
	}
	return ""
}

func (m *NotificationTarget) GetStatus() NotificationTargetStatus {
	if m != nil {
		return m.Status
	}
	return NOTIFICATION_TARGET_STATUS_NONE
}

func (m *NotificationTarget) GetScheduleAt() *types.Timestamp {
	if m != nil {
		return m.ScheduleAt
	}
	return nil
}

type CreateNotificationTargetRequest struct {
	NotificationTarget *NotificationTarget `protobuf:"bytes,1,opt,name=notificationTarget,proto3" json:"notificationTarget,omitempty"`
}

func (m *CreateNotificationTargetRequest) Reset()      { *m = CreateNotificationTargetRequest{} }
func (*CreateNotificationTargetRequest) ProtoMessage() {}
func (*CreateNotificationTargetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33a19ec9c4541c4e, []int{1}
}
func (m *CreateNotificationTargetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateNotificationTargetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateNotificationTargetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateNotificationTargetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNotificationTargetRequest.Merge(m, src)
}
func (m *CreateNotificationTargetRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateNotificationTargetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNotificationTargetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNotificationTargetRequest proto.InternalMessageInfo

func (m *CreateNotificationTargetRequest) GetNotificationTarget() *NotificationTarget {
	if m != nil {
		return m.NotificationTarget
	}
	return nil
}

type CreateNotificationTargetResponse struct {
	NotificationTargetID string `protobuf:"bytes,1,opt,name=notificationTargetID,proto3" json:"notificationTargetID,omitempty"`
	Successful           bool   `protobuf:"varint,2,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (m *CreateNotificationTargetResponse) Reset()      { *m = CreateNotificationTargetResponse{} }
func (*CreateNotificationTargetResponse) ProtoMessage() {}
func (*CreateNotificationTargetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33a19ec9c4541c4e, []int{2}
}
func (m *CreateNotificationTargetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateNotificationTargetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateNotificationTargetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateNotificationTargetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNotificationTargetResponse.Merge(m, src)
}
func (m *CreateNotificationTargetResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateNotificationTargetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNotificationTargetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNotificationTargetResponse proto.InternalMessageInfo

func (m *CreateNotificationTargetResponse) GetNotificationTargetID() string {
	if m != nil {
		return m.NotificationTargetID
	}
	return ""
}

func (m *CreateNotificationTargetResponse) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

type UpdateNotificationTargetRequest struct {
	NotificationTarget *NotificationTarget `protobuf:"bytes,1,opt,name=notificationTarget,proto3" json:"notificationTarget,omitempty"`
}

func (m *UpdateNotificationTargetRequest) Reset()      { *m = UpdateNotificationTargetRequest{} }
func (*UpdateNotificationTargetRequest) ProtoMessage() {}
func (*UpdateNotificationTargetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33a19ec9c4541c4e, []int{3}
}
func (m *UpdateNotificationTargetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateNotificationTargetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateNotificationTargetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateNotificationTargetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateNotificationTargetRequest.Merge(m, src)
}
func (m *UpdateNotificationTargetRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateNotificationTargetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateNotificationTargetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateNotificationTargetRequest proto.InternalMessageInfo

func (m *UpdateNotificationTargetRequest) GetNotificationTarget() *NotificationTarget {
	if m != nil {
		return m.NotificationTarget
	}
	return nil
}

type UpdateNotificationTargetResponse struct {
	NotificationTargetID string `protobuf:"bytes,1,opt,name=notificationTargetID,proto3" json:"notificationTargetID,omitempty"`
	Successful           bool   `protobuf:"varint,2,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (m *UpdateNotificationTargetResponse) Reset()      { *m = UpdateNotificationTargetResponse{} }
func (*UpdateNotificationTargetResponse) ProtoMessage() {}
func (*UpdateNotificationTargetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33a19ec9c4541c4e, []int{4}
}
func (m *UpdateNotificationTargetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateNotificationTargetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateNotificationTargetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateNotificationTargetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateNotificationTargetResponse.Merge(m, src)
}
func (m *UpdateNotificationTargetResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateNotificationTargetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateNotificationTargetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateNotificationTargetResponse proto.InternalMessageInfo

func (m *UpdateNotificationTargetResponse) GetNotificationTargetID() string {
	if m != nil {
		return m.NotificationTargetID
	}
	return ""
}

func (m *UpdateNotificationTargetResponse) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

func init() {
	proto.RegisterType((*NotificationTarget)(nil), "manabie.yasuo.NotificationTarget")
	golang_proto.RegisterType((*NotificationTarget)(nil), "manabie.yasuo.NotificationTarget")
	proto.RegisterType((*CreateNotificationTargetRequest)(nil), "manabie.yasuo.CreateNotificationTargetRequest")
	golang_proto.RegisterType((*CreateNotificationTargetRequest)(nil), "manabie.yasuo.CreateNotificationTargetRequest")
	proto.RegisterType((*CreateNotificationTargetResponse)(nil), "manabie.yasuo.CreateNotificationTargetResponse")
	golang_proto.RegisterType((*CreateNotificationTargetResponse)(nil), "manabie.yasuo.CreateNotificationTargetResponse")
	proto.RegisterType((*UpdateNotificationTargetRequest)(nil), "manabie.yasuo.UpdateNotificationTargetRequest")
	golang_proto.RegisterType((*UpdateNotificationTargetRequest)(nil), "manabie.yasuo.UpdateNotificationTargetRequest")
	proto.RegisterType((*UpdateNotificationTargetResponse)(nil), "manabie.yasuo.UpdateNotificationTargetResponse")
	golang_proto.RegisterType((*UpdateNotificationTargetResponse)(nil), "manabie.yasuo.UpdateNotificationTargetResponse")
}

func init() { proto.RegisterFile("ysnotification_target.proto", fileDescriptor_33a19ec9c4541c4e) }
func init() {
	golang_proto.RegisterFile("ysnotification_target.proto", fileDescriptor_33a19ec9c4541c4e)
}

var fileDescriptor_33a19ec9c4541c4e = []byte{
	// 479 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0x3d, 0x8f, 0xd3, 0x30,
	0x18, 0x8e, 0xcb, 0xe9, 0x00, 0x17, 0x6e, 0xb0, 0x18, 0x42, 0x91, 0x7c, 0xa5, 0x0b, 0x5d, 0xce,
	0x91, 0x02, 0xdb, 0x0d, 0x88, 0x8f, 0x85, 0x05, 0x89, 0x70, 0x2c, 0x2c, 0x27, 0x27, 0x79, 0x9b,
	0xb3, 0xae, 0xb1, 0x43, 0x6d, 0x9f, 0x54, 0xdd, 0xc2, 0x4f, 0x60, 0xe1, 0x3f, 0xf0, 0x33, 0x18,
	0x19, 0x3b, 0xa1, 0x1b, 0x69, 0xba, 0x30, 0xf6, 0x27, 0xa0, 0xb8, 0xa9, 0x28, 0xa4, 0x55, 0x58,
	0xd0, 0x6d, 0xef, 0xc7, 0xf3, 0xea, 0x79, 0x9f, 0xe7, 0xb5, 0x8c, 0x1f, 0x4c, 0xb5, 0x54, 0x46,
	0x8c, 0x44, 0xc2, 0x8d, 0x50, 0xf2, 0xd4, 0xf0, 0x49, 0x06, 0x86, 0x15, 0x13, 0x65, 0x14, 0xb9,
	0x9b, 0x73, 0xc9, 0x63, 0x01, 0x6c, 0xca, 0xb5, 0x55, 0xbd, 0x3b, 0x53, 0x0d, 0xd2, 0xe6, 0xab,
	0x66, 0xef, 0x30, 0x53, 0x2a, 0x1b, 0x43, 0xe0, 0xb2, 0xd8, 0x8e, 0x02, 0x23, 0x72, 0xd0, 0x86,
	0xe7, 0x45, 0x0d, 0x38, 0xca, 0x84, 0x39, 0xb3, 0x31, 0x4b, 0x54, 0x1e, 0x64, 0x2a, 0x53, 0xbf,
	0x91, 0x55, 0xe6, 0x12, 0x17, 0xad, 0xe0, 0x83, 0xef, 0x08, 0x93, 0xd7, 0x1b, 0xab, 0x9c, 0xb8,
	0x4d, 0xc8, 0x01, 0xee, 0x88, 0xd4, 0x47, 0x7d, 0x34, 0xbc, 0x1d, 0x75, 0x44, 0x4a, 0x08, 0xde,
	0x93, 0x3c, 0x07, 0xbf, 0xe3, 0x2a, 0x2e, 0x26, 0x14, 0xe3, 0x44, 0xc9, 0x54, 0x54, 0x63, 0xda,
	0xbf, 0xe1, 0x3a, 0x1b, 0x15, 0xf2, 0x14, 0xef, 0x6b, 0xc3, 0x8d, 0xd5, 0xfe, 0x5e, 0x1f, 0x0d,
	0x0f, 0xc2, 0x47, 0xec, 0x0f, 0x61, 0xac, 0x49, 0xfb, 0xd6, 0xc1, 0xa3, 0x7a, 0x8c, 0x1c, 0xe3,
	0xae, 0x4e, 0xce, 0x20, 0xb5, 0x63, 0x38, 0xe5, 0xc6, 0xbf, 0xd9, 0x47, 0xc3, 0x6e, 0xd8, 0x63,
	0x2b, 0x07, 0xd8, 0x5a, 0x17, 0x3b, 0x59, 0x3b, 0x10, 0xe1, 0x35, 0xfc, 0x99, 0x19, 0x18, 0x7c,
	0xf8, 0x62, 0x02, 0xdc, 0x40, 0x93, 0x26, 0x82, 0x0f, 0x16, 0xb4, 0x21, 0x6f, 0x30, 0x91, 0x8d,
	0xa6, 0x13, 0xdd, 0x0d, 0x1f, 0xb6, 0x2e, 0x1b, 0x6d, 0x19, 0x1e, 0x5c, 0xe0, 0xfe, 0x6e, 0x56,
	0x5d, 0x28, 0xa9, 0x81, 0x84, 0xf8, 0x5e, 0x73, 0xf2, 0xd5, 0xcb, 0xda, 0xed, 0xad, 0xbd, 0xca,
	0x6b, 0x6d, 0x93, 0x04, 0xb4, 0x1e, 0xd9, 0xb1, 0xbb, 0xc2, 0xad, 0x68, 0xa3, 0x52, 0xa9, 0x7d,
	0x57, 0xa4, 0xd7, 0xa0, 0x76, 0x37, 0xeb, 0xff, 0x53, 0x1b, 0x7e, 0xee, 0xe0, 0xfb, 0x5b, 0x5e,
	0x0f, 0x4c, 0x2e, 0x44, 0x02, 0xe4, 0x12, 0xfb, 0xbb, 0x6e, 0x40, 0xd8, 0x5f, 0x42, 0x5b, 0x9e,
	0x48, 0x2f, 0xf8, 0x67, 0x7c, 0x2d, 0xf7, 0x12, 0xfb, 0xbb, 0x2c, 0x69, 0x90, 0xb7, 0x5c, 0xac,
	0x41, 0xde, 0xe6, 0xf5, 0x73, 0x39, 0x9b, 0x53, 0xef, 0x6a, 0x4e, 0xbd, 0xe5, 0x9c, 0xa2, 0x8f,
	0x25, 0x45, 0x5f, 0x4a, 0x8a, 0xbe, 0x95, 0x14, 0xcd, 0x4a, 0x8a, 0x7e, 0x94, 0x14, 0xfd, 0x2c,
	0xa9, 0xb7, 0x2c, 0x29, 0xfa, 0xb4, 0xa0, 0xde, 0xd7, 0x05, 0x45, 0xb3, 0x05, 0xf5, 0xae, 0x16,
	0xd4, 0x7b, 0xff, 0x64, 0xe3, 0xd7, 0xa8, 0x49, 0x8f, 0xaa, 0x38, 0xe6, 0xc9, 0x39, 0xc8, 0x34,
	0x28, 0xce, 0xb3, 0x20, 0x03, 0xb9, 0xfa, 0x3e, 0xdc, 0x36, 0xc7, 0x45, 0x1c, 0xef, 0xbb, 0xfc,
	0xf1, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa4, 0x6d, 0xad, 0x9b, 0xcf, 0x04, 0x00, 0x00,
}

func (this *NotificationTarget) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotificationTarget)
	if !ok {
		that2, ok := that.(NotificationTarget)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Conditions != that1.Conditions {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.ScheduleAt.Equal(that1.ScheduleAt) {
		return false
	}
	return true
}
func (this *CreateNotificationTargetRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateNotificationTargetRequest)
	if !ok {
		that2, ok := that.(CreateNotificationTargetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NotificationTarget.Equal(that1.NotificationTarget) {
		return false
	}
	return true
}
func (this *CreateNotificationTargetResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateNotificationTargetResponse)
	if !ok {
		that2, ok := that.(CreateNotificationTargetResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NotificationTargetID != that1.NotificationTargetID {
		return false
	}
	if this.Successful != that1.Successful {
		return false
	}
	return true
}
func (this *UpdateNotificationTargetRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateNotificationTargetRequest)
	if !ok {
		that2, ok := that.(UpdateNotificationTargetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NotificationTarget.Equal(that1.NotificationTarget) {
		return false
	}
	return true
}
func (this *UpdateNotificationTargetResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateNotificationTargetResponse)
	if !ok {
		that2, ok := that.(UpdateNotificationTargetResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NotificationTargetID != that1.NotificationTargetID {
		return false
	}
	if this.Successful != that1.Successful {
		return false
	}
	return true
}
func (this *NotificationTarget) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.NotificationTarget{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Conditions: "+fmt.Sprintf("%#v", this.Conditions)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.ScheduleAt != nil {
		s = append(s, "ScheduleAt: "+fmt.Sprintf("%#v", this.ScheduleAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateNotificationTargetRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CreateNotificationTargetRequest{")
	if this.NotificationTarget != nil {
		s = append(s, "NotificationTarget: "+fmt.Sprintf("%#v", this.NotificationTarget)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateNotificationTargetResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CreateNotificationTargetResponse{")
	s = append(s, "NotificationTargetID: "+fmt.Sprintf("%#v", this.NotificationTargetID)+",\n")
	s = append(s, "Successful: "+fmt.Sprintf("%#v", this.Successful)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateNotificationTargetRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpdateNotificationTargetRequest{")
	if this.NotificationTarget != nil {
		s = append(s, "NotificationTarget: "+fmt.Sprintf("%#v", this.NotificationTarget)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateNotificationTargetResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.UpdateNotificationTargetResponse{")
	s = append(s, "NotificationTargetID: "+fmt.Sprintf("%#v", this.NotificationTargetID)+",\n")
	s = append(s, "Successful: "+fmt.Sprintf("%#v", this.Successful)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringYsnotificationTarget(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NotificationTargetServiceClient is the client API for NotificationTargetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotificationTargetServiceClient interface {
	CreateNotificationTarget(ctx context.Context, in *CreateNotificationTargetRequest, opts ...grpc.CallOption) (*CreateNotificationTargetResponse, error)
	UpdateNotificationTarget(ctx context.Context, in *UpdateNotificationTargetRequest, opts ...grpc.CallOption) (*UpdateNotificationTargetResponse, error)
}

type notificationTargetServiceClient struct {
	cc *grpc.ClientConn
}

func NewNotificationTargetServiceClient(cc *grpc.ClientConn) NotificationTargetServiceClient {
	return &notificationTargetServiceClient{cc}
}

func (c *notificationTargetServiceClient) CreateNotificationTarget(ctx context.Context, in *CreateNotificationTargetRequest, opts ...grpc.CallOption) (*CreateNotificationTargetResponse, error) {
	out := new(CreateNotificationTargetResponse)
	err := c.cc.Invoke(ctx, "/manabie.yasuo.NotificationTargetService/CreateNotificationTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationTargetServiceClient) UpdateNotificationTarget(ctx context.Context, in *UpdateNotificationTargetRequest, opts ...grpc.CallOption) (*UpdateNotificationTargetResponse, error) {
	out := new(UpdateNotificationTargetResponse)
	err := c.cc.Invoke(ctx, "/manabie.yasuo.NotificationTargetService/UpdateNotificationTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationTargetServiceServer is the server API for NotificationTargetService service.
type NotificationTargetServiceServer interface {
	CreateNotificationTarget(context.Context, *CreateNotificationTargetRequest) (*CreateNotificationTargetResponse, error)
	UpdateNotificationTarget(context.Context, *UpdateNotificationTargetRequest) (*UpdateNotificationTargetResponse, error)
}

// UnimplementedNotificationTargetServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNotificationTargetServiceServer struct {
}

func (*UnimplementedNotificationTargetServiceServer) CreateNotificationTarget(ctx context.Context, req *CreateNotificationTargetRequest) (*CreateNotificationTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotificationTarget not implemented")
}
func (*UnimplementedNotificationTargetServiceServer) UpdateNotificationTarget(ctx context.Context, req *UpdateNotificationTargetRequest) (*UpdateNotificationTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotificationTarget not implemented")
}

func RegisterNotificationTargetServiceServer(s *grpc.Server, srv NotificationTargetServiceServer) {
	s.RegisterService(&_NotificationTargetService_serviceDesc, srv)
}

func _NotificationTargetService_CreateNotificationTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotificationTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationTargetServiceServer).CreateNotificationTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.yasuo.NotificationTargetService/CreateNotificationTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationTargetServiceServer).CreateNotificationTarget(ctx, req.(*CreateNotificationTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationTargetService_UpdateNotificationTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotificationTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationTargetServiceServer).UpdateNotificationTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.yasuo.NotificationTargetService/UpdateNotificationTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationTargetServiceServer).UpdateNotificationTarget(ctx, req.(*UpdateNotificationTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotificationTargetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "manabie.yasuo.NotificationTargetService",
	HandlerType: (*NotificationTargetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNotificationTarget",
			Handler:    _NotificationTargetService_CreateNotificationTarget_Handler,
		},
		{
			MethodName: "UpdateNotificationTarget",
			Handler:    _NotificationTargetService_UpdateNotificationTarget_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ysnotification_target.proto",
}

func (m *NotificationTarget) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotificationTarget) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotificationTarget) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScheduleAt != nil {
		{
			size, err := m.ScheduleAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYsnotificationTarget(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Status != 0 {
		i = encodeVarintYsnotificationTarget(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Conditions) > 0 {
		i -= len(m.Conditions)
		copy(dAtA[i:], m.Conditions)
		i = encodeVarintYsnotificationTarget(dAtA, i, uint64(len(m.Conditions)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintYsnotificationTarget(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintYsnotificationTarget(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateNotificationTargetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateNotificationTargetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateNotificationTargetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NotificationTarget != nil {
		{
			size, err := m.NotificationTarget.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYsnotificationTarget(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateNotificationTargetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateNotificationTargetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateNotificationTargetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Successful {
		i--
		if m.Successful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.NotificationTargetID) > 0 {
		i -= len(m.NotificationTargetID)
		copy(dAtA[i:], m.NotificationTargetID)
		i = encodeVarintYsnotificationTarget(dAtA, i, uint64(len(m.NotificationTargetID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateNotificationTargetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateNotificationTargetRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateNotificationTargetRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NotificationTarget != nil {
		{
			size, err := m.NotificationTarget.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYsnotificationTarget(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateNotificationTargetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateNotificationTargetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateNotificationTargetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Successful {
		i--
		if m.Successful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.NotificationTargetID) > 0 {
		i -= len(m.NotificationTargetID)
		copy(dAtA[i:], m.NotificationTargetID)
		i = encodeVarintYsnotificationTarget(dAtA, i, uint64(len(m.NotificationTargetID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintYsnotificationTarget(dAtA []byte, offset int, v uint64) int {
	offset -= sovYsnotificationTarget(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NotificationTarget) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovYsnotificationTarget(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovYsnotificationTarget(uint64(l))
	}
	l = len(m.Conditions)
	if l > 0 {
		n += 1 + l + sovYsnotificationTarget(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovYsnotificationTarget(uint64(m.Status))
	}
	if m.ScheduleAt != nil {
		l = m.ScheduleAt.Size()
		n += 1 + l + sovYsnotificationTarget(uint64(l))
	}
	return n
}

func (m *CreateNotificationTargetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotificationTarget != nil {
		l = m.NotificationTarget.Size()
		n += 1 + l + sovYsnotificationTarget(uint64(l))
	}
	return n
}

func (m *CreateNotificationTargetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NotificationTargetID)
	if l > 0 {
		n += 1 + l + sovYsnotificationTarget(uint64(l))
	}
	if m.Successful {
		n += 2
	}
	return n
}

func (m *UpdateNotificationTargetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NotificationTarget != nil {
		l = m.NotificationTarget.Size()
		n += 1 + l + sovYsnotificationTarget(uint64(l))
	}
	return n
}

func (m *UpdateNotificationTargetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NotificationTargetID)
	if l > 0 {
		n += 1 + l + sovYsnotificationTarget(uint64(l))
	}
	if m.Successful {
		n += 2
	}
	return n
}

func sovYsnotificationTarget(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozYsnotificationTarget(x uint64) (n int) {
	return sovYsnotificationTarget(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *NotificationTarget) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotificationTarget{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Conditions:` + fmt.Sprintf("%v", this.Conditions) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`ScheduleAt:` + strings.Replace(fmt.Sprintf("%v", this.ScheduleAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateNotificationTargetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateNotificationTargetRequest{`,
		`NotificationTarget:` + strings.Replace(this.NotificationTarget.String(), "NotificationTarget", "NotificationTarget", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateNotificationTargetResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateNotificationTargetResponse{`,
		`NotificationTargetID:` + fmt.Sprintf("%v", this.NotificationTargetID) + `,`,
		`Successful:` + fmt.Sprintf("%v", this.Successful) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateNotificationTargetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateNotificationTargetRequest{`,
		`NotificationTarget:` + strings.Replace(this.NotificationTarget.String(), "NotificationTarget", "NotificationTarget", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateNotificationTargetResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateNotificationTargetResponse{`,
		`NotificationTargetID:` + fmt.Sprintf("%v", this.NotificationTargetID) + `,`,
		`Successful:` + fmt.Sprintf("%v", this.Successful) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringYsnotificationTarget(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *NotificationTarget) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYsnotificationTarget
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotificationTarget: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotificationTarget: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsnotificationTarget
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYsnotificationTarget
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYsnotificationTarget
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsnotificationTarget
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYsnotificationTarget
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYsnotificationTarget
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conditions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsnotificationTarget
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYsnotificationTarget
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYsnotificationTarget
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conditions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsnotificationTarget
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= NotificationTargetStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsnotificationTarget
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYsnotificationTarget
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYsnotificationTarget
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleAt == nil {
				m.ScheduleAt = &types.Timestamp{}
			}
			if err := m.ScheduleAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYsnotificationTarget(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYsnotificationTarget
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateNotificationTargetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYsnotificationTarget
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateNotificationTargetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateNotificationTargetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationTarget", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsnotificationTarget
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYsnotificationTarget
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYsnotificationTarget
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NotificationTarget == nil {
				m.NotificationTarget = &NotificationTarget{}
			}
			if err := m.NotificationTarget.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYsnotificationTarget(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYsnotificationTarget
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateNotificationTargetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYsnotificationTarget
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateNotificationTargetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateNotificationTargetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationTargetID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsnotificationTarget
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYsnotificationTarget
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYsnotificationTarget
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotificationTargetID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Successful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsnotificationTarget
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Successful = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipYsnotificationTarget(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYsnotificationTarget
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateNotificationTargetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYsnotificationTarget
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateNotificationTargetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateNotificationTargetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationTarget", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsnotificationTarget
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYsnotificationTarget
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYsnotificationTarget
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NotificationTarget == nil {
				m.NotificationTarget = &NotificationTarget{}
			}
			if err := m.NotificationTarget.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYsnotificationTarget(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYsnotificationTarget
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateNotificationTargetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYsnotificationTarget
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateNotificationTargetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateNotificationTargetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationTargetID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsnotificationTarget
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYsnotificationTarget
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYsnotificationTarget
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotificationTargetID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Successful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsnotificationTarget
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Successful = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipYsnotificationTarget(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYsnotificationTarget
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipYsnotificationTarget(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowYsnotificationTarget
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowYsnotificationTarget
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowYsnotificationTarget
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthYsnotificationTarget
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupYsnotificationTarget
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthYsnotificationTarget
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthYsnotificationTarget        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowYsnotificationTarget          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupYsnotificationTarget = fmt.Errorf("proto: unexpected end of group")
)
