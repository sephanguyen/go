// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ysnotification.proto

package pb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	bob "github.com/manabie-com/backend/pkg/genproto/bob"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Notification struct {
	Id          string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title       string                `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string                `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Type        string                `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Target      string                `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
	Data        string                `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	ScheduleAt  *types.Timestamp      `protobuf:"bytes,7,opt,name=schedule_at,json=scheduleAt,proto3" json:"schedule_at,omitempty"`
	Event       bob.NotificationEvent `protobuf:"varint,8,opt,name=event,proto3,enum=manabie.bob.NotificationEvent" json:"event,omitempty"`
}

func (m *Notification) Reset()      { *m = Notification{} }
func (*Notification) ProtoMessage() {}
func (*Notification) Descriptor() ([]byte, []int) {
	return fileDescriptor_747b99ccdf86c63e, []int{0}
}
func (m *Notification) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Notification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Notification.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Notification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notification.Merge(m, src)
}
func (m *Notification) XXX_Size() int {
	return m.Size()
}
func (m *Notification) XXX_DiscardUnknown() {
	xxx_messageInfo_Notification.DiscardUnknown(m)
}

var xxx_messageInfo_Notification proto.InternalMessageInfo

func (m *Notification) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Notification) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Notification) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Notification) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Notification) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *Notification) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *Notification) GetScheduleAt() *types.Timestamp {
	if m != nil {
		return m.ScheduleAt
	}
	return nil
}

func (m *Notification) GetEvent() bob.NotificationEvent {
	if m != nil {
		return m.Event
	}
	return bob.NOTIFICATION_EVENT_NONE
}

type CreateNotificationRequest struct {
	Notification *Notification `protobuf:"bytes,1,opt,name=notification,proto3" json:"notification,omitempty"`
}

func (m *CreateNotificationRequest) Reset()      { *m = CreateNotificationRequest{} }
func (*CreateNotificationRequest) ProtoMessage() {}
func (*CreateNotificationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_747b99ccdf86c63e, []int{1}
}
func (m *CreateNotificationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateNotificationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateNotificationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateNotificationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNotificationRequest.Merge(m, src)
}
func (m *CreateNotificationRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateNotificationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNotificationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNotificationRequest proto.InternalMessageInfo

func (m *CreateNotificationRequest) GetNotification() *Notification {
	if m != nil {
		return m.Notification
	}
	return nil
}

type CreateNotificationResponse struct {
	NotificationID string `protobuf:"bytes,1,opt,name=notificationID,proto3" json:"notificationID,omitempty"`
}

func (m *CreateNotificationResponse) Reset()      { *m = CreateNotificationResponse{} }
func (*CreateNotificationResponse) ProtoMessage() {}
func (*CreateNotificationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_747b99ccdf86c63e, []int{2}
}
func (m *CreateNotificationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateNotificationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateNotificationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateNotificationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateNotificationResponse.Merge(m, src)
}
func (m *CreateNotificationResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateNotificationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateNotificationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateNotificationResponse proto.InternalMessageInfo

func (m *CreateNotificationResponse) GetNotificationID() string {
	if m != nil {
		return m.NotificationID
	}
	return ""
}

type UpdateNotificationRequest struct {
	Notification *Notification `protobuf:"bytes,1,opt,name=notification,proto3" json:"notification,omitempty"`
}

func (m *UpdateNotificationRequest) Reset()      { *m = UpdateNotificationRequest{} }
func (*UpdateNotificationRequest) ProtoMessage() {}
func (*UpdateNotificationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_747b99ccdf86c63e, []int{3}
}
func (m *UpdateNotificationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateNotificationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateNotificationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateNotificationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateNotificationRequest.Merge(m, src)
}
func (m *UpdateNotificationRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateNotificationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateNotificationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateNotificationRequest proto.InternalMessageInfo

func (m *UpdateNotificationRequest) GetNotification() *Notification {
	if m != nil {
		return m.Notification
	}
	return nil
}

type UpdateNotificationResponse struct {
	NotificationID string `protobuf:"bytes,1,opt,name=notificationID,proto3" json:"notificationID,omitempty"`
}

func (m *UpdateNotificationResponse) Reset()      { *m = UpdateNotificationResponse{} }
func (*UpdateNotificationResponse) ProtoMessage() {}
func (*UpdateNotificationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_747b99ccdf86c63e, []int{4}
}
func (m *UpdateNotificationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateNotificationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateNotificationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateNotificationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateNotificationResponse.Merge(m, src)
}
func (m *UpdateNotificationResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateNotificationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateNotificationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateNotificationResponse proto.InternalMessageInfo

func (m *UpdateNotificationResponse) GetNotificationID() string {
	if m != nil {
		return m.NotificationID
	}
	return ""
}

type TriggerSendNotificationRequest struct {
}

func (m *TriggerSendNotificationRequest) Reset()      { *m = TriggerSendNotificationRequest{} }
func (*TriggerSendNotificationRequest) ProtoMessage() {}
func (*TriggerSendNotificationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_747b99ccdf86c63e, []int{5}
}
func (m *TriggerSendNotificationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TriggerSendNotificationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TriggerSendNotificationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TriggerSendNotificationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TriggerSendNotificationRequest.Merge(m, src)
}
func (m *TriggerSendNotificationRequest) XXX_Size() int {
	return m.Size()
}
func (m *TriggerSendNotificationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TriggerSendNotificationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TriggerSendNotificationRequest proto.InternalMessageInfo

type TriggerSendNotificationResponse struct {
}

func (m *TriggerSendNotificationResponse) Reset()      { *m = TriggerSendNotificationResponse{} }
func (*TriggerSendNotificationResponse) ProtoMessage() {}
func (*TriggerSendNotificationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_747b99ccdf86c63e, []int{6}
}
func (m *TriggerSendNotificationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TriggerSendNotificationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TriggerSendNotificationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TriggerSendNotificationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TriggerSendNotificationResponse.Merge(m, src)
}
func (m *TriggerSendNotificationResponse) XXX_Size() int {
	return m.Size()
}
func (m *TriggerSendNotificationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TriggerSendNotificationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TriggerSendNotificationResponse proto.InternalMessageInfo

type PushXLOCompletedNotificationRequest struct {
	N           *Notification `protobuf:"bytes,1,opt,name=n,proto3" json:"n,omitempty"`
	DeviceToken string        `protobuf:"bytes,2,opt,name=device_token,json=deviceToken,proto3" json:"device_token,omitempty"`
}

func (m *PushXLOCompletedNotificationRequest) Reset()      { *m = PushXLOCompletedNotificationRequest{} }
func (*PushXLOCompletedNotificationRequest) ProtoMessage() {}
func (*PushXLOCompletedNotificationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_747b99ccdf86c63e, []int{7}
}
func (m *PushXLOCompletedNotificationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushXLOCompletedNotificationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushXLOCompletedNotificationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushXLOCompletedNotificationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushXLOCompletedNotificationRequest.Merge(m, src)
}
func (m *PushXLOCompletedNotificationRequest) XXX_Size() int {
	return m.Size()
}
func (m *PushXLOCompletedNotificationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PushXLOCompletedNotificationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PushXLOCompletedNotificationRequest proto.InternalMessageInfo

func (m *PushXLOCompletedNotificationRequest) GetN() *Notification {
	if m != nil {
		return m.N
	}
	return nil
}

func (m *PushXLOCompletedNotificationRequest) GetDeviceToken() string {
	if m != nil {
		return m.DeviceToken
	}
	return ""
}

type PushXLOCompletedNotificationResponse struct {
	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (m *PushXLOCompletedNotificationResponse) Reset()      { *m = PushXLOCompletedNotificationResponse{} }
func (*PushXLOCompletedNotificationResponse) ProtoMessage() {}
func (*PushXLOCompletedNotificationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_747b99ccdf86c63e, []int{8}
}
func (m *PushXLOCompletedNotificationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushXLOCompletedNotificationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushXLOCompletedNotificationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushXLOCompletedNotificationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushXLOCompletedNotificationResponse.Merge(m, src)
}
func (m *PushXLOCompletedNotificationResponse) XXX_Size() int {
	return m.Size()
}
func (m *PushXLOCompletedNotificationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PushXLOCompletedNotificationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PushXLOCompletedNotificationResponse proto.InternalMessageInfo

func (m *PushXLOCompletedNotificationResponse) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

func init() {
	proto.RegisterType((*Notification)(nil), "manabie.yasuo.Notification")
	golang_proto.RegisterType((*Notification)(nil), "manabie.yasuo.Notification")
	proto.RegisterType((*CreateNotificationRequest)(nil), "manabie.yasuo.CreateNotificationRequest")
	golang_proto.RegisterType((*CreateNotificationRequest)(nil), "manabie.yasuo.CreateNotificationRequest")
	proto.RegisterType((*CreateNotificationResponse)(nil), "manabie.yasuo.CreateNotificationResponse")
	golang_proto.RegisterType((*CreateNotificationResponse)(nil), "manabie.yasuo.CreateNotificationResponse")
	proto.RegisterType((*UpdateNotificationRequest)(nil), "manabie.yasuo.UpdateNotificationRequest")
	golang_proto.RegisterType((*UpdateNotificationRequest)(nil), "manabie.yasuo.UpdateNotificationRequest")
	proto.RegisterType((*UpdateNotificationResponse)(nil), "manabie.yasuo.UpdateNotificationResponse")
	golang_proto.RegisterType((*UpdateNotificationResponse)(nil), "manabie.yasuo.UpdateNotificationResponse")
	proto.RegisterType((*TriggerSendNotificationRequest)(nil), "manabie.yasuo.TriggerSendNotificationRequest")
	golang_proto.RegisterType((*TriggerSendNotificationRequest)(nil), "manabie.yasuo.TriggerSendNotificationRequest")
	proto.RegisterType((*TriggerSendNotificationResponse)(nil), "manabie.yasuo.TriggerSendNotificationResponse")
	golang_proto.RegisterType((*TriggerSendNotificationResponse)(nil), "manabie.yasuo.TriggerSendNotificationResponse")
	proto.RegisterType((*PushXLOCompletedNotificationRequest)(nil), "manabie.yasuo.PushXLOCompletedNotificationRequest")
	golang_proto.RegisterType((*PushXLOCompletedNotificationRequest)(nil), "manabie.yasuo.PushXLOCompletedNotificationRequest")
	proto.RegisterType((*PushXLOCompletedNotificationResponse)(nil), "manabie.yasuo.PushXLOCompletedNotificationResponse")
	golang_proto.RegisterType((*PushXLOCompletedNotificationResponse)(nil), "manabie.yasuo.PushXLOCompletedNotificationResponse")
}

func init() { proto.RegisterFile("ysnotification.proto", fileDescriptor_747b99ccdf86c63e) }
func init() { golang_proto.RegisterFile("ysnotification.proto", fileDescriptor_747b99ccdf86c63e) }

var fileDescriptor_747b99ccdf86c63e = []byte{
	// 640 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0x4d, 0x6b, 0x14, 0x41,
	0x10, 0xdd, 0x5e, 0x93, 0x18, 0x6b, 0xe3, 0x1e, 0xda, 0x20, 0xe3, 0x28, 0x9d, 0xcd, 0x2a, 0xb2,
	0x39, 0x64, 0x16, 0x36, 0xb9, 0xe5, 0x20, 0x9a, 0x28, 0x08, 0xa2, 0x61, 0x13, 0x41, 0x44, 0x08,
	0xf3, 0x51, 0x99, 0x34, 0xd9, 0xe9, 0x1e, 0xa7, 0x7b, 0x02, 0xc1, 0x8b, 0x37, 0xf1, 0xe6, 0xcf,
	0xf0, 0x67, 0x78, 0xf4, 0x98, 0x63, 0x8e, 0x66, 0xf6, 0xe2, 0x31, 0x3f, 0x41, 0xe6, 0x63, 0x71,
	0xf6, 0x23, 0xcb, 0xe6, 0xa0, 0xb7, 0xae, 0xea, 0xd7, 0xf5, 0x5e, 0x55, 0x3d, 0x68, 0x58, 0x3e,
	0x55, 0x42, 0x6a, 0x7e, 0xc8, 0x5d, 0x5b, 0x73, 0x29, 0xac, 0x30, 0x92, 0x5a, 0xd2, 0xdb, 0x81,
	0x2d, 0x6c, 0x87, 0xa3, 0x75, 0x6a, 0xab, 0x58, 0x9a, 0x75, 0x47, 0x3a, 0x6d, 0x14, 0x71, 0x90,
	0x5f, 0x9b, 0x2b, 0xbe, 0x94, 0x7e, 0x0f, 0xdb, 0x59, 0xe4, 0xc4, 0x87, 0x6d, 0xcd, 0x03, 0x54,
	0xda, 0x0e, 0xc2, 0x02, 0xb0, 0xee, 0x73, 0x7d, 0x14, 0x3b, 0x96, 0x2b, 0x83, 0xb6, 0x2f, 0x7d,
	0xf9, 0x17, 0x99, 0x46, 0x59, 0x90, 0x9d, 0x72, 0x78, 0xf3, 0x6b, 0x15, 0x96, 0x5e, 0x97, 0x54,
	0xd0, 0x3a, 0x54, 0xb9, 0x67, 0x90, 0x06, 0x69, 0xdd, 0xea, 0x56, 0xb9, 0x47, 0x97, 0x61, 0x5e,
	0x73, 0xdd, 0x43, 0xa3, 0x9a, 0xa5, 0xf2, 0x80, 0x36, 0xa0, 0xe6, 0xa1, 0x72, 0x23, 0x1e, 0xa6,
	0x8f, 0x8c, 0x1b, 0xd9, 0x5d, 0x39, 0x45, 0x29, 0xcc, 0xe9, 0xd3, 0x10, 0x8d, 0xb9, 0xec, 0x2a,
	0x3b, 0xd3, 0xbb, 0xb0, 0xa0, 0xed, 0xc8, 0x47, 0x6d, 0xcc, 0x67, 0xd9, 0x22, 0x4a, 0xb1, 0x9e,
	0xad, 0x6d, 0x63, 0x21, 0xc7, 0xa6, 0x67, 0xba, 0x05, 0x35, 0xe5, 0x1e, 0xa1, 0x17, 0xf7, 0xf0,
	0xc0, 0xd6, 0xc6, 0xcd, 0x06, 0x69, 0xd5, 0x3a, 0xa6, 0x95, 0xb7, 0x6f, 0x0d, 0x9a, 0xb2, 0xf6,
	0x07, 0xed, 0x77, 0x61, 0x00, 0x7f, 0xaa, 0xe9, 0x26, 0xcc, 0xe3, 0x09, 0x0a, 0x6d, 0x2c, 0x36,
	0x48, 0xab, 0xde, 0x61, 0xd6, 0x60, 0xa8, 0x8e, 0x74, 0xac, 0x72, 0xbb, 0xcf, 0x53, 0x54, 0x37,
	0x07, 0x37, 0x3f, 0xc0, 0xbd, 0xed, 0x08, 0x6d, 0x8d, 0x65, 0x44, 0x17, 0x3f, 0xc6, 0xa8, 0x34,
	0x7d, 0x02, 0x4b, 0xe5, 0x6d, 0x65, 0x13, 0xaa, 0x75, 0xee, 0x5b, 0x43, 0xeb, 0x1a, 0xaa, 0xdd,
	0x1d, 0x7a, 0xd0, 0xdc, 0x01, 0x73, 0x52, 0x75, 0x15, 0x4a, 0xa1, 0x90, 0x3e, 0x86, 0x7a, 0x19,
	0xfd, 0x72, 0xa7, 0x58, 0xc1, 0x48, 0x36, 0xd5, 0xf8, 0x36, 0xf4, 0xfe, 0xa1, 0xc6, 0x49, 0xd5,
	0xaf, 0xa9, 0xb1, 0x01, 0x6c, 0x3f, 0xe2, 0xbe, 0x8f, 0xd1, 0x1e, 0x0a, 0x6f, 0x82, 0xd0, 0xe6,
	0x2a, 0xac, 0x5c, 0x89, 0xc8, 0xc9, 0x9a, 0x0a, 0x1e, 0xee, 0xc6, 0xea, 0xe8, 0xdd, 0xab, 0x37,
	0xdb, 0x32, 0x08, 0x7b, 0xa8, 0x71, 0x52, 0x25, 0xba, 0x06, 0x64, 0xa6, 0x3e, 0x89, 0xa0, 0xab,
	0xb0, 0xe4, 0xe1, 0x09, 0x77, 0xf1, 0x40, 0xcb, 0x63, 0x14, 0x85, 0xa1, 0x6b, 0x79, 0x6e, 0x3f,
	0x4d, 0x35, 0x5f, 0xc0, 0xa3, 0xe9, 0xa4, 0xc5, 0x24, 0x18, 0x80, 0x8a, 0x5d, 0x17, 0x95, 0x3a,
	0x8c, 0x7b, 0x19, 0xfd, 0x62, 0xb7, 0x94, 0xe9, 0xf4, 0xe7, 0xe0, 0x4e, 0xf9, 0xe1, 0x1e, 0x46,
	0x29, 0x09, 0xe5, 0x40, 0xc7, 0x3d, 0x40, 0x5b, 0x23, 0xc2, 0xaf, 0x34, 0xa1, 0xb9, 0x36, 0x03,
	0xb2, 0x90, 0xc8, 0x81, 0x8e, 0xaf, 0x72, 0x8c, 0xea, 0x4a, 0x2f, 0x8d, 0x51, 0x4d, 0xf1, 0xc5,
	0x27, 0x30, 0x8b, 0x6d, 0xee, 0xa2, 0xf0, 0xb8, 0xf0, 0x87, 0x28, 0xd7, 0x47, 0x0a, 0x4d, 0xb7,
	0x86, 0x69, 0xcd, 0x0a, 0x2f, 0xc8, 0x25, 0x18, 0xf9, 0x14, 0xf6, 0xb8, 0xf0, 0x7b, 0xff, 0x61,
	0xb0, 0x5f, 0x08, 0x3c, 0x98, 0x66, 0x12, 0xda, 0x19, 0xa9, 0x35, 0x83, 0x8d, 0xcd, 0x8d, 0x6b,
	0xbd, 0xc9, 0x95, 0x3c, 0x13, 0x67, 0x17, 0xac, 0x72, 0x7e, 0xc1, 0x2a, 0x97, 0x17, 0x8c, 0x7c,
	0x4e, 0x18, 0xf9, 0x9e, 0x30, 0xf2, 0x33, 0x61, 0xe4, 0x2c, 0x61, 0xe4, 0x57, 0xc2, 0xc8, 0xef,
	0x84, 0x55, 0x2e, 0x13, 0x46, 0xbe, 0xf5, 0x59, 0xe5, 0x47, 0x9f, 0x91, 0xb3, 0x3e, 0xab, 0x9c,
	0xf7, 0x59, 0xe5, 0xfd, 0x66, 0xe9, 0x93, 0x28, 0x88, 0xd7, 0xd3, 0xb3, 0x63, 0xbb, 0xc7, 0x28,
	0xbc, 0x76, 0x78, 0xec, 0xb7, 0x7d, 0x14, 0xf9, 0x6f, 0x91, 0x29, 0xda, 0x0a, 0x1d, 0x67, 0x21,
	0x8b, 0x37, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0xa6, 0x2f, 0x77, 0xff, 0xb9, 0x06, 0x00, 0x00,
}

func (this *Notification) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Notification)
	if !ok {
		that2, ok := that.(Notification)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Target != that1.Target {
		return false
	}
	if this.Data != that1.Data {
		return false
	}
	if !this.ScheduleAt.Equal(that1.ScheduleAt) {
		return false
	}
	if this.Event != that1.Event {
		return false
	}
	return true
}
func (this *CreateNotificationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateNotificationRequest)
	if !ok {
		that2, ok := that.(CreateNotificationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Notification.Equal(that1.Notification) {
		return false
	}
	return true
}
func (this *CreateNotificationResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateNotificationResponse)
	if !ok {
		that2, ok := that.(CreateNotificationResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NotificationID != that1.NotificationID {
		return false
	}
	return true
}
func (this *UpdateNotificationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateNotificationRequest)
	if !ok {
		that2, ok := that.(UpdateNotificationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Notification.Equal(that1.Notification) {
		return false
	}
	return true
}
func (this *UpdateNotificationResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateNotificationResponse)
	if !ok {
		that2, ok := that.(UpdateNotificationResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NotificationID != that1.NotificationID {
		return false
	}
	return true
}
func (this *TriggerSendNotificationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TriggerSendNotificationRequest)
	if !ok {
		that2, ok := that.(TriggerSendNotificationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *TriggerSendNotificationResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TriggerSendNotificationResponse)
	if !ok {
		that2, ok := that.(TriggerSendNotificationResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *PushXLOCompletedNotificationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PushXLOCompletedNotificationRequest)
	if !ok {
		that2, ok := that.(PushXLOCompletedNotificationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.N.Equal(that1.N) {
		return false
	}
	if this.DeviceToken != that1.DeviceToken {
		return false
	}
	return true
}
func (this *PushXLOCompletedNotificationResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PushXLOCompletedNotificationResponse)
	if !ok {
		that2, ok := that.(PushXLOCompletedNotificationResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Successful != that1.Successful {
		return false
	}
	return true
}
func (this *Notification) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&pb.Notification{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Target: "+fmt.Sprintf("%#v", this.Target)+",\n")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	if this.ScheduleAt != nil {
		s = append(s, "ScheduleAt: "+fmt.Sprintf("%#v", this.ScheduleAt)+",\n")
	}
	s = append(s, "Event: "+fmt.Sprintf("%#v", this.Event)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateNotificationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CreateNotificationRequest{")
	if this.Notification != nil {
		s = append(s, "Notification: "+fmt.Sprintf("%#v", this.Notification)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateNotificationResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CreateNotificationResponse{")
	s = append(s, "NotificationID: "+fmt.Sprintf("%#v", this.NotificationID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateNotificationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpdateNotificationRequest{")
	if this.Notification != nil {
		s = append(s, "Notification: "+fmt.Sprintf("%#v", this.Notification)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateNotificationResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpdateNotificationResponse{")
	s = append(s, "NotificationID: "+fmt.Sprintf("%#v", this.NotificationID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TriggerSendNotificationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.TriggerSendNotificationRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TriggerSendNotificationResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.TriggerSendNotificationResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PushXLOCompletedNotificationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.PushXLOCompletedNotificationRequest{")
	if this.N != nil {
		s = append(s, "N: "+fmt.Sprintf("%#v", this.N)+",\n")
	}
	s = append(s, "DeviceToken: "+fmt.Sprintf("%#v", this.DeviceToken)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PushXLOCompletedNotificationResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.PushXLOCompletedNotificationResponse{")
	s = append(s, "Successful: "+fmt.Sprintf("%#v", this.Successful)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringYsnotification(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NotificationServiceClient is the client API for NotificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotificationServiceClient interface {
	CreateNotification(ctx context.Context, in *CreateNotificationRequest, opts ...grpc.CallOption) (*CreateNotificationResponse, error)
	UpdateNotification(ctx context.Context, in *UpdateNotificationRequest, opts ...grpc.CallOption) (*UpdateNotificationResponse, error)
	TriggerPendingNotification(ctx context.Context, in *TriggerSendNotificationRequest, opts ...grpc.CallOption) (*TriggerSendNotificationResponse, error)
	CreateSingleNotification(ctx context.Context, in *CreateNotificationRequest, opts ...grpc.CallOption) (*CreateNotificationResponse, error)
	PushXLOCompletedNotification(ctx context.Context, in *PushXLOCompletedNotificationRequest, opts ...grpc.CallOption) (*PushXLOCompletedNotificationResponse, error)
}

type notificationServiceClient struct {
	cc *grpc.ClientConn
}

func NewNotificationServiceClient(cc *grpc.ClientConn) NotificationServiceClient {
	return &notificationServiceClient{cc}
}

func (c *notificationServiceClient) CreateNotification(ctx context.Context, in *CreateNotificationRequest, opts ...grpc.CallOption) (*CreateNotificationResponse, error) {
	out := new(CreateNotificationResponse)
	err := c.cc.Invoke(ctx, "/manabie.yasuo.NotificationService/CreateNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) UpdateNotification(ctx context.Context, in *UpdateNotificationRequest, opts ...grpc.CallOption) (*UpdateNotificationResponse, error) {
	out := new(UpdateNotificationResponse)
	err := c.cc.Invoke(ctx, "/manabie.yasuo.NotificationService/UpdateNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) TriggerPendingNotification(ctx context.Context, in *TriggerSendNotificationRequest, opts ...grpc.CallOption) (*TriggerSendNotificationResponse, error) {
	out := new(TriggerSendNotificationResponse)
	err := c.cc.Invoke(ctx, "/manabie.yasuo.NotificationService/TriggerPendingNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) CreateSingleNotification(ctx context.Context, in *CreateNotificationRequest, opts ...grpc.CallOption) (*CreateNotificationResponse, error) {
	out := new(CreateNotificationResponse)
	err := c.cc.Invoke(ctx, "/manabie.yasuo.NotificationService/CreateSingleNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceClient) PushXLOCompletedNotification(ctx context.Context, in *PushXLOCompletedNotificationRequest, opts ...grpc.CallOption) (*PushXLOCompletedNotificationResponse, error) {
	out := new(PushXLOCompletedNotificationResponse)
	err := c.cc.Invoke(ctx, "/manabie.yasuo.NotificationService/PushXLOCompletedNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceServer is the server API for NotificationService service.
type NotificationServiceServer interface {
	CreateNotification(context.Context, *CreateNotificationRequest) (*CreateNotificationResponse, error)
	UpdateNotification(context.Context, *UpdateNotificationRequest) (*UpdateNotificationResponse, error)
	TriggerPendingNotification(context.Context, *TriggerSendNotificationRequest) (*TriggerSendNotificationResponse, error)
	CreateSingleNotification(context.Context, *CreateNotificationRequest) (*CreateNotificationResponse, error)
	PushXLOCompletedNotification(context.Context, *PushXLOCompletedNotificationRequest) (*PushXLOCompletedNotificationResponse, error)
}

// UnimplementedNotificationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNotificationServiceServer struct {
}

func (*UnimplementedNotificationServiceServer) CreateNotification(ctx context.Context, req *CreateNotificationRequest) (*CreateNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotification not implemented")
}
func (*UnimplementedNotificationServiceServer) UpdateNotification(ctx context.Context, req *UpdateNotificationRequest) (*UpdateNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotification not implemented")
}
func (*UnimplementedNotificationServiceServer) TriggerPendingNotification(ctx context.Context, req *TriggerSendNotificationRequest) (*TriggerSendNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerPendingNotification not implemented")
}
func (*UnimplementedNotificationServiceServer) CreateSingleNotification(ctx context.Context, req *CreateNotificationRequest) (*CreateNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSingleNotification not implemented")
}
func (*UnimplementedNotificationServiceServer) PushXLOCompletedNotification(ctx context.Context, req *PushXLOCompletedNotificationRequest) (*PushXLOCompletedNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushXLOCompletedNotification not implemented")
}

func RegisterNotificationServiceServer(s *grpc.Server, srv NotificationServiceServer) {
	s.RegisterService(&_NotificationService_serviceDesc, srv)
}

func _NotificationService_CreateNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).CreateNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.yasuo.NotificationService/CreateNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).CreateNotification(ctx, req.(*CreateNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_UpdateNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).UpdateNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.yasuo.NotificationService/UpdateNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).UpdateNotification(ctx, req.(*UpdateNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_TriggerPendingNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerSendNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).TriggerPendingNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.yasuo.NotificationService/TriggerPendingNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).TriggerPendingNotification(ctx, req.(*TriggerSendNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_CreateSingleNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).CreateSingleNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.yasuo.NotificationService/CreateSingleNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).CreateSingleNotification(ctx, req.(*CreateNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationService_PushXLOCompletedNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushXLOCompletedNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceServer).PushXLOCompletedNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.yasuo.NotificationService/PushXLOCompletedNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceServer).PushXLOCompletedNotification(ctx, req.(*PushXLOCompletedNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotificationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "manabie.yasuo.NotificationService",
	HandlerType: (*NotificationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNotification",
			Handler:    _NotificationService_CreateNotification_Handler,
		},
		{
			MethodName: "UpdateNotification",
			Handler:    _NotificationService_UpdateNotification_Handler,
		},
		{
			MethodName: "TriggerPendingNotification",
			Handler:    _NotificationService_TriggerPendingNotification_Handler,
		},
		{
			MethodName: "CreateSingleNotification",
			Handler:    _NotificationService_CreateSingleNotification_Handler,
		},
		{
			MethodName: "PushXLOCompletedNotification",
			Handler:    _NotificationService_PushXLOCompletedNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ysnotification.proto",
}

func (m *Notification) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Notification) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Notification) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Event != 0 {
		i = encodeVarintYsnotification(dAtA, i, uint64(m.Event))
		i--
		dAtA[i] = 0x40
	}
	if m.ScheduleAt != nil {
		{
			size, err := m.ScheduleAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYsnotification(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintYsnotification(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintYsnotification(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintYsnotification(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintYsnotification(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintYsnotification(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintYsnotification(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateNotificationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateNotificationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateNotificationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Notification != nil {
		{
			size, err := m.Notification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYsnotification(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateNotificationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateNotificationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateNotificationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NotificationID) > 0 {
		i -= len(m.NotificationID)
		copy(dAtA[i:], m.NotificationID)
		i = encodeVarintYsnotification(dAtA, i, uint64(len(m.NotificationID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateNotificationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateNotificationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateNotificationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Notification != nil {
		{
			size, err := m.Notification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYsnotification(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateNotificationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateNotificationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateNotificationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NotificationID) > 0 {
		i -= len(m.NotificationID)
		copy(dAtA[i:], m.NotificationID)
		i = encodeVarintYsnotification(dAtA, i, uint64(len(m.NotificationID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TriggerSendNotificationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TriggerSendNotificationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TriggerSendNotificationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TriggerSendNotificationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TriggerSendNotificationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TriggerSendNotificationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PushXLOCompletedNotificationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushXLOCompletedNotificationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushXLOCompletedNotificationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeviceToken) > 0 {
		i -= len(m.DeviceToken)
		copy(dAtA[i:], m.DeviceToken)
		i = encodeVarintYsnotification(dAtA, i, uint64(len(m.DeviceToken)))
		i--
		dAtA[i] = 0x12
	}
	if m.N != nil {
		{
			size, err := m.N.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYsnotification(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushXLOCompletedNotificationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushXLOCompletedNotificationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushXLOCompletedNotificationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Successful {
		i--
		if m.Successful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintYsnotification(dAtA []byte, offset int, v uint64) int {
	offset -= sovYsnotification(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Notification) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovYsnotification(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovYsnotification(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovYsnotification(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovYsnotification(uint64(l))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovYsnotification(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovYsnotification(uint64(l))
	}
	if m.ScheduleAt != nil {
		l = m.ScheduleAt.Size()
		n += 1 + l + sovYsnotification(uint64(l))
	}
	if m.Event != 0 {
		n += 1 + sovYsnotification(uint64(m.Event))
	}
	return n
}

func (m *CreateNotificationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Notification != nil {
		l = m.Notification.Size()
		n += 1 + l + sovYsnotification(uint64(l))
	}
	return n
}

func (m *CreateNotificationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NotificationID)
	if l > 0 {
		n += 1 + l + sovYsnotification(uint64(l))
	}
	return n
}

func (m *UpdateNotificationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Notification != nil {
		l = m.Notification.Size()
		n += 1 + l + sovYsnotification(uint64(l))
	}
	return n
}

func (m *UpdateNotificationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NotificationID)
	if l > 0 {
		n += 1 + l + sovYsnotification(uint64(l))
	}
	return n
}

func (m *TriggerSendNotificationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TriggerSendNotificationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PushXLOCompletedNotificationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.N != nil {
		l = m.N.Size()
		n += 1 + l + sovYsnotification(uint64(l))
	}
	l = len(m.DeviceToken)
	if l > 0 {
		n += 1 + l + sovYsnotification(uint64(l))
	}
	return n
}

func (m *PushXLOCompletedNotificationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Successful {
		n += 2
	}
	return n
}

func sovYsnotification(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozYsnotification(x uint64) (n int) {
	return sovYsnotification(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Notification) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Notification{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Target:` + fmt.Sprintf("%v", this.Target) + `,`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`ScheduleAt:` + strings.Replace(fmt.Sprintf("%v", this.ScheduleAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`Event:` + fmt.Sprintf("%v", this.Event) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateNotificationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateNotificationRequest{`,
		`Notification:` + strings.Replace(this.Notification.String(), "Notification", "Notification", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateNotificationResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateNotificationResponse{`,
		`NotificationID:` + fmt.Sprintf("%v", this.NotificationID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateNotificationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateNotificationRequest{`,
		`Notification:` + strings.Replace(this.Notification.String(), "Notification", "Notification", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateNotificationResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateNotificationResponse{`,
		`NotificationID:` + fmt.Sprintf("%v", this.NotificationID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TriggerSendNotificationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TriggerSendNotificationRequest{`,
		`}`,
	}, "")
	return s
}
func (this *TriggerSendNotificationResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TriggerSendNotificationResponse{`,
		`}`,
	}, "")
	return s
}
func (this *PushXLOCompletedNotificationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PushXLOCompletedNotificationRequest{`,
		`N:` + strings.Replace(this.N.String(), "Notification", "Notification", 1) + `,`,
		`DeviceToken:` + fmt.Sprintf("%v", this.DeviceToken) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PushXLOCompletedNotificationResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PushXLOCompletedNotificationResponse{`,
		`Successful:` + fmt.Sprintf("%v", this.Successful) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringYsnotification(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Notification) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYsnotification
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Notification: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Notification: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsnotification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYsnotification
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYsnotification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsnotification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYsnotification
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYsnotification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsnotification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYsnotification
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYsnotification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsnotification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYsnotification
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYsnotification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsnotification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYsnotification
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYsnotification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsnotification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYsnotification
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYsnotification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduleAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsnotification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYsnotification
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYsnotification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScheduleAt == nil {
				m.ScheduleAt = &types.Timestamp{}
			}
			if err := m.ScheduleAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			m.Event = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsnotification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Event |= bob.NotificationEvent(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipYsnotification(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYsnotification
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateNotificationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYsnotification
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateNotificationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateNotificationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsnotification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYsnotification
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYsnotification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Notification == nil {
				m.Notification = &Notification{}
			}
			if err := m.Notification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYsnotification(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYsnotification
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateNotificationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYsnotification
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateNotificationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateNotificationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsnotification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYsnotification
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYsnotification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotificationID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYsnotification(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYsnotification
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateNotificationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYsnotification
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateNotificationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateNotificationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsnotification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYsnotification
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYsnotification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Notification == nil {
				m.Notification = &Notification{}
			}
			if err := m.Notification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYsnotification(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYsnotification
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateNotificationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYsnotification
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateNotificationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateNotificationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotificationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsnotification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYsnotification
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYsnotification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NotificationID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYsnotification(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYsnotification
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TriggerSendNotificationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYsnotification
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TriggerSendNotificationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TriggerSendNotificationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipYsnotification(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYsnotification
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TriggerSendNotificationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYsnotification
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TriggerSendNotificationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TriggerSendNotificationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipYsnotification(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYsnotification
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushXLOCompletedNotificationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYsnotification
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushXLOCompletedNotificationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushXLOCompletedNotificationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsnotification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYsnotification
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYsnotification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.N == nil {
				m.N = &Notification{}
			}
			if err := m.N.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsnotification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYsnotification
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYsnotification
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYsnotification(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYsnotification
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushXLOCompletedNotificationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYsnotification
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushXLOCompletedNotificationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushXLOCompletedNotificationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Successful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsnotification
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Successful = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipYsnotification(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYsnotification
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipYsnotification(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowYsnotification
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowYsnotification
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowYsnotification
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthYsnotification
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupYsnotification
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthYsnotification
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthYsnotification        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowYsnotification          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupYsnotification = fmt.Errorf("proto: unexpected end of group")
)
