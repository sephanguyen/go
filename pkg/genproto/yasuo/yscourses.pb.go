// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: yscourses.proto

package pb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	bob "github.com/manabie-com/backend/pkg/genproto/bob"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Chapter struct {
	ChapterId    string      `protobuf:"bytes,1,opt,name=chapter_id,json=chapterId,proto3" json:"chapter_id,omitempty"`
	ChapterName  string      `protobuf:"bytes,2,opt,name=chapter_name,json=chapterName,proto3" json:"chapter_name,omitempty"`
	Country      bob.Country `protobuf:"varint,3,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"`
	Subject      bob.Subject `protobuf:"varint,4,opt,name=subject,proto3,enum=manabie.bob.Subject" json:"subject,omitempty"`
	Grade        string      `protobuf:"bytes,5,opt,name=grade,proto3" json:"grade,omitempty"`
	DisplayOrder int32       `protobuf:"varint,6,opt,name=display_order,json=displayOrder,proto3" json:"display_order,omitempty"`
	SchoolId     int32       `protobuf:"varint,7,opt,name=school_id,json=schoolId,proto3" json:"school_id,omitempty"`
}

func (m *Chapter) Reset()      { *m = Chapter{} }
func (*Chapter) ProtoMessage() {}
func (*Chapter) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e2d332d16e53d0, []int{0}
}
func (m *Chapter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Chapter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Chapter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Chapter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chapter.Merge(m, src)
}
func (m *Chapter) XXX_Size() int {
	return m.Size()
}
func (m *Chapter) XXX_DiscardUnknown() {
	xxx_messageInfo_Chapter.DiscardUnknown(m)
}

var xxx_messageInfo_Chapter proto.InternalMessageInfo

func (m *Chapter) GetChapterId() string {
	if m != nil {
		return m.ChapterId
	}
	return ""
}

func (m *Chapter) GetChapterName() string {
	if m != nil {
		return m.ChapterName
	}
	return ""
}

func (m *Chapter) GetCountry() bob.Country {
	if m != nil {
		return m.Country
	}
	return bob.COUNTRY_NONE
}

func (m *Chapter) GetSubject() bob.Subject {
	if m != nil {
		return m.Subject
	}
	return bob.SUBJECT_NONE
}

func (m *Chapter) GetGrade() string {
	if m != nil {
		return m.Grade
	}
	return ""
}

func (m *Chapter) GetDisplayOrder() int32 {
	if m != nil {
		return m.DisplayOrder
	}
	return 0
}

func (m *Chapter) GetSchoolId() int32 {
	if m != nil {
		return m.SchoolId
	}
	return 0
}

type UpsertCoursesRequest struct {
	Courses []*UpsertCoursesRequest_Course `protobuf:"bytes,1,rep,name=courses,proto3" json:"courses,omitempty"`
}

func (m *UpsertCoursesRequest) Reset()      { *m = UpsertCoursesRequest{} }
func (*UpsertCoursesRequest) ProtoMessage() {}
func (*UpsertCoursesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e2d332d16e53d0, []int{1}
}
func (m *UpsertCoursesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertCoursesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertCoursesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertCoursesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertCoursesRequest.Merge(m, src)
}
func (m *UpsertCoursesRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpsertCoursesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertCoursesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertCoursesRequest proto.InternalMessageInfo

func (m *UpsertCoursesRequest) GetCourses() []*UpsertCoursesRequest_Course {
	if m != nil {
		return m.Courses
	}
	return nil
}

type UpsertCoursesRequest_Course struct {
	Id           string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Country      bob.Country `protobuf:"varint,3,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"`
	Subject      bob.Subject `protobuf:"varint,4,opt,name=subject,proto3,enum=manabie.bob.Subject" json:"subject,omitempty"`
	Grade        string      `protobuf:"bytes,5,opt,name=grade,proto3" json:"grade,omitempty"`
	DisplayOrder int32       `protobuf:"varint,6,opt,name=display_order,json=displayOrder,proto3" json:"display_order,omitempty"`
	ChapterIds   []string    `protobuf:"bytes,7,rep,name=chapter_ids,json=chapterIds,proto3" json:"chapter_ids,omitempty"` // Deprecated: Do not use.
	SchoolId     int32       `protobuf:"varint,8,opt,name=school_id,json=schoolId,proto3" json:"school_id,omitempty"`
	BookIds      []string    `protobuf:"bytes,9,rep,name=book_ids,json=bookIds,proto3" json:"book_ids,omitempty"` // Deprecated: Do not use.
	Icon         string      `protobuf:"bytes,10,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (m *UpsertCoursesRequest_Course) Reset()      { *m = UpsertCoursesRequest_Course{} }
func (*UpsertCoursesRequest_Course) ProtoMessage() {}
func (*UpsertCoursesRequest_Course) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e2d332d16e53d0, []int{1, 0}
}
func (m *UpsertCoursesRequest_Course) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertCoursesRequest_Course) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertCoursesRequest_Course.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertCoursesRequest_Course) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertCoursesRequest_Course.Merge(m, src)
}
func (m *UpsertCoursesRequest_Course) XXX_Size() int {
	return m.Size()
}
func (m *UpsertCoursesRequest_Course) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertCoursesRequest_Course.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertCoursesRequest_Course proto.InternalMessageInfo

func (m *UpsertCoursesRequest_Course) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpsertCoursesRequest_Course) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpsertCoursesRequest_Course) GetCountry() bob.Country {
	if m != nil {
		return m.Country
	}
	return bob.COUNTRY_NONE
}

func (m *UpsertCoursesRequest_Course) GetSubject() bob.Subject {
	if m != nil {
		return m.Subject
	}
	return bob.SUBJECT_NONE
}

func (m *UpsertCoursesRequest_Course) GetGrade() string {
	if m != nil {
		return m.Grade
	}
	return ""
}

func (m *UpsertCoursesRequest_Course) GetDisplayOrder() int32 {
	if m != nil {
		return m.DisplayOrder
	}
	return 0
}

// Deprecated: Do not use.
func (m *UpsertCoursesRequest_Course) GetChapterIds() []string {
	if m != nil {
		return m.ChapterIds
	}
	return nil
}

func (m *UpsertCoursesRequest_Course) GetSchoolId() int32 {
	if m != nil {
		return m.SchoolId
	}
	return 0
}

// Deprecated: Do not use.
func (m *UpsertCoursesRequest_Course) GetBookIds() []string {
	if m != nil {
		return m.BookIds
	}
	return nil
}

func (m *UpsertCoursesRequest_Course) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

type UpsertCoursesResponse struct {
	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (m *UpsertCoursesResponse) Reset()      { *m = UpsertCoursesResponse{} }
func (*UpsertCoursesResponse) ProtoMessage() {}
func (*UpsertCoursesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e2d332d16e53d0, []int{2}
}
func (m *UpsertCoursesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertCoursesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertCoursesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertCoursesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertCoursesResponse.Merge(m, src)
}
func (m *UpsertCoursesResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpsertCoursesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertCoursesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertCoursesResponse proto.InternalMessageInfo

func (m *UpsertCoursesResponse) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

type DeleteCoursesRequest struct {
	CourseIds []string `protobuf:"bytes,1,rep,name=course_ids,json=courseIds,proto3" json:"course_ids,omitempty"`
}

func (m *DeleteCoursesRequest) Reset()      { *m = DeleteCoursesRequest{} }
func (*DeleteCoursesRequest) ProtoMessage() {}
func (*DeleteCoursesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e2d332d16e53d0, []int{3}
}
func (m *DeleteCoursesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteCoursesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteCoursesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteCoursesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCoursesRequest.Merge(m, src)
}
func (m *DeleteCoursesRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteCoursesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCoursesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCoursesRequest proto.InternalMessageInfo

func (m *DeleteCoursesRequest) GetCourseIds() []string {
	if m != nil {
		return m.CourseIds
	}
	return nil
}

type DeleteCoursesResponse struct {
	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (m *DeleteCoursesResponse) Reset()      { *m = DeleteCoursesResponse{} }
func (*DeleteCoursesResponse) ProtoMessage() {}
func (*DeleteCoursesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e2d332d16e53d0, []int{4}
}
func (m *DeleteCoursesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteCoursesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteCoursesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteCoursesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCoursesResponse.Merge(m, src)
}
func (m *DeleteCoursesResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteCoursesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCoursesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCoursesResponse proto.InternalMessageInfo

func (m *DeleteCoursesResponse) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

type CreateBrightCoveUploadUrlRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *CreateBrightCoveUploadUrlRequest) Reset()      { *m = CreateBrightCoveUploadUrlRequest{} }
func (*CreateBrightCoveUploadUrlRequest) ProtoMessage() {}
func (*CreateBrightCoveUploadUrlRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e2d332d16e53d0, []int{5}
}
func (m *CreateBrightCoveUploadUrlRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateBrightCoveUploadUrlRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateBrightCoveUploadUrlRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateBrightCoveUploadUrlRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBrightCoveUploadUrlRequest.Merge(m, src)
}
func (m *CreateBrightCoveUploadUrlRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateBrightCoveUploadUrlRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBrightCoveUploadUrlRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBrightCoveUploadUrlRequest proto.InternalMessageInfo

func (m *CreateBrightCoveUploadUrlRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CreateBrightCoveUploadUrlResponse struct {
	SignedUrl     string `protobuf:"bytes,1,opt,name=signed_url,json=signedUrl,proto3" json:"signed_url,omitempty"`
	ApiRequestUrl string `protobuf:"bytes,2,opt,name=api_request_url,json=apiRequestUrl,proto3" json:"api_request_url,omitempty"`
	VideoId       string `protobuf:"bytes,3,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
}

func (m *CreateBrightCoveUploadUrlResponse) Reset()      { *m = CreateBrightCoveUploadUrlResponse{} }
func (*CreateBrightCoveUploadUrlResponse) ProtoMessage() {}
func (*CreateBrightCoveUploadUrlResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e2d332d16e53d0, []int{6}
}
func (m *CreateBrightCoveUploadUrlResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateBrightCoveUploadUrlResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateBrightCoveUploadUrlResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateBrightCoveUploadUrlResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBrightCoveUploadUrlResponse.Merge(m, src)
}
func (m *CreateBrightCoveUploadUrlResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateBrightCoveUploadUrlResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBrightCoveUploadUrlResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBrightCoveUploadUrlResponse proto.InternalMessageInfo

func (m *CreateBrightCoveUploadUrlResponse) GetSignedUrl() string {
	if m != nil {
		return m.SignedUrl
	}
	return ""
}

func (m *CreateBrightCoveUploadUrlResponse) GetApiRequestUrl() string {
	if m != nil {
		return m.ApiRequestUrl
	}
	return ""
}

func (m *CreateBrightCoveUploadUrlResponse) GetVideoId() string {
	if m != nil {
		return m.VideoId
	}
	return ""
}

type FinishUploadBrightCoveRequest struct {
	ApiRequestUrl string `protobuf:"bytes,1,opt,name=api_request_url,json=apiRequestUrl,proto3" json:"api_request_url,omitempty"`
	VideoId       string `protobuf:"bytes,2,opt,name=video_id,json=videoId,proto3" json:"video_id,omitempty"`
}

func (m *FinishUploadBrightCoveRequest) Reset()      { *m = FinishUploadBrightCoveRequest{} }
func (*FinishUploadBrightCoveRequest) ProtoMessage() {}
func (*FinishUploadBrightCoveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e2d332d16e53d0, []int{7}
}
func (m *FinishUploadBrightCoveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinishUploadBrightCoveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinishUploadBrightCoveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FinishUploadBrightCoveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinishUploadBrightCoveRequest.Merge(m, src)
}
func (m *FinishUploadBrightCoveRequest) XXX_Size() int {
	return m.Size()
}
func (m *FinishUploadBrightCoveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FinishUploadBrightCoveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FinishUploadBrightCoveRequest proto.InternalMessageInfo

func (m *FinishUploadBrightCoveRequest) GetApiRequestUrl() string {
	if m != nil {
		return m.ApiRequestUrl
	}
	return ""
}

func (m *FinishUploadBrightCoveRequest) GetVideoId() string {
	if m != nil {
		return m.VideoId
	}
	return ""
}

type FinishUploadBrightCoveResponse struct {
}

func (m *FinishUploadBrightCoveResponse) Reset()      { *m = FinishUploadBrightCoveResponse{} }
func (*FinishUploadBrightCoveResponse) ProtoMessage() {}
func (*FinishUploadBrightCoveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e2d332d16e53d0, []int{8}
}
func (m *FinishUploadBrightCoveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FinishUploadBrightCoveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FinishUploadBrightCoveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FinishUploadBrightCoveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinishUploadBrightCoveResponse.Merge(m, src)
}
func (m *FinishUploadBrightCoveResponse) XXX_Size() int {
	return m.Size()
}
func (m *FinishUploadBrightCoveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FinishUploadBrightCoveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FinishUploadBrightCoveResponse proto.InternalMessageInfo

type CoursesUpdated struct {
	Req *UpsertCoursesRequest `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
}

func (m *CoursesUpdated) Reset()      { *m = CoursesUpdated{} }
func (*CoursesUpdated) ProtoMessage() {}
func (*CoursesUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e2d332d16e53d0, []int{9}
}
func (m *CoursesUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoursesUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoursesUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoursesUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoursesUpdated.Merge(m, src)
}
func (m *CoursesUpdated) XXX_Size() int {
	return m.Size()
}
func (m *CoursesUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_CoursesUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_CoursesUpdated proto.InternalMessageInfo

func (m *CoursesUpdated) GetReq() *UpsertCoursesRequest {
	if m != nil {
		return m.Req
	}
	return nil
}

type UpsertCourseClassesResponse struct {
	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (m *UpsertCourseClassesResponse) Reset()      { *m = UpsertCourseClassesResponse{} }
func (*UpsertCourseClassesResponse) ProtoMessage() {}
func (*UpsertCourseClassesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e2d332d16e53d0, []int{10}
}
func (m *UpsertCourseClassesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertCourseClassesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertCourseClassesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertCourseClassesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertCourseClassesResponse.Merge(m, src)
}
func (m *UpsertCourseClassesResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpsertCourseClassesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertCourseClassesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertCourseClassesResponse proto.InternalMessageInfo

func (m *UpsertCourseClassesResponse) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

type QuizSets struct {
	LoId         string           `protobuf:"bytes,1,opt,name=lo_id,json=loId,proto3" json:"lo_id,omitempty"`
	QuestionId   string           `protobuf:"bytes,2,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	DisplayOrder string           `protobuf:"bytes,3,opt,name=display_order,json=displayOrder,proto3" json:"display_order,omitempty"`
	UpdatedAt    *types.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt    *types.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *QuizSets) Reset()      { *m = QuizSets{} }
func (*QuizSets) ProtoMessage() {}
func (*QuizSets) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e2d332d16e53d0, []int{11}
}
func (m *QuizSets) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuizSets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuizSets.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuizSets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuizSets.Merge(m, src)
}
func (m *QuizSets) XXX_Size() int {
	return m.Size()
}
func (m *QuizSets) XXX_DiscardUnknown() {
	xxx_messageInfo_QuizSets.DiscardUnknown(m)
}

var xxx_messageInfo_QuizSets proto.InternalMessageInfo

func (m *QuizSets) GetLoId() string {
	if m != nil {
		return m.LoId
	}
	return ""
}

func (m *QuizSets) GetQuestionId() string {
	if m != nil {
		return m.QuestionId
	}
	return ""
}

func (m *QuizSets) GetDisplayOrder() string {
	if m != nil {
		return m.DisplayOrder
	}
	return ""
}

func (m *QuizSets) GetUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *QuizSets) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type UpsertQuizSetsRequest struct {
	Quizsets []*QuizSets `protobuf:"bytes,1,rep,name=quizsets,proto3" json:"quizsets,omitempty"`
}

func (m *UpsertQuizSetsRequest) Reset()      { *m = UpsertQuizSetsRequest{} }
func (*UpsertQuizSetsRequest) ProtoMessage() {}
func (*UpsertQuizSetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e2d332d16e53d0, []int{12}
}
func (m *UpsertQuizSetsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertQuizSetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertQuizSetsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertQuizSetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertQuizSetsRequest.Merge(m, src)
}
func (m *UpsertQuizSetsRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpsertQuizSetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertQuizSetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertQuizSetsRequest proto.InternalMessageInfo

func (m *UpsertQuizSetsRequest) GetQuizsets() []*QuizSets {
	if m != nil {
		return m.Quizsets
	}
	return nil
}

type UpsertQuizSetsResponse struct {
	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (m *UpsertQuizSetsResponse) Reset()      { *m = UpsertQuizSetsResponse{} }
func (*UpsertQuizSetsResponse) ProtoMessage() {}
func (*UpsertQuizSetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e2d332d16e53d0, []int{13}
}
func (m *UpsertQuizSetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertQuizSetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertQuizSetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertQuizSetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertQuizSetsResponse.Merge(m, src)
}
func (m *UpsertQuizSetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpsertQuizSetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertQuizSetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertQuizSetsResponse proto.InternalMessageInfo

func (m *UpsertQuizSetsResponse) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

type QuestionV2 struct {
	Id                        string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	MasterQuestionId          string           `protobuf:"bytes,2,opt,name=master_question_id,json=masterQuestionId,proto3" json:"master_question_id,omitempty"`
	Country                   bob.Country      `protobuf:"varint,3,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"`
	Question                  string           `protobuf:"bytes,4,opt,name=question,proto3" json:"question,omitempty"`
	Answers                   []string         `protobuf:"bytes,5,rep,name=answers,proto3" json:"answers,omitempty"`
	Explanation               string           `protobuf:"bytes,6,opt,name=explanation,proto3" json:"explanation,omitempty"`
	DifficultyLevel           int32            `protobuf:"varint,7,opt,name=difficulty_level,json=difficultyLevel,proto3" json:"difficulty_level,omitempty"`
	UpdatedAt                 *types.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt                 *types.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	QuestionsTagLo            []string         `protobuf:"bytes,10,rep,name=questions_tag_lo,json=questionsTagLo,proto3" json:"questions_tag_lo,omitempty"`
	QuestionUrl               string           `protobuf:"bytes,11,opt,name=question_url,json=questionUrl,proto3" json:"question_url,omitempty"`
	AnswersUrl                []string         `protobuf:"bytes,12,rep,name=answers_url,json=answersUrl,proto3" json:"answers_url,omitempty"`
	ExplanationUrl            string           `protobuf:"bytes,13,opt,name=explanation_url,json=explanationUrl,proto3" json:"explanation_url,omitempty"`
	ExplanationWrongAnswer    []string         `protobuf:"bytes,14,rep,name=explanation_wrong_answer,json=explanationWrongAnswer,proto3" json:"explanation_wrong_answer,omitempty"`
	ExplanationWrongAnswerUrl []string         `protobuf:"bytes,15,rep,name=explanation_wrong_answer_url,json=explanationWrongAnswerUrl,proto3" json:"explanation_wrong_answer_url,omitempty"`
	IsWaitingForRender        bool             `protobuf:"varint,16,opt,name=is_waiting_for_render,json=isWaitingForRender,proto3" json:"is_waiting_for_render,omitempty"`
}

func (m *QuestionV2) Reset()      { *m = QuestionV2{} }
func (*QuestionV2) ProtoMessage() {}
func (*QuestionV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e2d332d16e53d0, []int{14}
}
func (m *QuestionV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuestionV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuestionV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuestionV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuestionV2.Merge(m, src)
}
func (m *QuestionV2) XXX_Size() int {
	return m.Size()
}
func (m *QuestionV2) XXX_DiscardUnknown() {
	xxx_messageInfo_QuestionV2.DiscardUnknown(m)
}

var xxx_messageInfo_QuestionV2 proto.InternalMessageInfo

func (m *QuestionV2) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *QuestionV2) GetMasterQuestionId() string {
	if m != nil {
		return m.MasterQuestionId
	}
	return ""
}

func (m *QuestionV2) GetCountry() bob.Country {
	if m != nil {
		return m.Country
	}
	return bob.COUNTRY_NONE
}

func (m *QuestionV2) GetQuestion() string {
	if m != nil {
		return m.Question
	}
	return ""
}

func (m *QuestionV2) GetAnswers() []string {
	if m != nil {
		return m.Answers
	}
	return nil
}

func (m *QuestionV2) GetExplanation() string {
	if m != nil {
		return m.Explanation
	}
	return ""
}

func (m *QuestionV2) GetDifficultyLevel() int32 {
	if m != nil {
		return m.DifficultyLevel
	}
	return 0
}

func (m *QuestionV2) GetUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *QuestionV2) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *QuestionV2) GetQuestionsTagLo() []string {
	if m != nil {
		return m.QuestionsTagLo
	}
	return nil
}

func (m *QuestionV2) GetQuestionUrl() string {
	if m != nil {
		return m.QuestionUrl
	}
	return ""
}

func (m *QuestionV2) GetAnswersUrl() []string {
	if m != nil {
		return m.AnswersUrl
	}
	return nil
}

func (m *QuestionV2) GetExplanationUrl() string {
	if m != nil {
		return m.ExplanationUrl
	}
	return ""
}

func (m *QuestionV2) GetExplanationWrongAnswer() []string {
	if m != nil {
		return m.ExplanationWrongAnswer
	}
	return nil
}

func (m *QuestionV2) GetExplanationWrongAnswerUrl() []string {
	if m != nil {
		return m.ExplanationWrongAnswerUrl
	}
	return nil
}

func (m *QuestionV2) GetIsWaitingForRender() bool {
	if m != nil {
		return m.IsWaitingForRender
	}
	return false
}

type UpsertQuestionsRequest struct {
	Questions []*QuestionV2 `protobuf:"bytes,1,rep,name=questions,proto3" json:"questions,omitempty"`
}

func (m *UpsertQuestionsRequest) Reset()      { *m = UpsertQuestionsRequest{} }
func (*UpsertQuestionsRequest) ProtoMessage() {}
func (*UpsertQuestionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e2d332d16e53d0, []int{15}
}
func (m *UpsertQuestionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertQuestionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertQuestionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertQuestionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertQuestionsRequest.Merge(m, src)
}
func (m *UpsertQuestionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpsertQuestionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertQuestionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertQuestionsRequest proto.InternalMessageInfo

func (m *UpsertQuestionsRequest) GetQuestions() []*QuestionV2 {
	if m != nil {
		return m.Questions
	}
	return nil
}

type UpsertQuestionsResponse struct {
	QuestionIds []string `protobuf:"bytes,1,rep,name=question_ids,json=questionIds,proto3" json:"question_ids,omitempty"`
}

func (m *UpsertQuestionsResponse) Reset()      { *m = UpsertQuestionsResponse{} }
func (*UpsertQuestionsResponse) ProtoMessage() {}
func (*UpsertQuestionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e2d332d16e53d0, []int{16}
}
func (m *UpsertQuestionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertQuestionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertQuestionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertQuestionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertQuestionsResponse.Merge(m, src)
}
func (m *UpsertQuestionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpsertQuestionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertQuestionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertQuestionsResponse proto.InternalMessageInfo

func (m *UpsertQuestionsResponse) GetQuestionIds() []string {
	if m != nil {
		return m.QuestionIds
	}
	return nil
}

type UpsertLiveCourseRequest struct {
	Id         string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Grade      string           `protobuf:"bytes,3,opt,name=grade,proto3" json:"grade,omitempty"`
	Subject    bob.Subject      `protobuf:"varint,4,opt,name=subject,proto3,enum=manabie.bob.Subject" json:"subject,omitempty"`
	ClassIds   []int32          `protobuf:"varint,5,rep,packed,name=class_ids,json=classIds,proto3" json:"class_ids,omitempty"`
	TeacherIds []string         `protobuf:"bytes,6,rep,name=teacher_ids,json=teacherIds,proto3" json:"teacher_ids,omitempty"`
	SchoolId   int64            `protobuf:"varint,7,opt,name=school_id,json=schoolId,proto3" json:"school_id,omitempty"`
	Country    bob.Country      `protobuf:"varint,8,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"`
	StartDate  *types.Timestamp `protobuf:"bytes,9,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate    *types.Timestamp `protobuf:"bytes,10,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
}

func (m *UpsertLiveCourseRequest) Reset()      { *m = UpsertLiveCourseRequest{} }
func (*UpsertLiveCourseRequest) ProtoMessage() {}
func (*UpsertLiveCourseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e2d332d16e53d0, []int{17}
}
func (m *UpsertLiveCourseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertLiveCourseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertLiveCourseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertLiveCourseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertLiveCourseRequest.Merge(m, src)
}
func (m *UpsertLiveCourseRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpsertLiveCourseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertLiveCourseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertLiveCourseRequest proto.InternalMessageInfo

func (m *UpsertLiveCourseRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpsertLiveCourseRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpsertLiveCourseRequest) GetGrade() string {
	if m != nil {
		return m.Grade
	}
	return ""
}

func (m *UpsertLiveCourseRequest) GetSubject() bob.Subject {
	if m != nil {
		return m.Subject
	}
	return bob.SUBJECT_NONE
}

func (m *UpsertLiveCourseRequest) GetClassIds() []int32 {
	if m != nil {
		return m.ClassIds
	}
	return nil
}

func (m *UpsertLiveCourseRequest) GetTeacherIds() []string {
	if m != nil {
		return m.TeacherIds
	}
	return nil
}

func (m *UpsertLiveCourseRequest) GetSchoolId() int64 {
	if m != nil {
		return m.SchoolId
	}
	return 0
}

func (m *UpsertLiveCourseRequest) GetCountry() bob.Country {
	if m != nil {
		return m.Country
	}
	return bob.COUNTRY_NONE
}

func (m *UpsertLiveCourseRequest) GetStartDate() *types.Timestamp {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *UpsertLiveCourseRequest) GetEndDate() *types.Timestamp {
	if m != nil {
		return m.EndDate
	}
	return nil
}

type UpsertLiveCourseResponse struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *UpsertLiveCourseResponse) Reset()      { *m = UpsertLiveCourseResponse{} }
func (*UpsertLiveCourseResponse) ProtoMessage() {}
func (*UpsertLiveCourseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e2d332d16e53d0, []int{18}
}
func (m *UpsertLiveCourseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertLiveCourseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertLiveCourseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertLiveCourseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertLiveCourseResponse.Merge(m, src)
}
func (m *UpsertLiveCourseResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpsertLiveCourseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertLiveCourseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertLiveCourseResponse proto.InternalMessageInfo

func (m *UpsertLiveCourseResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type DeleteLiveCourseRequest struct {
	CourseIds []string `protobuf:"bytes,1,rep,name=course_ids,json=courseIds,proto3" json:"course_ids,omitempty"`
}

func (m *DeleteLiveCourseRequest) Reset()      { *m = DeleteLiveCourseRequest{} }
func (*DeleteLiveCourseRequest) ProtoMessage() {}
func (*DeleteLiveCourseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e2d332d16e53d0, []int{19}
}
func (m *DeleteLiveCourseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteLiveCourseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteLiveCourseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteLiveCourseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteLiveCourseRequest.Merge(m, src)
}
func (m *DeleteLiveCourseRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteLiveCourseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteLiveCourseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteLiveCourseRequest proto.InternalMessageInfo

func (m *DeleteLiveCourseRequest) GetCourseIds() []string {
	if m != nil {
		return m.CourseIds
	}
	return nil
}

type DeleteLiveCourseResponse struct {
}

func (m *DeleteLiveCourseResponse) Reset()      { *m = DeleteLiveCourseResponse{} }
func (*DeleteLiveCourseResponse) ProtoMessage() {}
func (*DeleteLiveCourseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e2d332d16e53d0, []int{20}
}
func (m *DeleteLiveCourseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteLiveCourseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteLiveCourseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteLiveCourseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteLiveCourseResponse.Merge(m, src)
}
func (m *DeleteLiveCourseResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteLiveCourseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteLiveCourseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteLiveCourseResponse proto.InternalMessageInfo

type CreateLiveLessonRequest struct {
	CourseId string                            `protobuf:"bytes,1,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	Lessons  []*CreateLiveLessonRequest_Lesson `protobuf:"bytes,2,rep,name=lessons,proto3" json:"lessons,omitempty"`
}

func (m *CreateLiveLessonRequest) Reset()      { *m = CreateLiveLessonRequest{} }
func (*CreateLiveLessonRequest) ProtoMessage() {}
func (*CreateLiveLessonRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e2d332d16e53d0, []int{21}
}
func (m *CreateLiveLessonRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateLiveLessonRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateLiveLessonRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateLiveLessonRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateLiveLessonRequest.Merge(m, src)
}
func (m *CreateLiveLessonRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateLiveLessonRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateLiveLessonRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateLiveLessonRequest proto.InternalMessageInfo

func (m *CreateLiveLessonRequest) GetCourseId() string {
	if m != nil {
		return m.CourseId
	}
	return ""
}

func (m *CreateLiveLessonRequest) GetLessons() []*CreateLiveLessonRequest_Lesson {
	if m != nil {
		return m.Lessons
	}
	return nil
}

type CreateLiveLessonRequest_Lesson struct {
	Name            string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	StartDate       *types.Timestamp          `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate         *types.Timestamp          `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	TeacherId       string                    `protobuf:"bytes,4,opt,name=teacher_id,json=teacherId,proto3" json:"teacher_id,omitempty"`
	Attachments     []*Attachment             `protobuf:"bytes,5,rep,name=attachments,proto3" json:"attachments,omitempty"`
	ControlSettings *ControlSettingLiveLesson `protobuf:"bytes,6,opt,name=control_settings,json=controlSettings,proto3" json:"control_settings,omitempty"`
	LessonGroup     string                    `protobuf:"bytes,7,opt,name=lesson_group,json=lessonGroup,proto3" json:"lesson_group,omitempty"`
}

func (m *CreateLiveLessonRequest_Lesson) Reset()      { *m = CreateLiveLessonRequest_Lesson{} }
func (*CreateLiveLessonRequest_Lesson) ProtoMessage() {}
func (*CreateLiveLessonRequest_Lesson) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e2d332d16e53d0, []int{21, 0}
}
func (m *CreateLiveLessonRequest_Lesson) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateLiveLessonRequest_Lesson) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateLiveLessonRequest_Lesson.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateLiveLessonRequest_Lesson) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateLiveLessonRequest_Lesson.Merge(m, src)
}
func (m *CreateLiveLessonRequest_Lesson) XXX_Size() int {
	return m.Size()
}
func (m *CreateLiveLessonRequest_Lesson) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateLiveLessonRequest_Lesson.DiscardUnknown(m)
}

var xxx_messageInfo_CreateLiveLessonRequest_Lesson proto.InternalMessageInfo

func (m *CreateLiveLessonRequest_Lesson) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateLiveLessonRequest_Lesson) GetStartDate() *types.Timestamp {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *CreateLiveLessonRequest_Lesson) GetEndDate() *types.Timestamp {
	if m != nil {
		return m.EndDate
	}
	return nil
}

func (m *CreateLiveLessonRequest_Lesson) GetTeacherId() string {
	if m != nil {
		return m.TeacherId
	}
	return ""
}

func (m *CreateLiveLessonRequest_Lesson) GetAttachments() []*Attachment {
	if m != nil {
		return m.Attachments
	}
	return nil
}

func (m *CreateLiveLessonRequest_Lesson) GetControlSettings() *ControlSettingLiveLesson {
	if m != nil {
		return m.ControlSettings
	}
	return nil
}

func (m *CreateLiveLessonRequest_Lesson) GetLessonGroup() string {
	if m != nil {
		return m.LessonGroup
	}
	return ""
}

type CreateLiveLessonResponse struct {
}

func (m *CreateLiveLessonResponse) Reset()      { *m = CreateLiveLessonResponse{} }
func (*CreateLiveLessonResponse) ProtoMessage() {}
func (*CreateLiveLessonResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e2d332d16e53d0, []int{22}
}
func (m *CreateLiveLessonResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateLiveLessonResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateLiveLessonResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateLiveLessonResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateLiveLessonResponse.Merge(m, src)
}
func (m *CreateLiveLessonResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateLiveLessonResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateLiveLessonResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateLiveLessonResponse proto.InternalMessageInfo

type UpdateLiveLessonRequest struct {
	LessonId        string                    `protobuf:"bytes,1,opt,name=lesson_id,json=lessonId,proto3" json:"lesson_id,omitempty"`
	Name            string                    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	StartDate       *types.Timestamp          `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate         *types.Timestamp          `protobuf:"bytes,4,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	TeacherId       string                    `protobuf:"bytes,5,opt,name=teacher_id,json=teacherId,proto3" json:"teacher_id,omitempty"`
	Attachments     []*Attachment             `protobuf:"bytes,6,rep,name=attachments,proto3" json:"attachments,omitempty"`
	ControlSettings *ControlSettingLiveLesson `protobuf:"bytes,7,opt,name=control_settings,json=controlSettings,proto3" json:"control_settings,omitempty"`
	CourseId        string                    `protobuf:"bytes,8,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	LessonGroup     string                    `protobuf:"bytes,9,opt,name=lesson_group,json=lessonGroup,proto3" json:"lesson_group,omitempty"`
}

func (m *UpdateLiveLessonRequest) Reset()      { *m = UpdateLiveLessonRequest{} }
func (*UpdateLiveLessonRequest) ProtoMessage() {}
func (*UpdateLiveLessonRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e2d332d16e53d0, []int{23}
}
func (m *UpdateLiveLessonRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateLiveLessonRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateLiveLessonRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateLiveLessonRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateLiveLessonRequest.Merge(m, src)
}
func (m *UpdateLiveLessonRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateLiveLessonRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateLiveLessonRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateLiveLessonRequest proto.InternalMessageInfo

func (m *UpdateLiveLessonRequest) GetLessonId() string {
	if m != nil {
		return m.LessonId
	}
	return ""
}

func (m *UpdateLiveLessonRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateLiveLessonRequest) GetStartDate() *types.Timestamp {
	if m != nil {
		return m.StartDate
	}
	return nil
}

func (m *UpdateLiveLessonRequest) GetEndDate() *types.Timestamp {
	if m != nil {
		return m.EndDate
	}
	return nil
}

func (m *UpdateLiveLessonRequest) GetTeacherId() string {
	if m != nil {
		return m.TeacherId
	}
	return ""
}

func (m *UpdateLiveLessonRequest) GetAttachments() []*Attachment {
	if m != nil {
		return m.Attachments
	}
	return nil
}

func (m *UpdateLiveLessonRequest) GetControlSettings() *ControlSettingLiveLesson {
	if m != nil {
		return m.ControlSettings
	}
	return nil
}

func (m *UpdateLiveLessonRequest) GetCourseId() string {
	if m != nil {
		return m.CourseId
	}
	return ""
}

func (m *UpdateLiveLessonRequest) GetLessonGroup() string {
	if m != nil {
		return m.LessonGroup
	}
	return ""
}

type UpdateLiveLessonResponse struct {
	LessonId string `protobuf:"bytes,1,opt,name=lesson_id,json=lessonId,proto3" json:"lesson_id,omitempty"`
}

func (m *UpdateLiveLessonResponse) Reset()      { *m = UpdateLiveLessonResponse{} }
func (*UpdateLiveLessonResponse) ProtoMessage() {}
func (*UpdateLiveLessonResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e2d332d16e53d0, []int{24}
}
func (m *UpdateLiveLessonResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateLiveLessonResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateLiveLessonResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateLiveLessonResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateLiveLessonResponse.Merge(m, src)
}
func (m *UpdateLiveLessonResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateLiveLessonResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateLiveLessonResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateLiveLessonResponse proto.InternalMessageInfo

func (m *UpdateLiveLessonResponse) GetLessonId() string {
	if m != nil {
		return m.LessonId
	}
	return ""
}

type DeleteLiveLessonRequest struct {
	LessonIds []string `protobuf:"bytes,1,rep,name=lesson_ids,json=lessonIds,proto3" json:"lesson_ids,omitempty"`
}

func (m *DeleteLiveLessonRequest) Reset()      { *m = DeleteLiveLessonRequest{} }
func (*DeleteLiveLessonRequest) ProtoMessage() {}
func (*DeleteLiveLessonRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e2d332d16e53d0, []int{25}
}
func (m *DeleteLiveLessonRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteLiveLessonRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteLiveLessonRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteLiveLessonRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteLiveLessonRequest.Merge(m, src)
}
func (m *DeleteLiveLessonRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteLiveLessonRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteLiveLessonRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteLiveLessonRequest proto.InternalMessageInfo

func (m *DeleteLiveLessonRequest) GetLessonIds() []string {
	if m != nil {
		return m.LessonIds
	}
	return nil
}

type DeleteLiveLessonResponse struct {
}

func (m *DeleteLiveLessonResponse) Reset()      { *m = DeleteLiveLessonResponse{} }
func (*DeleteLiveLessonResponse) ProtoMessage() {}
func (*DeleteLiveLessonResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e2d332d16e53d0, []int{26}
}
func (m *DeleteLiveLessonResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteLiveLessonResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteLiveLessonResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteLiveLessonResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteLiveLessonResponse.Merge(m, src)
}
func (m *DeleteLiveLessonResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteLiveLessonResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteLiveLessonResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteLiveLessonResponse proto.InternalMessageInfo

type Attachment struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Url  string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *Attachment) Reset()      { *m = Attachment{} }
func (*Attachment) ProtoMessage() {}
func (*Attachment) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e2d332d16e53d0, []int{27}
}
func (m *Attachment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Attachment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Attachment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Attachment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attachment.Merge(m, src)
}
func (m *Attachment) XXX_Size() int {
	return m.Size()
}
func (m *Attachment) XXX_DiscardUnknown() {
	xxx_messageInfo_Attachment.DiscardUnknown(m)
}

var xxx_messageInfo_Attachment proto.InternalMessageInfo

func (m *Attachment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Attachment) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type ControlSettingLiveLesson struct {
	Lectures                  []string                      `protobuf:"bytes,1,rep,name=lectures,proto3" json:"lectures,omitempty"`
	TeacherObversers          []string                      `protobuf:"bytes,2,rep,name=teacher_obversers,json=teacherObversers,proto3" json:"teacher_obversers,omitempty"`
	DefaultView               bob.LiveLessonView            `protobuf:"varint,3,opt,name=default_view,json=defaultView,proto3,enum=manabie.bob.LiveLessonView" json:"default_view,omitempty"`
	PublishStudentVideoStatus bob.PublishStudentVideoStatus `protobuf:"varint,4,opt,name=publish_student_video_status,json=publishStudentVideoStatus,proto3,enum=manabie.bob.PublishStudentVideoStatus" json:"publish_student_video_status,omitempty"`
	UnmuteStudentAudioStatus  bob.UnmuteStudentAudioStatus  `protobuf:"varint,5,opt,name=unmute_student_audio_status,json=unmuteStudentAudioStatus,proto3,enum=manabie.bob.UnmuteStudentAudioStatus" json:"unmute_student_audio_status,omitempty"`
}

func (m *ControlSettingLiveLesson) Reset()      { *m = ControlSettingLiveLesson{} }
func (*ControlSettingLiveLesson) ProtoMessage() {}
func (*ControlSettingLiveLesson) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e2d332d16e53d0, []int{28}
}
func (m *ControlSettingLiveLesson) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ControlSettingLiveLesson) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ControlSettingLiveLesson.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ControlSettingLiveLesson) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControlSettingLiveLesson.Merge(m, src)
}
func (m *ControlSettingLiveLesson) XXX_Size() int {
	return m.Size()
}
func (m *ControlSettingLiveLesson) XXX_DiscardUnknown() {
	xxx_messageInfo_ControlSettingLiveLesson.DiscardUnknown(m)
}

var xxx_messageInfo_ControlSettingLiveLesson proto.InternalMessageInfo

func (m *ControlSettingLiveLesson) GetLectures() []string {
	if m != nil {
		return m.Lectures
	}
	return nil
}

func (m *ControlSettingLiveLesson) GetTeacherObversers() []string {
	if m != nil {
		return m.TeacherObversers
	}
	return nil
}

func (m *ControlSettingLiveLesson) GetDefaultView() bob.LiveLessonView {
	if m != nil {
		return m.DefaultView
	}
	return bob.LIVE_LESSON_VIEW_NONE
}

func (m *ControlSettingLiveLesson) GetPublishStudentVideoStatus() bob.PublishStudentVideoStatus {
	if m != nil {
		return m.PublishStudentVideoStatus
	}
	return bob.PUBLISH_STUDENT_VIDEO_STATUS_NONE
}

func (m *ControlSettingLiveLesson) GetUnmuteStudentAudioStatus() bob.UnmuteStudentAudioStatus {
	if m != nil {
		return m.UnmuteStudentAudioStatus
	}
	return bob.UNMUTE_STUDENT_AUDIO_STATUS_NONE
}

func init() {
	proto.RegisterType((*Chapter)(nil), "manabie.yasuo.Chapter")
	golang_proto.RegisterType((*Chapter)(nil), "manabie.yasuo.Chapter")
	proto.RegisterType((*UpsertCoursesRequest)(nil), "manabie.yasuo.UpsertCoursesRequest")
	golang_proto.RegisterType((*UpsertCoursesRequest)(nil), "manabie.yasuo.UpsertCoursesRequest")
	proto.RegisterType((*UpsertCoursesRequest_Course)(nil), "manabie.yasuo.UpsertCoursesRequest.Course")
	golang_proto.RegisterType((*UpsertCoursesRequest_Course)(nil), "manabie.yasuo.UpsertCoursesRequest.Course")
	proto.RegisterType((*UpsertCoursesResponse)(nil), "manabie.yasuo.UpsertCoursesResponse")
	golang_proto.RegisterType((*UpsertCoursesResponse)(nil), "manabie.yasuo.UpsertCoursesResponse")
	proto.RegisterType((*DeleteCoursesRequest)(nil), "manabie.yasuo.DeleteCoursesRequest")
	golang_proto.RegisterType((*DeleteCoursesRequest)(nil), "manabie.yasuo.DeleteCoursesRequest")
	proto.RegisterType((*DeleteCoursesResponse)(nil), "manabie.yasuo.DeleteCoursesResponse")
	golang_proto.RegisterType((*DeleteCoursesResponse)(nil), "manabie.yasuo.DeleteCoursesResponse")
	proto.RegisterType((*CreateBrightCoveUploadUrlRequest)(nil), "manabie.yasuo.CreateBrightCoveUploadUrlRequest")
	golang_proto.RegisterType((*CreateBrightCoveUploadUrlRequest)(nil), "manabie.yasuo.CreateBrightCoveUploadUrlRequest")
	proto.RegisterType((*CreateBrightCoveUploadUrlResponse)(nil), "manabie.yasuo.CreateBrightCoveUploadUrlResponse")
	golang_proto.RegisterType((*CreateBrightCoveUploadUrlResponse)(nil), "manabie.yasuo.CreateBrightCoveUploadUrlResponse")
	proto.RegisterType((*FinishUploadBrightCoveRequest)(nil), "manabie.yasuo.FinishUploadBrightCoveRequest")
	golang_proto.RegisterType((*FinishUploadBrightCoveRequest)(nil), "manabie.yasuo.FinishUploadBrightCoveRequest")
	proto.RegisterType((*FinishUploadBrightCoveResponse)(nil), "manabie.yasuo.FinishUploadBrightCoveResponse")
	golang_proto.RegisterType((*FinishUploadBrightCoveResponse)(nil), "manabie.yasuo.FinishUploadBrightCoveResponse")
	proto.RegisterType((*CoursesUpdated)(nil), "manabie.yasuo.CoursesUpdated")
	golang_proto.RegisterType((*CoursesUpdated)(nil), "manabie.yasuo.CoursesUpdated")
	proto.RegisterType((*UpsertCourseClassesResponse)(nil), "manabie.yasuo.UpsertCourseClassesResponse")
	golang_proto.RegisterType((*UpsertCourseClassesResponse)(nil), "manabie.yasuo.UpsertCourseClassesResponse")
	proto.RegisterType((*QuizSets)(nil), "manabie.yasuo.QuizSets")
	golang_proto.RegisterType((*QuizSets)(nil), "manabie.yasuo.QuizSets")
	proto.RegisterType((*UpsertQuizSetsRequest)(nil), "manabie.yasuo.UpsertQuizSetsRequest")
	golang_proto.RegisterType((*UpsertQuizSetsRequest)(nil), "manabie.yasuo.UpsertQuizSetsRequest")
	proto.RegisterType((*UpsertQuizSetsResponse)(nil), "manabie.yasuo.UpsertQuizSetsResponse")
	golang_proto.RegisterType((*UpsertQuizSetsResponse)(nil), "manabie.yasuo.UpsertQuizSetsResponse")
	proto.RegisterType((*QuestionV2)(nil), "manabie.yasuo.QuestionV2")
	golang_proto.RegisterType((*QuestionV2)(nil), "manabie.yasuo.QuestionV2")
	proto.RegisterType((*UpsertQuestionsRequest)(nil), "manabie.yasuo.UpsertQuestionsRequest")
	golang_proto.RegisterType((*UpsertQuestionsRequest)(nil), "manabie.yasuo.UpsertQuestionsRequest")
	proto.RegisterType((*UpsertQuestionsResponse)(nil), "manabie.yasuo.UpsertQuestionsResponse")
	golang_proto.RegisterType((*UpsertQuestionsResponse)(nil), "manabie.yasuo.UpsertQuestionsResponse")
	proto.RegisterType((*UpsertLiveCourseRequest)(nil), "manabie.yasuo.UpsertLiveCourseRequest")
	golang_proto.RegisterType((*UpsertLiveCourseRequest)(nil), "manabie.yasuo.UpsertLiveCourseRequest")
	proto.RegisterType((*UpsertLiveCourseResponse)(nil), "manabie.yasuo.UpsertLiveCourseResponse")
	golang_proto.RegisterType((*UpsertLiveCourseResponse)(nil), "manabie.yasuo.UpsertLiveCourseResponse")
	proto.RegisterType((*DeleteLiveCourseRequest)(nil), "manabie.yasuo.DeleteLiveCourseRequest")
	golang_proto.RegisterType((*DeleteLiveCourseRequest)(nil), "manabie.yasuo.DeleteLiveCourseRequest")
	proto.RegisterType((*DeleteLiveCourseResponse)(nil), "manabie.yasuo.DeleteLiveCourseResponse")
	golang_proto.RegisterType((*DeleteLiveCourseResponse)(nil), "manabie.yasuo.DeleteLiveCourseResponse")
	proto.RegisterType((*CreateLiveLessonRequest)(nil), "manabie.yasuo.CreateLiveLessonRequest")
	golang_proto.RegisterType((*CreateLiveLessonRequest)(nil), "manabie.yasuo.CreateLiveLessonRequest")
	proto.RegisterType((*CreateLiveLessonRequest_Lesson)(nil), "manabie.yasuo.CreateLiveLessonRequest.Lesson")
	golang_proto.RegisterType((*CreateLiveLessonRequest_Lesson)(nil), "manabie.yasuo.CreateLiveLessonRequest.Lesson")
	proto.RegisterType((*CreateLiveLessonResponse)(nil), "manabie.yasuo.CreateLiveLessonResponse")
	golang_proto.RegisterType((*CreateLiveLessonResponse)(nil), "manabie.yasuo.CreateLiveLessonResponse")
	proto.RegisterType((*UpdateLiveLessonRequest)(nil), "manabie.yasuo.UpdateLiveLessonRequest")
	golang_proto.RegisterType((*UpdateLiveLessonRequest)(nil), "manabie.yasuo.UpdateLiveLessonRequest")
	proto.RegisterType((*UpdateLiveLessonResponse)(nil), "manabie.yasuo.UpdateLiveLessonResponse")
	golang_proto.RegisterType((*UpdateLiveLessonResponse)(nil), "manabie.yasuo.UpdateLiveLessonResponse")
	proto.RegisterType((*DeleteLiveLessonRequest)(nil), "manabie.yasuo.DeleteLiveLessonRequest")
	golang_proto.RegisterType((*DeleteLiveLessonRequest)(nil), "manabie.yasuo.DeleteLiveLessonRequest")
	proto.RegisterType((*DeleteLiveLessonResponse)(nil), "manabie.yasuo.DeleteLiveLessonResponse")
	golang_proto.RegisterType((*DeleteLiveLessonResponse)(nil), "manabie.yasuo.DeleteLiveLessonResponse")
	proto.RegisterType((*Attachment)(nil), "manabie.yasuo.Attachment")
	golang_proto.RegisterType((*Attachment)(nil), "manabie.yasuo.Attachment")
	proto.RegisterType((*ControlSettingLiveLesson)(nil), "manabie.yasuo.ControlSettingLiveLesson")
	golang_proto.RegisterType((*ControlSettingLiveLesson)(nil), "manabie.yasuo.ControlSettingLiveLesson")
}

func init() { proto.RegisterFile("yscourses.proto", fileDescriptor_20e2d332d16e53d0) }
func init() { golang_proto.RegisterFile("yscourses.proto", fileDescriptor_20e2d332d16e53d0) }

var fileDescriptor_20e2d332d16e53d0 = []byte{
	// 1858 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x4b, 0x6f, 0x1b, 0xc9,
	0x11, 0xd6, 0x90, 0xa2, 0x48, 0x16, 0xf5, 0x60, 0x7a, 0xbd, 0xf6, 0x88, 0x5a, 0xd1, 0x5a, 0x3a,
	0x6b, 0x2b, 0x9b, 0x35, 0x95, 0x68, 0xe3, 0xd8, 0x8b, 0xcd, 0x03, 0xb2, 0x8c, 0x35, 0x04, 0x08,
	0xd9, 0x78, 0xb4, 0xf2, 0x02, 0xbe, 0x4c, 0x86, 0x33, 0x2d, 0x6a, 0xe2, 0xe1, 0x34, 0x3d, 0xdd,
	0x23, 0x45, 0x7b, 0x08, 0x16, 0x08, 0x02, 0xe4, 0x98, 0x7b, 0xfe, 0x40, 0x0e, 0xf9, 0x01, 0x39,
	0xe4, 0x90, 0x63, 0x8e, 0x3e, 0x2e, 0x90, 0x4b, 0x2c, 0xe5, 0x90, 0xe3, 0x22, 0xbf, 0x20, 0xe8,
	0xc7, 0xbc, 0x67, 0x24, 0xda, 0xbe, 0xe4, 0xc6, 0xae, 0xfe, 0xaa, 0x6a, 0xba, 0xbe, 0xaa, 0xea,
	0x6a, 0xc2, 0xca, 0x19, 0xb5, 0x49, 0x18, 0x50, 0x4c, 0x87, 0xd3, 0x80, 0x30, 0x82, 0x96, 0x26,
	0x96, 0x6f, 0x8d, 0x5c, 0x3c, 0x3c, 0xb3, 0x68, 0x48, 0x7a, 0xcb, 0x23, 0x32, 0xda, 0xc2, 0x7e,
	0x38, 0x91, 0xdb, 0xbd, 0xc5, 0x33, 0xfa, 0x22, 0x74, 0xbf, 0x52, 0xab, 0x9b, 0x63, 0x42, 0xc6,
	0x1e, 0xde, 0x12, 0xab, 0x51, 0x78, 0xb4, 0xc5, 0xdc, 0x09, 0xa6, 0xcc, 0x9a, 0x4c, 0x15, 0xe0,
	0xee, 0xd8, 0x65, 0xc7, 0xe1, 0x68, 0x68, 0x93, 0xc9, 0xd6, 0x98, 0x8c, 0x49, 0x82, 0xe4, 0x2b,
	0xb1, 0x10, 0xbf, 0x24, 0x7c, 0xf0, 0xbb, 0x1a, 0x34, 0x77, 0x8f, 0xad, 0x29, 0xc3, 0x01, 0x5a,
	0x07, 0xb0, 0xe5, 0x4f, 0xd3, 0x75, 0x74, 0x6d, 0x43, 0xdb, 0x6c, 0x1b, 0x6d, 0x25, 0xd9, 0x73,
	0xd0, 0xfb, 0xb0, 0x18, 0x6d, 0xfb, 0xd6, 0x04, 0xeb, 0x35, 0x01, 0xe8, 0x28, 0xd9, 0x2f, 0xac,
	0x09, 0x46, 0x43, 0x68, 0xda, 0x24, 0xf4, 0x59, 0x70, 0xa6, 0xd7, 0x37, 0xb4, 0xcd, 0xe5, 0xed,
	0x6b, 0xc3, 0xe8, 0x70, 0x23, 0x32, 0x1a, 0xee, 0xca, 0x3d, 0x23, 0x02, 0x71, 0x3c, 0x0d, 0x47,
	0xbf, 0xc6, 0x36, 0xd3, 0xe7, 0x4b, 0xf0, 0x07, 0x72, 0xcf, 0x88, 0x40, 0xe8, 0x1a, 0x34, 0xc6,
	0x81, 0xe5, 0x60, 0xbd, 0x21, 0x7c, 0xcb, 0x05, 0xba, 0x05, 0x4b, 0x8e, 0x4b, 0xa7, 0x9e, 0x75,
	0x66, 0x92, 0xc0, 0xc1, 0x81, 0xbe, 0xb0, 0xa1, 0x6d, 0x36, 0x8c, 0x45, 0x25, 0xfc, 0x9c, 0xcb,
	0xd0, 0x1a, 0xb4, 0xa9, 0x7d, 0x4c, 0x88, 0xc7, 0xcf, 0xd6, 0x14, 0x80, 0x96, 0x14, 0xec, 0x39,
	0x83, 0x3f, 0xd5, 0xe1, 0xda, 0xe1, 0x94, 0xe2, 0x80, 0xed, 0x4a, 0x6a, 0x0c, 0xfc, 0x22, 0xc4,
	0x94, 0xa1, 0x47, 0xe2, 0x40, 0x5c, 0xa2, 0x6b, 0x1b, 0xf5, 0xcd, 0xce, 0xf6, 0x87, 0xc3, 0x0c,
	0x5b, 0xc3, 0x32, 0xad, 0xa1, 0x5c, 0x1a, 0x91, 0x6a, 0xef, 0x6f, 0x35, 0x58, 0x90, 0x32, 0xb4,
	0x0c, 0xb5, 0x38, 0xb6, 0x35, 0xd7, 0x41, 0x08, 0xe6, 0x53, 0xc1, 0x14, 0xbf, 0xff, 0x9f, 0xa3,
	0x78, 0x0b, 0x3a, 0x49, 0x8a, 0x50, 0xbd, 0xb9, 0x51, 0xdf, 0x6c, 0x3f, 0xac, 0xe9, 0x9a, 0x01,
	0x71, 0x9e, 0xd0, 0x6c, 0xa8, 0x5b, 0xd9, 0x50, 0xa3, 0x75, 0x68, 0x8d, 0x08, 0x79, 0x2e, 0xd4,
	0xdb, 0xb1, 0x7a, 0x93, 0xcb, 0xb8, 0x2e, 0x82, 0x79, 0xd7, 0x26, 0xbe, 0x0e, 0x32, 0x1e, 0xfc,
	0xf7, 0xe0, 0x3e, 0xbc, 0x9b, 0x0b, 0x33, 0x9d, 0x12, 0x9f, 0x62, 0xd4, 0x07, 0xa0, 0xa1, 0x6d,
	0x63, 0x4a, 0x8f, 0x42, 0x4f, 0x04, 0xb5, 0x65, 0xa4, 0x24, 0x83, 0x7b, 0x70, 0xed, 0x11, 0xf6,
	0x30, 0xc3, 0x39, 0x56, 0x79, 0xa2, 0x0b, 0x89, 0xf8, 0x0a, 0x4e, 0x2c, 0x4f, 0x74, 0x21, 0xd9,
	0x73, 0x28, 0xf7, 0x97, 0x53, 0x9b, 0xd1, 0xdf, 0x8f, 0x61, 0x63, 0x37, 0xc0, 0x16, 0xc3, 0x0f,
	0x03, 0x77, 0x7c, 0xcc, 0x76, 0xc9, 0x09, 0x3e, 0x9c, 0x7a, 0xc4, 0x72, 0x0e, 0x03, 0x2f, 0xf2,
	0x1d, 0x11, 0xae, 0x25, 0x84, 0x0f, 0x7e, 0xaf, 0xc1, 0xfb, 0x97, 0x28, 0x2a, 0xef, 0xeb, 0x00,
	0xd4, 0x1d, 0xfb, 0xd8, 0x31, 0xc3, 0xc0, 0x8b, 0xca, 0x53, 0x4a, 0x0e, 0x03, 0x0f, 0xdd, 0x86,
	0x15, 0x6b, 0xea, 0x9a, 0x81, 0xf4, 0x23, 0x30, 0x32, 0xa9, 0x96, 0xac, 0xa9, 0xab, 0xbc, 0x73,
	0xdc, 0x2a, 0xb4, 0x4e, 0x5c, 0x07, 0x13, 0x4e, 0x4e, 0x5d, 0x00, 0x9a, 0x62, 0xbd, 0xe7, 0x0c,
	0x46, 0xb0, 0xfe, 0x99, 0xeb, 0xbb, 0xf4, 0x58, 0x3a, 0x4f, 0x3e, 0x26, 0xfa, 0xf8, 0x12, 0x1f,
	0xda, 0x55, 0x3e, 0x6a, 0x59, 0x1f, 0x1b, 0xd0, 0xaf, 0xf2, 0x21, 0xcf, 0x39, 0x78, 0x0c, 0xcb,
	0x2a, 0xf0, 0x87, 0x53, 0xc7, 0x62, 0xd8, 0x41, 0xf7, 0xa0, 0x1e, 0xe0, 0x17, 0xc2, 0x55, 0x67,
	0xfb, 0xd6, 0x0c, 0x15, 0x68, 0x70, 0xfc, 0xe0, 0xa7, 0xb0, 0x96, 0xde, 0xdc, 0xf5, 0x2c, 0xfa,
	0x3a, 0x6c, 0xfe, 0x53, 0x83, 0xd6, 0x93, 0xd0, 0xfd, 0xea, 0x00, 0x33, 0x8a, 0xde, 0x81, 0x86,
	0x47, 0x92, 0xb6, 0x38, 0xef, 0x91, 0x3d, 0x07, 0xdd, 0x84, 0x8e, 0x70, 0xe7, 0x12, 0x3f, 0x39,
	0x29, 0x44, 0xa2, 0x3d, 0xa7, 0x58, 0x53, 0x32, 0xe0, 0xd9, 0x9a, 0xfa, 0x04, 0x20, 0x94, 0x07,
	0x35, 0x2d, 0x59, 0xc1, 0x9d, 0xed, 0xde, 0x50, 0xf6, 0xf9, 0x61, 0xd4, 0xbd, 0x87, 0x5f, 0x44,
	0x7d, 0xde, 0x68, 0x2b, 0xf4, 0x0e, 0xe3, 0xaa, 0xb6, 0xc8, 0x1b, 0xa1, 0xda, 0xb8, 0x5a, 0x55,
	0xa1, 0x77, 0xd8, 0x60, 0x3f, 0x2a, 0xaa, 0xe8, 0x88, 0x11, 0xc7, 0x1f, 0x43, 0x8b, 0xdf, 0x37,
	0x14, 0xb3, 0xa8, 0xe7, 0xdd, 0xc8, 0x45, 0x3c, 0xd6, 0x88, 0x81, 0x83, 0x07, 0x70, 0x3d, 0x6f,
	0x6d, 0xc6, 0x28, 0xff, 0xb5, 0x01, 0xf0, 0x44, 0x45, 0xec, 0xe9, 0x76, 0xa1, 0x3f, 0x7e, 0x04,
	0x68, 0x62, 0x51, 0xde, 0x6f, 0x8a, 0x91, 0xee, 0xca, 0x9d, 0x27, 0x49, 0xbc, 0x5f, 0xb7, 0x73,
	0xf6, 0xf8, 0x59, 0xa5, 0xb6, 0x08, 0x7c, 0xdb, 0x88, 0xd7, 0x48, 0x87, 0xa6, 0xe5, 0xd3, 0x53,
	0x1c, 0x50, 0xbd, 0x21, 0x3a, 0x44, 0xb4, 0x44, 0x1b, 0xd0, 0xc1, 0xbf, 0x99, 0x7a, 0x96, 0x6f,
	0x09, 0xc5, 0x05, 0x79, 0x0f, 0xa6, 0x44, 0xe8, 0x7b, 0xd0, 0x75, 0xdc, 0xa3, 0x23, 0xd7, 0x0e,
	0x3d, 0x76, 0x66, 0x7a, 0xf8, 0x04, 0x7b, 0xea, 0xce, 0x59, 0x49, 0xe4, 0xfb, 0x5c, 0x9c, 0x63,
	0xbf, 0xf5, 0xe6, 0xec, 0xb7, 0x5f, 0x83, 0x7d, 0xb4, 0x09, 0xdd, 0xe8, 0xa0, 0xd4, 0x64, 0xd6,
	0xd8, 0xf4, 0x88, 0x0e, 0xe2, 0x94, 0xcb, 0xb1, 0xfc, 0x0b, 0x6b, 0xbc, 0x4f, 0xf8, 0xad, 0x1f,
	0x47, 0x9e, 0xd7, 0x7b, 0x47, 0x9e, 0x36, 0x92, 0xf1, 0x6a, 0xbf, 0x09, 0x1d, 0x15, 0x1a, 0x81,
	0x58, 0x14, 0x76, 0x40, 0x89, 0x38, 0xe0, 0x0e, 0xac, 0xa4, 0xa2, 0x23, 0x40, 0x4b, 0xc2, 0xcc,
	0x72, 0x4a, 0xcc, 0x81, 0x0f, 0x40, 0x4f, 0x03, 0x4f, 0x03, 0xe2, 0x8f, 0x4d, 0x69, 0x48, 0x5f,
	0x16, 0x66, 0xaf, 0xa7, 0xf6, 0xbf, 0xe4, 0xdb, 0x3b, 0x62, 0x17, 0xfd, 0x1c, 0xde, 0xab, 0xd2,
	0x14, 0xfe, 0x56, 0x84, 0xf6, 0x6a, 0xb9, 0x36, 0x77, 0xfd, 0x43, 0x78, 0xd7, 0xa5, 0xe6, 0xa9,
	0xe5, 0x32, 0xd7, 0x1f, 0x9b, 0x47, 0x24, 0x30, 0x03, 0xec, 0xf3, 0x92, 0xed, 0x8a, 0x94, 0x45,
	0x2e, 0xfd, 0x52, 0xee, 0x7d, 0x46, 0x02, 0x43, 0xec, 0x0c, 0x9e, 0x24, 0x49, 0xaf, 0x42, 0x16,
	0xd5, 0xd0, 0x7d, 0x68, 0xc7, 0x61, 0x54, 0x45, 0xb4, 0x5a, 0x28, 0xa2, 0x28, 0xe7, 0x8d, 0x04,
	0x3b, 0xf8, 0x09, 0xdc, 0x28, 0x98, 0x54, 0x85, 0x94, 0x26, 0x22, 0xb9, 0xb6, 0x3a, 0x49, 0xb7,
	0xa1, 0x83, 0xaf, 0xeb, 0x91, 0xfa, 0xbe, 0x7b, 0xa2, 0x6e, 0xaf, 0xe8, 0x93, 0x66, 0x19, 0x3c,
	0xe2, 0xc1, 0xa0, 0x9e, 0x1e, 0x0c, 0x5e, 0x77, 0xbc, 0x58, 0x83, 0xb6, 0xcd, 0x5b, 0xad, 0xf8,
	0x4a, 0x5e, 0x3a, 0x0d, 0xa3, 0x25, 0x04, 0xfc, 0x7e, 0xbf, 0x09, 0x1d, 0x86, 0x2d, 0xfb, 0x58,
	0x0d, 0x10, 0x0b, 0x32, 0x57, 0x94, 0xa8, 0x30, 0x3c, 0xf0, 0x9a, 0xa9, 0xa7, 0x86, 0x87, 0x54,
	0x7d, 0xb7, 0x66, 0xa9, 0xef, 0x4f, 0x00, 0x28, 0xb3, 0x02, 0x66, 0xf2, 0x92, 0x99, 0xa5, 0x42,
	0x04, 0xfa, 0x91, 0xc5, 0x30, 0xba, 0x07, 0x2d, 0xec, 0x3b, 0x52, 0x11, 0xae, 0x54, 0x6c, 0x62,
	0xdf, 0xe1, 0x6a, 0x83, 0x0f, 0x41, 0x2f, 0x32, 0xa0, 0x18, 0xcc, 0x51, 0x30, 0x78, 0x00, 0x37,
	0xe4, 0x9c, 0x51, 0x64, 0xeb, 0x8a, 0x09, 0xa5, 0x07, 0x7a, 0x51, 0x53, 0x5d, 0x9f, 0x17, 0x75,
	0xb8, 0x21, 0x87, 0x09, 0xbe, 0xb9, 0x8f, 0x29, 0x25, 0x7e, 0x64, 0x96, 0x53, 0x13, 0x99, 0x55,
	0x1f, 0xd2, 0x8a, 0xac, 0xa2, 0xc7, 0xd0, 0xf4, 0x04, 0x9a, 0xea, 0x35, 0x91, 0xb2, 0x77, 0x73,
	0x29, 0x5b, 0x61, 0x75, 0xa8, 0x56, 0x91, 0x76, 0xef, 0x55, 0x0d, 0x16, 0xa4, 0xac, 0x6c, 0xda,
	0xc9, 0x91, 0x52, 0x7b, 0x53, 0x52, 0xea, 0x33, 0x93, 0xc2, 0xa3, 0x99, 0x24, 0x9d, 0x6a, 0xf4,
	0xed, 0x38, 0xe7, 0xd0, 0xa7, 0xd0, 0xb1, 0x18, 0xb3, 0xec, 0xe3, 0x09, 0xf6, 0x99, 0x4c, 0xd9,
	0x62, 0xbd, 0xee, 0xc4, 0x08, 0x23, 0x8d, 0x46, 0x06, 0x74, 0x6d, 0xe2, 0xb3, 0x80, 0x78, 0x26,
	0xc5, 0x8c, 0x37, 0x08, 0x2a, 0x6e, 0x84, 0xce, 0xf6, 0x9d, 0x7c, 0xf8, 0x24, 0xec, 0x40, 0xa2,
	0x52, 0x61, 0x5c, 0xb1, 0x33, 0x3b, 0x94, 0x97, 0xba, 0x8c, 0xa5, 0x39, 0x0e, 0x48, 0x38, 0x15,
	0x65, 0xd0, 0x36, 0x3a, 0x52, 0xf6, 0x98, 0x8b, 0x78, 0x06, 0x14, 0xe9, 0x50, 0x19, 0xf0, 0x17,
	0xd1, 0x06, 0x9c, 0xaa, 0x0c, 0x50, 0xa6, 0x93, 0x0c, 0x90, 0x82, 0xbd, 0xf2, 0x9e, 0x90, 0x65,
	0xab, 0xfe, 0xa6, 0x6c, 0xcd, 0xbf, 0x29, 0x5b, 0x8d, 0x2b, 0xd8, 0x5a, 0x78, 0x6b, 0xb6, 0x9a,
	0x6f, 0xc9, 0x56, 0xa6, 0xa8, 0x5a, 0xb9, 0xa2, 0xca, 0x53, 0xd9, 0x2e, 0x52, 0x79, 0x9f, 0xb7,
	0x0c, 0xa7, 0x94, 0xca, 0x4b, 0xe9, 0xca, 0xf6, 0x8f, 0x2c, 0xcd, 0xeb, 0x00, 0xb1, 0x5e, 0xdc,
	0x3f, 0x22, 0xc5, 0x5c, 0xff, 0xc8, 0x65, 0xcf, 0x36, 0x40, 0x12, 0xbd, 0xd2, 0x02, 0xee, 0x42,
	0x3d, 0x79, 0x5d, 0xf0, 0x9f, 0x83, 0xff, 0xd6, 0x40, 0xaf, 0x0a, 0x18, 0x1f, 0xb2, 0x3c, 0x6c,
	0xb3, 0x30, 0xc0, 0xd1, 0x97, 0xc4, 0x6b, 0xf4, 0x7d, 0xf8, 0x4e, 0xc4, 0x35, 0x19, 0x9d, 0xe0,
	0x80, 0xf2, 0x71, 0xab, 0x26, 0x40, 0x5d, 0xb5, 0xf1, 0x79, 0x24, 0x47, 0x3f, 0x83, 0x45, 0x07,
	0x1f, 0x59, 0xa1, 0xc7, 0xcc, 0x13, 0x17, 0x9f, 0xaa, 0x11, 0x6f, 0x2d, 0x73, 0x05, 0x24, 0x7e,
	0x9f, 0xba, 0xf8, 0xd4, 0xe8, 0x28, 0x05, 0xbe, 0x40, 0x63, 0x78, 0x6f, 0x1a, 0x8e, 0x3c, 0x97,
	0x1e, 0x9b, 0x94, 0x85, 0x0e, 0xf6, 0xb9, 0x1d, 0xfe, 0x4a, 0xa1, 0xcc, 0x62, 0x21, 0x55, 0xb7,
	0xdb, 0xed, 0x8c, 0xbd, 0x5f, 0x4a, 0x85, 0x03, 0x89, 0x7f, 0xca, 0xe1, 0x07, 0x02, 0x6d, 0xac,
	0x4e, 0xab, 0xb6, 0x90, 0x03, 0x6b, 0xa1, 0x3f, 0x09, 0x19, 0x8e, 0xfd, 0x58, 0xa1, 0xe3, 0xc6,
	0x7e, 0x1a, 0xc2, 0xcf, 0x07, 0x19, 0x3f, 0x87, 0x02, 0xaf, 0x6c, 0xed, 0x70, 0xb4, 0x72, 0xa3,
	0x87, 0x15, 0x3b, 0xdb, 0xff, 0x6e, 0xc3, 0x92, 0xec, 0xfd, 0x07, 0x38, 0x38, 0x71, 0x6d, 0x8c,
	0x9e, 0xc1, 0x52, 0xe6, 0x35, 0x84, 0x66, 0x79, 0x2b, 0xf5, 0xbe, 0x7b, 0x39, 0x48, 0x65, 0xe2,
	0x33, 0x58, 0xca, 0x3c, 0x8a, 0x0b, 0xb6, 0xcb, 0x5e, 0xda, 0x05, 0xdb, 0xe5, 0xef, 0xea, 0xdf,
	0xc2, 0x6a, 0xe5, 0xf3, 0x17, 0x6d, 0x95, 0xde, 0x42, 0xd5, 0x2f, 0xec, 0xde, 0x0f, 0x66, 0x57,
	0x50, 0xfe, 0x43, 0xb8, 0x5e, 0xfe, 0x26, 0x45, 0x1f, 0xe5, 0x6c, 0x5d, 0xfa, 0x3c, 0xee, 0xdd,
	0x9d, 0x11, 0xad, 0xdc, 0xfe, 0x0a, 0xde, 0x29, 0x79, 0x9f, 0xa2, 0xf5, 0x42, 0x27, 0x4a, 0x3f,
	0x86, 0x7b, 0x97, 0xfd, 0x03, 0x95, 0x7f, 0xe2, 0x8e, 0x60, 0x39, 0xfb, 0x2c, 0x43, 0xe5, 0x64,
	0xe7, 0xde, 0x80, 0xbd, 0x0f, 0xae, 0x40, 0xa9, 0x56, 0x51, 0xff, 0x43, 0x4d, 0x43, 0x18, 0x56,
	0x72, 0x23, 0x2b, 0xaa, 0x52, 0xcf, 0x4e, 0xc9, 0xbd, 0xdb, 0x57, 0xc1, 0xd2, 0x6e, 0x6c, 0xe8,
	0xe6, 0x07, 0x2b, 0x54, 0x6e, 0xa0, 0x30, 0x4d, 0xf5, 0xee, 0x5c, 0x89, 0x53, 0xf1, 0xb2, 0xa1,
	0x9b, 0x9f, 0xab, 0x0a, 0x4e, 0x2a, 0x46, 0xb6, 0x82, 0x93, 0xaa, 0x01, 0x4d, 0x9e, 0x24, 0xdb,
	0xef, 0x4b, 0x4e, 0x52, 0x7a, 0x7d, 0x97, 0x9c, 0xa4, 0xe2, 0xe2, 0xb0, 0xa1, 0x9b, 0x9f, 0x0f,
	0x0a, 0x4e, 0x2a, 0xe6, 0xb9, 0x82, 0x93, 0xaa, 0x41, 0x23, 0x1b, 0xae, 0x0a, 0x27, 0x15, 0x37,
	0xd4, 0x25, 0xe1, 0xca, 0x3a, 0x79, 0xe8, 0xbf, 0x7c, 0xd5, 0x9f, 0xfb, 0xe6, 0x55, 0x7f, 0xee,
	0xdb, 0x57, 0x7d, 0xed, 0xeb, 0xf3, 0xbe, 0xf6, 0xe7, 0xf3, 0xbe, 0xf6, 0x8f, 0xf3, 0xbe, 0xf6,
	0xf2, 0xbc, 0xaf, 0xfd, 0xeb, 0xbc, 0xaf, 0xfd, 0xe7, 0xbc, 0x3f, 0xf7, 0xed, 0x79, 0x5f, 0xfb,
	0xe3, 0x45, 0x7f, 0xee, 0xef, 0x17, 0x7d, 0xed, 0xe5, 0x45, 0x7f, 0xee, 0x9b, 0x8b, 0xfe, 0xdc,
	0xb3, 0x1f, 0xa5, 0xfe, 0x0a, 0x57, 0xce, 0xee, 0xf2, 0xdf, 0x23, 0xcb, 0x7e, 0x8e, 0x7d, 0x67,
	0x6b, 0xfa, 0x7c, 0xbc, 0x35, 0xc6, 0xbe, 0xfc, 0x4f, 0x5c, 0x7c, 0xc5, 0xa7, 0xd3, 0xd1, 0x68,
	0x41, 0xac, 0x3f, 0xfe, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd1, 0xd3, 0xe8, 0x66, 0xa8, 0x17,
	0x00, 0x00,
}

func (this *Chapter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Chapter)
	if !ok {
		that2, ok := that.(Chapter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChapterId != that1.ChapterId {
		return false
	}
	if this.ChapterName != that1.ChapterName {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if this.Subject != that1.Subject {
		return false
	}
	if this.Grade != that1.Grade {
		return false
	}
	if this.DisplayOrder != that1.DisplayOrder {
		return false
	}
	if this.SchoolId != that1.SchoolId {
		return false
	}
	return true
}
func (this *UpsertCoursesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertCoursesRequest)
	if !ok {
		that2, ok := that.(UpsertCoursesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Courses) != len(that1.Courses) {
		return false
	}
	for i := range this.Courses {
		if !this.Courses[i].Equal(that1.Courses[i]) {
			return false
		}
	}
	return true
}
func (this *UpsertCoursesRequest_Course) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertCoursesRequest_Course)
	if !ok {
		that2, ok := that.(UpsertCoursesRequest_Course)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if this.Subject != that1.Subject {
		return false
	}
	if this.Grade != that1.Grade {
		return false
	}
	if this.DisplayOrder != that1.DisplayOrder {
		return false
	}
	if len(this.ChapterIds) != len(that1.ChapterIds) {
		return false
	}
	for i := range this.ChapterIds {
		if this.ChapterIds[i] != that1.ChapterIds[i] {
			return false
		}
	}
	if this.SchoolId != that1.SchoolId {
		return false
	}
	if len(this.BookIds) != len(that1.BookIds) {
		return false
	}
	for i := range this.BookIds {
		if this.BookIds[i] != that1.BookIds[i] {
			return false
		}
	}
	if this.Icon != that1.Icon {
		return false
	}
	return true
}
func (this *UpsertCoursesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertCoursesResponse)
	if !ok {
		that2, ok := that.(UpsertCoursesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Successful != that1.Successful {
		return false
	}
	return true
}
func (this *DeleteCoursesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteCoursesRequest)
	if !ok {
		that2, ok := that.(DeleteCoursesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.CourseIds) != len(that1.CourseIds) {
		return false
	}
	for i := range this.CourseIds {
		if this.CourseIds[i] != that1.CourseIds[i] {
			return false
		}
	}
	return true
}
func (this *DeleteCoursesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteCoursesResponse)
	if !ok {
		that2, ok := that.(DeleteCoursesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Successful != that1.Successful {
		return false
	}
	return true
}
func (this *CreateBrightCoveUploadUrlRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateBrightCoveUploadUrlRequest)
	if !ok {
		that2, ok := that.(CreateBrightCoveUploadUrlRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *CreateBrightCoveUploadUrlResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateBrightCoveUploadUrlResponse)
	if !ok {
		that2, ok := that.(CreateBrightCoveUploadUrlResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SignedUrl != that1.SignedUrl {
		return false
	}
	if this.ApiRequestUrl != that1.ApiRequestUrl {
		return false
	}
	if this.VideoId != that1.VideoId {
		return false
	}
	return true
}
func (this *FinishUploadBrightCoveRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FinishUploadBrightCoveRequest)
	if !ok {
		that2, ok := that.(FinishUploadBrightCoveRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ApiRequestUrl != that1.ApiRequestUrl {
		return false
	}
	if this.VideoId != that1.VideoId {
		return false
	}
	return true
}
func (this *FinishUploadBrightCoveResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FinishUploadBrightCoveResponse)
	if !ok {
		that2, ok := that.(FinishUploadBrightCoveResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CoursesUpdated) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CoursesUpdated)
	if !ok {
		that2, ok := that.(CoursesUpdated)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Req.Equal(that1.Req) {
		return false
	}
	return true
}
func (this *UpsertCourseClassesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertCourseClassesResponse)
	if !ok {
		that2, ok := that.(UpsertCourseClassesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Successful != that1.Successful {
		return false
	}
	return true
}
func (this *QuizSets) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QuizSets)
	if !ok {
		that2, ok := that.(QuizSets)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LoId != that1.LoId {
		return false
	}
	if this.QuestionId != that1.QuestionId {
		return false
	}
	if this.DisplayOrder != that1.DisplayOrder {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	return true
}
func (this *UpsertQuizSetsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertQuizSetsRequest)
	if !ok {
		that2, ok := that.(UpsertQuizSetsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Quizsets) != len(that1.Quizsets) {
		return false
	}
	for i := range this.Quizsets {
		if !this.Quizsets[i].Equal(that1.Quizsets[i]) {
			return false
		}
	}
	return true
}
func (this *UpsertQuizSetsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertQuizSetsResponse)
	if !ok {
		that2, ok := that.(UpsertQuizSetsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Successful != that1.Successful {
		return false
	}
	return true
}
func (this *QuestionV2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QuestionV2)
	if !ok {
		that2, ok := that.(QuestionV2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.MasterQuestionId != that1.MasterQuestionId {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if this.Question != that1.Question {
		return false
	}
	if len(this.Answers) != len(that1.Answers) {
		return false
	}
	for i := range this.Answers {
		if this.Answers[i] != that1.Answers[i] {
			return false
		}
	}
	if this.Explanation != that1.Explanation {
		return false
	}
	if this.DifficultyLevel != that1.DifficultyLevel {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if len(this.QuestionsTagLo) != len(that1.QuestionsTagLo) {
		return false
	}
	for i := range this.QuestionsTagLo {
		if this.QuestionsTagLo[i] != that1.QuestionsTagLo[i] {
			return false
		}
	}
	if this.QuestionUrl != that1.QuestionUrl {
		return false
	}
	if len(this.AnswersUrl) != len(that1.AnswersUrl) {
		return false
	}
	for i := range this.AnswersUrl {
		if this.AnswersUrl[i] != that1.AnswersUrl[i] {
			return false
		}
	}
	if this.ExplanationUrl != that1.ExplanationUrl {
		return false
	}
	if len(this.ExplanationWrongAnswer) != len(that1.ExplanationWrongAnswer) {
		return false
	}
	for i := range this.ExplanationWrongAnswer {
		if this.ExplanationWrongAnswer[i] != that1.ExplanationWrongAnswer[i] {
			return false
		}
	}
	if len(this.ExplanationWrongAnswerUrl) != len(that1.ExplanationWrongAnswerUrl) {
		return false
	}
	for i := range this.ExplanationWrongAnswerUrl {
		if this.ExplanationWrongAnswerUrl[i] != that1.ExplanationWrongAnswerUrl[i] {
			return false
		}
	}
	if this.IsWaitingForRender != that1.IsWaitingForRender {
		return false
	}
	return true
}
func (this *UpsertQuestionsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertQuestionsRequest)
	if !ok {
		that2, ok := that.(UpsertQuestionsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Questions) != len(that1.Questions) {
		return false
	}
	for i := range this.Questions {
		if !this.Questions[i].Equal(that1.Questions[i]) {
			return false
		}
	}
	return true
}
func (this *UpsertQuestionsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertQuestionsResponse)
	if !ok {
		that2, ok := that.(UpsertQuestionsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.QuestionIds) != len(that1.QuestionIds) {
		return false
	}
	for i := range this.QuestionIds {
		if this.QuestionIds[i] != that1.QuestionIds[i] {
			return false
		}
	}
	return true
}
func (this *UpsertLiveCourseRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertLiveCourseRequest)
	if !ok {
		that2, ok := that.(UpsertLiveCourseRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Grade != that1.Grade {
		return false
	}
	if this.Subject != that1.Subject {
		return false
	}
	if len(this.ClassIds) != len(that1.ClassIds) {
		return false
	}
	for i := range this.ClassIds {
		if this.ClassIds[i] != that1.ClassIds[i] {
			return false
		}
	}
	if len(this.TeacherIds) != len(that1.TeacherIds) {
		return false
	}
	for i := range this.TeacherIds {
		if this.TeacherIds[i] != that1.TeacherIds[i] {
			return false
		}
	}
	if this.SchoolId != that1.SchoolId {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if !this.StartDate.Equal(that1.StartDate) {
		return false
	}
	if !this.EndDate.Equal(that1.EndDate) {
		return false
	}
	return true
}
func (this *UpsertLiveCourseResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertLiveCourseResponse)
	if !ok {
		that2, ok := that.(UpsertLiveCourseResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	return true
}
func (this *DeleteLiveCourseRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteLiveCourseRequest)
	if !ok {
		that2, ok := that.(DeleteLiveCourseRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.CourseIds) != len(that1.CourseIds) {
		return false
	}
	for i := range this.CourseIds {
		if this.CourseIds[i] != that1.CourseIds[i] {
			return false
		}
	}
	return true
}
func (this *DeleteLiveCourseResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteLiveCourseResponse)
	if !ok {
		that2, ok := that.(DeleteLiveCourseResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CreateLiveLessonRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateLiveLessonRequest)
	if !ok {
		that2, ok := that.(CreateLiveLessonRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CourseId != that1.CourseId {
		return false
	}
	if len(this.Lessons) != len(that1.Lessons) {
		return false
	}
	for i := range this.Lessons {
		if !this.Lessons[i].Equal(that1.Lessons[i]) {
			return false
		}
	}
	return true
}
func (this *CreateLiveLessonRequest_Lesson) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateLiveLessonRequest_Lesson)
	if !ok {
		that2, ok := that.(CreateLiveLessonRequest_Lesson)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.StartDate.Equal(that1.StartDate) {
		return false
	}
	if !this.EndDate.Equal(that1.EndDate) {
		return false
	}
	if this.TeacherId != that1.TeacherId {
		return false
	}
	if len(this.Attachments) != len(that1.Attachments) {
		return false
	}
	for i := range this.Attachments {
		if !this.Attachments[i].Equal(that1.Attachments[i]) {
			return false
		}
	}
	if !this.ControlSettings.Equal(that1.ControlSettings) {
		return false
	}
	if this.LessonGroup != that1.LessonGroup {
		return false
	}
	return true
}
func (this *CreateLiveLessonResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateLiveLessonResponse)
	if !ok {
		that2, ok := that.(CreateLiveLessonResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *UpdateLiveLessonRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateLiveLessonRequest)
	if !ok {
		that2, ok := that.(UpdateLiveLessonRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LessonId != that1.LessonId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.StartDate.Equal(that1.StartDate) {
		return false
	}
	if !this.EndDate.Equal(that1.EndDate) {
		return false
	}
	if this.TeacherId != that1.TeacherId {
		return false
	}
	if len(this.Attachments) != len(that1.Attachments) {
		return false
	}
	for i := range this.Attachments {
		if !this.Attachments[i].Equal(that1.Attachments[i]) {
			return false
		}
	}
	if !this.ControlSettings.Equal(that1.ControlSettings) {
		return false
	}
	if this.CourseId != that1.CourseId {
		return false
	}
	if this.LessonGroup != that1.LessonGroup {
		return false
	}
	return true
}
func (this *UpdateLiveLessonResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateLiveLessonResponse)
	if !ok {
		that2, ok := that.(UpdateLiveLessonResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LessonId != that1.LessonId {
		return false
	}
	return true
}
func (this *DeleteLiveLessonRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteLiveLessonRequest)
	if !ok {
		that2, ok := that.(DeleteLiveLessonRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.LessonIds) != len(that1.LessonIds) {
		return false
	}
	for i := range this.LessonIds {
		if this.LessonIds[i] != that1.LessonIds[i] {
			return false
		}
	}
	return true
}
func (this *DeleteLiveLessonResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteLiveLessonResponse)
	if !ok {
		that2, ok := that.(DeleteLiveLessonResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Attachment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Attachment)
	if !ok {
		that2, ok := that.(Attachment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Url != that1.Url {
		return false
	}
	return true
}
func (this *ControlSettingLiveLesson) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ControlSettingLiveLesson)
	if !ok {
		that2, ok := that.(ControlSettingLiveLesson)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Lectures) != len(that1.Lectures) {
		return false
	}
	for i := range this.Lectures {
		if this.Lectures[i] != that1.Lectures[i] {
			return false
		}
	}
	if len(this.TeacherObversers) != len(that1.TeacherObversers) {
		return false
	}
	for i := range this.TeacherObversers {
		if this.TeacherObversers[i] != that1.TeacherObversers[i] {
			return false
		}
	}
	if this.DefaultView != that1.DefaultView {
		return false
	}
	if this.PublishStudentVideoStatus != that1.PublishStudentVideoStatus {
		return false
	}
	if this.UnmuteStudentAudioStatus != that1.UnmuteStudentAudioStatus {
		return false
	}
	return true
}
func (this *Chapter) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.Chapter{")
	s = append(s, "ChapterId: "+fmt.Sprintf("%#v", this.ChapterId)+",\n")
	s = append(s, "ChapterName: "+fmt.Sprintf("%#v", this.ChapterName)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	s = append(s, "Grade: "+fmt.Sprintf("%#v", this.Grade)+",\n")
	s = append(s, "DisplayOrder: "+fmt.Sprintf("%#v", this.DisplayOrder)+",\n")
	s = append(s, "SchoolId: "+fmt.Sprintf("%#v", this.SchoolId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertCoursesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpsertCoursesRequest{")
	if this.Courses != nil {
		s = append(s, "Courses: "+fmt.Sprintf("%#v", this.Courses)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertCoursesRequest_Course) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&pb.UpsertCoursesRequest_Course{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	s = append(s, "Grade: "+fmt.Sprintf("%#v", this.Grade)+",\n")
	s = append(s, "DisplayOrder: "+fmt.Sprintf("%#v", this.DisplayOrder)+",\n")
	s = append(s, "ChapterIds: "+fmt.Sprintf("%#v", this.ChapterIds)+",\n")
	s = append(s, "SchoolId: "+fmt.Sprintf("%#v", this.SchoolId)+",\n")
	s = append(s, "BookIds: "+fmt.Sprintf("%#v", this.BookIds)+",\n")
	s = append(s, "Icon: "+fmt.Sprintf("%#v", this.Icon)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertCoursesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpsertCoursesResponse{")
	s = append(s, "Successful: "+fmt.Sprintf("%#v", this.Successful)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteCoursesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.DeleteCoursesRequest{")
	s = append(s, "CourseIds: "+fmt.Sprintf("%#v", this.CourseIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteCoursesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.DeleteCoursesResponse{")
	s = append(s, "Successful: "+fmt.Sprintf("%#v", this.Successful)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateBrightCoveUploadUrlRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CreateBrightCoveUploadUrlRequest{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateBrightCoveUploadUrlResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.CreateBrightCoveUploadUrlResponse{")
	s = append(s, "SignedUrl: "+fmt.Sprintf("%#v", this.SignedUrl)+",\n")
	s = append(s, "ApiRequestUrl: "+fmt.Sprintf("%#v", this.ApiRequestUrl)+",\n")
	s = append(s, "VideoId: "+fmt.Sprintf("%#v", this.VideoId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FinishUploadBrightCoveRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.FinishUploadBrightCoveRequest{")
	s = append(s, "ApiRequestUrl: "+fmt.Sprintf("%#v", this.ApiRequestUrl)+",\n")
	s = append(s, "VideoId: "+fmt.Sprintf("%#v", this.VideoId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FinishUploadBrightCoveResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.FinishUploadBrightCoveResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CoursesUpdated) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CoursesUpdated{")
	if this.Req != nil {
		s = append(s, "Req: "+fmt.Sprintf("%#v", this.Req)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertCourseClassesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpsertCourseClassesResponse{")
	s = append(s, "Successful: "+fmt.Sprintf("%#v", this.Successful)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QuizSets) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.QuizSets{")
	s = append(s, "LoId: "+fmt.Sprintf("%#v", this.LoId)+",\n")
	s = append(s, "QuestionId: "+fmt.Sprintf("%#v", this.QuestionId)+",\n")
	s = append(s, "DisplayOrder: "+fmt.Sprintf("%#v", this.DisplayOrder)+",\n")
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertQuizSetsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpsertQuizSetsRequest{")
	if this.Quizsets != nil {
		s = append(s, "Quizsets: "+fmt.Sprintf("%#v", this.Quizsets)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertQuizSetsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpsertQuizSetsResponse{")
	s = append(s, "Successful: "+fmt.Sprintf("%#v", this.Successful)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QuestionV2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&pb.QuestionV2{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "MasterQuestionId: "+fmt.Sprintf("%#v", this.MasterQuestionId)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "Question: "+fmt.Sprintf("%#v", this.Question)+",\n")
	s = append(s, "Answers: "+fmt.Sprintf("%#v", this.Answers)+",\n")
	s = append(s, "Explanation: "+fmt.Sprintf("%#v", this.Explanation)+",\n")
	s = append(s, "DifficultyLevel: "+fmt.Sprintf("%#v", this.DifficultyLevel)+",\n")
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	s = append(s, "QuestionsTagLo: "+fmt.Sprintf("%#v", this.QuestionsTagLo)+",\n")
	s = append(s, "QuestionUrl: "+fmt.Sprintf("%#v", this.QuestionUrl)+",\n")
	s = append(s, "AnswersUrl: "+fmt.Sprintf("%#v", this.AnswersUrl)+",\n")
	s = append(s, "ExplanationUrl: "+fmt.Sprintf("%#v", this.ExplanationUrl)+",\n")
	s = append(s, "ExplanationWrongAnswer: "+fmt.Sprintf("%#v", this.ExplanationWrongAnswer)+",\n")
	s = append(s, "ExplanationWrongAnswerUrl: "+fmt.Sprintf("%#v", this.ExplanationWrongAnswerUrl)+",\n")
	s = append(s, "IsWaitingForRender: "+fmt.Sprintf("%#v", this.IsWaitingForRender)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertQuestionsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpsertQuestionsRequest{")
	if this.Questions != nil {
		s = append(s, "Questions: "+fmt.Sprintf("%#v", this.Questions)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertQuestionsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpsertQuestionsResponse{")
	s = append(s, "QuestionIds: "+fmt.Sprintf("%#v", this.QuestionIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertLiveCourseRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&pb.UpsertLiveCourseRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Grade: "+fmt.Sprintf("%#v", this.Grade)+",\n")
	s = append(s, "Subject: "+fmt.Sprintf("%#v", this.Subject)+",\n")
	s = append(s, "ClassIds: "+fmt.Sprintf("%#v", this.ClassIds)+",\n")
	s = append(s, "TeacherIds: "+fmt.Sprintf("%#v", this.TeacherIds)+",\n")
	s = append(s, "SchoolId: "+fmt.Sprintf("%#v", this.SchoolId)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	if this.StartDate != nil {
		s = append(s, "StartDate: "+fmt.Sprintf("%#v", this.StartDate)+",\n")
	}
	if this.EndDate != nil {
		s = append(s, "EndDate: "+fmt.Sprintf("%#v", this.EndDate)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpsertLiveCourseResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpsertLiveCourseResponse{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteLiveCourseRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.DeleteLiveCourseRequest{")
	s = append(s, "CourseIds: "+fmt.Sprintf("%#v", this.CourseIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteLiveCourseResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.DeleteLiveCourseResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateLiveLessonRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.CreateLiveLessonRequest{")
	s = append(s, "CourseId: "+fmt.Sprintf("%#v", this.CourseId)+",\n")
	if this.Lessons != nil {
		s = append(s, "Lessons: "+fmt.Sprintf("%#v", this.Lessons)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateLiveLessonRequest_Lesson) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.CreateLiveLessonRequest_Lesson{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.StartDate != nil {
		s = append(s, "StartDate: "+fmt.Sprintf("%#v", this.StartDate)+",\n")
	}
	if this.EndDate != nil {
		s = append(s, "EndDate: "+fmt.Sprintf("%#v", this.EndDate)+",\n")
	}
	s = append(s, "TeacherId: "+fmt.Sprintf("%#v", this.TeacherId)+",\n")
	if this.Attachments != nil {
		s = append(s, "Attachments: "+fmt.Sprintf("%#v", this.Attachments)+",\n")
	}
	if this.ControlSettings != nil {
		s = append(s, "ControlSettings: "+fmt.Sprintf("%#v", this.ControlSettings)+",\n")
	}
	s = append(s, "LessonGroup: "+fmt.Sprintf("%#v", this.LessonGroup)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateLiveLessonResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.CreateLiveLessonResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateLiveLessonRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&pb.UpdateLiveLessonRequest{")
	s = append(s, "LessonId: "+fmt.Sprintf("%#v", this.LessonId)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.StartDate != nil {
		s = append(s, "StartDate: "+fmt.Sprintf("%#v", this.StartDate)+",\n")
	}
	if this.EndDate != nil {
		s = append(s, "EndDate: "+fmt.Sprintf("%#v", this.EndDate)+",\n")
	}
	s = append(s, "TeacherId: "+fmt.Sprintf("%#v", this.TeacherId)+",\n")
	if this.Attachments != nil {
		s = append(s, "Attachments: "+fmt.Sprintf("%#v", this.Attachments)+",\n")
	}
	if this.ControlSettings != nil {
		s = append(s, "ControlSettings: "+fmt.Sprintf("%#v", this.ControlSettings)+",\n")
	}
	s = append(s, "CourseId: "+fmt.Sprintf("%#v", this.CourseId)+",\n")
	s = append(s, "LessonGroup: "+fmt.Sprintf("%#v", this.LessonGroup)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateLiveLessonResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpdateLiveLessonResponse{")
	s = append(s, "LessonId: "+fmt.Sprintf("%#v", this.LessonId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteLiveLessonRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.DeleteLiveLessonRequest{")
	s = append(s, "LessonIds: "+fmt.Sprintf("%#v", this.LessonIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteLiveLessonResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.DeleteLiveLessonResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Attachment) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.Attachment{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Url: "+fmt.Sprintf("%#v", this.Url)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ControlSettingLiveLesson) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.ControlSettingLiveLesson{")
	s = append(s, "Lectures: "+fmt.Sprintf("%#v", this.Lectures)+",\n")
	s = append(s, "TeacherObversers: "+fmt.Sprintf("%#v", this.TeacherObversers)+",\n")
	s = append(s, "DefaultView: "+fmt.Sprintf("%#v", this.DefaultView)+",\n")
	s = append(s, "PublishStudentVideoStatus: "+fmt.Sprintf("%#v", this.PublishStudentVideoStatus)+",\n")
	s = append(s, "UnmuteStudentAudioStatus: "+fmt.Sprintf("%#v", this.UnmuteStudentAudioStatus)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringYscourses(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CourseServiceClient is the client API for CourseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CourseServiceClient interface {
	UpsertCourses(ctx context.Context, in *UpsertCoursesRequest, opts ...grpc.CallOption) (*UpsertCoursesResponse, error)
	DeleteCourses(ctx context.Context, in *DeleteCoursesRequest, opts ...grpc.CallOption) (*DeleteCoursesResponse, error)
	CreateBrightCoveUploadUrl(ctx context.Context, in *CreateBrightCoveUploadUrlRequest, opts ...grpc.CallOption) (*CreateBrightCoveUploadUrlResponse, error)
	FinishUploadBrightCove(ctx context.Context, in *FinishUploadBrightCoveRequest, opts ...grpc.CallOption) (*FinishUploadBrightCoveResponse, error)
	UpsertCourseClasses(ctx context.Context, in *CoursesUpdated, opts ...grpc.CallOption) (*UpsertCourseClassesResponse, error)
	UpsertQuizSets(ctx context.Context, in *UpsertQuizSetsRequest, opts ...grpc.CallOption) (*UpsertQuizSetsResponse, error)
	UpsertQuestions(ctx context.Context, in *UpsertQuestionsRequest, opts ...grpc.CallOption) (*UpsertQuestionsResponse, error)
	UpsertLiveCourse(ctx context.Context, in *UpsertLiveCourseRequest, opts ...grpc.CallOption) (*UpsertLiveCourseResponse, error)
	DeleteLiveCourse(ctx context.Context, in *DeleteLiveCourseRequest, opts ...grpc.CallOption) (*DeleteLiveCourseResponse, error)
	UpdateLiveLesson(ctx context.Context, in *UpdateLiveLessonRequest, opts ...grpc.CallOption) (*UpdateLiveLessonResponse, error)
	CreateLiveLesson(ctx context.Context, in *CreateLiveLessonRequest, opts ...grpc.CallOption) (*CreateLiveLessonResponse, error)
	DeleteLiveLesson(ctx context.Context, in *DeleteLiveLessonRequest, opts ...grpc.CallOption) (*DeleteLiveLessonResponse, error)
}

type courseServiceClient struct {
	cc *grpc.ClientConn
}

func NewCourseServiceClient(cc *grpc.ClientConn) CourseServiceClient {
	return &courseServiceClient{cc}
}

func (c *courseServiceClient) UpsertCourses(ctx context.Context, in *UpsertCoursesRequest, opts ...grpc.CallOption) (*UpsertCoursesResponse, error) {
	out := new(UpsertCoursesResponse)
	err := c.cc.Invoke(ctx, "/manabie.yasuo.CourseService/UpsertCourses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) DeleteCourses(ctx context.Context, in *DeleteCoursesRequest, opts ...grpc.CallOption) (*DeleteCoursesResponse, error) {
	out := new(DeleteCoursesResponse)
	err := c.cc.Invoke(ctx, "/manabie.yasuo.CourseService/DeleteCourses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) CreateBrightCoveUploadUrl(ctx context.Context, in *CreateBrightCoveUploadUrlRequest, opts ...grpc.CallOption) (*CreateBrightCoveUploadUrlResponse, error) {
	out := new(CreateBrightCoveUploadUrlResponse)
	err := c.cc.Invoke(ctx, "/manabie.yasuo.CourseService/CreateBrightCoveUploadUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) FinishUploadBrightCove(ctx context.Context, in *FinishUploadBrightCoveRequest, opts ...grpc.CallOption) (*FinishUploadBrightCoveResponse, error) {
	out := new(FinishUploadBrightCoveResponse)
	err := c.cc.Invoke(ctx, "/manabie.yasuo.CourseService/FinishUploadBrightCove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) UpsertCourseClasses(ctx context.Context, in *CoursesUpdated, opts ...grpc.CallOption) (*UpsertCourseClassesResponse, error) {
	out := new(UpsertCourseClassesResponse)
	err := c.cc.Invoke(ctx, "/manabie.yasuo.CourseService/UpsertCourseClasses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *courseServiceClient) UpsertQuizSets(ctx context.Context, in *UpsertQuizSetsRequest, opts ...grpc.CallOption) (*UpsertQuizSetsResponse, error) {
	out := new(UpsertQuizSetsResponse)
	err := c.cc.Invoke(ctx, "/manabie.yasuo.CourseService/UpsertQuizSets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *courseServiceClient) UpsertQuestions(ctx context.Context, in *UpsertQuestionsRequest, opts ...grpc.CallOption) (*UpsertQuestionsResponse, error) {
	out := new(UpsertQuestionsResponse)
	err := c.cc.Invoke(ctx, "/manabie.yasuo.CourseService/UpsertQuestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) UpsertLiveCourse(ctx context.Context, in *UpsertLiveCourseRequest, opts ...grpc.CallOption) (*UpsertLiveCourseResponse, error) {
	out := new(UpsertLiveCourseResponse)
	err := c.cc.Invoke(ctx, "/manabie.yasuo.CourseService/UpsertLiveCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) DeleteLiveCourse(ctx context.Context, in *DeleteLiveCourseRequest, opts ...grpc.CallOption) (*DeleteLiveCourseResponse, error) {
	out := new(DeleteLiveCourseResponse)
	err := c.cc.Invoke(ctx, "/manabie.yasuo.CourseService/DeleteLiveCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) UpdateLiveLesson(ctx context.Context, in *UpdateLiveLessonRequest, opts ...grpc.CallOption) (*UpdateLiveLessonResponse, error) {
	out := new(UpdateLiveLessonResponse)
	err := c.cc.Invoke(ctx, "/manabie.yasuo.CourseService/UpdateLiveLesson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) CreateLiveLesson(ctx context.Context, in *CreateLiveLessonRequest, opts ...grpc.CallOption) (*CreateLiveLessonResponse, error) {
	out := new(CreateLiveLessonResponse)
	err := c.cc.Invoke(ctx, "/manabie.yasuo.CourseService/CreateLiveLesson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) DeleteLiveLesson(ctx context.Context, in *DeleteLiveLessonRequest, opts ...grpc.CallOption) (*DeleteLiveLessonResponse, error) {
	out := new(DeleteLiveLessonResponse)
	err := c.cc.Invoke(ctx, "/manabie.yasuo.CourseService/DeleteLiveLesson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseServiceServer is the server API for CourseService service.
type CourseServiceServer interface {
	UpsertCourses(context.Context, *UpsertCoursesRequest) (*UpsertCoursesResponse, error)
	DeleteCourses(context.Context, *DeleteCoursesRequest) (*DeleteCoursesResponse, error)
	CreateBrightCoveUploadUrl(context.Context, *CreateBrightCoveUploadUrlRequest) (*CreateBrightCoveUploadUrlResponse, error)
	FinishUploadBrightCove(context.Context, *FinishUploadBrightCoveRequest) (*FinishUploadBrightCoveResponse, error)
	UpsertCourseClasses(context.Context, *CoursesUpdated) (*UpsertCourseClassesResponse, error)
	UpsertQuizSets(context.Context, *UpsertQuizSetsRequest) (*UpsertQuizSetsResponse, error)
	UpsertQuestions(context.Context, *UpsertQuestionsRequest) (*UpsertQuestionsResponse, error)
	UpsertLiveCourse(context.Context, *UpsertLiveCourseRequest) (*UpsertLiveCourseResponse, error)
	DeleteLiveCourse(context.Context, *DeleteLiveCourseRequest) (*DeleteLiveCourseResponse, error)
	UpdateLiveLesson(context.Context, *UpdateLiveLessonRequest) (*UpdateLiveLessonResponse, error)
	CreateLiveLesson(context.Context, *CreateLiveLessonRequest) (*CreateLiveLessonResponse, error)
	DeleteLiveLesson(context.Context, *DeleteLiveLessonRequest) (*DeleteLiveLessonResponse, error)
}

// UnimplementedCourseServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCourseServiceServer struct {
}

func (*UnimplementedCourseServiceServer) UpsertCourses(ctx context.Context, req *UpsertCoursesRequest) (*UpsertCoursesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertCourses not implemented")
}
func (*UnimplementedCourseServiceServer) DeleteCourses(ctx context.Context, req *DeleteCoursesRequest) (*DeleteCoursesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCourses not implemented")
}
func (*UnimplementedCourseServiceServer) CreateBrightCoveUploadUrl(ctx context.Context, req *CreateBrightCoveUploadUrlRequest) (*CreateBrightCoveUploadUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBrightCoveUploadUrl not implemented")
}
func (*UnimplementedCourseServiceServer) FinishUploadBrightCove(ctx context.Context, req *FinishUploadBrightCoveRequest) (*FinishUploadBrightCoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishUploadBrightCove not implemented")
}
func (*UnimplementedCourseServiceServer) UpsertCourseClasses(ctx context.Context, req *CoursesUpdated) (*UpsertCourseClassesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertCourseClasses not implemented")
}
func (*UnimplementedCourseServiceServer) UpsertQuizSets(ctx context.Context, req *UpsertQuizSetsRequest) (*UpsertQuizSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertQuizSets not implemented")
}
func (*UnimplementedCourseServiceServer) UpsertQuestions(ctx context.Context, req *UpsertQuestionsRequest) (*UpsertQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertQuestions not implemented")
}
func (*UnimplementedCourseServiceServer) UpsertLiveCourse(ctx context.Context, req *UpsertLiveCourseRequest) (*UpsertLiveCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertLiveCourse not implemented")
}
func (*UnimplementedCourseServiceServer) DeleteLiveCourse(ctx context.Context, req *DeleteLiveCourseRequest) (*DeleteLiveCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLiveCourse not implemented")
}
func (*UnimplementedCourseServiceServer) UpdateLiveLesson(ctx context.Context, req *UpdateLiveLessonRequest) (*UpdateLiveLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLiveLesson not implemented")
}
func (*UnimplementedCourseServiceServer) CreateLiveLesson(ctx context.Context, req *CreateLiveLessonRequest) (*CreateLiveLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLiveLesson not implemented")
}
func (*UnimplementedCourseServiceServer) DeleteLiveLesson(ctx context.Context, req *DeleteLiveLessonRequest) (*DeleteLiveLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLiveLesson not implemented")
}

func RegisterCourseServiceServer(s *grpc.Server, srv CourseServiceServer) {
	s.RegisterService(&_CourseService_serviceDesc, srv)
}

func _CourseService_UpsertCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertCoursesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).UpsertCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.yasuo.CourseService/UpsertCourses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).UpsertCourses(ctx, req.(*UpsertCoursesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_DeleteCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCoursesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).DeleteCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.yasuo.CourseService/DeleteCourses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).DeleteCourses(ctx, req.(*DeleteCoursesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_CreateBrightCoveUploadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBrightCoveUploadUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).CreateBrightCoveUploadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.yasuo.CourseService/CreateBrightCoveUploadUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).CreateBrightCoveUploadUrl(ctx, req.(*CreateBrightCoveUploadUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_FinishUploadBrightCove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishUploadBrightCoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).FinishUploadBrightCove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.yasuo.CourseService/FinishUploadBrightCove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).FinishUploadBrightCove(ctx, req.(*FinishUploadBrightCoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_UpsertCourseClasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CoursesUpdated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).UpsertCourseClasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.yasuo.CourseService/UpsertCourseClasses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).UpsertCourseClasses(ctx, req.(*CoursesUpdated))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_UpsertQuizSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertQuizSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).UpsertQuizSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.yasuo.CourseService/UpsertQuizSets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).UpsertQuizSets(ctx, req.(*UpsertQuizSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_UpsertQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).UpsertQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.yasuo.CourseService/UpsertQuestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).UpsertQuestions(ctx, req.(*UpsertQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_UpsertLiveCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertLiveCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).UpsertLiveCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.yasuo.CourseService/UpsertLiveCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).UpsertLiveCourse(ctx, req.(*UpsertLiveCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_DeleteLiveCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLiveCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).DeleteLiveCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.yasuo.CourseService/DeleteLiveCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).DeleteLiveCourse(ctx, req.(*DeleteLiveCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_UpdateLiveLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLiveLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).UpdateLiveLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.yasuo.CourseService/UpdateLiveLesson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).UpdateLiveLesson(ctx, req.(*UpdateLiveLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_CreateLiveLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLiveLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).CreateLiveLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.yasuo.CourseService/CreateLiveLesson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).CreateLiveLesson(ctx, req.(*CreateLiveLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_DeleteLiveLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLiveLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).DeleteLiveLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.yasuo.CourseService/DeleteLiveLesson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).DeleteLiveLesson(ctx, req.(*DeleteLiveLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CourseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "manabie.yasuo.CourseService",
	HandlerType: (*CourseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertCourses",
			Handler:    _CourseService_UpsertCourses_Handler,
		},
		{
			MethodName: "DeleteCourses",
			Handler:    _CourseService_DeleteCourses_Handler,
		},
		{
			MethodName: "CreateBrightCoveUploadUrl",
			Handler:    _CourseService_CreateBrightCoveUploadUrl_Handler,
		},
		{
			MethodName: "FinishUploadBrightCove",
			Handler:    _CourseService_FinishUploadBrightCove_Handler,
		},
		{
			MethodName: "UpsertCourseClasses",
			Handler:    _CourseService_UpsertCourseClasses_Handler,
		},
		{
			MethodName: "UpsertQuizSets",
			Handler:    _CourseService_UpsertQuizSets_Handler,
		},
		{
			MethodName: "UpsertQuestions",
			Handler:    _CourseService_UpsertQuestions_Handler,
		},
		{
			MethodName: "UpsertLiveCourse",
			Handler:    _CourseService_UpsertLiveCourse_Handler,
		},
		{
			MethodName: "DeleteLiveCourse",
			Handler:    _CourseService_DeleteLiveCourse_Handler,
		},
		{
			MethodName: "UpdateLiveLesson",
			Handler:    _CourseService_UpdateLiveLesson_Handler,
		},
		{
			MethodName: "CreateLiveLesson",
			Handler:    _CourseService_CreateLiveLesson_Handler,
		},
		{
			MethodName: "DeleteLiveLesson",
			Handler:    _CourseService_DeleteLiveLesson_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yscourses.proto",
}

func (m *Chapter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Chapter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Chapter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SchoolId != 0 {
		i = encodeVarintYscourses(dAtA, i, uint64(m.SchoolId))
		i--
		dAtA[i] = 0x38
	}
	if m.DisplayOrder != 0 {
		i = encodeVarintYscourses(dAtA, i, uint64(m.DisplayOrder))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Grade) > 0 {
		i -= len(m.Grade)
		copy(dAtA[i:], m.Grade)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.Grade)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Subject != 0 {
		i = encodeVarintYscourses(dAtA, i, uint64(m.Subject))
		i--
		dAtA[i] = 0x20
	}
	if m.Country != 0 {
		i = encodeVarintYscourses(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChapterName) > 0 {
		i -= len(m.ChapterName)
		copy(dAtA[i:], m.ChapterName)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.ChapterName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChapterId) > 0 {
		i -= len(m.ChapterId)
		copy(dAtA[i:], m.ChapterId)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.ChapterId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpsertCoursesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertCoursesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertCoursesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Courses) > 0 {
		for iNdEx := len(m.Courses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Courses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintYscourses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpsertCoursesRequest_Course) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertCoursesRequest_Course) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertCoursesRequest_Course) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.BookIds) > 0 {
		for iNdEx := len(m.BookIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BookIds[iNdEx])
			copy(dAtA[i:], m.BookIds[iNdEx])
			i = encodeVarintYscourses(dAtA, i, uint64(len(m.BookIds[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.SchoolId != 0 {
		i = encodeVarintYscourses(dAtA, i, uint64(m.SchoolId))
		i--
		dAtA[i] = 0x40
	}
	if len(m.ChapterIds) > 0 {
		for iNdEx := len(m.ChapterIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ChapterIds[iNdEx])
			copy(dAtA[i:], m.ChapterIds[iNdEx])
			i = encodeVarintYscourses(dAtA, i, uint64(len(m.ChapterIds[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.DisplayOrder != 0 {
		i = encodeVarintYscourses(dAtA, i, uint64(m.DisplayOrder))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Grade) > 0 {
		i -= len(m.Grade)
		copy(dAtA[i:], m.Grade)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.Grade)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Subject != 0 {
		i = encodeVarintYscourses(dAtA, i, uint64(m.Subject))
		i--
		dAtA[i] = 0x20
	}
	if m.Country != 0 {
		i = encodeVarintYscourses(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpsertCoursesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertCoursesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertCoursesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Successful {
		i--
		if m.Successful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteCoursesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteCoursesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteCoursesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CourseIds) > 0 {
		for iNdEx := len(m.CourseIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CourseIds[iNdEx])
			copy(dAtA[i:], m.CourseIds[iNdEx])
			i = encodeVarintYscourses(dAtA, i, uint64(len(m.CourseIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeleteCoursesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteCoursesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteCoursesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Successful {
		i--
		if m.Successful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateBrightCoveUploadUrlRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateBrightCoveUploadUrlRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateBrightCoveUploadUrlRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateBrightCoveUploadUrlResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateBrightCoveUploadUrlResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateBrightCoveUploadUrlResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VideoId) > 0 {
		i -= len(m.VideoId)
		copy(dAtA[i:], m.VideoId)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.VideoId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ApiRequestUrl) > 0 {
		i -= len(m.ApiRequestUrl)
		copy(dAtA[i:], m.ApiRequestUrl)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.ApiRequestUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SignedUrl) > 0 {
		i -= len(m.SignedUrl)
		copy(dAtA[i:], m.SignedUrl)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.SignedUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FinishUploadBrightCoveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinishUploadBrightCoveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FinishUploadBrightCoveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VideoId) > 0 {
		i -= len(m.VideoId)
		copy(dAtA[i:], m.VideoId)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.VideoId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ApiRequestUrl) > 0 {
		i -= len(m.ApiRequestUrl)
		copy(dAtA[i:], m.ApiRequestUrl)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.ApiRequestUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FinishUploadBrightCoveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FinishUploadBrightCoveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FinishUploadBrightCoveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CoursesUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoursesUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoursesUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Req != nil {
		{
			size, err := m.Req.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYscourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpsertCourseClassesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertCourseClassesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertCourseClassesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Successful {
		i--
		if m.Successful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuizSets) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuizSets) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuizSets) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYscourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYscourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.DisplayOrder) > 0 {
		i -= len(m.DisplayOrder)
		copy(dAtA[i:], m.DisplayOrder)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.DisplayOrder)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.QuestionId) > 0 {
		i -= len(m.QuestionId)
		copy(dAtA[i:], m.QuestionId)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.QuestionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LoId) > 0 {
		i -= len(m.LoId)
		copy(dAtA[i:], m.LoId)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.LoId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpsertQuizSetsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertQuizSetsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertQuizSetsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Quizsets) > 0 {
		for iNdEx := len(m.Quizsets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Quizsets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintYscourses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpsertQuizSetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertQuizSetsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertQuizSetsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Successful {
		i--
		if m.Successful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuestionV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuestionV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuestionV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsWaitingForRender {
		i--
		if m.IsWaitingForRender {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.ExplanationWrongAnswerUrl) > 0 {
		for iNdEx := len(m.ExplanationWrongAnswerUrl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExplanationWrongAnswerUrl[iNdEx])
			copy(dAtA[i:], m.ExplanationWrongAnswerUrl[iNdEx])
			i = encodeVarintYscourses(dAtA, i, uint64(len(m.ExplanationWrongAnswerUrl[iNdEx])))
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.ExplanationWrongAnswer) > 0 {
		for iNdEx := len(m.ExplanationWrongAnswer) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ExplanationWrongAnswer[iNdEx])
			copy(dAtA[i:], m.ExplanationWrongAnswer[iNdEx])
			i = encodeVarintYscourses(dAtA, i, uint64(len(m.ExplanationWrongAnswer[iNdEx])))
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.ExplanationUrl) > 0 {
		i -= len(m.ExplanationUrl)
		copy(dAtA[i:], m.ExplanationUrl)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.ExplanationUrl)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.AnswersUrl) > 0 {
		for iNdEx := len(m.AnswersUrl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AnswersUrl[iNdEx])
			copy(dAtA[i:], m.AnswersUrl[iNdEx])
			i = encodeVarintYscourses(dAtA, i, uint64(len(m.AnswersUrl[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.QuestionUrl) > 0 {
		i -= len(m.QuestionUrl)
		copy(dAtA[i:], m.QuestionUrl)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.QuestionUrl)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.QuestionsTagLo) > 0 {
		for iNdEx := len(m.QuestionsTagLo) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.QuestionsTagLo[iNdEx])
			copy(dAtA[i:], m.QuestionsTagLo[iNdEx])
			i = encodeVarintYscourses(dAtA, i, uint64(len(m.QuestionsTagLo[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYscourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYscourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.DifficultyLevel != 0 {
		i = encodeVarintYscourses(dAtA, i, uint64(m.DifficultyLevel))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Explanation) > 0 {
		i -= len(m.Explanation)
		copy(dAtA[i:], m.Explanation)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.Explanation)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Answers) > 0 {
		for iNdEx := len(m.Answers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Answers[iNdEx])
			copy(dAtA[i:], m.Answers[iNdEx])
			i = encodeVarintYscourses(dAtA, i, uint64(len(m.Answers[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Question) > 0 {
		i -= len(m.Question)
		copy(dAtA[i:], m.Question)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.Question)))
		i--
		dAtA[i] = 0x22
	}
	if m.Country != 0 {
		i = encodeVarintYscourses(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MasterQuestionId) > 0 {
		i -= len(m.MasterQuestionId)
		copy(dAtA[i:], m.MasterQuestionId)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.MasterQuestionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpsertQuestionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertQuestionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertQuestionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Questions) > 0 {
		for iNdEx := len(m.Questions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Questions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintYscourses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpsertQuestionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertQuestionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertQuestionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QuestionIds) > 0 {
		for iNdEx := len(m.QuestionIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.QuestionIds[iNdEx])
			copy(dAtA[i:], m.QuestionIds[iNdEx])
			i = encodeVarintYscourses(dAtA, i, uint64(len(m.QuestionIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UpsertLiveCourseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertLiveCourseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertLiveCourseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EndDate != nil {
		{
			size, err := m.EndDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYscourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.StartDate != nil {
		{
			size, err := m.StartDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYscourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Country != 0 {
		i = encodeVarintYscourses(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x40
	}
	if m.SchoolId != 0 {
		i = encodeVarintYscourses(dAtA, i, uint64(m.SchoolId))
		i--
		dAtA[i] = 0x38
	}
	if len(m.TeacherIds) > 0 {
		for iNdEx := len(m.TeacherIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TeacherIds[iNdEx])
			copy(dAtA[i:], m.TeacherIds[iNdEx])
			i = encodeVarintYscourses(dAtA, i, uint64(len(m.TeacherIds[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ClassIds) > 0 {
		dAtA9 := make([]byte, len(m.ClassIds)*10)
		var j8 int
		for _, num1 := range m.ClassIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintYscourses(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x2a
	}
	if m.Subject != 0 {
		i = encodeVarintYscourses(dAtA, i, uint64(m.Subject))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Grade) > 0 {
		i -= len(m.Grade)
		copy(dAtA[i:], m.Grade)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.Grade)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpsertLiveCourseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertLiveCourseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertLiveCourseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteLiveCourseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteLiveCourseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteLiveCourseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CourseIds) > 0 {
		for iNdEx := len(m.CourseIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.CourseIds[iNdEx])
			copy(dAtA[i:], m.CourseIds[iNdEx])
			i = encodeVarintYscourses(dAtA, i, uint64(len(m.CourseIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeleteLiveCourseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteLiveCourseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteLiveCourseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CreateLiveLessonRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateLiveLessonRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateLiveLessonRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Lessons) > 0 {
		for iNdEx := len(m.Lessons) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Lessons[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintYscourses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CourseId) > 0 {
		i -= len(m.CourseId)
		copy(dAtA[i:], m.CourseId)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.CourseId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateLiveLessonRequest_Lesson) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateLiveLessonRequest_Lesson) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateLiveLessonRequest_Lesson) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LessonGroup) > 0 {
		i -= len(m.LessonGroup)
		copy(dAtA[i:], m.LessonGroup)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.LessonGroup)))
		i--
		dAtA[i] = 0x3a
	}
	if m.ControlSettings != nil {
		{
			size, err := m.ControlSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYscourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Attachments) > 0 {
		for iNdEx := len(m.Attachments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attachments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintYscourses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.TeacherId) > 0 {
		i -= len(m.TeacherId)
		copy(dAtA[i:], m.TeacherId)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.TeacherId)))
		i--
		dAtA[i] = 0x22
	}
	if m.EndDate != nil {
		{
			size, err := m.EndDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYscourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.StartDate != nil {
		{
			size, err := m.StartDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYscourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateLiveLessonResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateLiveLessonResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateLiveLessonResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UpdateLiveLessonRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateLiveLessonRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateLiveLessonRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LessonGroup) > 0 {
		i -= len(m.LessonGroup)
		copy(dAtA[i:], m.LessonGroup)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.LessonGroup)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CourseId) > 0 {
		i -= len(m.CourseId)
		copy(dAtA[i:], m.CourseId)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.CourseId)))
		i--
		dAtA[i] = 0x42
	}
	if m.ControlSettings != nil {
		{
			size, err := m.ControlSettings.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYscourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Attachments) > 0 {
		for iNdEx := len(m.Attachments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attachments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintYscourses(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.TeacherId) > 0 {
		i -= len(m.TeacherId)
		copy(dAtA[i:], m.TeacherId)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.TeacherId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.EndDate != nil {
		{
			size, err := m.EndDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYscourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.StartDate != nil {
		{
			size, err := m.StartDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYscourses(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LessonId) > 0 {
		i -= len(m.LessonId)
		copy(dAtA[i:], m.LessonId)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.LessonId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateLiveLessonResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateLiveLessonResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateLiveLessonResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LessonId) > 0 {
		i -= len(m.LessonId)
		copy(dAtA[i:], m.LessonId)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.LessonId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteLiveLessonRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteLiveLessonRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteLiveLessonRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LessonIds) > 0 {
		for iNdEx := len(m.LessonIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LessonIds[iNdEx])
			copy(dAtA[i:], m.LessonIds[iNdEx])
			i = encodeVarintYscourses(dAtA, i, uint64(len(m.LessonIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DeleteLiveLessonResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteLiveLessonResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteLiveLessonResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Attachment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Attachment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Attachment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintYscourses(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ControlSettingLiveLesson) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ControlSettingLiveLesson) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ControlSettingLiveLesson) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UnmuteStudentAudioStatus != 0 {
		i = encodeVarintYscourses(dAtA, i, uint64(m.UnmuteStudentAudioStatus))
		i--
		dAtA[i] = 0x28
	}
	if m.PublishStudentVideoStatus != 0 {
		i = encodeVarintYscourses(dAtA, i, uint64(m.PublishStudentVideoStatus))
		i--
		dAtA[i] = 0x20
	}
	if m.DefaultView != 0 {
		i = encodeVarintYscourses(dAtA, i, uint64(m.DefaultView))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TeacherObversers) > 0 {
		for iNdEx := len(m.TeacherObversers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TeacherObversers[iNdEx])
			copy(dAtA[i:], m.TeacherObversers[iNdEx])
			i = encodeVarintYscourses(dAtA, i, uint64(len(m.TeacherObversers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Lectures) > 0 {
		for iNdEx := len(m.Lectures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Lectures[iNdEx])
			copy(dAtA[i:], m.Lectures[iNdEx])
			i = encodeVarintYscourses(dAtA, i, uint64(len(m.Lectures[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintYscourses(dAtA []byte, offset int, v uint64) int {
	offset -= sovYscourses(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Chapter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChapterId)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	l = len(m.ChapterName)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	if m.Country != 0 {
		n += 1 + sovYscourses(uint64(m.Country))
	}
	if m.Subject != 0 {
		n += 1 + sovYscourses(uint64(m.Subject))
	}
	l = len(m.Grade)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	if m.DisplayOrder != 0 {
		n += 1 + sovYscourses(uint64(m.DisplayOrder))
	}
	if m.SchoolId != 0 {
		n += 1 + sovYscourses(uint64(m.SchoolId))
	}
	return n
}

func (m *UpsertCoursesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Courses) > 0 {
		for _, e := range m.Courses {
			l = e.Size()
			n += 1 + l + sovYscourses(uint64(l))
		}
	}
	return n
}

func (m *UpsertCoursesRequest_Course) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	if m.Country != 0 {
		n += 1 + sovYscourses(uint64(m.Country))
	}
	if m.Subject != 0 {
		n += 1 + sovYscourses(uint64(m.Subject))
	}
	l = len(m.Grade)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	if m.DisplayOrder != 0 {
		n += 1 + sovYscourses(uint64(m.DisplayOrder))
	}
	if len(m.ChapterIds) > 0 {
		for _, s := range m.ChapterIds {
			l = len(s)
			n += 1 + l + sovYscourses(uint64(l))
		}
	}
	if m.SchoolId != 0 {
		n += 1 + sovYscourses(uint64(m.SchoolId))
	}
	if len(m.BookIds) > 0 {
		for _, s := range m.BookIds {
			l = len(s)
			n += 1 + l + sovYscourses(uint64(l))
		}
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	return n
}

func (m *UpsertCoursesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Successful {
		n += 2
	}
	return n
}

func (m *DeleteCoursesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CourseIds) > 0 {
		for _, s := range m.CourseIds {
			l = len(s)
			n += 1 + l + sovYscourses(uint64(l))
		}
	}
	return n
}

func (m *DeleteCoursesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Successful {
		n += 2
	}
	return n
}

func (m *CreateBrightCoveUploadUrlRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	return n
}

func (m *CreateBrightCoveUploadUrlResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SignedUrl)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	l = len(m.ApiRequestUrl)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	l = len(m.VideoId)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	return n
}

func (m *FinishUploadBrightCoveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ApiRequestUrl)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	l = len(m.VideoId)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	return n
}

func (m *FinishUploadBrightCoveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CoursesUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Req != nil {
		l = m.Req.Size()
		n += 1 + l + sovYscourses(uint64(l))
	}
	return n
}

func (m *UpsertCourseClassesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Successful {
		n += 2
	}
	return n
}

func (m *QuizSets) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LoId)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	l = len(m.QuestionId)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	l = len(m.DisplayOrder)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovYscourses(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovYscourses(uint64(l))
	}
	return n
}

func (m *UpsertQuizSetsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Quizsets) > 0 {
		for _, e := range m.Quizsets {
			l = e.Size()
			n += 1 + l + sovYscourses(uint64(l))
		}
	}
	return n
}

func (m *UpsertQuizSetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Successful {
		n += 2
	}
	return n
}

func (m *QuestionV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	l = len(m.MasterQuestionId)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	if m.Country != 0 {
		n += 1 + sovYscourses(uint64(m.Country))
	}
	l = len(m.Question)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	if len(m.Answers) > 0 {
		for _, s := range m.Answers {
			l = len(s)
			n += 1 + l + sovYscourses(uint64(l))
		}
	}
	l = len(m.Explanation)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	if m.DifficultyLevel != 0 {
		n += 1 + sovYscourses(uint64(m.DifficultyLevel))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovYscourses(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovYscourses(uint64(l))
	}
	if len(m.QuestionsTagLo) > 0 {
		for _, s := range m.QuestionsTagLo {
			l = len(s)
			n += 1 + l + sovYscourses(uint64(l))
		}
	}
	l = len(m.QuestionUrl)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	if len(m.AnswersUrl) > 0 {
		for _, s := range m.AnswersUrl {
			l = len(s)
			n += 1 + l + sovYscourses(uint64(l))
		}
	}
	l = len(m.ExplanationUrl)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	if len(m.ExplanationWrongAnswer) > 0 {
		for _, s := range m.ExplanationWrongAnswer {
			l = len(s)
			n += 1 + l + sovYscourses(uint64(l))
		}
	}
	if len(m.ExplanationWrongAnswerUrl) > 0 {
		for _, s := range m.ExplanationWrongAnswerUrl {
			l = len(s)
			n += 1 + l + sovYscourses(uint64(l))
		}
	}
	if m.IsWaitingForRender {
		n += 3
	}
	return n
}

func (m *UpsertQuestionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Questions) > 0 {
		for _, e := range m.Questions {
			l = e.Size()
			n += 1 + l + sovYscourses(uint64(l))
		}
	}
	return n
}

func (m *UpsertQuestionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.QuestionIds) > 0 {
		for _, s := range m.QuestionIds {
			l = len(s)
			n += 1 + l + sovYscourses(uint64(l))
		}
	}
	return n
}

func (m *UpsertLiveCourseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	l = len(m.Grade)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	if m.Subject != 0 {
		n += 1 + sovYscourses(uint64(m.Subject))
	}
	if len(m.ClassIds) > 0 {
		l = 0
		for _, e := range m.ClassIds {
			l += sovYscourses(uint64(e))
		}
		n += 1 + sovYscourses(uint64(l)) + l
	}
	if len(m.TeacherIds) > 0 {
		for _, s := range m.TeacherIds {
			l = len(s)
			n += 1 + l + sovYscourses(uint64(l))
		}
	}
	if m.SchoolId != 0 {
		n += 1 + sovYscourses(uint64(m.SchoolId))
	}
	if m.Country != 0 {
		n += 1 + sovYscourses(uint64(m.Country))
	}
	if m.StartDate != nil {
		l = m.StartDate.Size()
		n += 1 + l + sovYscourses(uint64(l))
	}
	if m.EndDate != nil {
		l = m.EndDate.Size()
		n += 1 + l + sovYscourses(uint64(l))
	}
	return n
}

func (m *UpsertLiveCourseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	return n
}

func (m *DeleteLiveCourseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CourseIds) > 0 {
		for _, s := range m.CourseIds {
			l = len(s)
			n += 1 + l + sovYscourses(uint64(l))
		}
	}
	return n
}

func (m *DeleteLiveCourseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CreateLiveLessonRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CourseId)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	if len(m.Lessons) > 0 {
		for _, e := range m.Lessons {
			l = e.Size()
			n += 1 + l + sovYscourses(uint64(l))
		}
	}
	return n
}

func (m *CreateLiveLessonRequest_Lesson) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	if m.StartDate != nil {
		l = m.StartDate.Size()
		n += 1 + l + sovYscourses(uint64(l))
	}
	if m.EndDate != nil {
		l = m.EndDate.Size()
		n += 1 + l + sovYscourses(uint64(l))
	}
	l = len(m.TeacherId)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	if len(m.Attachments) > 0 {
		for _, e := range m.Attachments {
			l = e.Size()
			n += 1 + l + sovYscourses(uint64(l))
		}
	}
	if m.ControlSettings != nil {
		l = m.ControlSettings.Size()
		n += 1 + l + sovYscourses(uint64(l))
	}
	l = len(m.LessonGroup)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	return n
}

func (m *CreateLiveLessonResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpdateLiveLessonRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LessonId)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	if m.StartDate != nil {
		l = m.StartDate.Size()
		n += 1 + l + sovYscourses(uint64(l))
	}
	if m.EndDate != nil {
		l = m.EndDate.Size()
		n += 1 + l + sovYscourses(uint64(l))
	}
	l = len(m.TeacherId)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	if len(m.Attachments) > 0 {
		for _, e := range m.Attachments {
			l = e.Size()
			n += 1 + l + sovYscourses(uint64(l))
		}
	}
	if m.ControlSettings != nil {
		l = m.ControlSettings.Size()
		n += 1 + l + sovYscourses(uint64(l))
	}
	l = len(m.CourseId)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	l = len(m.LessonGroup)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	return n
}

func (m *UpdateLiveLessonResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LessonId)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	return n
}

func (m *DeleteLiveLessonRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LessonIds) > 0 {
		for _, s := range m.LessonIds {
			l = len(s)
			n += 1 + l + sovYscourses(uint64(l))
		}
	}
	return n
}

func (m *DeleteLiveLessonResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Attachment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovYscourses(uint64(l))
	}
	return n
}

func (m *ControlSettingLiveLesson) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Lectures) > 0 {
		for _, s := range m.Lectures {
			l = len(s)
			n += 1 + l + sovYscourses(uint64(l))
		}
	}
	if len(m.TeacherObversers) > 0 {
		for _, s := range m.TeacherObversers {
			l = len(s)
			n += 1 + l + sovYscourses(uint64(l))
		}
	}
	if m.DefaultView != 0 {
		n += 1 + sovYscourses(uint64(m.DefaultView))
	}
	if m.PublishStudentVideoStatus != 0 {
		n += 1 + sovYscourses(uint64(m.PublishStudentVideoStatus))
	}
	if m.UnmuteStudentAudioStatus != 0 {
		n += 1 + sovYscourses(uint64(m.UnmuteStudentAudioStatus))
	}
	return n
}

func sovYscourses(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozYscourses(x uint64) (n int) {
	return sovYscourses(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Chapter) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Chapter{`,
		`ChapterId:` + fmt.Sprintf("%v", this.ChapterId) + `,`,
		`ChapterName:` + fmt.Sprintf("%v", this.ChapterName) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`Subject:` + fmt.Sprintf("%v", this.Subject) + `,`,
		`Grade:` + fmt.Sprintf("%v", this.Grade) + `,`,
		`DisplayOrder:` + fmt.Sprintf("%v", this.DisplayOrder) + `,`,
		`SchoolId:` + fmt.Sprintf("%v", this.SchoolId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertCoursesRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCourses := "[]*UpsertCoursesRequest_Course{"
	for _, f := range this.Courses {
		repeatedStringForCourses += strings.Replace(fmt.Sprintf("%v", f), "UpsertCoursesRequest_Course", "UpsertCoursesRequest_Course", 1) + ","
	}
	repeatedStringForCourses += "}"
	s := strings.Join([]string{`&UpsertCoursesRequest{`,
		`Courses:` + repeatedStringForCourses + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertCoursesRequest_Course) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpsertCoursesRequest_Course{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`Subject:` + fmt.Sprintf("%v", this.Subject) + `,`,
		`Grade:` + fmt.Sprintf("%v", this.Grade) + `,`,
		`DisplayOrder:` + fmt.Sprintf("%v", this.DisplayOrder) + `,`,
		`ChapterIds:` + fmt.Sprintf("%v", this.ChapterIds) + `,`,
		`SchoolId:` + fmt.Sprintf("%v", this.SchoolId) + `,`,
		`BookIds:` + fmt.Sprintf("%v", this.BookIds) + `,`,
		`Icon:` + fmt.Sprintf("%v", this.Icon) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertCoursesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpsertCoursesResponse{`,
		`Successful:` + fmt.Sprintf("%v", this.Successful) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteCoursesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteCoursesRequest{`,
		`CourseIds:` + fmt.Sprintf("%v", this.CourseIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteCoursesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteCoursesResponse{`,
		`Successful:` + fmt.Sprintf("%v", this.Successful) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateBrightCoveUploadUrlRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateBrightCoveUploadUrlRequest{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateBrightCoveUploadUrlResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateBrightCoveUploadUrlResponse{`,
		`SignedUrl:` + fmt.Sprintf("%v", this.SignedUrl) + `,`,
		`ApiRequestUrl:` + fmt.Sprintf("%v", this.ApiRequestUrl) + `,`,
		`VideoId:` + fmt.Sprintf("%v", this.VideoId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FinishUploadBrightCoveRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FinishUploadBrightCoveRequest{`,
		`ApiRequestUrl:` + fmt.Sprintf("%v", this.ApiRequestUrl) + `,`,
		`VideoId:` + fmt.Sprintf("%v", this.VideoId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FinishUploadBrightCoveResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FinishUploadBrightCoveResponse{`,
		`}`,
	}, "")
	return s
}
func (this *CoursesUpdated) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CoursesUpdated{`,
		`Req:` + strings.Replace(this.Req.String(), "UpsertCoursesRequest", "UpsertCoursesRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertCourseClassesResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpsertCourseClassesResponse{`,
		`Successful:` + fmt.Sprintf("%v", this.Successful) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QuizSets) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QuizSets{`,
		`LoId:` + fmt.Sprintf("%v", this.LoId) + `,`,
		`QuestionId:` + fmt.Sprintf("%v", this.QuestionId) + `,`,
		`DisplayOrder:` + fmt.Sprintf("%v", this.DisplayOrder) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertQuizSetsRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForQuizsets := "[]*QuizSets{"
	for _, f := range this.Quizsets {
		repeatedStringForQuizsets += strings.Replace(f.String(), "QuizSets", "QuizSets", 1) + ","
	}
	repeatedStringForQuizsets += "}"
	s := strings.Join([]string{`&UpsertQuizSetsRequest{`,
		`Quizsets:` + repeatedStringForQuizsets + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertQuizSetsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpsertQuizSetsResponse{`,
		`Successful:` + fmt.Sprintf("%v", this.Successful) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QuestionV2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QuestionV2{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`MasterQuestionId:` + fmt.Sprintf("%v", this.MasterQuestionId) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`Question:` + fmt.Sprintf("%v", this.Question) + `,`,
		`Answers:` + fmt.Sprintf("%v", this.Answers) + `,`,
		`Explanation:` + fmt.Sprintf("%v", this.Explanation) + `,`,
		`DifficultyLevel:` + fmt.Sprintf("%v", this.DifficultyLevel) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`QuestionsTagLo:` + fmt.Sprintf("%v", this.QuestionsTagLo) + `,`,
		`QuestionUrl:` + fmt.Sprintf("%v", this.QuestionUrl) + `,`,
		`AnswersUrl:` + fmt.Sprintf("%v", this.AnswersUrl) + `,`,
		`ExplanationUrl:` + fmt.Sprintf("%v", this.ExplanationUrl) + `,`,
		`ExplanationWrongAnswer:` + fmt.Sprintf("%v", this.ExplanationWrongAnswer) + `,`,
		`ExplanationWrongAnswerUrl:` + fmt.Sprintf("%v", this.ExplanationWrongAnswerUrl) + `,`,
		`IsWaitingForRender:` + fmt.Sprintf("%v", this.IsWaitingForRender) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertQuestionsRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForQuestions := "[]*QuestionV2{"
	for _, f := range this.Questions {
		repeatedStringForQuestions += strings.Replace(f.String(), "QuestionV2", "QuestionV2", 1) + ","
	}
	repeatedStringForQuestions += "}"
	s := strings.Join([]string{`&UpsertQuestionsRequest{`,
		`Questions:` + repeatedStringForQuestions + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertQuestionsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpsertQuestionsResponse{`,
		`QuestionIds:` + fmt.Sprintf("%v", this.QuestionIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertLiveCourseRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpsertLiveCourseRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Grade:` + fmt.Sprintf("%v", this.Grade) + `,`,
		`Subject:` + fmt.Sprintf("%v", this.Subject) + `,`,
		`ClassIds:` + fmt.Sprintf("%v", this.ClassIds) + `,`,
		`TeacherIds:` + fmt.Sprintf("%v", this.TeacherIds) + `,`,
		`SchoolId:` + fmt.Sprintf("%v", this.SchoolId) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`StartDate:` + strings.Replace(fmt.Sprintf("%v", this.StartDate), "Timestamp", "types.Timestamp", 1) + `,`,
		`EndDate:` + strings.Replace(fmt.Sprintf("%v", this.EndDate), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpsertLiveCourseResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpsertLiveCourseResponse{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteLiveCourseRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteLiveCourseRequest{`,
		`CourseIds:` + fmt.Sprintf("%v", this.CourseIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteLiveCourseResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteLiveCourseResponse{`,
		`}`,
	}, "")
	return s
}
func (this *CreateLiveLessonRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForLessons := "[]*CreateLiveLessonRequest_Lesson{"
	for _, f := range this.Lessons {
		repeatedStringForLessons += strings.Replace(fmt.Sprintf("%v", f), "CreateLiveLessonRequest_Lesson", "CreateLiveLessonRequest_Lesson", 1) + ","
	}
	repeatedStringForLessons += "}"
	s := strings.Join([]string{`&CreateLiveLessonRequest{`,
		`CourseId:` + fmt.Sprintf("%v", this.CourseId) + `,`,
		`Lessons:` + repeatedStringForLessons + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateLiveLessonRequest_Lesson) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAttachments := "[]*Attachment{"
	for _, f := range this.Attachments {
		repeatedStringForAttachments += strings.Replace(f.String(), "Attachment", "Attachment", 1) + ","
	}
	repeatedStringForAttachments += "}"
	s := strings.Join([]string{`&CreateLiveLessonRequest_Lesson{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`StartDate:` + strings.Replace(fmt.Sprintf("%v", this.StartDate), "Timestamp", "types.Timestamp", 1) + `,`,
		`EndDate:` + strings.Replace(fmt.Sprintf("%v", this.EndDate), "Timestamp", "types.Timestamp", 1) + `,`,
		`TeacherId:` + fmt.Sprintf("%v", this.TeacherId) + `,`,
		`Attachments:` + repeatedStringForAttachments + `,`,
		`ControlSettings:` + strings.Replace(this.ControlSettings.String(), "ControlSettingLiveLesson", "ControlSettingLiveLesson", 1) + `,`,
		`LessonGroup:` + fmt.Sprintf("%v", this.LessonGroup) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateLiveLessonResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateLiveLessonResponse{`,
		`}`,
	}, "")
	return s
}
func (this *UpdateLiveLessonRequest) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAttachments := "[]*Attachment{"
	for _, f := range this.Attachments {
		repeatedStringForAttachments += strings.Replace(f.String(), "Attachment", "Attachment", 1) + ","
	}
	repeatedStringForAttachments += "}"
	s := strings.Join([]string{`&UpdateLiveLessonRequest{`,
		`LessonId:` + fmt.Sprintf("%v", this.LessonId) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`StartDate:` + strings.Replace(fmt.Sprintf("%v", this.StartDate), "Timestamp", "types.Timestamp", 1) + `,`,
		`EndDate:` + strings.Replace(fmt.Sprintf("%v", this.EndDate), "Timestamp", "types.Timestamp", 1) + `,`,
		`TeacherId:` + fmt.Sprintf("%v", this.TeacherId) + `,`,
		`Attachments:` + repeatedStringForAttachments + `,`,
		`ControlSettings:` + strings.Replace(this.ControlSettings.String(), "ControlSettingLiveLesson", "ControlSettingLiveLesson", 1) + `,`,
		`CourseId:` + fmt.Sprintf("%v", this.CourseId) + `,`,
		`LessonGroup:` + fmt.Sprintf("%v", this.LessonGroup) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateLiveLessonResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateLiveLessonResponse{`,
		`LessonId:` + fmt.Sprintf("%v", this.LessonId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteLiveLessonRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteLiveLessonRequest{`,
		`LessonIds:` + fmt.Sprintf("%v", this.LessonIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteLiveLessonResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteLiveLessonResponse{`,
		`}`,
	}, "")
	return s
}
func (this *Attachment) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Attachment{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Url:` + fmt.Sprintf("%v", this.Url) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ControlSettingLiveLesson) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ControlSettingLiveLesson{`,
		`Lectures:` + fmt.Sprintf("%v", this.Lectures) + `,`,
		`TeacherObversers:` + fmt.Sprintf("%v", this.TeacherObversers) + `,`,
		`DefaultView:` + fmt.Sprintf("%v", this.DefaultView) + `,`,
		`PublishStudentVideoStatus:` + fmt.Sprintf("%v", this.PublishStudentVideoStatus) + `,`,
		`UnmuteStudentAudioStatus:` + fmt.Sprintf("%v", this.UnmuteStudentAudioStatus) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringYscourses(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Chapter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYscourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Chapter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Chapter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChapterId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChapterId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChapterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChapterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= bob.Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			m.Subject = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subject |= bob.Subject(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grade = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayOrder", wireType)
			}
			m.DisplayOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisplayOrder |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchoolId", wireType)
			}
			m.SchoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchoolId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipYscourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYscourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertCoursesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYscourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertCoursesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertCoursesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Courses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Courses = append(m.Courses, &UpsertCoursesRequest_Course{})
			if err := m.Courses[len(m.Courses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYscourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYscourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertCoursesRequest_Course) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYscourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Course: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Course: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= bob.Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			m.Subject = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subject |= bob.Subject(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grade = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayOrder", wireType)
			}
			m.DisplayOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisplayOrder |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChapterIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChapterIds = append(m.ChapterIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchoolId", wireType)
			}
			m.SchoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchoolId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BookIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BookIds = append(m.BookIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYscourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYscourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertCoursesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYscourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertCoursesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertCoursesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Successful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Successful = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipYscourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYscourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteCoursesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYscourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteCoursesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteCoursesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseIds = append(m.CourseIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYscourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYscourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteCoursesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYscourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteCoursesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteCoursesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Successful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Successful = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipYscourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYscourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateBrightCoveUploadUrlRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYscourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateBrightCoveUploadUrlRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateBrightCoveUploadUrlRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYscourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYscourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateBrightCoveUploadUrlResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYscourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateBrightCoveUploadUrlResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateBrightCoveUploadUrlResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignedUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiRequestUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiRequestUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VideoId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYscourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYscourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinishUploadBrightCoveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYscourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinishUploadBrightCoveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinishUploadBrightCoveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiRequestUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiRequestUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VideoId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYscourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYscourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FinishUploadBrightCoveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYscourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FinishUploadBrightCoveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FinishUploadBrightCoveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipYscourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYscourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoursesUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYscourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoursesUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoursesUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Req", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Req == nil {
				m.Req = &UpsertCoursesRequest{}
			}
			if err := m.Req.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYscourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYscourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertCourseClassesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYscourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertCourseClassesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertCourseClassesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Successful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Successful = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipYscourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYscourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuizSets) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYscourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuizSets: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuizSets: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuestionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayOrder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayOrder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYscourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYscourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertQuizSetsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYscourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertQuizSetsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertQuizSetsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quizsets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Quizsets = append(m.Quizsets, &QuizSets{})
			if err := m.Quizsets[len(m.Quizsets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYscourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYscourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertQuizSetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYscourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertQuizSetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertQuizSetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Successful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Successful = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipYscourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYscourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuestionV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYscourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuestionV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuestionV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterQuestionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterQuestionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= bob.Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Question", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Question = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Answers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Answers = append(m.Answers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Explanation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Explanation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DifficultyLevel", wireType)
			}
			m.DifficultyLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DifficultyLevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestionsTagLo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuestionsTagLo = append(m.QuestionsTagLo, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestionUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuestionUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnswersUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnswersUrl = append(m.AnswersUrl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExplanationUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExplanationUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExplanationWrongAnswer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExplanationWrongAnswer = append(m.ExplanationWrongAnswer, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExplanationWrongAnswerUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExplanationWrongAnswerUrl = append(m.ExplanationWrongAnswerUrl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWaitingForRender", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWaitingForRender = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipYscourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYscourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertQuestionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYscourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertQuestionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertQuestionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Questions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Questions = append(m.Questions, &QuestionV2{})
			if err := m.Questions[len(m.Questions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYscourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYscourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertQuestionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYscourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertQuestionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertQuestionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestionIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuestionIds = append(m.QuestionIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYscourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYscourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertLiveCourseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYscourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertLiveCourseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertLiveCourseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grade", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Grade = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			m.Subject = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Subject |= bob.Subject(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowYscourses
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ClassIds = append(m.ClassIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowYscourses
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthYscourses
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthYscourses
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ClassIds) == 0 {
					m.ClassIds = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowYscourses
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ClassIds = append(m.ClassIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassIds", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeacherIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeacherIds = append(m.TeacherIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchoolId", wireType)
			}
			m.SchoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchoolId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= bob.Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartDate == nil {
				m.StartDate = &types.Timestamp{}
			}
			if err := m.StartDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndDate == nil {
				m.EndDate = &types.Timestamp{}
			}
			if err := m.EndDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYscourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYscourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertLiveCourseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYscourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertLiveCourseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertLiveCourseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYscourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYscourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteLiveCourseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYscourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteLiveCourseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteLiveCourseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseIds = append(m.CourseIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYscourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYscourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteLiveCourseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYscourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteLiveCourseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteLiveCourseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipYscourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYscourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateLiveLessonRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYscourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateLiveLessonRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateLiveLessonRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lessons", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lessons = append(m.Lessons, &CreateLiveLessonRequest_Lesson{})
			if err := m.Lessons[len(m.Lessons)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYscourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYscourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateLiveLessonRequest_Lesson) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYscourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Lesson: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Lesson: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartDate == nil {
				m.StartDate = &types.Timestamp{}
			}
			if err := m.StartDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndDate == nil {
				m.EndDate = &types.Timestamp{}
			}
			if err := m.EndDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeacherId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeacherId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attachments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attachments = append(m.Attachments, &Attachment{})
			if err := m.Attachments[len(m.Attachments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ControlSettings == nil {
				m.ControlSettings = &ControlSettingLiveLesson{}
			}
			if err := m.ControlSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LessonGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LessonGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYscourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYscourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateLiveLessonResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYscourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateLiveLessonResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateLiveLessonResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipYscourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYscourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateLiveLessonRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYscourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateLiveLessonRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateLiveLessonRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LessonId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LessonId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartDate == nil {
				m.StartDate = &types.Timestamp{}
			}
			if err := m.StartDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndDate == nil {
				m.EndDate = &types.Timestamp{}
			}
			if err := m.EndDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeacherId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeacherId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attachments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attachments = append(m.Attachments, &Attachment{})
			if err := m.Attachments[len(m.Attachments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ControlSettings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ControlSettings == nil {
				m.ControlSettings = &ControlSettingLiveLesson{}
			}
			if err := m.ControlSettings.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CourseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CourseId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LessonGroup", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LessonGroup = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYscourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYscourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateLiveLessonResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYscourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateLiveLessonResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateLiveLessonResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LessonId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LessonId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYscourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYscourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteLiveLessonRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYscourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteLiveLessonRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteLiveLessonRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LessonIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LessonIds = append(m.LessonIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYscourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYscourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteLiveLessonResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYscourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteLiveLessonResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteLiveLessonResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipYscourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYscourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Attachment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYscourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attachment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attachment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYscourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYscourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ControlSettingLiveLesson) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYscourses
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ControlSettingLiveLesson: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ControlSettingLiveLesson: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lectures", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lectures = append(m.Lectures, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeacherObversers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYscourses
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYscourses
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeacherObversers = append(m.TeacherObversers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultView", wireType)
			}
			m.DefaultView = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultView |= bob.LiveLessonView(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublishStudentVideoStatus", wireType)
			}
			m.PublishStudentVideoStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublishStudentVideoStatus |= bob.PublishStudentVideoStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnmuteStudentAudioStatus", wireType)
			}
			m.UnmuteStudentAudioStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnmuteStudentAudioStatus |= bob.UnmuteStudentAudioStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipYscourses(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYscourses
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipYscourses(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowYscourses
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowYscourses
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthYscourses
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupYscourses
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthYscourses
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthYscourses        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowYscourses          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupYscourses = fmt.Errorf("proto: unexpected end of group")
)
