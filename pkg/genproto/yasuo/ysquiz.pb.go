// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ysquiz.proto

package pb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	bob "github.com/manabie-com/backend/pkg/genproto/bob"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QuizType int32

const (
	QUIZ_TYPE_MCQ QuizType = 0
	QUIZ_TYPE_FIB QuizType = 1
	QUIZ_TYPE_POW QuizType = 2
	QUIZ_TYPE_TAD QuizType = 3
	QUIZ_TYPE_MIQ QuizType = 4
	QUIZ_TYPE_MAQ QuizType = 5
)

var QuizType_name = map[int32]string{
	0: "QUIZ_TYPE_MCQ",
	1: "QUIZ_TYPE_FIB",
	2: "QUIZ_TYPE_POW",
	3: "QUIZ_TYPE_TAD",
	4: "QUIZ_TYPE_MIQ",
	5: "QUIZ_TYPE_MAQ",
}

var QuizType_value = map[string]int32{
	"QUIZ_TYPE_MCQ": 0,
	"QUIZ_TYPE_FIB": 1,
	"QUIZ_TYPE_POW": 2,
	"QUIZ_TYPE_TAD": 3,
	"QUIZ_TYPE_MIQ": 4,
	"QUIZ_TYPE_MAQ": 5,
}

func (QuizType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1b6b43aff10577b7, []int{0}
}

type QuizStatus int32

const (
	QUIZ_STATUS_NEW      QuizStatus = 0
	QUIZ_STATUS_APPROVED QuizStatus = 1
	QUIZ_STATUS_DELETED  QuizStatus = 2
)

var QuizStatus_name = map[int32]string{
	0: "QUIZ_STATUS_NEW",
	1: "QUIZ_STATUS_APPROVED",
	2: "QUIZ_STATUS_DELETED",
}

var QuizStatus_value = map[string]int32{
	"QUIZ_STATUS_NEW":      0,
	"QUIZ_STATUS_APPROVED": 1,
	"QUIZ_STATUS_DELETED":  2,
}

func (QuizStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1b6b43aff10577b7, []int{1}
}

type QuizSetStatus int32

const (
	QUIZSET_STATUS_NEW      QuizSetStatus = 0
	QUIZSET_STATUS_APPROVED QuizSetStatus = 1
	QUIZSET_STATUS_DELETED  QuizSetStatus = 2
)

var QuizSetStatus_name = map[int32]string{
	0: "QUIZSET_STATUS_NEW",
	1: "QUIZSET_STATUS_APPROVED",
	2: "QUIZSET_STATUS_DELETED",
}

var QuizSetStatus_value = map[string]int32{
	"QUIZSET_STATUS_NEW":      0,
	"QUIZSET_STATUS_APPROVED": 1,
	"QUIZSET_STATUS_DELETED":  2,
}

func (QuizSetStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1b6b43aff10577b7, []int{2}
}

type QuizOptionConfig int32

const (
	QUIZ_OPTION_CONFIG_CASE_SENSITIVE QuizOptionConfig = 0
	QUIZ_OPTION_CONFIG_PARTIAL_CREDIT QuizOptionConfig = 1
	QUIZ_OPTION_CONFIG_PLAN_LIST      QuizOptionConfig = 2
)

var QuizOptionConfig_name = map[int32]string{
	0: "QUIZ_OPTION_CONFIG_CASE_SENSITIVE",
	1: "QUIZ_OPTION_CONFIG_PARTIAL_CREDIT",
	2: "QUIZ_OPTION_CONFIG_PLAN_LIST",
}

var QuizOptionConfig_value = map[string]int32{
	"QUIZ_OPTION_CONFIG_CASE_SENSITIVE": 0,
	"QUIZ_OPTION_CONFIG_PARTIAL_CREDIT": 1,
	"QUIZ_OPTION_CONFIG_PLAN_LIST":      2,
}

func (QuizOptionConfig) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1b6b43aff10577b7, []int{3}
}

type QuizConfig int32

const (
	QUIZ_CONFIG_OPTIONS_PLAIN_LIST QuizConfig = 0
)

var QuizConfig_name = map[int32]string{
	0: "QUIZ_CONFIG_OPTIONS_PLAIN_LIST",
}

var QuizConfig_value = map[string]int32{
	"QUIZ_CONFIG_OPTIONS_PLAIN_LIST": 0,
}

func (QuizConfig) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1b6b43aff10577b7, []int{4}
}

type RichText struct {
	Raw      string `protobuf:"bytes,1,opt,name=raw,proto3" json:"raw,omitempty"`
	Rendered string `protobuf:"bytes,2,opt,name=rendered,proto3" json:"rendered,omitempty"`
}

func (m *RichText) Reset()      { *m = RichText{} }
func (*RichText) ProtoMessage() {}
func (*RichText) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b6b43aff10577b7, []int{0}
}
func (m *RichText) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RichText) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RichText.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RichText) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RichText.Merge(m, src)
}
func (m *RichText) XXX_Size() int {
	return m.Size()
}
func (m *RichText) XXX_DiscardUnknown() {
	xxx_messageInfo_RichText.DiscardUnknown(m)
}

var xxx_messageInfo_RichText proto.InternalMessageInfo

func (m *RichText) GetRaw() string {
	if m != nil {
		return m.Raw
	}
	return ""
}

func (m *RichText) GetRendered() string {
	if m != nil {
		return m.Rendered
	}
	return ""
}

type QuizOption struct {
	Content     *RichText          `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Correctness bool               `protobuf:"varint,2,opt,name=correctness,proto3" json:"correctness,omitempty"`
	Configs     []QuizOptionConfig `protobuf:"varint,3,rep,packed,name=configs,proto3,enum=manabie.yasuo.QuizOptionConfig" json:"configs,omitempty"`
	Label       string             `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
	Key         string             `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *QuizOption) Reset()      { *m = QuizOption{} }
func (*QuizOption) ProtoMessage() {}
func (*QuizOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b6b43aff10577b7, []int{1}
}
func (m *QuizOption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuizOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuizOption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuizOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuizOption.Merge(m, src)
}
func (m *QuizOption) XXX_Size() int {
	return m.Size()
}
func (m *QuizOption) XXX_DiscardUnknown() {
	xxx_messageInfo_QuizOption.DiscardUnknown(m)
}

var xxx_messageInfo_QuizOption proto.InternalMessageInfo

func (m *QuizOption) GetContent() *RichText {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *QuizOption) GetCorrectness() bool {
	if m != nil {
		return m.Correctness
	}
	return false
}

func (m *QuizOption) GetConfigs() []QuizOptionConfig {
	if m != nil {
		return m.Configs
	}
	return nil
}

func (m *QuizOption) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *QuizOption) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type QuizCore struct {
	ExternalId      string        `protobuf:"bytes,1,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	Kind            QuizType      `protobuf:"varint,2,opt,name=kind,proto3,enum=manabie.yasuo.QuizType" json:"kind,omitempty"`
	SchoolId        int32         `protobuf:"varint,3,opt,name=school_id,json=schoolId,proto3" json:"school_id,omitempty"`
	Country         bob.Country   `protobuf:"varint,4,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"`
	Question        *RichText     `protobuf:"bytes,5,opt,name=question,proto3" json:"question,omitempty"`
	Explanation     *RichText     `protobuf:"bytes,6,opt,name=explanation,proto3" json:"explanation,omitempty"`
	TaggedLos       []string      `protobuf:"bytes,7,rep,name=tagged_los,json=taggedLos,proto3" json:"tagged_los,omitempty"`
	DifficultyLevel int32         `protobuf:"varint,8,opt,name=difficulty_level,json=difficultyLevel,proto3" json:"difficulty_level,omitempty"`
	Options         []*QuizOption `protobuf:"bytes,9,rep,name=options,proto3" json:"options,omitempty"`
	Config          []QuizConfig  `protobuf:"varint,10,rep,packed,name=config,proto3,enum=manabie.yasuo.QuizConfig" json:"config,omitempty"`
}

func (m *QuizCore) Reset()      { *m = QuizCore{} }
func (*QuizCore) ProtoMessage() {}
func (*QuizCore) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b6b43aff10577b7, []int{2}
}
func (m *QuizCore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuizCore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuizCore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuizCore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuizCore.Merge(m, src)
}
func (m *QuizCore) XXX_Size() int {
	return m.Size()
}
func (m *QuizCore) XXX_DiscardUnknown() {
	xxx_messageInfo_QuizCore.DiscardUnknown(m)
}

var xxx_messageInfo_QuizCore proto.InternalMessageInfo

func (m *QuizCore) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

func (m *QuizCore) GetKind() QuizType {
	if m != nil {
		return m.Kind
	}
	return QUIZ_TYPE_MCQ
}

func (m *QuizCore) GetSchoolId() int32 {
	if m != nil {
		return m.SchoolId
	}
	return 0
}

func (m *QuizCore) GetCountry() bob.Country {
	if m != nil {
		return m.Country
	}
	return bob.COUNTRY_NONE
}

func (m *QuizCore) GetQuestion() *RichText {
	if m != nil {
		return m.Question
	}
	return nil
}

func (m *QuizCore) GetExplanation() *RichText {
	if m != nil {
		return m.Explanation
	}
	return nil
}

func (m *QuizCore) GetTaggedLos() []string {
	if m != nil {
		return m.TaggedLos
	}
	return nil
}

func (m *QuizCore) GetDifficultyLevel() int32 {
	if m != nil {
		return m.DifficultyLevel
	}
	return 0
}

func (m *QuizCore) GetOptions() []*QuizOption {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *QuizCore) GetConfig() []QuizConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

type Quiz struct {
	Core           *QuizCore        `protobuf:"bytes,1,opt,name=core,proto3" json:"core,omitempty"`
	QuestionUrl    string           `protobuf:"bytes,2,opt,name=question_url,json=questionUrl,proto3" json:"question_url,omitempty"`
	AnswersUrl     []string         `protobuf:"bytes,3,rep,name=answers_url,json=answersUrl,proto3" json:"answers_url,omitempty"`
	ExplanationUrl string           `protobuf:"bytes,4,opt,name=explanation_url,json=explanationUrl,proto3" json:"explanation_url,omitempty"`
	Status         QuizStatus       `protobuf:"varint,5,opt,name=status,proto3,enum=manabie.yasuo.QuizStatus" json:"status,omitempty"`
	UpdatedAt      *types.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt      *types.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *Quiz) Reset()      { *m = Quiz{} }
func (*Quiz) ProtoMessage() {}
func (*Quiz) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b6b43aff10577b7, []int{3}
}
func (m *Quiz) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Quiz) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Quiz.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Quiz) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Quiz.Merge(m, src)
}
func (m *Quiz) XXX_Size() int {
	return m.Size()
}
func (m *Quiz) XXX_DiscardUnknown() {
	xxx_messageInfo_Quiz.DiscardUnknown(m)
}

var xxx_messageInfo_Quiz proto.InternalMessageInfo

func (m *Quiz) GetCore() *QuizCore {
	if m != nil {
		return m.Core
	}
	return nil
}

func (m *Quiz) GetQuestionUrl() string {
	if m != nil {
		return m.QuestionUrl
	}
	return ""
}

func (m *Quiz) GetAnswersUrl() []string {
	if m != nil {
		return m.AnswersUrl
	}
	return nil
}

func (m *Quiz) GetExplanationUrl() string {
	if m != nil {
		return m.ExplanationUrl
	}
	return ""
}

func (m *Quiz) GetStatus() QuizStatus {
	if m != nil {
		return m.Status
	}
	return QUIZ_STATUS_NEW
}

func (m *Quiz) GetUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Quiz) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func init() {
	proto.RegisterEnum("manabie.yasuo.QuizType", QuizType_name, QuizType_value)
	golang_proto.RegisterEnum("manabie.yasuo.QuizType", QuizType_name, QuizType_value)
	proto.RegisterEnum("manabie.yasuo.QuizStatus", QuizStatus_name, QuizStatus_value)
	golang_proto.RegisterEnum("manabie.yasuo.QuizStatus", QuizStatus_name, QuizStatus_value)
	proto.RegisterEnum("manabie.yasuo.QuizSetStatus", QuizSetStatus_name, QuizSetStatus_value)
	golang_proto.RegisterEnum("manabie.yasuo.QuizSetStatus", QuizSetStatus_name, QuizSetStatus_value)
	proto.RegisterEnum("manabie.yasuo.QuizOptionConfig", QuizOptionConfig_name, QuizOptionConfig_value)
	golang_proto.RegisterEnum("manabie.yasuo.QuizOptionConfig", QuizOptionConfig_name, QuizOptionConfig_value)
	proto.RegisterEnum("manabie.yasuo.QuizConfig", QuizConfig_name, QuizConfig_value)
	golang_proto.RegisterEnum("manabie.yasuo.QuizConfig", QuizConfig_name, QuizConfig_value)
	proto.RegisterType((*RichText)(nil), "manabie.yasuo.RichText")
	golang_proto.RegisterType((*RichText)(nil), "manabie.yasuo.RichText")
	proto.RegisterType((*QuizOption)(nil), "manabie.yasuo.QuizOption")
	golang_proto.RegisterType((*QuizOption)(nil), "manabie.yasuo.QuizOption")
	proto.RegisterType((*QuizCore)(nil), "manabie.yasuo.QuizCore")
	golang_proto.RegisterType((*QuizCore)(nil), "manabie.yasuo.QuizCore")
	proto.RegisterType((*Quiz)(nil), "manabie.yasuo.Quiz")
	golang_proto.RegisterType((*Quiz)(nil), "manabie.yasuo.Quiz")
}

func init() { proto.RegisterFile("ysquiz.proto", fileDescriptor_1b6b43aff10577b7) }
func init() { golang_proto.RegisterFile("ysquiz.proto", fileDescriptor_1b6b43aff10577b7) }

var fileDescriptor_1b6b43aff10577b7 = []byte{
	// 923 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x95, 0x4d, 0x73, 0xdb, 0x44,
	0x18, 0xc7, 0xa5, 0x38, 0x2f, 0xf6, 0x93, 0x26, 0x11, 0xdb, 0x4c, 0x23, 0x5c, 0x50, 0x5c, 0xcf,
	0x30, 0x98, 0x30, 0x95, 0x49, 0xc2, 0x81, 0x0c, 0x27, 0xd5, 0x56, 0x19, 0xcd, 0x18, 0xbf, 0xc8,
	0x4a, 0x3b, 0xf4, 0x22, 0xf4, 0xb2, 0x51, 0x34, 0x96, 0xb5, 0xae, 0xb4, 0xa2, 0x75, 0x87, 0x03,
	0xc3, 0x27, 0xe0, 0x63, 0xf0, 0x31, 0x38, 0x30, 0x03, 0xdc, 0x72, 0xec, 0x91, 0x38, 0x17, 0x8e,
	0xfd, 0x08, 0x8c, 0x56, 0x52, 0x62, 0x9b, 0xa4, 0xdc, 0xf6, 0xf9, 0xef, 0xef, 0x79, 0x76, 0x9f,
	0x17, 0xad, 0xe0, 0xde, 0x34, 0x7e, 0x99, 0xf8, 0x6f, 0xe4, 0x49, 0x44, 0x28, 0x41, 0x5b, 0x63,
	0x2b, 0xb4, 0x6c, 0x1f, 0xcb, 0x53, 0x2b, 0x4e, 0x48, 0x75, 0xdb, 0x26, 0x76, 0x13, 0x87, 0xc9,
	0x38, 0xdb, 0xae, 0xee, 0x7b, 0x84, 0x78, 0x01, 0x6e, 0x32, 0xcb, 0x4e, 0xce, 0x9a, 0xd4, 0x1f,
	0xe3, 0x98, 0x5a, 0xe3, 0x49, 0x0e, 0x3c, 0xf6, 0x7c, 0x7a, 0x9e, 0xd8, 0xb2, 0x43, 0xc6, 0x4d,
	0x8f, 0x78, 0xe4, 0x86, 0x4c, 0x2d, 0x66, 0xb0, 0x55, 0x86, 0xd7, 0xbf, 0x82, 0xb2, 0xee, 0x3b,
	0xe7, 0x06, 0x7e, 0x4d, 0x91, 0x00, 0xa5, 0xc8, 0x7a, 0x25, 0xf2, 0x35, 0xbe, 0x51, 0xd1, 0xd3,
	0x25, 0xaa, 0x42, 0x39, 0xc2, 0xa1, 0x8b, 0x23, 0xec, 0x8a, 0x2b, 0x4c, 0xbe, 0xb6, 0xeb, 0xbf,
	0xf3, 0x00, 0x83, 0xc4, 0x7f, 0xd3, 0x9b, 0x50, 0x9f, 0x84, 0xe8, 0x10, 0x36, 0x1c, 0x12, 0x52,
	0x1c, 0x52, 0x16, 0x60, 0xf3, 0x68, 0x4f, 0x5e, 0xc8, 0x44, 0x2e, 0x8e, 0xd1, 0x0b, 0x0e, 0xd5,
	0x60, 0xd3, 0x21, 0x51, 0x84, 0x1d, 0x1a, 0xe2, 0x38, 0x66, 0x07, 0x94, 0xf5, 0x79, 0x09, 0x9d,
	0xb0, 0xa0, 0x67, 0xbe, 0x17, 0x8b, 0xa5, 0x5a, 0xa9, 0xb1, 0x7d, 0xb4, 0xbf, 0x14, 0xf4, 0xe6,
	0x02, 0x2d, 0xc6, 0xe9, 0x05, 0x8f, 0x76, 0x61, 0x2d, 0xb0, 0x6c, 0x1c, 0x88, 0xab, 0xec, 0xde,
	0x99, 0x91, 0xa6, 0x38, 0xc2, 0x53, 0x71, 0x2d, 0x4b, 0x71, 0x84, 0xa7, 0xf5, 0x3f, 0x4a, 0x50,
	0x4e, 0xa3, 0xb4, 0x48, 0x84, 0xd1, 0x3e, 0x6c, 0xe2, 0xd7, 0x14, 0x47, 0xa1, 0x15, 0x98, 0xbe,
	0x9b, 0x57, 0x02, 0x0a, 0x49, 0x73, 0xd1, 0xe7, 0xb0, 0x3a, 0xf2, 0xc3, 0xac, 0x18, 0xdb, 0xff,
	0x49, 0x31, 0x8d, 0x63, 0x4c, 0x27, 0x58, 0x67, 0x10, 0x7a, 0x08, 0x95, 0xd8, 0x39, 0x27, 0x84,
	0xc5, 0x2a, 0xd5, 0xf8, 0xc6, 0x9a, 0x5e, 0xce, 0x04, 0xcd, 0x45, 0x72, 0x9a, 0x5a, 0x12, 0xd2,
	0x68, 0xca, 0x6e, 0xb8, 0x7d, 0xb4, 0x7b, 0x1d, 0xcc, 0x26, 0xb6, 0xdc, 0xca, 0xf6, 0xf4, 0x02,
	0x42, 0xc7, 0x50, 0x7e, 0x99, 0xe0, 0x38, 0x4d, 0x95, 0x5d, 0xff, 0x3d, 0x05, 0xbe, 0x06, 0xd1,
	0x49, 0x9a, 0xcf, 0x24, 0xb0, 0x42, 0x8b, 0xf9, 0xad, 0xbf, 0xdf, 0x6f, 0x9e, 0x45, 0x1f, 0x03,
	0x50, 0xcb, 0xf3, 0xb0, 0x6b, 0x06, 0x24, 0x16, 0x37, 0x6a, 0xa5, 0x46, 0x45, 0xaf, 0x64, 0x4a,
	0x87, 0xc4, 0xe8, 0x33, 0x10, 0x5c, 0xff, 0xec, 0xcc, 0x77, 0x92, 0x80, 0x4e, 0xcd, 0x00, 0xff,
	0x80, 0x03, 0xb1, 0xcc, 0x52, 0xdc, 0xb9, 0xd1, 0x3b, 0xa9, 0x8c, 0x8e, 0x61, 0x83, 0xb0, 0x16,
	0xc5, 0x62, 0xa5, 0x56, 0x6a, 0x6c, 0x1e, 0x7d, 0x78, 0x67, 0x13, 0xf5, 0x82, 0x44, 0x87, 0xb0,
	0x9e, 0x75, 0x52, 0x04, 0xd6, 0xf8, 0xdb, 0x7c, 0xf2, 0x96, 0xe7, 0x60, 0xfd, 0xaf, 0x15, 0x58,
	0x4d, 0xe5, 0xb4, 0x49, 0x0e, 0x89, 0xf0, 0x1d, 0x73, 0x58, 0x34, 0x5b, 0x67, 0x10, 0x7a, 0x04,
	0xf7, 0x8a, 0x72, 0x99, 0x49, 0x14, 0xe4, 0x63, 0xbe, 0x59, 0x68, 0xa7, 0x51, 0x90, 0x4e, 0x85,
	0x15, 0xc6, 0xaf, 0x70, 0x14, 0x33, 0xa2, 0xc4, 0x6a, 0x01, 0xb9, 0x94, 0x02, 0x9f, 0xc2, 0xce,
	0x5c, 0xe9, 0x18, 0x94, 0x4d, 0xdd, 0xf6, 0x9c, 0x9c, 0x82, 0x87, 0xb0, 0x1e, 0x53, 0x8b, 0x26,
	0x31, 0x6b, 0xe1, 0xed, 0x59, 0x0d, 0x19, 0xa0, 0xe7, 0x20, 0x3a, 0x01, 0x48, 0x26, 0xae, 0x45,
	0xb1, 0x6b, 0x5a, 0x34, 0xef, 0x60, 0x55, 0xce, 0x5e, 0x01, 0xb9, 0xf8, 0xb6, 0x65, 0xa3, 0x78,
	0x05, 0xf4, 0x4a, 0x4e, 0x2b, 0x34, 0x75, 0x75, 0x22, 0x5c, 0xb8, 0x6e, 0xfc, 0xbf, 0x6b, 0x4e,
	0x2b, 0xf4, 0xe0, 0xc7, 0xec, 0xa3, 0x48, 0x87, 0x19, 0x7d, 0x00, 0x5b, 0x83, 0x53, 0xed, 0x85,
	0x69, 0x7c, 0xd7, 0x57, 0xcd, 0x6f, 0x5b, 0x03, 0x81, 0x5b, 0x94, 0x9e, 0x6a, 0x4f, 0x04, 0x7e,
	0x51, 0xea, 0xf7, 0x9e, 0x0b, 0x2b, 0x8b, 0x92, 0xa1, 0xb4, 0x85, 0xd2, 0x52, 0x2c, 0x6d, 0x20,
	0xac, 0x2e, 0x49, 0xca, 0x40, 0x58, 0x3b, 0x30, 0xb2, 0x97, 0x25, 0xab, 0x04, 0xba, 0x0f, 0x3b,
	0x0c, 0x18, 0x1a, 0x8a, 0x71, 0x3a, 0x34, 0xbb, 0xea, 0x73, 0x81, 0x43, 0x22, 0xec, 0xce, 0x8b,
	0x4a, 0xbf, 0xaf, 0xf7, 0x9e, 0xa9, 0x6d, 0x81, 0x47, 0x7b, 0x70, 0x7f, 0x7e, 0xa7, 0xad, 0x76,
	0x54, 0x43, 0x6d, 0x0b, 0x2b, 0x07, 0xdf, 0xc3, 0x16, 0x8b, 0x8a, 0x69, 0x1e, 0xf8, 0x01, 0xa0,
	0x94, 0x1c, 0xaa, 0xc6, 0x62, 0xec, 0x87, 0xb0, 0xb7, 0xa4, 0xcf, 0x85, 0xaf, 0xc2, 0x83, 0xa5,
	0xcd, 0x9b, 0x13, 0x7e, 0xe6, 0x41, 0x58, 0x7e, 0x91, 0xd0, 0x27, 0xf0, 0x88, 0xdd, 0xa7, 0xd7,
	0x37, 0xb4, 0x5e, 0xd7, 0x6c, 0xf5, 0xba, 0x4f, 0xb5, 0x6f, 0xcc, 0x96, 0x32, 0x54, 0xcd, 0xa1,
	0xda, 0x1d, 0x6a, 0x86, 0xf6, 0x4c, 0x15, 0xb8, 0x3b, 0xb0, 0xbe, 0xa2, 0x1b, 0x9a, 0xd2, 0x31,
	0x5b, 0xba, 0xda, 0xd6, 0x0c, 0x81, 0x47, 0x35, 0xf8, 0xe8, 0x36, 0xac, 0xa3, 0x74, 0xcd, 0x8e,
	0x36, 0x34, 0x84, 0x95, 0x83, 0x2f, 0xb2, 0xe2, 0xe5, 0xa7, 0xd7, 0x41, 0x62, 0x7c, 0x0e, 0x66,
	0x6e, 0xc3, 0xd4, 0x41, 0xcb, 0x3d, 0xb8, 0x27, 0xe1, 0xc5, 0xa5, 0xc4, 0xbd, 0xbd, 0x94, 0xb8,
	0x77, 0x97, 0x12, 0xff, 0xd3, 0x4c, 0xe2, 0x7f, 0x9d, 0x49, 0xfc, 0x9f, 0x33, 0x89, 0xbf, 0x98,
	0x49, 0xfc, 0xdf, 0x33, 0x89, 0xff, 0x67, 0x26, 0x71, 0xef, 0x66, 0x12, 0xff, 0xcb, 0x95, 0xc4,
	0xfd, 0x76, 0x25, 0xf1, 0x17, 0x57, 0x12, 0xf7, 0xf6, 0x4a, 0xe2, 0x5e, 0x7c, 0x39, 0xf7, 0xb3,
	0xc9, 0x27, 0xf9, 0x71, 0xba, 0xb6, 0x2d, 0x67, 0x84, 0x43, 0xb7, 0x39, 0x19, 0x79, 0x4d, 0x0f,
	0x87, 0xd9, 0x5f, 0x87, 0x8d, 0xf8, 0xd7, 0x13, 0xdb, 0x5e, 0x67, 0xf6, 0xf1, 0xbf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x55, 0x62, 0xcf, 0x78, 0xf9, 0x06, 0x00, 0x00,
}

func (x QuizType) String() string {
	s, ok := QuizType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x QuizStatus) String() string {
	s, ok := QuizStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x QuizSetStatus) String() string {
	s, ok := QuizSetStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x QuizOptionConfig) String() string {
	s, ok := QuizOptionConfig_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x QuizConfig) String() string {
	s, ok := QuizConfig_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *RichText) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RichText)
	if !ok {
		that2, ok := that.(RichText)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Raw != that1.Raw {
		return false
	}
	if this.Rendered != that1.Rendered {
		return false
	}
	return true
}
func (this *QuizOption) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QuizOption)
	if !ok {
		that2, ok := that.(QuizOption)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Content.Equal(that1.Content) {
		return false
	}
	if this.Correctness != that1.Correctness {
		return false
	}
	if len(this.Configs) != len(that1.Configs) {
		return false
	}
	for i := range this.Configs {
		if this.Configs[i] != that1.Configs[i] {
			return false
		}
	}
	if this.Label != that1.Label {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	return true
}
func (this *QuizCore) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QuizCore)
	if !ok {
		that2, ok := that.(QuizCore)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ExternalId != that1.ExternalId {
		return false
	}
	if this.Kind != that1.Kind {
		return false
	}
	if this.SchoolId != that1.SchoolId {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if !this.Question.Equal(that1.Question) {
		return false
	}
	if !this.Explanation.Equal(that1.Explanation) {
		return false
	}
	if len(this.TaggedLos) != len(that1.TaggedLos) {
		return false
	}
	for i := range this.TaggedLos {
		if this.TaggedLos[i] != that1.TaggedLos[i] {
			return false
		}
	}
	if this.DifficultyLevel != that1.DifficultyLevel {
		return false
	}
	if len(this.Options) != len(that1.Options) {
		return false
	}
	for i := range this.Options {
		if !this.Options[i].Equal(that1.Options[i]) {
			return false
		}
	}
	if len(this.Config) != len(that1.Config) {
		return false
	}
	for i := range this.Config {
		if this.Config[i] != that1.Config[i] {
			return false
		}
	}
	return true
}
func (this *Quiz) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Quiz)
	if !ok {
		that2, ok := that.(Quiz)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Core.Equal(that1.Core) {
		return false
	}
	if this.QuestionUrl != that1.QuestionUrl {
		return false
	}
	if len(this.AnswersUrl) != len(that1.AnswersUrl) {
		return false
	}
	for i := range this.AnswersUrl {
		if this.AnswersUrl[i] != that1.AnswersUrl[i] {
			return false
		}
	}
	if this.ExplanationUrl != that1.ExplanationUrl {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	return true
}
func (this *RichText) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.RichText{")
	s = append(s, "Raw: "+fmt.Sprintf("%#v", this.Raw)+",\n")
	s = append(s, "Rendered: "+fmt.Sprintf("%#v", this.Rendered)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QuizOption) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.QuizOption{")
	if this.Content != nil {
		s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	}
	s = append(s, "Correctness: "+fmt.Sprintf("%#v", this.Correctness)+",\n")
	s = append(s, "Configs: "+fmt.Sprintf("%#v", this.Configs)+",\n")
	s = append(s, "Label: "+fmt.Sprintf("%#v", this.Label)+",\n")
	s = append(s, "Key: "+fmt.Sprintf("%#v", this.Key)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *QuizCore) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&pb.QuizCore{")
	s = append(s, "ExternalId: "+fmt.Sprintf("%#v", this.ExternalId)+",\n")
	s = append(s, "Kind: "+fmt.Sprintf("%#v", this.Kind)+",\n")
	s = append(s, "SchoolId: "+fmt.Sprintf("%#v", this.SchoolId)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	if this.Question != nil {
		s = append(s, "Question: "+fmt.Sprintf("%#v", this.Question)+",\n")
	}
	if this.Explanation != nil {
		s = append(s, "Explanation: "+fmt.Sprintf("%#v", this.Explanation)+",\n")
	}
	s = append(s, "TaggedLos: "+fmt.Sprintf("%#v", this.TaggedLos)+",\n")
	s = append(s, "DifficultyLevel: "+fmt.Sprintf("%#v", this.DifficultyLevel)+",\n")
	if this.Options != nil {
		s = append(s, "Options: "+fmt.Sprintf("%#v", this.Options)+",\n")
	}
	s = append(s, "Config: "+fmt.Sprintf("%#v", this.Config)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Quiz) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.Quiz{")
	if this.Core != nil {
		s = append(s, "Core: "+fmt.Sprintf("%#v", this.Core)+",\n")
	}
	s = append(s, "QuestionUrl: "+fmt.Sprintf("%#v", this.QuestionUrl)+",\n")
	s = append(s, "AnswersUrl: "+fmt.Sprintf("%#v", this.AnswersUrl)+",\n")
	s = append(s, "ExplanationUrl: "+fmt.Sprintf("%#v", this.ExplanationUrl)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringYsquiz(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *RichText) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RichText) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RichText) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rendered) > 0 {
		i -= len(m.Rendered)
		copy(dAtA[i:], m.Rendered)
		i = encodeVarintYsquiz(dAtA, i, uint64(len(m.Rendered)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Raw) > 0 {
		i -= len(m.Raw)
		copy(dAtA[i:], m.Raw)
		i = encodeVarintYsquiz(dAtA, i, uint64(len(m.Raw)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuizOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuizOption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuizOption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintYsquiz(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Label) > 0 {
		i -= len(m.Label)
		copy(dAtA[i:], m.Label)
		i = encodeVarintYsquiz(dAtA, i, uint64(len(m.Label)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Configs) > 0 {
		dAtA2 := make([]byte, len(m.Configs)*10)
		var j1 int
		for _, num := range m.Configs {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintYsquiz(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if m.Correctness {
		i--
		if m.Correctness {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYsquiz(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuizCore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuizCore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuizCore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Config) > 0 {
		dAtA5 := make([]byte, len(m.Config)*10)
		var j4 int
		for _, num := range m.Config {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintYsquiz(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Options) > 0 {
		for iNdEx := len(m.Options) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Options[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintYsquiz(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.DifficultyLevel != 0 {
		i = encodeVarintYsquiz(dAtA, i, uint64(m.DifficultyLevel))
		i--
		dAtA[i] = 0x40
	}
	if len(m.TaggedLos) > 0 {
		for iNdEx := len(m.TaggedLos) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TaggedLos[iNdEx])
			copy(dAtA[i:], m.TaggedLos[iNdEx])
			i = encodeVarintYsquiz(dAtA, i, uint64(len(m.TaggedLos[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Explanation != nil {
		{
			size, err := m.Explanation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYsquiz(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Question != nil {
		{
			size, err := m.Question.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYsquiz(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Country != 0 {
		i = encodeVarintYsquiz(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x20
	}
	if m.SchoolId != 0 {
		i = encodeVarintYsquiz(dAtA, i, uint64(m.SchoolId))
		i--
		dAtA[i] = 0x18
	}
	if m.Kind != 0 {
		i = encodeVarintYsquiz(dAtA, i, uint64(m.Kind))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ExternalId) > 0 {
		i -= len(m.ExternalId)
		copy(dAtA[i:], m.ExternalId)
		i = encodeVarintYsquiz(dAtA, i, uint64(len(m.ExternalId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Quiz) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Quiz) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Quiz) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYsquiz(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYsquiz(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Status != 0 {
		i = encodeVarintYsquiz(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ExplanationUrl) > 0 {
		i -= len(m.ExplanationUrl)
		copy(dAtA[i:], m.ExplanationUrl)
		i = encodeVarintYsquiz(dAtA, i, uint64(len(m.ExplanationUrl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AnswersUrl) > 0 {
		for iNdEx := len(m.AnswersUrl) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AnswersUrl[iNdEx])
			copy(dAtA[i:], m.AnswersUrl[iNdEx])
			i = encodeVarintYsquiz(dAtA, i, uint64(len(m.AnswersUrl[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.QuestionUrl) > 0 {
		i -= len(m.QuestionUrl)
		copy(dAtA[i:], m.QuestionUrl)
		i = encodeVarintYsquiz(dAtA, i, uint64(len(m.QuestionUrl)))
		i--
		dAtA[i] = 0x12
	}
	if m.Core != nil {
		{
			size, err := m.Core.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYsquiz(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintYsquiz(dAtA []byte, offset int, v uint64) int {
	offset -= sovYsquiz(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RichText) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Raw)
	if l > 0 {
		n += 1 + l + sovYsquiz(uint64(l))
	}
	l = len(m.Rendered)
	if l > 0 {
		n += 1 + l + sovYsquiz(uint64(l))
	}
	return n
}

func (m *QuizOption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovYsquiz(uint64(l))
	}
	if m.Correctness {
		n += 2
	}
	if len(m.Configs) > 0 {
		l = 0
		for _, e := range m.Configs {
			l += sovYsquiz(uint64(e))
		}
		n += 1 + sovYsquiz(uint64(l)) + l
	}
	l = len(m.Label)
	if l > 0 {
		n += 1 + l + sovYsquiz(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovYsquiz(uint64(l))
	}
	return n
}

func (m *QuizCore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ExternalId)
	if l > 0 {
		n += 1 + l + sovYsquiz(uint64(l))
	}
	if m.Kind != 0 {
		n += 1 + sovYsquiz(uint64(m.Kind))
	}
	if m.SchoolId != 0 {
		n += 1 + sovYsquiz(uint64(m.SchoolId))
	}
	if m.Country != 0 {
		n += 1 + sovYsquiz(uint64(m.Country))
	}
	if m.Question != nil {
		l = m.Question.Size()
		n += 1 + l + sovYsquiz(uint64(l))
	}
	if m.Explanation != nil {
		l = m.Explanation.Size()
		n += 1 + l + sovYsquiz(uint64(l))
	}
	if len(m.TaggedLos) > 0 {
		for _, s := range m.TaggedLos {
			l = len(s)
			n += 1 + l + sovYsquiz(uint64(l))
		}
	}
	if m.DifficultyLevel != 0 {
		n += 1 + sovYsquiz(uint64(m.DifficultyLevel))
	}
	if len(m.Options) > 0 {
		for _, e := range m.Options {
			l = e.Size()
			n += 1 + l + sovYsquiz(uint64(l))
		}
	}
	if len(m.Config) > 0 {
		l = 0
		for _, e := range m.Config {
			l += sovYsquiz(uint64(e))
		}
		n += 1 + sovYsquiz(uint64(l)) + l
	}
	return n
}

func (m *Quiz) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Core != nil {
		l = m.Core.Size()
		n += 1 + l + sovYsquiz(uint64(l))
	}
	l = len(m.QuestionUrl)
	if l > 0 {
		n += 1 + l + sovYsquiz(uint64(l))
	}
	if len(m.AnswersUrl) > 0 {
		for _, s := range m.AnswersUrl {
			l = len(s)
			n += 1 + l + sovYsquiz(uint64(l))
		}
	}
	l = len(m.ExplanationUrl)
	if l > 0 {
		n += 1 + l + sovYsquiz(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovYsquiz(uint64(m.Status))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovYsquiz(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovYsquiz(uint64(l))
	}
	return n
}

func sovYsquiz(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozYsquiz(x uint64) (n int) {
	return sovYsquiz(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RichText) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RichText{`,
		`Raw:` + fmt.Sprintf("%v", this.Raw) + `,`,
		`Rendered:` + fmt.Sprintf("%v", this.Rendered) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QuizOption) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&QuizOption{`,
		`Content:` + strings.Replace(this.Content.String(), "RichText", "RichText", 1) + `,`,
		`Correctness:` + fmt.Sprintf("%v", this.Correctness) + `,`,
		`Configs:` + fmt.Sprintf("%v", this.Configs) + `,`,
		`Label:` + fmt.Sprintf("%v", this.Label) + `,`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *QuizCore) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForOptions := "[]*QuizOption{"
	for _, f := range this.Options {
		repeatedStringForOptions += strings.Replace(f.String(), "QuizOption", "QuizOption", 1) + ","
	}
	repeatedStringForOptions += "}"
	s := strings.Join([]string{`&QuizCore{`,
		`ExternalId:` + fmt.Sprintf("%v", this.ExternalId) + `,`,
		`Kind:` + fmt.Sprintf("%v", this.Kind) + `,`,
		`SchoolId:` + fmt.Sprintf("%v", this.SchoolId) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`Question:` + strings.Replace(this.Question.String(), "RichText", "RichText", 1) + `,`,
		`Explanation:` + strings.Replace(this.Explanation.String(), "RichText", "RichText", 1) + `,`,
		`TaggedLos:` + fmt.Sprintf("%v", this.TaggedLos) + `,`,
		`DifficultyLevel:` + fmt.Sprintf("%v", this.DifficultyLevel) + `,`,
		`Options:` + repeatedStringForOptions + `,`,
		`Config:` + fmt.Sprintf("%v", this.Config) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Quiz) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Quiz{`,
		`Core:` + strings.Replace(this.Core.String(), "QuizCore", "QuizCore", 1) + `,`,
		`QuestionUrl:` + fmt.Sprintf("%v", this.QuestionUrl) + `,`,
		`AnswersUrl:` + fmt.Sprintf("%v", this.AnswersUrl) + `,`,
		`ExplanationUrl:` + fmt.Sprintf("%v", this.ExplanationUrl) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringYsquiz(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RichText) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYsquiz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RichText: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RichText: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsquiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYsquiz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYsquiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Raw = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rendered", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsquiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYsquiz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYsquiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rendered = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYsquiz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYsquiz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuizOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYsquiz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuizOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuizOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsquiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYsquiz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYsquiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &RichText{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Correctness", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsquiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Correctness = bool(v != 0)
		case 3:
			if wireType == 0 {
				var v QuizOptionConfig
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowYsquiz
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= QuizOptionConfig(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Configs = append(m.Configs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowYsquiz
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthYsquiz
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthYsquiz
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Configs) == 0 {
					m.Configs = make([]QuizOptionConfig, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v QuizOptionConfig
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowYsquiz
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= QuizOptionConfig(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Configs = append(m.Configs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Configs", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Label", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsquiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYsquiz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYsquiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Label = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsquiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYsquiz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYsquiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYsquiz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYsquiz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuizCore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYsquiz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuizCore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuizCore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsquiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYsquiz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYsquiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsquiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= QuizType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchoolId", wireType)
			}
			m.SchoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsquiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchoolId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsquiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= bob.Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Question", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsquiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYsquiz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYsquiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Question == nil {
				m.Question = &RichText{}
			}
			if err := m.Question.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Explanation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsquiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYsquiz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYsquiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Explanation == nil {
				m.Explanation = &RichText{}
			}
			if err := m.Explanation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaggedLos", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsquiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYsquiz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYsquiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaggedLos = append(m.TaggedLos, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DifficultyLevel", wireType)
			}
			m.DifficultyLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsquiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DifficultyLevel |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsquiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYsquiz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYsquiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = append(m.Options, &QuizOption{})
			if err := m.Options[len(m.Options)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType == 0 {
				var v QuizConfig
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowYsquiz
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= QuizConfig(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Config = append(m.Config, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowYsquiz
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthYsquiz
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthYsquiz
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Config) == 0 {
					m.Config = make([]QuizConfig, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v QuizConfig
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowYsquiz
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= QuizConfig(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Config = append(m.Config, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipYsquiz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYsquiz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Quiz) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYsquiz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Quiz: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Quiz: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Core", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsquiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYsquiz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYsquiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Core == nil {
				m.Core = &QuizCore{}
			}
			if err := m.Core.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuestionUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsquiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYsquiz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYsquiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuestionUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnswersUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsquiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYsquiz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYsquiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnswersUrl = append(m.AnswersUrl, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExplanationUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsquiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYsquiz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYsquiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExplanationUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsquiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= QuizStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsquiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYsquiz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYsquiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsquiz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYsquiz
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYsquiz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYsquiz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYsquiz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipYsquiz(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowYsquiz
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowYsquiz
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowYsquiz
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthYsquiz
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupYsquiz
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthYsquiz
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthYsquiz        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowYsquiz          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupYsquiz = fmt.Errorf("proto: unexpected end of group")
)
