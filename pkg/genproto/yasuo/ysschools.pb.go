// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ysschools.proto

package pb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	bob "github.com/manabie-com/backend/pkg/genproto/bob"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type School struct {
	Id         int32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Country    bob.Country `protobuf:"varint,3,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"`
	CityId     int32       `protobuf:"varint,4,opt,name=city_id,json=cityId,proto3" json:"city_id,omitempty"`
	DistrictId int32       `protobuf:"varint,5,opt,name=district_id,json=districtId,proto3" json:"district_id,omitempty"`
	Point      *Point      `protobuf:"bytes,6,opt,name=point,proto3" json:"point,omitempty"`
	Phone      string      `protobuf:"bytes,7,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (m *School) Reset()      { *m = School{} }
func (*School) ProtoMessage() {}
func (*School) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdb80e975e50a9c2, []int{0}
}
func (m *School) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *School) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_School.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *School) XXX_Merge(src proto.Message) {
	xxx_messageInfo_School.Merge(m, src)
}
func (m *School) XXX_Size() int {
	return m.Size()
}
func (m *School) XXX_DiscardUnknown() {
	xxx_messageInfo_School.DiscardUnknown(m)
}

var xxx_messageInfo_School proto.InternalMessageInfo

func (m *School) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *School) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *School) GetCountry() bob.Country {
	if m != nil {
		return m.Country
	}
	return bob.COUNTRY_NONE
}

func (m *School) GetCityId() int32 {
	if m != nil {
		return m.CityId
	}
	return 0
}

func (m *School) GetDistrictId() int32 {
	if m != nil {
		return m.DistrictId
	}
	return 0
}

func (m *School) GetPoint() *Point {
	if m != nil {
		return m.Point
	}
	return nil
}

func (m *School) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

type SchoolConfig struct {
	SchoolId      int32            `protobuf:"varint,1,opt,name=school_id,json=schoolId,proto3" json:"school_id,omitempty"`
	PlanId        string           `protobuf:"bytes,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	Country       bob.Country      `protobuf:"varint,3,opt,name=country,proto3,enum=manabie.bob.Country" json:"country,omitempty"`
	PlanExpiredAt *types.Timestamp `protobuf:"bytes,4,opt,name=plan_expired_at,json=planExpiredAt,proto3" json:"plan_expired_at,omitempty"`
	PlanDuration  int32            `protobuf:"varint,5,opt,name=plan_duration,json=planDuration,proto3" json:"plan_duration,omitempty"`
	Privileges    []PlanPrivilege  `protobuf:"varint,6,rep,packed,name=privileges,proto3,enum=manabie.yasuo.PlanPrivilege" json:"privileges,omitempty"`
}

func (m *SchoolConfig) Reset()      { *m = SchoolConfig{} }
func (*SchoolConfig) ProtoMessage() {}
func (*SchoolConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdb80e975e50a9c2, []int{1}
}
func (m *SchoolConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SchoolConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SchoolConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SchoolConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SchoolConfig.Merge(m, src)
}
func (m *SchoolConfig) XXX_Size() int {
	return m.Size()
}
func (m *SchoolConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SchoolConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SchoolConfig proto.InternalMessageInfo

func (m *SchoolConfig) GetSchoolId() int32 {
	if m != nil {
		return m.SchoolId
	}
	return 0
}

func (m *SchoolConfig) GetPlanId() string {
	if m != nil {
		return m.PlanId
	}
	return ""
}

func (m *SchoolConfig) GetCountry() bob.Country {
	if m != nil {
		return m.Country
	}
	return bob.COUNTRY_NONE
}

func (m *SchoolConfig) GetPlanExpiredAt() *types.Timestamp {
	if m != nil {
		return m.PlanExpiredAt
	}
	return nil
}

func (m *SchoolConfig) GetPlanDuration() int32 {
	if m != nil {
		return m.PlanDuration
	}
	return 0
}

func (m *SchoolConfig) GetPrivileges() []PlanPrivilege {
	if m != nil {
		return m.Privileges
	}
	return nil
}

type MergeSchoolsRequest struct {
	SchoolIds      []int32 `protobuf:"varint,1,rep,packed,name=school_ids,json=schoolIds,proto3" json:"school_ids,omitempty"`
	SystemSchoolId int32   `protobuf:"varint,2,opt,name=system_school_id,json=systemSchoolId,proto3" json:"system_school_id,omitempty"`
}

func (m *MergeSchoolsRequest) Reset()      { *m = MergeSchoolsRequest{} }
func (*MergeSchoolsRequest) ProtoMessage() {}
func (*MergeSchoolsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdb80e975e50a9c2, []int{2}
}
func (m *MergeSchoolsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MergeSchoolsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MergeSchoolsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MergeSchoolsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MergeSchoolsRequest.Merge(m, src)
}
func (m *MergeSchoolsRequest) XXX_Size() int {
	return m.Size()
}
func (m *MergeSchoolsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MergeSchoolsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MergeSchoolsRequest proto.InternalMessageInfo

func (m *MergeSchoolsRequest) GetSchoolIds() []int32 {
	if m != nil {
		return m.SchoolIds
	}
	return nil
}

func (m *MergeSchoolsRequest) GetSystemSchoolId() int32 {
	if m != nil {
		return m.SystemSchoolId
	}
	return 0
}

type MergeSchoolsResponse struct {
	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (m *MergeSchoolsResponse) Reset()      { *m = MergeSchoolsResponse{} }
func (*MergeSchoolsResponse) ProtoMessage() {}
func (*MergeSchoolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdb80e975e50a9c2, []int{3}
}
func (m *MergeSchoolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MergeSchoolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MergeSchoolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MergeSchoolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MergeSchoolsResponse.Merge(m, src)
}
func (m *MergeSchoolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MergeSchoolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MergeSchoolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MergeSchoolsResponse proto.InternalMessageInfo

func (m *MergeSchoolsResponse) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

type UpdateSchoolRequest struct {
	School *School `protobuf:"bytes,1,opt,name=school,proto3" json:"school,omitempty"`
}

func (m *UpdateSchoolRequest) Reset()      { *m = UpdateSchoolRequest{} }
func (*UpdateSchoolRequest) ProtoMessage() {}
func (*UpdateSchoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdb80e975e50a9c2, []int{4}
}
func (m *UpdateSchoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSchoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSchoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSchoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSchoolRequest.Merge(m, src)
}
func (m *UpdateSchoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSchoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSchoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSchoolRequest proto.InternalMessageInfo

func (m *UpdateSchoolRequest) GetSchool() *School {
	if m != nil {
		return m.School
	}
	return nil
}

type UpdateSchoolResponse struct {
	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (m *UpdateSchoolResponse) Reset()      { *m = UpdateSchoolResponse{} }
func (*UpdateSchoolResponse) ProtoMessage() {}
func (*UpdateSchoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdb80e975e50a9c2, []int{5}
}
func (m *UpdateSchoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSchoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSchoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSchoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSchoolResponse.Merge(m, src)
}
func (m *UpdateSchoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSchoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSchoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSchoolResponse proto.InternalMessageInfo

func (m *UpdateSchoolResponse) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

type AddTeacherRequest struct {
	SchoolId  int32  `protobuf:"varint,1,opt,name=school_id,json=schoolId,proto3" json:"school_id,omitempty"`
	TeacherId string `protobuf:"bytes,2,opt,name=teacher_id,json=teacherId,proto3" json:"teacher_id,omitempty"`
}

func (m *AddTeacherRequest) Reset()      { *m = AddTeacherRequest{} }
func (*AddTeacherRequest) ProtoMessage() {}
func (*AddTeacherRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdb80e975e50a9c2, []int{6}
}
func (m *AddTeacherRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddTeacherRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddTeacherRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddTeacherRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddTeacherRequest.Merge(m, src)
}
func (m *AddTeacherRequest) XXX_Size() int {
	return m.Size()
}
func (m *AddTeacherRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddTeacherRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddTeacherRequest proto.InternalMessageInfo

func (m *AddTeacherRequest) GetSchoolId() int32 {
	if m != nil {
		return m.SchoolId
	}
	return 0
}

func (m *AddTeacherRequest) GetTeacherId() string {
	if m != nil {
		return m.TeacherId
	}
	return ""
}

type AddTeacherResponse struct {
}

func (m *AddTeacherResponse) Reset()      { *m = AddTeacherResponse{} }
func (*AddTeacherResponse) ProtoMessage() {}
func (*AddTeacherResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdb80e975e50a9c2, []int{7}
}
func (m *AddTeacherResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddTeacherResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddTeacherResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddTeacherResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddTeacherResponse.Merge(m, src)
}
func (m *AddTeacherResponse) XXX_Size() int {
	return m.Size()
}
func (m *AddTeacherResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddTeacherResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddTeacherResponse proto.InternalMessageInfo

type RemoveTeacherFromSchoolRequest struct {
	SchoolId  int32  `protobuf:"varint,1,opt,name=school_id,json=schoolId,proto3" json:"school_id,omitempty"`
	TeacherId string `protobuf:"bytes,2,opt,name=teacher_id,json=teacherId,proto3" json:"teacher_id,omitempty"`
}

func (m *RemoveTeacherFromSchoolRequest) Reset()      { *m = RemoveTeacherFromSchoolRequest{} }
func (*RemoveTeacherFromSchoolRequest) ProtoMessage() {}
func (*RemoveTeacherFromSchoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdb80e975e50a9c2, []int{8}
}
func (m *RemoveTeacherFromSchoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveTeacherFromSchoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveTeacherFromSchoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveTeacherFromSchoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveTeacherFromSchoolRequest.Merge(m, src)
}
func (m *RemoveTeacherFromSchoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *RemoveTeacherFromSchoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveTeacherFromSchoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveTeacherFromSchoolRequest proto.InternalMessageInfo

func (m *RemoveTeacherFromSchoolRequest) GetSchoolId() int32 {
	if m != nil {
		return m.SchoolId
	}
	return 0
}

func (m *RemoveTeacherFromSchoolRequest) GetTeacherId() string {
	if m != nil {
		return m.TeacherId
	}
	return ""
}

type RemoveTeacherFromSchoolResponse struct {
}

func (m *RemoveTeacherFromSchoolResponse) Reset()      { *m = RemoveTeacherFromSchoolResponse{} }
func (*RemoveTeacherFromSchoolResponse) ProtoMessage() {}
func (*RemoveTeacherFromSchoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdb80e975e50a9c2, []int{9}
}
func (m *RemoveTeacherFromSchoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveTeacherFromSchoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveTeacherFromSchoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveTeacherFromSchoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveTeacherFromSchoolResponse.Merge(m, src)
}
func (m *RemoveTeacherFromSchoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *RemoveTeacherFromSchoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveTeacherFromSchoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveTeacherFromSchoolResponse proto.InternalMessageInfo

type CreateSchoolConfigRequest struct {
	SchoolConfig *SchoolConfig `protobuf:"bytes,1,opt,name=school_config,json=schoolConfig,proto3" json:"school_config,omitempty"`
}

func (m *CreateSchoolConfigRequest) Reset()      { *m = CreateSchoolConfigRequest{} }
func (*CreateSchoolConfigRequest) ProtoMessage() {}
func (*CreateSchoolConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdb80e975e50a9c2, []int{10}
}
func (m *CreateSchoolConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSchoolConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateSchoolConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateSchoolConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSchoolConfigRequest.Merge(m, src)
}
func (m *CreateSchoolConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateSchoolConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSchoolConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSchoolConfigRequest proto.InternalMessageInfo

func (m *CreateSchoolConfigRequest) GetSchoolConfig() *SchoolConfig {
	if m != nil {
		return m.SchoolConfig
	}
	return nil
}

type CreateSchoolConfigResponse struct {
	SchoolId int32 `protobuf:"varint,1,opt,name=school_id,json=schoolId,proto3" json:"school_id,omitempty"`
}

func (m *CreateSchoolConfigResponse) Reset()      { *m = CreateSchoolConfigResponse{} }
func (*CreateSchoolConfigResponse) ProtoMessage() {}
func (*CreateSchoolConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdb80e975e50a9c2, []int{11}
}
func (m *CreateSchoolConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSchoolConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateSchoolConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateSchoolConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSchoolConfigResponse.Merge(m, src)
}
func (m *CreateSchoolConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateSchoolConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSchoolConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSchoolConfigResponse proto.InternalMessageInfo

func (m *CreateSchoolConfigResponse) GetSchoolId() int32 {
	if m != nil {
		return m.SchoolId
	}
	return 0
}

type UpdateSchoolConfigRequest struct {
	SchoolConfig *SchoolConfig `protobuf:"bytes,1,opt,name=school_config,json=schoolConfig,proto3" json:"school_config,omitempty"`
}

func (m *UpdateSchoolConfigRequest) Reset()      { *m = UpdateSchoolConfigRequest{} }
func (*UpdateSchoolConfigRequest) ProtoMessage() {}
func (*UpdateSchoolConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdb80e975e50a9c2, []int{12}
}
func (m *UpdateSchoolConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSchoolConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSchoolConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSchoolConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSchoolConfigRequest.Merge(m, src)
}
func (m *UpdateSchoolConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSchoolConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSchoolConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSchoolConfigRequest proto.InternalMessageInfo

func (m *UpdateSchoolConfigRequest) GetSchoolConfig() *SchoolConfig {
	if m != nil {
		return m.SchoolConfig
	}
	return nil
}

type UpdateSchoolConfigResponse struct {
	SchoolId int32 `protobuf:"varint,1,opt,name=school_id,json=schoolId,proto3" json:"school_id,omitempty"`
}

func (m *UpdateSchoolConfigResponse) Reset()      { *m = UpdateSchoolConfigResponse{} }
func (*UpdateSchoolConfigResponse) ProtoMessage() {}
func (*UpdateSchoolConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdb80e975e50a9c2, []int{13}
}
func (m *UpdateSchoolConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateSchoolConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateSchoolConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateSchoolConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSchoolConfigResponse.Merge(m, src)
}
func (m *UpdateSchoolConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateSchoolConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSchoolConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSchoolConfigResponse proto.InternalMessageInfo

func (m *UpdateSchoolConfigResponse) GetSchoolId() int32 {
	if m != nil {
		return m.SchoolId
	}
	return 0
}

func init() {
	proto.RegisterType((*School)(nil), "manabie.yasuo.School")
	golang_proto.RegisterType((*School)(nil), "manabie.yasuo.School")
	proto.RegisterType((*SchoolConfig)(nil), "manabie.yasuo.SchoolConfig")
	golang_proto.RegisterType((*SchoolConfig)(nil), "manabie.yasuo.SchoolConfig")
	proto.RegisterType((*MergeSchoolsRequest)(nil), "manabie.yasuo.MergeSchoolsRequest")
	golang_proto.RegisterType((*MergeSchoolsRequest)(nil), "manabie.yasuo.MergeSchoolsRequest")
	proto.RegisterType((*MergeSchoolsResponse)(nil), "manabie.yasuo.MergeSchoolsResponse")
	golang_proto.RegisterType((*MergeSchoolsResponse)(nil), "manabie.yasuo.MergeSchoolsResponse")
	proto.RegisterType((*UpdateSchoolRequest)(nil), "manabie.yasuo.UpdateSchoolRequest")
	golang_proto.RegisterType((*UpdateSchoolRequest)(nil), "manabie.yasuo.UpdateSchoolRequest")
	proto.RegisterType((*UpdateSchoolResponse)(nil), "manabie.yasuo.UpdateSchoolResponse")
	golang_proto.RegisterType((*UpdateSchoolResponse)(nil), "manabie.yasuo.UpdateSchoolResponse")
	proto.RegisterType((*AddTeacherRequest)(nil), "manabie.yasuo.AddTeacherRequest")
	golang_proto.RegisterType((*AddTeacherRequest)(nil), "manabie.yasuo.AddTeacherRequest")
	proto.RegisterType((*AddTeacherResponse)(nil), "manabie.yasuo.AddTeacherResponse")
	golang_proto.RegisterType((*AddTeacherResponse)(nil), "manabie.yasuo.AddTeacherResponse")
	proto.RegisterType((*RemoveTeacherFromSchoolRequest)(nil), "manabie.yasuo.RemoveTeacherFromSchoolRequest")
	golang_proto.RegisterType((*RemoveTeacherFromSchoolRequest)(nil), "manabie.yasuo.RemoveTeacherFromSchoolRequest")
	proto.RegisterType((*RemoveTeacherFromSchoolResponse)(nil), "manabie.yasuo.RemoveTeacherFromSchoolResponse")
	golang_proto.RegisterType((*RemoveTeacherFromSchoolResponse)(nil), "manabie.yasuo.RemoveTeacherFromSchoolResponse")
	proto.RegisterType((*CreateSchoolConfigRequest)(nil), "manabie.yasuo.CreateSchoolConfigRequest")
	golang_proto.RegisterType((*CreateSchoolConfigRequest)(nil), "manabie.yasuo.CreateSchoolConfigRequest")
	proto.RegisterType((*CreateSchoolConfigResponse)(nil), "manabie.yasuo.CreateSchoolConfigResponse")
	golang_proto.RegisterType((*CreateSchoolConfigResponse)(nil), "manabie.yasuo.CreateSchoolConfigResponse")
	proto.RegisterType((*UpdateSchoolConfigRequest)(nil), "manabie.yasuo.UpdateSchoolConfigRequest")
	golang_proto.RegisterType((*UpdateSchoolConfigRequest)(nil), "manabie.yasuo.UpdateSchoolConfigRequest")
	proto.RegisterType((*UpdateSchoolConfigResponse)(nil), "manabie.yasuo.UpdateSchoolConfigResponse")
	golang_proto.RegisterType((*UpdateSchoolConfigResponse)(nil), "manabie.yasuo.UpdateSchoolConfigResponse")
}

func init() { proto.RegisterFile("ysschools.proto", fileDescriptor_cdb80e975e50a9c2) }
func init() { golang_proto.RegisterFile("ysschools.proto", fileDescriptor_cdb80e975e50a9c2) }

var fileDescriptor_cdb80e975e50a9c2 = []byte{
	// 838 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0x3a, 0xb1, 0xd3, 0xbc, 0x38, 0x6e, 0x99, 0x06, 0x75, 0xd9, 0xd2, 0x89, 0xbb, 0xbd,
	0x2c, 0x48, 0x59, 0x4b, 0x06, 0x21, 0x21, 0x38, 0xd0, 0xa6, 0x20, 0xf9, 0x80, 0x28, 0x9b, 0xa2,
	0x4a, 0x08, 0xb0, 0xf6, 0xcf, 0x64, 0x33, 0xaa, 0x77, 0x67, 0xd9, 0x99, 0x8d, 0xea, 0x1b, 0x1f,
	0x81, 0x3b, 0x5f, 0x80, 0x8f, 0xc1, 0x91, 0x63, 0x8e, 0x39, 0x12, 0x87, 0x03, 0xc7, 0x7c, 0x04,
	0xb4, 0x33, 0xb3, 0xf1, 0xc6, 0xff, 0x14, 0x84, 0x7a, 0xdb, 0xf7, 0xde, 0xef, 0xbd, 0xdf, 0xef,
	0xfd, 0x19, 0xd9, 0x70, 0x77, 0xc2, 0x79, 0x78, 0xc2, 0xd8, 0x98, 0xbb, 0x59, 0xce, 0x04, 0x43,
	0xbb, 0x89, 0x9f, 0xfa, 0x01, 0x25, 0xee, 0xc4, 0xe7, 0x05, 0xb3, 0x3a, 0x13, 0x4e, 0xd2, 0x22,
	0x51, 0x41, 0xab, 0x1b, 0xb0, 0xa0, 0x5f, 0xb3, 0xef, 0x4d, 0xf8, 0x98, 0x85, 0xbe, 0xa0, 0x2c,
	0xd5, 0x9e, 0xfd, 0x98, 0xb1, 0x78, 0x4c, 0xfa, 0xd2, 0x0a, 0x8a, 0xe3, 0xbe, 0xa0, 0x09, 0xe1,
	0xc2, 0x4f, 0x32, 0x0d, 0x38, 0x88, 0xa9, 0x38, 0x29, 0x02, 0x37, 0x64, 0x49, 0x3f, 0x66, 0x31,
	0x9b, 0x21, 0x4b, 0x4b, 0x1a, 0xf2, 0x4b, 0xc1, 0xed, 0x73, 0x03, 0xda, 0x47, 0x52, 0x20, 0xea,
	0x42, 0x93, 0x46, 0xa6, 0xd1, 0x33, 0x9c, 0x96, 0xd7, 0xa4, 0x11, 0x42, 0xb0, 0x99, 0xfa, 0x09,
	0x31, 0x9b, 0x3d, 0xc3, 0xd9, 0xf6, 0xe4, 0x37, 0x72, 0x61, 0x2b, 0x64, 0x45, 0x2a, 0xf2, 0x89,
	0xb9, 0xd1, 0x33, 0x9c, 0xee, 0x60, 0xcf, 0xad, 0xfa, 0x09, 0x58, 0xe0, 0x1e, 0xaa, 0x98, 0x57,
	0x81, 0xd0, 0x03, 0xd8, 0x0a, 0xa9, 0x98, 0x8c, 0x68, 0x64, 0x6e, 0xca, 0xc2, 0xed, 0xd2, 0x1c,
	0x46, 0x68, 0x1f, 0x76, 0x22, 0xca, 0x45, 0x4e, 0x43, 0x51, 0x06, 0x5b, 0x32, 0x08, 0x95, 0x6b,
	0x18, 0xa1, 0x0f, 0xa1, 0x95, 0x31, 0x9a, 0x0a, 0xb3, 0xdd, 0x33, 0x9c, 0x9d, 0x1a, 0x8f, 0x9c,
	0x9b, 0xfb, 0xa2, 0x8c, 0x79, 0x0a, 0x82, 0xf6, 0xa0, 0x95, 0x9d, 0xb0, 0x94, 0x98, 0x5b, 0x52,
	0xaa, 0x32, 0xec, 0xdf, 0x9a, 0xd0, 0x51, 0xad, 0x1d, 0xb2, 0xf4, 0x98, 0xc6, 0xe8, 0x21, 0x6c,
	0xab, 0x5d, 0x8c, 0xae, 0xfb, 0xbc, 0xa3, 0x1c, 0xc3, 0xa8, 0x54, 0x9a, 0x8d, 0xfd, 0xb4, 0x0c,
	0xa9, 0x86, 0xdb, 0xa5, 0x39, 0x8c, 0xfe, 0x73, 0xcb, 0xcf, 0xe0, 0xae, 0x2c, 0x44, 0xde, 0x64,
	0x34, 0x27, 0xd1, 0xc8, 0x17, 0xb2, 0xf5, 0x9d, 0x81, 0xe5, 0xaa, 0xdd, 0xb9, 0xd5, 0x46, 0xdc,
	0x97, 0xd5, 0xee, 0xbc, 0xdd, 0x32, 0xe5, 0x4b, 0x95, 0xf1, 0x54, 0xa0, 0x27, 0x20, 0x1d, 0xa3,
	0xa8, 0xc8, 0xe5, 0xf2, 0xf5, 0x7c, 0x3a, 0xa5, 0xf3, 0xb9, 0xf6, 0xa1, 0xcf, 0x01, 0xb2, 0x9c,
	0x9e, 0xd2, 0x31, 0x89, 0x09, 0x37, 0xdb, 0xbd, 0x0d, 0xa7, 0x3b, 0x78, 0x7f, 0x7e, 0x4c, 0x63,
	0x3f, 0x7d, 0x51, 0x81, 0xbc, 0x1a, 0xde, 0xfe, 0x09, 0xee, 0x7f, 0x4d, 0xf2, 0x98, 0xa8, 0x09,
	0x71, 0x8f, 0xfc, 0x5c, 0x10, 0x2e, 0xd0, 0x23, 0x80, 0xeb, 0x19, 0x71, 0xd3, 0xe8, 0x6d, 0x38,
	0x2d, 0x6f, 0xbb, 0x1a, 0x12, 0x47, 0x0e, 0xdc, 0xe3, 0x13, 0x2e, 0x48, 0x32, 0x9a, 0x4d, 0xb2,
	0x29, 0xb5, 0x75, 0x95, 0xff, 0x48, 0x43, 0xed, 0x4f, 0x60, 0xef, 0x66, 0x7d, 0x9e, 0xb1, 0x94,
	0x13, 0x84, 0x01, 0x78, 0x11, 0x86, 0x84, 0xf3, 0xe3, 0x62, 0x2c, 0xb7, 0x70, 0xc7, 0xab, 0x79,
	0xec, 0xe7, 0x70, 0xff, 0xbb, 0x2c, 0xf2, 0x85, 0x4e, 0xac, 0x74, 0x1d, 0x40, 0x5b, 0x31, 0xca,
	0x94, 0x9d, 0xc1, 0xbb, 0x73, 0x8d, 0x6a, 0xb4, 0x06, 0x95, 0xec, 0x37, 0xab, 0xdc, 0x92, 0xfd,
	0x1b, 0x78, 0xe7, 0x69, 0x14, 0xbd, 0x24, 0x7e, 0x78, 0x42, 0xf2, 0x8a, 0x7b, 0xed, 0xdd, 0x3c,
	0x02, 0x10, 0x0a, 0x3e, 0x3b, 0x9d, 0x6d, 0xed, 0x19, 0x46, 0xf6, 0x1e, 0xa0, 0x7a, 0x41, 0x25,
	0xc3, 0xfe, 0x01, 0xb0, 0x47, 0x12, 0x76, 0x4a, 0x74, 0xe0, 0xab, 0x9c, 0x25, 0x37, 0xfb, 0xfd,
	0x3f, 0x9c, 0x8f, 0x61, 0x7f, 0x65, 0x75, 0x2d, 0xe0, 0x47, 0x78, 0xef, 0x30, 0x27, 0xd7, 0xf3,
	0x51, 0x0f, 0xa4, 0xe2, 0xfe, 0x02, 0x76, 0x35, 0x77, 0x28, 0xfd, 0x7a, 0xe4, 0x0f, 0x97, 0x8e,
	0x5c, 0xa7, 0x76, 0x78, 0xcd, 0xb2, 0x3f, 0x05, 0x6b, 0x59, 0x79, 0xbd, 0x84, 0x75, 0xbd, 0x95,
	0xca, 0xea, 0x9b, 0x7b, 0x0b, 0xca, 0x96, 0x95, 0xbf, 0x85, 0xb2, 0xc1, 0xdf, 0x9b, 0xb0, 0xab,
	0xb2, 0x8e, 0x48, 0x7e, 0x4a, 0x43, 0x82, 0x5e, 0x41, 0xa7, 0x7e, 0xe3, 0xc8, 0x9e, 0xd3, 0xb1,
	0xe4, 0x81, 0x59, 0x4f, 0xd6, 0x62, 0xb4, 0x8e, 0x57, 0xd0, 0xa9, 0xab, 0x5c, 0x28, 0xbc, 0xe4,
	0x85, 0x2c, 0x14, 0x5e, 0x7a, 0xff, 0x6f, 0xe0, 0xc1, 0x8a, 0xd3, 0x40, 0x07, 0x73, 0xf9, 0xeb,
	0x0f, 0xd4, 0x72, 0x6f, 0x0b, 0xd7, 0xcc, 0xdf, 0x02, 0xcc, 0x1e, 0x02, 0xea, 0xcd, 0x65, 0x2f,
	0x3c, 0x3a, 0xeb, 0xf1, 0x1a, 0x84, 0x2e, 0x49, 0x01, 0x2d, 0x5e, 0x19, 0x72, 0xe6, 0x12, 0x57,
	0xde, 0xb9, 0xf5, 0xc1, 0x2d, 0x90, 0x33, 0xaa, 0xc5, 0xb3, 0x59, 0xa0, 0x5a, 0x79, 0xb8, 0x0b,
	0x54, 0xab, 0x6f, 0xf0, 0x59, 0x7a, 0x76, 0x81, 0x1b, 0xe7, 0x17, 0xb8, 0x71, 0x75, 0x81, 0x8d,
	0x5f, 0xa6, 0xd8, 0xf8, 0x7d, 0x8a, 0x8d, 0x3f, 0xa7, 0xd8, 0x38, 0x9b, 0x62, 0xe3, 0xaf, 0x29,
	0x36, 0xfe, 0x99, 0xe2, 0xc6, 0xd5, 0x14, 0x1b, 0xbf, 0x5e, 0xe2, 0xc6, 0x1f, 0x97, 0xd8, 0x38,
	0xbb, 0xc4, 0x8d, 0xf3, 0x4b, 0xdc, 0xf8, 0xfe, 0xe3, 0xda, 0x4f, 0xbf, 0xa6, 0x3b, 0x28, 0xbf,
	0x03, 0x3f, 0x7c, 0x4d, 0xd2, 0xa8, 0x9f, 0xbd, 0x8e, 0xfb, 0x31, 0x49, 0xd5, 0x7f, 0x00, 0xa9,
	0xe3, 0xb3, 0x2c, 0x08, 0xda, 0xd2, 0xfe, 0xe8, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7e, 0x04,
	0x7d, 0x14, 0xaa, 0x08, 0x00, 0x00,
}

func (this *School) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*School)
	if !ok {
		that2, ok := that.(School)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if this.CityId != that1.CityId {
		return false
	}
	if this.DistrictId != that1.DistrictId {
		return false
	}
	if !this.Point.Equal(that1.Point) {
		return false
	}
	if this.Phone != that1.Phone {
		return false
	}
	return true
}
func (this *SchoolConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SchoolConfig)
	if !ok {
		that2, ok := that.(SchoolConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SchoolId != that1.SchoolId {
		return false
	}
	if this.PlanId != that1.PlanId {
		return false
	}
	if this.Country != that1.Country {
		return false
	}
	if !this.PlanExpiredAt.Equal(that1.PlanExpiredAt) {
		return false
	}
	if this.PlanDuration != that1.PlanDuration {
		return false
	}
	if len(this.Privileges) != len(that1.Privileges) {
		return false
	}
	for i := range this.Privileges {
		if this.Privileges[i] != that1.Privileges[i] {
			return false
		}
	}
	return true
}
func (this *MergeSchoolsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MergeSchoolsRequest)
	if !ok {
		that2, ok := that.(MergeSchoolsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SchoolIds) != len(that1.SchoolIds) {
		return false
	}
	for i := range this.SchoolIds {
		if this.SchoolIds[i] != that1.SchoolIds[i] {
			return false
		}
	}
	if this.SystemSchoolId != that1.SystemSchoolId {
		return false
	}
	return true
}
func (this *MergeSchoolsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MergeSchoolsResponse)
	if !ok {
		that2, ok := that.(MergeSchoolsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Successful != that1.Successful {
		return false
	}
	return true
}
func (this *UpdateSchoolRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSchoolRequest)
	if !ok {
		that2, ok := that.(UpdateSchoolRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.School.Equal(that1.School) {
		return false
	}
	return true
}
func (this *UpdateSchoolResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSchoolResponse)
	if !ok {
		that2, ok := that.(UpdateSchoolResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Successful != that1.Successful {
		return false
	}
	return true
}
func (this *AddTeacherRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddTeacherRequest)
	if !ok {
		that2, ok := that.(AddTeacherRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SchoolId != that1.SchoolId {
		return false
	}
	if this.TeacherId != that1.TeacherId {
		return false
	}
	return true
}
func (this *AddTeacherResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddTeacherResponse)
	if !ok {
		that2, ok := that.(AddTeacherResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *RemoveTeacherFromSchoolRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveTeacherFromSchoolRequest)
	if !ok {
		that2, ok := that.(RemoveTeacherFromSchoolRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SchoolId != that1.SchoolId {
		return false
	}
	if this.TeacherId != that1.TeacherId {
		return false
	}
	return true
}
func (this *RemoveTeacherFromSchoolResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveTeacherFromSchoolResponse)
	if !ok {
		that2, ok := that.(RemoveTeacherFromSchoolResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CreateSchoolConfigRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSchoolConfigRequest)
	if !ok {
		that2, ok := that.(CreateSchoolConfigRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SchoolConfig.Equal(that1.SchoolConfig) {
		return false
	}
	return true
}
func (this *CreateSchoolConfigResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateSchoolConfigResponse)
	if !ok {
		that2, ok := that.(CreateSchoolConfigResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SchoolId != that1.SchoolId {
		return false
	}
	return true
}
func (this *UpdateSchoolConfigRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSchoolConfigRequest)
	if !ok {
		that2, ok := that.(UpdateSchoolConfigRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SchoolConfig.Equal(that1.SchoolConfig) {
		return false
	}
	return true
}
func (this *UpdateSchoolConfigResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateSchoolConfigResponse)
	if !ok {
		that2, ok := that.(UpdateSchoolConfigResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SchoolId != that1.SchoolId {
		return false
	}
	return true
}
func (this *School) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.School{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	s = append(s, "CityId: "+fmt.Sprintf("%#v", this.CityId)+",\n")
	s = append(s, "DistrictId: "+fmt.Sprintf("%#v", this.DistrictId)+",\n")
	if this.Point != nil {
		s = append(s, "Point: "+fmt.Sprintf("%#v", this.Point)+",\n")
	}
	s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SchoolConfig) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.SchoolConfig{")
	s = append(s, "SchoolId: "+fmt.Sprintf("%#v", this.SchoolId)+",\n")
	s = append(s, "PlanId: "+fmt.Sprintf("%#v", this.PlanId)+",\n")
	s = append(s, "Country: "+fmt.Sprintf("%#v", this.Country)+",\n")
	if this.PlanExpiredAt != nil {
		s = append(s, "PlanExpiredAt: "+fmt.Sprintf("%#v", this.PlanExpiredAt)+",\n")
	}
	s = append(s, "PlanDuration: "+fmt.Sprintf("%#v", this.PlanDuration)+",\n")
	s = append(s, "Privileges: "+fmt.Sprintf("%#v", this.Privileges)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MergeSchoolsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.MergeSchoolsRequest{")
	s = append(s, "SchoolIds: "+fmt.Sprintf("%#v", this.SchoolIds)+",\n")
	s = append(s, "SystemSchoolId: "+fmt.Sprintf("%#v", this.SystemSchoolId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MergeSchoolsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.MergeSchoolsResponse{")
	s = append(s, "Successful: "+fmt.Sprintf("%#v", this.Successful)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateSchoolRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpdateSchoolRequest{")
	if this.School != nil {
		s = append(s, "School: "+fmt.Sprintf("%#v", this.School)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateSchoolResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpdateSchoolResponse{")
	s = append(s, "Successful: "+fmt.Sprintf("%#v", this.Successful)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddTeacherRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.AddTeacherRequest{")
	s = append(s, "SchoolId: "+fmt.Sprintf("%#v", this.SchoolId)+",\n")
	s = append(s, "TeacherId: "+fmt.Sprintf("%#v", this.TeacherId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddTeacherResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.AddTeacherResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveTeacherFromSchoolRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.RemoveTeacherFromSchoolRequest{")
	s = append(s, "SchoolId: "+fmt.Sprintf("%#v", this.SchoolId)+",\n")
	s = append(s, "TeacherId: "+fmt.Sprintf("%#v", this.TeacherId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoveTeacherFromSchoolResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.RemoveTeacherFromSchoolResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSchoolConfigRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CreateSchoolConfigRequest{")
	if this.SchoolConfig != nil {
		s = append(s, "SchoolConfig: "+fmt.Sprintf("%#v", this.SchoolConfig)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateSchoolConfigResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.CreateSchoolConfigResponse{")
	s = append(s, "SchoolId: "+fmt.Sprintf("%#v", this.SchoolId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateSchoolConfigRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpdateSchoolConfigRequest{")
	if this.SchoolConfig != nil {
		s = append(s, "SchoolConfig: "+fmt.Sprintf("%#v", this.SchoolConfig)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateSchoolConfigResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.UpdateSchoolConfigResponse{")
	s = append(s, "SchoolId: "+fmt.Sprintf("%#v", this.SchoolId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringYsschools(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SchoolServiceClient is the client API for SchoolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SchoolServiceClient interface {
	MergeSchools(ctx context.Context, in *MergeSchoolsRequest, opts ...grpc.CallOption) (*MergeSchoolsResponse, error)
	UpdateSchool(ctx context.Context, in *UpdateSchoolRequest, opts ...grpc.CallOption) (*UpdateSchoolResponse, error)
	RemoveTeacherFromSchool(ctx context.Context, in *RemoveTeacherFromSchoolRequest, opts ...grpc.CallOption) (*RemoveTeacherFromSchoolResponse, error)
	AddTeacher(ctx context.Context, in *AddTeacherRequest, opts ...grpc.CallOption) (*AddTeacherResponse, error)
	CreateSchoolConfig(ctx context.Context, in *CreateSchoolConfigRequest, opts ...grpc.CallOption) (*CreateSchoolConfigResponse, error)
	UpdateSchoolConfig(ctx context.Context, in *UpdateSchoolConfigRequest, opts ...grpc.CallOption) (*UpdateSchoolConfigResponse, error)
}

type schoolServiceClient struct {
	cc *grpc.ClientConn
}

func NewSchoolServiceClient(cc *grpc.ClientConn) SchoolServiceClient {
	return &schoolServiceClient{cc}
}

func (c *schoolServiceClient) MergeSchools(ctx context.Context, in *MergeSchoolsRequest, opts ...grpc.CallOption) (*MergeSchoolsResponse, error) {
	out := new(MergeSchoolsResponse)
	err := c.cc.Invoke(ctx, "/manabie.yasuo.SchoolService/MergeSchools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) UpdateSchool(ctx context.Context, in *UpdateSchoolRequest, opts ...grpc.CallOption) (*UpdateSchoolResponse, error) {
	out := new(UpdateSchoolResponse)
	err := c.cc.Invoke(ctx, "/manabie.yasuo.SchoolService/UpdateSchool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) RemoveTeacherFromSchool(ctx context.Context, in *RemoveTeacherFromSchoolRequest, opts ...grpc.CallOption) (*RemoveTeacherFromSchoolResponse, error) {
	out := new(RemoveTeacherFromSchoolResponse)
	err := c.cc.Invoke(ctx, "/manabie.yasuo.SchoolService/RemoveTeacherFromSchool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) AddTeacher(ctx context.Context, in *AddTeacherRequest, opts ...grpc.CallOption) (*AddTeacherResponse, error) {
	out := new(AddTeacherResponse)
	err := c.cc.Invoke(ctx, "/manabie.yasuo.SchoolService/AddTeacher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) CreateSchoolConfig(ctx context.Context, in *CreateSchoolConfigRequest, opts ...grpc.CallOption) (*CreateSchoolConfigResponse, error) {
	out := new(CreateSchoolConfigResponse)
	err := c.cc.Invoke(ctx, "/manabie.yasuo.SchoolService/CreateSchoolConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schoolServiceClient) UpdateSchoolConfig(ctx context.Context, in *UpdateSchoolConfigRequest, opts ...grpc.CallOption) (*UpdateSchoolConfigResponse, error) {
	out := new(UpdateSchoolConfigResponse)
	err := c.cc.Invoke(ctx, "/manabie.yasuo.SchoolService/UpdateSchoolConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchoolServiceServer is the server API for SchoolService service.
type SchoolServiceServer interface {
	MergeSchools(context.Context, *MergeSchoolsRequest) (*MergeSchoolsResponse, error)
	UpdateSchool(context.Context, *UpdateSchoolRequest) (*UpdateSchoolResponse, error)
	RemoveTeacherFromSchool(context.Context, *RemoveTeacherFromSchoolRequest) (*RemoveTeacherFromSchoolResponse, error)
	AddTeacher(context.Context, *AddTeacherRequest) (*AddTeacherResponse, error)
	CreateSchoolConfig(context.Context, *CreateSchoolConfigRequest) (*CreateSchoolConfigResponse, error)
	UpdateSchoolConfig(context.Context, *UpdateSchoolConfigRequest) (*UpdateSchoolConfigResponse, error)
}

// UnimplementedSchoolServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSchoolServiceServer struct {
}

func (*UnimplementedSchoolServiceServer) MergeSchools(ctx context.Context, req *MergeSchoolsRequest) (*MergeSchoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeSchools not implemented")
}
func (*UnimplementedSchoolServiceServer) UpdateSchool(ctx context.Context, req *UpdateSchoolRequest) (*UpdateSchoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSchool not implemented")
}
func (*UnimplementedSchoolServiceServer) RemoveTeacherFromSchool(ctx context.Context, req *RemoveTeacherFromSchoolRequest) (*RemoveTeacherFromSchoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTeacherFromSchool not implemented")
}
func (*UnimplementedSchoolServiceServer) AddTeacher(ctx context.Context, req *AddTeacherRequest) (*AddTeacherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTeacher not implemented")
}
func (*UnimplementedSchoolServiceServer) CreateSchoolConfig(ctx context.Context, req *CreateSchoolConfigRequest) (*CreateSchoolConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchoolConfig not implemented")
}
func (*UnimplementedSchoolServiceServer) UpdateSchoolConfig(ctx context.Context, req *UpdateSchoolConfigRequest) (*UpdateSchoolConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSchoolConfig not implemented")
}

func RegisterSchoolServiceServer(s *grpc.Server, srv SchoolServiceServer) {
	s.RegisterService(&_SchoolService_serviceDesc, srv)
}

func _SchoolService_MergeSchools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeSchoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).MergeSchools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.yasuo.SchoolService/MergeSchools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).MergeSchools(ctx, req.(*MergeSchoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_UpdateSchool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSchoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).UpdateSchool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.yasuo.SchoolService/UpdateSchool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).UpdateSchool(ctx, req.(*UpdateSchoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_RemoveTeacherFromSchool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTeacherFromSchoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).RemoveTeacherFromSchool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.yasuo.SchoolService/RemoveTeacherFromSchool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).RemoveTeacherFromSchool(ctx, req.(*RemoveTeacherFromSchoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_AddTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).AddTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.yasuo.SchoolService/AddTeacher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).AddTeacher(ctx, req.(*AddTeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_CreateSchoolConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSchoolConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).CreateSchoolConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.yasuo.SchoolService/CreateSchoolConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).CreateSchoolConfig(ctx, req.(*CreateSchoolConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchoolService_UpdateSchoolConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSchoolConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolServiceServer).UpdateSchoolConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.yasuo.SchoolService/UpdateSchoolConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolServiceServer).UpdateSchoolConfig(ctx, req.(*UpdateSchoolConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SchoolService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "manabie.yasuo.SchoolService",
	HandlerType: (*SchoolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MergeSchools",
			Handler:    _SchoolService_MergeSchools_Handler,
		},
		{
			MethodName: "UpdateSchool",
			Handler:    _SchoolService_UpdateSchool_Handler,
		},
		{
			MethodName: "RemoveTeacherFromSchool",
			Handler:    _SchoolService_RemoveTeacherFromSchool_Handler,
		},
		{
			MethodName: "AddTeacher",
			Handler:    _SchoolService_AddTeacher_Handler,
		},
		{
			MethodName: "CreateSchoolConfig",
			Handler:    _SchoolService_CreateSchoolConfig_Handler,
		},
		{
			MethodName: "UpdateSchoolConfig",
			Handler:    _SchoolService_UpdateSchoolConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ysschools.proto",
}

func (m *School) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *School) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *School) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Phone) > 0 {
		i -= len(m.Phone)
		copy(dAtA[i:], m.Phone)
		i = encodeVarintYsschools(dAtA, i, uint64(len(m.Phone)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Point != nil {
		{
			size, err := m.Point.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYsschools(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.DistrictId != 0 {
		i = encodeVarintYsschools(dAtA, i, uint64(m.DistrictId))
		i--
		dAtA[i] = 0x28
	}
	if m.CityId != 0 {
		i = encodeVarintYsschools(dAtA, i, uint64(m.CityId))
		i--
		dAtA[i] = 0x20
	}
	if m.Country != 0 {
		i = encodeVarintYsschools(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintYsschools(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintYsschools(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SchoolConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SchoolConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SchoolConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Privileges) > 0 {
		dAtA3 := make([]byte, len(m.Privileges)*10)
		var j2 int
		for _, num := range m.Privileges {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintYsschools(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x32
	}
	if m.PlanDuration != 0 {
		i = encodeVarintYsschools(dAtA, i, uint64(m.PlanDuration))
		i--
		dAtA[i] = 0x28
	}
	if m.PlanExpiredAt != nil {
		{
			size, err := m.PlanExpiredAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYsschools(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Country != 0 {
		i = encodeVarintYsschools(dAtA, i, uint64(m.Country))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PlanId) > 0 {
		i -= len(m.PlanId)
		copy(dAtA[i:], m.PlanId)
		i = encodeVarintYsschools(dAtA, i, uint64(len(m.PlanId)))
		i--
		dAtA[i] = 0x12
	}
	if m.SchoolId != 0 {
		i = encodeVarintYsschools(dAtA, i, uint64(m.SchoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MergeSchoolsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MergeSchoolsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MergeSchoolsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SystemSchoolId != 0 {
		i = encodeVarintYsschools(dAtA, i, uint64(m.SystemSchoolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.SchoolIds) > 0 {
		dAtA6 := make([]byte, len(m.SchoolIds)*10)
		var j5 int
		for _, num1 := range m.SchoolIds {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintYsschools(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MergeSchoolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MergeSchoolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MergeSchoolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Successful {
		i--
		if m.Successful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateSchoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSchoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSchoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.School != nil {
		{
			size, err := m.School.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYsschools(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateSchoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSchoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSchoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Successful {
		i--
		if m.Successful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddTeacherRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddTeacherRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddTeacherRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TeacherId) > 0 {
		i -= len(m.TeacherId)
		copy(dAtA[i:], m.TeacherId)
		i = encodeVarintYsschools(dAtA, i, uint64(len(m.TeacherId)))
		i--
		dAtA[i] = 0x12
	}
	if m.SchoolId != 0 {
		i = encodeVarintYsschools(dAtA, i, uint64(m.SchoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AddTeacherResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddTeacherResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddTeacherResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RemoveTeacherFromSchoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveTeacherFromSchoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveTeacherFromSchoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TeacherId) > 0 {
		i -= len(m.TeacherId)
		copy(dAtA[i:], m.TeacherId)
		i = encodeVarintYsschools(dAtA, i, uint64(len(m.TeacherId)))
		i--
		dAtA[i] = 0x12
	}
	if m.SchoolId != 0 {
		i = encodeVarintYsschools(dAtA, i, uint64(m.SchoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RemoveTeacherFromSchoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveTeacherFromSchoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveTeacherFromSchoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CreateSchoolConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSchoolConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSchoolConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SchoolConfig != nil {
		{
			size, err := m.SchoolConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYsschools(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSchoolConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSchoolConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSchoolConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SchoolId != 0 {
		i = encodeVarintYsschools(dAtA, i, uint64(m.SchoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateSchoolConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSchoolConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSchoolConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SchoolConfig != nil {
		{
			size, err := m.SchoolConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintYsschools(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateSchoolConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateSchoolConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateSchoolConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SchoolId != 0 {
		i = encodeVarintYsschools(dAtA, i, uint64(m.SchoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintYsschools(dAtA []byte, offset int, v uint64) int {
	offset -= sovYsschools(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *School) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovYsschools(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovYsschools(uint64(l))
	}
	if m.Country != 0 {
		n += 1 + sovYsschools(uint64(m.Country))
	}
	if m.CityId != 0 {
		n += 1 + sovYsschools(uint64(m.CityId))
	}
	if m.DistrictId != 0 {
		n += 1 + sovYsschools(uint64(m.DistrictId))
	}
	if m.Point != nil {
		l = m.Point.Size()
		n += 1 + l + sovYsschools(uint64(l))
	}
	l = len(m.Phone)
	if l > 0 {
		n += 1 + l + sovYsschools(uint64(l))
	}
	return n
}

func (m *SchoolConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SchoolId != 0 {
		n += 1 + sovYsschools(uint64(m.SchoolId))
	}
	l = len(m.PlanId)
	if l > 0 {
		n += 1 + l + sovYsschools(uint64(l))
	}
	if m.Country != 0 {
		n += 1 + sovYsschools(uint64(m.Country))
	}
	if m.PlanExpiredAt != nil {
		l = m.PlanExpiredAt.Size()
		n += 1 + l + sovYsschools(uint64(l))
	}
	if m.PlanDuration != 0 {
		n += 1 + sovYsschools(uint64(m.PlanDuration))
	}
	if len(m.Privileges) > 0 {
		l = 0
		for _, e := range m.Privileges {
			l += sovYsschools(uint64(e))
		}
		n += 1 + sovYsschools(uint64(l)) + l
	}
	return n
}

func (m *MergeSchoolsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SchoolIds) > 0 {
		l = 0
		for _, e := range m.SchoolIds {
			l += sovYsschools(uint64(e))
		}
		n += 1 + sovYsschools(uint64(l)) + l
	}
	if m.SystemSchoolId != 0 {
		n += 1 + sovYsschools(uint64(m.SystemSchoolId))
	}
	return n
}

func (m *MergeSchoolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Successful {
		n += 2
	}
	return n
}

func (m *UpdateSchoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.School != nil {
		l = m.School.Size()
		n += 1 + l + sovYsschools(uint64(l))
	}
	return n
}

func (m *UpdateSchoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Successful {
		n += 2
	}
	return n
}

func (m *AddTeacherRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SchoolId != 0 {
		n += 1 + sovYsschools(uint64(m.SchoolId))
	}
	l = len(m.TeacherId)
	if l > 0 {
		n += 1 + l + sovYsschools(uint64(l))
	}
	return n
}

func (m *AddTeacherResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RemoveTeacherFromSchoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SchoolId != 0 {
		n += 1 + sovYsschools(uint64(m.SchoolId))
	}
	l = len(m.TeacherId)
	if l > 0 {
		n += 1 + l + sovYsschools(uint64(l))
	}
	return n
}

func (m *RemoveTeacherFromSchoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CreateSchoolConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SchoolConfig != nil {
		l = m.SchoolConfig.Size()
		n += 1 + l + sovYsschools(uint64(l))
	}
	return n
}

func (m *CreateSchoolConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SchoolId != 0 {
		n += 1 + sovYsschools(uint64(m.SchoolId))
	}
	return n
}

func (m *UpdateSchoolConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SchoolConfig != nil {
		l = m.SchoolConfig.Size()
		n += 1 + l + sovYsschools(uint64(l))
	}
	return n
}

func (m *UpdateSchoolConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SchoolId != 0 {
		n += 1 + sovYsschools(uint64(m.SchoolId))
	}
	return n
}

func sovYsschools(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozYsschools(x uint64) (n int) {
	return sovYsschools(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *School) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&School{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`CityId:` + fmt.Sprintf("%v", this.CityId) + `,`,
		`DistrictId:` + fmt.Sprintf("%v", this.DistrictId) + `,`,
		`Point:` + strings.Replace(fmt.Sprintf("%v", this.Point), "Point", "Point", 1) + `,`,
		`Phone:` + fmt.Sprintf("%v", this.Phone) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SchoolConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SchoolConfig{`,
		`SchoolId:` + fmt.Sprintf("%v", this.SchoolId) + `,`,
		`PlanId:` + fmt.Sprintf("%v", this.PlanId) + `,`,
		`Country:` + fmt.Sprintf("%v", this.Country) + `,`,
		`PlanExpiredAt:` + strings.Replace(fmt.Sprintf("%v", this.PlanExpiredAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`PlanDuration:` + fmt.Sprintf("%v", this.PlanDuration) + `,`,
		`Privileges:` + fmt.Sprintf("%v", this.Privileges) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MergeSchoolsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MergeSchoolsRequest{`,
		`SchoolIds:` + fmt.Sprintf("%v", this.SchoolIds) + `,`,
		`SystemSchoolId:` + fmt.Sprintf("%v", this.SystemSchoolId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MergeSchoolsResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MergeSchoolsResponse{`,
		`Successful:` + fmt.Sprintf("%v", this.Successful) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSchoolRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSchoolRequest{`,
		`School:` + strings.Replace(this.School.String(), "School", "School", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSchoolResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSchoolResponse{`,
		`Successful:` + fmt.Sprintf("%v", this.Successful) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddTeacherRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddTeacherRequest{`,
		`SchoolId:` + fmt.Sprintf("%v", this.SchoolId) + `,`,
		`TeacherId:` + fmt.Sprintf("%v", this.TeacherId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddTeacherResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddTeacherResponse{`,
		`}`,
	}, "")
	return s
}
func (this *RemoveTeacherFromSchoolRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveTeacherFromSchoolRequest{`,
		`SchoolId:` + fmt.Sprintf("%v", this.SchoolId) + `,`,
		`TeacherId:` + fmt.Sprintf("%v", this.TeacherId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoveTeacherFromSchoolResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoveTeacherFromSchoolResponse{`,
		`}`,
	}, "")
	return s
}
func (this *CreateSchoolConfigRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSchoolConfigRequest{`,
		`SchoolConfig:` + strings.Replace(this.SchoolConfig.String(), "SchoolConfig", "SchoolConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateSchoolConfigResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateSchoolConfigResponse{`,
		`SchoolId:` + fmt.Sprintf("%v", this.SchoolId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSchoolConfigRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSchoolConfigRequest{`,
		`SchoolConfig:` + strings.Replace(this.SchoolConfig.String(), "SchoolConfig", "SchoolConfig", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateSchoolConfigResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateSchoolConfigResponse{`,
		`SchoolId:` + fmt.Sprintf("%v", this.SchoolId) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringYsschools(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *School) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYsschools
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: School: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: School: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsschools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsschools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYsschools
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYsschools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsschools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= bob.Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CityId", wireType)
			}
			m.CityId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsschools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CityId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistrictId", wireType)
			}
			m.DistrictId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsschools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DistrictId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Point", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsschools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYsschools
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYsschools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Point == nil {
				m.Point = &Point{}
			}
			if err := m.Point.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsschools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYsschools
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYsschools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYsschools(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYsschools
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SchoolConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYsschools
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SchoolConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SchoolConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchoolId", wireType)
			}
			m.SchoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsschools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchoolId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsschools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYsschools
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYsschools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsschools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= bob.Country(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanExpiredAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsschools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYsschools
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYsschools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlanExpiredAt == nil {
				m.PlanExpiredAt = &types.Timestamp{}
			}
			if err := m.PlanExpiredAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanDuration", wireType)
			}
			m.PlanDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsschools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanDuration |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v PlanPrivilege
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowYsschools
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= PlanPrivilege(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Privileges = append(m.Privileges, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowYsschools
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthYsschools
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthYsschools
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Privileges) == 0 {
					m.Privileges = make([]PlanPrivilege, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v PlanPrivilege
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowYsschools
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= PlanPrivilege(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Privileges = append(m.Privileges, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Privileges", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipYsschools(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYsschools
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MergeSchoolsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYsschools
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MergeSchoolsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MergeSchoolsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowYsschools
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SchoolIds = append(m.SchoolIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowYsschools
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthYsschools
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthYsschools
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SchoolIds) == 0 {
					m.SchoolIds = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowYsschools
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SchoolIds = append(m.SchoolIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SchoolIds", wireType)
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemSchoolId", wireType)
			}
			m.SystemSchoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsschools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SystemSchoolId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipYsschools(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYsschools
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MergeSchoolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYsschools
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MergeSchoolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MergeSchoolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Successful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsschools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Successful = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipYsschools(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYsschools
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSchoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYsschools
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSchoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSchoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field School", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsschools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYsschools
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYsschools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.School == nil {
				m.School = &School{}
			}
			if err := m.School.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYsschools(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYsschools
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSchoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYsschools
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSchoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSchoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Successful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsschools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Successful = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipYsschools(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYsschools
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddTeacherRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYsschools
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddTeacherRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddTeacherRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchoolId", wireType)
			}
			m.SchoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsschools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchoolId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeacherId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsschools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYsschools
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYsschools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeacherId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYsschools(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYsschools
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddTeacherResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYsschools
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddTeacherResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddTeacherResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipYsschools(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYsschools
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveTeacherFromSchoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYsschools
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveTeacherFromSchoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveTeacherFromSchoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchoolId", wireType)
			}
			m.SchoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsschools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchoolId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeacherId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsschools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYsschools
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthYsschools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeacherId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYsschools(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYsschools
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveTeacherFromSchoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYsschools
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveTeacherFromSchoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveTeacherFromSchoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipYsschools(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYsschools
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSchoolConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYsschools
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSchoolConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSchoolConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchoolConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsschools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYsschools
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYsschools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SchoolConfig == nil {
				m.SchoolConfig = &SchoolConfig{}
			}
			if err := m.SchoolConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYsschools(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYsschools
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSchoolConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYsschools
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSchoolConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSchoolConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchoolId", wireType)
			}
			m.SchoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsschools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchoolId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipYsschools(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYsschools
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSchoolConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYsschools
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSchoolConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSchoolConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchoolConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsschools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYsschools
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthYsschools
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SchoolConfig == nil {
				m.SchoolConfig = &SchoolConfig{}
			}
			if err := m.SchoolConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYsschools(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYsschools
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateSchoolConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYsschools
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateSchoolConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateSchoolConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchoolId", wireType)
			}
			m.SchoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYsschools
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchoolId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipYsschools(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthYsschools
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipYsschools(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowYsschools
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowYsschools
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowYsschools
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthYsschools
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupYsschools
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthYsschools
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthYsschools        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowYsschools          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupYsschools = fmt.Errorf("proto: unexpected end of group")
)
