// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tomchat.proto

package pb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this message only for server
// message broker from bob
type AssignToCoachRequest struct {
	CoachId   string `protobuf:"bytes,1,opt,name=coach_id,json=coachId,proto3" json:"coach_id,omitempty"`
	StudentId string `protobuf:"bytes,2,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
}

func (m *AssignToCoachRequest) Reset()      { *m = AssignToCoachRequest{} }
func (*AssignToCoachRequest) ProtoMessage() {}
func (*AssignToCoachRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{0}
}
func (m *AssignToCoachRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssignToCoachRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssignToCoachRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssignToCoachRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignToCoachRequest.Merge(m, src)
}
func (m *AssignToCoachRequest) XXX_Size() int {
	return m.Size()
}
func (m *AssignToCoachRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignToCoachRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AssignToCoachRequest proto.InternalMessageInfo

func (m *AssignToCoachRequest) GetCoachId() string {
	if m != nil {
		return m.CoachId
	}
	return ""
}

func (m *AssignToCoachRequest) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

type SendMessageRequest struct {
	ConversationId string      `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	Message        string      `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	UrlMedia       string      `protobuf:"bytes,3,opt,name=url_media,json=urlMedia,proto3" json:"url_media,omitempty"`
	Type           MessageType `protobuf:"varint,4,opt,name=type,proto3,enum=manabie.tom.MessageType" json:"type,omitempty"`
	LocalMessageId string      `protobuf:"bytes,5,opt,name=local_message_id,json=localMessageId,proto3" json:"local_message_id,omitempty"`
	// use for message system
	TargetUser string `protobuf:"bytes,6,opt,name=target_user,json=targetUser,proto3" json:"target_user,omitempty"`
}

func (m *SendMessageRequest) Reset()      { *m = SendMessageRequest{} }
func (*SendMessageRequest) ProtoMessage() {}
func (*SendMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{1}
}
func (m *SendMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendMessageRequest.Merge(m, src)
}
func (m *SendMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *SendMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendMessageRequest proto.InternalMessageInfo

func (m *SendMessageRequest) GetConversationId() string {
	if m != nil {
		return m.ConversationId
	}
	return ""
}

func (m *SendMessageRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *SendMessageRequest) GetUrlMedia() string {
	if m != nil {
		return m.UrlMedia
	}
	return ""
}

func (m *SendMessageRequest) GetType() MessageType {
	if m != nil {
		return m.Type
	}
	return MESSAGE_TYPE_TEXT
}

func (m *SendMessageRequest) GetLocalMessageId() string {
	if m != nil {
		return m.LocalMessageId
	}
	return ""
}

func (m *SendMessageRequest) GetTargetUser() string {
	if m != nil {
		return m.TargetUser
	}
	return ""
}

type SendMessageResponse struct {
	MessageId      string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	LocalMessageId string `protobuf:"bytes,2,opt,name=local_message_id,json=localMessageId,proto3" json:"local_message_id,omitempty"`
}

func (m *SendMessageResponse) Reset()      { *m = SendMessageResponse{} }
func (*SendMessageResponse) ProtoMessage() {}
func (*SendMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{2}
}
func (m *SendMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendMessageResponse.Merge(m, src)
}
func (m *SendMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *SendMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendMessageResponse proto.InternalMessageInfo

func (m *SendMessageResponse) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *SendMessageResponse) GetLocalMessageId() string {
	if m != nil {
		return m.LocalMessageId
	}
	return ""
}

type MessageResponse struct {
	MessageId      string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	ConversationId string `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	UserId         string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// may be contain CodesMessageType if MessageType == event or button
	Content          string           `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	UrlMedia         string           `protobuf:"bytes,5,opt,name=url_media,json=urlMedia,proto3" json:"url_media,omitempty"`
	Type             MessageType      `protobuf:"varint,6,opt,name=type,proto3,enum=manabie.tom.MessageType" json:"type,omitempty"`
	CreatedAt        *types.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	LocalMessageId   string           `protobuf:"bytes,8,opt,name=local_message_id,json=localMessageId,proto3" json:"local_message_id,omitempty"`
	TargetUser       string           `protobuf:"bytes,9,opt,name=target_user,json=targetUser,proto3" json:"target_user,omitempty"`
	IsDeleted        bool             `protobuf:"varint,10,opt,name=is_deleted,json=isDeleted,proto3" json:"is_deleted,omitempty"`
	DeletedBy        string           `protobuf:"bytes,11,opt,name=deleted_by,json=deletedBy,proto3" json:"deleted_by,omitempty"`
	ConversationName string           `protobuf:"bytes,12,opt,name=conversation_name,json=conversationName,proto3" json:"conversation_name,omitempty"`
}

func (m *MessageResponse) Reset()      { *m = MessageResponse{} }
func (*MessageResponse) ProtoMessage() {}
func (*MessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{3}
}
func (m *MessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageResponse.Merge(m, src)
}
func (m *MessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *MessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MessageResponse proto.InternalMessageInfo

func (m *MessageResponse) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *MessageResponse) GetConversationId() string {
	if m != nil {
		return m.ConversationId
	}
	return ""
}

func (m *MessageResponse) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *MessageResponse) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *MessageResponse) GetUrlMedia() string {
	if m != nil {
		return m.UrlMedia
	}
	return ""
}

func (m *MessageResponse) GetType() MessageType {
	if m != nil {
		return m.Type
	}
	return MESSAGE_TYPE_TEXT
}

func (m *MessageResponse) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *MessageResponse) GetLocalMessageId() string {
	if m != nil {
		return m.LocalMessageId
	}
	return ""
}

func (m *MessageResponse) GetTargetUser() string {
	if m != nil {
		return m.TargetUser
	}
	return ""
}

func (m *MessageResponse) GetIsDeleted() bool {
	if m != nil {
		return m.IsDeleted
	}
	return false
}

func (m *MessageResponse) GetDeletedBy() string {
	if m != nil {
		return m.DeletedBy
	}
	return ""
}

func (m *MessageResponse) GetConversationName() string {
	if m != nil {
		return m.ConversationName
	}
	return ""
}

type SeenMessageRequest struct {
	ConversationId string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
}

func (m *SeenMessageRequest) Reset()      { *m = SeenMessageRequest{} }
func (*SeenMessageRequest) ProtoMessage() {}
func (*SeenMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{4}
}
func (m *SeenMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeenMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeenMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeenMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeenMessageRequest.Merge(m, src)
}
func (m *SeenMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *SeenMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SeenMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SeenMessageRequest proto.InternalMessageInfo

func (m *SeenMessageRequest) GetConversationId() string {
	if m != nil {
		return m.ConversationId
	}
	return ""
}

type SeenMessageResponse struct {
}

func (m *SeenMessageResponse) Reset()      { *m = SeenMessageResponse{} }
func (*SeenMessageResponse) ProtoMessage() {}
func (*SeenMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{5}
}
func (m *SeenMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeenMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeenMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeenMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeenMessageResponse.Merge(m, src)
}
func (m *SeenMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *SeenMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SeenMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SeenMessageResponse proto.InternalMessageInfo

type SubscribeRequest struct {
}

func (m *SubscribeRequest) Reset()      { *m = SubscribeRequest{} }
func (*SubscribeRequest) ProtoMessage() {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{6}
}
func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

type SubscribeResponse struct {
	// Types that are valid to be assigned to Event:
	//
	//	*SubscribeResponse_MessageResponse
	Event isSubscribeResponse_Event `protobuf_oneof:"event"`
}

func (m *SubscribeResponse) Reset()      { *m = SubscribeResponse{} }
func (*SubscribeResponse) ProtoMessage() {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{7}
}
func (m *SubscribeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeResponse.Merge(m, src)
}
func (m *SubscribeResponse) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeResponse proto.InternalMessageInfo

type isSubscribeResponse_Event interface {
	isSubscribeResponse_Event()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type SubscribeResponse_MessageResponse struct {
	MessageResponse *MessageResponse `protobuf:"bytes,1,opt,name=messageResponse,proto3,oneof" json:"messageResponse,omitempty"`
}

func (*SubscribeResponse_MessageResponse) isSubscribeResponse_Event() {}

func (m *SubscribeResponse) GetEvent() isSubscribeResponse_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *SubscribeResponse) GetMessageResponse() *MessageResponse {
	if x, ok := m.GetEvent().(*SubscribeResponse_MessageResponse); ok {
		return x.MessageResponse
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SubscribeResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SubscribeResponse_MessageResponse)(nil),
	}
}

// only for server
type InternalSendMessageRequest struct {
	NodeReceive map[string]*InternalSendMessageRequest_UserIDs `protobuf:"bytes,1,rep,name=node_receive,json=nodeReceive,proto3" json:"node_receive,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Event       *Event                                         `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
}

func (m *InternalSendMessageRequest) Reset()      { *m = InternalSendMessageRequest{} }
func (*InternalSendMessageRequest) ProtoMessage() {}
func (*InternalSendMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{8}
}
func (m *InternalSendMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InternalSendMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InternalSendMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InternalSendMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalSendMessageRequest.Merge(m, src)
}
func (m *InternalSendMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *InternalSendMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalSendMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InternalSendMessageRequest proto.InternalMessageInfo

func (m *InternalSendMessageRequest) GetNodeReceive() map[string]*InternalSendMessageRequest_UserIDs {
	if m != nil {
		return m.NodeReceive
	}
	return nil
}

func (m *InternalSendMessageRequest) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type InternalSendMessageRequest_UserIDs struct {
	Ids []string `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (m *InternalSendMessageRequest_UserIDs) Reset()      { *m = InternalSendMessageRequest_UserIDs{} }
func (*InternalSendMessageRequest_UserIDs) ProtoMessage() {}
func (*InternalSendMessageRequest_UserIDs) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{8, 0}
}
func (m *InternalSendMessageRequest_UserIDs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InternalSendMessageRequest_UserIDs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InternalSendMessageRequest_UserIDs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InternalSendMessageRequest_UserIDs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InternalSendMessageRequest_UserIDs.Merge(m, src)
}
func (m *InternalSendMessageRequest_UserIDs) XXX_Size() int {
	return m.Size()
}
func (m *InternalSendMessageRequest_UserIDs) XXX_DiscardUnknown() {
	xxx_messageInfo_InternalSendMessageRequest_UserIDs.DiscardUnknown(m)
}

var xxx_messageInfo_InternalSendMessageRequest_UserIDs proto.InternalMessageInfo

func (m *InternalSendMessageRequest_UserIDs) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

type ConversationListRequest struct {
	// total message return
	Limit uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// time of last conversation
	EndAt *types.Timestamp `protobuf:"bytes,2,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	// optionals
	ClassId uint32 `protobuf:"varint,3,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
}

func (m *ConversationListRequest) Reset()      { *m = ConversationListRequest{} }
func (*ConversationListRequest) ProtoMessage() {}
func (*ConversationListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{9}
}
func (m *ConversationListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationListRequest.Merge(m, src)
}
func (m *ConversationListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConversationListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationListRequest proto.InternalMessageInfo

func (m *ConversationListRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ConversationListRequest) GetEndAt() *types.Timestamp {
	if m != nil {
		return m.EndAt
	}
	return nil
}

func (m *ConversationListRequest) GetClassId() uint32 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

type Conversation struct {
	ConversationId    string               `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	CoachId           string               `protobuf:"bytes,2,opt,name=coach_id,json=coachId,proto3" json:"coach_id,omitempty"` // Deprecated: Do not use.
	StudentId         string               `protobuf:"bytes,3,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	GuestIds          []string             `protobuf:"bytes,4,rep,name=guest_ids,json=guestIds,proto3" json:"guest_ids,omitempty"` // Deprecated: Do not use.
	Seen              bool                 `protobuf:"varint,5,opt,name=seen,proto3" json:"seen,omitempty"`
	LastMessage       *MessageResponse     `protobuf:"bytes,6,opt,name=last_message,json=lastMessage,proto3" json:"last_message,omitempty"`
	TutorId           string               `protobuf:"bytes,7,opt,name=tutor_id,json=tutorId,proto3" json:"tutor_id,omitempty"`                                 // Deprecated: Do not use.
	StudentQuestionId string               `protobuf:"bytes,8,opt,name=student_question_id,json=studentQuestionId,proto3" json:"student_question_id,omitempty"` // Deprecated: Do not use.
	Status            ConversationStatus   `protobuf:"varint,9,opt,name=status,proto3,enum=manabie.tom.ConversationStatus" json:"status,omitempty"`
	PreviousCoachIds  []string             `protobuf:"bytes,10,rep,name=previous_coach_ids,json=previousCoachIds,proto3" json:"previous_coach_ids,omitempty"` // Deprecated: Do not use.
	Users             []*Conversation_User `protobuf:"bytes,11,rep,name=users,proto3" json:"users,omitempty"`
	ClassId           uint32               `protobuf:"varint,12,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"` // Deprecated: Do not use.
	ConversationType  ConversationType     `protobuf:"varint,13,opt,name=conversation_type,json=conversationType,proto3,enum=manabie.tom.ConversationType" json:"conversation_type,omitempty"`
	ConversationName  string               `protobuf:"bytes,14,opt,name=conversation_name,json=conversationName,proto3" json:"conversation_name,omitempty"`
}

func (m *Conversation) Reset()      { *m = Conversation{} }
func (*Conversation) ProtoMessage() {}
func (*Conversation) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{10}
}
func (m *Conversation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Conversation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Conversation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Conversation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Conversation.Merge(m, src)
}
func (m *Conversation) XXX_Size() int {
	return m.Size()
}
func (m *Conversation) XXX_DiscardUnknown() {
	xxx_messageInfo_Conversation.DiscardUnknown(m)
}

var xxx_messageInfo_Conversation proto.InternalMessageInfo

func (m *Conversation) GetConversationId() string {
	if m != nil {
		return m.ConversationId
	}
	return ""
}

// Deprecated: Do not use.
func (m *Conversation) GetCoachId() string {
	if m != nil {
		return m.CoachId
	}
	return ""
}

func (m *Conversation) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

// Deprecated: Do not use.
func (m *Conversation) GetGuestIds() []string {
	if m != nil {
		return m.GuestIds
	}
	return nil
}

func (m *Conversation) GetSeen() bool {
	if m != nil {
		return m.Seen
	}
	return false
}

func (m *Conversation) GetLastMessage() *MessageResponse {
	if m != nil {
		return m.LastMessage
	}
	return nil
}

// Deprecated: Do not use.
func (m *Conversation) GetTutorId() string {
	if m != nil {
		return m.TutorId
	}
	return ""
}

// Deprecated: Do not use.
func (m *Conversation) GetStudentQuestionId() string {
	if m != nil {
		return m.StudentQuestionId
	}
	return ""
}

func (m *Conversation) GetStatus() ConversationStatus {
	if m != nil {
		return m.Status
	}
	return CONVERSATION_STATUS_NONE
}

// Deprecated: Do not use.
func (m *Conversation) GetPreviousCoachIds() []string {
	if m != nil {
		return m.PreviousCoachIds
	}
	return nil
}

func (m *Conversation) GetUsers() []*Conversation_User {
	if m != nil {
		return m.Users
	}
	return nil
}

// Deprecated: Do not use.
func (m *Conversation) GetClassId() uint32 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

func (m *Conversation) GetConversationType() ConversationType {
	if m != nil {
		return m.ConversationType
	}
	return CONVERSATION_CLASS
}

func (m *Conversation) GetConversationName() string {
	if m != nil {
		return m.ConversationName
	}
	return ""
}

type Conversation_User struct {
	Id        string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Group     string           `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	IsPresent bool             `protobuf:"varint,3,opt,name=is_present,json=isPresent,proto3" json:"is_present,omitempty"`
	SeenAt    *types.Timestamp `protobuf:"bytes,4,opt,name=seen_at,json=seenAt,proto3" json:"seen_at,omitempty"`
}

func (m *Conversation_User) Reset()      { *m = Conversation_User{} }
func (*Conversation_User) ProtoMessage() {}
func (*Conversation_User) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{10, 0}
}
func (m *Conversation_User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Conversation_User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Conversation_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Conversation_User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Conversation_User.Merge(m, src)
}
func (m *Conversation_User) XXX_Size() int {
	return m.Size()
}
func (m *Conversation_User) XXX_DiscardUnknown() {
	xxx_messageInfo_Conversation_User.DiscardUnknown(m)
}

var xxx_messageInfo_Conversation_User proto.InternalMessageInfo

func (m *Conversation_User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Conversation_User) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *Conversation_User) GetIsPresent() bool {
	if m != nil {
		return m.IsPresent
	}
	return false
}

func (m *Conversation_User) GetSeenAt() *types.Timestamp {
	if m != nil {
		return m.SeenAt
	}
	return nil
}

type ConversationListResponse struct {
	Conversations []*Conversation `protobuf:"bytes,1,rep,name=conversations,proto3" json:"conversations,omitempty"`
}

func (m *ConversationListResponse) Reset()      { *m = ConversationListResponse{} }
func (*ConversationListResponse) ProtoMessage() {}
func (*ConversationListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{11}
}
func (m *ConversationListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationListResponse.Merge(m, src)
}
func (m *ConversationListResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConversationListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationListResponse proto.InternalMessageInfo

func (m *ConversationListResponse) GetConversations() []*Conversation {
	if m != nil {
		return m.Conversations
	}
	return nil
}

type ConversationByStudentQuestionRequest struct {
	StudentQuestionIds []string `protobuf:"bytes,1,rep,name=student_question_ids,json=studentQuestionIds,proto3" json:"student_question_ids,omitempty"`
}

func (m *ConversationByStudentQuestionRequest) Reset()      { *m = ConversationByStudentQuestionRequest{} }
func (*ConversationByStudentQuestionRequest) ProtoMessage() {}
func (*ConversationByStudentQuestionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{12}
}
func (m *ConversationByStudentQuestionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationByStudentQuestionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationByStudentQuestionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationByStudentQuestionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationByStudentQuestionRequest.Merge(m, src)
}
func (m *ConversationByStudentQuestionRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConversationByStudentQuestionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationByStudentQuestionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationByStudentQuestionRequest proto.InternalMessageInfo

func (m *ConversationByStudentQuestionRequest) GetStudentQuestionIds() []string {
	if m != nil {
		return m.StudentQuestionIds
	}
	return nil
}

type ConversationByStudentQuestionResponse struct {
	Conversations []*Conversation `protobuf:"bytes,1,rep,name=conversations,proto3" json:"conversations,omitempty"`
}

func (m *ConversationByStudentQuestionResponse) Reset()      { *m = ConversationByStudentQuestionResponse{} }
func (*ConversationByStudentQuestionResponse) ProtoMessage() {}
func (*ConversationByStudentQuestionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{13}
}
func (m *ConversationByStudentQuestionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationByStudentQuestionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationByStudentQuestionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationByStudentQuestionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationByStudentQuestionResponse.Merge(m, src)
}
func (m *ConversationByStudentQuestionResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConversationByStudentQuestionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationByStudentQuestionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationByStudentQuestionResponse proto.InternalMessageInfo

func (m *ConversationByStudentQuestionResponse) GetConversations() []*Conversation {
	if m != nil {
		return m.Conversations
	}
	return nil
}

type ConversationByClassRequest struct {
	// total message return
	Limit uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// time of last conversation
	EndAt   *types.Timestamp `protobuf:"bytes,2,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	ClassId uint32           `protobuf:"varint,3,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
}

func (m *ConversationByClassRequest) Reset()      { *m = ConversationByClassRequest{} }
func (*ConversationByClassRequest) ProtoMessage() {}
func (*ConversationByClassRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{14}
}
func (m *ConversationByClassRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationByClassRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationByClassRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationByClassRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationByClassRequest.Merge(m, src)
}
func (m *ConversationByClassRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConversationByClassRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationByClassRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationByClassRequest proto.InternalMessageInfo

func (m *ConversationByClassRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ConversationByClassRequest) GetEndAt() *types.Timestamp {
	if m != nil {
		return m.EndAt
	}
	return nil
}

func (m *ConversationByClassRequest) GetClassId() uint32 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

type ConversationByClassResponse struct {
	Conversations []*Conversation `protobuf:"bytes,1,rep,name=conversations,proto3" json:"conversations,omitempty"`
}

func (m *ConversationByClassResponse) Reset()      { *m = ConversationByClassResponse{} }
func (*ConversationByClassResponse) ProtoMessage() {}
func (*ConversationByClassResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{15}
}
func (m *ConversationByClassResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationByClassResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationByClassResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationByClassResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationByClassResponse.Merge(m, src)
}
func (m *ConversationByClassResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConversationByClassResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationByClassResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationByClassResponse proto.InternalMessageInfo

func (m *ConversationByClassResponse) GetConversations() []*Conversation {
	if m != nil {
		return m.Conversations
	}
	return nil
}

type ConversationDetailRequest struct {
	ConversationId string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	// total message return
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// time of last message
	EndAt *types.Timestamp `protobuf:"bytes,3,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	// Types that are valid to be assigned to MessageType:
	//
	//	*ConversationDetailRequest_Include_
	//	*ConversationDetailRequest_Exclude_
	MessageType isConversationDetailRequest_MessageType `protobuf_oneof:"message_type"`
}

func (m *ConversationDetailRequest) Reset()      { *m = ConversationDetailRequest{} }
func (*ConversationDetailRequest) ProtoMessage() {}
func (*ConversationDetailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{16}
}
func (m *ConversationDetailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationDetailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationDetailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationDetailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationDetailRequest.Merge(m, src)
}
func (m *ConversationDetailRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConversationDetailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationDetailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationDetailRequest proto.InternalMessageInfo

type isConversationDetailRequest_MessageType interface {
	isConversationDetailRequest_MessageType()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type ConversationDetailRequest_Include_ struct {
	Include *ConversationDetailRequest_Include `protobuf:"bytes,4,opt,name=include,proto3,oneof" json:"include,omitempty"`
}
type ConversationDetailRequest_Exclude_ struct {
	Exclude *ConversationDetailRequest_Exclude `protobuf:"bytes,5,opt,name=exclude,proto3,oneof" json:"exclude,omitempty"`
}

func (*ConversationDetailRequest_Include_) isConversationDetailRequest_MessageType() {}
func (*ConversationDetailRequest_Exclude_) isConversationDetailRequest_MessageType() {}

func (m *ConversationDetailRequest) GetMessageType() isConversationDetailRequest_MessageType {
	if m != nil {
		return m.MessageType
	}
	return nil
}

func (m *ConversationDetailRequest) GetConversationId() string {
	if m != nil {
		return m.ConversationId
	}
	return ""
}

func (m *ConversationDetailRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ConversationDetailRequest) GetEndAt() *types.Timestamp {
	if m != nil {
		return m.EndAt
	}
	return nil
}

// Deprecated: Do not use.
func (m *ConversationDetailRequest) GetInclude() *ConversationDetailRequest_Include {
	if x, ok := m.GetMessageType().(*ConversationDetailRequest_Include_); ok {
		return x.Include
	}
	return nil
}

// Deprecated: Do not use.
func (m *ConversationDetailRequest) GetExclude() *ConversationDetailRequest_Exclude {
	if x, ok := m.GetMessageType().(*ConversationDetailRequest_Exclude_); ok {
		return x.Exclude
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ConversationDetailRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ConversationDetailRequest_Include_)(nil),
		(*ConversationDetailRequest_Exclude_)(nil),
	}
}

type ConversationDetailRequest_Include struct {
	Types []CodesMessageType `protobuf:"varint,1,rep,packed,name=types,proto3,enum=manabie.tom.CodesMessageType" json:"types,omitempty"`
}

func (m *ConversationDetailRequest_Include) Reset()      { *m = ConversationDetailRequest_Include{} }
func (*ConversationDetailRequest_Include) ProtoMessage() {}
func (*ConversationDetailRequest_Include) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{16, 0}
}
func (m *ConversationDetailRequest_Include) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationDetailRequest_Include) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationDetailRequest_Include.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationDetailRequest_Include) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationDetailRequest_Include.Merge(m, src)
}
func (m *ConversationDetailRequest_Include) XXX_Size() int {
	return m.Size()
}
func (m *ConversationDetailRequest_Include) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationDetailRequest_Include.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationDetailRequest_Include proto.InternalMessageInfo

func (m *ConversationDetailRequest_Include) GetTypes() []CodesMessageType {
	if m != nil {
		return m.Types
	}
	return nil
}

type ConversationDetailRequest_Exclude struct {
	Types []CodesMessageType `protobuf:"varint,1,rep,packed,name=types,proto3,enum=manabie.tom.CodesMessageType" json:"types,omitempty"`
}

func (m *ConversationDetailRequest_Exclude) Reset()      { *m = ConversationDetailRequest_Exclude{} }
func (*ConversationDetailRequest_Exclude) ProtoMessage() {}
func (*ConversationDetailRequest_Exclude) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{16, 1}
}
func (m *ConversationDetailRequest_Exclude) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationDetailRequest_Exclude) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationDetailRequest_Exclude.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationDetailRequest_Exclude) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationDetailRequest_Exclude.Merge(m, src)
}
func (m *ConversationDetailRequest_Exclude) XXX_Size() int {
	return m.Size()
}
func (m *ConversationDetailRequest_Exclude) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationDetailRequest_Exclude.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationDetailRequest_Exclude proto.InternalMessageInfo

func (m *ConversationDetailRequest_Exclude) GetTypes() []CodesMessageType {
	if m != nil {
		return m.Types
	}
	return nil
}

type ConversationDetailResponse struct {
	Messages []*MessageResponse `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (m *ConversationDetailResponse) Reset()      { *m = ConversationDetailResponse{} }
func (*ConversationDetailResponse) ProtoMessage() {}
func (*ConversationDetailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{17}
}
func (m *ConversationDetailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationDetailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationDetailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationDetailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationDetailResponse.Merge(m, src)
}
func (m *ConversationDetailResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConversationDetailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationDetailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationDetailResponse proto.InternalMessageInfo

func (m *ConversationDetailResponse) GetMessages() []*MessageResponse {
	if m != nil {
		return m.Messages
	}
	return nil
}

type PushedNotificationMessage struct {
	Title    string           `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Body     string           `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	Data     *types.Struct    `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	PushedAt *types.Timestamp `protobuf:"bytes,4,opt,name=pushed_at,json=pushedAt,proto3" json:"pushed_at,omitempty"`
}

func (m *PushedNotificationMessage) Reset()      { *m = PushedNotificationMessage{} }
func (*PushedNotificationMessage) ProtoMessage() {}
func (*PushedNotificationMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{18}
}
func (m *PushedNotificationMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushedNotificationMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushedNotificationMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushedNotificationMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushedNotificationMessage.Merge(m, src)
}
func (m *PushedNotificationMessage) XXX_Size() int {
	return m.Size()
}
func (m *PushedNotificationMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PushedNotificationMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PushedNotificationMessage proto.InternalMessageInfo

func (m *PushedNotificationMessage) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PushedNotificationMessage) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *PushedNotificationMessage) GetData() *types.Struct {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PushedNotificationMessage) GetPushedAt() *types.Timestamp {
	if m != nil {
		return m.PushedAt
	}
	return nil
}

type RetrievePushedNotificationMessageRequest struct {
	DeviceToken string           `protobuf:"bytes,1,opt,name=device_token,json=deviceToken,proto3" json:"device_token,omitempty"`
	Limit       int32            `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Since       *types.Timestamp `protobuf:"bytes,3,opt,name=since,proto3" json:"since,omitempty"`
}

func (m *RetrievePushedNotificationMessageRequest) Reset() {
	*m = RetrievePushedNotificationMessageRequest{}
}
func (*RetrievePushedNotificationMessageRequest) ProtoMessage() {}
func (*RetrievePushedNotificationMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{19}
}
func (m *RetrievePushedNotificationMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrievePushedNotificationMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrievePushedNotificationMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrievePushedNotificationMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrievePushedNotificationMessageRequest.Merge(m, src)
}
func (m *RetrievePushedNotificationMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrievePushedNotificationMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrievePushedNotificationMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrievePushedNotificationMessageRequest proto.InternalMessageInfo

func (m *RetrievePushedNotificationMessageRequest) GetDeviceToken() string {
	if m != nil {
		return m.DeviceToken
	}
	return ""
}

func (m *RetrievePushedNotificationMessageRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *RetrievePushedNotificationMessageRequest) GetSince() *types.Timestamp {
	if m != nil {
		return m.Since
	}
	return nil
}

type RetrievePushedNotificationMessageResponse struct {
	Messages []*PushedNotificationMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (m *RetrievePushedNotificationMessageResponse) Reset() {
	*m = RetrievePushedNotificationMessageResponse{}
}
func (*RetrievePushedNotificationMessageResponse) ProtoMessage() {}
func (*RetrievePushedNotificationMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{20}
}
func (m *RetrievePushedNotificationMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrievePushedNotificationMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrievePushedNotificationMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrievePushedNotificationMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrievePushedNotificationMessageResponse.Merge(m, src)
}
func (m *RetrievePushedNotificationMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *RetrievePushedNotificationMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrievePushedNotificationMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrievePushedNotificationMessageResponse proto.InternalMessageInfo

func (m *RetrievePushedNotificationMessageResponse) GetMessages() []*PushedNotificationMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

type AutoCoachCustomMessageRequest struct {
	Message  string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	UrlMedia string `protobuf:"bytes,2,opt,name=url_media,json=urlMedia,proto3" json:"url_media,omitempty"`
}

func (m *AutoCoachCustomMessageRequest) Reset()      { *m = AutoCoachCustomMessageRequest{} }
func (*AutoCoachCustomMessageRequest) ProtoMessage() {}
func (*AutoCoachCustomMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{21}
}
func (m *AutoCoachCustomMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AutoCoachCustomMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AutoCoachCustomMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AutoCoachCustomMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutoCoachCustomMessageRequest.Merge(m, src)
}
func (m *AutoCoachCustomMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *AutoCoachCustomMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AutoCoachCustomMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AutoCoachCustomMessageRequest proto.InternalMessageInfo

func (m *AutoCoachCustomMessageRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *AutoCoachCustomMessageRequest) GetUrlMedia() string {
	if m != nil {
		return m.UrlMedia
	}
	return ""
}

type AutoCoachCustomMessageResponse struct {
	Successful bool `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
}

func (m *AutoCoachCustomMessageResponse) Reset()      { *m = AutoCoachCustomMessageResponse{} }
func (*AutoCoachCustomMessageResponse) ProtoMessage() {}
func (*AutoCoachCustomMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{22}
}
func (m *AutoCoachCustomMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AutoCoachCustomMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AutoCoachCustomMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AutoCoachCustomMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AutoCoachCustomMessageResponse.Merge(m, src)
}
func (m *AutoCoachCustomMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *AutoCoachCustomMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AutoCoachCustomMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AutoCoachCustomMessageResponse proto.InternalMessageInfo

func (m *AutoCoachCustomMessageResponse) GetSuccessful() bool {
	if m != nil {
		return m.Successful
	}
	return false
}

type GetConversationRequest struct {
	ConversationId string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	UserId         string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`     // Deprecated: Do not use.
	ClassId        uint32 `protobuf:"varint,3,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"` // Deprecated: Do not use.
}

func (m *GetConversationRequest) Reset()      { *m = GetConversationRequest{} }
func (*GetConversationRequest) ProtoMessage() {}
func (*GetConversationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{23}
}
func (m *GetConversationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetConversationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetConversationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetConversationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConversationRequest.Merge(m, src)
}
func (m *GetConversationRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetConversationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConversationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetConversationRequest proto.InternalMessageInfo

func (m *GetConversationRequest) GetConversationId() string {
	if m != nil {
		return m.ConversationId
	}
	return ""
}

// Deprecated: Do not use.
func (m *GetConversationRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// Deprecated: Do not use.
func (m *GetConversationRequest) GetClassId() uint32 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

type GetConversationResponse struct {
	Conversation *Conversation `protobuf:"bytes,1,opt,name=conversation,proto3" json:"conversation,omitempty"`
}

func (m *GetConversationResponse) Reset()      { *m = GetConversationResponse{} }
func (*GetConversationResponse) ProtoMessage() {}
func (*GetConversationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{24}
}
func (m *GetConversationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetConversationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetConversationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetConversationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConversationResponse.Merge(m, src)
}
func (m *GetConversationResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetConversationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConversationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetConversationResponse proto.InternalMessageInfo

func (m *GetConversationResponse) GetConversation() *Conversation {
	if m != nil {
		return m.Conversation
	}
	return nil
}

type TotalUserInConversationRequest struct {
	ConversationId string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	LessonId       string `protobuf:"bytes,2,opt,name=lesson_id,json=lessonId,proto3" json:"lesson_id,omitempty"`
}

func (m *TotalUserInConversationRequest) Reset()      { *m = TotalUserInConversationRequest{} }
func (*TotalUserInConversationRequest) ProtoMessage() {}
func (*TotalUserInConversationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{25}
}
func (m *TotalUserInConversationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TotalUserInConversationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TotalUserInConversationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TotalUserInConversationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TotalUserInConversationRequest.Merge(m, src)
}
func (m *TotalUserInConversationRequest) XXX_Size() int {
	return m.Size()
}
func (m *TotalUserInConversationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TotalUserInConversationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TotalUserInConversationRequest proto.InternalMessageInfo

func (m *TotalUserInConversationRequest) GetConversationId() string {
	if m != nil {
		return m.ConversationId
	}
	return ""
}

func (m *TotalUserInConversationRequest) GetLessonId() string {
	if m != nil {
		return m.LessonId
	}
	return ""
}

type TotalUserInConversationResponse struct {
	TotalUser uint32 `protobuf:"varint,1,opt,name=total_user,json=totalUser,proto3" json:"total_user,omitempty"`
}

func (m *TotalUserInConversationResponse) Reset()      { *m = TotalUserInConversationResponse{} }
func (*TotalUserInConversationResponse) ProtoMessage() {}
func (*TotalUserInConversationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{26}
}
func (m *TotalUserInConversationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TotalUserInConversationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TotalUserInConversationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TotalUserInConversationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TotalUserInConversationResponse.Merge(m, src)
}
func (m *TotalUserInConversationResponse) XXX_Size() int {
	return m.Size()
}
func (m *TotalUserInConversationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TotalUserInConversationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TotalUserInConversationResponse proto.InternalMessageInfo

func (m *TotalUserInConversationResponse) GetTotalUser() uint32 {
	if m != nil {
		return m.TotalUser
	}
	return 0
}

type ConversationByLessonRequest struct {
	// total message return
	Limit uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// time of last conversation
	EndAt    *types.Timestamp `protobuf:"bytes,2,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	LessonId string           `protobuf:"bytes,3,opt,name=lesson_id,json=lessonId,proto3" json:"lesson_id,omitempty"`
}

func (m *ConversationByLessonRequest) Reset()      { *m = ConversationByLessonRequest{} }
func (*ConversationByLessonRequest) ProtoMessage() {}
func (*ConversationByLessonRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{27}
}
func (m *ConversationByLessonRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationByLessonRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationByLessonRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationByLessonRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationByLessonRequest.Merge(m, src)
}
func (m *ConversationByLessonRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConversationByLessonRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationByLessonRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationByLessonRequest proto.InternalMessageInfo

func (m *ConversationByLessonRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ConversationByLessonRequest) GetEndAt() *types.Timestamp {
	if m != nil {
		return m.EndAt
	}
	return nil
}

func (m *ConversationByLessonRequest) GetLessonId() string {
	if m != nil {
		return m.LessonId
	}
	return ""
}

type ConversationByLessonResponse struct {
	Conversations []*Conversation `protobuf:"bytes,1,rep,name=conversations,proto3" json:"conversations,omitempty"`
}

func (m *ConversationByLessonResponse) Reset()      { *m = ConversationByLessonResponse{} }
func (*ConversationByLessonResponse) ProtoMessage() {}
func (*ConversationByLessonResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{28}
}
func (m *ConversationByLessonResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationByLessonResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationByLessonResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationByLessonResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationByLessonResponse.Merge(m, src)
}
func (m *ConversationByLessonResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConversationByLessonResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationByLessonResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationByLessonResponse proto.InternalMessageInfo

func (m *ConversationByLessonResponse) GetConversations() []*Conversation {
	if m != nil {
		return m.Conversations
	}
	return nil
}

type TeacherProhibitAllStudentToChatRequest struct {
	ConversationId string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
}

func (m *TeacherProhibitAllStudentToChatRequest) Reset() {
	*m = TeacherProhibitAllStudentToChatRequest{}
}
func (*TeacherProhibitAllStudentToChatRequest) ProtoMessage() {}
func (*TeacherProhibitAllStudentToChatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{29}
}
func (m *TeacherProhibitAllStudentToChatRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeacherProhibitAllStudentToChatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeacherProhibitAllStudentToChatRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeacherProhibitAllStudentToChatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeacherProhibitAllStudentToChatRequest.Merge(m, src)
}
func (m *TeacherProhibitAllStudentToChatRequest) XXX_Size() int {
	return m.Size()
}
func (m *TeacherProhibitAllStudentToChatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TeacherProhibitAllStudentToChatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TeacherProhibitAllStudentToChatRequest proto.InternalMessageInfo

func (m *TeacherProhibitAllStudentToChatRequest) GetConversationId() string {
	if m != nil {
		return m.ConversationId
	}
	return ""
}

type TeacherProhibitAllStudentToChatResponse struct {
}

func (m *TeacherProhibitAllStudentToChatResponse) Reset() {
	*m = TeacherProhibitAllStudentToChatResponse{}
}
func (*TeacherProhibitAllStudentToChatResponse) ProtoMessage() {}
func (*TeacherProhibitAllStudentToChatResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{30}
}
func (m *TeacherProhibitAllStudentToChatResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeacherProhibitAllStudentToChatResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeacherProhibitAllStudentToChatResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeacherProhibitAllStudentToChatResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeacherProhibitAllStudentToChatResponse.Merge(m, src)
}
func (m *TeacherProhibitAllStudentToChatResponse) XXX_Size() int {
	return m.Size()
}
func (m *TeacherProhibitAllStudentToChatResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TeacherProhibitAllStudentToChatResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TeacherProhibitAllStudentToChatResponse proto.InternalMessageInfo

type TeacherAllowAllStudentToChatRequest struct {
	ConversationId string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
}

func (m *TeacherAllowAllStudentToChatRequest) Reset()      { *m = TeacherAllowAllStudentToChatRequest{} }
func (*TeacherAllowAllStudentToChatRequest) ProtoMessage() {}
func (*TeacherAllowAllStudentToChatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{31}
}
func (m *TeacherAllowAllStudentToChatRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeacherAllowAllStudentToChatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeacherAllowAllStudentToChatRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeacherAllowAllStudentToChatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeacherAllowAllStudentToChatRequest.Merge(m, src)
}
func (m *TeacherAllowAllStudentToChatRequest) XXX_Size() int {
	return m.Size()
}
func (m *TeacherAllowAllStudentToChatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TeacherAllowAllStudentToChatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TeacherAllowAllStudentToChatRequest proto.InternalMessageInfo

func (m *TeacherAllowAllStudentToChatRequest) GetConversationId() string {
	if m != nil {
		return m.ConversationId
	}
	return ""
}

type TeacherAllowAllStudentToChatResponse struct {
}

func (m *TeacherAllowAllStudentToChatResponse) Reset()      { *m = TeacherAllowAllStudentToChatResponse{} }
func (*TeacherAllowAllStudentToChatResponse) ProtoMessage() {}
func (*TeacherAllowAllStudentToChatResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{32}
}
func (m *TeacherAllowAllStudentToChatResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeacherAllowAllStudentToChatResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeacherAllowAllStudentToChatResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeacherAllowAllStudentToChatResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeacherAllowAllStudentToChatResponse.Merge(m, src)
}
func (m *TeacherAllowAllStudentToChatResponse) XXX_Size() int {
	return m.Size()
}
func (m *TeacherAllowAllStudentToChatResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TeacherAllowAllStudentToChatResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TeacherAllowAllStudentToChatResponse proto.InternalMessageInfo

type TeacherAllowStudentToSpeakRequest struct {
	StudentId      string `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	ConversationId string `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
}

func (m *TeacherAllowStudentToSpeakRequest) Reset()      { *m = TeacherAllowStudentToSpeakRequest{} }
func (*TeacherAllowStudentToSpeakRequest) ProtoMessage() {}
func (*TeacherAllowStudentToSpeakRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{33}
}
func (m *TeacherAllowStudentToSpeakRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeacherAllowStudentToSpeakRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeacherAllowStudentToSpeakRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeacherAllowStudentToSpeakRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeacherAllowStudentToSpeakRequest.Merge(m, src)
}
func (m *TeacherAllowStudentToSpeakRequest) XXX_Size() int {
	return m.Size()
}
func (m *TeacherAllowStudentToSpeakRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TeacherAllowStudentToSpeakRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TeacherAllowStudentToSpeakRequest proto.InternalMessageInfo

func (m *TeacherAllowStudentToSpeakRequest) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *TeacherAllowStudentToSpeakRequest) GetConversationId() string {
	if m != nil {
		return m.ConversationId
	}
	return ""
}

type TeacherAllowStudentToSpeakResponse struct {
}

func (m *TeacherAllowStudentToSpeakResponse) Reset()      { *m = TeacherAllowStudentToSpeakResponse{} }
func (*TeacherAllowStudentToSpeakResponse) ProtoMessage() {}
func (*TeacherAllowStudentToSpeakResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{34}
}
func (m *TeacherAllowStudentToSpeakResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeacherAllowStudentToSpeakResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeacherAllowStudentToSpeakResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeacherAllowStudentToSpeakResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeacherAllowStudentToSpeakResponse.Merge(m, src)
}
func (m *TeacherAllowStudentToSpeakResponse) XXX_Size() int {
	return m.Size()
}
func (m *TeacherAllowStudentToSpeakResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TeacherAllowStudentToSpeakResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TeacherAllowStudentToSpeakResponse proto.InternalMessageInfo

type TeacherProhibitStudentToSpeakRequest struct {
	StudentId      string `protobuf:"bytes,1,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	ConversationId string `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
}

func (m *TeacherProhibitStudentToSpeakRequest) Reset()      { *m = TeacherProhibitStudentToSpeakRequest{} }
func (*TeacherProhibitStudentToSpeakRequest) ProtoMessage() {}
func (*TeacherProhibitStudentToSpeakRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{35}
}
func (m *TeacherProhibitStudentToSpeakRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeacherProhibitStudentToSpeakRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeacherProhibitStudentToSpeakRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeacherProhibitStudentToSpeakRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeacherProhibitStudentToSpeakRequest.Merge(m, src)
}
func (m *TeacherProhibitStudentToSpeakRequest) XXX_Size() int {
	return m.Size()
}
func (m *TeacherProhibitStudentToSpeakRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TeacherProhibitStudentToSpeakRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TeacherProhibitStudentToSpeakRequest proto.InternalMessageInfo

func (m *TeacherProhibitStudentToSpeakRequest) GetStudentId() string {
	if m != nil {
		return m.StudentId
	}
	return ""
}

func (m *TeacherProhibitStudentToSpeakRequest) GetConversationId() string {
	if m != nil {
		return m.ConversationId
	}
	return ""
}

type TeacherProhibitStudentToSpeakResponse struct {
}

func (m *TeacherProhibitStudentToSpeakResponse) Reset()      { *m = TeacherProhibitStudentToSpeakResponse{} }
func (*TeacherProhibitStudentToSpeakResponse) ProtoMessage() {}
func (*TeacherProhibitStudentToSpeakResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{36}
}
func (m *TeacherProhibitStudentToSpeakResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeacherProhibitStudentToSpeakResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeacherProhibitStudentToSpeakResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeacherProhibitStudentToSpeakResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeacherProhibitStudentToSpeakResponse.Merge(m, src)
}
func (m *TeacherProhibitStudentToSpeakResponse) XXX_Size() int {
	return m.Size()
}
func (m *TeacherProhibitStudentToSpeakResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TeacherProhibitStudentToSpeakResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TeacherProhibitStudentToSpeakResponse proto.InternalMessageInfo

type StudentRaiseHandRequest struct {
	ConversationId string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
}

func (m *StudentRaiseHandRequest) Reset()      { *m = StudentRaiseHandRequest{} }
func (*StudentRaiseHandRequest) ProtoMessage() {}
func (*StudentRaiseHandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{37}
}
func (m *StudentRaiseHandRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StudentRaiseHandRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StudentRaiseHandRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StudentRaiseHandRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudentRaiseHandRequest.Merge(m, src)
}
func (m *StudentRaiseHandRequest) XXX_Size() int {
	return m.Size()
}
func (m *StudentRaiseHandRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StudentRaiseHandRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StudentRaiseHandRequest proto.InternalMessageInfo

func (m *StudentRaiseHandRequest) GetConversationId() string {
	if m != nil {
		return m.ConversationId
	}
	return ""
}

type StudentRaiseHandResponse struct {
}

func (m *StudentRaiseHandResponse) Reset()      { *m = StudentRaiseHandResponse{} }
func (*StudentRaiseHandResponse) ProtoMessage() {}
func (*StudentRaiseHandResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{38}
}
func (m *StudentRaiseHandResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StudentRaiseHandResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StudentRaiseHandResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StudentRaiseHandResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudentRaiseHandResponse.Merge(m, src)
}
func (m *StudentRaiseHandResponse) XXX_Size() int {
	return m.Size()
}
func (m *StudentRaiseHandResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StudentRaiseHandResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StudentRaiseHandResponse proto.InternalMessageInfo

type DeleteMessageRequest struct {
	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (m *DeleteMessageRequest) Reset()      { *m = DeleteMessageRequest{} }
func (*DeleteMessageRequest) ProtoMessage() {}
func (*DeleteMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{39}
}
func (m *DeleteMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMessageRequest.Merge(m, src)
}
func (m *DeleteMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMessageRequest proto.InternalMessageInfo

func (m *DeleteMessageRequest) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

type DeleteMessageResponse struct {
}

func (m *DeleteMessageResponse) Reset()      { *m = DeleteMessageResponse{} }
func (*DeleteMessageResponse) ProtoMessage() {}
func (*DeleteMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{40}
}
func (m *DeleteMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMessageResponse.Merge(m, src)
}
func (m *DeleteMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMessageResponse proto.InternalMessageInfo

type EventPing struct {
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (m *EventPing) Reset()      { *m = EventPing{} }
func (*EventPing) ProtoMessage() {}
func (*EventPing) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{41}
}
func (m *EventPing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPing.Merge(m, src)
}
func (m *EventPing) XXX_Size() int {
	return m.Size()
}
func (m *EventPing) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPing.DiscardUnknown(m)
}

var xxx_messageInfo_EventPing proto.InternalMessageInfo

func (m *EventPing) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

type StreamingEventRequest struct {
	// Types that are valid to be assigned to Event:
	//
	//	*StreamingEventRequest_EventPing
	Event isStreamingEventRequest_Event `protobuf_oneof:"event"`
}

func (m *StreamingEventRequest) Reset()      { *m = StreamingEventRequest{} }
func (*StreamingEventRequest) ProtoMessage() {}
func (*StreamingEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{42}
}
func (m *StreamingEventRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamingEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamingEventRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamingEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamingEventRequest.Merge(m, src)
}
func (m *StreamingEventRequest) XXX_Size() int {
	return m.Size()
}
func (m *StreamingEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamingEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamingEventRequest proto.InternalMessageInfo

type isStreamingEventRequest_Event interface {
	isStreamingEventRequest_Event()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type StreamingEventRequest_EventPing struct {
	EventPing *EventPing `protobuf:"bytes,1,opt,name=event_ping,json=eventPing,proto3,oneof" json:"event_ping,omitempty"`
}

func (*StreamingEventRequest_EventPing) isStreamingEventRequest_Event() {}

func (m *StreamingEventRequest) GetEvent() isStreamingEventRequest_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *StreamingEventRequest) GetEventPing() *EventPing {
	if x, ok := m.GetEvent().(*StreamingEventRequest_EventPing); ok {
		return x.EventPing
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StreamingEventRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StreamingEventRequest_EventPing)(nil),
	}
}

type StreamingEventResponse struct {
	// Types that are valid to be assigned to Event:
	//
	//	*StreamingEventResponse_EventNewMessage
	//	*StreamingEventResponse_EventDeleteMessage_
	//	*StreamingEventResponse_EventPing
	Event isStreamingEventResponse_Event `protobuf_oneof:"event"`
}

func (m *StreamingEventResponse) Reset()      { *m = StreamingEventResponse{} }
func (*StreamingEventResponse) ProtoMessage() {}
func (*StreamingEventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{43}
}
func (m *StreamingEventResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamingEventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamingEventResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamingEventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamingEventResponse.Merge(m, src)
}
func (m *StreamingEventResponse) XXX_Size() int {
	return m.Size()
}
func (m *StreamingEventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamingEventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamingEventResponse proto.InternalMessageInfo

type isStreamingEventResponse_Event interface {
	isStreamingEventResponse_Event()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type StreamingEventResponse_EventNewMessage struct {
	EventNewMessage *MessageResponse `protobuf:"bytes,1,opt,name=event_new_message,json=eventNewMessage,proto3,oneof" json:"event_new_message,omitempty"`
}
type StreamingEventResponse_EventDeleteMessage_ struct {
	EventDeleteMessage *StreamingEventResponse_EventDeleteMessage `protobuf:"bytes,2,opt,name=event_delete_message,json=eventDeleteMessage,proto3,oneof" json:"event_delete_message,omitempty"`
}
type StreamingEventResponse_EventPing struct {
	EventPing *EventPing `protobuf:"bytes,3,opt,name=event_ping,json=eventPing,proto3,oneof" json:"event_ping,omitempty"`
}

func (*StreamingEventResponse_EventNewMessage) isStreamingEventResponse_Event()     {}
func (*StreamingEventResponse_EventDeleteMessage_) isStreamingEventResponse_Event() {}
func (*StreamingEventResponse_EventPing) isStreamingEventResponse_Event()           {}

func (m *StreamingEventResponse) GetEvent() isStreamingEventResponse_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *StreamingEventResponse) GetEventNewMessage() *MessageResponse {
	if x, ok := m.GetEvent().(*StreamingEventResponse_EventNewMessage); ok {
		return x.EventNewMessage
	}
	return nil
}

func (m *StreamingEventResponse) GetEventDeleteMessage() *StreamingEventResponse_EventDeleteMessage {
	if x, ok := m.GetEvent().(*StreamingEventResponse_EventDeleteMessage_); ok {
		return x.EventDeleteMessage
	}
	return nil
}

func (m *StreamingEventResponse) GetEventPing() *EventPing {
	if x, ok := m.GetEvent().(*StreamingEventResponse_EventPing); ok {
		return x.EventPing
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StreamingEventResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StreamingEventResponse_EventNewMessage)(nil),
		(*StreamingEventResponse_EventDeleteMessage_)(nil),
		(*StreamingEventResponse_EventPing)(nil),
	}
}

type StreamingEventResponse_EventDeleteMessage struct {
	ConversationId string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	MessageId      string `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	DeletedBy      string `protobuf:"bytes,3,opt,name=deleted_by,json=deletedBy,proto3" json:"deleted_by,omitempty"`
}

func (m *StreamingEventResponse_EventDeleteMessage) Reset() {
	*m = StreamingEventResponse_EventDeleteMessage{}
}
func (*StreamingEventResponse_EventDeleteMessage) ProtoMessage() {}
func (*StreamingEventResponse_EventDeleteMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{43, 0}
}
func (m *StreamingEventResponse_EventDeleteMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamingEventResponse_EventDeleteMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamingEventResponse_EventDeleteMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamingEventResponse_EventDeleteMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamingEventResponse_EventDeleteMessage.Merge(m, src)
}
func (m *StreamingEventResponse_EventDeleteMessage) XXX_Size() int {
	return m.Size()
}
func (m *StreamingEventResponse_EventDeleteMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamingEventResponse_EventDeleteMessage.DiscardUnknown(m)
}

var xxx_messageInfo_StreamingEventResponse_EventDeleteMessage proto.InternalMessageInfo

func (m *StreamingEventResponse_EventDeleteMessage) GetConversationId() string {
	if m != nil {
		return m.ConversationId
	}
	return ""
}

func (m *StreamingEventResponse_EventDeleteMessage) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *StreamingEventResponse_EventDeleteMessage) GetDeletedBy() string {
	if m != nil {
		return m.DeletedBy
	}
	return ""
}

type StudentPutHandDownRequest struct {
	ConversationId string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
}

func (m *StudentPutHandDownRequest) Reset()      { *m = StudentPutHandDownRequest{} }
func (*StudentPutHandDownRequest) ProtoMessage() {}
func (*StudentPutHandDownRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{44}
}
func (m *StudentPutHandDownRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StudentPutHandDownRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StudentPutHandDownRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StudentPutHandDownRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudentPutHandDownRequest.Merge(m, src)
}
func (m *StudentPutHandDownRequest) XXX_Size() int {
	return m.Size()
}
func (m *StudentPutHandDownRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StudentPutHandDownRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StudentPutHandDownRequest proto.InternalMessageInfo

func (m *StudentPutHandDownRequest) GetConversationId() string {
	if m != nil {
		return m.ConversationId
	}
	return ""
}

type StudentPutHandDownResponse struct {
}

func (m *StudentPutHandDownResponse) Reset()      { *m = StudentPutHandDownResponse{} }
func (*StudentPutHandDownResponse) ProtoMessage() {}
func (*StudentPutHandDownResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{45}
}
func (m *StudentPutHandDownResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StudentPutHandDownResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StudentPutHandDownResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StudentPutHandDownResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudentPutHandDownResponse.Merge(m, src)
}
func (m *StudentPutHandDownResponse) XXX_Size() int {
	return m.Size()
}
func (m *StudentPutHandDownResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StudentPutHandDownResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StudentPutHandDownResponse proto.InternalMessageInfo

type ConversationEvent struct {
	ConversationEventId string                  `protobuf:"bytes,1,opt,name=conversation_event_id,json=conversationEventId,proto3" json:"conversation_event_id,omitempty"`
	ConversationId      string                  `protobuf:"bytes,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	UserId              string                  `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EventType           ConversationEventType   `protobuf:"varint,4,opt,name=event_type,json=eventType,proto3,enum=manabie.tom.ConversationEventType" json:"event_type,omitempty"`
	Status              ConversationEventStatus `protobuf:"varint,5,opt,name=status,proto3,enum=manabie.tom.ConversationEventStatus" json:"status,omitempty"`
	CreatedAt           *types.Timestamp        `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt           *types.Timestamp        `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (m *ConversationEvent) Reset()      { *m = ConversationEvent{} }
func (*ConversationEvent) ProtoMessage() {}
func (*ConversationEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{46}
}
func (m *ConversationEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConversationEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConversationEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConversationEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConversationEvent.Merge(m, src)
}
func (m *ConversationEvent) XXX_Size() int {
	return m.Size()
}
func (m *ConversationEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ConversationEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ConversationEvent proto.InternalMessageInfo

func (m *ConversationEvent) GetConversationEventId() string {
	if m != nil {
		return m.ConversationEventId
	}
	return ""
}

func (m *ConversationEvent) GetConversationId() string {
	if m != nil {
		return m.ConversationId
	}
	return ""
}

func (m *ConversationEvent) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *ConversationEvent) GetEventType() ConversationEventType {
	if m != nil {
		return m.EventType
	}
	return CONVERSATION_EVENT_TYPE_NONE
}

func (m *ConversationEvent) GetStatus() ConversationEventStatus {
	if m != nil {
		return m.Status
	}
	return CONVERSATION_EVENT_STATUS_NONE
}

func (m *ConversationEvent) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *ConversationEvent) GetUpdatedAt() *types.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type RetrieveConversationEventsRequest struct {
	ConversationId string                  `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	EventType      ConversationEventType   `protobuf:"varint,2,opt,name=event_type,json=eventType,proto3,enum=manabie.tom.ConversationEventType" json:"event_type,omitempty"`
	Status         ConversationEventStatus `protobuf:"varint,3,opt,name=status,proto3,enum=manabie.tom.ConversationEventStatus" json:"status,omitempty"`
}

func (m *RetrieveConversationEventsRequest) Reset()      { *m = RetrieveConversationEventsRequest{} }
func (*RetrieveConversationEventsRequest) ProtoMessage() {}
func (*RetrieveConversationEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{47}
}
func (m *RetrieveConversationEventsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveConversationEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveConversationEventsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveConversationEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveConversationEventsRequest.Merge(m, src)
}
func (m *RetrieveConversationEventsRequest) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveConversationEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveConversationEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveConversationEventsRequest proto.InternalMessageInfo

func (m *RetrieveConversationEventsRequest) GetConversationId() string {
	if m != nil {
		return m.ConversationId
	}
	return ""
}

func (m *RetrieveConversationEventsRequest) GetEventType() ConversationEventType {
	if m != nil {
		return m.EventType
	}
	return CONVERSATION_EVENT_TYPE_NONE
}

func (m *RetrieveConversationEventsRequest) GetStatus() ConversationEventStatus {
	if m != nil {
		return m.Status
	}
	return CONVERSATION_EVENT_STATUS_NONE
}

type RetrieveConversationEventsResponse struct {
	ConversationEvents []*ConversationEvent `protobuf:"bytes,1,rep,name=conversation_events,json=conversationEvents,proto3" json:"conversation_events,omitempty"`
}

func (m *RetrieveConversationEventsResponse) Reset()      { *m = RetrieveConversationEventsResponse{} }
func (*RetrieveConversationEventsResponse) ProtoMessage() {}
func (*RetrieveConversationEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{48}
}
func (m *RetrieveConversationEventsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RetrieveConversationEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RetrieveConversationEventsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RetrieveConversationEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RetrieveConversationEventsResponse.Merge(m, src)
}
func (m *RetrieveConversationEventsResponse) XXX_Size() int {
	return m.Size()
}
func (m *RetrieveConversationEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RetrieveConversationEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RetrieveConversationEventsResponse proto.InternalMessageInfo

func (m *RetrieveConversationEventsResponse) GetConversationEvents() []*ConversationEvent {
	if m != nil {
		return m.ConversationEvents
	}
	return nil
}

type StudentAcceptToSpeakRequest struct {
	ConversationId string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
}

func (m *StudentAcceptToSpeakRequest) Reset()      { *m = StudentAcceptToSpeakRequest{} }
func (*StudentAcceptToSpeakRequest) ProtoMessage() {}
func (*StudentAcceptToSpeakRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{49}
}
func (m *StudentAcceptToSpeakRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StudentAcceptToSpeakRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StudentAcceptToSpeakRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StudentAcceptToSpeakRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudentAcceptToSpeakRequest.Merge(m, src)
}
func (m *StudentAcceptToSpeakRequest) XXX_Size() int {
	return m.Size()
}
func (m *StudentAcceptToSpeakRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StudentAcceptToSpeakRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StudentAcceptToSpeakRequest proto.InternalMessageInfo

func (m *StudentAcceptToSpeakRequest) GetConversationId() string {
	if m != nil {
		return m.ConversationId
	}
	return ""
}

type StudentAcceptToSpeakResponse struct {
}

func (m *StudentAcceptToSpeakResponse) Reset()      { *m = StudentAcceptToSpeakResponse{} }
func (*StudentAcceptToSpeakResponse) ProtoMessage() {}
func (*StudentAcceptToSpeakResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{50}
}
func (m *StudentAcceptToSpeakResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StudentAcceptToSpeakResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StudentAcceptToSpeakResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StudentAcceptToSpeakResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudentAcceptToSpeakResponse.Merge(m, src)
}
func (m *StudentAcceptToSpeakResponse) XXX_Size() int {
	return m.Size()
}
func (m *StudentAcceptToSpeakResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StudentAcceptToSpeakResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StudentAcceptToSpeakResponse proto.InternalMessageInfo

type StudentDeclineToSpeakRequest struct {
	ConversationId string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
}

func (m *StudentDeclineToSpeakRequest) Reset()      { *m = StudentDeclineToSpeakRequest{} }
func (*StudentDeclineToSpeakRequest) ProtoMessage() {}
func (*StudentDeclineToSpeakRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{51}
}
func (m *StudentDeclineToSpeakRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StudentDeclineToSpeakRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StudentDeclineToSpeakRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StudentDeclineToSpeakRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudentDeclineToSpeakRequest.Merge(m, src)
}
func (m *StudentDeclineToSpeakRequest) XXX_Size() int {
	return m.Size()
}
func (m *StudentDeclineToSpeakRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StudentDeclineToSpeakRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StudentDeclineToSpeakRequest proto.InternalMessageInfo

func (m *StudentDeclineToSpeakRequest) GetConversationId() string {
	if m != nil {
		return m.ConversationId
	}
	return ""
}

type StudentDeclineToSpeakResponse struct {
}

func (m *StudentDeclineToSpeakResponse) Reset()      { *m = StudentDeclineToSpeakResponse{} }
func (*StudentDeclineToSpeakResponse) ProtoMessage() {}
func (*StudentDeclineToSpeakResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{52}
}
func (m *StudentDeclineToSpeakResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StudentDeclineToSpeakResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StudentDeclineToSpeakResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StudentDeclineToSpeakResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StudentDeclineToSpeakResponse.Merge(m, src)
}
func (m *StudentDeclineToSpeakResponse) XXX_Size() int {
	return m.Size()
}
func (m *StudentDeclineToSpeakResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StudentDeclineToSpeakResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StudentDeclineToSpeakResponse proto.InternalMessageInfo

type PingSubscribeV2Request struct {
	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (m *PingSubscribeV2Request) Reset()      { *m = PingSubscribeV2Request{} }
func (*PingSubscribeV2Request) ProtoMessage() {}
func (*PingSubscribeV2Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{53}
}
func (m *PingSubscribeV2Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingSubscribeV2Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingSubscribeV2Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PingSubscribeV2Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingSubscribeV2Request.Merge(m, src)
}
func (m *PingSubscribeV2Request) XXX_Size() int {
	return m.Size()
}
func (m *PingSubscribeV2Request) XXX_DiscardUnknown() {
	xxx_messageInfo_PingSubscribeV2Request.DiscardUnknown(m)
}

var xxx_messageInfo_PingSubscribeV2Request proto.InternalMessageInfo

func (m *PingSubscribeV2Request) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

type PingSubscribeV2Response struct {
}

func (m *PingSubscribeV2Response) Reset()      { *m = PingSubscribeV2Response{} }
func (*PingSubscribeV2Response) ProtoMessage() {}
func (*PingSubscribeV2Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{54}
}
func (m *PingSubscribeV2Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingSubscribeV2Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingSubscribeV2Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PingSubscribeV2Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingSubscribeV2Response.Merge(m, src)
}
func (m *PingSubscribeV2Response) XXX_Size() int {
	return m.Size()
}
func (m *PingSubscribeV2Response) XXX_DiscardUnknown() {
	xxx_messageInfo_PingSubscribeV2Response.DiscardUnknown(m)
}

var xxx_messageInfo_PingSubscribeV2Response proto.InternalMessageInfo

type SubscribeV2Request struct {
}

func (m *SubscribeV2Request) Reset()      { *m = SubscribeV2Request{} }
func (*SubscribeV2Request) ProtoMessage() {}
func (*SubscribeV2Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{55}
}
func (m *SubscribeV2Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeV2Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeV2Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeV2Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeV2Request.Merge(m, src)
}
func (m *SubscribeV2Request) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeV2Request) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeV2Request.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeV2Request proto.InternalMessageInfo

type Event struct {
	// Types that are valid to be assigned to Event:
	//
	//	*Event_EventNewMessage
	//	*Event_EventDeleteMessage_
	//	*Event_EventPing
	Event isEvent_Event `protobuf_oneof:"event"`
}

func (m *Event) Reset()      { *m = Event{} }
func (*Event) ProtoMessage() {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{56}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

type isEvent_Event interface {
	isEvent_Event()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Event_EventNewMessage struct {
	EventNewMessage *MessageResponse `protobuf:"bytes,1,opt,name=event_new_message,json=eventNewMessage,proto3,oneof" json:"event_new_message,omitempty"`
}
type Event_EventDeleteMessage_ struct {
	EventDeleteMessage *Event_EventDeleteMessage `protobuf:"bytes,2,opt,name=event_delete_message,json=eventDeleteMessage,proto3,oneof" json:"event_delete_message,omitempty"`
}
type Event_EventPing struct {
	EventPing *EventPing `protobuf:"bytes,3,opt,name=event_ping,json=eventPing,proto3,oneof" json:"event_ping,omitempty"`
}

func (*Event_EventNewMessage) isEvent_Event()     {}
func (*Event_EventDeleteMessage_) isEvent_Event() {}
func (*Event_EventPing) isEvent_Event()           {}

func (m *Event) GetEvent() isEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *Event) GetEventNewMessage() *MessageResponse {
	if x, ok := m.GetEvent().(*Event_EventNewMessage); ok {
		return x.EventNewMessage
	}
	return nil
}

func (m *Event) GetEventDeleteMessage() *Event_EventDeleteMessage {
	if x, ok := m.GetEvent().(*Event_EventDeleteMessage_); ok {
		return x.EventDeleteMessage
	}
	return nil
}

func (m *Event) GetEventPing() *EventPing {
	if x, ok := m.GetEvent().(*Event_EventPing); ok {
		return x.EventPing
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Event) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Event_EventNewMessage)(nil),
		(*Event_EventDeleteMessage_)(nil),
		(*Event_EventPing)(nil),
	}
}

type Event_EventDeleteMessage struct {
	ConversationId string `protobuf:"bytes,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`
	MessageId      string `protobuf:"bytes,2,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	DeletedBy      string `protobuf:"bytes,3,opt,name=deleted_by,json=deletedBy,proto3" json:"deleted_by,omitempty"`
}

func (m *Event_EventDeleteMessage) Reset()      { *m = Event_EventDeleteMessage{} }
func (*Event_EventDeleteMessage) ProtoMessage() {}
func (*Event_EventDeleteMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{56, 0}
}
func (m *Event_EventDeleteMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event_EventDeleteMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event_EventDeleteMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event_EventDeleteMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event_EventDeleteMessage.Merge(m, src)
}
func (m *Event_EventDeleteMessage) XXX_Size() int {
	return m.Size()
}
func (m *Event_EventDeleteMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_Event_EventDeleteMessage.DiscardUnknown(m)
}

var xxx_messageInfo_Event_EventDeleteMessage proto.InternalMessageInfo

func (m *Event_EventDeleteMessage) GetConversationId() string {
	if m != nil {
		return m.ConversationId
	}
	return ""
}

func (m *Event_EventDeleteMessage) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *Event_EventDeleteMessage) GetDeletedBy() string {
	if m != nil {
		return m.DeletedBy
	}
	return ""
}

type SubscribeV2Response struct {
	Event *Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (m *SubscribeV2Response) Reset()      { *m = SubscribeV2Response{} }
func (*SubscribeV2Response) ProtoMessage() {}
func (*SubscribeV2Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8afb4e108b88109, []int{57}
}
func (m *SubscribeV2Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeV2Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeV2Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeV2Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeV2Response.Merge(m, src)
}
func (m *SubscribeV2Response) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeV2Response) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeV2Response.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeV2Response proto.InternalMessageInfo

func (m *SubscribeV2Response) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func init() {
	proto.RegisterType((*AssignToCoachRequest)(nil), "manabie.tom.AssignToCoachRequest")
	golang_proto.RegisterType((*AssignToCoachRequest)(nil), "manabie.tom.AssignToCoachRequest")
	proto.RegisterType((*SendMessageRequest)(nil), "manabie.tom.SendMessageRequest")
	golang_proto.RegisterType((*SendMessageRequest)(nil), "manabie.tom.SendMessageRequest")
	proto.RegisterType((*SendMessageResponse)(nil), "manabie.tom.SendMessageResponse")
	golang_proto.RegisterType((*SendMessageResponse)(nil), "manabie.tom.SendMessageResponse")
	proto.RegisterType((*MessageResponse)(nil), "manabie.tom.MessageResponse")
	golang_proto.RegisterType((*MessageResponse)(nil), "manabie.tom.MessageResponse")
	proto.RegisterType((*SeenMessageRequest)(nil), "manabie.tom.SeenMessageRequest")
	golang_proto.RegisterType((*SeenMessageRequest)(nil), "manabie.tom.SeenMessageRequest")
	proto.RegisterType((*SeenMessageResponse)(nil), "manabie.tom.SeenMessageResponse")
	golang_proto.RegisterType((*SeenMessageResponse)(nil), "manabie.tom.SeenMessageResponse")
	proto.RegisterType((*SubscribeRequest)(nil), "manabie.tom.SubscribeRequest")
	golang_proto.RegisterType((*SubscribeRequest)(nil), "manabie.tom.SubscribeRequest")
	proto.RegisterType((*SubscribeResponse)(nil), "manabie.tom.SubscribeResponse")
	golang_proto.RegisterType((*SubscribeResponse)(nil), "manabie.tom.SubscribeResponse")
	proto.RegisterType((*InternalSendMessageRequest)(nil), "manabie.tom.InternalSendMessageRequest")
	golang_proto.RegisterType((*InternalSendMessageRequest)(nil), "manabie.tom.InternalSendMessageRequest")
	proto.RegisterMapType((map[string]*InternalSendMessageRequest_UserIDs)(nil), "manabie.tom.InternalSendMessageRequest.NodeReceiveEntry")
	golang_proto.RegisterMapType((map[string]*InternalSendMessageRequest_UserIDs)(nil), "manabie.tom.InternalSendMessageRequest.NodeReceiveEntry")
	proto.RegisterType((*InternalSendMessageRequest_UserIDs)(nil), "manabie.tom.InternalSendMessageRequest.UserIDs")
	golang_proto.RegisterType((*InternalSendMessageRequest_UserIDs)(nil), "manabie.tom.InternalSendMessageRequest.UserIDs")
	proto.RegisterType((*ConversationListRequest)(nil), "manabie.tom.ConversationListRequest")
	golang_proto.RegisterType((*ConversationListRequest)(nil), "manabie.tom.ConversationListRequest")
	proto.RegisterType((*Conversation)(nil), "manabie.tom.Conversation")
	golang_proto.RegisterType((*Conversation)(nil), "manabie.tom.Conversation")
	proto.RegisterType((*Conversation_User)(nil), "manabie.tom.Conversation.User")
	golang_proto.RegisterType((*Conversation_User)(nil), "manabie.tom.Conversation.User")
	proto.RegisterType((*ConversationListResponse)(nil), "manabie.tom.ConversationListResponse")
	golang_proto.RegisterType((*ConversationListResponse)(nil), "manabie.tom.ConversationListResponse")
	proto.RegisterType((*ConversationByStudentQuestionRequest)(nil), "manabie.tom.ConversationByStudentQuestionRequest")
	golang_proto.RegisterType((*ConversationByStudentQuestionRequest)(nil), "manabie.tom.ConversationByStudentQuestionRequest")
	proto.RegisterType((*ConversationByStudentQuestionResponse)(nil), "manabie.tom.ConversationByStudentQuestionResponse")
	golang_proto.RegisterType((*ConversationByStudentQuestionResponse)(nil), "manabie.tom.ConversationByStudentQuestionResponse")
	proto.RegisterType((*ConversationByClassRequest)(nil), "manabie.tom.ConversationByClassRequest")
	golang_proto.RegisterType((*ConversationByClassRequest)(nil), "manabie.tom.ConversationByClassRequest")
	proto.RegisterType((*ConversationByClassResponse)(nil), "manabie.tom.ConversationByClassResponse")
	golang_proto.RegisterType((*ConversationByClassResponse)(nil), "manabie.tom.ConversationByClassResponse")
	proto.RegisterType((*ConversationDetailRequest)(nil), "manabie.tom.ConversationDetailRequest")
	golang_proto.RegisterType((*ConversationDetailRequest)(nil), "manabie.tom.ConversationDetailRequest")
	proto.RegisterType((*ConversationDetailRequest_Include)(nil), "manabie.tom.ConversationDetailRequest.Include")
	golang_proto.RegisterType((*ConversationDetailRequest_Include)(nil), "manabie.tom.ConversationDetailRequest.Include")
	proto.RegisterType((*ConversationDetailRequest_Exclude)(nil), "manabie.tom.ConversationDetailRequest.Exclude")
	golang_proto.RegisterType((*ConversationDetailRequest_Exclude)(nil), "manabie.tom.ConversationDetailRequest.Exclude")
	proto.RegisterType((*ConversationDetailResponse)(nil), "manabie.tom.ConversationDetailResponse")
	golang_proto.RegisterType((*ConversationDetailResponse)(nil), "manabie.tom.ConversationDetailResponse")
	proto.RegisterType((*PushedNotificationMessage)(nil), "manabie.tom.PushedNotificationMessage")
	golang_proto.RegisterType((*PushedNotificationMessage)(nil), "manabie.tom.PushedNotificationMessage")
	proto.RegisterType((*RetrievePushedNotificationMessageRequest)(nil), "manabie.tom.RetrievePushedNotificationMessageRequest")
	golang_proto.RegisterType((*RetrievePushedNotificationMessageRequest)(nil), "manabie.tom.RetrievePushedNotificationMessageRequest")
	proto.RegisterType((*RetrievePushedNotificationMessageResponse)(nil), "manabie.tom.RetrievePushedNotificationMessageResponse")
	golang_proto.RegisterType((*RetrievePushedNotificationMessageResponse)(nil), "manabie.tom.RetrievePushedNotificationMessageResponse")
	proto.RegisterType((*AutoCoachCustomMessageRequest)(nil), "manabie.tom.AutoCoachCustomMessageRequest")
	golang_proto.RegisterType((*AutoCoachCustomMessageRequest)(nil), "manabie.tom.AutoCoachCustomMessageRequest")
	proto.RegisterType((*AutoCoachCustomMessageResponse)(nil), "manabie.tom.AutoCoachCustomMessageResponse")
	golang_proto.RegisterType((*AutoCoachCustomMessageResponse)(nil), "manabie.tom.AutoCoachCustomMessageResponse")
	proto.RegisterType((*GetConversationRequest)(nil), "manabie.tom.GetConversationRequest")
	golang_proto.RegisterType((*GetConversationRequest)(nil), "manabie.tom.GetConversationRequest")
	proto.RegisterType((*GetConversationResponse)(nil), "manabie.tom.GetConversationResponse")
	golang_proto.RegisterType((*GetConversationResponse)(nil), "manabie.tom.GetConversationResponse")
	proto.RegisterType((*TotalUserInConversationRequest)(nil), "manabie.tom.TotalUserInConversationRequest")
	golang_proto.RegisterType((*TotalUserInConversationRequest)(nil), "manabie.tom.TotalUserInConversationRequest")
	proto.RegisterType((*TotalUserInConversationResponse)(nil), "manabie.tom.TotalUserInConversationResponse")
	golang_proto.RegisterType((*TotalUserInConversationResponse)(nil), "manabie.tom.TotalUserInConversationResponse")
	proto.RegisterType((*ConversationByLessonRequest)(nil), "manabie.tom.ConversationByLessonRequest")
	golang_proto.RegisterType((*ConversationByLessonRequest)(nil), "manabie.tom.ConversationByLessonRequest")
	proto.RegisterType((*ConversationByLessonResponse)(nil), "manabie.tom.ConversationByLessonResponse")
	golang_proto.RegisterType((*ConversationByLessonResponse)(nil), "manabie.tom.ConversationByLessonResponse")
	proto.RegisterType((*TeacherProhibitAllStudentToChatRequest)(nil), "manabie.tom.TeacherProhibitAllStudentToChatRequest")
	golang_proto.RegisterType((*TeacherProhibitAllStudentToChatRequest)(nil), "manabie.tom.TeacherProhibitAllStudentToChatRequest")
	proto.RegisterType((*TeacherProhibitAllStudentToChatResponse)(nil), "manabie.tom.TeacherProhibitAllStudentToChatResponse")
	golang_proto.RegisterType((*TeacherProhibitAllStudentToChatResponse)(nil), "manabie.tom.TeacherProhibitAllStudentToChatResponse")
	proto.RegisterType((*TeacherAllowAllStudentToChatRequest)(nil), "manabie.tom.TeacherAllowAllStudentToChatRequest")
	golang_proto.RegisterType((*TeacherAllowAllStudentToChatRequest)(nil), "manabie.tom.TeacherAllowAllStudentToChatRequest")
	proto.RegisterType((*TeacherAllowAllStudentToChatResponse)(nil), "manabie.tom.TeacherAllowAllStudentToChatResponse")
	golang_proto.RegisterType((*TeacherAllowAllStudentToChatResponse)(nil), "manabie.tom.TeacherAllowAllStudentToChatResponse")
	proto.RegisterType((*TeacherAllowStudentToSpeakRequest)(nil), "manabie.tom.TeacherAllowStudentToSpeakRequest")
	golang_proto.RegisterType((*TeacherAllowStudentToSpeakRequest)(nil), "manabie.tom.TeacherAllowStudentToSpeakRequest")
	proto.RegisterType((*TeacherAllowStudentToSpeakResponse)(nil), "manabie.tom.TeacherAllowStudentToSpeakResponse")
	golang_proto.RegisterType((*TeacherAllowStudentToSpeakResponse)(nil), "manabie.tom.TeacherAllowStudentToSpeakResponse")
	proto.RegisterType((*TeacherProhibitStudentToSpeakRequest)(nil), "manabie.tom.TeacherProhibitStudentToSpeakRequest")
	golang_proto.RegisterType((*TeacherProhibitStudentToSpeakRequest)(nil), "manabie.tom.TeacherProhibitStudentToSpeakRequest")
	proto.RegisterType((*TeacherProhibitStudentToSpeakResponse)(nil), "manabie.tom.TeacherProhibitStudentToSpeakResponse")
	golang_proto.RegisterType((*TeacherProhibitStudentToSpeakResponse)(nil), "manabie.tom.TeacherProhibitStudentToSpeakResponse")
	proto.RegisterType((*StudentRaiseHandRequest)(nil), "manabie.tom.StudentRaiseHandRequest")
	golang_proto.RegisterType((*StudentRaiseHandRequest)(nil), "manabie.tom.StudentRaiseHandRequest")
	proto.RegisterType((*StudentRaiseHandResponse)(nil), "manabie.tom.StudentRaiseHandResponse")
	golang_proto.RegisterType((*StudentRaiseHandResponse)(nil), "manabie.tom.StudentRaiseHandResponse")
	proto.RegisterType((*DeleteMessageRequest)(nil), "manabie.tom.DeleteMessageRequest")
	golang_proto.RegisterType((*DeleteMessageRequest)(nil), "manabie.tom.DeleteMessageRequest")
	proto.RegisterType((*DeleteMessageResponse)(nil), "manabie.tom.DeleteMessageResponse")
	golang_proto.RegisterType((*DeleteMessageResponse)(nil), "manabie.tom.DeleteMessageResponse")
	proto.RegisterType((*EventPing)(nil), "manabie.tom.EventPing")
	golang_proto.RegisterType((*EventPing)(nil), "manabie.tom.EventPing")
	proto.RegisterType((*StreamingEventRequest)(nil), "manabie.tom.StreamingEventRequest")
	golang_proto.RegisterType((*StreamingEventRequest)(nil), "manabie.tom.StreamingEventRequest")
	proto.RegisterType((*StreamingEventResponse)(nil), "manabie.tom.StreamingEventResponse")
	golang_proto.RegisterType((*StreamingEventResponse)(nil), "manabie.tom.StreamingEventResponse")
	proto.RegisterType((*StreamingEventResponse_EventDeleteMessage)(nil), "manabie.tom.StreamingEventResponse.EventDeleteMessage")
	golang_proto.RegisterType((*StreamingEventResponse_EventDeleteMessage)(nil), "manabie.tom.StreamingEventResponse.EventDeleteMessage")
	proto.RegisterType((*StudentPutHandDownRequest)(nil), "manabie.tom.StudentPutHandDownRequest")
	golang_proto.RegisterType((*StudentPutHandDownRequest)(nil), "manabie.tom.StudentPutHandDownRequest")
	proto.RegisterType((*StudentPutHandDownResponse)(nil), "manabie.tom.StudentPutHandDownResponse")
	golang_proto.RegisterType((*StudentPutHandDownResponse)(nil), "manabie.tom.StudentPutHandDownResponse")
	proto.RegisterType((*ConversationEvent)(nil), "manabie.tom.ConversationEvent")
	golang_proto.RegisterType((*ConversationEvent)(nil), "manabie.tom.ConversationEvent")
	proto.RegisterType((*RetrieveConversationEventsRequest)(nil), "manabie.tom.RetrieveConversationEventsRequest")
	golang_proto.RegisterType((*RetrieveConversationEventsRequest)(nil), "manabie.tom.RetrieveConversationEventsRequest")
	proto.RegisterType((*RetrieveConversationEventsResponse)(nil), "manabie.tom.RetrieveConversationEventsResponse")
	golang_proto.RegisterType((*RetrieveConversationEventsResponse)(nil), "manabie.tom.RetrieveConversationEventsResponse")
	proto.RegisterType((*StudentAcceptToSpeakRequest)(nil), "manabie.tom.StudentAcceptToSpeakRequest")
	golang_proto.RegisterType((*StudentAcceptToSpeakRequest)(nil), "manabie.tom.StudentAcceptToSpeakRequest")
	proto.RegisterType((*StudentAcceptToSpeakResponse)(nil), "manabie.tom.StudentAcceptToSpeakResponse")
	golang_proto.RegisterType((*StudentAcceptToSpeakResponse)(nil), "manabie.tom.StudentAcceptToSpeakResponse")
	proto.RegisterType((*StudentDeclineToSpeakRequest)(nil), "manabie.tom.StudentDeclineToSpeakRequest")
	golang_proto.RegisterType((*StudentDeclineToSpeakRequest)(nil), "manabie.tom.StudentDeclineToSpeakRequest")
	proto.RegisterType((*StudentDeclineToSpeakResponse)(nil), "manabie.tom.StudentDeclineToSpeakResponse")
	golang_proto.RegisterType((*StudentDeclineToSpeakResponse)(nil), "manabie.tom.StudentDeclineToSpeakResponse")
	proto.RegisterType((*PingSubscribeV2Request)(nil), "manabie.tom.PingSubscribeV2Request")
	golang_proto.RegisterType((*PingSubscribeV2Request)(nil), "manabie.tom.PingSubscribeV2Request")
	proto.RegisterType((*PingSubscribeV2Response)(nil), "manabie.tom.PingSubscribeV2Response")
	golang_proto.RegisterType((*PingSubscribeV2Response)(nil), "manabie.tom.PingSubscribeV2Response")
	proto.RegisterType((*SubscribeV2Request)(nil), "manabie.tom.SubscribeV2Request")
	golang_proto.RegisterType((*SubscribeV2Request)(nil), "manabie.tom.SubscribeV2Request")
	proto.RegisterType((*Event)(nil), "manabie.tom.Event")
	golang_proto.RegisterType((*Event)(nil), "manabie.tom.Event")
	proto.RegisterType((*Event_EventDeleteMessage)(nil), "manabie.tom.Event.EventDeleteMessage")
	golang_proto.RegisterType((*Event_EventDeleteMessage)(nil), "manabie.tom.Event.EventDeleteMessage")
	proto.RegisterType((*SubscribeV2Response)(nil), "manabie.tom.SubscribeV2Response")
	golang_proto.RegisterType((*SubscribeV2Response)(nil), "manabie.tom.SubscribeV2Response")
}

func init() { proto.RegisterFile("tomchat.proto", fileDescriptor_b8afb4e108b88109) }
func init() { golang_proto.RegisterFile("tomchat.proto", fileDescriptor_b8afb4e108b88109) }

var fileDescriptor_b8afb4e108b88109 = []byte{
	// 2600 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x5a, 0xcf, 0x6f, 0x1b, 0xc7,
	0xf5, 0xe7, 0x92, 0xa2, 0x24, 0x3e, 0x4a, 0xb2, 0x3c, 0x92, 0x25, 0x6a, 0x2d, 0x51, 0xf6, 0xc6,
	0x3f, 0x94, 0x38, 0x91, 0x64, 0x3a, 0x89, 0x9d, 0xef, 0xb7, 0xa9, 0xa3, 0x1f, 0x6e, 0xc4, 0x20,
	0x51, 0xe5, 0x95, 0x6a, 0x24, 0x75, 0x61, 0x62, 0xb9, 0x3b, 0xa6, 0x36, 0x22, 0x77, 0x59, 0xce,
	0xac, 0x1c, 0xa1, 0x08, 0x60, 0xb4, 0x17, 0x03, 0x05, 0xfa, 0x03, 0x45, 0xff, 0x87, 0x02, 0x3d,
	0xf5, 0x0f, 0x28, 0xd0, 0x63, 0x2e, 0x05, 0x7c, 0xcc, 0xb1, 0x96, 0x2f, 0xbd, 0x04, 0xc8, 0xb9,
	0xa7, 0x62, 0x66, 0x67, 0xc9, 0xfd, 0x4d, 0xd2, 0x56, 0x7b, 0xe9, 0x6d, 0x67, 0xe6, 0xcd, 0xe7,
	0xbd, 0x79, 0xf3, 0xe6, 0xcd, 0xbc, 0x0f, 0x09, 0x93, 0xd4, 0x6e, 0xe9, 0x87, 0x1a, 0x5d, 0x6d,
	0x77, 0x6c, 0x6a, 0xa3, 0x62, 0x4b, 0xb3, 0xb4, 0xba, 0x89, 0x57, 0xa9, 0xdd, 0x92, 0xd9, 0x18,
	0xb6, 0x9c, 0x96, 0x3b, 0x26, 0x2f, 0x37, 0x6c, 0xbb, 0xd1, 0xc4, 0x6b, 0xbc, 0x55, 0x77, 0x1e,
	0xaf, 0x51, 0xb3, 0x85, 0x09, 0xd5, 0x5a, 0x6d, 0x21, 0xb0, 0x18, 0x16, 0x20, 0xb4, 0xe3, 0xe8,
	0x02, 0x5a, 0x7e, 0xa7, 0x61, 0xd2, 0x43, 0xa7, 0xbe, 0xaa, 0xdb, 0xad, 0xb5, 0x86, 0xdd, 0xb0,
	0x7b, 0x62, 0xac, 0xc5, 0x1b, 0xfc, 0xcb, 0x15, 0x57, 0xf6, 0x60, 0x76, 0x83, 0x10, 0xb3, 0x61,
	0x1d, 0xd8, 0x5b, 0xb6, 0xa6, 0x1f, 0xaa, 0xf8, 0xe7, 0x0e, 0x26, 0x14, 0x2d, 0xc0, 0xb8, 0xce,
	0xda, 0x35, 0xd3, 0x28, 0x49, 0x97, 0xa4, 0x95, 0x82, 0x3a, 0xc6, 0xdb, 0x55, 0x03, 0x2d, 0x01,
	0x10, 0xea, 0x18, 0xd8, 0xa2, 0x6c, 0x30, 0xcb, 0x07, 0x0b, 0xa2, 0xa7, 0x6a, 0x28, 0xdf, 0x49,
	0x80, 0xf6, 0xb1, 0x65, 0x7c, 0x86, 0x09, 0xd1, 0x1a, 0xd8, 0x03, 0xbc, 0x0e, 0xe7, 0x74, 0xdb,
	0x3a, 0xc6, 0x1d, 0xa2, 0x51, 0xd3, 0xb6, 0x7a, 0xb8, 0x53, 0xfe, 0xee, 0xaa, 0x81, 0x4a, 0x30,
	0xd6, 0x72, 0xa7, 0x0a, 0x6c, 0xaf, 0x89, 0x2e, 0x42, 0xc1, 0xe9, 0x34, 0x6b, 0x2d, 0x6c, 0x98,
	0x5a, 0x29, 0xc7, 0xc7, 0xc6, 0x9d, 0x4e, 0xf3, 0x33, 0xd6, 0x46, 0x6f, 0xc3, 0x08, 0x3d, 0x69,
	0xe3, 0xd2, 0xc8, 0x25, 0x69, 0x65, 0xaa, 0x52, 0x5a, 0xf5, 0x79, 0x78, 0x55, 0x98, 0x72, 0x70,
	0xd2, 0xc6, 0x2a, 0x97, 0x42, 0x2b, 0x30, 0xdd, 0xb4, 0x75, 0x8d, 0x81, 0xf1, 0x21, 0x66, 0x4e,
	0xde, 0x35, 0x87, 0xf7, 0x8b, 0x19, 0x55, 0x03, 0x2d, 0x43, 0x91, 0x6a, 0x9d, 0x06, 0xa6, 0x35,
	0x87, 0xe0, 0x4e, 0x69, 0x94, 0x0b, 0x81, 0xdb, 0xf5, 0x13, 0x82, 0x3b, 0xca, 0x23, 0x98, 0x09,
	0x2c, 0x97, 0xb4, 0x6d, 0x8b, 0x60, 0xe6, 0x25, 0x1f, 0xb6, 0xbb, 0xd4, 0x42, 0xab, 0x0b, 0x1b,
	0x67, 0x40, 0x36, 0xce, 0x00, 0xe5, 0x9b, 0x1c, 0x9c, 0x1b, 0x12, 0x3c, 0xc6, 0xd7, 0xd9, 0x58,
	0x5f, 0xcf, 0xc3, 0x18, 0x5b, 0x15, 0x13, 0x70, 0xfd, 0x39, 0xca, 0x9a, 0xee, 0x26, 0xe8, 0xb6,
	0x45, 0xb1, 0x45, 0xb9, 0x43, 0xf9, 0xee, 0xf3, 0x66, 0x70, 0x13, 0xf2, 0x09, 0x9b, 0x30, 0x3a,
	0xd0, 0x26, 0x7c, 0x00, 0xa0, 0x77, 0xb0, 0x46, 0xb1, 0x51, 0xd3, 0x68, 0x69, 0xec, 0x92, 0xb4,
	0x52, 0xac, 0xc8, 0xab, 0x6e, 0x74, 0xaf, 0x7a, 0x61, 0xbb, 0x7a, 0xe0, 0x85, 0xbf, 0x5a, 0x10,
	0xd2, 0x1b, 0x34, 0xd6, 0x7d, 0xe3, 0x83, 0xec, 0x5f, 0x21, 0xbc, 0x7f, 0xcc, 0x97, 0x26, 0xa9,
	0x19, 0xb8, 0x89, 0x29, 0x36, 0x4a, 0x70, 0x49, 0x5a, 0x19, 0x57, 0x0b, 0x26, 0xd9, 0x76, 0x3b,
	0xd8, 0xb0, 0x18, 0xab, 0xd5, 0x4f, 0x4a, 0x45, 0xd7, 0xd5, 0xa2, 0x67, 0xf3, 0x04, 0xdd, 0x80,
	0xf3, 0x01, 0x57, 0x5b, 0x5a, 0x0b, 0x97, 0x26, 0xb8, 0xd4, 0xb4, 0x7f, 0x60, 0x57, 0x6b, 0x61,
	0xe5, 0x43, 0x76, 0x32, 0xb0, 0xf5, 0x8a, 0x27, 0x43, 0xb9, 0xc0, 0x22, 0xcd, 0x37, 0xdd, 0x0d,
	0x06, 0x05, 0xc1, 0xf4, 0xbe, 0x53, 0x27, 0x7a, 0xc7, 0xac, 0x7b, 0x98, 0xca, 0x63, 0x38, 0xef,
	0xeb, 0x13, 0x51, 0xb3, 0x03, 0xe7, 0x5a, 0xc1, 0xb9, 0x5c, 0x51, 0xb1, 0xb2, 0x18, 0xb7, 0x51,
	0x9e, 0xcc, 0x4e, 0x46, 0x0d, 0x4f, 0xdb, 0x1c, 0x83, 0x3c, 0x3e, 0xc6, 0x16, 0x55, 0xfe, 0x92,
	0x05, 0xb9, 0x6a, 0x51, 0xdc, 0xb1, 0xb4, 0x66, 0xcc, 0xa1, 0x7f, 0x08, 0x13, 0x96, 0x6d, 0xe0,
	0x5a, 0x07, 0xeb, 0xd8, 0x3c, 0x66, 0xea, 0x72, 0x2b, 0xc5, 0xca, 0x9d, 0x80, 0xba, 0xe4, 0xe9,
	0xab, 0xbb, 0xb6, 0x81, 0x55, 0x77, 0xea, 0x3d, 0x8b, 0x76, 0x4e, 0xd4, 0xa2, 0xd5, 0xeb, 0x41,
	0x2b, 0xc2, 0x08, 0x1e, 0xdb, 0xc5, 0x0a, 0x0a, 0xa0, 0xde, 0x63, 0x23, 0xaa, 0x2b, 0x20, 0x5f,
	0x84, 0x31, 0xb6, 0xd5, 0xd5, 0x6d, 0x82, 0xa6, 0x21, 0x67, 0x1a, 0x84, 0x1b, 0x52, 0x50, 0xd9,
	0xa7, 0x6c, 0xc3, 0x74, 0x58, 0x0f, 0x93, 0x3a, 0xc2, 0x27, 0x62, 0x1b, 0xd8, 0x27, 0xba, 0x07,
	0xf9, 0x63, 0xad, 0xe9, 0x60, 0xa1, 0x6c, 0x6d, 0xd0, 0x25, 0x08, 0xbd, 0xaa, 0x3b, 0xfb, 0xff,
	0xb2, 0x77, 0x24, 0xe5, 0x6b, 0x98, 0xdf, 0xf2, 0x6d, 0xec, 0xa7, 0x26, 0xa1, 0x9e, 0xbf, 0x66,
	0x21, 0xdf, 0x34, 0x5b, 0x26, 0xe5, 0x9a, 0x27, 0x55, 0xb7, 0x81, 0x6e, 0xc2, 0x28, 0xb6, 0xf8,
	0x19, 0xc9, 0xf6, 0x3d, 0x23, 0x79, 0x6c, 0xb1, 0xf3, 0xc1, 0xd2, 0x77, 0x53, 0x23, 0xc4, 0x3b,
	0xd9, 0x93, 0xea, 0x18, 0x6f, 0x57, 0x0d, 0xe5, 0x5f, 0x79, 0x98, 0xf0, 0xeb, 0x1f, 0x3c, 0x33,
	0x2f, 0xf9, 0xee, 0x04, 0x9e, 0x4f, 0x36, 0xb3, 0x25, 0x29, 0xe9, 0x5e, 0xc8, 0x85, 0xee, 0x05,
	0xb4, 0x0c, 0x85, 0x06, 0x5b, 0x64, 0x8d, 0xf9, 0x7f, 0x84, 0xf9, 0x9f, 0x4f, 0x1f, 0xe7, 0x9d,
	0x55, 0x83, 0x20, 0x04, 0x23, 0x04, 0x63, 0x8b, 0x27, 0x95, 0x71, 0x95, 0x7f, 0xa3, 0xbb, 0x30,
	0xd1, 0xd4, 0x08, 0xf5, 0x8e, 0x39, 0x4f, 0x2c, 0x7d, 0xe2, 0x55, 0x2d, 0xb2, 0x19, 0xa2, 0x93,
	0xd9, 0x4c, 0x1d, 0x6a, 0xf3, 0x14, 0x37, 0xd6, 0xb3, 0x99, 0xf7, 0x55, 0x0d, 0x54, 0x81, 0x19,
	0xcf, 0x66, 0xbe, 0x03, 0x62, 0xfd, 0xe3, 0x5d, 0xc9, 0xf3, 0x62, 0xf8, 0xbe, 0x18, 0xad, 0x1a,
	0xe8, 0x36, 0x8c, 0x12, 0xaa, 0x51, 0x87, 0xf0, 0x64, 0x32, 0x55, 0x59, 0x0e, 0x58, 0xe3, 0x77,
	0xed, 0x3e, 0x17, 0x53, 0x85, 0x38, 0x5a, 0x07, 0xd4, 0xee, 0xe0, 0x63, 0xd3, 0x76, 0x48, 0xcd,
	0x73, 0x24, 0x29, 0x41, 0xd7, 0x15, 0xd3, 0xde, 0xe8, 0x96, 0xeb, 0x51, 0x82, 0xde, 0x85, 0x3c,
	0xcb, 0x5a, 0xa4, 0x54, 0xe4, 0x07, 0xa7, 0x9c, 0xa8, 0x89, 0xc7, 0x99, 0xea, 0x0a, 0xf3, 0x7d,
	0xf2, 0x36, 0x9f, 0xa5, 0xa2, 0x49, 0xb1, 0x4f, 0x6e, 0x00, 0xa0, 0x4f, 0x42, 0x29, 0x8b, 0x67,
	0xec, 0x49, 0xbe, 0x94, 0xa5, 0x44, 0x05, 0x3c, 0x6d, 0x07, 0x32, 0x1a, 0xeb, 0x89, 0x4f, 0x7f,
	0x53, 0xf1, 0xe9, 0x4f, 0x7e, 0x2a, 0xc1, 0x08, 0x4f, 0xb9, 0x53, 0x90, 0xed, 0x06, 0x59, 0xd6,
	0x34, 0x58, 0xd8, 0x37, 0x3a, 0xb6, 0xd3, 0x16, 0xb7, 0x94, 0xdb, 0x10, 0x89, 0xb9, 0xdd, 0xc1,
	0x84, 0x1d, 0xf2, 0x9c, 0x97, 0x98, 0xf7, 0xdc, 0x0e, 0x74, 0x0b, 0xc6, 0x58, 0x88, 0xb0, 0x63,
	0x31, 0xd2, 0xf7, 0x58, 0x8c, 0x32, 0xd1, 0x0d, 0xaa, 0x3c, 0x84, 0x52, 0xf4, 0xec, 0x89, 0xf4,
	0x78, 0x17, 0x26, 0xfd, 0x26, 0x13, 0x91, 0xad, 0x16, 0x12, 0x7d, 0xa2, 0x06, 0xe5, 0x95, 0xcf,
	0xe1, 0x8a, 0x7f, 0x78, 0xf3, 0x64, 0x3f, 0x18, 0x3b, 0xde, 0x29, 0x5f, 0x87, 0xd9, 0x98, 0xa0,
	0xf3, 0x92, 0x12, 0x8a, 0x44, 0x1c, 0x51, 0x0e, 0xe1, 0x6a, 0x1f, 0xe4, 0xb3, 0x5a, 0xc3, 0x53,
	0x09, 0xe4, 0xa0, 0xaa, 0x2d, 0x16, 0x36, 0xff, 0xcd, 0x04, 0xf5, 0x08, 0x2e, 0xc6, 0x5a, 0x70,
	0x56, 0x4b, 0xfc, 0x6b, 0x0e, 0x16, 0xfc, 0xe3, 0xdb, 0x98, 0x6a, 0x66, 0x73, 0xe8, 0x77, 0x6a,
	0xd7, 0x15, 0xd9, 0x78, 0x57, 0xe4, 0x06, 0x75, 0xc5, 0x2e, 0x8c, 0x99, 0x96, 0xde, 0x74, 0x0c,
	0x2c, 0x02, 0x79, 0x35, 0x71, 0x29, 0x01, 0x53, 0x57, 0xab, 0xee, 0x2c, 0x76, 0xba, 0x77, 0x32,
	0xaa, 0x07, 0xc2, 0xf0, 0xf0, 0x57, 0x2e, 0x5e, 0x7e, 0x28, 0xbc, 0x7b, 0x5f, 0x05, 0xf0, 0x04,
	0x88, 0xfc, 0x43, 0x18, 0x13, 0x9a, 0xd0, 0x2d, 0xc8, 0xb3, 0x6c, 0xe1, 0xfa, 0x3c, 0x9a, 0x2e,
	0x0c, 0x4c, 0xfc, 0xaf, 0x3c, 0x57, 0x96, 0xcd, 0x17, 0xc8, 0xaf, 0x34, 0x7f, 0x73, 0x0a, 0x26,
	0xbc, 0x57, 0x1e, 0xeb, 0x50, 0x1e, 0x04, 0x23, 0xd4, 0x5b, 0x83, 0x08, 0x8f, 0x3b, 0x30, 0x2e,
	0xa4, 0xbd, 0xc8, 0x48, 0xbf, 0x2d, 0xba, 0xd2, 0xca, 0x9f, 0x25, 0x58, 0xd8, 0x73, 0xc8, 0x21,
	0x36, 0x76, 0x6d, 0x6a, 0x3e, 0x36, 0x75, 0x0e, 0xef, 0x5d, 0x24, 0xb3, 0x90, 0xa7, 0x26, 0x6d,
	0x62, 0x11, 0x0d, 0x6e, 0x83, 0xdd, 0x59, 0x75, 0xdb, 0x38, 0x11, 0x89, 0x8b, 0x7f, 0xa3, 0x1b,
	0x30, 0x62, 0x68, 0x54, 0x13, 0x01, 0x30, 0x1f, 0x09, 0x80, 0x7d, 0x5e, 0xae, 0xa9, 0x5c, 0x08,
	0xdd, 0x86, 0x42, 0x9b, 0xeb, 0x1c, 0x2c, 0x8f, 0x8d, 0xbb, 0xc2, 0x1b, 0x54, 0xf9, 0xa3, 0x04,
	0x2b, 0x2a, 0xa6, 0x1d, 0x13, 0x1f, 0xe3, 0x44, 0xab, 0xbd, 0xa0, 0xbe, 0x0c, 0x13, 0x06, 0x3e,
	0x36, 0x75, 0x5c, 0xa3, 0xf6, 0x11, 0xb6, 0xc4, 0x1a, 0x8a, 0x6e, 0xdf, 0x01, 0xeb, 0x0a, 0x86,
	0x73, 0xde, 0x0b, 0xe7, 0x75, 0xc8, 0x13, 0xd3, 0xd2, 0xf1, 0x20, 0xd1, 0xcc, 0x05, 0x15, 0x1b,
	0xde, 0x1c, 0xc0, 0x2c, 0xb1, 0x59, 0x9b, 0x91, 0xcd, 0xba, 0x16, 0xd8, 0xac, 0x64, 0x84, 0xde,
	0xb6, 0x3d, 0x80, 0xa5, 0x0d, 0x87, 0xba, 0xd5, 0xeb, 0x96, 0x43, 0xa8, 0xdd, 0x0a, 0x2d, 0xde,
	0x57, 0x50, 0x4a, 0x29, 0x05, 0x65, 0x36, 0x58, 0xcb, 0x28, 0x1f, 0x41, 0x39, 0x09, 0x57, 0x58,
	0x5f, 0x06, 0x20, 0x8e, 0xae, 0x63, 0x42, 0x1e, 0x3b, 0x4d, 0x8e, 0x3d, 0xae, 0xfa, 0x7a, 0x94,
	0xaf, 0x61, 0xee, 0x63, 0x4c, 0x03, 0xa9, 0x68, 0xd8, 0x24, 0x73, 0xb1, 0x57, 0xa0, 0xf5, 0x5e,
	0x5c, 0x5e, 0x91, 0xb6, 0x14, 0xce, 0xa1, 0x81, 0x7b, 0x5e, 0xf9, 0x1c, 0xe6, 0x23, 0xea, 0x85,
	0xe5, 0x1f, 0xc2, 0x84, 0x5f, 0x91, 0x28, 0x03, 0x52, 0x52, 0x68, 0x40, 0x5c, 0x79, 0x0c, 0xe5,
	0x03, 0x9b, 0x6a, 0x4d, 0xfe, 0xb8, 0xb5, 0x5e, 0x73, 0x81, 0x85, 0x26, 0x26, 0xc4, 0x5f, 0xa4,
	0x8e, 0xbb, 0x1d, 0x55, 0x43, 0xf9, 0x08, 0x96, 0x13, 0xf5, 0xf4, 0x2a, 0x61, 0xca, 0x44, 0xdc,
	0xea, 0xce, 0xbd, 0x95, 0x0a, 0xd4, 0x9b, 0xa4, 0xfc, 0x4a, 0x0a, 0x5f, 0x26, 0x9f, 0x72, 0xf0,
	0x33, 0xbf, 0xcf, 0x02, 0xeb, 0xc8, 0x85, 0xd6, 0x51, 0x83, 0xc5, 0x78, 0x23, 0xce, 0xea, 0x4a,
	0xbb, 0x0f, 0xd7, 0x0e, 0xb0, 0xa6, 0x1f, 0xe2, 0xce, 0x5e, 0xc7, 0x3e, 0x34, 0xeb, 0x26, 0xdd,
	0x68, 0x36, 0xc5, 0x1b, 0xe1, 0xc0, 0xde, 0x3a, 0xd4, 0xe8, 0xd0, 0xc5, 0xe6, 0x9b, 0x70, 0xbd,
	0x2f, 0xa4, 0x28, 0x40, 0x77, 0xe1, 0x0d, 0x21, 0xba, 0xd1, 0x6c, 0xda, 0x4f, 0x5e, 0x5b, 0xf5,
	0x35, 0xb8, 0x92, 0x8e, 0x27, 0xf4, 0x1e, 0xc1, 0x65, 0xbf, 0x5c, 0x57, 0x68, 0xbf, 0x8d, 0xb5,
	0x23, 0x4f, 0x6b, 0xb0, 0x2a, 0x91, 0xc2, 0x55, 0xc9, 0xa0, 0x54, 0x89, 0x72, 0x05, 0x94, 0x34,
	0x65, 0xc2, 0x24, 0xab, 0x6b, 0xba, 0xe7, 0xb5, 0xff, 0xac, 0x55, 0xd7, 0xe1, 0x6a, 0x1f, 0x7d,
	0xc2, 0xb0, 0x4d, 0x98, 0x17, 0x23, 0xaa, 0x66, 0x12, 0xbc, 0xa3, 0x59, 0xc6, 0xd0, 0xfb, 0x22,
	0x43, 0x29, 0x8a, 0x21, 0xf0, 0xdf, 0x83, 0x59, 0x97, 0x31, 0x09, 0x25, 0xdf, 0x74, 0xa6, 0x4a,
	0x99, 0x87, 0x0b, 0xa1, 0x69, 0x02, 0xef, 0x2d, 0x28, 0xf0, 0x12, 0x7e, 0xcf, 0xb4, 0x1a, 0xdc,
	0x5b, 0x98, 0x90, 0x80, 0x71, 0x05, 0xd1, 0x53, 0x35, 0x94, 0x2f, 0xe0, 0xc2, 0x3e, 0xed, 0x60,
	0xad, 0x65, 0x5a, 0x0d, 0xb7, 0xee, 0x17, 0xca, 0x6f, 0x03, 0x70, 0x02, 0xa0, 0xd6, 0x36, 0xad,
	0x86, 0x48, 0x72, 0x73, 0x51, 0x9a, 0x80, 0xe9, 0xd8, 0xc9, 0xa8, 0x05, 0xec, 0x35, 0x7a, 0xfc,
	0xc6, 0x6f, 0x73, 0x30, 0x17, 0xc6, 0x16, 0x87, 0xf6, 0x13, 0x38, 0xef, 0x82, 0x5b, 0xf8, 0x49,
	0xcd, 0x7f, 0xc1, 0x0c, 0xc0, 0xa7, 0xf0, 0x89, 0xbb, 0xf8, 0x89, 0xf7, 0xb8, 0xf8, 0x12, 0x66,
	0x5d, 0x2c, 0x97, 0x58, 0xaa, 0xf9, 0x09, 0xd0, 0x62, 0xe5, 0xfd, 0x00, 0x5c, 0xbc, 0x39, 0xee,
	0x4a, 0x02, 0xbe, 0xdc, 0xc9, 0xa8, 0x08, 0x47, 0x7a, 0x43, 0x4e, 0xc9, 0x0d, 0xec, 0x14, 0xf9,
	0x17, 0x80, 0xa2, 0x4a, 0x86, 0x61, 0x0f, 0x20, 0xc2, 0x75, 0xfa, 0x38, 0xcb, 0x20, 0xcf, 0x96,
	0x0b, 0xf1, 0x6c, 0xbd, 0x1d, 0xd9, 0x86, 0x05, 0x11, 0x84, 0x7b, 0x0e, 0x65, 0x21, 0xb8, 0x6d,
	0x3f, 0x19, 0xfa, 0xda, 0x51, 0x16, 0x41, 0x8e, 0x43, 0x11, 0xc1, 0xf7, 0x34, 0x07, 0xe7, 0xfd,
	0xe9, 0x96, 0x2f, 0x1b, 0x55, 0xe0, 0x42, 0x00, 0xdc, 0xf5, 0x62, 0x57, 0xc5, 0x8c, 0x1e, 0x9e,
	0x71, 0x26, 0x4c, 0xec, 0x86, 0xb7, 0x5d, 0x3e, 0x76, 0x5b, 0x49, 0xbc, 0x18, 0xb8, 0x5e, 0xfe,
	0x78, 0x76, 0x37, 0x8e, 0x17, 0xe9, 0x3f, 0xe8, 0x12, 0x16, 0x79, 0x3e, 0xfd, 0x4a, 0xfa, 0xf4,
	0x10, 0x6b, 0x11, 0x64, 0x69, 0x47, 0x87, 0x61, 0x69, 0x3f, 0x00, 0x70, 0xda, 0xc6, 0x10, 0x04,
	0xaf, 0x90, 0xde, 0xa0, 0xca, 0xdf, 0x25, 0xb8, 0xec, 0xbd, 0x23, 0x23, 0x16, 0x92, 0xa1, 0x9f,
	0x19, 0x41, 0x2f, 0x66, 0x5f, 0xcf, 0x8b, 0xb9, 0xe1, 0xbd, 0xa8, 0x38, 0xa0, 0xa4, 0x2d, 0x47,
	0xe4, 0x94, 0x1f, 0xc3, 0x4c, 0x34, 0xc4, 0xbc, 0xe7, 0x40, 0x39, 0x5d, 0xa1, 0x8a, 0x22, 0x01,
	0x48, 0x94, 0x1f, 0xc1, 0x45, 0x11, 0xe7, 0x1b, 0xba, 0x8e, 0xdb, 0xe1, 0x6b, 0x68, 0xe0, 0xf3,
	0x52, 0x86, 0xc5, 0x78, 0x1c, 0x71, 0x62, 0x3e, 0xee, 0x8e, 0x6f, 0x63, 0xbd, 0x69, 0x5a, 0xf8,
	0x55, 0x15, 0x2d, 0xc3, 0x52, 0x02, 0x90, 0xd0, 0x74, 0x1b, 0xe6, 0x58, 0x36, 0xea, 0xb2, 0xdb,
	0x0f, 0x2a, 0xfe, 0x3b, 0x35, 0xe5, 0x96, 0x58, 0x80, 0xf9, 0xc8, 0x44, 0x81, 0x39, 0x0b, 0x28,
	0x8a, 0xa7, 0x7c, 0x97, 0x85, 0xbc, 0x7b, 0xf2, 0xcf, 0x32, 0xd5, 0x7f, 0x91, 0x9a, 0xea, 0xaf,
	0x46, 0x13, 0xf1, 0xff, 0x4c, 0x66, 0xbf, 0x0b, 0x33, 0x31, 0x9b, 0xd3, 0xa3, 0xf9, 0xa5, 0x3e,
	0x34, 0x7f, 0xe5, 0x37, 0x73, 0x50, 0x64, 0x0f, 0xc4, 0x7d, 0xdc, 0x61, 0x75, 0x2d, 0x52, 0xa1,
	0xe8, 0x63, 0xe4, 0x51, 0x90, 0xa7, 0x8d, 0x72, 0xf5, 0xf2, 0xa5, 0x64, 0x01, 0x11, 0x28, 0x19,
	0x17, 0xb3, 0xfb, 0x1b, 0x4c, 0x04, 0x33, 0xfc, 0xe3, 0x4e, 0x04, 0x33, 0xfa, 0xf3, 0x4d, 0x06,
	0x69, 0x30, 0x1d, 0x26, 0x25, 0x51, 0x72, 0x76, 0xf1, 0xfd, 0x5e, 0x20, 0x5f, 0xed, 0x23, 0xd5,
	0x55, 0xd1, 0x00, 0x14, 0xe5, 0x4c, 0xd0, 0xb5, 0xc1, 0x88, 0x21, 0xf9, 0x7a, 0x5f, 0xb9, 0xae,
	0xa2, 0x3f, 0x48, 0xbd, 0x44, 0x97, 0x58, 0xbd, 0x13, 0xf4, 0x5e, 0x00, 0x71, 0x50, 0x1e, 0x43,
	0x7e, 0x7f, 0xd8, 0x69, 0x22, 0x86, 0x0e, 0xa0, 0xe8, 0x0b, 0xad, 0xf0, 0xae, 0x45, 0x8e, 0x7e,
	0x78, 0xd7, 0x62, 0x52, 0x46, 0x66, 0x5d, 0x42, 0x8f, 0xe0, 0x5c, 0x28, 0xa3, 0xa0, 0x37, 0x82,
	0xf4, 0x45, 0x6c, 0xa2, 0x92, 0xaf, 0xa4, 0x0b, 0x75, 0x7d, 0xf9, 0x33, 0x38, 0x17, 0x2a, 0xe0,
	0x43, 0xf8, 0xf1, 0xec, 0x42, 0x08, 0x3f, 0x89, 0x03, 0xb8, 0x0f, 0x85, 0xae, 0x5a, 0xb4, 0x14,
	0xbf, 0x60, 0x0f, 0xb1, 0x9c, 0x34, 0x2c, 0x6c, 0xcd, 0x3d, 0xcb, 0x4a, 0xeb, 0x12, 0x7a, 0x26,
	0xc1, 0x52, 0x2a, 0x4f, 0x8d, 0x6e, 0x26, 0x46, 0x52, 0x12, 0x5b, 0x2e, 0x57, 0x86, 0x99, 0xd2,
	0xf5, 0xdd, 0x31, 0xcc, 0xc5, 0xb3, 0x37, 0xe8, 0xad, 0x00, 0x5e, 0x2a, 0x75, 0x24, 0xdf, 0x18,
	0x48, 0xd6, 0xe7, 0x04, 0xd4, 0x82, 0x99, 0x18, 0xf2, 0x1a, 0x5d, 0x4f, 0x59, 0x84, 0x9f, 0x60,
	0x97, 0x57, 0xfa, 0x0b, 0xfa, 0xd5, 0x9d, 0xc0, 0x7c, 0x02, 0x43, 0x82, 0x82, 0xb6, 0xa7, 0xf3,
	0x35, 0xf2, 0xdb, 0x83, 0x09, 0xfb, 0x55, 0xb7, 0x61, 0x36, 0x8e, 0xd4, 0x40, 0x69, 0x2b, 0x08,
	0x90, 0x2f, 0xf2, 0x9b, 0x03, 0x48, 0xfa, 0x35, 0xfe, 0x52, 0x02, 0x39, 0xb9, 0x06, 0x47, 0x41,
	0x9a, 0xbb, 0x2f, 0x33, 0x20, 0xaf, 0x0d, 0x2c, 0xef, 0x37, 0xe2, 0xd7, 0x12, 0x2c, 0xa5, 0x96,
	0xdc, 0xa1, 0x18, 0x1f, 0x84, 0x0e, 0x08, 0xc5, 0xf8, 0x60, 0x15, 0x3d, 0xb7, 0xc6, 0x80, 0xe9,
	0x70, 0x49, 0x1e, 0xba, 0x3a, 0x12, 0xaa, 0xfe, 0xd0, 0xd5, 0x91, 0x58, 0xd7, 0x73, 0x2d, 0x5f,
	0x02, 0x8a, 0x56, 0x4b, 0xa1, 0xdb, 0x23, 0xb1, 0x28, 0x0b, 0xdd, 0x1e, 0x29, 0x65, 0x97, 0x17,
	0x56, 0x71, 0x2f, 0xcd, 0x50, 0x58, 0xa5, 0x3c, 0x6a, 0x43, 0x61, 0x95, 0xfa, 0x6c, 0xe5, 0x1a,
	0x09, 0x5c, 0x88, 0x7d, 0x72, 0xa2, 0x58, 0xa0, 0xd8, 0xf7, 0xad, 0xfc, 0xd6, 0x20, 0xa2, 0x7e,
	0xa5, 0xbf, 0x97, 0x60, 0xb9, 0x0f, 0xbf, 0x86, 0x6e, 0xa5, 0x45, 0x45, 0x02, 0xcb, 0x26, 0xbf,
	0x3b, 0xdc, 0x24, 0xbf, 0x4d, 0xcf, 0x24, 0x58, 0x4c, 0x23, 0xde, 0xd0, 0x7a, 0xe2, 0x89, 0x49,
	0xb2, 0xe6, 0xe6, 0x10, 0x33, 0xc2, 0x47, 0x3d, 0xb9, 0x5e, 0x0a, 0x1d, 0xf5, 0xbe, 0x75, 0x62,
	0xe8, 0xa8, 0xf7, 0x2f, 0xc4, 0x5c, 0x23, 0x1e, 0xc2, 0x64, 0xf0, 0x45, 0x7c, 0x39, 0x00, 0x13,
	0xc7, 0x77, 0xc9, 0x4a, 0x9a, 0x88, 0x1f, 0xbc, 0x0e, 0x53, 0x41, 0x26, 0x07, 0x29, 0xa9, 0x34,
	0x8f, 0x0b, 0xff, 0xc6, 0x00, 0x54, 0x10, 0xc7, 0x5f, 0x91, 0xd6, 0xa5, 0xcd, 0xe6, 0xf3, 0x17,
	0xe5, 0xcc, 0xb7, 0x2f, 0xca, 0x99, 0xef, 0x5f, 0x94, 0xa5, 0xa7, 0xa7, 0x65, 0xe9, 0x4f, 0xa7,
	0x65, 0xe9, 0x9b, 0xd3, 0xb2, 0xf4, 0xfc, 0xb4, 0x2c, 0xfd, 0xe3, 0xb4, 0x2c, 0xfd, 0xf3, 0xb4,
	0x9c, 0xf9, 0xfe, 0xb4, 0x2c, 0xfd, 0xee, 0x65, 0x39, 0xf3, 0xb7, 0x97, 0x65, 0xe9, 0xf9, 0xcb,
	0x72, 0xe6, 0xdb, 0x97, 0xe5, 0xcc, 0x4f, 0x2b, 0xbe, 0x7f, 0x11, 0x0a, 0x8d, 0xef, 0xb0, 0xef,
	0xba, 0xa6, 0x1f, 0x61, 0xcb, 0x58, 0x6b, 0x1f, 0x35, 0xd6, 0x1a, 0xd8, 0x72, 0xff, 0x4e, 0x48,
	0xed, 0xd6, 0xff, 0xb7, 0xeb, 0xf5, 0x51, 0xde, 0xba, 0xf5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xa8, 0xef, 0x75, 0x02, 0xec, 0x28, 0x00, 0x00,
}

func (this *AssignToCoachRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AssignToCoachRequest)
	if !ok {
		that2, ok := that.(AssignToCoachRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CoachId != that1.CoachId {
		return false
	}
	if this.StudentId != that1.StudentId {
		return false
	}
	return true
}
func (this *SendMessageRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SendMessageRequest)
	if !ok {
		that2, ok := that.(SendMessageRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConversationId != that1.ConversationId {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if this.UrlMedia != that1.UrlMedia {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.LocalMessageId != that1.LocalMessageId {
		return false
	}
	if this.TargetUser != that1.TargetUser {
		return false
	}
	return true
}
func (this *SendMessageResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SendMessageResponse)
	if !ok {
		that2, ok := that.(SendMessageResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MessageId != that1.MessageId {
		return false
	}
	if this.LocalMessageId != that1.LocalMessageId {
		return false
	}
	return true
}
func (this *MessageResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageResponse)
	if !ok {
		that2, ok := that.(MessageResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MessageId != that1.MessageId {
		return false
	}
	if this.ConversationId != that1.ConversationId {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.Content != that1.Content {
		return false
	}
	if this.UrlMedia != that1.UrlMedia {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if this.LocalMessageId != that1.LocalMessageId {
		return false
	}
	if this.TargetUser != that1.TargetUser {
		return false
	}
	if this.IsDeleted != that1.IsDeleted {
		return false
	}
	if this.DeletedBy != that1.DeletedBy {
		return false
	}
	if this.ConversationName != that1.ConversationName {
		return false
	}
	return true
}
func (this *SeenMessageRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SeenMessageRequest)
	if !ok {
		that2, ok := that.(SeenMessageRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConversationId != that1.ConversationId {
		return false
	}
	return true
}
func (this *SeenMessageResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SeenMessageResponse)
	if !ok {
		that2, ok := that.(SeenMessageResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SubscribeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubscribeRequest)
	if !ok {
		that2, ok := that.(SubscribeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SubscribeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubscribeResponse)
	if !ok {
		that2, ok := that.(SubscribeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Event == nil {
		if this.Event != nil {
			return false
		}
	} else if this.Event == nil {
		return false
	} else if !this.Event.Equal(that1.Event) {
		return false
	}
	return true
}
func (this *SubscribeResponse_MessageResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubscribeResponse_MessageResponse)
	if !ok {
		that2, ok := that.(SubscribeResponse_MessageResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MessageResponse.Equal(that1.MessageResponse) {
		return false
	}
	return true
}
func (this *InternalSendMessageRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InternalSendMessageRequest)
	if !ok {
		that2, ok := that.(InternalSendMessageRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.NodeReceive) != len(that1.NodeReceive) {
		return false
	}
	for i := range this.NodeReceive {
		if !this.NodeReceive[i].Equal(that1.NodeReceive[i]) {
			return false
		}
	}
	if !this.Event.Equal(that1.Event) {
		return false
	}
	return true
}
func (this *InternalSendMessageRequest_UserIDs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InternalSendMessageRequest_UserIDs)
	if !ok {
		that2, ok := that.(InternalSendMessageRequest_UserIDs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Ids) != len(that1.Ids) {
		return false
	}
	for i := range this.Ids {
		if this.Ids[i] != that1.Ids[i] {
			return false
		}
	}
	return true
}
func (this *ConversationListRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConversationListRequest)
	if !ok {
		that2, ok := that.(ConversationListRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if !this.EndAt.Equal(that1.EndAt) {
		return false
	}
	if this.ClassId != that1.ClassId {
		return false
	}
	return true
}
func (this *Conversation) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Conversation)
	if !ok {
		that2, ok := that.(Conversation)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConversationId != that1.ConversationId {
		return false
	}
	if this.CoachId != that1.CoachId {
		return false
	}
	if this.StudentId != that1.StudentId {
		return false
	}
	if len(this.GuestIds) != len(that1.GuestIds) {
		return false
	}
	for i := range this.GuestIds {
		if this.GuestIds[i] != that1.GuestIds[i] {
			return false
		}
	}
	if this.Seen != that1.Seen {
		return false
	}
	if !this.LastMessage.Equal(that1.LastMessage) {
		return false
	}
	if this.TutorId != that1.TutorId {
		return false
	}
	if this.StudentQuestionId != that1.StudentQuestionId {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if len(this.PreviousCoachIds) != len(that1.PreviousCoachIds) {
		return false
	}
	for i := range this.PreviousCoachIds {
		if this.PreviousCoachIds[i] != that1.PreviousCoachIds[i] {
			return false
		}
	}
	if len(this.Users) != len(that1.Users) {
		return false
	}
	for i := range this.Users {
		if !this.Users[i].Equal(that1.Users[i]) {
			return false
		}
	}
	if this.ClassId != that1.ClassId {
		return false
	}
	if this.ConversationType != that1.ConversationType {
		return false
	}
	if this.ConversationName != that1.ConversationName {
		return false
	}
	return true
}
func (this *Conversation_User) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Conversation_User)
	if !ok {
		that2, ok := that.(Conversation_User)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Group != that1.Group {
		return false
	}
	if this.IsPresent != that1.IsPresent {
		return false
	}
	if !this.SeenAt.Equal(that1.SeenAt) {
		return false
	}
	return true
}
func (this *ConversationListResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConversationListResponse)
	if !ok {
		that2, ok := that.(ConversationListResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Conversations) != len(that1.Conversations) {
		return false
	}
	for i := range this.Conversations {
		if !this.Conversations[i].Equal(that1.Conversations[i]) {
			return false
		}
	}
	return true
}
func (this *ConversationByStudentQuestionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConversationByStudentQuestionRequest)
	if !ok {
		that2, ok := that.(ConversationByStudentQuestionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.StudentQuestionIds) != len(that1.StudentQuestionIds) {
		return false
	}
	for i := range this.StudentQuestionIds {
		if this.StudentQuestionIds[i] != that1.StudentQuestionIds[i] {
			return false
		}
	}
	return true
}
func (this *ConversationByStudentQuestionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConversationByStudentQuestionResponse)
	if !ok {
		that2, ok := that.(ConversationByStudentQuestionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Conversations) != len(that1.Conversations) {
		return false
	}
	for i := range this.Conversations {
		if !this.Conversations[i].Equal(that1.Conversations[i]) {
			return false
		}
	}
	return true
}
func (this *ConversationByClassRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConversationByClassRequest)
	if !ok {
		that2, ok := that.(ConversationByClassRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if !this.EndAt.Equal(that1.EndAt) {
		return false
	}
	if this.ClassId != that1.ClassId {
		return false
	}
	return true
}
func (this *ConversationByClassResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConversationByClassResponse)
	if !ok {
		that2, ok := that.(ConversationByClassResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Conversations) != len(that1.Conversations) {
		return false
	}
	for i := range this.Conversations {
		if !this.Conversations[i].Equal(that1.Conversations[i]) {
			return false
		}
	}
	return true
}
func (this *ConversationDetailRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConversationDetailRequest)
	if !ok {
		that2, ok := that.(ConversationDetailRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConversationId != that1.ConversationId {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if !this.EndAt.Equal(that1.EndAt) {
		return false
	}
	if that1.MessageType == nil {
		if this.MessageType != nil {
			return false
		}
	} else if this.MessageType == nil {
		return false
	} else if !this.MessageType.Equal(that1.MessageType) {
		return false
	}
	return true
}
func (this *ConversationDetailRequest_Include_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConversationDetailRequest_Include_)
	if !ok {
		that2, ok := that.(ConversationDetailRequest_Include_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Include.Equal(that1.Include) {
		return false
	}
	return true
}
func (this *ConversationDetailRequest_Exclude_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConversationDetailRequest_Exclude_)
	if !ok {
		that2, ok := that.(ConversationDetailRequest_Exclude_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Exclude.Equal(that1.Exclude) {
		return false
	}
	return true
}
func (this *ConversationDetailRequest_Include) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConversationDetailRequest_Include)
	if !ok {
		that2, ok := that.(ConversationDetailRequest_Include)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Types) != len(that1.Types) {
		return false
	}
	for i := range this.Types {
		if this.Types[i] != that1.Types[i] {
			return false
		}
	}
	return true
}
func (this *ConversationDetailRequest_Exclude) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConversationDetailRequest_Exclude)
	if !ok {
		that2, ok := that.(ConversationDetailRequest_Exclude)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Types) != len(that1.Types) {
		return false
	}
	for i := range this.Types {
		if this.Types[i] != that1.Types[i] {
			return false
		}
	}
	return true
}
func (this *ConversationDetailResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConversationDetailResponse)
	if !ok {
		that2, ok := that.(ConversationDetailResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Messages) != len(that1.Messages) {
		return false
	}
	for i := range this.Messages {
		if !this.Messages[i].Equal(that1.Messages[i]) {
			return false
		}
	}
	return true
}
func (this *PushedNotificationMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PushedNotificationMessage)
	if !ok {
		that2, ok := that.(PushedNotificationMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Body != that1.Body {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	if !this.PushedAt.Equal(that1.PushedAt) {
		return false
	}
	return true
}
func (this *RetrievePushedNotificationMessageRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrievePushedNotificationMessageRequest)
	if !ok {
		that2, ok := that.(RetrievePushedNotificationMessageRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DeviceToken != that1.DeviceToken {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if !this.Since.Equal(that1.Since) {
		return false
	}
	return true
}
func (this *RetrievePushedNotificationMessageResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrievePushedNotificationMessageResponse)
	if !ok {
		that2, ok := that.(RetrievePushedNotificationMessageResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Messages) != len(that1.Messages) {
		return false
	}
	for i := range this.Messages {
		if !this.Messages[i].Equal(that1.Messages[i]) {
			return false
		}
	}
	return true
}
func (this *AutoCoachCustomMessageRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AutoCoachCustomMessageRequest)
	if !ok {
		that2, ok := that.(AutoCoachCustomMessageRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if this.UrlMedia != that1.UrlMedia {
		return false
	}
	return true
}
func (this *AutoCoachCustomMessageResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AutoCoachCustomMessageResponse)
	if !ok {
		that2, ok := that.(AutoCoachCustomMessageResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Successful != that1.Successful {
		return false
	}
	return true
}
func (this *GetConversationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetConversationRequest)
	if !ok {
		that2, ok := that.(GetConversationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConversationId != that1.ConversationId {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.ClassId != that1.ClassId {
		return false
	}
	return true
}
func (this *GetConversationResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetConversationResponse)
	if !ok {
		that2, ok := that.(GetConversationResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Conversation.Equal(that1.Conversation) {
		return false
	}
	return true
}
func (this *TotalUserInConversationRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TotalUserInConversationRequest)
	if !ok {
		that2, ok := that.(TotalUserInConversationRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConversationId != that1.ConversationId {
		return false
	}
	if this.LessonId != that1.LessonId {
		return false
	}
	return true
}
func (this *TotalUserInConversationResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TotalUserInConversationResponse)
	if !ok {
		that2, ok := that.(TotalUserInConversationResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TotalUser != that1.TotalUser {
		return false
	}
	return true
}
func (this *ConversationByLessonRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConversationByLessonRequest)
	if !ok {
		that2, ok := that.(ConversationByLessonRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if !this.EndAt.Equal(that1.EndAt) {
		return false
	}
	if this.LessonId != that1.LessonId {
		return false
	}
	return true
}
func (this *ConversationByLessonResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConversationByLessonResponse)
	if !ok {
		that2, ok := that.(ConversationByLessonResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Conversations) != len(that1.Conversations) {
		return false
	}
	for i := range this.Conversations {
		if !this.Conversations[i].Equal(that1.Conversations[i]) {
			return false
		}
	}
	return true
}
func (this *TeacherProhibitAllStudentToChatRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TeacherProhibitAllStudentToChatRequest)
	if !ok {
		that2, ok := that.(TeacherProhibitAllStudentToChatRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConversationId != that1.ConversationId {
		return false
	}
	return true
}
func (this *TeacherProhibitAllStudentToChatResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TeacherProhibitAllStudentToChatResponse)
	if !ok {
		that2, ok := that.(TeacherProhibitAllStudentToChatResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *TeacherAllowAllStudentToChatRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TeacherAllowAllStudentToChatRequest)
	if !ok {
		that2, ok := that.(TeacherAllowAllStudentToChatRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConversationId != that1.ConversationId {
		return false
	}
	return true
}
func (this *TeacherAllowAllStudentToChatResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TeacherAllowAllStudentToChatResponse)
	if !ok {
		that2, ok := that.(TeacherAllowAllStudentToChatResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *TeacherAllowStudentToSpeakRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TeacherAllowStudentToSpeakRequest)
	if !ok {
		that2, ok := that.(TeacherAllowStudentToSpeakRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StudentId != that1.StudentId {
		return false
	}
	if this.ConversationId != that1.ConversationId {
		return false
	}
	return true
}
func (this *TeacherAllowStudentToSpeakResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TeacherAllowStudentToSpeakResponse)
	if !ok {
		that2, ok := that.(TeacherAllowStudentToSpeakResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *TeacherProhibitStudentToSpeakRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TeacherProhibitStudentToSpeakRequest)
	if !ok {
		that2, ok := that.(TeacherProhibitStudentToSpeakRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StudentId != that1.StudentId {
		return false
	}
	if this.ConversationId != that1.ConversationId {
		return false
	}
	return true
}
func (this *TeacherProhibitStudentToSpeakResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TeacherProhibitStudentToSpeakResponse)
	if !ok {
		that2, ok := that.(TeacherProhibitStudentToSpeakResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *StudentRaiseHandRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StudentRaiseHandRequest)
	if !ok {
		that2, ok := that.(StudentRaiseHandRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConversationId != that1.ConversationId {
		return false
	}
	return true
}
func (this *StudentRaiseHandResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StudentRaiseHandResponse)
	if !ok {
		that2, ok := that.(StudentRaiseHandResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DeleteMessageRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteMessageRequest)
	if !ok {
		that2, ok := that.(DeleteMessageRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MessageId != that1.MessageId {
		return false
	}
	return true
}
func (this *DeleteMessageResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteMessageResponse)
	if !ok {
		that2, ok := that.(DeleteMessageResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *EventPing) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*EventPing)
	if !ok {
		that2, ok := that.(EventPing)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SessionId != that1.SessionId {
		return false
	}
	return true
}
func (this *StreamingEventRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StreamingEventRequest)
	if !ok {
		that2, ok := that.(StreamingEventRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Event == nil {
		if this.Event != nil {
			return false
		}
	} else if this.Event == nil {
		return false
	} else if !this.Event.Equal(that1.Event) {
		return false
	}
	return true
}
func (this *StreamingEventRequest_EventPing) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StreamingEventRequest_EventPing)
	if !ok {
		that2, ok := that.(StreamingEventRequest_EventPing)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EventPing.Equal(that1.EventPing) {
		return false
	}
	return true
}
func (this *StreamingEventResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StreamingEventResponse)
	if !ok {
		that2, ok := that.(StreamingEventResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Event == nil {
		if this.Event != nil {
			return false
		}
	} else if this.Event == nil {
		return false
	} else if !this.Event.Equal(that1.Event) {
		return false
	}
	return true
}
func (this *StreamingEventResponse_EventNewMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StreamingEventResponse_EventNewMessage)
	if !ok {
		that2, ok := that.(StreamingEventResponse_EventNewMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EventNewMessage.Equal(that1.EventNewMessage) {
		return false
	}
	return true
}
func (this *StreamingEventResponse_EventDeleteMessage_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StreamingEventResponse_EventDeleteMessage_)
	if !ok {
		that2, ok := that.(StreamingEventResponse_EventDeleteMessage_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EventDeleteMessage.Equal(that1.EventDeleteMessage) {
		return false
	}
	return true
}
func (this *StreamingEventResponse_EventPing) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StreamingEventResponse_EventPing)
	if !ok {
		that2, ok := that.(StreamingEventResponse_EventPing)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EventPing.Equal(that1.EventPing) {
		return false
	}
	return true
}
func (this *StreamingEventResponse_EventDeleteMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StreamingEventResponse_EventDeleteMessage)
	if !ok {
		that2, ok := that.(StreamingEventResponse_EventDeleteMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConversationId != that1.ConversationId {
		return false
	}
	if this.MessageId != that1.MessageId {
		return false
	}
	if this.DeletedBy != that1.DeletedBy {
		return false
	}
	return true
}
func (this *StudentPutHandDownRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StudentPutHandDownRequest)
	if !ok {
		that2, ok := that.(StudentPutHandDownRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConversationId != that1.ConversationId {
		return false
	}
	return true
}
func (this *StudentPutHandDownResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StudentPutHandDownResponse)
	if !ok {
		that2, ok := that.(StudentPutHandDownResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ConversationEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ConversationEvent)
	if !ok {
		that2, ok := that.(ConversationEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConversationEventId != that1.ConversationEventId {
		return false
	}
	if this.ConversationId != that1.ConversationId {
		return false
	}
	if this.UserId != that1.UserId {
		return false
	}
	if this.EventType != that1.EventType {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	return true
}
func (this *RetrieveConversationEventsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveConversationEventsRequest)
	if !ok {
		that2, ok := that.(RetrieveConversationEventsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConversationId != that1.ConversationId {
		return false
	}
	if this.EventType != that1.EventType {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *RetrieveConversationEventsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RetrieveConversationEventsResponse)
	if !ok {
		that2, ok := that.(RetrieveConversationEventsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.ConversationEvents) != len(that1.ConversationEvents) {
		return false
	}
	for i := range this.ConversationEvents {
		if !this.ConversationEvents[i].Equal(that1.ConversationEvents[i]) {
			return false
		}
	}
	return true
}
func (this *StudentAcceptToSpeakRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StudentAcceptToSpeakRequest)
	if !ok {
		that2, ok := that.(StudentAcceptToSpeakRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConversationId != that1.ConversationId {
		return false
	}
	return true
}
func (this *StudentAcceptToSpeakResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StudentAcceptToSpeakResponse)
	if !ok {
		that2, ok := that.(StudentAcceptToSpeakResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *StudentDeclineToSpeakRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StudentDeclineToSpeakRequest)
	if !ok {
		that2, ok := that.(StudentDeclineToSpeakRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConversationId != that1.ConversationId {
		return false
	}
	return true
}
func (this *StudentDeclineToSpeakResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StudentDeclineToSpeakResponse)
	if !ok {
		that2, ok := that.(StudentDeclineToSpeakResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *PingSubscribeV2Request) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PingSubscribeV2Request)
	if !ok {
		that2, ok := that.(PingSubscribeV2Request)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SessionId != that1.SessionId {
		return false
	}
	return true
}
func (this *PingSubscribeV2Response) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PingSubscribeV2Response)
	if !ok {
		that2, ok := that.(PingSubscribeV2Response)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *SubscribeV2Request) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubscribeV2Request)
	if !ok {
		that2, ok := that.(SubscribeV2Request)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Event) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Event)
	if !ok {
		that2, ok := that.(Event)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Event == nil {
		if this.Event != nil {
			return false
		}
	} else if this.Event == nil {
		return false
	} else if !this.Event.Equal(that1.Event) {
		return false
	}
	return true
}
func (this *Event_EventNewMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Event_EventNewMessage)
	if !ok {
		that2, ok := that.(Event_EventNewMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EventNewMessage.Equal(that1.EventNewMessage) {
		return false
	}
	return true
}
func (this *Event_EventDeleteMessage_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Event_EventDeleteMessage_)
	if !ok {
		that2, ok := that.(Event_EventDeleteMessage_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EventDeleteMessage.Equal(that1.EventDeleteMessage) {
		return false
	}
	return true
}
func (this *Event_EventPing) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Event_EventPing)
	if !ok {
		that2, ok := that.(Event_EventPing)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EventPing.Equal(that1.EventPing) {
		return false
	}
	return true
}
func (this *Event_EventDeleteMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Event_EventDeleteMessage)
	if !ok {
		that2, ok := that.(Event_EventDeleteMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConversationId != that1.ConversationId {
		return false
	}
	if this.MessageId != that1.MessageId {
		return false
	}
	if this.DeletedBy != that1.DeletedBy {
		return false
	}
	return true
}
func (this *SubscribeV2Response) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SubscribeV2Response)
	if !ok {
		that2, ok := that.(SubscribeV2Response)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Event.Equal(that1.Event) {
		return false
	}
	return true
}
func (this *AssignToCoachRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.AssignToCoachRequest{")
	s = append(s, "CoachId: "+fmt.Sprintf("%#v", this.CoachId)+",\n")
	s = append(s, "StudentId: "+fmt.Sprintf("%#v", this.StudentId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SendMessageRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&pb.SendMessageRequest{")
	s = append(s, "ConversationId: "+fmt.Sprintf("%#v", this.ConversationId)+",\n")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "UrlMedia: "+fmt.Sprintf("%#v", this.UrlMedia)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "LocalMessageId: "+fmt.Sprintf("%#v", this.LocalMessageId)+",\n")
	s = append(s, "TargetUser: "+fmt.Sprintf("%#v", this.TargetUser)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SendMessageResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.SendMessageResponse{")
	s = append(s, "MessageId: "+fmt.Sprintf("%#v", this.MessageId)+",\n")
	s = append(s, "LocalMessageId: "+fmt.Sprintf("%#v", this.LocalMessageId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MessageResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&pb.MessageResponse{")
	s = append(s, "MessageId: "+fmt.Sprintf("%#v", this.MessageId)+",\n")
	s = append(s, "ConversationId: "+fmt.Sprintf("%#v", this.ConversationId)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "Content: "+fmt.Sprintf("%#v", this.Content)+",\n")
	s = append(s, "UrlMedia: "+fmt.Sprintf("%#v", this.UrlMedia)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	s = append(s, "LocalMessageId: "+fmt.Sprintf("%#v", this.LocalMessageId)+",\n")
	s = append(s, "TargetUser: "+fmt.Sprintf("%#v", this.TargetUser)+",\n")
	s = append(s, "IsDeleted: "+fmt.Sprintf("%#v", this.IsDeleted)+",\n")
	s = append(s, "DeletedBy: "+fmt.Sprintf("%#v", this.DeletedBy)+",\n")
	s = append(s, "ConversationName: "+fmt.Sprintf("%#v", this.ConversationName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SeenMessageRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SeenMessageRequest{")
	s = append(s, "ConversationId: "+fmt.Sprintf("%#v", this.ConversationId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SeenMessageResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.SeenMessageResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SubscribeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.SubscribeRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SubscribeResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SubscribeResponse{")
	if this.Event != nil {
		s = append(s, "Event: "+fmt.Sprintf("%#v", this.Event)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SubscribeResponse_MessageResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.SubscribeResponse_MessageResponse{` +
		`MessageResponse:` + fmt.Sprintf("%#v", this.MessageResponse) + `}`}, ", ")
	return s
}
func (this *InternalSendMessageRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.InternalSendMessageRequest{")
	keysForNodeReceive := make([]string, 0, len(this.NodeReceive))
	for k, _ := range this.NodeReceive {
		keysForNodeReceive = append(keysForNodeReceive, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForNodeReceive)
	mapStringForNodeReceive := "map[string]*InternalSendMessageRequest_UserIDs{"
	for _, k := range keysForNodeReceive {
		mapStringForNodeReceive += fmt.Sprintf("%#v: %#v,", k, this.NodeReceive[k])
	}
	mapStringForNodeReceive += "}"
	if this.NodeReceive != nil {
		s = append(s, "NodeReceive: "+mapStringForNodeReceive+",\n")
	}
	if this.Event != nil {
		s = append(s, "Event: "+fmt.Sprintf("%#v", this.Event)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InternalSendMessageRequest_UserIDs) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.InternalSendMessageRequest_UserIDs{")
	s = append(s, "Ids: "+fmt.Sprintf("%#v", this.Ids)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConversationListRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.ConversationListRequest{")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	if this.EndAt != nil {
		s = append(s, "EndAt: "+fmt.Sprintf("%#v", this.EndAt)+",\n")
	}
	s = append(s, "ClassId: "+fmt.Sprintf("%#v", this.ClassId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Conversation) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&pb.Conversation{")
	s = append(s, "ConversationId: "+fmt.Sprintf("%#v", this.ConversationId)+",\n")
	s = append(s, "CoachId: "+fmt.Sprintf("%#v", this.CoachId)+",\n")
	s = append(s, "StudentId: "+fmt.Sprintf("%#v", this.StudentId)+",\n")
	s = append(s, "GuestIds: "+fmt.Sprintf("%#v", this.GuestIds)+",\n")
	s = append(s, "Seen: "+fmt.Sprintf("%#v", this.Seen)+",\n")
	if this.LastMessage != nil {
		s = append(s, "LastMessage: "+fmt.Sprintf("%#v", this.LastMessage)+",\n")
	}
	s = append(s, "TutorId: "+fmt.Sprintf("%#v", this.TutorId)+",\n")
	s = append(s, "StudentQuestionId: "+fmt.Sprintf("%#v", this.StudentQuestionId)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "PreviousCoachIds: "+fmt.Sprintf("%#v", this.PreviousCoachIds)+",\n")
	if this.Users != nil {
		s = append(s, "Users: "+fmt.Sprintf("%#v", this.Users)+",\n")
	}
	s = append(s, "ClassId: "+fmt.Sprintf("%#v", this.ClassId)+",\n")
	s = append(s, "ConversationType: "+fmt.Sprintf("%#v", this.ConversationType)+",\n")
	s = append(s, "ConversationName: "+fmt.Sprintf("%#v", this.ConversationName)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Conversation_User) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.Conversation_User{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Group: "+fmt.Sprintf("%#v", this.Group)+",\n")
	s = append(s, "IsPresent: "+fmt.Sprintf("%#v", this.IsPresent)+",\n")
	if this.SeenAt != nil {
		s = append(s, "SeenAt: "+fmt.Sprintf("%#v", this.SeenAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConversationListResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ConversationListResponse{")
	if this.Conversations != nil {
		s = append(s, "Conversations: "+fmt.Sprintf("%#v", this.Conversations)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConversationByStudentQuestionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ConversationByStudentQuestionRequest{")
	s = append(s, "StudentQuestionIds: "+fmt.Sprintf("%#v", this.StudentQuestionIds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConversationByStudentQuestionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ConversationByStudentQuestionResponse{")
	if this.Conversations != nil {
		s = append(s, "Conversations: "+fmt.Sprintf("%#v", this.Conversations)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConversationByClassRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.ConversationByClassRequest{")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	if this.EndAt != nil {
		s = append(s, "EndAt: "+fmt.Sprintf("%#v", this.EndAt)+",\n")
	}
	s = append(s, "ClassId: "+fmt.Sprintf("%#v", this.ClassId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConversationByClassResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ConversationByClassResponse{")
	if this.Conversations != nil {
		s = append(s, "Conversations: "+fmt.Sprintf("%#v", this.Conversations)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConversationDetailRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pb.ConversationDetailRequest{")
	s = append(s, "ConversationId: "+fmt.Sprintf("%#v", this.ConversationId)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	if this.EndAt != nil {
		s = append(s, "EndAt: "+fmt.Sprintf("%#v", this.EndAt)+",\n")
	}
	if this.MessageType != nil {
		s = append(s, "MessageType: "+fmt.Sprintf("%#v", this.MessageType)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConversationDetailRequest_Include_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.ConversationDetailRequest_Include_{` +
		`Include:` + fmt.Sprintf("%#v", this.Include) + `}`}, ", ")
	return s
}
func (this *ConversationDetailRequest_Exclude_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.ConversationDetailRequest_Exclude_{` +
		`Exclude:` + fmt.Sprintf("%#v", this.Exclude) + `}`}, ", ")
	return s
}
func (this *ConversationDetailRequest_Include) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ConversationDetailRequest_Include{")
	s = append(s, "Types: "+fmt.Sprintf("%#v", this.Types)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConversationDetailRequest_Exclude) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ConversationDetailRequest_Exclude{")
	s = append(s, "Types: "+fmt.Sprintf("%#v", this.Types)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConversationDetailResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ConversationDetailResponse{")
	if this.Messages != nil {
		s = append(s, "Messages: "+fmt.Sprintf("%#v", this.Messages)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PushedNotificationMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pb.PushedNotificationMessage{")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	if this.PushedAt != nil {
		s = append(s, "PushedAt: "+fmt.Sprintf("%#v", this.PushedAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrievePushedNotificationMessageRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.RetrievePushedNotificationMessageRequest{")
	s = append(s, "DeviceToken: "+fmt.Sprintf("%#v", this.DeviceToken)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	if this.Since != nil {
		s = append(s, "Since: "+fmt.Sprintf("%#v", this.Since)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrievePushedNotificationMessageResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RetrievePushedNotificationMessageResponse{")
	if this.Messages != nil {
		s = append(s, "Messages: "+fmt.Sprintf("%#v", this.Messages)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AutoCoachCustomMessageRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.AutoCoachCustomMessageRequest{")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "UrlMedia: "+fmt.Sprintf("%#v", this.UrlMedia)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AutoCoachCustomMessageResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.AutoCoachCustomMessageResponse{")
	s = append(s, "Successful: "+fmt.Sprintf("%#v", this.Successful)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetConversationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.GetConversationRequest{")
	s = append(s, "ConversationId: "+fmt.Sprintf("%#v", this.ConversationId)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "ClassId: "+fmt.Sprintf("%#v", this.ClassId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetConversationResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.GetConversationResponse{")
	if this.Conversation != nil {
		s = append(s, "Conversation: "+fmt.Sprintf("%#v", this.Conversation)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TotalUserInConversationRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.TotalUserInConversationRequest{")
	s = append(s, "ConversationId: "+fmt.Sprintf("%#v", this.ConversationId)+",\n")
	s = append(s, "LessonId: "+fmt.Sprintf("%#v", this.LessonId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TotalUserInConversationResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.TotalUserInConversationResponse{")
	s = append(s, "TotalUser: "+fmt.Sprintf("%#v", this.TotalUser)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConversationByLessonRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.ConversationByLessonRequest{")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	if this.EndAt != nil {
		s = append(s, "EndAt: "+fmt.Sprintf("%#v", this.EndAt)+",\n")
	}
	s = append(s, "LessonId: "+fmt.Sprintf("%#v", this.LessonId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConversationByLessonResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.ConversationByLessonResponse{")
	if this.Conversations != nil {
		s = append(s, "Conversations: "+fmt.Sprintf("%#v", this.Conversations)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TeacherProhibitAllStudentToChatRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.TeacherProhibitAllStudentToChatRequest{")
	s = append(s, "ConversationId: "+fmt.Sprintf("%#v", this.ConversationId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TeacherProhibitAllStudentToChatResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.TeacherProhibitAllStudentToChatResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TeacherAllowAllStudentToChatRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.TeacherAllowAllStudentToChatRequest{")
	s = append(s, "ConversationId: "+fmt.Sprintf("%#v", this.ConversationId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TeacherAllowAllStudentToChatResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.TeacherAllowAllStudentToChatResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TeacherAllowStudentToSpeakRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.TeacherAllowStudentToSpeakRequest{")
	s = append(s, "StudentId: "+fmt.Sprintf("%#v", this.StudentId)+",\n")
	s = append(s, "ConversationId: "+fmt.Sprintf("%#v", this.ConversationId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TeacherAllowStudentToSpeakResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.TeacherAllowStudentToSpeakResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TeacherProhibitStudentToSpeakRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pb.TeacherProhibitStudentToSpeakRequest{")
	s = append(s, "StudentId: "+fmt.Sprintf("%#v", this.StudentId)+",\n")
	s = append(s, "ConversationId: "+fmt.Sprintf("%#v", this.ConversationId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TeacherProhibitStudentToSpeakResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.TeacherProhibitStudentToSpeakResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StudentRaiseHandRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.StudentRaiseHandRequest{")
	s = append(s, "ConversationId: "+fmt.Sprintf("%#v", this.ConversationId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StudentRaiseHandResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.StudentRaiseHandResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteMessageRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.DeleteMessageRequest{")
	s = append(s, "MessageId: "+fmt.Sprintf("%#v", this.MessageId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteMessageResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.DeleteMessageResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *EventPing) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.EventPing{")
	s = append(s, "SessionId: "+fmt.Sprintf("%#v", this.SessionId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StreamingEventRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.StreamingEventRequest{")
	if this.Event != nil {
		s = append(s, "Event: "+fmt.Sprintf("%#v", this.Event)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StreamingEventRequest_EventPing) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.StreamingEventRequest_EventPing{` +
		`EventPing:` + fmt.Sprintf("%#v", this.EventPing) + `}`}, ", ")
	return s
}
func (this *StreamingEventResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.StreamingEventResponse{")
	if this.Event != nil {
		s = append(s, "Event: "+fmt.Sprintf("%#v", this.Event)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StreamingEventResponse_EventNewMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.StreamingEventResponse_EventNewMessage{` +
		`EventNewMessage:` + fmt.Sprintf("%#v", this.EventNewMessage) + `}`}, ", ")
	return s
}
func (this *StreamingEventResponse_EventDeleteMessage_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.StreamingEventResponse_EventDeleteMessage_{` +
		`EventDeleteMessage:` + fmt.Sprintf("%#v", this.EventDeleteMessage) + `}`}, ", ")
	return s
}
func (this *StreamingEventResponse_EventPing) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.StreamingEventResponse_EventPing{` +
		`EventPing:` + fmt.Sprintf("%#v", this.EventPing) + `}`}, ", ")
	return s
}
func (this *StreamingEventResponse_EventDeleteMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.StreamingEventResponse_EventDeleteMessage{")
	s = append(s, "ConversationId: "+fmt.Sprintf("%#v", this.ConversationId)+",\n")
	s = append(s, "MessageId: "+fmt.Sprintf("%#v", this.MessageId)+",\n")
	s = append(s, "DeletedBy: "+fmt.Sprintf("%#v", this.DeletedBy)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StudentPutHandDownRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.StudentPutHandDownRequest{")
	s = append(s, "ConversationId: "+fmt.Sprintf("%#v", this.ConversationId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StudentPutHandDownResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.StudentPutHandDownResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ConversationEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&pb.ConversationEvent{")
	s = append(s, "ConversationEventId: "+fmt.Sprintf("%#v", this.ConversationEventId)+",\n")
	s = append(s, "ConversationId: "+fmt.Sprintf("%#v", this.ConversationId)+",\n")
	s = append(s, "UserId: "+fmt.Sprintf("%#v", this.UserId)+",\n")
	s = append(s, "EventType: "+fmt.Sprintf("%#v", this.EventType)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveConversationEventsRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.RetrieveConversationEventsRequest{")
	s = append(s, "ConversationId: "+fmt.Sprintf("%#v", this.ConversationId)+",\n")
	s = append(s, "EventType: "+fmt.Sprintf("%#v", this.EventType)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RetrieveConversationEventsResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.RetrieveConversationEventsResponse{")
	if this.ConversationEvents != nil {
		s = append(s, "ConversationEvents: "+fmt.Sprintf("%#v", this.ConversationEvents)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StudentAcceptToSpeakRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.StudentAcceptToSpeakRequest{")
	s = append(s, "ConversationId: "+fmt.Sprintf("%#v", this.ConversationId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StudentAcceptToSpeakResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.StudentAcceptToSpeakResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StudentDeclineToSpeakRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.StudentDeclineToSpeakRequest{")
	s = append(s, "ConversationId: "+fmt.Sprintf("%#v", this.ConversationId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StudentDeclineToSpeakResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.StudentDeclineToSpeakResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PingSubscribeV2Request) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.PingSubscribeV2Request{")
	s = append(s, "SessionId: "+fmt.Sprintf("%#v", this.SessionId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PingSubscribeV2Response) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.PingSubscribeV2Response{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SubscribeV2Request) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&pb.SubscribeV2Request{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Event) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.Event{")
	if this.Event != nil {
		s = append(s, "Event: "+fmt.Sprintf("%#v", this.Event)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Event_EventNewMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.Event_EventNewMessage{` +
		`EventNewMessage:` + fmt.Sprintf("%#v", this.EventNewMessage) + `}`}, ", ")
	return s
}
func (this *Event_EventDeleteMessage_) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.Event_EventDeleteMessage_{` +
		`EventDeleteMessage:` + fmt.Sprintf("%#v", this.EventDeleteMessage) + `}`}, ", ")
	return s
}
func (this *Event_EventPing) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&pb.Event_EventPing{` +
		`EventPing:` + fmt.Sprintf("%#v", this.EventPing) + `}`}, ", ")
	return s
}
func (this *Event_EventDeleteMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pb.Event_EventDeleteMessage{")
	s = append(s, "ConversationId: "+fmt.Sprintf("%#v", this.ConversationId)+",\n")
	s = append(s, "MessageId: "+fmt.Sprintf("%#v", this.MessageId)+",\n")
	s = append(s, "DeletedBy: "+fmt.Sprintf("%#v", this.DeletedBy)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SubscribeV2Response) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&pb.SubscribeV2Response{")
	if this.Event != nil {
		s = append(s, "Event: "+fmt.Sprintf("%#v", this.Event)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTomchat(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatServiceClient interface {
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	SeenMessage(ctx context.Context, in *SeenMessageRequest, opts ...grpc.CallOption) (*SeenMessageResponse, error)
	ConversationList(ctx context.Context, in *ConversationListRequest, opts ...grpc.CallOption) (*ConversationListResponse, error)
	ConversationDetail(ctx context.Context, in *ConversationDetailRequest, opts ...grpc.CallOption) (*ConversationDetailResponse, error)
	RetrievePushedNotificationMessages(ctx context.Context, in *RetrievePushedNotificationMessageRequest, opts ...grpc.CallOption) (*RetrievePushedNotificationMessageResponse, error)
	SubscribeV2(ctx context.Context, in *SubscribeV2Request, opts ...grpc.CallOption) (ChatService_SubscribeV2Client, error)
	PingSubscribeV2(ctx context.Context, in *PingSubscribeV2Request, opts ...grpc.CallOption) (*PingSubscribeV2Response, error)
	GetConversation(ctx context.Context, in *GetConversationRequest, opts ...grpc.CallOption) (*GetConversationResponse, error)
	// Deprecated functions
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ChatService_SubscribeClient, error)
	ConversationByStudentQuestion(ctx context.Context, in *ConversationByStudentQuestionRequest, opts ...grpc.CallOption) (*ConversationByStudentQuestionResponse, error)
	AutoCoachCustomMessage(ctx context.Context, in *AutoCoachCustomMessageRequest, opts ...grpc.CallOption) (*AutoCoachCustomMessageResponse, error)
	ConversationByClass(ctx context.Context, in *ConversationByClassRequest, opts ...grpc.CallOption) (*ConversationByClassResponse, error)
	TotalUserInConversation(ctx context.Context, in *TotalUserInConversationRequest, opts ...grpc.CallOption) (*TotalUserInConversationResponse, error)
	ConversationByLesson(ctx context.Context, in *ConversationByLessonRequest, opts ...grpc.CallOption) (*ConversationByLessonResponse, error)
	TeacherAllowStudentToSpeak(ctx context.Context, in *TeacherAllowStudentToSpeakRequest, opts ...grpc.CallOption) (*TeacherAllowStudentToSpeakResponse, error)
	TeacherProhibitStudentToSpeak(ctx context.Context, in *TeacherProhibitStudentToSpeakRequest, opts ...grpc.CallOption) (*TeacherProhibitStudentToSpeakResponse, error)
	StudentRaiseHand(ctx context.Context, in *StudentRaiseHandRequest, opts ...grpc.CallOption) (*StudentRaiseHandResponse, error)
	StudentPutHandDown(ctx context.Context, in *StudentPutHandDownRequest, opts ...grpc.CallOption) (*StudentPutHandDownResponse, error)
	StudentAcceptToSpeak(ctx context.Context, in *StudentAcceptToSpeakRequest, opts ...grpc.CallOption) (*StudentAcceptToSpeakResponse, error)
	StudentDeclineToSpeak(ctx context.Context, in *StudentDeclineToSpeakRequest, opts ...grpc.CallOption) (*StudentDeclineToSpeakResponse, error)
	TeacherProhibitAllStudentToChat(ctx context.Context, in *TeacherProhibitAllStudentToChatRequest, opts ...grpc.CallOption) (*TeacherProhibitAllStudentToChatResponse, error)
	TeacherAllowAllStudentToChat(ctx context.Context, in *TeacherAllowAllStudentToChatRequest, opts ...grpc.CallOption) (*TeacherAllowAllStudentToChatResponse, error)
	RetrieveConversationEvents(ctx context.Context, in *RetrieveConversationEventsRequest, opts ...grpc.CallOption) (*RetrieveConversationEventsResponse, error)
	DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error)
	StreamingEvent(ctx context.Context, opts ...grpc.CallOption) (ChatService_StreamingEventClient, error)
}

type chatServiceClient struct {
	cc *grpc.ClientConn
}

func NewChatServiceClient(cc *grpc.ClientConn) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, "/manabie.tom.ChatService/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) SeenMessage(ctx context.Context, in *SeenMessageRequest, opts ...grpc.CallOption) (*SeenMessageResponse, error) {
	out := new(SeenMessageResponse)
	err := c.cc.Invoke(ctx, "/manabie.tom.ChatService/SeenMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ConversationList(ctx context.Context, in *ConversationListRequest, opts ...grpc.CallOption) (*ConversationListResponse, error) {
	out := new(ConversationListResponse)
	err := c.cc.Invoke(ctx, "/manabie.tom.ChatService/ConversationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ConversationDetail(ctx context.Context, in *ConversationDetailRequest, opts ...grpc.CallOption) (*ConversationDetailResponse, error) {
	out := new(ConversationDetailResponse)
	err := c.cc.Invoke(ctx, "/manabie.tom.ChatService/ConversationDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) RetrievePushedNotificationMessages(ctx context.Context, in *RetrievePushedNotificationMessageRequest, opts ...grpc.CallOption) (*RetrievePushedNotificationMessageResponse, error) {
	out := new(RetrievePushedNotificationMessageResponse)
	err := c.cc.Invoke(ctx, "/manabie.tom.ChatService/RetrievePushedNotificationMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) SubscribeV2(ctx context.Context, in *SubscribeV2Request, opts ...grpc.CallOption) (ChatService_SubscribeV2Client, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatService_serviceDesc.Streams[0], "/manabie.tom.ChatService/SubscribeV2", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceSubscribeV2Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_SubscribeV2Client interface {
	Recv() (*SubscribeV2Response, error)
	grpc.ClientStream
}

type chatServiceSubscribeV2Client struct {
	grpc.ClientStream
}

func (x *chatServiceSubscribeV2Client) Recv() (*SubscribeV2Response, error) {
	m := new(SubscribeV2Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) PingSubscribeV2(ctx context.Context, in *PingSubscribeV2Request, opts ...grpc.CallOption) (*PingSubscribeV2Response, error) {
	out := new(PingSubscribeV2Response)
	err := c.cc.Invoke(ctx, "/manabie.tom.ChatService/PingSubscribeV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetConversation(ctx context.Context, in *GetConversationRequest, opts ...grpc.CallOption) (*GetConversationResponse, error) {
	out := new(GetConversationResponse)
	err := c.cc.Invoke(ctx, "/manabie.tom.ChatService/GetConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *chatServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ChatService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatService_serviceDesc.Streams[1], "/manabie.tom.ChatService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type chatServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *chatServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) ConversationByStudentQuestion(ctx context.Context, in *ConversationByStudentQuestionRequest, opts ...grpc.CallOption) (*ConversationByStudentQuestionResponse, error) {
	out := new(ConversationByStudentQuestionResponse)
	err := c.cc.Invoke(ctx, "/manabie.tom.ChatService/ConversationByStudentQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *chatServiceClient) AutoCoachCustomMessage(ctx context.Context, in *AutoCoachCustomMessageRequest, opts ...grpc.CallOption) (*AutoCoachCustomMessageResponse, error) {
	out := new(AutoCoachCustomMessageResponse)
	err := c.cc.Invoke(ctx, "/manabie.tom.ChatService/AutoCoachCustomMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *chatServiceClient) ConversationByClass(ctx context.Context, in *ConversationByClassRequest, opts ...grpc.CallOption) (*ConversationByClassResponse, error) {
	out := new(ConversationByClassResponse)
	err := c.cc.Invoke(ctx, "/manabie.tom.ChatService/ConversationByClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *chatServiceClient) TotalUserInConversation(ctx context.Context, in *TotalUserInConversationRequest, opts ...grpc.CallOption) (*TotalUserInConversationResponse, error) {
	out := new(TotalUserInConversationResponse)
	err := c.cc.Invoke(ctx, "/manabie.tom.ChatService/TotalUserInConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *chatServiceClient) ConversationByLesson(ctx context.Context, in *ConversationByLessonRequest, opts ...grpc.CallOption) (*ConversationByLessonResponse, error) {
	out := new(ConversationByLessonResponse)
	err := c.cc.Invoke(ctx, "/manabie.tom.ChatService/ConversationByLesson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *chatServiceClient) TeacherAllowStudentToSpeak(ctx context.Context, in *TeacherAllowStudentToSpeakRequest, opts ...grpc.CallOption) (*TeacherAllowStudentToSpeakResponse, error) {
	out := new(TeacherAllowStudentToSpeakResponse)
	err := c.cc.Invoke(ctx, "/manabie.tom.ChatService/TeacherAllowStudentToSpeak", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *chatServiceClient) TeacherProhibitStudentToSpeak(ctx context.Context, in *TeacherProhibitStudentToSpeakRequest, opts ...grpc.CallOption) (*TeacherProhibitStudentToSpeakResponse, error) {
	out := new(TeacherProhibitStudentToSpeakResponse)
	err := c.cc.Invoke(ctx, "/manabie.tom.ChatService/TeacherProhibitStudentToSpeak", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *chatServiceClient) StudentRaiseHand(ctx context.Context, in *StudentRaiseHandRequest, opts ...grpc.CallOption) (*StudentRaiseHandResponse, error) {
	out := new(StudentRaiseHandResponse)
	err := c.cc.Invoke(ctx, "/manabie.tom.ChatService/StudentRaiseHand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *chatServiceClient) StudentPutHandDown(ctx context.Context, in *StudentPutHandDownRequest, opts ...grpc.CallOption) (*StudentPutHandDownResponse, error) {
	out := new(StudentPutHandDownResponse)
	err := c.cc.Invoke(ctx, "/manabie.tom.ChatService/StudentPutHandDown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *chatServiceClient) StudentAcceptToSpeak(ctx context.Context, in *StudentAcceptToSpeakRequest, opts ...grpc.CallOption) (*StudentAcceptToSpeakResponse, error) {
	out := new(StudentAcceptToSpeakResponse)
	err := c.cc.Invoke(ctx, "/manabie.tom.ChatService/StudentAcceptToSpeak", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *chatServiceClient) StudentDeclineToSpeak(ctx context.Context, in *StudentDeclineToSpeakRequest, opts ...grpc.CallOption) (*StudentDeclineToSpeakResponse, error) {
	out := new(StudentDeclineToSpeakResponse)
	err := c.cc.Invoke(ctx, "/manabie.tom.ChatService/StudentDeclineToSpeak", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *chatServiceClient) TeacherProhibitAllStudentToChat(ctx context.Context, in *TeacherProhibitAllStudentToChatRequest, opts ...grpc.CallOption) (*TeacherProhibitAllStudentToChatResponse, error) {
	out := new(TeacherProhibitAllStudentToChatResponse)
	err := c.cc.Invoke(ctx, "/manabie.tom.ChatService/TeacherProhibitAllStudentToChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *chatServiceClient) TeacherAllowAllStudentToChat(ctx context.Context, in *TeacherAllowAllStudentToChatRequest, opts ...grpc.CallOption) (*TeacherAllowAllStudentToChatResponse, error) {
	out := new(TeacherAllowAllStudentToChatResponse)
	err := c.cc.Invoke(ctx, "/manabie.tom.ChatService/TeacherAllowAllStudentToChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *chatServiceClient) RetrieveConversationEvents(ctx context.Context, in *RetrieveConversationEventsRequest, opts ...grpc.CallOption) (*RetrieveConversationEventsResponse, error) {
	out := new(RetrieveConversationEventsResponse)
	err := c.cc.Invoke(ctx, "/manabie.tom.ChatService/RetrieveConversationEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *chatServiceClient) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error) {
	out := new(DeleteMessageResponse)
	err := c.cc.Invoke(ctx, "/manabie.tom.ChatService/DeleteMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *chatServiceClient) StreamingEvent(ctx context.Context, opts ...grpc.CallOption) (ChatService_StreamingEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatService_serviceDesc.Streams[2], "/manabie.tom.ChatService/StreamingEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceStreamingEventClient{stream}
	return x, nil
}

type ChatService_StreamingEventClient interface {
	Send(*StreamingEventRequest) error
	Recv() (*StreamingEventResponse, error)
	grpc.ClientStream
}

type chatServiceStreamingEventClient struct {
	grpc.ClientStream
}

func (x *chatServiceStreamingEventClient) Send(m *StreamingEventRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServiceStreamingEventClient) Recv() (*StreamingEventResponse, error) {
	m := new(StreamingEventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServiceServer is the server API for ChatService service.
type ChatServiceServer interface {
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	SeenMessage(context.Context, *SeenMessageRequest) (*SeenMessageResponse, error)
	ConversationList(context.Context, *ConversationListRequest) (*ConversationListResponse, error)
	ConversationDetail(context.Context, *ConversationDetailRequest) (*ConversationDetailResponse, error)
	RetrievePushedNotificationMessages(context.Context, *RetrievePushedNotificationMessageRequest) (*RetrievePushedNotificationMessageResponse, error)
	SubscribeV2(*SubscribeV2Request, ChatService_SubscribeV2Server) error
	PingSubscribeV2(context.Context, *PingSubscribeV2Request) (*PingSubscribeV2Response, error)
	GetConversation(context.Context, *GetConversationRequest) (*GetConversationResponse, error)
	// Deprecated functions
	Subscribe(*SubscribeRequest, ChatService_SubscribeServer) error
	ConversationByStudentQuestion(context.Context, *ConversationByStudentQuestionRequest) (*ConversationByStudentQuestionResponse, error)
	AutoCoachCustomMessage(context.Context, *AutoCoachCustomMessageRequest) (*AutoCoachCustomMessageResponse, error)
	ConversationByClass(context.Context, *ConversationByClassRequest) (*ConversationByClassResponse, error)
	TotalUserInConversation(context.Context, *TotalUserInConversationRequest) (*TotalUserInConversationResponse, error)
	ConversationByLesson(context.Context, *ConversationByLessonRequest) (*ConversationByLessonResponse, error)
	TeacherAllowStudentToSpeak(context.Context, *TeacherAllowStudentToSpeakRequest) (*TeacherAllowStudentToSpeakResponse, error)
	TeacherProhibitStudentToSpeak(context.Context, *TeacherProhibitStudentToSpeakRequest) (*TeacherProhibitStudentToSpeakResponse, error)
	StudentRaiseHand(context.Context, *StudentRaiseHandRequest) (*StudentRaiseHandResponse, error)
	StudentPutHandDown(context.Context, *StudentPutHandDownRequest) (*StudentPutHandDownResponse, error)
	StudentAcceptToSpeak(context.Context, *StudentAcceptToSpeakRequest) (*StudentAcceptToSpeakResponse, error)
	StudentDeclineToSpeak(context.Context, *StudentDeclineToSpeakRequest) (*StudentDeclineToSpeakResponse, error)
	TeacherProhibitAllStudentToChat(context.Context, *TeacherProhibitAllStudentToChatRequest) (*TeacherProhibitAllStudentToChatResponse, error)
	TeacherAllowAllStudentToChat(context.Context, *TeacherAllowAllStudentToChatRequest) (*TeacherAllowAllStudentToChatResponse, error)
	RetrieveConversationEvents(context.Context, *RetrieveConversationEventsRequest) (*RetrieveConversationEventsResponse, error)
	DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error)
	StreamingEvent(ChatService_StreamingEventServer) error
}

// UnimplementedChatServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (*UnimplementedChatServiceServer) SendMessage(ctx context.Context, req *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (*UnimplementedChatServiceServer) SeenMessage(ctx context.Context, req *SeenMessageRequest) (*SeenMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeenMessage not implemented")
}
func (*UnimplementedChatServiceServer) ConversationList(ctx context.Context, req *ConversationListRequest) (*ConversationListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConversationList not implemented")
}
func (*UnimplementedChatServiceServer) ConversationDetail(ctx context.Context, req *ConversationDetailRequest) (*ConversationDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConversationDetail not implemented")
}
func (*UnimplementedChatServiceServer) RetrievePushedNotificationMessages(ctx context.Context, req *RetrievePushedNotificationMessageRequest) (*RetrievePushedNotificationMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrievePushedNotificationMessages not implemented")
}
func (*UnimplementedChatServiceServer) SubscribeV2(req *SubscribeV2Request, srv ChatService_SubscribeV2Server) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeV2 not implemented")
}
func (*UnimplementedChatServiceServer) PingSubscribeV2(ctx context.Context, req *PingSubscribeV2Request) (*PingSubscribeV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingSubscribeV2 not implemented")
}
func (*UnimplementedChatServiceServer) GetConversation(ctx context.Context, req *GetConversationRequest) (*GetConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversation not implemented")
}
func (*UnimplementedChatServiceServer) Subscribe(req *SubscribeRequest, srv ChatService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedChatServiceServer) ConversationByStudentQuestion(ctx context.Context, req *ConversationByStudentQuestionRequest) (*ConversationByStudentQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConversationByStudentQuestion not implemented")
}
func (*UnimplementedChatServiceServer) AutoCoachCustomMessage(ctx context.Context, req *AutoCoachCustomMessageRequest) (*AutoCoachCustomMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoCoachCustomMessage not implemented")
}
func (*UnimplementedChatServiceServer) ConversationByClass(ctx context.Context, req *ConversationByClassRequest) (*ConversationByClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConversationByClass not implemented")
}
func (*UnimplementedChatServiceServer) TotalUserInConversation(ctx context.Context, req *TotalUserInConversationRequest) (*TotalUserInConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalUserInConversation not implemented")
}
func (*UnimplementedChatServiceServer) ConversationByLesson(ctx context.Context, req *ConversationByLessonRequest) (*ConversationByLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConversationByLesson not implemented")
}
func (*UnimplementedChatServiceServer) TeacherAllowStudentToSpeak(ctx context.Context, req *TeacherAllowStudentToSpeakRequest) (*TeacherAllowStudentToSpeakResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherAllowStudentToSpeak not implemented")
}
func (*UnimplementedChatServiceServer) TeacherProhibitStudentToSpeak(ctx context.Context, req *TeacherProhibitStudentToSpeakRequest) (*TeacherProhibitStudentToSpeakResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherProhibitStudentToSpeak not implemented")
}
func (*UnimplementedChatServiceServer) StudentRaiseHand(ctx context.Context, req *StudentRaiseHandRequest) (*StudentRaiseHandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StudentRaiseHand not implemented")
}
func (*UnimplementedChatServiceServer) StudentPutHandDown(ctx context.Context, req *StudentPutHandDownRequest) (*StudentPutHandDownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StudentPutHandDown not implemented")
}
func (*UnimplementedChatServiceServer) StudentAcceptToSpeak(ctx context.Context, req *StudentAcceptToSpeakRequest) (*StudentAcceptToSpeakResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StudentAcceptToSpeak not implemented")
}
func (*UnimplementedChatServiceServer) StudentDeclineToSpeak(ctx context.Context, req *StudentDeclineToSpeakRequest) (*StudentDeclineToSpeakResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StudentDeclineToSpeak not implemented")
}
func (*UnimplementedChatServiceServer) TeacherProhibitAllStudentToChat(ctx context.Context, req *TeacherProhibitAllStudentToChatRequest) (*TeacherProhibitAllStudentToChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherProhibitAllStudentToChat not implemented")
}
func (*UnimplementedChatServiceServer) TeacherAllowAllStudentToChat(ctx context.Context, req *TeacherAllowAllStudentToChatRequest) (*TeacherAllowAllStudentToChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherAllowAllStudentToChat not implemented")
}
func (*UnimplementedChatServiceServer) RetrieveConversationEvents(ctx context.Context, req *RetrieveConversationEventsRequest) (*RetrieveConversationEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveConversationEvents not implemented")
}
func (*UnimplementedChatServiceServer) DeleteMessage(ctx context.Context, req *DeleteMessageRequest) (*DeleteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (*UnimplementedChatServiceServer) StreamingEvent(srv ChatService_StreamingEventServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingEvent not implemented")
}

func RegisterChatServiceServer(s *grpc.Server, srv ChatServiceServer) {
	s.RegisterService(&_ChatService_serviceDesc, srv)
}

func _ChatService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.tom.ChatService/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_SeenMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeenMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SeenMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.tom.ChatService/SeenMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SeenMessage(ctx, req.(*SeenMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ConversationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ConversationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.tom.ChatService/ConversationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ConversationList(ctx, req.(*ConversationListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ConversationDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ConversationDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.tom.ChatService/ConversationDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ConversationDetail(ctx, req.(*ConversationDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_RetrievePushedNotificationMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrievePushedNotificationMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).RetrievePushedNotificationMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.tom.ChatService/RetrievePushedNotificationMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).RetrievePushedNotificationMessages(ctx, req.(*RetrievePushedNotificationMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_SubscribeV2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeV2Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).SubscribeV2(m, &chatServiceSubscribeV2Server{stream})
}

type ChatService_SubscribeV2Server interface {
	Send(*SubscribeV2Response) error
	grpc.ServerStream
}

type chatServiceSubscribeV2Server struct {
	grpc.ServerStream
}

func (x *chatServiceSubscribeV2Server) Send(m *SubscribeV2Response) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatService_PingSubscribeV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingSubscribeV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).PingSubscribeV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.tom.ChatService/PingSubscribeV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).PingSubscribeV2(ctx, req.(*PingSubscribeV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.tom.ChatService/GetConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetConversation(ctx, req.(*GetConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).Subscribe(m, &chatServiceSubscribeServer{stream})
}

type ChatService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type chatServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *chatServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatService_ConversationByStudentQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationByStudentQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ConversationByStudentQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.tom.ChatService/ConversationByStudentQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ConversationByStudentQuestion(ctx, req.(*ConversationByStudentQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_AutoCoachCustomMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoCoachCustomMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).AutoCoachCustomMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.tom.ChatService/AutoCoachCustomMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).AutoCoachCustomMessage(ctx, req.(*AutoCoachCustomMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ConversationByClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationByClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ConversationByClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.tom.ChatService/ConversationByClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ConversationByClass(ctx, req.(*ConversationByClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_TotalUserInConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalUserInConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).TotalUserInConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.tom.ChatService/TotalUserInConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).TotalUserInConversation(ctx, req.(*TotalUserInConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ConversationByLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationByLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ConversationByLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.tom.ChatService/ConversationByLesson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ConversationByLesson(ctx, req.(*ConversationByLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_TeacherAllowStudentToSpeak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeacherAllowStudentToSpeakRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).TeacherAllowStudentToSpeak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.tom.ChatService/TeacherAllowStudentToSpeak",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).TeacherAllowStudentToSpeak(ctx, req.(*TeacherAllowStudentToSpeakRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_TeacherProhibitStudentToSpeak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeacherProhibitStudentToSpeakRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).TeacherProhibitStudentToSpeak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.tom.ChatService/TeacherProhibitStudentToSpeak",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).TeacherProhibitStudentToSpeak(ctx, req.(*TeacherProhibitStudentToSpeakRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_StudentRaiseHand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentRaiseHandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).StudentRaiseHand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.tom.ChatService/StudentRaiseHand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).StudentRaiseHand(ctx, req.(*StudentRaiseHandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_StudentPutHandDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentPutHandDownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).StudentPutHandDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.tom.ChatService/StudentPutHandDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).StudentPutHandDown(ctx, req.(*StudentPutHandDownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_StudentAcceptToSpeak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentAcceptToSpeakRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).StudentAcceptToSpeak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.tom.ChatService/StudentAcceptToSpeak",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).StudentAcceptToSpeak(ctx, req.(*StudentAcceptToSpeakRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_StudentDeclineToSpeak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentDeclineToSpeakRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).StudentDeclineToSpeak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.tom.ChatService/StudentDeclineToSpeak",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).StudentDeclineToSpeak(ctx, req.(*StudentDeclineToSpeakRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_TeacherProhibitAllStudentToChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeacherProhibitAllStudentToChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).TeacherProhibitAllStudentToChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.tom.ChatService/TeacherProhibitAllStudentToChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).TeacherProhibitAllStudentToChat(ctx, req.(*TeacherProhibitAllStudentToChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_TeacherAllowAllStudentToChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeacherAllowAllStudentToChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).TeacherAllowAllStudentToChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.tom.ChatService/TeacherAllowAllStudentToChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).TeacherAllowAllStudentToChat(ctx, req.(*TeacherAllowAllStudentToChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_RetrieveConversationEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveConversationEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).RetrieveConversationEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.tom.ChatService/RetrieveConversationEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).RetrieveConversationEvents(ctx, req.(*RetrieveConversationEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manabie.tom.ChatService/DeleteMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DeleteMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_StreamingEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiceServer).StreamingEvent(&chatServiceStreamingEventServer{stream})
}

type ChatService_StreamingEventServer interface {
	Send(*StreamingEventResponse) error
	Recv() (*StreamingEventRequest, error)
	grpc.ServerStream
}

type chatServiceStreamingEventServer struct {
	grpc.ServerStream
}

func (x *chatServiceStreamingEventServer) Send(m *StreamingEventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServiceStreamingEventServer) Recv() (*StreamingEventRequest, error) {
	m := new(StreamingEventRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ChatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "manabie.tom.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _ChatService_SendMessage_Handler,
		},
		{
			MethodName: "SeenMessage",
			Handler:    _ChatService_SeenMessage_Handler,
		},
		{
			MethodName: "ConversationList",
			Handler:    _ChatService_ConversationList_Handler,
		},
		{
			MethodName: "ConversationDetail",
			Handler:    _ChatService_ConversationDetail_Handler,
		},
		{
			MethodName: "RetrievePushedNotificationMessages",
			Handler:    _ChatService_RetrievePushedNotificationMessages_Handler,
		},
		{
			MethodName: "PingSubscribeV2",
			Handler:    _ChatService_PingSubscribeV2_Handler,
		},
		{
			MethodName: "GetConversation",
			Handler:    _ChatService_GetConversation_Handler,
		},
		{
			MethodName: "ConversationByStudentQuestion",
			Handler:    _ChatService_ConversationByStudentQuestion_Handler,
		},
		{
			MethodName: "AutoCoachCustomMessage",
			Handler:    _ChatService_AutoCoachCustomMessage_Handler,
		},
		{
			MethodName: "ConversationByClass",
			Handler:    _ChatService_ConversationByClass_Handler,
		},
		{
			MethodName: "TotalUserInConversation",
			Handler:    _ChatService_TotalUserInConversation_Handler,
		},
		{
			MethodName: "ConversationByLesson",
			Handler:    _ChatService_ConversationByLesson_Handler,
		},
		{
			MethodName: "TeacherAllowStudentToSpeak",
			Handler:    _ChatService_TeacherAllowStudentToSpeak_Handler,
		},
		{
			MethodName: "TeacherProhibitStudentToSpeak",
			Handler:    _ChatService_TeacherProhibitStudentToSpeak_Handler,
		},
		{
			MethodName: "StudentRaiseHand",
			Handler:    _ChatService_StudentRaiseHand_Handler,
		},
		{
			MethodName: "StudentPutHandDown",
			Handler:    _ChatService_StudentPutHandDown_Handler,
		},
		{
			MethodName: "StudentAcceptToSpeak",
			Handler:    _ChatService_StudentAcceptToSpeak_Handler,
		},
		{
			MethodName: "StudentDeclineToSpeak",
			Handler:    _ChatService_StudentDeclineToSpeak_Handler,
		},
		{
			MethodName: "TeacherProhibitAllStudentToChat",
			Handler:    _ChatService_TeacherProhibitAllStudentToChat_Handler,
		},
		{
			MethodName: "TeacherAllowAllStudentToChat",
			Handler:    _ChatService_TeacherAllowAllStudentToChat_Handler,
		},
		{
			MethodName: "RetrieveConversationEvents",
			Handler:    _ChatService_RetrieveConversationEvents_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _ChatService_DeleteMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeV2",
			Handler:       _ChatService_SubscribeV2_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _ChatService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamingEvent",
			Handler:       _ChatService_StreamingEvent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tomchat.proto",
}

func (m *AssignToCoachRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssignToCoachRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssignToCoachRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CoachId) > 0 {
		i -= len(m.CoachId)
		copy(dAtA[i:], m.CoachId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.CoachId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SendMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendMessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TargetUser) > 0 {
		i -= len(m.TargetUser)
		copy(dAtA[i:], m.TargetUser)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.TargetUser)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.LocalMessageId) > 0 {
		i -= len(m.LocalMessageId)
		copy(dAtA[i:], m.LocalMessageId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.LocalMessageId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Type != 0 {
		i = encodeVarintTomchat(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x20
	}
	if len(m.UrlMedia) > 0 {
		i -= len(m.UrlMedia)
		copy(dAtA[i:], m.UrlMedia)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.UrlMedia)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConversationId) > 0 {
		i -= len(m.ConversationId)
		copy(dAtA[i:], m.ConversationId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.ConversationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SendMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LocalMessageId) > 0 {
		i -= len(m.LocalMessageId)
		copy(dAtA[i:], m.LocalMessageId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.LocalMessageId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MessageId) > 0 {
		i -= len(m.MessageId)
		copy(dAtA[i:], m.MessageId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.MessageId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConversationName) > 0 {
		i -= len(m.ConversationName)
		copy(dAtA[i:], m.ConversationName)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.ConversationName)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.DeletedBy) > 0 {
		i -= len(m.DeletedBy)
		copy(dAtA[i:], m.DeletedBy)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.DeletedBy)))
		i--
		dAtA[i] = 0x5a
	}
	if m.IsDeleted {
		i--
		if m.IsDeleted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.TargetUser) > 0 {
		i -= len(m.TargetUser)
		copy(dAtA[i:], m.TargetUser)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.TargetUser)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.LocalMessageId) > 0 {
		i -= len(m.LocalMessageId)
		copy(dAtA[i:], m.LocalMessageId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.LocalMessageId)))
		i--
		dAtA[i] = 0x42
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTomchat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Type != 0 {
		i = encodeVarintTomchat(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x30
	}
	if len(m.UrlMedia) > 0 {
		i -= len(m.UrlMedia)
		copy(dAtA[i:], m.UrlMedia)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.UrlMedia)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConversationId) > 0 {
		i -= len(m.ConversationId)
		copy(dAtA[i:], m.ConversationId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.ConversationId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MessageId) > 0 {
		i -= len(m.MessageId)
		copy(dAtA[i:], m.MessageId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.MessageId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SeenMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeenMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeenMessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConversationId) > 0 {
		i -= len(m.ConversationId)
		copy(dAtA[i:], m.ConversationId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.ConversationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SeenMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeenMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeenMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SubscribeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SubscribeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		{
			size := m.Event.Size()
			i -= size
			if _, err := m.Event.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeResponse_MessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeResponse_MessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MessageResponse != nil {
		{
			size, err := m.MessageResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTomchat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *InternalSendMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalSendMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternalSendMessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTomchat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeReceive) > 0 {
		for k := range m.NodeReceive {
			v := m.NodeReceive[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTomchat(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTomchat(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTomchat(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *InternalSendMessageRequest_UserIDs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InternalSendMessageRequest_UserIDs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InternalSendMessageRequest_UserIDs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for iNdEx := len(m.Ids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Ids[iNdEx])
			copy(dAtA[i:], m.Ids[iNdEx])
			i = encodeVarintTomchat(dAtA, i, uint64(len(m.Ids[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConversationListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClassId != 0 {
		i = encodeVarintTomchat(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x18
	}
	if m.EndAt != nil {
		{
			size, err := m.EndAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTomchat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Limit != 0 {
		i = encodeVarintTomchat(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Conversation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Conversation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Conversation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConversationName) > 0 {
		i -= len(m.ConversationName)
		copy(dAtA[i:], m.ConversationName)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.ConversationName)))
		i--
		dAtA[i] = 0x72
	}
	if m.ConversationType != 0 {
		i = encodeVarintTomchat(dAtA, i, uint64(m.ConversationType))
		i--
		dAtA[i] = 0x68
	}
	if m.ClassId != 0 {
		i = encodeVarintTomchat(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Users) > 0 {
		for iNdEx := len(m.Users) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Users[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTomchat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.PreviousCoachIds) > 0 {
		for iNdEx := len(m.PreviousCoachIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PreviousCoachIds[iNdEx])
			copy(dAtA[i:], m.PreviousCoachIds[iNdEx])
			i = encodeVarintTomchat(dAtA, i, uint64(len(m.PreviousCoachIds[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Status != 0 {
		i = encodeVarintTomchat(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x48
	}
	if len(m.StudentQuestionId) > 0 {
		i -= len(m.StudentQuestionId)
		copy(dAtA[i:], m.StudentQuestionId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.StudentQuestionId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TutorId) > 0 {
		i -= len(m.TutorId)
		copy(dAtA[i:], m.TutorId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.TutorId)))
		i--
		dAtA[i] = 0x3a
	}
	if m.LastMessage != nil {
		{
			size, err := m.LastMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTomchat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Seen {
		i--
		if m.Seen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.GuestIds) > 0 {
		for iNdEx := len(m.GuestIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.GuestIds[iNdEx])
			copy(dAtA[i:], m.GuestIds[iNdEx])
			i = encodeVarintTomchat(dAtA, i, uint64(len(m.GuestIds[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CoachId) > 0 {
		i -= len(m.CoachId)
		copy(dAtA[i:], m.CoachId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.CoachId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConversationId) > 0 {
		i -= len(m.ConversationId)
		copy(dAtA[i:], m.ConversationId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.ConversationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Conversation_User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Conversation_User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Conversation_User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SeenAt != nil {
		{
			size, err := m.SeenAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTomchat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.IsPresent {
		i--
		if m.IsPresent {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConversationListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Conversations) > 0 {
		for iNdEx := len(m.Conversations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conversations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTomchat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConversationByStudentQuestionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationByStudentQuestionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationByStudentQuestionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StudentQuestionIds) > 0 {
		for iNdEx := len(m.StudentQuestionIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StudentQuestionIds[iNdEx])
			copy(dAtA[i:], m.StudentQuestionIds[iNdEx])
			i = encodeVarintTomchat(dAtA, i, uint64(len(m.StudentQuestionIds[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConversationByStudentQuestionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationByStudentQuestionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationByStudentQuestionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Conversations) > 0 {
		for iNdEx := len(m.Conversations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conversations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTomchat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConversationByClassRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationByClassRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationByClassRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClassId != 0 {
		i = encodeVarintTomchat(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x18
	}
	if m.EndAt != nil {
		{
			size, err := m.EndAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTomchat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Limit != 0 {
		i = encodeVarintTomchat(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConversationByClassResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationByClassResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationByClassResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Conversations) > 0 {
		for iNdEx := len(m.Conversations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conversations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTomchat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConversationDetailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationDetailRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationDetailRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MessageType != nil {
		{
			size := m.MessageType.Size()
			i -= size
			if _, err := m.MessageType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.EndAt != nil {
		{
			size, err := m.EndAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTomchat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Limit != 0 {
		i = encodeVarintTomchat(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ConversationId) > 0 {
		i -= len(m.ConversationId)
		copy(dAtA[i:], m.ConversationId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.ConversationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConversationDetailRequest_Include_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationDetailRequest_Include_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Include != nil {
		{
			size, err := m.Include.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTomchat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *ConversationDetailRequest_Exclude_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationDetailRequest_Exclude_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Exclude != nil {
		{
			size, err := m.Exclude.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTomchat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *ConversationDetailRequest_Include) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationDetailRequest_Include) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationDetailRequest_Include) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Types) > 0 {
		dAtA13 := make([]byte, len(m.Types)*10)
		var j12 int
		for _, num := range m.Types {
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		i -= j12
		copy(dAtA[i:], dAtA13[:j12])
		i = encodeVarintTomchat(dAtA, i, uint64(j12))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConversationDetailRequest_Exclude) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationDetailRequest_Exclude) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationDetailRequest_Exclude) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Types) > 0 {
		dAtA15 := make([]byte, len(m.Types)*10)
		var j14 int
		for _, num := range m.Types {
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		i -= j14
		copy(dAtA[i:], dAtA15[:j14])
		i = encodeVarintTomchat(dAtA, i, uint64(j14))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConversationDetailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationDetailResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationDetailResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Messages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTomchat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PushedNotificationMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushedNotificationMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushedNotificationMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PushedAt != nil {
		{
			size, err := m.PushedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTomchat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTomchat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Body) > 0 {
		i -= len(m.Body)
		copy(dAtA[i:], m.Body)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.Body)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrievePushedNotificationMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrievePushedNotificationMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrievePushedNotificationMessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Since != nil {
		{
			size, err := m.Since.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTomchat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Limit != 0 {
		i = encodeVarintTomchat(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DeviceToken) > 0 {
		i -= len(m.DeviceToken)
		copy(dAtA[i:], m.DeviceToken)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.DeviceToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrievePushedNotificationMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrievePushedNotificationMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrievePushedNotificationMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Messages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTomchat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AutoCoachCustomMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoCoachCustomMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AutoCoachCustomMessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UrlMedia) > 0 {
		i -= len(m.UrlMedia)
		copy(dAtA[i:], m.UrlMedia)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.UrlMedia)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AutoCoachCustomMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AutoCoachCustomMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AutoCoachCustomMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Successful {
		i--
		if m.Successful {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetConversationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetConversationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetConversationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClassId != 0 {
		i = encodeVarintTomchat(dAtA, i, uint64(m.ClassId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConversationId) > 0 {
		i -= len(m.ConversationId)
		copy(dAtA[i:], m.ConversationId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.ConversationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetConversationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetConversationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetConversationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Conversation != nil {
		{
			size, err := m.Conversation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTomchat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TotalUserInConversationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TotalUserInConversationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TotalUserInConversationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LessonId) > 0 {
		i -= len(m.LessonId)
		copy(dAtA[i:], m.LessonId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.LessonId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConversationId) > 0 {
		i -= len(m.ConversationId)
		copy(dAtA[i:], m.ConversationId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.ConversationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TotalUserInConversationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TotalUserInConversationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TotalUserInConversationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalUser != 0 {
		i = encodeVarintTomchat(dAtA, i, uint64(m.TotalUser))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConversationByLessonRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationByLessonRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationByLessonRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LessonId) > 0 {
		i -= len(m.LessonId)
		copy(dAtA[i:], m.LessonId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.LessonId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EndAt != nil {
		{
			size, err := m.EndAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTomchat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Limit != 0 {
		i = encodeVarintTomchat(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConversationByLessonResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationByLessonResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationByLessonResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Conversations) > 0 {
		for iNdEx := len(m.Conversations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Conversations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTomchat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TeacherProhibitAllStudentToChatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeacherProhibitAllStudentToChatRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeacherProhibitAllStudentToChatRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConversationId) > 0 {
		i -= len(m.ConversationId)
		copy(dAtA[i:], m.ConversationId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.ConversationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TeacherProhibitAllStudentToChatResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeacherProhibitAllStudentToChatResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeacherProhibitAllStudentToChatResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TeacherAllowAllStudentToChatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeacherAllowAllStudentToChatRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeacherAllowAllStudentToChatRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConversationId) > 0 {
		i -= len(m.ConversationId)
		copy(dAtA[i:], m.ConversationId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.ConversationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TeacherAllowAllStudentToChatResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeacherAllowAllStudentToChatResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeacherAllowAllStudentToChatResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TeacherAllowStudentToSpeakRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeacherAllowStudentToSpeakRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeacherAllowStudentToSpeakRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConversationId) > 0 {
		i -= len(m.ConversationId)
		copy(dAtA[i:], m.ConversationId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.ConversationId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TeacherAllowStudentToSpeakResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeacherAllowStudentToSpeakResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeacherAllowStudentToSpeakResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TeacherProhibitStudentToSpeakRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeacherProhibitStudentToSpeakRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeacherProhibitStudentToSpeakRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConversationId) > 0 {
		i -= len(m.ConversationId)
		copy(dAtA[i:], m.ConversationId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.ConversationId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StudentId) > 0 {
		i -= len(m.StudentId)
		copy(dAtA[i:], m.StudentId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.StudentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TeacherProhibitStudentToSpeakResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeacherProhibitStudentToSpeakResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeacherProhibitStudentToSpeakResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StudentRaiseHandRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudentRaiseHandRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudentRaiseHandRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConversationId) > 0 {
		i -= len(m.ConversationId)
		copy(dAtA[i:], m.ConversationId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.ConversationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StudentRaiseHandResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudentRaiseHandResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudentRaiseHandResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeleteMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteMessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MessageId) > 0 {
		i -= len(m.MessageId)
		copy(dAtA[i:], m.MessageId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.MessageId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *EventPing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamingEventRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamingEventRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamingEventRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		{
			size := m.Event.Size()
			i -= size
			if _, err := m.Event.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *StreamingEventRequest_EventPing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamingEventRequest_EventPing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EventPing != nil {
		{
			size, err := m.EventPing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTomchat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *StreamingEventResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamingEventResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamingEventResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		{
			size := m.Event.Size()
			i -= size
			if _, err := m.Event.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *StreamingEventResponse_EventNewMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamingEventResponse_EventNewMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EventNewMessage != nil {
		{
			size, err := m.EventNewMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTomchat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *StreamingEventResponse_EventDeleteMessage_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamingEventResponse_EventDeleteMessage_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EventDeleteMessage != nil {
		{
			size, err := m.EventDeleteMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTomchat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *StreamingEventResponse_EventPing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamingEventResponse_EventPing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EventPing != nil {
		{
			size, err := m.EventPing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTomchat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *StreamingEventResponse_EventDeleteMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamingEventResponse_EventDeleteMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamingEventResponse_EventDeleteMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeletedBy) > 0 {
		i -= len(m.DeletedBy)
		copy(dAtA[i:], m.DeletedBy)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.DeletedBy)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MessageId) > 0 {
		i -= len(m.MessageId)
		copy(dAtA[i:], m.MessageId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.MessageId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConversationId) > 0 {
		i -= len(m.ConversationId)
		copy(dAtA[i:], m.ConversationId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.ConversationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StudentPutHandDownRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudentPutHandDownRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudentPutHandDownRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConversationId) > 0 {
		i -= len(m.ConversationId)
		copy(dAtA[i:], m.ConversationId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.ConversationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StudentPutHandDownResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudentPutHandDownResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudentPutHandDownResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ConversationEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConversationEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConversationEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTomchat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTomchat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Status != 0 {
		i = encodeVarintTomchat(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.EventType != 0 {
		i = encodeVarintTomchat(dAtA, i, uint64(m.EventType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.UserId) > 0 {
		i -= len(m.UserId)
		copy(dAtA[i:], m.UserId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.UserId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConversationId) > 0 {
		i -= len(m.ConversationId)
		copy(dAtA[i:], m.ConversationId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.ConversationId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConversationEventId) > 0 {
		i -= len(m.ConversationEventId)
		copy(dAtA[i:], m.ConversationEventId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.ConversationEventId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveConversationEventsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveConversationEventsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveConversationEventsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintTomchat(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.EventType != 0 {
		i = encodeVarintTomchat(dAtA, i, uint64(m.EventType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ConversationId) > 0 {
		i -= len(m.ConversationId)
		copy(dAtA[i:], m.ConversationId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.ConversationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RetrieveConversationEventsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RetrieveConversationEventsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RetrieveConversationEventsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConversationEvents) > 0 {
		for iNdEx := len(m.ConversationEvents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ConversationEvents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTomchat(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StudentAcceptToSpeakRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudentAcceptToSpeakRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudentAcceptToSpeakRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConversationId) > 0 {
		i -= len(m.ConversationId)
		copy(dAtA[i:], m.ConversationId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.ConversationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StudentAcceptToSpeakResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudentAcceptToSpeakResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudentAcceptToSpeakResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *StudentDeclineToSpeakRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudentDeclineToSpeakRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudentDeclineToSpeakRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ConversationId) > 0 {
		i -= len(m.ConversationId)
		copy(dAtA[i:], m.ConversationId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.ConversationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StudentDeclineToSpeakResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StudentDeclineToSpeakResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StudentDeclineToSpeakResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PingSubscribeV2Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingSubscribeV2Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PingSubscribeV2Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PingSubscribeV2Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingSubscribeV2Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PingSubscribeV2Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *SubscribeV2Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeV2Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeV2Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		{
			size := m.Event.Size()
			i -= size
			if _, err := m.Event.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Event_EventNewMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_EventNewMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EventNewMessage != nil {
		{
			size, err := m.EventNewMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTomchat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Event_EventDeleteMessage_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_EventDeleteMessage_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EventDeleteMessage != nil {
		{
			size, err := m.EventDeleteMessage.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTomchat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *Event_EventPing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_EventPing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.EventPing != nil {
		{
			size, err := m.EventPing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTomchat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Event_EventDeleteMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event_EventDeleteMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event_EventDeleteMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeletedBy) > 0 {
		i -= len(m.DeletedBy)
		copy(dAtA[i:], m.DeletedBy)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.DeletedBy)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MessageId) > 0 {
		i -= len(m.MessageId)
		copy(dAtA[i:], m.MessageId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.MessageId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConversationId) > 0 {
		i -= len(m.ConversationId)
		copy(dAtA[i:], m.ConversationId)
		i = encodeVarintTomchat(dAtA, i, uint64(len(m.ConversationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeV2Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeV2Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeV2Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		{
			size, err := m.Event.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTomchat(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTomchat(dAtA []byte, offset int, v uint64) int {
	offset -= sovTomchat(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AssignToCoachRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CoachId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}

func (m *SendMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConversationId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	l = len(m.UrlMedia)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovTomchat(uint64(m.Type))
	}
	l = len(m.LocalMessageId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	l = len(m.TargetUser)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}

func (m *SendMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MessageId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	l = len(m.LocalMessageId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}

func (m *MessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MessageId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	l = len(m.ConversationId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	l = len(m.UrlMedia)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovTomchat(uint64(m.Type))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovTomchat(uint64(l))
	}
	l = len(m.LocalMessageId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	l = len(m.TargetUser)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	if m.IsDeleted {
		n += 2
	}
	l = len(m.DeletedBy)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	l = len(m.ConversationName)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}

func (m *SeenMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConversationId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}

func (m *SeenMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SubscribeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SubscribeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		n += m.Event.Size()
	}
	return n
}

func (m *SubscribeResponse_MessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageResponse != nil {
		l = m.MessageResponse.Size()
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}
func (m *InternalSendMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NodeReceive) > 0 {
		for k, v := range m.NodeReceive {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTomchat(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTomchat(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTomchat(uint64(mapEntrySize))
		}
	}
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}

func (m *InternalSendMessageRequest_UserIDs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovTomchat(uint64(l))
		}
	}
	return n
}

func (m *ConversationListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovTomchat(uint64(m.Limit))
	}
	if m.EndAt != nil {
		l = m.EndAt.Size()
		n += 1 + l + sovTomchat(uint64(l))
	}
	if m.ClassId != 0 {
		n += 1 + sovTomchat(uint64(m.ClassId))
	}
	return n
}

func (m *Conversation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConversationId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	l = len(m.CoachId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	if len(m.GuestIds) > 0 {
		for _, s := range m.GuestIds {
			l = len(s)
			n += 1 + l + sovTomchat(uint64(l))
		}
	}
	if m.Seen {
		n += 2
	}
	if m.LastMessage != nil {
		l = m.LastMessage.Size()
		n += 1 + l + sovTomchat(uint64(l))
	}
	l = len(m.TutorId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	l = len(m.StudentQuestionId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTomchat(uint64(m.Status))
	}
	if len(m.PreviousCoachIds) > 0 {
		for _, s := range m.PreviousCoachIds {
			l = len(s)
			n += 1 + l + sovTomchat(uint64(l))
		}
	}
	if len(m.Users) > 0 {
		for _, e := range m.Users {
			l = e.Size()
			n += 1 + l + sovTomchat(uint64(l))
		}
	}
	if m.ClassId != 0 {
		n += 1 + sovTomchat(uint64(m.ClassId))
	}
	if m.ConversationType != 0 {
		n += 1 + sovTomchat(uint64(m.ConversationType))
	}
	l = len(m.ConversationName)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}

func (m *Conversation_User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	if m.IsPresent {
		n += 2
	}
	if m.SeenAt != nil {
		l = m.SeenAt.Size()
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}

func (m *ConversationListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Conversations) > 0 {
		for _, e := range m.Conversations {
			l = e.Size()
			n += 1 + l + sovTomchat(uint64(l))
		}
	}
	return n
}

func (m *ConversationByStudentQuestionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StudentQuestionIds) > 0 {
		for _, s := range m.StudentQuestionIds {
			l = len(s)
			n += 1 + l + sovTomchat(uint64(l))
		}
	}
	return n
}

func (m *ConversationByStudentQuestionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Conversations) > 0 {
		for _, e := range m.Conversations {
			l = e.Size()
			n += 1 + l + sovTomchat(uint64(l))
		}
	}
	return n
}

func (m *ConversationByClassRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovTomchat(uint64(m.Limit))
	}
	if m.EndAt != nil {
		l = m.EndAt.Size()
		n += 1 + l + sovTomchat(uint64(l))
	}
	if m.ClassId != 0 {
		n += 1 + sovTomchat(uint64(m.ClassId))
	}
	return n
}

func (m *ConversationByClassResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Conversations) > 0 {
		for _, e := range m.Conversations {
			l = e.Size()
			n += 1 + l + sovTomchat(uint64(l))
		}
	}
	return n
}

func (m *ConversationDetailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConversationId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovTomchat(uint64(m.Limit))
	}
	if m.EndAt != nil {
		l = m.EndAt.Size()
		n += 1 + l + sovTomchat(uint64(l))
	}
	if m.MessageType != nil {
		n += m.MessageType.Size()
	}
	return n
}

func (m *ConversationDetailRequest_Include_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Include != nil {
		l = m.Include.Size()
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}
func (m *ConversationDetailRequest_Exclude_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Exclude != nil {
		l = m.Exclude.Size()
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}
func (m *ConversationDetailRequest_Include) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Types) > 0 {
		l = 0
		for _, e := range m.Types {
			l += sovTomchat(uint64(e))
		}
		n += 1 + sovTomchat(uint64(l)) + l
	}
	return n
}

func (m *ConversationDetailRequest_Exclude) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Types) > 0 {
		l = 0
		for _, e := range m.Types {
			l += sovTomchat(uint64(e))
		}
		n += 1 + sovTomchat(uint64(l)) + l
	}
	return n
}

func (m *ConversationDetailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovTomchat(uint64(l))
		}
	}
	return n
}

func (m *PushedNotificationMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovTomchat(uint64(l))
	}
	if m.PushedAt != nil {
		l = m.PushedAt.Size()
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}

func (m *RetrievePushedNotificationMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeviceToken)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovTomchat(uint64(m.Limit))
	}
	if m.Since != nil {
		l = m.Since.Size()
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}

func (m *RetrievePushedNotificationMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, e := range m.Messages {
			l = e.Size()
			n += 1 + l + sovTomchat(uint64(l))
		}
	}
	return n
}

func (m *AutoCoachCustomMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	l = len(m.UrlMedia)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}

func (m *AutoCoachCustomMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Successful {
		n += 2
	}
	return n
}

func (m *GetConversationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConversationId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	if m.ClassId != 0 {
		n += 1 + sovTomchat(uint64(m.ClassId))
	}
	return n
}

func (m *GetConversationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Conversation != nil {
		l = m.Conversation.Size()
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}

func (m *TotalUserInConversationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConversationId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	l = len(m.LessonId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}

func (m *TotalUserInConversationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalUser != 0 {
		n += 1 + sovTomchat(uint64(m.TotalUser))
	}
	return n
}

func (m *ConversationByLessonRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovTomchat(uint64(m.Limit))
	}
	if m.EndAt != nil {
		l = m.EndAt.Size()
		n += 1 + l + sovTomchat(uint64(l))
	}
	l = len(m.LessonId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}

func (m *ConversationByLessonResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Conversations) > 0 {
		for _, e := range m.Conversations {
			l = e.Size()
			n += 1 + l + sovTomchat(uint64(l))
		}
	}
	return n
}

func (m *TeacherProhibitAllStudentToChatRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConversationId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}

func (m *TeacherProhibitAllStudentToChatResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TeacherAllowAllStudentToChatRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConversationId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}

func (m *TeacherAllowAllStudentToChatResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TeacherAllowStudentToSpeakRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	l = len(m.ConversationId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}

func (m *TeacherAllowStudentToSpeakResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TeacherProhibitStudentToSpeakRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StudentId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	l = len(m.ConversationId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}

func (m *TeacherProhibitStudentToSpeakResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StudentRaiseHandRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConversationId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}

func (m *StudentRaiseHandResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeleteMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MessageId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}

func (m *DeleteMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *EventPing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}

func (m *StreamingEventRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		n += m.Event.Size()
	}
	return n
}

func (m *StreamingEventRequest_EventPing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventPing != nil {
		l = m.EventPing.Size()
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}
func (m *StreamingEventResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		n += m.Event.Size()
	}
	return n
}

func (m *StreamingEventResponse_EventNewMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNewMessage != nil {
		l = m.EventNewMessage.Size()
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}
func (m *StreamingEventResponse_EventDeleteMessage_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventDeleteMessage != nil {
		l = m.EventDeleteMessage.Size()
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}
func (m *StreamingEventResponse_EventPing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventPing != nil {
		l = m.EventPing.Size()
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}
func (m *StreamingEventResponse_EventDeleteMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConversationId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	l = len(m.MessageId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	l = len(m.DeletedBy)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}

func (m *StudentPutHandDownRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConversationId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}

func (m *StudentPutHandDownResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ConversationEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConversationEventId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	l = len(m.ConversationId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	if m.EventType != 0 {
		n += 1 + sovTomchat(uint64(m.EventType))
	}
	if m.Status != 0 {
		n += 1 + sovTomchat(uint64(m.Status))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovTomchat(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}

func (m *RetrieveConversationEventsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConversationId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	if m.EventType != 0 {
		n += 1 + sovTomchat(uint64(m.EventType))
	}
	if m.Status != 0 {
		n += 1 + sovTomchat(uint64(m.Status))
	}
	return n
}

func (m *RetrieveConversationEventsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ConversationEvents) > 0 {
		for _, e := range m.ConversationEvents {
			l = e.Size()
			n += 1 + l + sovTomchat(uint64(l))
		}
	}
	return n
}

func (m *StudentAcceptToSpeakRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConversationId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}

func (m *StudentAcceptToSpeakResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *StudentDeclineToSpeakRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConversationId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}

func (m *StudentDeclineToSpeakResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PingSubscribeV2Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}

func (m *PingSubscribeV2Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SubscribeV2Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		n += m.Event.Size()
	}
	return n
}

func (m *Event_EventNewMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventNewMessage != nil {
		l = m.EventNewMessage.Size()
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}
func (m *Event_EventDeleteMessage_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventDeleteMessage != nil {
		l = m.EventDeleteMessage.Size()
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}
func (m *Event_EventPing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventPing != nil {
		l = m.EventPing.Size()
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}
func (m *Event_EventDeleteMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConversationId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	l = len(m.MessageId)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	l = len(m.DeletedBy)
	if l > 0 {
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}

func (m *SubscribeV2Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.Size()
		n += 1 + l + sovTomchat(uint64(l))
	}
	return n
}

func sovTomchat(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTomchat(x uint64) (n int) {
	return sovTomchat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AssignToCoachRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AssignToCoachRequest{`,
		`CoachId:` + fmt.Sprintf("%v", this.CoachId) + `,`,
		`StudentId:` + fmt.Sprintf("%v", this.StudentId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SendMessageRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SendMessageRequest{`,
		`ConversationId:` + fmt.Sprintf("%v", this.ConversationId) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`UrlMedia:` + fmt.Sprintf("%v", this.UrlMedia) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`LocalMessageId:` + fmt.Sprintf("%v", this.LocalMessageId) + `,`,
		`TargetUser:` + fmt.Sprintf("%v", this.TargetUser) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SendMessageResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SendMessageResponse{`,
		`MessageId:` + fmt.Sprintf("%v", this.MessageId) + `,`,
		`LocalMessageId:` + fmt.Sprintf("%v", this.LocalMessageId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageResponse{`,
		`MessageId:` + fmt.Sprintf("%v", this.MessageId) + `,`,
		`ConversationId:` + fmt.Sprintf("%v", this.ConversationId) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`Content:` + fmt.Sprintf("%v", this.Content) + `,`,
		`UrlMedia:` + fmt.Sprintf("%v", this.UrlMedia) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`LocalMessageId:` + fmt.Sprintf("%v", this.LocalMessageId) + `,`,
		`TargetUser:` + fmt.Sprintf("%v", this.TargetUser) + `,`,
		`IsDeleted:` + fmt.Sprintf("%v", this.IsDeleted) + `,`,
		`DeletedBy:` + fmt.Sprintf("%v", this.DeletedBy) + `,`,
		`ConversationName:` + fmt.Sprintf("%v", this.ConversationName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SeenMessageRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SeenMessageRequest{`,
		`ConversationId:` + fmt.Sprintf("%v", this.ConversationId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SeenMessageResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SeenMessageResponse{`,
		`}`,
	}, "")
	return s
}
func (this *SubscribeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubscribeRequest{`,
		`}`,
	}, "")
	return s
}
func (this *SubscribeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubscribeResponse{`,
		`Event:` + fmt.Sprintf("%v", this.Event) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubscribeResponse_MessageResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubscribeResponse_MessageResponse{`,
		`MessageResponse:` + strings.Replace(fmt.Sprintf("%v", this.MessageResponse), "MessageResponse", "MessageResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InternalSendMessageRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForNodeReceive := make([]string, 0, len(this.NodeReceive))
	for k, _ := range this.NodeReceive {
		keysForNodeReceive = append(keysForNodeReceive, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForNodeReceive)
	mapStringForNodeReceive := "map[string]*InternalSendMessageRequest_UserIDs{"
	for _, k := range keysForNodeReceive {
		mapStringForNodeReceive += fmt.Sprintf("%v: %v,", k, this.NodeReceive[k])
	}
	mapStringForNodeReceive += "}"
	s := strings.Join([]string{`&InternalSendMessageRequest{`,
		`NodeReceive:` + mapStringForNodeReceive + `,`,
		`Event:` + strings.Replace(this.Event.String(), "Event", "Event", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *InternalSendMessageRequest_UserIDs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InternalSendMessageRequest_UserIDs{`,
		`Ids:` + fmt.Sprintf("%v", this.Ids) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConversationListRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConversationListRequest{`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`EndAt:` + strings.Replace(fmt.Sprintf("%v", this.EndAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`ClassId:` + fmt.Sprintf("%v", this.ClassId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Conversation) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForUsers := "[]*Conversation_User{"
	for _, f := range this.Users {
		repeatedStringForUsers += strings.Replace(fmt.Sprintf("%v", f), "Conversation_User", "Conversation_User", 1) + ","
	}
	repeatedStringForUsers += "}"
	s := strings.Join([]string{`&Conversation{`,
		`ConversationId:` + fmt.Sprintf("%v", this.ConversationId) + `,`,
		`CoachId:` + fmt.Sprintf("%v", this.CoachId) + `,`,
		`StudentId:` + fmt.Sprintf("%v", this.StudentId) + `,`,
		`GuestIds:` + fmt.Sprintf("%v", this.GuestIds) + `,`,
		`Seen:` + fmt.Sprintf("%v", this.Seen) + `,`,
		`LastMessage:` + strings.Replace(this.LastMessage.String(), "MessageResponse", "MessageResponse", 1) + `,`,
		`TutorId:` + fmt.Sprintf("%v", this.TutorId) + `,`,
		`StudentQuestionId:` + fmt.Sprintf("%v", this.StudentQuestionId) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`PreviousCoachIds:` + fmt.Sprintf("%v", this.PreviousCoachIds) + `,`,
		`Users:` + repeatedStringForUsers + `,`,
		`ClassId:` + fmt.Sprintf("%v", this.ClassId) + `,`,
		`ConversationType:` + fmt.Sprintf("%v", this.ConversationType) + `,`,
		`ConversationName:` + fmt.Sprintf("%v", this.ConversationName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Conversation_User) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Conversation_User{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Group:` + fmt.Sprintf("%v", this.Group) + `,`,
		`IsPresent:` + fmt.Sprintf("%v", this.IsPresent) + `,`,
		`SeenAt:` + strings.Replace(fmt.Sprintf("%v", this.SeenAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConversationListResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForConversations := "[]*Conversation{"
	for _, f := range this.Conversations {
		repeatedStringForConversations += strings.Replace(f.String(), "Conversation", "Conversation", 1) + ","
	}
	repeatedStringForConversations += "}"
	s := strings.Join([]string{`&ConversationListResponse{`,
		`Conversations:` + repeatedStringForConversations + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConversationByStudentQuestionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConversationByStudentQuestionRequest{`,
		`StudentQuestionIds:` + fmt.Sprintf("%v", this.StudentQuestionIds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConversationByStudentQuestionResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForConversations := "[]*Conversation{"
	for _, f := range this.Conversations {
		repeatedStringForConversations += strings.Replace(f.String(), "Conversation", "Conversation", 1) + ","
	}
	repeatedStringForConversations += "}"
	s := strings.Join([]string{`&ConversationByStudentQuestionResponse{`,
		`Conversations:` + repeatedStringForConversations + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConversationByClassRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConversationByClassRequest{`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`EndAt:` + strings.Replace(fmt.Sprintf("%v", this.EndAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`ClassId:` + fmt.Sprintf("%v", this.ClassId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConversationByClassResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForConversations := "[]*Conversation{"
	for _, f := range this.Conversations {
		repeatedStringForConversations += strings.Replace(f.String(), "Conversation", "Conversation", 1) + ","
	}
	repeatedStringForConversations += "}"
	s := strings.Join([]string{`&ConversationByClassResponse{`,
		`Conversations:` + repeatedStringForConversations + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConversationDetailRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConversationDetailRequest{`,
		`ConversationId:` + fmt.Sprintf("%v", this.ConversationId) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`EndAt:` + strings.Replace(fmt.Sprintf("%v", this.EndAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`MessageType:` + fmt.Sprintf("%v", this.MessageType) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConversationDetailRequest_Include_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConversationDetailRequest_Include_{`,
		`Include:` + strings.Replace(fmt.Sprintf("%v", this.Include), "ConversationDetailRequest_Include", "ConversationDetailRequest_Include", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConversationDetailRequest_Exclude_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConversationDetailRequest_Exclude_{`,
		`Exclude:` + strings.Replace(fmt.Sprintf("%v", this.Exclude), "ConversationDetailRequest_Exclude", "ConversationDetailRequest_Exclude", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConversationDetailRequest_Include) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConversationDetailRequest_Include{`,
		`Types:` + fmt.Sprintf("%v", this.Types) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConversationDetailRequest_Exclude) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConversationDetailRequest_Exclude{`,
		`Types:` + fmt.Sprintf("%v", this.Types) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConversationDetailResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMessages := "[]*MessageResponse{"
	for _, f := range this.Messages {
		repeatedStringForMessages += strings.Replace(f.String(), "MessageResponse", "MessageResponse", 1) + ","
	}
	repeatedStringForMessages += "}"
	s := strings.Join([]string{`&ConversationDetailResponse{`,
		`Messages:` + repeatedStringForMessages + `,`,
		`}`,
	}, "")
	return s
}
func (this *PushedNotificationMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PushedNotificationMessage{`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`Data:` + strings.Replace(fmt.Sprintf("%v", this.Data), "Struct", "types.Struct", 1) + `,`,
		`PushedAt:` + strings.Replace(fmt.Sprintf("%v", this.PushedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrievePushedNotificationMessageRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrievePushedNotificationMessageRequest{`,
		`DeviceToken:` + fmt.Sprintf("%v", this.DeviceToken) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Since:` + strings.Replace(fmt.Sprintf("%v", this.Since), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrievePushedNotificationMessageResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForMessages := "[]*PushedNotificationMessage{"
	for _, f := range this.Messages {
		repeatedStringForMessages += strings.Replace(f.String(), "PushedNotificationMessage", "PushedNotificationMessage", 1) + ","
	}
	repeatedStringForMessages += "}"
	s := strings.Join([]string{`&RetrievePushedNotificationMessageResponse{`,
		`Messages:` + repeatedStringForMessages + `,`,
		`}`,
	}, "")
	return s
}
func (this *AutoCoachCustomMessageRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AutoCoachCustomMessageRequest{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`UrlMedia:` + fmt.Sprintf("%v", this.UrlMedia) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AutoCoachCustomMessageResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AutoCoachCustomMessageResponse{`,
		`Successful:` + fmt.Sprintf("%v", this.Successful) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetConversationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetConversationRequest{`,
		`ConversationId:` + fmt.Sprintf("%v", this.ConversationId) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`ClassId:` + fmt.Sprintf("%v", this.ClassId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetConversationResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetConversationResponse{`,
		`Conversation:` + strings.Replace(this.Conversation.String(), "Conversation", "Conversation", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TotalUserInConversationRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TotalUserInConversationRequest{`,
		`ConversationId:` + fmt.Sprintf("%v", this.ConversationId) + `,`,
		`LessonId:` + fmt.Sprintf("%v", this.LessonId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TotalUserInConversationResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TotalUserInConversationResponse{`,
		`TotalUser:` + fmt.Sprintf("%v", this.TotalUser) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConversationByLessonRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConversationByLessonRequest{`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`EndAt:` + strings.Replace(fmt.Sprintf("%v", this.EndAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`LessonId:` + fmt.Sprintf("%v", this.LessonId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ConversationByLessonResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForConversations := "[]*Conversation{"
	for _, f := range this.Conversations {
		repeatedStringForConversations += strings.Replace(f.String(), "Conversation", "Conversation", 1) + ","
	}
	repeatedStringForConversations += "}"
	s := strings.Join([]string{`&ConversationByLessonResponse{`,
		`Conversations:` + repeatedStringForConversations + `,`,
		`}`,
	}, "")
	return s
}
func (this *TeacherProhibitAllStudentToChatRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TeacherProhibitAllStudentToChatRequest{`,
		`ConversationId:` + fmt.Sprintf("%v", this.ConversationId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TeacherProhibitAllStudentToChatResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TeacherProhibitAllStudentToChatResponse{`,
		`}`,
	}, "")
	return s
}
func (this *TeacherAllowAllStudentToChatRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TeacherAllowAllStudentToChatRequest{`,
		`ConversationId:` + fmt.Sprintf("%v", this.ConversationId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TeacherAllowAllStudentToChatResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TeacherAllowAllStudentToChatResponse{`,
		`}`,
	}, "")
	return s
}
func (this *TeacherAllowStudentToSpeakRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TeacherAllowStudentToSpeakRequest{`,
		`StudentId:` + fmt.Sprintf("%v", this.StudentId) + `,`,
		`ConversationId:` + fmt.Sprintf("%v", this.ConversationId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TeacherAllowStudentToSpeakResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TeacherAllowStudentToSpeakResponse{`,
		`}`,
	}, "")
	return s
}
func (this *TeacherProhibitStudentToSpeakRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TeacherProhibitStudentToSpeakRequest{`,
		`StudentId:` + fmt.Sprintf("%v", this.StudentId) + `,`,
		`ConversationId:` + fmt.Sprintf("%v", this.ConversationId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TeacherProhibitStudentToSpeakResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TeacherProhibitStudentToSpeakResponse{`,
		`}`,
	}, "")
	return s
}
func (this *StudentRaiseHandRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StudentRaiseHandRequest{`,
		`ConversationId:` + fmt.Sprintf("%v", this.ConversationId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StudentRaiseHandResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StudentRaiseHandResponse{`,
		`}`,
	}, "")
	return s
}
func (this *DeleteMessageRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteMessageRequest{`,
		`MessageId:` + fmt.Sprintf("%v", this.MessageId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteMessageResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteMessageResponse{`,
		`}`,
	}, "")
	return s
}
func (this *EventPing) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&EventPing{`,
		`SessionId:` + fmt.Sprintf("%v", this.SessionId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StreamingEventRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StreamingEventRequest{`,
		`Event:` + fmt.Sprintf("%v", this.Event) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StreamingEventRequest_EventPing) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StreamingEventRequest_EventPing{`,
		`EventPing:` + strings.Replace(fmt.Sprintf("%v", this.EventPing), "EventPing", "EventPing", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StreamingEventResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StreamingEventResponse{`,
		`Event:` + fmt.Sprintf("%v", this.Event) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StreamingEventResponse_EventNewMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StreamingEventResponse_EventNewMessage{`,
		`EventNewMessage:` + strings.Replace(fmt.Sprintf("%v", this.EventNewMessage), "MessageResponse", "MessageResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StreamingEventResponse_EventDeleteMessage_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StreamingEventResponse_EventDeleteMessage_{`,
		`EventDeleteMessage:` + strings.Replace(fmt.Sprintf("%v", this.EventDeleteMessage), "StreamingEventResponse_EventDeleteMessage", "StreamingEventResponse_EventDeleteMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StreamingEventResponse_EventPing) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StreamingEventResponse_EventPing{`,
		`EventPing:` + strings.Replace(fmt.Sprintf("%v", this.EventPing), "EventPing", "EventPing", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StreamingEventResponse_EventDeleteMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StreamingEventResponse_EventDeleteMessage{`,
		`ConversationId:` + fmt.Sprintf("%v", this.ConversationId) + `,`,
		`MessageId:` + fmt.Sprintf("%v", this.MessageId) + `,`,
		`DeletedBy:` + fmt.Sprintf("%v", this.DeletedBy) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StudentPutHandDownRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StudentPutHandDownRequest{`,
		`ConversationId:` + fmt.Sprintf("%v", this.ConversationId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StudentPutHandDownResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StudentPutHandDownResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ConversationEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ConversationEvent{`,
		`ConversationEventId:` + fmt.Sprintf("%v", this.ConversationEventId) + `,`,
		`ConversationId:` + fmt.Sprintf("%v", this.ConversationId) + `,`,
		`UserId:` + fmt.Sprintf("%v", this.UserId) + `,`,
		`EventType:` + fmt.Sprintf("%v", this.EventType) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveConversationEventsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RetrieveConversationEventsRequest{`,
		`ConversationId:` + fmt.Sprintf("%v", this.ConversationId) + `,`,
		`EventType:` + fmt.Sprintf("%v", this.EventType) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RetrieveConversationEventsResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForConversationEvents := "[]*ConversationEvent{"
	for _, f := range this.ConversationEvents {
		repeatedStringForConversationEvents += strings.Replace(f.String(), "ConversationEvent", "ConversationEvent", 1) + ","
	}
	repeatedStringForConversationEvents += "}"
	s := strings.Join([]string{`&RetrieveConversationEventsResponse{`,
		`ConversationEvents:` + repeatedStringForConversationEvents + `,`,
		`}`,
	}, "")
	return s
}
func (this *StudentAcceptToSpeakRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StudentAcceptToSpeakRequest{`,
		`ConversationId:` + fmt.Sprintf("%v", this.ConversationId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StudentAcceptToSpeakResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StudentAcceptToSpeakResponse{`,
		`}`,
	}, "")
	return s
}
func (this *StudentDeclineToSpeakRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StudentDeclineToSpeakRequest{`,
		`ConversationId:` + fmt.Sprintf("%v", this.ConversationId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StudentDeclineToSpeakResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StudentDeclineToSpeakResponse{`,
		`}`,
	}, "")
	return s
}
func (this *PingSubscribeV2Request) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PingSubscribeV2Request{`,
		`SessionId:` + fmt.Sprintf("%v", this.SessionId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PingSubscribeV2Response) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PingSubscribeV2Response{`,
		`}`,
	}, "")
	return s
}
func (this *SubscribeV2Request) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubscribeV2Request{`,
		`}`,
	}, "")
	return s
}
func (this *Event) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Event{`,
		`Event:` + fmt.Sprintf("%v", this.Event) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Event_EventNewMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Event_EventNewMessage{`,
		`EventNewMessage:` + strings.Replace(fmt.Sprintf("%v", this.EventNewMessage), "MessageResponse", "MessageResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Event_EventDeleteMessage_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Event_EventDeleteMessage_{`,
		`EventDeleteMessage:` + strings.Replace(fmt.Sprintf("%v", this.EventDeleteMessage), "Event_EventDeleteMessage", "Event_EventDeleteMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Event_EventPing) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Event_EventPing{`,
		`EventPing:` + strings.Replace(fmt.Sprintf("%v", this.EventPing), "EventPing", "EventPing", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Event_EventDeleteMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Event_EventDeleteMessage{`,
		`ConversationId:` + fmt.Sprintf("%v", this.ConversationId) + `,`,
		`MessageId:` + fmt.Sprintf("%v", this.MessageId) + `,`,
		`DeletedBy:` + fmt.Sprintf("%v", this.DeletedBy) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SubscribeV2Response) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SubscribeV2Response{`,
		`Event:` + strings.Replace(this.Event.String(), "Event", "Event", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTomchat(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AssignToCoachRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssignToCoachRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssignToCoachRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoachId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoachId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UrlMedia", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UrlMedia = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= MessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalMessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalMessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetUser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalMessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalMessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UrlMedia", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UrlMedia = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= MessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalMessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalMessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetUser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetUser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsDeleted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsDeleted = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeenMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeenMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeenMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeenMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeenMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeenMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MessageResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &SubscribeResponse_MessageResponse{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalSendMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InternalSendMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InternalSendMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeReceive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeReceive == nil {
				m.NodeReceive = make(map[string]*InternalSendMessageRequest_UserIDs)
			}
			var mapkey string
			var mapvalue *InternalSendMessageRequest_UserIDs
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTomchat
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTomchat
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTomchat
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTomchat
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTomchat
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTomchat
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTomchat
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &InternalSendMessageRequest_UserIDs{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTomchat(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTomchat
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.NodeReceive[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InternalSendMessageRequest_UserIDs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserIDs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserIDs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConversationListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConversationListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndAt == nil {
				m.EndAt = &types.Timestamp{}
			}
			if err := m.EndAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Conversation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Conversation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Conversation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoachId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoachId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuestIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GuestIds = append(m.GuestIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Seen = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastMessage == nil {
				m.LastMessage = &MessageResponse{}
			}
			if err := m.LastMessage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TutorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TutorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentQuestionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentQuestionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ConversationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousCoachIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousCoachIds = append(m.PreviousCoachIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Users = append(m.Users, &Conversation_User{})
			if err := m.Users[len(m.Users)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationType", wireType)
			}
			m.ConversationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConversationType |= ConversationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Conversation_User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPresent", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPresent = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeenAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SeenAt == nil {
				m.SeenAt = &types.Timestamp{}
			}
			if err := m.SeenAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConversationListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConversationListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conversations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conversations = append(m.Conversations, &Conversation{})
			if err := m.Conversations[len(m.Conversations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationByStudentQuestionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConversationByStudentQuestionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConversationByStudentQuestionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentQuestionIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentQuestionIds = append(m.StudentQuestionIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationByStudentQuestionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConversationByStudentQuestionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConversationByStudentQuestionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conversations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conversations = append(m.Conversations, &Conversation{})
			if err := m.Conversations[len(m.Conversations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationByClassRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConversationByClassRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConversationByClassRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndAt == nil {
				m.EndAt = &types.Timestamp{}
			}
			if err := m.EndAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationByClassResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConversationByClassResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConversationByClassResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conversations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conversations = append(m.Conversations, &Conversation{})
			if err := m.Conversations[len(m.Conversations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationDetailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConversationDetailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConversationDetailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndAt == nil {
				m.EndAt = &types.Timestamp{}
			}
			if err := m.EndAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Include", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ConversationDetailRequest_Include{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageType = &ConversationDetailRequest_Include_{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exclude", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ConversationDetailRequest_Exclude{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageType = &ConversationDetailRequest_Exclude_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationDetailRequest_Include) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Include: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Include: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v CodesMessageType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTomchat
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= CodesMessageType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Types = append(m.Types, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTomchat
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTomchat
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTomchat
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Types) == 0 {
					m.Types = make([]CodesMessageType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v CodesMessageType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTomchat
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= CodesMessageType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Types = append(m.Types, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationDetailRequest_Exclude) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Exclude: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Exclude: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v CodesMessageType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTomchat
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= CodesMessageType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Types = append(m.Types, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTomchat
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTomchat
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTomchat
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Types) == 0 {
					m.Types = make([]CodesMessageType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v CodesMessageType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTomchat
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= CodesMessageType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Types = append(m.Types, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationDetailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConversationDetailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConversationDetailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &MessageResponse{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushedNotificationMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushedNotificationMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushedNotificationMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &types.Struct{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PushedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PushedAt == nil {
				m.PushedAt = &types.Timestamp{}
			}
			if err := m.PushedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrievePushedNotificationMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrievePushedNotificationMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrievePushedNotificationMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Since", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Since == nil {
				m.Since = &types.Timestamp{}
			}
			if err := m.Since.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrievePushedNotificationMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrievePushedNotificationMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrievePushedNotificationMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, &PushedNotificationMessage{})
			if err := m.Messages[len(m.Messages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoCoachCustomMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoCoachCustomMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoCoachCustomMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UrlMedia", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UrlMedia = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AutoCoachCustomMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AutoCoachCustomMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AutoCoachCustomMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Successful", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Successful = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetConversationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetConversationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetConversationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassId", wireType)
			}
			m.ClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetConversationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetConversationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetConversationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conversation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Conversation == nil {
				m.Conversation = &Conversation{}
			}
			if err := m.Conversation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TotalUserInConversationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TotalUserInConversationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TotalUserInConversationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LessonId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LessonId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TotalUserInConversationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TotalUserInConversationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TotalUserInConversationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalUser", wireType)
			}
			m.TotalUser = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalUser |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationByLessonRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConversationByLessonRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConversationByLessonRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndAt == nil {
				m.EndAt = &types.Timestamp{}
			}
			if err := m.EndAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LessonId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LessonId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationByLessonResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConversationByLessonResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConversationByLessonResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conversations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Conversations = append(m.Conversations, &Conversation{})
			if err := m.Conversations[len(m.Conversations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeacherProhibitAllStudentToChatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeacherProhibitAllStudentToChatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeacherProhibitAllStudentToChatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeacherProhibitAllStudentToChatResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeacherProhibitAllStudentToChatResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeacherProhibitAllStudentToChatResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeacherAllowAllStudentToChatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeacherAllowAllStudentToChatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeacherAllowAllStudentToChatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeacherAllowAllStudentToChatResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeacherAllowAllStudentToChatResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeacherAllowAllStudentToChatResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeacherAllowStudentToSpeakRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeacherAllowStudentToSpeakRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeacherAllowStudentToSpeakRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeacherAllowStudentToSpeakResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeacherAllowStudentToSpeakResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeacherAllowStudentToSpeakResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeacherProhibitStudentToSpeakRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeacherProhibitStudentToSpeakRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeacherProhibitStudentToSpeakRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StudentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StudentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeacherProhibitStudentToSpeakResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeacherProhibitStudentToSpeakResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeacherProhibitStudentToSpeakResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StudentRaiseHandRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudentRaiseHandRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudentRaiseHandRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StudentRaiseHandResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudentRaiseHandResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudentRaiseHandResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventPing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamingEventRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamingEventRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamingEventRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventPing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventPing{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &StreamingEventRequest_EventPing{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamingEventResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamingEventResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamingEventResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNewMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MessageResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &StreamingEventResponse_EventNewMessage{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventDeleteMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &StreamingEventResponse_EventDeleteMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &StreamingEventResponse_EventDeleteMessage_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventPing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventPing{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &StreamingEventResponse_EventPing{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamingEventResponse_EventDeleteMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDeleteMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDeleteMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StudentPutHandDownRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudentPutHandDownRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudentPutHandDownRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StudentPutHandDownResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudentPutHandDownResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudentPutHandDownResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConversationEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConversationEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConversationEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationEventId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationEventId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= ConversationEventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ConversationEventStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &types.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveConversationEventsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveConversationEventsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveConversationEventsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= ConversationEventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ConversationEventStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RetrieveConversationEventsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RetrieveConversationEventsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RetrieveConversationEventsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationEvents = append(m.ConversationEvents, &ConversationEvent{})
			if err := m.ConversationEvents[len(m.ConversationEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StudentAcceptToSpeakRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudentAcceptToSpeakRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudentAcceptToSpeakRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StudentAcceptToSpeakResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudentAcceptToSpeakResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudentAcceptToSpeakResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StudentDeclineToSpeakRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudentDeclineToSpeakRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudentDeclineToSpeakRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StudentDeclineToSpeakResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StudentDeclineToSpeakResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StudentDeclineToSpeakResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingSubscribeV2Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingSubscribeV2Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingSubscribeV2Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PingSubscribeV2Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PingSubscribeV2Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PingSubscribeV2Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeV2Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeV2Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeV2Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventNewMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MessageResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &Event_EventNewMessage{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventDeleteMessage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Event_EventDeleteMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &Event_EventDeleteMessage_{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventPing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &EventPing{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &Event_EventPing{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Event_EventDeleteMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDeleteMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDeleteMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConversationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConversationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeletedBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeV2Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeV2Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeV2Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTomchat
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTomchat
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &Event{}
			}
			if err := m.Event.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTomchat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTomchat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTomchat(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTomchat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTomchat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTomchat
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTomchat
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTomchat
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTomchat        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTomchat          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTomchat = fmt.Errorf("proto: unexpected end of group")
)
