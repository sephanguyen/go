# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from aphelios.vision.v1 import vision_pb2 as aphelios_dot_vision_dot_v1_dot_vision__pb2


class GetTopViewServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTopView = channel.unary_unary(
                '/aphelios.vision.v1.GetTopViewService/GetTopView',
                request_serializer=aphelios_dot_vision_dot_v1_dot_vision__pb2.GetTopViewRequest.SerializeToString,
                response_deserializer=aphelios_dot_vision_dot_v1_dot_vision__pb2.GetTopViewResponse.FromString,
                )


class GetTopViewServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetTopView(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GetTopViewServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTopView': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTopView,
                    request_deserializer=aphelios_dot_vision_dot_v1_dot_vision__pb2.GetTopViewRequest.FromString,
                    response_serializer=aphelios_dot_vision_dot_v1_dot_vision__pb2.GetTopViewResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'aphelios.vision.v1.GetTopViewService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GetTopViewService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetTopView(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aphelios.vision.v1.GetTopViewService/GetTopView',
            aphelios_dot_vision_dot_v1_dot_vision__pb2.GetTopViewRequest.SerializeToString,
            aphelios_dot_vision_dot_v1_dot_vision__pb2.GetTopViewResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class IdQuestionDetectorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.IdQuestionDetector = channel.unary_unary(
                '/aphelios.vision.v1.IdQuestionDetectorService/IdQuestionDetector',
                request_serializer=aphelios_dot_vision_dot_v1_dot_vision__pb2.IdQuestionRequest.SerializeToString,
                response_deserializer=aphelios_dot_vision_dot_v1_dot_vision__pb2.IdQuestionResponse.FromString,
                )


class IdQuestionDetectorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def IdQuestionDetector(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IdQuestionDetectorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'IdQuestionDetector': grpc.unary_unary_rpc_method_handler(
                    servicer.IdQuestionDetector,
                    request_deserializer=aphelios_dot_vision_dot_v1_dot_vision__pb2.IdQuestionRequest.FromString,
                    response_serializer=aphelios_dot_vision_dot_v1_dot_vision__pb2.IdQuestionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'aphelios.vision.v1.IdQuestionDetectorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class IdQuestionDetectorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def IdQuestionDetector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aphelios.vision.v1.IdQuestionDetectorService/IdQuestionDetector',
            aphelios_dot_vision_dot_v1_dot_vision__pb2.IdQuestionRequest.SerializeToString,
            aphelios_dot_vision_dot_v1_dot_vision__pb2.IdQuestionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AnswerDetectorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AnswerDetector = channel.unary_unary(
                '/aphelios.vision.v1.AnswerDetectorService/AnswerDetector',
                request_serializer=aphelios_dot_vision_dot_v1_dot_vision__pb2.AnswerDetectorRequest.SerializeToString,
                response_deserializer=aphelios_dot_vision_dot_v1_dot_vision__pb2.AnswerDetectorResponse.FromString,
                )


class AnswerDetectorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AnswerDetector(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AnswerDetectorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AnswerDetector': grpc.unary_unary_rpc_method_handler(
                    servicer.AnswerDetector,
                    request_deserializer=aphelios_dot_vision_dot_v1_dot_vision__pb2.AnswerDetectorRequest.FromString,
                    response_serializer=aphelios_dot_vision_dot_v1_dot_vision__pb2.AnswerDetectorResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'aphelios.vision.v1.AnswerDetectorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AnswerDetectorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AnswerDetector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aphelios.vision.v1.AnswerDetectorService/AnswerDetector',
            aphelios_dot_vision_dot_v1_dot_vision__pb2.AnswerDetectorRequest.SerializeToString,
            aphelios_dot_vision_dot_v1_dot_vision__pb2.AnswerDetectorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class BubbleDetectorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.BubbleDetector = channel.unary_unary(
                '/aphelios.vision.v1.BubbleDetectorService/BubbleDetector',
                request_serializer=aphelios_dot_vision_dot_v1_dot_vision__pb2.BubbleDetectionRequest.SerializeToString,
                response_deserializer=aphelios_dot_vision_dot_v1_dot_vision__pb2.BubbleDetectionResponse.FromString,
                )


class BubbleDetectorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def BubbleDetector(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BubbleDetectorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'BubbleDetector': grpc.unary_unary_rpc_method_handler(
                    servicer.BubbleDetector,
                    request_deserializer=aphelios_dot_vision_dot_v1_dot_vision__pb2.BubbleDetectionRequest.FromString,
                    response_serializer=aphelios_dot_vision_dot_v1_dot_vision__pb2.BubbleDetectionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'aphelios.vision.v1.BubbleDetectorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BubbleDetectorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def BubbleDetector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aphelios.vision.v1.BubbleDetectorService/BubbleDetector',
            aphelios_dot_vision_dot_v1_dot_vision__pb2.BubbleDetectionRequest.SerializeToString,
            aphelios_dot_vision_dot_v1_dot_vision__pb2.BubbleDetectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class QuestionFieldDetectorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.QuestionFieldDetector = channel.unary_unary(
                '/aphelios.vision.v1.QuestionFieldDetectorService/QuestionFieldDetector',
                request_serializer=aphelios_dot_vision_dot_v1_dot_vision__pb2.QuestionFieldRequest.SerializeToString,
                response_deserializer=aphelios_dot_vision_dot_v1_dot_vision__pb2.QuestionFieldResponse.FromString,
                )


class QuestionFieldDetectorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def QuestionFieldDetector(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QuestionFieldDetectorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'QuestionFieldDetector': grpc.unary_unary_rpc_method_handler(
                    servicer.QuestionFieldDetector,
                    request_deserializer=aphelios_dot_vision_dot_v1_dot_vision__pb2.QuestionFieldRequest.FromString,
                    response_serializer=aphelios_dot_vision_dot_v1_dot_vision__pb2.QuestionFieldResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'aphelios.vision.v1.QuestionFieldDetectorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class QuestionFieldDetectorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def QuestionFieldDetector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aphelios.vision.v1.QuestionFieldDetectorService/QuestionFieldDetector',
            aphelios_dot_vision_dot_v1_dot_vision__pb2.QuestionFieldRequest.SerializeToString,
            aphelios_dot_vision_dot_v1_dot_vision__pb2.QuestionFieldResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class OMRGradingServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.OMRGrading = channel.unary_unary(
                '/aphelios.vision.v1.OMRGradingService/OMRGrading',
                request_serializer=aphelios_dot_vision_dot_v1_dot_vision__pb2.OMRGradingRequest.SerializeToString,
                response_deserializer=aphelios_dot_vision_dot_v1_dot_vision__pb2.OMRGradingResponse.FromString,
                )


class OMRGradingServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def OMRGrading(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OMRGradingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'OMRGrading': grpc.unary_unary_rpc_method_handler(
                    servicer.OMRGrading,
                    request_deserializer=aphelios_dot_vision_dot_v1_dot_vision__pb2.OMRGradingRequest.FromString,
                    response_serializer=aphelios_dot_vision_dot_v1_dot_vision__pb2.OMRGradingResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'aphelios.vision.v1.OMRGradingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OMRGradingService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def OMRGrading(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/aphelios.vision.v1.OMRGradingService/OMRGrading',
            aphelios_dot_vision_dot_v1_dot_vision__pb2.OMRGradingRequest.SerializeToString,
            aphelios_dot_vision_dot_v1_dot_vision__pb2.OMRGradingResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
