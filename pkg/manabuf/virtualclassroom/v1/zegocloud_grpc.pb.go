// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package vpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ZegoCloudServiceClient is the client API for ZegoCloudService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZegoCloudServiceClient interface {
	GetAuthenticationToken(ctx context.Context, in *GetAuthenticationTokenRequest, opts ...grpc.CallOption) (*GetAuthenticationTokenResponse, error)
	GetAuthenticationTokenV2(ctx context.Context, in *GetAuthenticationTokenV2Request, opts ...grpc.CallOption) (*GetAuthenticationTokenV2Response, error)
	GetChatConfig(ctx context.Context, in *GetChatConfigRequest, opts ...grpc.CallOption) (*GetChatConfigResponse, error)
}

type zegoCloudServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewZegoCloudServiceClient(cc grpc.ClientConnInterface) ZegoCloudServiceClient {
	return &zegoCloudServiceClient{cc}
}

func (c *zegoCloudServiceClient) GetAuthenticationToken(ctx context.Context, in *GetAuthenticationTokenRequest, opts ...grpc.CallOption) (*GetAuthenticationTokenResponse, error) {
	out := new(GetAuthenticationTokenResponse)
	err := c.cc.Invoke(ctx, "/virtualclassroom.v1.ZegoCloudService/GetAuthenticationToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zegoCloudServiceClient) GetAuthenticationTokenV2(ctx context.Context, in *GetAuthenticationTokenV2Request, opts ...grpc.CallOption) (*GetAuthenticationTokenV2Response, error) {
	out := new(GetAuthenticationTokenV2Response)
	err := c.cc.Invoke(ctx, "/virtualclassroom.v1.ZegoCloudService/GetAuthenticationTokenV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zegoCloudServiceClient) GetChatConfig(ctx context.Context, in *GetChatConfigRequest, opts ...grpc.CallOption) (*GetChatConfigResponse, error) {
	out := new(GetChatConfigResponse)
	err := c.cc.Invoke(ctx, "/virtualclassroom.v1.ZegoCloudService/GetChatConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZegoCloudServiceServer is the server API for ZegoCloudService service.
// All implementations should embed UnimplementedZegoCloudServiceServer
// for forward compatibility
type ZegoCloudServiceServer interface {
	GetAuthenticationToken(context.Context, *GetAuthenticationTokenRequest) (*GetAuthenticationTokenResponse, error)
	GetAuthenticationTokenV2(context.Context, *GetAuthenticationTokenV2Request) (*GetAuthenticationTokenV2Response, error)
	GetChatConfig(context.Context, *GetChatConfigRequest) (*GetChatConfigResponse, error)
}

// UnimplementedZegoCloudServiceServer should be embedded to have forward compatible implementations.
type UnimplementedZegoCloudServiceServer struct {
}

func (UnimplementedZegoCloudServiceServer) GetAuthenticationToken(context.Context, *GetAuthenticationTokenRequest) (*GetAuthenticationTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthenticationToken not implemented")
}
func (UnimplementedZegoCloudServiceServer) GetAuthenticationTokenV2(context.Context, *GetAuthenticationTokenV2Request) (*GetAuthenticationTokenV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthenticationTokenV2 not implemented")
}
func (UnimplementedZegoCloudServiceServer) GetChatConfig(context.Context, *GetChatConfigRequest) (*GetChatConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatConfig not implemented")
}

// UnsafeZegoCloudServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZegoCloudServiceServer will
// result in compilation errors.
type UnsafeZegoCloudServiceServer interface {
	mustEmbedUnimplementedZegoCloudServiceServer()
}

func RegisterZegoCloudServiceServer(s grpc.ServiceRegistrar, srv ZegoCloudServiceServer) {
	s.RegisterService(&_ZegoCloudService_serviceDesc, srv)
}

func _ZegoCloudService_GetAuthenticationToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthenticationTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZegoCloudServiceServer).GetAuthenticationToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/virtualclassroom.v1.ZegoCloudService/GetAuthenticationToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZegoCloudServiceServer).GetAuthenticationToken(ctx, req.(*GetAuthenticationTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZegoCloudService_GetAuthenticationTokenV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthenticationTokenV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZegoCloudServiceServer).GetAuthenticationTokenV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/virtualclassroom.v1.ZegoCloudService/GetAuthenticationTokenV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZegoCloudServiceServer).GetAuthenticationTokenV2(ctx, req.(*GetAuthenticationTokenV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZegoCloudService_GetChatConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZegoCloudServiceServer).GetChatConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/virtualclassroom.v1.ZegoCloudService/GetChatConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZegoCloudServiceServer).GetChatConfig(ctx, req.(*GetChatConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ZegoCloudService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "virtualclassroom.v1.ZegoCloudService",
	HandlerType: (*ZegoCloudServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAuthenticationToken",
			Handler:    _ZegoCloudService_GetAuthenticationToken_Handler,
		},
		{
			MethodName: "GetAuthenticationTokenV2",
			Handler:    _ZegoCloudService_GetAuthenticationTokenV2_Handler,
		},
		{
			MethodName: "GetChatConfig",
			Handler:    _ZegoCloudService_GetChatConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "virtualclassroom/v1/zegocloud.proto",
}
