// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package vpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LiveRoomModifierServiceClient is the client API for LiveRoomModifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiveRoomModifierServiceClient interface {
	JoinLiveRoom(ctx context.Context, in *JoinLiveRoomRequest, opts ...grpc.CallOption) (*JoinLiveRoomResponse, error)
	ModifyLiveRoomState(ctx context.Context, in *ModifyLiveRoomStateRequest, opts ...grpc.CallOption) (*ModifyLiveRoomStateResponse, error)
	LeaveLiveRoom(ctx context.Context, in *LeaveLiveRoomRequest, opts ...grpc.CallOption) (*LeaveLiveRoomResponse, error)
	EndLiveRoom(ctx context.Context, in *EndLiveRoomRequest, opts ...grpc.CallOption) (*EndLiveRoomResponse, error)
	PreparePublishLiveRoom(ctx context.Context, in *PreparePublishLiveRoomRequest, opts ...grpc.CallOption) (*PreparePublishLiveRoomResponse, error)
	UnpublishLiveRoom(ctx context.Context, in *UnpublishLiveRoomRequest, opts ...grpc.CallOption) (*UnpublishLiveRoomResponse, error)
}

type liveRoomModifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveRoomModifierServiceClient(cc grpc.ClientConnInterface) LiveRoomModifierServiceClient {
	return &liveRoomModifierServiceClient{cc}
}

func (c *liveRoomModifierServiceClient) JoinLiveRoom(ctx context.Context, in *JoinLiveRoomRequest, opts ...grpc.CallOption) (*JoinLiveRoomResponse, error) {
	out := new(JoinLiveRoomResponse)
	err := c.cc.Invoke(ctx, "/virtualclassroom.v1.LiveRoomModifierService/JoinLiveRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveRoomModifierServiceClient) ModifyLiveRoomState(ctx context.Context, in *ModifyLiveRoomStateRequest, opts ...grpc.CallOption) (*ModifyLiveRoomStateResponse, error) {
	out := new(ModifyLiveRoomStateResponse)
	err := c.cc.Invoke(ctx, "/virtualclassroom.v1.LiveRoomModifierService/ModifyLiveRoomState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveRoomModifierServiceClient) LeaveLiveRoom(ctx context.Context, in *LeaveLiveRoomRequest, opts ...grpc.CallOption) (*LeaveLiveRoomResponse, error) {
	out := new(LeaveLiveRoomResponse)
	err := c.cc.Invoke(ctx, "/virtualclassroom.v1.LiveRoomModifierService/LeaveLiveRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveRoomModifierServiceClient) EndLiveRoom(ctx context.Context, in *EndLiveRoomRequest, opts ...grpc.CallOption) (*EndLiveRoomResponse, error) {
	out := new(EndLiveRoomResponse)
	err := c.cc.Invoke(ctx, "/virtualclassroom.v1.LiveRoomModifierService/EndLiveRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveRoomModifierServiceClient) PreparePublishLiveRoom(ctx context.Context, in *PreparePublishLiveRoomRequest, opts ...grpc.CallOption) (*PreparePublishLiveRoomResponse, error) {
	out := new(PreparePublishLiveRoomResponse)
	err := c.cc.Invoke(ctx, "/virtualclassroom.v1.LiveRoomModifierService/PreparePublishLiveRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveRoomModifierServiceClient) UnpublishLiveRoom(ctx context.Context, in *UnpublishLiveRoomRequest, opts ...grpc.CallOption) (*UnpublishLiveRoomResponse, error) {
	out := new(UnpublishLiveRoomResponse)
	err := c.cc.Invoke(ctx, "/virtualclassroom.v1.LiveRoomModifierService/UnpublishLiveRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveRoomModifierServiceServer is the server API for LiveRoomModifierService service.
// All implementations should embed UnimplementedLiveRoomModifierServiceServer
// for forward compatibility
type LiveRoomModifierServiceServer interface {
	JoinLiveRoom(context.Context, *JoinLiveRoomRequest) (*JoinLiveRoomResponse, error)
	ModifyLiveRoomState(context.Context, *ModifyLiveRoomStateRequest) (*ModifyLiveRoomStateResponse, error)
	LeaveLiveRoom(context.Context, *LeaveLiveRoomRequest) (*LeaveLiveRoomResponse, error)
	EndLiveRoom(context.Context, *EndLiveRoomRequest) (*EndLiveRoomResponse, error)
	PreparePublishLiveRoom(context.Context, *PreparePublishLiveRoomRequest) (*PreparePublishLiveRoomResponse, error)
	UnpublishLiveRoom(context.Context, *UnpublishLiveRoomRequest) (*UnpublishLiveRoomResponse, error)
}

// UnimplementedLiveRoomModifierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLiveRoomModifierServiceServer struct {
}

func (UnimplementedLiveRoomModifierServiceServer) JoinLiveRoom(context.Context, *JoinLiveRoomRequest) (*JoinLiveRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinLiveRoom not implemented")
}
func (UnimplementedLiveRoomModifierServiceServer) ModifyLiveRoomState(context.Context, *ModifyLiveRoomStateRequest) (*ModifyLiveRoomStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyLiveRoomState not implemented")
}
func (UnimplementedLiveRoomModifierServiceServer) LeaveLiveRoom(context.Context, *LeaveLiveRoomRequest) (*LeaveLiveRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveLiveRoom not implemented")
}
func (UnimplementedLiveRoomModifierServiceServer) EndLiveRoom(context.Context, *EndLiveRoomRequest) (*EndLiveRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndLiveRoom not implemented")
}
func (UnimplementedLiveRoomModifierServiceServer) PreparePublishLiveRoom(context.Context, *PreparePublishLiveRoomRequest) (*PreparePublishLiveRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreparePublishLiveRoom not implemented")
}
func (UnimplementedLiveRoomModifierServiceServer) UnpublishLiveRoom(context.Context, *UnpublishLiveRoomRequest) (*UnpublishLiveRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpublishLiveRoom not implemented")
}

// UnsafeLiveRoomModifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveRoomModifierServiceServer will
// result in compilation errors.
type UnsafeLiveRoomModifierServiceServer interface {
	mustEmbedUnimplementedLiveRoomModifierServiceServer()
}

func RegisterLiveRoomModifierServiceServer(s grpc.ServiceRegistrar, srv LiveRoomModifierServiceServer) {
	s.RegisterService(&_LiveRoomModifierService_serviceDesc, srv)
}

func _LiveRoomModifierService_JoinLiveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinLiveRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveRoomModifierServiceServer).JoinLiveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/virtualclassroom.v1.LiveRoomModifierService/JoinLiveRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveRoomModifierServiceServer).JoinLiveRoom(ctx, req.(*JoinLiveRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveRoomModifierService_ModifyLiveRoomState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyLiveRoomStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveRoomModifierServiceServer).ModifyLiveRoomState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/virtualclassroom.v1.LiveRoomModifierService/ModifyLiveRoomState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveRoomModifierServiceServer).ModifyLiveRoomState(ctx, req.(*ModifyLiveRoomStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveRoomModifierService_LeaveLiveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveLiveRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveRoomModifierServiceServer).LeaveLiveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/virtualclassroom.v1.LiveRoomModifierService/LeaveLiveRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveRoomModifierServiceServer).LeaveLiveRoom(ctx, req.(*LeaveLiveRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveRoomModifierService_EndLiveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndLiveRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveRoomModifierServiceServer).EndLiveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/virtualclassroom.v1.LiveRoomModifierService/EndLiveRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveRoomModifierServiceServer).EndLiveRoom(ctx, req.(*EndLiveRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveRoomModifierService_PreparePublishLiveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreparePublishLiveRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveRoomModifierServiceServer).PreparePublishLiveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/virtualclassroom.v1.LiveRoomModifierService/PreparePublishLiveRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveRoomModifierServiceServer).PreparePublishLiveRoom(ctx, req.(*PreparePublishLiveRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveRoomModifierService_UnpublishLiveRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpublishLiveRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveRoomModifierServiceServer).UnpublishLiveRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/virtualclassroom.v1.LiveRoomModifierService/UnpublishLiveRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveRoomModifierServiceServer).UnpublishLiveRoom(ctx, req.(*UnpublishLiveRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LiveRoomModifierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "virtualclassroom.v1.LiveRoomModifierService",
	HandlerType: (*LiveRoomModifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinLiveRoom",
			Handler:    _LiveRoomModifierService_JoinLiveRoom_Handler,
		},
		{
			MethodName: "ModifyLiveRoomState",
			Handler:    _LiveRoomModifierService_ModifyLiveRoomState_Handler,
		},
		{
			MethodName: "LeaveLiveRoom",
			Handler:    _LiveRoomModifierService_LeaveLiveRoom_Handler,
		},
		{
			MethodName: "EndLiveRoom",
			Handler:    _LiveRoomModifierService_EndLiveRoom_Handler,
		},
		{
			MethodName: "PreparePublishLiveRoom",
			Handler:    _LiveRoomModifierService_PreparePublishLiveRoom_Handler,
		},
		{
			MethodName: "UnpublishLiveRoom",
			Handler:    _LiveRoomModifierService_UnpublishLiveRoom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "virtualclassroom/v1/liveroom.proto",
}

// LiveRoomReaderServiceClient is the client API for LiveRoomReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiveRoomReaderServiceClient interface {
	GetLiveRoomState(ctx context.Context, in *GetLiveRoomStateRequest, opts ...grpc.CallOption) (*GetLiveRoomStateResponse, error)
	GetWhiteboardToken(ctx context.Context, in *GetWhiteboardTokenRequest, opts ...grpc.CallOption) (*GetWhiteboardTokenResponse, error)
}

type liveRoomReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveRoomReaderServiceClient(cc grpc.ClientConnInterface) LiveRoomReaderServiceClient {
	return &liveRoomReaderServiceClient{cc}
}

func (c *liveRoomReaderServiceClient) GetLiveRoomState(ctx context.Context, in *GetLiveRoomStateRequest, opts ...grpc.CallOption) (*GetLiveRoomStateResponse, error) {
	out := new(GetLiveRoomStateResponse)
	err := c.cc.Invoke(ctx, "/virtualclassroom.v1.LiveRoomReaderService/GetLiveRoomState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveRoomReaderServiceClient) GetWhiteboardToken(ctx context.Context, in *GetWhiteboardTokenRequest, opts ...grpc.CallOption) (*GetWhiteboardTokenResponse, error) {
	out := new(GetWhiteboardTokenResponse)
	err := c.cc.Invoke(ctx, "/virtualclassroom.v1.LiveRoomReaderService/GetWhiteboardToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveRoomReaderServiceServer is the server API for LiveRoomReaderService service.
// All implementations should embed UnimplementedLiveRoomReaderServiceServer
// for forward compatibility
type LiveRoomReaderServiceServer interface {
	GetLiveRoomState(context.Context, *GetLiveRoomStateRequest) (*GetLiveRoomStateResponse, error)
	GetWhiteboardToken(context.Context, *GetWhiteboardTokenRequest) (*GetWhiteboardTokenResponse, error)
}

// UnimplementedLiveRoomReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLiveRoomReaderServiceServer struct {
}

func (UnimplementedLiveRoomReaderServiceServer) GetLiveRoomState(context.Context, *GetLiveRoomStateRequest) (*GetLiveRoomStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveRoomState not implemented")
}
func (UnimplementedLiveRoomReaderServiceServer) GetWhiteboardToken(context.Context, *GetWhiteboardTokenRequest) (*GetWhiteboardTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWhiteboardToken not implemented")
}

// UnsafeLiveRoomReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveRoomReaderServiceServer will
// result in compilation errors.
type UnsafeLiveRoomReaderServiceServer interface {
	mustEmbedUnimplementedLiveRoomReaderServiceServer()
}

func RegisterLiveRoomReaderServiceServer(s grpc.ServiceRegistrar, srv LiveRoomReaderServiceServer) {
	s.RegisterService(&_LiveRoomReaderService_serviceDesc, srv)
}

func _LiveRoomReaderService_GetLiveRoomState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLiveRoomStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveRoomReaderServiceServer).GetLiveRoomState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/virtualclassroom.v1.LiveRoomReaderService/GetLiveRoomState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveRoomReaderServiceServer).GetLiveRoomState(ctx, req.(*GetLiveRoomStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveRoomReaderService_GetWhiteboardToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWhiteboardTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveRoomReaderServiceServer).GetWhiteboardToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/virtualclassroom.v1.LiveRoomReaderService/GetWhiteboardToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveRoomReaderServiceServer).GetWhiteboardToken(ctx, req.(*GetWhiteboardTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LiveRoomReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "virtualclassroom.v1.LiveRoomReaderService",
	HandlerType: (*LiveRoomReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLiveRoomState",
			Handler:    _LiveRoomReaderService_GetLiveRoomState_Handler,
		},
		{
			MethodName: "GetWhiteboardToken",
			Handler:    _LiveRoomReaderService_GetWhiteboardToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "virtualclassroom/v1/liveroom.proto",
}
