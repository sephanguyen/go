// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BrightcoveServiceClient is the client API for BrightcoveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrightcoveServiceClient interface {
	RetrieveBrightCoveProfileData(ctx context.Context, in *RetrieveBrightCoveProfileDataRequest, opts ...grpc.CallOption) (*RetrieveBrightCoveProfileDataResponse, error)
	CreateBrightCoveUploadUrl(ctx context.Context, in *CreateBrightCoveUploadUrlRequest, opts ...grpc.CallOption) (*CreateBrightCoveUploadUrlResponse, error)
	FinishUploadBrightCove(ctx context.Context, in *FinishUploadBrightCoveRequest, opts ...grpc.CallOption) (*FinishUploadBrightCoveResponse, error)
	GetBrightcoveVideoInfo(ctx context.Context, in *GetBrightCoveVideoInfoRequest, opts ...grpc.CallOption) (*GetBrightCoveVideoInfoResponse, error)
	GetVideoBrightcoveResumePosition(ctx context.Context, in *GetVideoBrightcoveResumePositionRequest, opts ...grpc.CallOption) (*GetVideoBrightcoveResumePositionResponse, error)
}

type brightcoveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBrightcoveServiceClient(cc grpc.ClientConnInterface) BrightcoveServiceClient {
	return &brightcoveServiceClient{cc}
}

func (c *brightcoveServiceClient) RetrieveBrightCoveProfileData(ctx context.Context, in *RetrieveBrightCoveProfileDataRequest, opts ...grpc.CallOption) (*RetrieveBrightCoveProfileDataResponse, error) {
	out := new(RetrieveBrightCoveProfileDataResponse)
	err := c.cc.Invoke(ctx, "/yasuo.v1.BrightcoveService/RetrieveBrightCoveProfileData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brightcoveServiceClient) CreateBrightCoveUploadUrl(ctx context.Context, in *CreateBrightCoveUploadUrlRequest, opts ...grpc.CallOption) (*CreateBrightCoveUploadUrlResponse, error) {
	out := new(CreateBrightCoveUploadUrlResponse)
	err := c.cc.Invoke(ctx, "/yasuo.v1.BrightcoveService/CreateBrightCoveUploadUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brightcoveServiceClient) FinishUploadBrightCove(ctx context.Context, in *FinishUploadBrightCoveRequest, opts ...grpc.CallOption) (*FinishUploadBrightCoveResponse, error) {
	out := new(FinishUploadBrightCoveResponse)
	err := c.cc.Invoke(ctx, "/yasuo.v1.BrightcoveService/FinishUploadBrightCove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brightcoveServiceClient) GetBrightcoveVideoInfo(ctx context.Context, in *GetBrightCoveVideoInfoRequest, opts ...grpc.CallOption) (*GetBrightCoveVideoInfoResponse, error) {
	out := new(GetBrightCoveVideoInfoResponse)
	err := c.cc.Invoke(ctx, "/yasuo.v1.BrightcoveService/GetBrightcoveVideoInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brightcoveServiceClient) GetVideoBrightcoveResumePosition(ctx context.Context, in *GetVideoBrightcoveResumePositionRequest, opts ...grpc.CallOption) (*GetVideoBrightcoveResumePositionResponse, error) {
	out := new(GetVideoBrightcoveResumePositionResponse)
	err := c.cc.Invoke(ctx, "/yasuo.v1.BrightcoveService/GetVideoBrightcoveResumePosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrightcoveServiceServer is the server API for BrightcoveService service.
// All implementations should embed UnimplementedBrightcoveServiceServer
// for forward compatibility
type BrightcoveServiceServer interface {
	RetrieveBrightCoveProfileData(context.Context, *RetrieveBrightCoveProfileDataRequest) (*RetrieveBrightCoveProfileDataResponse, error)
	CreateBrightCoveUploadUrl(context.Context, *CreateBrightCoveUploadUrlRequest) (*CreateBrightCoveUploadUrlResponse, error)
	FinishUploadBrightCove(context.Context, *FinishUploadBrightCoveRequest) (*FinishUploadBrightCoveResponse, error)
	GetBrightcoveVideoInfo(context.Context, *GetBrightCoveVideoInfoRequest) (*GetBrightCoveVideoInfoResponse, error)
	GetVideoBrightcoveResumePosition(context.Context, *GetVideoBrightcoveResumePositionRequest) (*GetVideoBrightcoveResumePositionResponse, error)
}

// UnimplementedBrightcoveServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBrightcoveServiceServer struct {
}

func (UnimplementedBrightcoveServiceServer) RetrieveBrightCoveProfileData(context.Context, *RetrieveBrightCoveProfileDataRequest) (*RetrieveBrightCoveProfileDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveBrightCoveProfileData not implemented")
}
func (UnimplementedBrightcoveServiceServer) CreateBrightCoveUploadUrl(context.Context, *CreateBrightCoveUploadUrlRequest) (*CreateBrightCoveUploadUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBrightCoveUploadUrl not implemented")
}
func (UnimplementedBrightcoveServiceServer) FinishUploadBrightCove(context.Context, *FinishUploadBrightCoveRequest) (*FinishUploadBrightCoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishUploadBrightCove not implemented")
}
func (UnimplementedBrightcoveServiceServer) GetBrightcoveVideoInfo(context.Context, *GetBrightCoveVideoInfoRequest) (*GetBrightCoveVideoInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrightcoveVideoInfo not implemented")
}
func (UnimplementedBrightcoveServiceServer) GetVideoBrightcoveResumePosition(context.Context, *GetVideoBrightcoveResumePositionRequest) (*GetVideoBrightcoveResumePositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoBrightcoveResumePosition not implemented")
}

// UnsafeBrightcoveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrightcoveServiceServer will
// result in compilation errors.
type UnsafeBrightcoveServiceServer interface {
	mustEmbedUnimplementedBrightcoveServiceServer()
}

func RegisterBrightcoveServiceServer(s grpc.ServiceRegistrar, srv BrightcoveServiceServer) {
	s.RegisterService(&_BrightcoveService_serviceDesc, srv)
}

func _BrightcoveService_RetrieveBrightCoveProfileData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveBrightCoveProfileDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrightcoveServiceServer).RetrieveBrightCoveProfileData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yasuo.v1.BrightcoveService/RetrieveBrightCoveProfileData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrightcoveServiceServer).RetrieveBrightCoveProfileData(ctx, req.(*RetrieveBrightCoveProfileDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrightcoveService_CreateBrightCoveUploadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBrightCoveUploadUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrightcoveServiceServer).CreateBrightCoveUploadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yasuo.v1.BrightcoveService/CreateBrightCoveUploadUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrightcoveServiceServer).CreateBrightCoveUploadUrl(ctx, req.(*CreateBrightCoveUploadUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrightcoveService_FinishUploadBrightCove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishUploadBrightCoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrightcoveServiceServer).FinishUploadBrightCove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yasuo.v1.BrightcoveService/FinishUploadBrightCove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrightcoveServiceServer).FinishUploadBrightCove(ctx, req.(*FinishUploadBrightCoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrightcoveService_GetBrightcoveVideoInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBrightCoveVideoInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrightcoveServiceServer).GetBrightcoveVideoInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yasuo.v1.BrightcoveService/GetBrightcoveVideoInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrightcoveServiceServer).GetBrightcoveVideoInfo(ctx, req.(*GetBrightCoveVideoInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrightcoveService_GetVideoBrightcoveResumePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoBrightcoveResumePositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrightcoveServiceServer).GetVideoBrightcoveResumePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yasuo.v1.BrightcoveService/GetVideoBrightcoveResumePosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrightcoveServiceServer).GetVideoBrightcoveResumePosition(ctx, req.(*GetVideoBrightcoveResumePositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BrightcoveService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yasuo.v1.BrightcoveService",
	HandlerType: (*BrightcoveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveBrightCoveProfileData",
			Handler:    _BrightcoveService_RetrieveBrightCoveProfileData_Handler,
		},
		{
			MethodName: "CreateBrightCoveUploadUrl",
			Handler:    _BrightcoveService_CreateBrightCoveUploadUrl_Handler,
		},
		{
			MethodName: "FinishUploadBrightCove",
			Handler:    _BrightcoveService_FinishUploadBrightCove_Handler,
		},
		{
			MethodName: "GetBrightcoveVideoInfo",
			Handler:    _BrightcoveService_GetBrightcoveVideoInfo_Handler,
		},
		{
			MethodName: "GetVideoBrightcoveResumePosition",
			Handler:    _BrightcoveService_GetVideoBrightcoveResumePosition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yasuo/v1/brightcove.proto",
}
