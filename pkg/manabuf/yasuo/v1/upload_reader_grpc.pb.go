// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UploadReaderServiceClient is the client API for UploadReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploadReaderServiceClient interface {
	RetrieveUploadInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RetrieveUploadInfoResponse, error)
}

type uploadReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUploadReaderServiceClient(cc grpc.ClientConnInterface) UploadReaderServiceClient {
	return &uploadReaderServiceClient{cc}
}

func (c *uploadReaderServiceClient) RetrieveUploadInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RetrieveUploadInfoResponse, error) {
	out := new(RetrieveUploadInfoResponse)
	err := c.cc.Invoke(ctx, "/yasuo.v1.UploadReaderService/RetrieveUploadInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploadReaderServiceServer is the server API for UploadReaderService service.
// All implementations should embed UnimplementedUploadReaderServiceServer
// for forward compatibility
type UploadReaderServiceServer interface {
	RetrieveUploadInfo(context.Context, *emptypb.Empty) (*RetrieveUploadInfoResponse, error)
}

// UnimplementedUploadReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUploadReaderServiceServer struct {
}

func (UnimplementedUploadReaderServiceServer) RetrieveUploadInfo(context.Context, *emptypb.Empty) (*RetrieveUploadInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveUploadInfo not implemented")
}

// UnsafeUploadReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploadReaderServiceServer will
// result in compilation errors.
type UnsafeUploadReaderServiceServer interface {
	mustEmbedUnimplementedUploadReaderServiceServer()
}

func RegisterUploadReaderServiceServer(s grpc.ServiceRegistrar, srv UploadReaderServiceServer) {
	s.RegisterService(&_UploadReaderService_serviceDesc, srv)
}

func _UploadReaderService_RetrieveUploadInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadReaderServiceServer).RetrieveUploadInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yasuo.v1.UploadReaderService/RetrieveUploadInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadReaderServiceServer).RetrieveUploadInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _UploadReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yasuo.v1.UploadReaderService",
	HandlerType: (*UploadReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveUploadInfo",
			Handler:    _UploadReaderService_RetrieveUploadInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yasuo/v1/upload_reader.proto",
}
