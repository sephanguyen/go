// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// NotificationTargetServiceClient is the client API for NotificationTargetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationTargetServiceClient interface {
	CreateNotificationTarget(ctx context.Context, in *CreateNotificationTargetRequest, opts ...grpc.CallOption) (*CreateNotificationTargetResponse, error)
	UpdateNotificationTarget(ctx context.Context, in *UpdateNotificationTargetRequest, opts ...grpc.CallOption) (*UpdateNotificationTargetResponse, error)
}

type notificationTargetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationTargetServiceClient(cc grpc.ClientConnInterface) NotificationTargetServiceClient {
	return &notificationTargetServiceClient{cc}
}

func (c *notificationTargetServiceClient) CreateNotificationTarget(ctx context.Context, in *CreateNotificationTargetRequest, opts ...grpc.CallOption) (*CreateNotificationTargetResponse, error) {
	out := new(CreateNotificationTargetResponse)
	err := c.cc.Invoke(ctx, "/yasuo.v1.NotificationTargetService/CreateNotificationTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationTargetServiceClient) UpdateNotificationTarget(ctx context.Context, in *UpdateNotificationTargetRequest, opts ...grpc.CallOption) (*UpdateNotificationTargetResponse, error) {
	out := new(UpdateNotificationTargetResponse)
	err := c.cc.Invoke(ctx, "/yasuo.v1.NotificationTargetService/UpdateNotificationTarget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationTargetServiceServer is the server API for NotificationTargetService service.
// All implementations should embed UnimplementedNotificationTargetServiceServer
// for forward compatibility
type NotificationTargetServiceServer interface {
	CreateNotificationTarget(context.Context, *CreateNotificationTargetRequest) (*CreateNotificationTargetResponse, error)
	UpdateNotificationTarget(context.Context, *UpdateNotificationTargetRequest) (*UpdateNotificationTargetResponse, error)
}

// UnimplementedNotificationTargetServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNotificationTargetServiceServer struct {
}

func (UnimplementedNotificationTargetServiceServer) CreateNotificationTarget(context.Context, *CreateNotificationTargetRequest) (*CreateNotificationTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotificationTarget not implemented")
}
func (UnimplementedNotificationTargetServiceServer) UpdateNotificationTarget(context.Context, *UpdateNotificationTargetRequest) (*UpdateNotificationTargetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotificationTarget not implemented")
}

// UnsafeNotificationTargetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationTargetServiceServer will
// result in compilation errors.
type UnsafeNotificationTargetServiceServer interface {
	mustEmbedUnimplementedNotificationTargetServiceServer()
}

func RegisterNotificationTargetServiceServer(s grpc.ServiceRegistrar, srv NotificationTargetServiceServer) {
	s.RegisterService(&_NotificationTargetService_serviceDesc, srv)
}

func _NotificationTargetService_CreateNotificationTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotificationTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationTargetServiceServer).CreateNotificationTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yasuo.v1.NotificationTargetService/CreateNotificationTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationTargetServiceServer).CreateNotificationTarget(ctx, req.(*CreateNotificationTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationTargetService_UpdateNotificationTarget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotificationTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationTargetServiceServer).UpdateNotificationTarget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yasuo.v1.NotificationTargetService/UpdateNotificationTarget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationTargetServiceServer).UpdateNotificationTarget(ctx, req.(*UpdateNotificationTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotificationTargetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yasuo.v1.NotificationTargetService",
	HandlerType: (*NotificationTargetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNotificationTarget",
			Handler:    _NotificationTargetService_CreateNotificationTarget_Handler,
		},
		{
			MethodName: "UpdateNotificationTarget",
			Handler:    _NotificationTargetService_UpdateNotificationTarget_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yasuo/v1/notification_targets.proto",
}
