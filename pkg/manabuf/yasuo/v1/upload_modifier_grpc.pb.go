// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UploadModifierServiceClient is the client API for UploadModifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploadModifierServiceClient interface {
	UploadHtmlContent(ctx context.Context, in *UploadHtmlContentRequest, opts ...grpc.CallOption) (*UploadHtmlContentResponse, error)
	BulkUploadHtmlContent(ctx context.Context, in *BulkUploadHtmlContentRequest, opts ...grpc.CallOption) (*BulkUploadHtmlContentResponse, error)
	BulkUploadFile(ctx context.Context, in *BulkUploadFileRequest, opts ...grpc.CallOption) (*BulkUploadFileResponse, error)
}

type uploadModifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUploadModifierServiceClient(cc grpc.ClientConnInterface) UploadModifierServiceClient {
	return &uploadModifierServiceClient{cc}
}

func (c *uploadModifierServiceClient) UploadHtmlContent(ctx context.Context, in *UploadHtmlContentRequest, opts ...grpc.CallOption) (*UploadHtmlContentResponse, error) {
	out := new(UploadHtmlContentResponse)
	err := c.cc.Invoke(ctx, "/yasuo.v1.UploadModifierService/UploadHtmlContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadModifierServiceClient) BulkUploadHtmlContent(ctx context.Context, in *BulkUploadHtmlContentRequest, opts ...grpc.CallOption) (*BulkUploadHtmlContentResponse, error) {
	out := new(BulkUploadHtmlContentResponse)
	err := c.cc.Invoke(ctx, "/yasuo.v1.UploadModifierService/BulkUploadHtmlContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadModifierServiceClient) BulkUploadFile(ctx context.Context, in *BulkUploadFileRequest, opts ...grpc.CallOption) (*BulkUploadFileResponse, error) {
	out := new(BulkUploadFileResponse)
	err := c.cc.Invoke(ctx, "/yasuo.v1.UploadModifierService/BulkUploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploadModifierServiceServer is the server API for UploadModifierService service.
// All implementations should embed UnimplementedUploadModifierServiceServer
// for forward compatibility
type UploadModifierServiceServer interface {
	UploadHtmlContent(context.Context, *UploadHtmlContentRequest) (*UploadHtmlContentResponse, error)
	BulkUploadHtmlContent(context.Context, *BulkUploadHtmlContentRequest) (*BulkUploadHtmlContentResponse, error)
	BulkUploadFile(context.Context, *BulkUploadFileRequest) (*BulkUploadFileResponse, error)
}

// UnimplementedUploadModifierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUploadModifierServiceServer struct {
}

func (UnimplementedUploadModifierServiceServer) UploadHtmlContent(context.Context, *UploadHtmlContentRequest) (*UploadHtmlContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadHtmlContent not implemented")
}
func (UnimplementedUploadModifierServiceServer) BulkUploadHtmlContent(context.Context, *BulkUploadHtmlContentRequest) (*BulkUploadHtmlContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkUploadHtmlContent not implemented")
}
func (UnimplementedUploadModifierServiceServer) BulkUploadFile(context.Context, *BulkUploadFileRequest) (*BulkUploadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkUploadFile not implemented")
}

// UnsafeUploadModifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploadModifierServiceServer will
// result in compilation errors.
type UnsafeUploadModifierServiceServer interface {
	mustEmbedUnimplementedUploadModifierServiceServer()
}

func RegisterUploadModifierServiceServer(s grpc.ServiceRegistrar, srv UploadModifierServiceServer) {
	s.RegisterService(&_UploadModifierService_serviceDesc, srv)
}

func _UploadModifierService_UploadHtmlContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadHtmlContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadModifierServiceServer).UploadHtmlContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yasuo.v1.UploadModifierService/UploadHtmlContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadModifierServiceServer).UploadHtmlContent(ctx, req.(*UploadHtmlContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadModifierService_BulkUploadHtmlContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkUploadHtmlContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadModifierServiceServer).BulkUploadHtmlContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yasuo.v1.UploadModifierService/BulkUploadHtmlContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadModifierServiceServer).BulkUploadHtmlContent(ctx, req.(*BulkUploadHtmlContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadModifierService_BulkUploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkUploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadModifierServiceServer).BulkUploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yasuo.v1.UploadModifierService/BulkUploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadModifierServiceServer).BulkUploadFile(ctx, req.(*BulkUploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UploadModifierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yasuo.v1.UploadModifierService",
	HandlerType: (*UploadModifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadHtmlContent",
			Handler:    _UploadModifierService_UploadHtmlContent_Handler,
		},
		{
			MethodName: "BulkUploadHtmlContent",
			Handler:    _UploadModifierService_BulkUploadHtmlContent_Handler,
		},
		{
			MethodName: "BulkUploadFile",
			Handler:    _UploadModifierService_BulkUploadFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yasuo/v1/upload_modifier.proto",
}
