// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// OpenSearchServiceClient is the client API for OpenSearchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenSearchServiceClient interface {
	// Deprecated: Do not use.
	BuildConversationDocument(ctx context.Context, in *BuildConversationDocumentRequest, opts ...grpc.CallOption) (*BuildConversationDocumentResponse, error)
}

type openSearchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenSearchServiceClient(cc grpc.ClientConnInterface) OpenSearchServiceClient {
	return &openSearchServiceClient{cc}
}

// Deprecated: Do not use.
func (c *openSearchServiceClient) BuildConversationDocument(ctx context.Context, in *BuildConversationDocumentRequest, opts ...grpc.CallOption) (*BuildConversationDocumentResponse, error) {
	out := new(BuildConversationDocumentResponse)
	err := c.cc.Invoke(ctx, "/yasuo.v1.OpenSearchService/BuildConversationDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenSearchServiceServer is the server API for OpenSearchService service.
// All implementations should embed UnimplementedOpenSearchServiceServer
// for forward compatibility
type OpenSearchServiceServer interface {
	// Deprecated: Do not use.
	BuildConversationDocument(context.Context, *BuildConversationDocumentRequest) (*BuildConversationDocumentResponse, error)
}

// UnimplementedOpenSearchServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOpenSearchServiceServer struct {
}

func (UnimplementedOpenSearchServiceServer) BuildConversationDocument(context.Context, *BuildConversationDocumentRequest) (*BuildConversationDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildConversationDocument not implemented")
}

// UnsafeOpenSearchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenSearchServiceServer will
// result in compilation errors.
type UnsafeOpenSearchServiceServer interface {
	mustEmbedUnimplementedOpenSearchServiceServer()
}

func RegisterOpenSearchServiceServer(s grpc.ServiceRegistrar, srv OpenSearchServiceServer) {
	s.RegisterService(&_OpenSearchService_serviceDesc, srv)
}

func _OpenSearchService_BuildConversationDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildConversationDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenSearchServiceServer).BuildConversationDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yasuo.v1.OpenSearchService/BuildConversationDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenSearchServiceServer).BuildConversationDocument(ctx, req.(*BuildConversationDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OpenSearchService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yasuo.v1.OpenSearchService",
	HandlerType: (*OpenSearchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuildConversationDocument",
			Handler:    _OpenSearchService_BuildConversationDocument_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yasuo/v1/opensearch.proto",
}
