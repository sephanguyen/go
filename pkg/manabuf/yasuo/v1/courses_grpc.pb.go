// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CourseModifierServiceClient is the client API for CourseModifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourseModifierServiceClient interface {
	UpsertChapters(ctx context.Context, in *UpsertChaptersRequest, opts ...grpc.CallOption) (*UpsertChaptersResponse, error)
	DeleteChapters(ctx context.Context, in *DeleteChaptersRequest, opts ...grpc.CallOption) (*DeleteChaptersResponse, error)
	UpsertCourses(ctx context.Context, in *UpsertCoursesRequest, opts ...grpc.CallOption) (*UpsertCoursesResponse, error)
	DeleteCourses(ctx context.Context, in *DeleteCoursesRequest, opts ...grpc.CallOption) (*DeleteCoursesResponse, error)
	DeleteTopics(ctx context.Context, in *DeleteTopicsRequest, opts ...grpc.CallOption) (*DeleteTopicsResponse, error)
	DeleteLearningObjectives(ctx context.Context, in *DeleteLearningObjectivesRequest, opts ...grpc.CallOption) (*DeleteLearningObjectivesResponse, error)
	UpsertCourseClasses(ctx context.Context, in *UpsertCourseClassesRequest, opts ...grpc.CallOption) (*UpsertCourseClassesResponse, error)
	UpsertLiveCourse(ctx context.Context, in *UpsertLiveCourseRequest, opts ...grpc.CallOption) (*UpsertLiveCourseResponse, error)
	DeleteLiveCourse(ctx context.Context, in *DeleteLiveCourseRequest, opts ...grpc.CallOption) (*DeleteLiveCourseResponse, error)
	UpdateLiveLesson(ctx context.Context, in *UpdateLiveLessonRequest, opts ...grpc.CallOption) (*UpdateLiveLessonResponse, error)
	CreateLiveLesson(ctx context.Context, in *CreateLiveLessonRequest, opts ...grpc.CallOption) (*CreateLiveLessonResponse, error)
	DeleteLiveLesson(ctx context.Context, in *DeleteLiveLessonRequest, opts ...grpc.CallOption) (*DeleteLiveLessonResponse, error)
	UpsertBooks(ctx context.Context, in *UpsertBooksRequest, opts ...grpc.CallOption) (*UpsertBooksResponse, error)
	AddBooksToCourse(ctx context.Context, in *AddBooksToCourseRequest, opts ...grpc.CallOption) (*AddBooksToCourseResponse, error)
	AttachMaterialsToCourse(ctx context.Context, in *AttachMaterialsToCourseRequest, opts ...grpc.CallOption) (*AttachMaterialsToCourseResponse, error)
}

type courseModifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseModifierServiceClient(cc grpc.ClientConnInterface) CourseModifierServiceClient {
	return &courseModifierServiceClient{cc}
}

func (c *courseModifierServiceClient) UpsertChapters(ctx context.Context, in *UpsertChaptersRequest, opts ...grpc.CallOption) (*UpsertChaptersResponse, error) {
	out := new(UpsertChaptersResponse)
	err := c.cc.Invoke(ctx, "/yasuo.v1.CourseModifierService/UpsertChapters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseModifierServiceClient) DeleteChapters(ctx context.Context, in *DeleteChaptersRequest, opts ...grpc.CallOption) (*DeleteChaptersResponse, error) {
	out := new(DeleteChaptersResponse)
	err := c.cc.Invoke(ctx, "/yasuo.v1.CourseModifierService/DeleteChapters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseModifierServiceClient) UpsertCourses(ctx context.Context, in *UpsertCoursesRequest, opts ...grpc.CallOption) (*UpsertCoursesResponse, error) {
	out := new(UpsertCoursesResponse)
	err := c.cc.Invoke(ctx, "/yasuo.v1.CourseModifierService/UpsertCourses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseModifierServiceClient) DeleteCourses(ctx context.Context, in *DeleteCoursesRequest, opts ...grpc.CallOption) (*DeleteCoursesResponse, error) {
	out := new(DeleteCoursesResponse)
	err := c.cc.Invoke(ctx, "/yasuo.v1.CourseModifierService/DeleteCourses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseModifierServiceClient) DeleteTopics(ctx context.Context, in *DeleteTopicsRequest, opts ...grpc.CallOption) (*DeleteTopicsResponse, error) {
	out := new(DeleteTopicsResponse)
	err := c.cc.Invoke(ctx, "/yasuo.v1.CourseModifierService/DeleteTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseModifierServiceClient) DeleteLearningObjectives(ctx context.Context, in *DeleteLearningObjectivesRequest, opts ...grpc.CallOption) (*DeleteLearningObjectivesResponse, error) {
	out := new(DeleteLearningObjectivesResponse)
	err := c.cc.Invoke(ctx, "/yasuo.v1.CourseModifierService/DeleteLearningObjectives", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseModifierServiceClient) UpsertCourseClasses(ctx context.Context, in *UpsertCourseClassesRequest, opts ...grpc.CallOption) (*UpsertCourseClassesResponse, error) {
	out := new(UpsertCourseClassesResponse)
	err := c.cc.Invoke(ctx, "/yasuo.v1.CourseModifierService/UpsertCourseClasses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseModifierServiceClient) UpsertLiveCourse(ctx context.Context, in *UpsertLiveCourseRequest, opts ...grpc.CallOption) (*UpsertLiveCourseResponse, error) {
	out := new(UpsertLiveCourseResponse)
	err := c.cc.Invoke(ctx, "/yasuo.v1.CourseModifierService/UpsertLiveCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseModifierServiceClient) DeleteLiveCourse(ctx context.Context, in *DeleteLiveCourseRequest, opts ...grpc.CallOption) (*DeleteLiveCourseResponse, error) {
	out := new(DeleteLiveCourseResponse)
	err := c.cc.Invoke(ctx, "/yasuo.v1.CourseModifierService/DeleteLiveCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseModifierServiceClient) UpdateLiveLesson(ctx context.Context, in *UpdateLiveLessonRequest, opts ...grpc.CallOption) (*UpdateLiveLessonResponse, error) {
	out := new(UpdateLiveLessonResponse)
	err := c.cc.Invoke(ctx, "/yasuo.v1.CourseModifierService/UpdateLiveLesson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseModifierServiceClient) CreateLiveLesson(ctx context.Context, in *CreateLiveLessonRequest, opts ...grpc.CallOption) (*CreateLiveLessonResponse, error) {
	out := new(CreateLiveLessonResponse)
	err := c.cc.Invoke(ctx, "/yasuo.v1.CourseModifierService/CreateLiveLesson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseModifierServiceClient) DeleteLiveLesson(ctx context.Context, in *DeleteLiveLessonRequest, opts ...grpc.CallOption) (*DeleteLiveLessonResponse, error) {
	out := new(DeleteLiveLessonResponse)
	err := c.cc.Invoke(ctx, "/yasuo.v1.CourseModifierService/DeleteLiveLesson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseModifierServiceClient) UpsertBooks(ctx context.Context, in *UpsertBooksRequest, opts ...grpc.CallOption) (*UpsertBooksResponse, error) {
	out := new(UpsertBooksResponse)
	err := c.cc.Invoke(ctx, "/yasuo.v1.CourseModifierService/UpsertBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseModifierServiceClient) AddBooksToCourse(ctx context.Context, in *AddBooksToCourseRequest, opts ...grpc.CallOption) (*AddBooksToCourseResponse, error) {
	out := new(AddBooksToCourseResponse)
	err := c.cc.Invoke(ctx, "/yasuo.v1.CourseModifierService/AddBooksToCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseModifierServiceClient) AttachMaterialsToCourse(ctx context.Context, in *AttachMaterialsToCourseRequest, opts ...grpc.CallOption) (*AttachMaterialsToCourseResponse, error) {
	out := new(AttachMaterialsToCourseResponse)
	err := c.cc.Invoke(ctx, "/yasuo.v1.CourseModifierService/AttachMaterialsToCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseModifierServiceServer is the server API for CourseModifierService service.
// All implementations should embed UnimplementedCourseModifierServiceServer
// for forward compatibility
type CourseModifierServiceServer interface {
	UpsertChapters(context.Context, *UpsertChaptersRequest) (*UpsertChaptersResponse, error)
	DeleteChapters(context.Context, *DeleteChaptersRequest) (*DeleteChaptersResponse, error)
	UpsertCourses(context.Context, *UpsertCoursesRequest) (*UpsertCoursesResponse, error)
	DeleteCourses(context.Context, *DeleteCoursesRequest) (*DeleteCoursesResponse, error)
	DeleteTopics(context.Context, *DeleteTopicsRequest) (*DeleteTopicsResponse, error)
	DeleteLearningObjectives(context.Context, *DeleteLearningObjectivesRequest) (*DeleteLearningObjectivesResponse, error)
	UpsertCourseClasses(context.Context, *UpsertCourseClassesRequest) (*UpsertCourseClassesResponse, error)
	UpsertLiveCourse(context.Context, *UpsertLiveCourseRequest) (*UpsertLiveCourseResponse, error)
	DeleteLiveCourse(context.Context, *DeleteLiveCourseRequest) (*DeleteLiveCourseResponse, error)
	UpdateLiveLesson(context.Context, *UpdateLiveLessonRequest) (*UpdateLiveLessonResponse, error)
	CreateLiveLesson(context.Context, *CreateLiveLessonRequest) (*CreateLiveLessonResponse, error)
	DeleteLiveLesson(context.Context, *DeleteLiveLessonRequest) (*DeleteLiveLessonResponse, error)
	UpsertBooks(context.Context, *UpsertBooksRequest) (*UpsertBooksResponse, error)
	AddBooksToCourse(context.Context, *AddBooksToCourseRequest) (*AddBooksToCourseResponse, error)
	AttachMaterialsToCourse(context.Context, *AttachMaterialsToCourseRequest) (*AttachMaterialsToCourseResponse, error)
}

// UnimplementedCourseModifierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCourseModifierServiceServer struct {
}

func (UnimplementedCourseModifierServiceServer) UpsertChapters(context.Context, *UpsertChaptersRequest) (*UpsertChaptersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertChapters not implemented")
}
func (UnimplementedCourseModifierServiceServer) DeleteChapters(context.Context, *DeleteChaptersRequest) (*DeleteChaptersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChapters not implemented")
}
func (UnimplementedCourseModifierServiceServer) UpsertCourses(context.Context, *UpsertCoursesRequest) (*UpsertCoursesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertCourses not implemented")
}
func (UnimplementedCourseModifierServiceServer) DeleteCourses(context.Context, *DeleteCoursesRequest) (*DeleteCoursesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCourses not implemented")
}
func (UnimplementedCourseModifierServiceServer) DeleteTopics(context.Context, *DeleteTopicsRequest) (*DeleteTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopics not implemented")
}
func (UnimplementedCourseModifierServiceServer) DeleteLearningObjectives(context.Context, *DeleteLearningObjectivesRequest) (*DeleteLearningObjectivesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLearningObjectives not implemented")
}
func (UnimplementedCourseModifierServiceServer) UpsertCourseClasses(context.Context, *UpsertCourseClassesRequest) (*UpsertCourseClassesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertCourseClasses not implemented")
}
func (UnimplementedCourseModifierServiceServer) UpsertLiveCourse(context.Context, *UpsertLiveCourseRequest) (*UpsertLiveCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertLiveCourse not implemented")
}
func (UnimplementedCourseModifierServiceServer) DeleteLiveCourse(context.Context, *DeleteLiveCourseRequest) (*DeleteLiveCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLiveCourse not implemented")
}
func (UnimplementedCourseModifierServiceServer) UpdateLiveLesson(context.Context, *UpdateLiveLessonRequest) (*UpdateLiveLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLiveLesson not implemented")
}
func (UnimplementedCourseModifierServiceServer) CreateLiveLesson(context.Context, *CreateLiveLessonRequest) (*CreateLiveLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLiveLesson not implemented")
}
func (UnimplementedCourseModifierServiceServer) DeleteLiveLesson(context.Context, *DeleteLiveLessonRequest) (*DeleteLiveLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLiveLesson not implemented")
}
func (UnimplementedCourseModifierServiceServer) UpsertBooks(context.Context, *UpsertBooksRequest) (*UpsertBooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertBooks not implemented")
}
func (UnimplementedCourseModifierServiceServer) AddBooksToCourse(context.Context, *AddBooksToCourseRequest) (*AddBooksToCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBooksToCourse not implemented")
}
func (UnimplementedCourseModifierServiceServer) AttachMaterialsToCourse(context.Context, *AttachMaterialsToCourseRequest) (*AttachMaterialsToCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachMaterialsToCourse not implemented")
}

// UnsafeCourseModifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseModifierServiceServer will
// result in compilation errors.
type UnsafeCourseModifierServiceServer interface {
	mustEmbedUnimplementedCourseModifierServiceServer()
}

func RegisterCourseModifierServiceServer(s grpc.ServiceRegistrar, srv CourseModifierServiceServer) {
	s.RegisterService(&_CourseModifierService_serviceDesc, srv)
}

func _CourseModifierService_UpsertChapters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertChaptersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseModifierServiceServer).UpsertChapters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yasuo.v1.CourseModifierService/UpsertChapters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseModifierServiceServer).UpsertChapters(ctx, req.(*UpsertChaptersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseModifierService_DeleteChapters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChaptersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseModifierServiceServer).DeleteChapters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yasuo.v1.CourseModifierService/DeleteChapters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseModifierServiceServer).DeleteChapters(ctx, req.(*DeleteChaptersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseModifierService_UpsertCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertCoursesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseModifierServiceServer).UpsertCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yasuo.v1.CourseModifierService/UpsertCourses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseModifierServiceServer).UpsertCourses(ctx, req.(*UpsertCoursesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseModifierService_DeleteCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCoursesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseModifierServiceServer).DeleteCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yasuo.v1.CourseModifierService/DeleteCourses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseModifierServiceServer).DeleteCourses(ctx, req.(*DeleteCoursesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseModifierService_DeleteTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseModifierServiceServer).DeleteTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yasuo.v1.CourseModifierService/DeleteTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseModifierServiceServer).DeleteTopics(ctx, req.(*DeleteTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseModifierService_DeleteLearningObjectives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLearningObjectivesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseModifierServiceServer).DeleteLearningObjectives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yasuo.v1.CourseModifierService/DeleteLearningObjectives",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseModifierServiceServer).DeleteLearningObjectives(ctx, req.(*DeleteLearningObjectivesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseModifierService_UpsertCourseClasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertCourseClassesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseModifierServiceServer).UpsertCourseClasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yasuo.v1.CourseModifierService/UpsertCourseClasses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseModifierServiceServer).UpsertCourseClasses(ctx, req.(*UpsertCourseClassesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseModifierService_UpsertLiveCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertLiveCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseModifierServiceServer).UpsertLiveCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yasuo.v1.CourseModifierService/UpsertLiveCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseModifierServiceServer).UpsertLiveCourse(ctx, req.(*UpsertLiveCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseModifierService_DeleteLiveCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLiveCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseModifierServiceServer).DeleteLiveCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yasuo.v1.CourseModifierService/DeleteLiveCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseModifierServiceServer).DeleteLiveCourse(ctx, req.(*DeleteLiveCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseModifierService_UpdateLiveLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLiveLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseModifierServiceServer).UpdateLiveLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yasuo.v1.CourseModifierService/UpdateLiveLesson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseModifierServiceServer).UpdateLiveLesson(ctx, req.(*UpdateLiveLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseModifierService_CreateLiveLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLiveLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseModifierServiceServer).CreateLiveLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yasuo.v1.CourseModifierService/CreateLiveLesson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseModifierServiceServer).CreateLiveLesson(ctx, req.(*CreateLiveLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseModifierService_DeleteLiveLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLiveLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseModifierServiceServer).DeleteLiveLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yasuo.v1.CourseModifierService/DeleteLiveLesson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseModifierServiceServer).DeleteLiveLesson(ctx, req.(*DeleteLiveLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseModifierService_UpsertBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertBooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseModifierServiceServer).UpsertBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yasuo.v1.CourseModifierService/UpsertBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseModifierServiceServer).UpsertBooks(ctx, req.(*UpsertBooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseModifierService_AddBooksToCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBooksToCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseModifierServiceServer).AddBooksToCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yasuo.v1.CourseModifierService/AddBooksToCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseModifierServiceServer).AddBooksToCourse(ctx, req.(*AddBooksToCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseModifierService_AttachMaterialsToCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachMaterialsToCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseModifierServiceServer).AttachMaterialsToCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yasuo.v1.CourseModifierService/AttachMaterialsToCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseModifierServiceServer).AttachMaterialsToCourse(ctx, req.(*AttachMaterialsToCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CourseModifierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yasuo.v1.CourseModifierService",
	HandlerType: (*CourseModifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertChapters",
			Handler:    _CourseModifierService_UpsertChapters_Handler,
		},
		{
			MethodName: "DeleteChapters",
			Handler:    _CourseModifierService_DeleteChapters_Handler,
		},
		{
			MethodName: "UpsertCourses",
			Handler:    _CourseModifierService_UpsertCourses_Handler,
		},
		{
			MethodName: "DeleteCourses",
			Handler:    _CourseModifierService_DeleteCourses_Handler,
		},
		{
			MethodName: "DeleteTopics",
			Handler:    _CourseModifierService_DeleteTopics_Handler,
		},
		{
			MethodName: "DeleteLearningObjectives",
			Handler:    _CourseModifierService_DeleteLearningObjectives_Handler,
		},
		{
			MethodName: "UpsertCourseClasses",
			Handler:    _CourseModifierService_UpsertCourseClasses_Handler,
		},
		{
			MethodName: "UpsertLiveCourse",
			Handler:    _CourseModifierService_UpsertLiveCourse_Handler,
		},
		{
			MethodName: "DeleteLiveCourse",
			Handler:    _CourseModifierService_DeleteLiveCourse_Handler,
		},
		{
			MethodName: "UpdateLiveLesson",
			Handler:    _CourseModifierService_UpdateLiveLesson_Handler,
		},
		{
			MethodName: "CreateLiveLesson",
			Handler:    _CourseModifierService_CreateLiveLesson_Handler,
		},
		{
			MethodName: "DeleteLiveLesson",
			Handler:    _CourseModifierService_DeleteLiveLesson_Handler,
		},
		{
			MethodName: "UpsertBooks",
			Handler:    _CourseModifierService_UpsertBooks_Handler,
		},
		{
			MethodName: "AddBooksToCourse",
			Handler:    _CourseModifierService_AddBooksToCourse_Handler,
		},
		{
			MethodName: "AttachMaterialsToCourse",
			Handler:    _CourseModifierService_AttachMaterialsToCourse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yasuo/v1/courses.proto",
}

// CourseReaderServiceClient is the client API for CourseReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourseReaderServiceClient interface {
	ValidateUserSchool(ctx context.Context, in *ValidateUserSchoolRequest, opts ...grpc.CallOption) (*ValidateUserSchoolResponse, error)
}

type courseReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseReaderServiceClient(cc grpc.ClientConnInterface) CourseReaderServiceClient {
	return &courseReaderServiceClient{cc}
}

func (c *courseReaderServiceClient) ValidateUserSchool(ctx context.Context, in *ValidateUserSchoolRequest, opts ...grpc.CallOption) (*ValidateUserSchoolResponse, error) {
	out := new(ValidateUserSchoolResponse)
	err := c.cc.Invoke(ctx, "/yasuo.v1.CourseReaderService/ValidateUserSchool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseReaderServiceServer is the server API for CourseReaderService service.
// All implementations should embed UnimplementedCourseReaderServiceServer
// for forward compatibility
type CourseReaderServiceServer interface {
	ValidateUserSchool(context.Context, *ValidateUserSchoolRequest) (*ValidateUserSchoolResponse, error)
}

// UnimplementedCourseReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCourseReaderServiceServer struct {
}

func (UnimplementedCourseReaderServiceServer) ValidateUserSchool(context.Context, *ValidateUserSchoolRequest) (*ValidateUserSchoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateUserSchool not implemented")
}

// UnsafeCourseReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseReaderServiceServer will
// result in compilation errors.
type UnsafeCourseReaderServiceServer interface {
	mustEmbedUnimplementedCourseReaderServiceServer()
}

func RegisterCourseReaderServiceServer(s grpc.ServiceRegistrar, srv CourseReaderServiceServer) {
	s.RegisterService(&_CourseReaderService_serviceDesc, srv)
}

func _CourseReaderService_ValidateUserSchool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateUserSchoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseReaderServiceServer).ValidateUserSchool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yasuo.v1.CourseReaderService/ValidateUserSchool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseReaderServiceServer).ValidateUserSchool(ctx, req.(*ValidateUserSchoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CourseReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yasuo.v1.CourseReaderService",
	HandlerType: (*CourseReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateUserSchool",
			Handler:    _CourseReaderService_ValidateUserSchool_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yasuo/v1/courses.proto",
}
