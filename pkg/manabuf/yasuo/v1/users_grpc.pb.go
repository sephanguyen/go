// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UserModifierServiceClient is the client API for UserModifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserModifierServiceClient interface {
	UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	CreateStudent(ctx context.Context, in *CreateStudentRequest, opts ...grpc.CallOption) (*CreateStudentResponse, error)
	UpdateStudent(ctx context.Context, in *UpdateStudentRequest, opts ...grpc.CallOption) (*UpdateStudentResponse, error)
	AssignToParent(ctx context.Context, in *AssignToParentRequest, opts ...grpc.CallOption) (*AssignToParentResponse, error)
	OverrideUserPassword(ctx context.Context, in *OverrideUserPasswordRequest, opts ...grpc.CallOption) (*OverrideUserPasswordResponse, error)
}

type userModifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserModifierServiceClient(cc grpc.ClientConnInterface) UserModifierServiceClient {
	return &userModifierServiceClient{cc}
}

func (c *userModifierServiceClient) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error) {
	out := new(UpdateUserProfileResponse)
	err := c.cc.Invoke(ctx, "/yasuo.v1.UserModifierService/UpdateUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userModifierServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/yasuo.v1.UserModifierService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userModifierServiceClient) CreateStudent(ctx context.Context, in *CreateStudentRequest, opts ...grpc.CallOption) (*CreateStudentResponse, error) {
	out := new(CreateStudentResponse)
	err := c.cc.Invoke(ctx, "/yasuo.v1.UserModifierService/CreateStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userModifierServiceClient) UpdateStudent(ctx context.Context, in *UpdateStudentRequest, opts ...grpc.CallOption) (*UpdateStudentResponse, error) {
	out := new(UpdateStudentResponse)
	err := c.cc.Invoke(ctx, "/yasuo.v1.UserModifierService/UpdateStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userModifierServiceClient) AssignToParent(ctx context.Context, in *AssignToParentRequest, opts ...grpc.CallOption) (*AssignToParentResponse, error) {
	out := new(AssignToParentResponse)
	err := c.cc.Invoke(ctx, "/yasuo.v1.UserModifierService/AssignToParent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userModifierServiceClient) OverrideUserPassword(ctx context.Context, in *OverrideUserPasswordRequest, opts ...grpc.CallOption) (*OverrideUserPasswordResponse, error) {
	out := new(OverrideUserPasswordResponse)
	err := c.cc.Invoke(ctx, "/yasuo.v1.UserModifierService/OverrideUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserModifierServiceServer is the server API for UserModifierService service.
// All implementations should embed UnimplementedUserModifierServiceServer
// for forward compatibility
type UserModifierServiceServer interface {
	UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	CreateStudent(context.Context, *CreateStudentRequest) (*CreateStudentResponse, error)
	UpdateStudent(context.Context, *UpdateStudentRequest) (*UpdateStudentResponse, error)
	AssignToParent(context.Context, *AssignToParentRequest) (*AssignToParentResponse, error)
	OverrideUserPassword(context.Context, *OverrideUserPasswordRequest) (*OverrideUserPasswordResponse, error)
}

// UnimplementedUserModifierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUserModifierServiceServer struct {
}

func (UnimplementedUserModifierServiceServer) UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (UnimplementedUserModifierServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserModifierServiceServer) CreateStudent(context.Context, *CreateStudentRequest) (*CreateStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudent not implemented")
}
func (UnimplementedUserModifierServiceServer) UpdateStudent(context.Context, *UpdateStudentRequest) (*UpdateStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudent not implemented")
}
func (UnimplementedUserModifierServiceServer) AssignToParent(context.Context, *AssignToParentRequest) (*AssignToParentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignToParent not implemented")
}
func (UnimplementedUserModifierServiceServer) OverrideUserPassword(context.Context, *OverrideUserPasswordRequest) (*OverrideUserPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OverrideUserPassword not implemented")
}

// UnsafeUserModifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserModifierServiceServer will
// result in compilation errors.
type UnsafeUserModifierServiceServer interface {
	mustEmbedUnimplementedUserModifierServiceServer()
}

func RegisterUserModifierServiceServer(s grpc.ServiceRegistrar, srv UserModifierServiceServer) {
	s.RegisterService(&_UserModifierService_serviceDesc, srv)
}

func _UserModifierService_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserModifierServiceServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yasuo.v1.UserModifierService/UpdateUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserModifierServiceServer).UpdateUserProfile(ctx, req.(*UpdateUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserModifierService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserModifierServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yasuo.v1.UserModifierService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserModifierServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserModifierService_CreateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserModifierServiceServer).CreateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yasuo.v1.UserModifierService/CreateStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserModifierServiceServer).CreateStudent(ctx, req.(*CreateStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserModifierService_UpdateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserModifierServiceServer).UpdateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yasuo.v1.UserModifierService/UpdateStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserModifierServiceServer).UpdateStudent(ctx, req.(*UpdateStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserModifierService_AssignToParent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignToParentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserModifierServiceServer).AssignToParent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yasuo.v1.UserModifierService/AssignToParent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserModifierServiceServer).AssignToParent(ctx, req.(*AssignToParentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserModifierService_OverrideUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverrideUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserModifierServiceServer).OverrideUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yasuo.v1.UserModifierService/OverrideUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserModifierServiceServer).OverrideUserPassword(ctx, req.(*OverrideUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserModifierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yasuo.v1.UserModifierService",
	HandlerType: (*UserModifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUserProfile",
			Handler:    _UserModifierService_UpdateUserProfile_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserModifierService_CreateUser_Handler,
		},
		{
			MethodName: "CreateStudent",
			Handler:    _UserModifierService_CreateStudent_Handler,
		},
		{
			MethodName: "UpdateStudent",
			Handler:    _UserModifierService_UpdateStudent_Handler,
		},
		{
			MethodName: "AssignToParent",
			Handler:    _UserModifierService_AssignToParent_Handler,
		},
		{
			MethodName: "OverrideUserPassword",
			Handler:    _UserModifierService_OverrideUserPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yasuo/v1/users.proto",
}
