// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ypb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ImportServiceClient is the client API for ImportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImportServiceClient interface {
	ImportSchools(ctx context.Context, opts ...grpc.CallOption) (ImportService_ImportSchoolsClient, error)
	ImportPresetStudyPlans(ctx context.Context, opts ...grpc.CallOption) (ImportService_ImportPresetStudyPlansClient, error)
	ImportCourses(ctx context.Context, opts ...grpc.CallOption) (ImportService_ImportCoursesClient, error)
	ImportChapters(ctx context.Context, opts ...grpc.CallOption) (ImportService_ImportChaptersClient, error)
	ImportBooks(ctx context.Context, opts ...grpc.CallOption) (ImportService_ImportBooksClient, error)
	ImportTopics(ctx context.Context, opts ...grpc.CallOption) (ImportService_ImportTopicsClient, error)
	ImportLearningObjectives(ctx context.Context, opts ...grpc.CallOption) (ImportService_ImportLearningObjectivesClient, error)
	ImportQuizzes(ctx context.Context, opts ...grpc.CallOption) (ImportService_ImportQuizzesClient, error)
}

type importServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImportServiceClient(cc grpc.ClientConnInterface) ImportServiceClient {
	return &importServiceClient{cc}
}

func (c *importServiceClient) ImportSchools(ctx context.Context, opts ...grpc.CallOption) (ImportService_ImportSchoolsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ImportService_serviceDesc.Streams[0], "/yasuo.v1.ImportService/ImportSchools", opts...)
	if err != nil {
		return nil, err
	}
	x := &importServiceImportSchoolsClient{stream}
	return x, nil
}

type ImportService_ImportSchoolsClient interface {
	Send(*ImportSchoolsRequest) error
	CloseAndRecv() (*ImportSchoolsResponse, error)
	grpc.ClientStream
}

type importServiceImportSchoolsClient struct {
	grpc.ClientStream
}

func (x *importServiceImportSchoolsClient) Send(m *ImportSchoolsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *importServiceImportSchoolsClient) CloseAndRecv() (*ImportSchoolsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImportSchoolsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *importServiceClient) ImportPresetStudyPlans(ctx context.Context, opts ...grpc.CallOption) (ImportService_ImportPresetStudyPlansClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ImportService_serviceDesc.Streams[1], "/yasuo.v1.ImportService/ImportPresetStudyPlans", opts...)
	if err != nil {
		return nil, err
	}
	x := &importServiceImportPresetStudyPlansClient{stream}
	return x, nil
}

type ImportService_ImportPresetStudyPlansClient interface {
	Send(*ImportPresetStudyPlansRequest) error
	CloseAndRecv() (*ImportPresetStudyPlansResponse, error)
	grpc.ClientStream
}

type importServiceImportPresetStudyPlansClient struct {
	grpc.ClientStream
}

func (x *importServiceImportPresetStudyPlansClient) Send(m *ImportPresetStudyPlansRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *importServiceImportPresetStudyPlansClient) CloseAndRecv() (*ImportPresetStudyPlansResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImportPresetStudyPlansResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *importServiceClient) ImportCourses(ctx context.Context, opts ...grpc.CallOption) (ImportService_ImportCoursesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ImportService_serviceDesc.Streams[2], "/yasuo.v1.ImportService/ImportCourses", opts...)
	if err != nil {
		return nil, err
	}
	x := &importServiceImportCoursesClient{stream}
	return x, nil
}

type ImportService_ImportCoursesClient interface {
	Send(*ImportCoursesRequest) error
	CloseAndRecv() (*ImportCoursesResponse, error)
	grpc.ClientStream
}

type importServiceImportCoursesClient struct {
	grpc.ClientStream
}

func (x *importServiceImportCoursesClient) Send(m *ImportCoursesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *importServiceImportCoursesClient) CloseAndRecv() (*ImportCoursesResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImportCoursesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *importServiceClient) ImportChapters(ctx context.Context, opts ...grpc.CallOption) (ImportService_ImportChaptersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ImportService_serviceDesc.Streams[3], "/yasuo.v1.ImportService/ImportChapters", opts...)
	if err != nil {
		return nil, err
	}
	x := &importServiceImportChaptersClient{stream}
	return x, nil
}

type ImportService_ImportChaptersClient interface {
	Send(*ImportChaptersRequest) error
	CloseAndRecv() (*ImportChaptersResponse, error)
	grpc.ClientStream
}

type importServiceImportChaptersClient struct {
	grpc.ClientStream
}

func (x *importServiceImportChaptersClient) Send(m *ImportChaptersRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *importServiceImportChaptersClient) CloseAndRecv() (*ImportChaptersResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImportChaptersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *importServiceClient) ImportBooks(ctx context.Context, opts ...grpc.CallOption) (ImportService_ImportBooksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ImportService_serviceDesc.Streams[4], "/yasuo.v1.ImportService/ImportBooks", opts...)
	if err != nil {
		return nil, err
	}
	x := &importServiceImportBooksClient{stream}
	return x, nil
}

type ImportService_ImportBooksClient interface {
	Send(*ImportBooksRequest) error
	CloseAndRecv() (*ImportBooksResponse, error)
	grpc.ClientStream
}

type importServiceImportBooksClient struct {
	grpc.ClientStream
}

func (x *importServiceImportBooksClient) Send(m *ImportBooksRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *importServiceImportBooksClient) CloseAndRecv() (*ImportBooksResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImportBooksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *importServiceClient) ImportTopics(ctx context.Context, opts ...grpc.CallOption) (ImportService_ImportTopicsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ImportService_serviceDesc.Streams[5], "/yasuo.v1.ImportService/ImportTopics", opts...)
	if err != nil {
		return nil, err
	}
	x := &importServiceImportTopicsClient{stream}
	return x, nil
}

type ImportService_ImportTopicsClient interface {
	Send(*ImportTopicsRequest) error
	CloseAndRecv() (*ImportTopicsResponse, error)
	grpc.ClientStream
}

type importServiceImportTopicsClient struct {
	grpc.ClientStream
}

func (x *importServiceImportTopicsClient) Send(m *ImportTopicsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *importServiceImportTopicsClient) CloseAndRecv() (*ImportTopicsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImportTopicsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *importServiceClient) ImportLearningObjectives(ctx context.Context, opts ...grpc.CallOption) (ImportService_ImportLearningObjectivesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ImportService_serviceDesc.Streams[6], "/yasuo.v1.ImportService/ImportLearningObjectives", opts...)
	if err != nil {
		return nil, err
	}
	x := &importServiceImportLearningObjectivesClient{stream}
	return x, nil
}

type ImportService_ImportLearningObjectivesClient interface {
	Send(*ImportLearningObjectivesRequest) error
	CloseAndRecv() (*ImportLearningObjectivesResponse, error)
	grpc.ClientStream
}

type importServiceImportLearningObjectivesClient struct {
	grpc.ClientStream
}

func (x *importServiceImportLearningObjectivesClient) Send(m *ImportLearningObjectivesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *importServiceImportLearningObjectivesClient) CloseAndRecv() (*ImportLearningObjectivesResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImportLearningObjectivesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *importServiceClient) ImportQuizzes(ctx context.Context, opts ...grpc.CallOption) (ImportService_ImportQuizzesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ImportService_serviceDesc.Streams[7], "/yasuo.v1.ImportService/ImportQuizzes", opts...)
	if err != nil {
		return nil, err
	}
	x := &importServiceImportQuizzesClient{stream}
	return x, nil
}

type ImportService_ImportQuizzesClient interface {
	Send(*ImportQuizzesRequest) error
	CloseAndRecv() (*ImportQuizzesResponse, error)
	grpc.ClientStream
}

type importServiceImportQuizzesClient struct {
	grpc.ClientStream
}

func (x *importServiceImportQuizzesClient) Send(m *ImportQuizzesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *importServiceImportQuizzesClient) CloseAndRecv() (*ImportQuizzesResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImportQuizzesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImportServiceServer is the server API for ImportService service.
// All implementations should embed UnimplementedImportServiceServer
// for forward compatibility
type ImportServiceServer interface {
	ImportSchools(ImportService_ImportSchoolsServer) error
	ImportPresetStudyPlans(ImportService_ImportPresetStudyPlansServer) error
	ImportCourses(ImportService_ImportCoursesServer) error
	ImportChapters(ImportService_ImportChaptersServer) error
	ImportBooks(ImportService_ImportBooksServer) error
	ImportTopics(ImportService_ImportTopicsServer) error
	ImportLearningObjectives(ImportService_ImportLearningObjectivesServer) error
	ImportQuizzes(ImportService_ImportQuizzesServer) error
}

// UnimplementedImportServiceServer should be embedded to have forward compatible implementations.
type UnimplementedImportServiceServer struct {
}

func (UnimplementedImportServiceServer) ImportSchools(ImportService_ImportSchoolsServer) error {
	return status.Errorf(codes.Unimplemented, "method ImportSchools not implemented")
}
func (UnimplementedImportServiceServer) ImportPresetStudyPlans(ImportService_ImportPresetStudyPlansServer) error {
	return status.Errorf(codes.Unimplemented, "method ImportPresetStudyPlans not implemented")
}
func (UnimplementedImportServiceServer) ImportCourses(ImportService_ImportCoursesServer) error {
	return status.Errorf(codes.Unimplemented, "method ImportCourses not implemented")
}
func (UnimplementedImportServiceServer) ImportChapters(ImportService_ImportChaptersServer) error {
	return status.Errorf(codes.Unimplemented, "method ImportChapters not implemented")
}
func (UnimplementedImportServiceServer) ImportBooks(ImportService_ImportBooksServer) error {
	return status.Errorf(codes.Unimplemented, "method ImportBooks not implemented")
}
func (UnimplementedImportServiceServer) ImportTopics(ImportService_ImportTopicsServer) error {
	return status.Errorf(codes.Unimplemented, "method ImportTopics not implemented")
}
func (UnimplementedImportServiceServer) ImportLearningObjectives(ImportService_ImportLearningObjectivesServer) error {
	return status.Errorf(codes.Unimplemented, "method ImportLearningObjectives not implemented")
}
func (UnimplementedImportServiceServer) ImportQuizzes(ImportService_ImportQuizzesServer) error {
	return status.Errorf(codes.Unimplemented, "method ImportQuizzes not implemented")
}

// UnsafeImportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImportServiceServer will
// result in compilation errors.
type UnsafeImportServiceServer interface {
	mustEmbedUnimplementedImportServiceServer()
}

func RegisterImportServiceServer(s grpc.ServiceRegistrar, srv ImportServiceServer) {
	s.RegisterService(&_ImportService_serviceDesc, srv)
}

func _ImportService_ImportSchools_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImportServiceServer).ImportSchools(&importServiceImportSchoolsServer{stream})
}

type ImportService_ImportSchoolsServer interface {
	SendAndClose(*ImportSchoolsResponse) error
	Recv() (*ImportSchoolsRequest, error)
	grpc.ServerStream
}

type importServiceImportSchoolsServer struct {
	grpc.ServerStream
}

func (x *importServiceImportSchoolsServer) SendAndClose(m *ImportSchoolsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *importServiceImportSchoolsServer) Recv() (*ImportSchoolsRequest, error) {
	m := new(ImportSchoolsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ImportService_ImportPresetStudyPlans_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImportServiceServer).ImportPresetStudyPlans(&importServiceImportPresetStudyPlansServer{stream})
}

type ImportService_ImportPresetStudyPlansServer interface {
	SendAndClose(*ImportPresetStudyPlansResponse) error
	Recv() (*ImportPresetStudyPlansRequest, error)
	grpc.ServerStream
}

type importServiceImportPresetStudyPlansServer struct {
	grpc.ServerStream
}

func (x *importServiceImportPresetStudyPlansServer) SendAndClose(m *ImportPresetStudyPlansResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *importServiceImportPresetStudyPlansServer) Recv() (*ImportPresetStudyPlansRequest, error) {
	m := new(ImportPresetStudyPlansRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ImportService_ImportCourses_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImportServiceServer).ImportCourses(&importServiceImportCoursesServer{stream})
}

type ImportService_ImportCoursesServer interface {
	SendAndClose(*ImportCoursesResponse) error
	Recv() (*ImportCoursesRequest, error)
	grpc.ServerStream
}

type importServiceImportCoursesServer struct {
	grpc.ServerStream
}

func (x *importServiceImportCoursesServer) SendAndClose(m *ImportCoursesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *importServiceImportCoursesServer) Recv() (*ImportCoursesRequest, error) {
	m := new(ImportCoursesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ImportService_ImportChapters_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImportServiceServer).ImportChapters(&importServiceImportChaptersServer{stream})
}

type ImportService_ImportChaptersServer interface {
	SendAndClose(*ImportChaptersResponse) error
	Recv() (*ImportChaptersRequest, error)
	grpc.ServerStream
}

type importServiceImportChaptersServer struct {
	grpc.ServerStream
}

func (x *importServiceImportChaptersServer) SendAndClose(m *ImportChaptersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *importServiceImportChaptersServer) Recv() (*ImportChaptersRequest, error) {
	m := new(ImportChaptersRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ImportService_ImportBooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImportServiceServer).ImportBooks(&importServiceImportBooksServer{stream})
}

type ImportService_ImportBooksServer interface {
	SendAndClose(*ImportBooksResponse) error
	Recv() (*ImportBooksRequest, error)
	grpc.ServerStream
}

type importServiceImportBooksServer struct {
	grpc.ServerStream
}

func (x *importServiceImportBooksServer) SendAndClose(m *ImportBooksResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *importServiceImportBooksServer) Recv() (*ImportBooksRequest, error) {
	m := new(ImportBooksRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ImportService_ImportTopics_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImportServiceServer).ImportTopics(&importServiceImportTopicsServer{stream})
}

type ImportService_ImportTopicsServer interface {
	SendAndClose(*ImportTopicsResponse) error
	Recv() (*ImportTopicsRequest, error)
	grpc.ServerStream
}

type importServiceImportTopicsServer struct {
	grpc.ServerStream
}

func (x *importServiceImportTopicsServer) SendAndClose(m *ImportTopicsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *importServiceImportTopicsServer) Recv() (*ImportTopicsRequest, error) {
	m := new(ImportTopicsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ImportService_ImportLearningObjectives_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImportServiceServer).ImportLearningObjectives(&importServiceImportLearningObjectivesServer{stream})
}

type ImportService_ImportLearningObjectivesServer interface {
	SendAndClose(*ImportLearningObjectivesResponse) error
	Recv() (*ImportLearningObjectivesRequest, error)
	grpc.ServerStream
}

type importServiceImportLearningObjectivesServer struct {
	grpc.ServerStream
}

func (x *importServiceImportLearningObjectivesServer) SendAndClose(m *ImportLearningObjectivesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *importServiceImportLearningObjectivesServer) Recv() (*ImportLearningObjectivesRequest, error) {
	m := new(ImportLearningObjectivesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ImportService_ImportQuizzes_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImportServiceServer).ImportQuizzes(&importServiceImportQuizzesServer{stream})
}

type ImportService_ImportQuizzesServer interface {
	SendAndClose(*ImportQuizzesResponse) error
	Recv() (*ImportQuizzesRequest, error)
	grpc.ServerStream
}

type importServiceImportQuizzesServer struct {
	grpc.ServerStream
}

func (x *importServiceImportQuizzesServer) SendAndClose(m *ImportQuizzesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *importServiceImportQuizzesServer) Recv() (*ImportQuizzesRequest, error) {
	m := new(ImportQuizzesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ImportService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yasuo.v1.ImportService",
	HandlerType: (*ImportServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ImportSchools",
			Handler:       _ImportService_ImportSchools_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ImportPresetStudyPlans",
			Handler:       _ImportService_ImportPresetStudyPlans_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ImportCourses",
			Handler:       _ImportService_ImportCourses_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ImportChapters",
			Handler:       _ImportService_ImportChapters_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ImportBooks",
			Handler:       _ImportService_ImportBooks_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ImportTopics",
			Handler:       _ImportService_ImportTopics_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ImportLearningObjectives",
			Handler:       _ImportService_ImportLearningObjectives_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ImportQuizzes",
			Handler:       _ImportService_ImportQuizzes_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "yasuo/v1/imports.proto",
}
