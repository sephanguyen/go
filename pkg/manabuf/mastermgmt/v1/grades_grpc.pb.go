// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GradeServiceClient is the client API for GradeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GradeServiceClient interface {
	ImportGrades(ctx context.Context, in *ImportGradesRequest, opts ...grpc.CallOption) (*ImportGradesResponse, error)
	ExportGrades(ctx context.Context, in *ExportGradesRequest, opts ...grpc.CallOption) (*ExportGradesResponse, error)
}

type gradeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGradeServiceClient(cc grpc.ClientConnInterface) GradeServiceClient {
	return &gradeServiceClient{cc}
}

func (c *gradeServiceClient) ImportGrades(ctx context.Context, in *ImportGradesRequest, opts ...grpc.CallOption) (*ImportGradesResponse, error) {
	out := new(ImportGradesResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.GradeService/ImportGrades", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradeServiceClient) ExportGrades(ctx context.Context, in *ExportGradesRequest, opts ...grpc.CallOption) (*ExportGradesResponse, error) {
	out := new(ExportGradesResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.GradeService/ExportGrades", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GradeServiceServer is the server API for GradeService service.
// All implementations should embed UnimplementedGradeServiceServer
// for forward compatibility
type GradeServiceServer interface {
	ImportGrades(context.Context, *ImportGradesRequest) (*ImportGradesResponse, error)
	ExportGrades(context.Context, *ExportGradesRequest) (*ExportGradesResponse, error)
}

// UnimplementedGradeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGradeServiceServer struct {
}

func (UnimplementedGradeServiceServer) ImportGrades(context.Context, *ImportGradesRequest) (*ImportGradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportGrades not implemented")
}
func (UnimplementedGradeServiceServer) ExportGrades(context.Context, *ExportGradesRequest) (*ExportGradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportGrades not implemented")
}

// UnsafeGradeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GradeServiceServer will
// result in compilation errors.
type UnsafeGradeServiceServer interface {
	mustEmbedUnimplementedGradeServiceServer()
}

func RegisterGradeServiceServer(s grpc.ServiceRegistrar, srv GradeServiceServer) {
	s.RegisterService(&_GradeService_serviceDesc, srv)
}

func _GradeService_ImportGrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportGradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradeServiceServer).ImportGrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.GradeService/ImportGrades",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradeServiceServer).ImportGrades(ctx, req.(*ImportGradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GradeService_ExportGrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportGradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradeServiceServer).ExportGrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.GradeService/ExportGrades",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradeServiceServer).ExportGrades(ctx, req.(*ExportGradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GradeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mastermgmt.v1.GradeService",
	HandlerType: (*GradeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportGrades",
			Handler:    _GradeService_ImportGrades_Handler,
		},
		{
			MethodName: "ExportGrades",
			Handler:    _GradeService_ExportGrades_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mastermgmt/v1/grades.proto",
}
