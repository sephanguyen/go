// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// WorkingHoursServiceClient is the client API for WorkingHoursService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkingHoursServiceClient interface {
	ImportWorkingHours(ctx context.Context, in *ImportWorkingHoursRequest, opts ...grpc.CallOption) (*ImportWorkingHoursResponse, error)
}

type workingHoursServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkingHoursServiceClient(cc grpc.ClientConnInterface) WorkingHoursServiceClient {
	return &workingHoursServiceClient{cc}
}

func (c *workingHoursServiceClient) ImportWorkingHours(ctx context.Context, in *ImportWorkingHoursRequest, opts ...grpc.CallOption) (*ImportWorkingHoursResponse, error) {
	out := new(ImportWorkingHoursResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.WorkingHoursService/ImportWorkingHours", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkingHoursServiceServer is the server API for WorkingHoursService service.
// All implementations should embed UnimplementedWorkingHoursServiceServer
// for forward compatibility
type WorkingHoursServiceServer interface {
	ImportWorkingHours(context.Context, *ImportWorkingHoursRequest) (*ImportWorkingHoursResponse, error)
}

// UnimplementedWorkingHoursServiceServer should be embedded to have forward compatible implementations.
type UnimplementedWorkingHoursServiceServer struct {
}

func (UnimplementedWorkingHoursServiceServer) ImportWorkingHours(context.Context, *ImportWorkingHoursRequest) (*ImportWorkingHoursResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportWorkingHours not implemented")
}

// UnsafeWorkingHoursServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkingHoursServiceServer will
// result in compilation errors.
type UnsafeWorkingHoursServiceServer interface {
	mustEmbedUnimplementedWorkingHoursServiceServer()
}

func RegisterWorkingHoursServiceServer(s grpc.ServiceRegistrar, srv WorkingHoursServiceServer) {
	s.RegisterService(&_WorkingHoursService_serviceDesc, srv)
}

func _WorkingHoursService_ImportWorkingHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportWorkingHoursRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkingHoursServiceServer).ImportWorkingHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.WorkingHoursService/ImportWorkingHours",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkingHoursServiceServer).ImportWorkingHours(ctx, req.(*ImportWorkingHoursRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkingHoursService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mastermgmt.v1.WorkingHoursService",
	HandlerType: (*WorkingHoursServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportWorkingHours",
			Handler:    _WorkingHoursService_ImportWorkingHours_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mastermgmt/v1/wokring_hours.proto",
}
