// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CourseTypeServiceClient is the client API for CourseTypeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourseTypeServiceClient interface {
	ImportCourseTypes(ctx context.Context, in *ImportCourseTypesRequest, opts ...grpc.CallOption) (*ImportCourseTypesResponse, error)
}

type courseTypeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseTypeServiceClient(cc grpc.ClientConnInterface) CourseTypeServiceClient {
	return &courseTypeServiceClient{cc}
}

func (c *courseTypeServiceClient) ImportCourseTypes(ctx context.Context, in *ImportCourseTypesRequest, opts ...grpc.CallOption) (*ImportCourseTypesResponse, error) {
	out := new(ImportCourseTypesResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.CourseTypeService/ImportCourseTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseTypeServiceServer is the server API for CourseTypeService service.
// All implementations should embed UnimplementedCourseTypeServiceServer
// for forward compatibility
type CourseTypeServiceServer interface {
	ImportCourseTypes(context.Context, *ImportCourseTypesRequest) (*ImportCourseTypesResponse, error)
}

// UnimplementedCourseTypeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCourseTypeServiceServer struct {
}

func (UnimplementedCourseTypeServiceServer) ImportCourseTypes(context.Context, *ImportCourseTypesRequest) (*ImportCourseTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportCourseTypes not implemented")
}

// UnsafeCourseTypeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseTypeServiceServer will
// result in compilation errors.
type UnsafeCourseTypeServiceServer interface {
	mustEmbedUnimplementedCourseTypeServiceServer()
}

func RegisterCourseTypeServiceServer(s grpc.ServiceRegistrar, srv CourseTypeServiceServer) {
	s.RegisterService(&_CourseTypeService_serviceDesc, srv)
}

func _CourseTypeService_ImportCourseTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportCourseTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseTypeServiceServer).ImportCourseTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.CourseTypeService/ImportCourseTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseTypeServiceServer).ImportCourseTypes(ctx, req.(*ImportCourseTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CourseTypeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mastermgmt.v1.CourseTypeService",
	HandlerType: (*CourseTypeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportCourseTypes",
			Handler:    _CourseTypeService_ImportCourseTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mastermgmt/v1/course_type.proto",
}
