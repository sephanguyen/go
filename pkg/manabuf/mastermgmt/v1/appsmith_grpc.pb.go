// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AppsmithServiceClient is the client API for AppsmithService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppsmithServiceClient interface {
	GetPageInfoBySlug(ctx context.Context, in *GetPageInfoBySlugRequest, opts ...grpc.CallOption) (*GetPageInfoBySlugResponse, error)
	GetSchemaByWorkspaceID(ctx context.Context, in *GetSchemaNameByWorkspaceIDRequest, opts ...grpc.CallOption) (*GetSchemaNameByWorkspaceIDResponse, error)
}

type appsmithServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppsmithServiceClient(cc grpc.ClientConnInterface) AppsmithServiceClient {
	return &appsmithServiceClient{cc}
}

func (c *appsmithServiceClient) GetPageInfoBySlug(ctx context.Context, in *GetPageInfoBySlugRequest, opts ...grpc.CallOption) (*GetPageInfoBySlugResponse, error) {
	out := new(GetPageInfoBySlugResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.AppsmithService/GetPageInfoBySlug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsmithServiceClient) GetSchemaByWorkspaceID(ctx context.Context, in *GetSchemaNameByWorkspaceIDRequest, opts ...grpc.CallOption) (*GetSchemaNameByWorkspaceIDResponse, error) {
	out := new(GetSchemaNameByWorkspaceIDResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.AppsmithService/GetSchemaByWorkspaceID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppsmithServiceServer is the server API for AppsmithService service.
// All implementations should embed UnimplementedAppsmithServiceServer
// for forward compatibility
type AppsmithServiceServer interface {
	GetPageInfoBySlug(context.Context, *GetPageInfoBySlugRequest) (*GetPageInfoBySlugResponse, error)
	GetSchemaByWorkspaceID(context.Context, *GetSchemaNameByWorkspaceIDRequest) (*GetSchemaNameByWorkspaceIDResponse, error)
}

// UnimplementedAppsmithServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAppsmithServiceServer struct {
}

func (UnimplementedAppsmithServiceServer) GetPageInfoBySlug(context.Context, *GetPageInfoBySlugRequest) (*GetPageInfoBySlugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPageInfoBySlug not implemented")
}
func (UnimplementedAppsmithServiceServer) GetSchemaByWorkspaceID(context.Context, *GetSchemaNameByWorkspaceIDRequest) (*GetSchemaNameByWorkspaceIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchemaByWorkspaceID not implemented")
}

// UnsafeAppsmithServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppsmithServiceServer will
// result in compilation errors.
type UnsafeAppsmithServiceServer interface {
	mustEmbedUnimplementedAppsmithServiceServer()
}

func RegisterAppsmithServiceServer(s grpc.ServiceRegistrar, srv AppsmithServiceServer) {
	s.RegisterService(&_AppsmithService_serviceDesc, srv)
}

func _AppsmithService_GetPageInfoBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPageInfoBySlugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsmithServiceServer).GetPageInfoBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.AppsmithService/GetPageInfoBySlug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsmithServiceServer).GetPageInfoBySlug(ctx, req.(*GetPageInfoBySlugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppsmithService_GetSchemaByWorkspaceID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemaNameByWorkspaceIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsmithServiceServer).GetSchemaByWorkspaceID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.AppsmithService/GetSchemaByWorkspaceID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsmithServiceServer).GetSchemaByWorkspaceID(ctx, req.(*GetSchemaNameByWorkspaceIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AppsmithService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mastermgmt.v1.AppsmithService",
	HandlerType: (*AppsmithServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPageInfoBySlug",
			Handler:    _AppsmithService_GetPageInfoBySlug_Handler,
		},
		{
			MethodName: "GetSchemaByWorkspaceID",
			Handler:    _AppsmithService_GetSchemaByWorkspaceID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mastermgmt/v1/appsmith.proto",
}
