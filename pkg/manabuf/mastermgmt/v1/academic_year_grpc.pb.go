// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AcademicYearServiceClient is the client API for AcademicYearService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AcademicYearServiceClient interface {
	ImportAcademicCalendar(ctx context.Context, in *ImportAcademicCalendarRequest, opts ...grpc.CallOption) (*ImportAcademicCalendarResponse, error)
	ExportAcademicCalendar(ctx context.Context, in *ExportAcademicCalendarRequest, opts ...grpc.CallOption) (*ExportAcademicCalendarResponse, error)
	RetrieveLocationsForAcademic(ctx context.Context, in *RetrieveLocationsForAcademicRequest, opts ...grpc.CallOption) (*RetrieveLocationsForAcademicResponse, error)
	RetrieveLocationsByLocationTypeLevelConfig(ctx context.Context, in *RetrieveLocationsByLocationTypeLevelConfigRequest, opts ...grpc.CallOption) (*RetrieveLocationsByLocationTypeLevelConfigResponse, error)
}

type academicYearServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAcademicYearServiceClient(cc grpc.ClientConnInterface) AcademicYearServiceClient {
	return &academicYearServiceClient{cc}
}

func (c *academicYearServiceClient) ImportAcademicCalendar(ctx context.Context, in *ImportAcademicCalendarRequest, opts ...grpc.CallOption) (*ImportAcademicCalendarResponse, error) {
	out := new(ImportAcademicCalendarResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.AcademicYearService/ImportAcademicCalendar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *academicYearServiceClient) ExportAcademicCalendar(ctx context.Context, in *ExportAcademicCalendarRequest, opts ...grpc.CallOption) (*ExportAcademicCalendarResponse, error) {
	out := new(ExportAcademicCalendarResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.AcademicYearService/ExportAcademicCalendar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *academicYearServiceClient) RetrieveLocationsForAcademic(ctx context.Context, in *RetrieveLocationsForAcademicRequest, opts ...grpc.CallOption) (*RetrieveLocationsForAcademicResponse, error) {
	out := new(RetrieveLocationsForAcademicResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.AcademicYearService/RetrieveLocationsForAcademic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *academicYearServiceClient) RetrieveLocationsByLocationTypeLevelConfig(ctx context.Context, in *RetrieveLocationsByLocationTypeLevelConfigRequest, opts ...grpc.CallOption) (*RetrieveLocationsByLocationTypeLevelConfigResponse, error) {
	out := new(RetrieveLocationsByLocationTypeLevelConfigResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.AcademicYearService/RetrieveLocationsByLocationTypeLevelConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AcademicYearServiceServer is the server API for AcademicYearService service.
// All implementations should embed UnimplementedAcademicYearServiceServer
// for forward compatibility
type AcademicYearServiceServer interface {
	ImportAcademicCalendar(context.Context, *ImportAcademicCalendarRequest) (*ImportAcademicCalendarResponse, error)
	ExportAcademicCalendar(context.Context, *ExportAcademicCalendarRequest) (*ExportAcademicCalendarResponse, error)
	RetrieveLocationsForAcademic(context.Context, *RetrieveLocationsForAcademicRequest) (*RetrieveLocationsForAcademicResponse, error)
	RetrieveLocationsByLocationTypeLevelConfig(context.Context, *RetrieveLocationsByLocationTypeLevelConfigRequest) (*RetrieveLocationsByLocationTypeLevelConfigResponse, error)
}

// UnimplementedAcademicYearServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAcademicYearServiceServer struct {
}

func (UnimplementedAcademicYearServiceServer) ImportAcademicCalendar(context.Context, *ImportAcademicCalendarRequest) (*ImportAcademicCalendarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportAcademicCalendar not implemented")
}
func (UnimplementedAcademicYearServiceServer) ExportAcademicCalendar(context.Context, *ExportAcademicCalendarRequest) (*ExportAcademicCalendarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportAcademicCalendar not implemented")
}
func (UnimplementedAcademicYearServiceServer) RetrieveLocationsForAcademic(context.Context, *RetrieveLocationsForAcademicRequest) (*RetrieveLocationsForAcademicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveLocationsForAcademic not implemented")
}
func (UnimplementedAcademicYearServiceServer) RetrieveLocationsByLocationTypeLevelConfig(context.Context, *RetrieveLocationsByLocationTypeLevelConfigRequest) (*RetrieveLocationsByLocationTypeLevelConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveLocationsByLocationTypeLevelConfig not implemented")
}

// UnsafeAcademicYearServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AcademicYearServiceServer will
// result in compilation errors.
type UnsafeAcademicYearServiceServer interface {
	mustEmbedUnimplementedAcademicYearServiceServer()
}

func RegisterAcademicYearServiceServer(s grpc.ServiceRegistrar, srv AcademicYearServiceServer) {
	s.RegisterService(&_AcademicYearService_serviceDesc, srv)
}

func _AcademicYearService_ImportAcademicCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportAcademicCalendarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcademicYearServiceServer).ImportAcademicCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.AcademicYearService/ImportAcademicCalendar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcademicYearServiceServer).ImportAcademicCalendar(ctx, req.(*ImportAcademicCalendarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AcademicYearService_ExportAcademicCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportAcademicCalendarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcademicYearServiceServer).ExportAcademicCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.AcademicYearService/ExportAcademicCalendar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcademicYearServiceServer).ExportAcademicCalendar(ctx, req.(*ExportAcademicCalendarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AcademicYearService_RetrieveLocationsForAcademic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveLocationsForAcademicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcademicYearServiceServer).RetrieveLocationsForAcademic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.AcademicYearService/RetrieveLocationsForAcademic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcademicYearServiceServer).RetrieveLocationsForAcademic(ctx, req.(*RetrieveLocationsForAcademicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AcademicYearService_RetrieveLocationsByLocationTypeLevelConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveLocationsByLocationTypeLevelConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcademicYearServiceServer).RetrieveLocationsByLocationTypeLevelConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.AcademicYearService/RetrieveLocationsByLocationTypeLevelConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcademicYearServiceServer).RetrieveLocationsByLocationTypeLevelConfig(ctx, req.(*RetrieveLocationsByLocationTypeLevelConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AcademicYearService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mastermgmt.v1.AcademicYearService",
	HandlerType: (*AcademicYearServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportAcademicCalendar",
			Handler:    _AcademicYearService_ImportAcademicCalendar_Handler,
		},
		{
			MethodName: "ExportAcademicCalendar",
			Handler:    _AcademicYearService_ExportAcademicCalendar_Handler,
		},
		{
			MethodName: "RetrieveLocationsForAcademic",
			Handler:    _AcademicYearService_RetrieveLocationsForAcademic_Handler,
		},
		{
			MethodName: "RetrieveLocationsByLocationTypeLevelConfig",
			Handler:    _AcademicYearService_RetrieveLocationsByLocationTypeLevelConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mastermgmt/v1/academic_year.proto",
}
