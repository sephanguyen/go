// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SubjectServiceClient is the client API for SubjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubjectServiceClient interface {
	ImportSubjects(ctx context.Context, in *ImportSubjectsRequest, opts ...grpc.CallOption) (*ImportSubjectsResponse, error)
	ExportSubjects(ctx context.Context, in *ExportSubjectsRequest, opts ...grpc.CallOption) (*ExportSubjectsResponse, error)
}

type subjectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubjectServiceClient(cc grpc.ClientConnInterface) SubjectServiceClient {
	return &subjectServiceClient{cc}
}

func (c *subjectServiceClient) ImportSubjects(ctx context.Context, in *ImportSubjectsRequest, opts ...grpc.CallOption) (*ImportSubjectsResponse, error) {
	out := new(ImportSubjectsResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.SubjectService/ImportSubjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectServiceClient) ExportSubjects(ctx context.Context, in *ExportSubjectsRequest, opts ...grpc.CallOption) (*ExportSubjectsResponse, error) {
	out := new(ExportSubjectsResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.SubjectService/ExportSubjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubjectServiceServer is the server API for SubjectService service.
// All implementations should embed UnimplementedSubjectServiceServer
// for forward compatibility
type SubjectServiceServer interface {
	ImportSubjects(context.Context, *ImportSubjectsRequest) (*ImportSubjectsResponse, error)
	ExportSubjects(context.Context, *ExportSubjectsRequest) (*ExportSubjectsResponse, error)
}

// UnimplementedSubjectServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSubjectServiceServer struct {
}

func (UnimplementedSubjectServiceServer) ImportSubjects(context.Context, *ImportSubjectsRequest) (*ImportSubjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportSubjects not implemented")
}
func (UnimplementedSubjectServiceServer) ExportSubjects(context.Context, *ExportSubjectsRequest) (*ExportSubjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportSubjects not implemented")
}

// UnsafeSubjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubjectServiceServer will
// result in compilation errors.
type UnsafeSubjectServiceServer interface {
	mustEmbedUnimplementedSubjectServiceServer()
}

func RegisterSubjectServiceServer(s grpc.ServiceRegistrar, srv SubjectServiceServer) {
	s.RegisterService(&_SubjectService_serviceDesc, srv)
}

func _SubjectService_ImportSubjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportSubjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectServiceServer).ImportSubjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.SubjectService/ImportSubjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectServiceServer).ImportSubjects(ctx, req.(*ImportSubjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubjectService_ExportSubjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportSubjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectServiceServer).ExportSubjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.SubjectService/ExportSubjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectServiceServer).ExportSubjects(ctx, req.(*ExportSubjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubjectService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mastermgmt.v1.SubjectService",
	HandlerType: (*SubjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportSubjects",
			Handler:    _SubjectService_ImportSubjects_Handler,
		},
		{
			MethodName: "ExportSubjects",
			Handler:    _SubjectService_ExportSubjects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mastermgmt/v1/subject.proto",
}
