// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CourseAccessPathServiceClient is the client API for CourseAccessPathService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourseAccessPathServiceClient interface {
	ImportCourseAccessPaths(ctx context.Context, in *ImportCourseAccessPathsRequest, opts ...grpc.CallOption) (*ImportCourseAccessPathsResponse, error)
	ExportCourseAccessPaths(ctx context.Context, in *ExportCourseAccessPathsRequest, opts ...grpc.CallOption) (*ExportCourseAccessPathsResponse, error)
}

type courseAccessPathServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseAccessPathServiceClient(cc grpc.ClientConnInterface) CourseAccessPathServiceClient {
	return &courseAccessPathServiceClient{cc}
}

func (c *courseAccessPathServiceClient) ImportCourseAccessPaths(ctx context.Context, in *ImportCourseAccessPathsRequest, opts ...grpc.CallOption) (*ImportCourseAccessPathsResponse, error) {
	out := new(ImportCourseAccessPathsResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.CourseAccessPathService/ImportCourseAccessPaths", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseAccessPathServiceClient) ExportCourseAccessPaths(ctx context.Context, in *ExportCourseAccessPathsRequest, opts ...grpc.CallOption) (*ExportCourseAccessPathsResponse, error) {
	out := new(ExportCourseAccessPathsResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.CourseAccessPathService/ExportCourseAccessPaths", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseAccessPathServiceServer is the server API for CourseAccessPathService service.
// All implementations should embed UnimplementedCourseAccessPathServiceServer
// for forward compatibility
type CourseAccessPathServiceServer interface {
	ImportCourseAccessPaths(context.Context, *ImportCourseAccessPathsRequest) (*ImportCourseAccessPathsResponse, error)
	ExportCourseAccessPaths(context.Context, *ExportCourseAccessPathsRequest) (*ExportCourseAccessPathsResponse, error)
}

// UnimplementedCourseAccessPathServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCourseAccessPathServiceServer struct {
}

func (UnimplementedCourseAccessPathServiceServer) ImportCourseAccessPaths(context.Context, *ImportCourseAccessPathsRequest) (*ImportCourseAccessPathsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportCourseAccessPaths not implemented")
}
func (UnimplementedCourseAccessPathServiceServer) ExportCourseAccessPaths(context.Context, *ExportCourseAccessPathsRequest) (*ExportCourseAccessPathsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportCourseAccessPaths not implemented")
}

// UnsafeCourseAccessPathServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseAccessPathServiceServer will
// result in compilation errors.
type UnsafeCourseAccessPathServiceServer interface {
	mustEmbedUnimplementedCourseAccessPathServiceServer()
}

func RegisterCourseAccessPathServiceServer(s grpc.ServiceRegistrar, srv CourseAccessPathServiceServer) {
	s.RegisterService(&_CourseAccessPathService_serviceDesc, srv)
}

func _CourseAccessPathService_ImportCourseAccessPaths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportCourseAccessPathsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseAccessPathServiceServer).ImportCourseAccessPaths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.CourseAccessPathService/ImportCourseAccessPaths",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseAccessPathServiceServer).ImportCourseAccessPaths(ctx, req.(*ImportCourseAccessPathsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseAccessPathService_ExportCourseAccessPaths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportCourseAccessPathsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseAccessPathServiceServer).ExportCourseAccessPaths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.CourseAccessPathService/ExportCourseAccessPaths",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseAccessPathServiceServer).ExportCourseAccessPaths(ctx, req.(*ExportCourseAccessPathsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CourseAccessPathService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mastermgmt.v1.CourseAccessPathService",
	HandlerType: (*CourseAccessPathServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportCourseAccessPaths",
			Handler:    _CourseAccessPathService_ImportCourseAccessPaths_Handler,
		},
		{
			MethodName: "ExportCourseAccessPaths",
			Handler:    _CourseAccessPathService_ExportCourseAccessPaths_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mastermgmt/v1/course_access_path.proto",
}
