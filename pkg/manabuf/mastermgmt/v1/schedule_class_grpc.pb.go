// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ScheduleClassServiceClient is the client API for ScheduleClassService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScheduleClassServiceClient interface {
	ScheduleStudentClass(ctx context.Context, in *ScheduleStudentClassRequest, opts ...grpc.CallOption) (*ScheduleStudentClassResponse, error)
	CancelScheduledStudentClass(ctx context.Context, in *CancelScheduledStudentClassRequest, opts ...grpc.CallOption) (*CancelScheduledStudentClassResponse, error)
	RetrieveScheduledStudentClass(ctx context.Context, in *RetrieveScheduledStudentClassRequest, opts ...grpc.CallOption) (*RetrieveScheduledStudentClassResponse, error)
	BulkAssignStudentsToClass(ctx context.Context, in *BulkAssignStudentsToClassRequest, opts ...grpc.CallOption) (*BulkAssignStudentsToClassResponse, error)
}

type scheduleClassServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScheduleClassServiceClient(cc grpc.ClientConnInterface) ScheduleClassServiceClient {
	return &scheduleClassServiceClient{cc}
}

func (c *scheduleClassServiceClient) ScheduleStudentClass(ctx context.Context, in *ScheduleStudentClassRequest, opts ...grpc.CallOption) (*ScheduleStudentClassResponse, error) {
	out := new(ScheduleStudentClassResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.ScheduleClassService/ScheduleStudentClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleClassServiceClient) CancelScheduledStudentClass(ctx context.Context, in *CancelScheduledStudentClassRequest, opts ...grpc.CallOption) (*CancelScheduledStudentClassResponse, error) {
	out := new(CancelScheduledStudentClassResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.ScheduleClassService/CancelScheduledStudentClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleClassServiceClient) RetrieveScheduledStudentClass(ctx context.Context, in *RetrieveScheduledStudentClassRequest, opts ...grpc.CallOption) (*RetrieveScheduledStudentClassResponse, error) {
	out := new(RetrieveScheduledStudentClassResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.ScheduleClassService/RetrieveScheduledStudentClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleClassServiceClient) BulkAssignStudentsToClass(ctx context.Context, in *BulkAssignStudentsToClassRequest, opts ...grpc.CallOption) (*BulkAssignStudentsToClassResponse, error) {
	out := new(BulkAssignStudentsToClassResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.ScheduleClassService/BulkAssignStudentsToClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScheduleClassServiceServer is the server API for ScheduleClassService service.
// All implementations should embed UnimplementedScheduleClassServiceServer
// for forward compatibility
type ScheduleClassServiceServer interface {
	ScheduleStudentClass(context.Context, *ScheduleStudentClassRequest) (*ScheduleStudentClassResponse, error)
	CancelScheduledStudentClass(context.Context, *CancelScheduledStudentClassRequest) (*CancelScheduledStudentClassResponse, error)
	RetrieveScheduledStudentClass(context.Context, *RetrieveScheduledStudentClassRequest) (*RetrieveScheduledStudentClassResponse, error)
	BulkAssignStudentsToClass(context.Context, *BulkAssignStudentsToClassRequest) (*BulkAssignStudentsToClassResponse, error)
}

// UnimplementedScheduleClassServiceServer should be embedded to have forward compatible implementations.
type UnimplementedScheduleClassServiceServer struct {
}

func (UnimplementedScheduleClassServiceServer) ScheduleStudentClass(context.Context, *ScheduleStudentClassRequest) (*ScheduleStudentClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleStudentClass not implemented")
}
func (UnimplementedScheduleClassServiceServer) CancelScheduledStudentClass(context.Context, *CancelScheduledStudentClassRequest) (*CancelScheduledStudentClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelScheduledStudentClass not implemented")
}
func (UnimplementedScheduleClassServiceServer) RetrieveScheduledStudentClass(context.Context, *RetrieveScheduledStudentClassRequest) (*RetrieveScheduledStudentClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveScheduledStudentClass not implemented")
}
func (UnimplementedScheduleClassServiceServer) BulkAssignStudentsToClass(context.Context, *BulkAssignStudentsToClassRequest) (*BulkAssignStudentsToClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkAssignStudentsToClass not implemented")
}

// UnsafeScheduleClassServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScheduleClassServiceServer will
// result in compilation errors.
type UnsafeScheduleClassServiceServer interface {
	mustEmbedUnimplementedScheduleClassServiceServer()
}

func RegisterScheduleClassServiceServer(s grpc.ServiceRegistrar, srv ScheduleClassServiceServer) {
	s.RegisterService(&_ScheduleClassService_serviceDesc, srv)
}

func _ScheduleClassService_ScheduleStudentClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleStudentClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleClassServiceServer).ScheduleStudentClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.ScheduleClassService/ScheduleStudentClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleClassServiceServer).ScheduleStudentClass(ctx, req.(*ScheduleStudentClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleClassService_CancelScheduledStudentClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelScheduledStudentClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleClassServiceServer).CancelScheduledStudentClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.ScheduleClassService/CancelScheduledStudentClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleClassServiceServer).CancelScheduledStudentClass(ctx, req.(*CancelScheduledStudentClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleClassService_RetrieveScheduledStudentClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveScheduledStudentClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleClassServiceServer).RetrieveScheduledStudentClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.ScheduleClassService/RetrieveScheduledStudentClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleClassServiceServer).RetrieveScheduledStudentClass(ctx, req.(*RetrieveScheduledStudentClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleClassService_BulkAssignStudentsToClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkAssignStudentsToClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleClassServiceServer).BulkAssignStudentsToClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.ScheduleClassService/BulkAssignStudentsToClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleClassServiceServer).BulkAssignStudentsToClass(ctx, req.(*BulkAssignStudentsToClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ScheduleClassService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mastermgmt.v1.ScheduleClassService",
	HandlerType: (*ScheduleClassServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScheduleStudentClass",
			Handler:    _ScheduleClassService_ScheduleStudentClass_Handler,
		},
		{
			MethodName: "CancelScheduledStudentClass",
			Handler:    _ScheduleClassService_CancelScheduledStudentClass_Handler,
		},
		{
			MethodName: "RetrieveScheduledStudentClass",
			Handler:    _ScheduleClassService_RetrieveScheduledStudentClass_Handler,
		},
		{
			MethodName: "BulkAssignStudentsToClass",
			Handler:    _ScheduleClassService_BulkAssignStudentsToClass_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mastermgmt/v1/schedule_class.proto",
}
