// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LocationManagementGRPCServiceClient is the client API for LocationManagementGRPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocationManagementGRPCServiceClient interface {
	ImportLocation(ctx context.Context, in *ImportLocationRequest, opts ...grpc.CallOption) (*ImportLocationResponse, error)
	ImportLocationType(ctx context.Context, in *ImportLocationTypeRequest, opts ...grpc.CallOption) (*ImportLocationTypeResponse, error)
	ImportLocationV2(ctx context.Context, in *ImportLocationV2Request, opts ...grpc.CallOption) (*ImportLocationV2Response, error)
	ImportLocationTypeV2(ctx context.Context, in *ImportLocationTypeV2Request, opts ...grpc.CallOption) (*ImportLocationTypeV2Response, error)
}

type locationManagementGRPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLocationManagementGRPCServiceClient(cc grpc.ClientConnInterface) LocationManagementGRPCServiceClient {
	return &locationManagementGRPCServiceClient{cc}
}

func (c *locationManagementGRPCServiceClient) ImportLocation(ctx context.Context, in *ImportLocationRequest, opts ...grpc.CallOption) (*ImportLocationResponse, error) {
	out := new(ImportLocationResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.LocationManagementGRPCService/ImportLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationManagementGRPCServiceClient) ImportLocationType(ctx context.Context, in *ImportLocationTypeRequest, opts ...grpc.CallOption) (*ImportLocationTypeResponse, error) {
	out := new(ImportLocationTypeResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.LocationManagementGRPCService/ImportLocationType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationManagementGRPCServiceClient) ImportLocationV2(ctx context.Context, in *ImportLocationV2Request, opts ...grpc.CallOption) (*ImportLocationV2Response, error) {
	out := new(ImportLocationV2Response)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.LocationManagementGRPCService/ImportLocationV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationManagementGRPCServiceClient) ImportLocationTypeV2(ctx context.Context, in *ImportLocationTypeV2Request, opts ...grpc.CallOption) (*ImportLocationTypeV2Response, error) {
	out := new(ImportLocationTypeV2Response)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.LocationManagementGRPCService/ImportLocationTypeV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocationManagementGRPCServiceServer is the server API for LocationManagementGRPCService service.
// All implementations should embed UnimplementedLocationManagementGRPCServiceServer
// for forward compatibility
type LocationManagementGRPCServiceServer interface {
	ImportLocation(context.Context, *ImportLocationRequest) (*ImportLocationResponse, error)
	ImportLocationType(context.Context, *ImportLocationTypeRequest) (*ImportLocationTypeResponse, error)
	ImportLocationV2(context.Context, *ImportLocationV2Request) (*ImportLocationV2Response, error)
	ImportLocationTypeV2(context.Context, *ImportLocationTypeV2Request) (*ImportLocationTypeV2Response, error)
}

// UnimplementedLocationManagementGRPCServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLocationManagementGRPCServiceServer struct {
}

func (UnimplementedLocationManagementGRPCServiceServer) ImportLocation(context.Context, *ImportLocationRequest) (*ImportLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportLocation not implemented")
}
func (UnimplementedLocationManagementGRPCServiceServer) ImportLocationType(context.Context, *ImportLocationTypeRequest) (*ImportLocationTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportLocationType not implemented")
}
func (UnimplementedLocationManagementGRPCServiceServer) ImportLocationV2(context.Context, *ImportLocationV2Request) (*ImportLocationV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportLocationV2 not implemented")
}
func (UnimplementedLocationManagementGRPCServiceServer) ImportLocationTypeV2(context.Context, *ImportLocationTypeV2Request) (*ImportLocationTypeV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportLocationTypeV2 not implemented")
}

// UnsafeLocationManagementGRPCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocationManagementGRPCServiceServer will
// result in compilation errors.
type UnsafeLocationManagementGRPCServiceServer interface {
	mustEmbedUnimplementedLocationManagementGRPCServiceServer()
}

func RegisterLocationManagementGRPCServiceServer(s grpc.ServiceRegistrar, srv LocationManagementGRPCServiceServer) {
	s.RegisterService(&_LocationManagementGRPCService_serviceDesc, srv)
}

func _LocationManagementGRPCService_ImportLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationManagementGRPCServiceServer).ImportLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.LocationManagementGRPCService/ImportLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationManagementGRPCServiceServer).ImportLocation(ctx, req.(*ImportLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationManagementGRPCService_ImportLocationType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportLocationTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationManagementGRPCServiceServer).ImportLocationType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.LocationManagementGRPCService/ImportLocationType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationManagementGRPCServiceServer).ImportLocationType(ctx, req.(*ImportLocationTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationManagementGRPCService_ImportLocationV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportLocationV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationManagementGRPCServiceServer).ImportLocationV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.LocationManagementGRPCService/ImportLocationV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationManagementGRPCServiceServer).ImportLocationV2(ctx, req.(*ImportLocationV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationManagementGRPCService_ImportLocationTypeV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportLocationTypeV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationManagementGRPCServiceServer).ImportLocationTypeV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.LocationManagementGRPCService/ImportLocationTypeV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationManagementGRPCServiceServer).ImportLocationTypeV2(ctx, req.(*ImportLocationTypeV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _LocationManagementGRPCService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mastermgmt.v1.LocationManagementGRPCService",
	HandlerType: (*LocationManagementGRPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportLocation",
			Handler:    _LocationManagementGRPCService_ImportLocation_Handler,
		},
		{
			MethodName: "ImportLocationType",
			Handler:    _LocationManagementGRPCService_ImportLocationType_Handler,
		},
		{
			MethodName: "ImportLocationV2",
			Handler:    _LocationManagementGRPCService_ImportLocationV2_Handler,
		},
		{
			MethodName: "ImportLocationTypeV2",
			Handler:    _LocationManagementGRPCService_ImportLocationTypeV2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mastermgmt/v1/masterdata.proto",
}

// MasterDataReaderServiceClient is the client API for MasterDataReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterDataReaderServiceClient interface {
	RetrieveLocations(ctx context.Context, in *RetrieveLocationsRequest, opts ...grpc.CallOption) (*RetrieveLocationsResponse, error)
	RetrieveLocationTypes(ctx context.Context, in *RetrieveLocationTypesRequest, opts ...grpc.CallOption) (*RetrieveLocationTypesResponse, error)
	RetrieveLocationTypesV2(ctx context.Context, in *RetrieveLocationTypesV2Request, opts ...grpc.CallOption) (*RetrieveLocationTypesV2Response, error)
	RetrieveLowestLevelLocations(ctx context.Context, in *RetrieveLowestLevelLocationsRequest, opts ...grpc.CallOption) (*RetrieveLowestLevelLocationsResponse, error)
	GetLocationTree(ctx context.Context, in *GetLocationTreeRequest, opts ...grpc.CallOption) (*GetLocationTreeResponse, error)
	ExportLocations(ctx context.Context, in *ExportLocationsRequest, opts ...grpc.CallOption) (*ExportLocationsResponse, error)
	ExportLocationTypes(ctx context.Context, in *ExportLocationTypesRequest, opts ...grpc.CallOption) (*ExportLocationTypesResponse, error)
}

type masterDataReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterDataReaderServiceClient(cc grpc.ClientConnInterface) MasterDataReaderServiceClient {
	return &masterDataReaderServiceClient{cc}
}

func (c *masterDataReaderServiceClient) RetrieveLocations(ctx context.Context, in *RetrieveLocationsRequest, opts ...grpc.CallOption) (*RetrieveLocationsResponse, error) {
	out := new(RetrieveLocationsResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.MasterDataReaderService/RetrieveLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDataReaderServiceClient) RetrieveLocationTypes(ctx context.Context, in *RetrieveLocationTypesRequest, opts ...grpc.CallOption) (*RetrieveLocationTypesResponse, error) {
	out := new(RetrieveLocationTypesResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.MasterDataReaderService/RetrieveLocationTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDataReaderServiceClient) RetrieveLocationTypesV2(ctx context.Context, in *RetrieveLocationTypesV2Request, opts ...grpc.CallOption) (*RetrieveLocationTypesV2Response, error) {
	out := new(RetrieveLocationTypesV2Response)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.MasterDataReaderService/RetrieveLocationTypesV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDataReaderServiceClient) RetrieveLowestLevelLocations(ctx context.Context, in *RetrieveLowestLevelLocationsRequest, opts ...grpc.CallOption) (*RetrieveLowestLevelLocationsResponse, error) {
	out := new(RetrieveLowestLevelLocationsResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.MasterDataReaderService/RetrieveLowestLevelLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDataReaderServiceClient) GetLocationTree(ctx context.Context, in *GetLocationTreeRequest, opts ...grpc.CallOption) (*GetLocationTreeResponse, error) {
	out := new(GetLocationTreeResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.MasterDataReaderService/GetLocationTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDataReaderServiceClient) ExportLocations(ctx context.Context, in *ExportLocationsRequest, opts ...grpc.CallOption) (*ExportLocationsResponse, error) {
	out := new(ExportLocationsResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.MasterDataReaderService/ExportLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDataReaderServiceClient) ExportLocationTypes(ctx context.Context, in *ExportLocationTypesRequest, opts ...grpc.CallOption) (*ExportLocationTypesResponse, error) {
	out := new(ExportLocationTypesResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.MasterDataReaderService/ExportLocationTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterDataReaderServiceServer is the server API for MasterDataReaderService service.
// All implementations should embed UnimplementedMasterDataReaderServiceServer
// for forward compatibility
type MasterDataReaderServiceServer interface {
	RetrieveLocations(context.Context, *RetrieveLocationsRequest) (*RetrieveLocationsResponse, error)
	RetrieveLocationTypes(context.Context, *RetrieveLocationTypesRequest) (*RetrieveLocationTypesResponse, error)
	RetrieveLocationTypesV2(context.Context, *RetrieveLocationTypesV2Request) (*RetrieveLocationTypesV2Response, error)
	RetrieveLowestLevelLocations(context.Context, *RetrieveLowestLevelLocationsRequest) (*RetrieveLowestLevelLocationsResponse, error)
	GetLocationTree(context.Context, *GetLocationTreeRequest) (*GetLocationTreeResponse, error)
	ExportLocations(context.Context, *ExportLocationsRequest) (*ExportLocationsResponse, error)
	ExportLocationTypes(context.Context, *ExportLocationTypesRequest) (*ExportLocationTypesResponse, error)
}

// UnimplementedMasterDataReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMasterDataReaderServiceServer struct {
}

func (UnimplementedMasterDataReaderServiceServer) RetrieveLocations(context.Context, *RetrieveLocationsRequest) (*RetrieveLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveLocations not implemented")
}
func (UnimplementedMasterDataReaderServiceServer) RetrieveLocationTypes(context.Context, *RetrieveLocationTypesRequest) (*RetrieveLocationTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveLocationTypes not implemented")
}
func (UnimplementedMasterDataReaderServiceServer) RetrieveLocationTypesV2(context.Context, *RetrieveLocationTypesV2Request) (*RetrieveLocationTypesV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveLocationTypesV2 not implemented")
}
func (UnimplementedMasterDataReaderServiceServer) RetrieveLowestLevelLocations(context.Context, *RetrieveLowestLevelLocationsRequest) (*RetrieveLowestLevelLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveLowestLevelLocations not implemented")
}
func (UnimplementedMasterDataReaderServiceServer) GetLocationTree(context.Context, *GetLocationTreeRequest) (*GetLocationTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocationTree not implemented")
}
func (UnimplementedMasterDataReaderServiceServer) ExportLocations(context.Context, *ExportLocationsRequest) (*ExportLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportLocations not implemented")
}
func (UnimplementedMasterDataReaderServiceServer) ExportLocationTypes(context.Context, *ExportLocationTypesRequest) (*ExportLocationTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportLocationTypes not implemented")
}

// UnsafeMasterDataReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterDataReaderServiceServer will
// result in compilation errors.
type UnsafeMasterDataReaderServiceServer interface {
	mustEmbedUnimplementedMasterDataReaderServiceServer()
}

func RegisterMasterDataReaderServiceServer(s grpc.ServiceRegistrar, srv MasterDataReaderServiceServer) {
	s.RegisterService(&_MasterDataReaderService_serviceDesc, srv)
}

func _MasterDataReaderService_RetrieveLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDataReaderServiceServer).RetrieveLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.MasterDataReaderService/RetrieveLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDataReaderServiceServer).RetrieveLocations(ctx, req.(*RetrieveLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDataReaderService_RetrieveLocationTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveLocationTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDataReaderServiceServer).RetrieveLocationTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.MasterDataReaderService/RetrieveLocationTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDataReaderServiceServer).RetrieveLocationTypes(ctx, req.(*RetrieveLocationTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDataReaderService_RetrieveLocationTypesV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveLocationTypesV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDataReaderServiceServer).RetrieveLocationTypesV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.MasterDataReaderService/RetrieveLocationTypesV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDataReaderServiceServer).RetrieveLocationTypesV2(ctx, req.(*RetrieveLocationTypesV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDataReaderService_RetrieveLowestLevelLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveLowestLevelLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDataReaderServiceServer).RetrieveLowestLevelLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.MasterDataReaderService/RetrieveLowestLevelLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDataReaderServiceServer).RetrieveLowestLevelLocations(ctx, req.(*RetrieveLowestLevelLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDataReaderService_GetLocationTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocationTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDataReaderServiceServer).GetLocationTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.MasterDataReaderService/GetLocationTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDataReaderServiceServer).GetLocationTree(ctx, req.(*GetLocationTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDataReaderService_ExportLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDataReaderServiceServer).ExportLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.MasterDataReaderService/ExportLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDataReaderServiceServer).ExportLocations(ctx, req.(*ExportLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDataReaderService_ExportLocationTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportLocationTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDataReaderServiceServer).ExportLocationTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.MasterDataReaderService/ExportLocationTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDataReaderServiceServer).ExportLocationTypes(ctx, req.(*ExportLocationTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MasterDataReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mastermgmt.v1.MasterDataReaderService",
	HandlerType: (*MasterDataReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveLocations",
			Handler:    _MasterDataReaderService_RetrieveLocations_Handler,
		},
		{
			MethodName: "RetrieveLocationTypes",
			Handler:    _MasterDataReaderService_RetrieveLocationTypes_Handler,
		},
		{
			MethodName: "RetrieveLocationTypesV2",
			Handler:    _MasterDataReaderService_RetrieveLocationTypesV2_Handler,
		},
		{
			MethodName: "RetrieveLowestLevelLocations",
			Handler:    _MasterDataReaderService_RetrieveLowestLevelLocations_Handler,
		},
		{
			MethodName: "GetLocationTree",
			Handler:    _MasterDataReaderService_GetLocationTree_Handler,
		},
		{
			MethodName: "ExportLocations",
			Handler:    _MasterDataReaderService_ExportLocations_Handler,
		},
		{
			MethodName: "ExportLocationTypes",
			Handler:    _MasterDataReaderService_ExportLocationTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mastermgmt/v1/masterdata.proto",
}
