// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TimeSlotServiceClient is the client API for TimeSlotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimeSlotServiceClient interface {
	ImportTimeSlots(ctx context.Context, in *ImportTimeSlotRequest, opts ...grpc.CallOption) (*ImportTimeSlotResponse, error)
}

type timeSlotServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTimeSlotServiceClient(cc grpc.ClientConnInterface) TimeSlotServiceClient {
	return &timeSlotServiceClient{cc}
}

func (c *timeSlotServiceClient) ImportTimeSlots(ctx context.Context, in *ImportTimeSlotRequest, opts ...grpc.CallOption) (*ImportTimeSlotResponse, error) {
	out := new(ImportTimeSlotResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.TimeSlotService/ImportTimeSlots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimeSlotServiceServer is the server API for TimeSlotService service.
// All implementations should embed UnimplementedTimeSlotServiceServer
// for forward compatibility
type TimeSlotServiceServer interface {
	ImportTimeSlots(context.Context, *ImportTimeSlotRequest) (*ImportTimeSlotResponse, error)
}

// UnimplementedTimeSlotServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTimeSlotServiceServer struct {
}

func (UnimplementedTimeSlotServiceServer) ImportTimeSlots(context.Context, *ImportTimeSlotRequest) (*ImportTimeSlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportTimeSlots not implemented")
}

// UnsafeTimeSlotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimeSlotServiceServer will
// result in compilation errors.
type UnsafeTimeSlotServiceServer interface {
	mustEmbedUnimplementedTimeSlotServiceServer()
}

func RegisterTimeSlotServiceServer(s grpc.ServiceRegistrar, srv TimeSlotServiceServer) {
	s.RegisterService(&_TimeSlotService_serviceDesc, srv)
}

func _TimeSlotService_ImportTimeSlots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportTimeSlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeSlotServiceServer).ImportTimeSlots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.TimeSlotService/ImportTimeSlots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeSlotServiceServer).ImportTimeSlots(ctx, req.(*ImportTimeSlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TimeSlotService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mastermgmt.v1.TimeSlotService",
	HandlerType: (*TimeSlotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportTimeSlots",
			Handler:    _TimeSlotService_ImportTimeSlots_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mastermgmt/v1/time_slot.proto",
}
