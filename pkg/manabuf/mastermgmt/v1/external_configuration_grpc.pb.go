// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ExternalConfigurationServiceClient is the client API for ExternalConfigurationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalConfigurationServiceClient interface {
	GetExternalConfigurationByKey(ctx context.Context, in *GetExternalConfigurationByKeyRequest, opts ...grpc.CallOption) (*GetExternalConfigurationByKeyResponse, error)
	GetExternalConfigurations(ctx context.Context, in *GetExternalConfigurationsRequest, opts ...grpc.CallOption) (*GetExternalConfigurationsResponse, error)
	CreateMultiConfigurations(ctx context.Context, in *CreateMultiConfigurationsRequest, opts ...grpc.CallOption) (*CreateMultiConfigurationsResponse, error)
	// Deprecated: please use GetConfigurationByKeysAndLocationsV2 which support optional locations
	GetConfigurationByKeysAndLocations(ctx context.Context, in *GetConfigurationByKeysAndLocationsRequest, opts ...grpc.CallOption) (*GetConfigurationByKeysAndLocationsResponse, error)
	GetConfigurationByKeysAndLocationsV2(ctx context.Context, in *GetConfigurationByKeysAndLocationsV2Request, opts ...grpc.CallOption) (*GetConfigurationByKeysAndLocationsV2Response, error)
}

type externalConfigurationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalConfigurationServiceClient(cc grpc.ClientConnInterface) ExternalConfigurationServiceClient {
	return &externalConfigurationServiceClient{cc}
}

func (c *externalConfigurationServiceClient) GetExternalConfigurationByKey(ctx context.Context, in *GetExternalConfigurationByKeyRequest, opts ...grpc.CallOption) (*GetExternalConfigurationByKeyResponse, error) {
	out := new(GetExternalConfigurationByKeyResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.ExternalConfigurationService/GetExternalConfigurationByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalConfigurationServiceClient) GetExternalConfigurations(ctx context.Context, in *GetExternalConfigurationsRequest, opts ...grpc.CallOption) (*GetExternalConfigurationsResponse, error) {
	out := new(GetExternalConfigurationsResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.ExternalConfigurationService/GetExternalConfigurations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalConfigurationServiceClient) CreateMultiConfigurations(ctx context.Context, in *CreateMultiConfigurationsRequest, opts ...grpc.CallOption) (*CreateMultiConfigurationsResponse, error) {
	out := new(CreateMultiConfigurationsResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.ExternalConfigurationService/CreateMultiConfigurations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalConfigurationServiceClient) GetConfigurationByKeysAndLocations(ctx context.Context, in *GetConfigurationByKeysAndLocationsRequest, opts ...grpc.CallOption) (*GetConfigurationByKeysAndLocationsResponse, error) {
	out := new(GetConfigurationByKeysAndLocationsResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.ExternalConfigurationService/GetConfigurationByKeysAndLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalConfigurationServiceClient) GetConfigurationByKeysAndLocationsV2(ctx context.Context, in *GetConfigurationByKeysAndLocationsV2Request, opts ...grpc.CallOption) (*GetConfigurationByKeysAndLocationsV2Response, error) {
	out := new(GetConfigurationByKeysAndLocationsV2Response)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.ExternalConfigurationService/GetConfigurationByKeysAndLocationsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalConfigurationServiceServer is the server API for ExternalConfigurationService service.
// All implementations should embed UnimplementedExternalConfigurationServiceServer
// for forward compatibility
type ExternalConfigurationServiceServer interface {
	GetExternalConfigurationByKey(context.Context, *GetExternalConfigurationByKeyRequest) (*GetExternalConfigurationByKeyResponse, error)
	GetExternalConfigurations(context.Context, *GetExternalConfigurationsRequest) (*GetExternalConfigurationsResponse, error)
	CreateMultiConfigurations(context.Context, *CreateMultiConfigurationsRequest) (*CreateMultiConfigurationsResponse, error)
	// Deprecated: please use GetConfigurationByKeysAndLocationsV2 which support optional locations
	GetConfigurationByKeysAndLocations(context.Context, *GetConfigurationByKeysAndLocationsRequest) (*GetConfigurationByKeysAndLocationsResponse, error)
	GetConfigurationByKeysAndLocationsV2(context.Context, *GetConfigurationByKeysAndLocationsV2Request) (*GetConfigurationByKeysAndLocationsV2Response, error)
}

// UnimplementedExternalConfigurationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedExternalConfigurationServiceServer struct {
}

func (UnimplementedExternalConfigurationServiceServer) GetExternalConfigurationByKey(context.Context, *GetExternalConfigurationByKeyRequest) (*GetExternalConfigurationByKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalConfigurationByKey not implemented")
}
func (UnimplementedExternalConfigurationServiceServer) GetExternalConfigurations(context.Context, *GetExternalConfigurationsRequest) (*GetExternalConfigurationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalConfigurations not implemented")
}
func (UnimplementedExternalConfigurationServiceServer) CreateMultiConfigurations(context.Context, *CreateMultiConfigurationsRequest) (*CreateMultiConfigurationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMultiConfigurations not implemented")
}
func (UnimplementedExternalConfigurationServiceServer) GetConfigurationByKeysAndLocations(context.Context, *GetConfigurationByKeysAndLocationsRequest) (*GetConfigurationByKeysAndLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigurationByKeysAndLocations not implemented")
}
func (UnimplementedExternalConfigurationServiceServer) GetConfigurationByKeysAndLocationsV2(context.Context, *GetConfigurationByKeysAndLocationsV2Request) (*GetConfigurationByKeysAndLocationsV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigurationByKeysAndLocationsV2 not implemented")
}

// UnsafeExternalConfigurationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalConfigurationServiceServer will
// result in compilation errors.
type UnsafeExternalConfigurationServiceServer interface {
	mustEmbedUnimplementedExternalConfigurationServiceServer()
}

func RegisterExternalConfigurationServiceServer(s grpc.ServiceRegistrar, srv ExternalConfigurationServiceServer) {
	s.RegisterService(&_ExternalConfigurationService_serviceDesc, srv)
}

func _ExternalConfigurationService_GetExternalConfigurationByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExternalConfigurationByKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalConfigurationServiceServer).GetExternalConfigurationByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.ExternalConfigurationService/GetExternalConfigurationByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalConfigurationServiceServer).GetExternalConfigurationByKey(ctx, req.(*GetExternalConfigurationByKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalConfigurationService_GetExternalConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExternalConfigurationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalConfigurationServiceServer).GetExternalConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.ExternalConfigurationService/GetExternalConfigurations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalConfigurationServiceServer).GetExternalConfigurations(ctx, req.(*GetExternalConfigurationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalConfigurationService_CreateMultiConfigurations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMultiConfigurationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalConfigurationServiceServer).CreateMultiConfigurations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.ExternalConfigurationService/CreateMultiConfigurations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalConfigurationServiceServer).CreateMultiConfigurations(ctx, req.(*CreateMultiConfigurationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalConfigurationService_GetConfigurationByKeysAndLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigurationByKeysAndLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalConfigurationServiceServer).GetConfigurationByKeysAndLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.ExternalConfigurationService/GetConfigurationByKeysAndLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalConfigurationServiceServer).GetConfigurationByKeysAndLocations(ctx, req.(*GetConfigurationByKeysAndLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalConfigurationService_GetConfigurationByKeysAndLocationsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigurationByKeysAndLocationsV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalConfigurationServiceServer).GetConfigurationByKeysAndLocationsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.ExternalConfigurationService/GetConfigurationByKeysAndLocationsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalConfigurationServiceServer).GetConfigurationByKeysAndLocationsV2(ctx, req.(*GetConfigurationByKeysAndLocationsV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExternalConfigurationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mastermgmt.v1.ExternalConfigurationService",
	HandlerType: (*ExternalConfigurationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExternalConfigurationByKey",
			Handler:    _ExternalConfigurationService_GetExternalConfigurationByKey_Handler,
		},
		{
			MethodName: "GetExternalConfigurations",
			Handler:    _ExternalConfigurationService_GetExternalConfigurations_Handler,
		},
		{
			MethodName: "CreateMultiConfigurations",
			Handler:    _ExternalConfigurationService_CreateMultiConfigurations_Handler,
		},
		{
			MethodName: "GetConfigurationByKeysAndLocations",
			Handler:    _ExternalConfigurationService_GetConfigurationByKeysAndLocations_Handler,
		},
		{
			MethodName: "GetConfigurationByKeysAndLocationsV2",
			Handler:    _ExternalConfigurationService_GetConfigurationByKeysAndLocationsV2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mastermgmt/v1/external_configuration.proto",
}
