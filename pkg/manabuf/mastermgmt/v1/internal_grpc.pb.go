// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MasterInternalServiceClient is the client API for MasterInternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterInternalServiceClient interface {
	GetReserveClassesByEffectiveDate(ctx context.Context, in *GetReserveClassesByEffectiveDateRequest, opts ...grpc.CallOption) (*GetReserveClassesByEffectiveDateResponse, error)
	DeleteReserveClassesByEffectiveDate(ctx context.Context, in *DeleteReserveClassByEffectiveDateRequest, opts ...grpc.CallOption) (*DeleteReserveClassByEffectiveDateResponse, error)
}

type masterInternalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterInternalServiceClient(cc grpc.ClientConnInterface) MasterInternalServiceClient {
	return &masterInternalServiceClient{cc}
}

func (c *masterInternalServiceClient) GetReserveClassesByEffectiveDate(ctx context.Context, in *GetReserveClassesByEffectiveDateRequest, opts ...grpc.CallOption) (*GetReserveClassesByEffectiveDateResponse, error) {
	out := new(GetReserveClassesByEffectiveDateResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.MasterInternalService/GetReserveClassesByEffectiveDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterInternalServiceClient) DeleteReserveClassesByEffectiveDate(ctx context.Context, in *DeleteReserveClassByEffectiveDateRequest, opts ...grpc.CallOption) (*DeleteReserveClassByEffectiveDateResponse, error) {
	out := new(DeleteReserveClassByEffectiveDateResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.MasterInternalService/DeleteReserveClassesByEffectiveDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterInternalServiceServer is the server API for MasterInternalService service.
// All implementations should embed UnimplementedMasterInternalServiceServer
// for forward compatibility
type MasterInternalServiceServer interface {
	GetReserveClassesByEffectiveDate(context.Context, *GetReserveClassesByEffectiveDateRequest) (*GetReserveClassesByEffectiveDateResponse, error)
	DeleteReserveClassesByEffectiveDate(context.Context, *DeleteReserveClassByEffectiveDateRequest) (*DeleteReserveClassByEffectiveDateResponse, error)
}

// UnimplementedMasterInternalServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMasterInternalServiceServer struct {
}

func (UnimplementedMasterInternalServiceServer) GetReserveClassesByEffectiveDate(context.Context, *GetReserveClassesByEffectiveDateRequest) (*GetReserveClassesByEffectiveDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReserveClassesByEffectiveDate not implemented")
}
func (UnimplementedMasterInternalServiceServer) DeleteReserveClassesByEffectiveDate(context.Context, *DeleteReserveClassByEffectiveDateRequest) (*DeleteReserveClassByEffectiveDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReserveClassesByEffectiveDate not implemented")
}

// UnsafeMasterInternalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterInternalServiceServer will
// result in compilation errors.
type UnsafeMasterInternalServiceServer interface {
	mustEmbedUnimplementedMasterInternalServiceServer()
}

func RegisterMasterInternalServiceServer(s grpc.ServiceRegistrar, srv MasterInternalServiceServer) {
	s.RegisterService(&_MasterInternalService_serviceDesc, srv)
}

func _MasterInternalService_GetReserveClassesByEffectiveDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReserveClassesByEffectiveDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterInternalServiceServer).GetReserveClassesByEffectiveDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.MasterInternalService/GetReserveClassesByEffectiveDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterInternalServiceServer).GetReserveClassesByEffectiveDate(ctx, req.(*GetReserveClassesByEffectiveDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterInternalService_DeleteReserveClassesByEffectiveDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReserveClassByEffectiveDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterInternalServiceServer).DeleteReserveClassesByEffectiveDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.MasterInternalService/DeleteReserveClassesByEffectiveDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterInternalServiceServer).DeleteReserveClassesByEffectiveDate(ctx, req.(*DeleteReserveClassByEffectiveDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MasterInternalService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mastermgmt.v1.MasterInternalService",
	HandlerType: (*MasterInternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReserveClassesByEffectiveDate",
			Handler:    _MasterInternalService_GetReserveClassesByEffectiveDate_Handler,
		},
		{
			MethodName: "DeleteReserveClassesByEffectiveDate",
			Handler:    _MasterInternalService_DeleteReserveClassesByEffectiveDate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mastermgmt/v1/internal.proto",
}
