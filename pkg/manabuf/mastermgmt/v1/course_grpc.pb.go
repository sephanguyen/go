// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MasterDataCourseServiceClient is the client API for MasterDataCourseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterDataCourseServiceClient interface {
	UpsertCourses(ctx context.Context, in *UpsertCoursesRequest, opts ...grpc.CallOption) (*UpsertCoursesResponse, error)
	ExportCourses(ctx context.Context, in *ExportCoursesRequest, opts ...grpc.CallOption) (*ExportCoursesResponse, error)
	GetCoursesByIDs(ctx context.Context, in *GetCoursesByIDsRequest, opts ...grpc.CallOption) (*GetCoursesByIDsResponse, error)
	ImportCourses(ctx context.Context, in *ImportCoursesRequest, opts ...grpc.CallOption) (*ImportCoursesResponse, error)
}

type masterDataCourseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterDataCourseServiceClient(cc grpc.ClientConnInterface) MasterDataCourseServiceClient {
	return &masterDataCourseServiceClient{cc}
}

func (c *masterDataCourseServiceClient) UpsertCourses(ctx context.Context, in *UpsertCoursesRequest, opts ...grpc.CallOption) (*UpsertCoursesResponse, error) {
	out := new(UpsertCoursesResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.MasterDataCourseService/UpsertCourses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDataCourseServiceClient) ExportCourses(ctx context.Context, in *ExportCoursesRequest, opts ...grpc.CallOption) (*ExportCoursesResponse, error) {
	out := new(ExportCoursesResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.MasterDataCourseService/ExportCourses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDataCourseServiceClient) GetCoursesByIDs(ctx context.Context, in *GetCoursesByIDsRequest, opts ...grpc.CallOption) (*GetCoursesByIDsResponse, error) {
	out := new(GetCoursesByIDsResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.MasterDataCourseService/GetCoursesByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDataCourseServiceClient) ImportCourses(ctx context.Context, in *ImportCoursesRequest, opts ...grpc.CallOption) (*ImportCoursesResponse, error) {
	out := new(ImportCoursesResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.MasterDataCourseService/ImportCourses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterDataCourseServiceServer is the server API for MasterDataCourseService service.
// All implementations should embed UnimplementedMasterDataCourseServiceServer
// for forward compatibility
type MasterDataCourseServiceServer interface {
	UpsertCourses(context.Context, *UpsertCoursesRequest) (*UpsertCoursesResponse, error)
	ExportCourses(context.Context, *ExportCoursesRequest) (*ExportCoursesResponse, error)
	GetCoursesByIDs(context.Context, *GetCoursesByIDsRequest) (*GetCoursesByIDsResponse, error)
	ImportCourses(context.Context, *ImportCoursesRequest) (*ImportCoursesResponse, error)
}

// UnimplementedMasterDataCourseServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMasterDataCourseServiceServer struct {
}

func (UnimplementedMasterDataCourseServiceServer) UpsertCourses(context.Context, *UpsertCoursesRequest) (*UpsertCoursesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertCourses not implemented")
}
func (UnimplementedMasterDataCourseServiceServer) ExportCourses(context.Context, *ExportCoursesRequest) (*ExportCoursesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportCourses not implemented")
}
func (UnimplementedMasterDataCourseServiceServer) GetCoursesByIDs(context.Context, *GetCoursesByIDsRequest) (*GetCoursesByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoursesByIDs not implemented")
}
func (UnimplementedMasterDataCourseServiceServer) ImportCourses(context.Context, *ImportCoursesRequest) (*ImportCoursesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportCourses not implemented")
}

// UnsafeMasterDataCourseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterDataCourseServiceServer will
// result in compilation errors.
type UnsafeMasterDataCourseServiceServer interface {
	mustEmbedUnimplementedMasterDataCourseServiceServer()
}

func RegisterMasterDataCourseServiceServer(s grpc.ServiceRegistrar, srv MasterDataCourseServiceServer) {
	s.RegisterService(&_MasterDataCourseService_serviceDesc, srv)
}

func _MasterDataCourseService_UpsertCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertCoursesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDataCourseServiceServer).UpsertCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.MasterDataCourseService/UpsertCourses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDataCourseServiceServer).UpsertCourses(ctx, req.(*UpsertCoursesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDataCourseService_ExportCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportCoursesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDataCourseServiceServer).ExportCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.MasterDataCourseService/ExportCourses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDataCourseServiceServer).ExportCourses(ctx, req.(*ExportCoursesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDataCourseService_GetCoursesByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoursesByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDataCourseServiceServer).GetCoursesByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.MasterDataCourseService/GetCoursesByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDataCourseServiceServer).GetCoursesByIDs(ctx, req.(*GetCoursesByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDataCourseService_ImportCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportCoursesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDataCourseServiceServer).ImportCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.MasterDataCourseService/ImportCourses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDataCourseServiceServer).ImportCourses(ctx, req.(*ImportCoursesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MasterDataCourseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mastermgmt.v1.MasterDataCourseService",
	HandlerType: (*MasterDataCourseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertCourses",
			Handler:    _MasterDataCourseService_UpsertCourses_Handler,
		},
		{
			MethodName: "ExportCourses",
			Handler:    _MasterDataCourseService_ExportCourses_Handler,
		},
		{
			MethodName: "GetCoursesByIDs",
			Handler:    _MasterDataCourseService_GetCoursesByIDs_Handler,
		},
		{
			MethodName: "ImportCourses",
			Handler:    _MasterDataCourseService_ImportCourses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mastermgmt/v1/course.proto",
}
