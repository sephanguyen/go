// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ClassServiceClient is the client API for ClassService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClassServiceClient interface {
	ImportClass(ctx context.Context, in *ImportClassRequest, opts ...grpc.CallOption) (*ImportClassResponse, error)
	UpdateClass(ctx context.Context, in *UpdateClassRequest, opts ...grpc.CallOption) (*UpdateClassResponse, error)
	ExportClasses(ctx context.Context, in *ExportClassesRequest, opts ...grpc.CallOption) (*ExportClassesResponse, error)
	DeleteClass(ctx context.Context, in *DeleteClassRequest, opts ...grpc.CallOption) (*DeleteClassResponse, error)
	RetrieveClassesByIDs(ctx context.Context, in *RetrieveClassByIDsRequest, opts ...grpc.CallOption) (*RetrieveClassByIDsResponse, error)
}

type classServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClassServiceClient(cc grpc.ClientConnInterface) ClassServiceClient {
	return &classServiceClient{cc}
}

func (c *classServiceClient) ImportClass(ctx context.Context, in *ImportClassRequest, opts ...grpc.CallOption) (*ImportClassResponse, error) {
	out := new(ImportClassResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.ClassService/ImportClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classServiceClient) UpdateClass(ctx context.Context, in *UpdateClassRequest, opts ...grpc.CallOption) (*UpdateClassResponse, error) {
	out := new(UpdateClassResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.ClassService/UpdateClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classServiceClient) ExportClasses(ctx context.Context, in *ExportClassesRequest, opts ...grpc.CallOption) (*ExportClassesResponse, error) {
	out := new(ExportClassesResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.ClassService/ExportClasses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classServiceClient) DeleteClass(ctx context.Context, in *DeleteClassRequest, opts ...grpc.CallOption) (*DeleteClassResponse, error) {
	out := new(DeleteClassResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.ClassService/DeleteClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classServiceClient) RetrieveClassesByIDs(ctx context.Context, in *RetrieveClassByIDsRequest, opts ...grpc.CallOption) (*RetrieveClassByIDsResponse, error) {
	out := new(RetrieveClassByIDsResponse)
	err := c.cc.Invoke(ctx, "/mastermgmt.v1.ClassService/RetrieveClassesByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClassServiceServer is the server API for ClassService service.
// All implementations should embed UnimplementedClassServiceServer
// for forward compatibility
type ClassServiceServer interface {
	ImportClass(context.Context, *ImportClassRequest) (*ImportClassResponse, error)
	UpdateClass(context.Context, *UpdateClassRequest) (*UpdateClassResponse, error)
	ExportClasses(context.Context, *ExportClassesRequest) (*ExportClassesResponse, error)
	DeleteClass(context.Context, *DeleteClassRequest) (*DeleteClassResponse, error)
	RetrieveClassesByIDs(context.Context, *RetrieveClassByIDsRequest) (*RetrieveClassByIDsResponse, error)
}

// UnimplementedClassServiceServer should be embedded to have forward compatible implementations.
type UnimplementedClassServiceServer struct {
}

func (UnimplementedClassServiceServer) ImportClass(context.Context, *ImportClassRequest) (*ImportClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportClass not implemented")
}
func (UnimplementedClassServiceServer) UpdateClass(context.Context, *UpdateClassRequest) (*UpdateClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClass not implemented")
}
func (UnimplementedClassServiceServer) ExportClasses(context.Context, *ExportClassesRequest) (*ExportClassesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportClasses not implemented")
}
func (UnimplementedClassServiceServer) DeleteClass(context.Context, *DeleteClassRequest) (*DeleteClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClass not implemented")
}
func (UnimplementedClassServiceServer) RetrieveClassesByIDs(context.Context, *RetrieveClassByIDsRequest) (*RetrieveClassByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveClassesByIDs not implemented")
}

// UnsafeClassServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClassServiceServer will
// result in compilation errors.
type UnsafeClassServiceServer interface {
	mustEmbedUnimplementedClassServiceServer()
}

func RegisterClassServiceServer(s grpc.ServiceRegistrar, srv ClassServiceServer) {
	s.RegisterService(&_ClassService_serviceDesc, srv)
}

func _ClassService_ImportClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServiceServer).ImportClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.ClassService/ImportClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServiceServer).ImportClass(ctx, req.(*ImportClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassService_UpdateClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServiceServer).UpdateClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.ClassService/UpdateClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServiceServer).UpdateClass(ctx, req.(*UpdateClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassService_ExportClasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportClassesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServiceServer).ExportClasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.ClassService/ExportClasses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServiceServer).ExportClasses(ctx, req.(*ExportClassesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassService_DeleteClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServiceServer).DeleteClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.ClassService/DeleteClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServiceServer).DeleteClass(ctx, req.(*DeleteClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassService_RetrieveClassesByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveClassByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServiceServer).RetrieveClassesByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mastermgmt.v1.ClassService/RetrieveClassesByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServiceServer).RetrieveClassesByIDs(ctx, req.(*RetrieveClassByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClassService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mastermgmt.v1.ClassService",
	HandlerType: (*ClassServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportClass",
			Handler:    _ClassService_ImportClass_Handler,
		},
		{
			MethodName: "UpdateClass",
			Handler:    _ClassService_UpdateClass_Handler,
		},
		{
			MethodName: "ExportClasses",
			Handler:    _ClassService_ExportClasses_Handler,
		},
		{
			MethodName: "DeleteClass",
			Handler:    _ClassService_DeleteClass_Handler,
		},
		{
			MethodName: "RetrieveClassesByIDs",
			Handler:    _ClassService_RetrieveClassesByIDs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mastermgmt/v1/class.proto",
}
