// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package spb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TokenReaderServiceClient is the client API for TokenReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenReaderServiceClient interface {
	VerifyToken(ctx context.Context, in *VerifyTokenRequest, opts ...grpc.CallOption) (*VerifyTokenResponse, error)
	ExchangeToken(ctx context.Context, in *ExchangeTokenRequest, opts ...grpc.CallOption) (*ExchangeTokenResponse, error)
	VerifyTokenV2(ctx context.Context, in *VerifyTokenRequest, opts ...grpc.CallOption) (*VerifyTokenResponse, error)
	VerifySignature(ctx context.Context, in *VerifySignatureRequest, opts ...grpc.CallOption) (*VerifySignatureResponse, error)
	GetAuthInfo(ctx context.Context, in *GetAuthInfoRequest, opts ...grpc.CallOption) (*GetAuthInfoResponse, error)
	ExchangeSalesforceToken(ctx context.Context, in *ExchangeSalesforceTokenRequest, opts ...grpc.CallOption) (*ExchangeSalesforceTokenResponse, error)
}

type tokenReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenReaderServiceClient(cc grpc.ClientConnInterface) TokenReaderServiceClient {
	return &tokenReaderServiceClient{cc}
}

func (c *tokenReaderServiceClient) VerifyToken(ctx context.Context, in *VerifyTokenRequest, opts ...grpc.CallOption) (*VerifyTokenResponse, error) {
	out := new(VerifyTokenResponse)
	err := c.cc.Invoke(ctx, "/shamir.v1.TokenReaderService/VerifyToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenReaderServiceClient) ExchangeToken(ctx context.Context, in *ExchangeTokenRequest, opts ...grpc.CallOption) (*ExchangeTokenResponse, error) {
	out := new(ExchangeTokenResponse)
	err := c.cc.Invoke(ctx, "/shamir.v1.TokenReaderService/ExchangeToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenReaderServiceClient) VerifyTokenV2(ctx context.Context, in *VerifyTokenRequest, opts ...grpc.CallOption) (*VerifyTokenResponse, error) {
	out := new(VerifyTokenResponse)
	err := c.cc.Invoke(ctx, "/shamir.v1.TokenReaderService/VerifyTokenV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenReaderServiceClient) VerifySignature(ctx context.Context, in *VerifySignatureRequest, opts ...grpc.CallOption) (*VerifySignatureResponse, error) {
	out := new(VerifySignatureResponse)
	err := c.cc.Invoke(ctx, "/shamir.v1.TokenReaderService/VerifySignature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenReaderServiceClient) GetAuthInfo(ctx context.Context, in *GetAuthInfoRequest, opts ...grpc.CallOption) (*GetAuthInfoResponse, error) {
	out := new(GetAuthInfoResponse)
	err := c.cc.Invoke(ctx, "/shamir.v1.TokenReaderService/GetAuthInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenReaderServiceClient) ExchangeSalesforceToken(ctx context.Context, in *ExchangeSalesforceTokenRequest, opts ...grpc.CallOption) (*ExchangeSalesforceTokenResponse, error) {
	out := new(ExchangeSalesforceTokenResponse)
	err := c.cc.Invoke(ctx, "/shamir.v1.TokenReaderService/ExchangeSalesforceToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenReaderServiceServer is the server API for TokenReaderService service.
// All implementations should embed UnimplementedTokenReaderServiceServer
// for forward compatibility
type TokenReaderServiceServer interface {
	VerifyToken(context.Context, *VerifyTokenRequest) (*VerifyTokenResponse, error)
	ExchangeToken(context.Context, *ExchangeTokenRequest) (*ExchangeTokenResponse, error)
	VerifyTokenV2(context.Context, *VerifyTokenRequest) (*VerifyTokenResponse, error)
	VerifySignature(context.Context, *VerifySignatureRequest) (*VerifySignatureResponse, error)
	GetAuthInfo(context.Context, *GetAuthInfoRequest) (*GetAuthInfoResponse, error)
	ExchangeSalesforceToken(context.Context, *ExchangeSalesforceTokenRequest) (*ExchangeSalesforceTokenResponse, error)
}

// UnimplementedTokenReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTokenReaderServiceServer struct {
}

func (UnimplementedTokenReaderServiceServer) VerifyToken(context.Context, *VerifyTokenRequest) (*VerifyTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyToken not implemented")
}
func (UnimplementedTokenReaderServiceServer) ExchangeToken(context.Context, *ExchangeTokenRequest) (*ExchangeTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeToken not implemented")
}
func (UnimplementedTokenReaderServiceServer) VerifyTokenV2(context.Context, *VerifyTokenRequest) (*VerifyTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyTokenV2 not implemented")
}
func (UnimplementedTokenReaderServiceServer) VerifySignature(context.Context, *VerifySignatureRequest) (*VerifySignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySignature not implemented")
}
func (UnimplementedTokenReaderServiceServer) GetAuthInfo(context.Context, *GetAuthInfoRequest) (*GetAuthInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthInfo not implemented")
}
func (UnimplementedTokenReaderServiceServer) ExchangeSalesforceToken(context.Context, *ExchangeSalesforceTokenRequest) (*ExchangeSalesforceTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeSalesforceToken not implemented")
}

// UnsafeTokenReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenReaderServiceServer will
// result in compilation errors.
type UnsafeTokenReaderServiceServer interface {
	mustEmbedUnimplementedTokenReaderServiceServer()
}

func RegisterTokenReaderServiceServer(s grpc.ServiceRegistrar, srv TokenReaderServiceServer) {
	s.RegisterService(&_TokenReaderService_serviceDesc, srv)
}

func _TokenReaderService_VerifyToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenReaderServiceServer).VerifyToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shamir.v1.TokenReaderService/VerifyToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenReaderServiceServer).VerifyToken(ctx, req.(*VerifyTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenReaderService_ExchangeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenReaderServiceServer).ExchangeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shamir.v1.TokenReaderService/ExchangeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenReaderServiceServer).ExchangeToken(ctx, req.(*ExchangeTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenReaderService_VerifyTokenV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenReaderServiceServer).VerifyTokenV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shamir.v1.TokenReaderService/VerifyTokenV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenReaderServiceServer).VerifyTokenV2(ctx, req.(*VerifyTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenReaderService_VerifySignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifySignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenReaderServiceServer).VerifySignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shamir.v1.TokenReaderService/VerifySignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenReaderServiceServer).VerifySignature(ctx, req.(*VerifySignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenReaderService_GetAuthInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenReaderServiceServer).GetAuthInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shamir.v1.TokenReaderService/GetAuthInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenReaderServiceServer).GetAuthInfo(ctx, req.(*GetAuthInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TokenReaderService_ExchangeSalesforceToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeSalesforceTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenReaderServiceServer).ExchangeSalesforceToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shamir.v1.TokenReaderService/ExchangeSalesforceToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenReaderServiceServer).ExchangeSalesforceToken(ctx, req.(*ExchangeSalesforceTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TokenReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shamir.v1.TokenReaderService",
	HandlerType: (*TokenReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyToken",
			Handler:    _TokenReaderService_VerifyToken_Handler,
		},
		{
			MethodName: "ExchangeToken",
			Handler:    _TokenReaderService_ExchangeToken_Handler,
		},
		{
			MethodName: "VerifyTokenV2",
			Handler:    _TokenReaderService_VerifyTokenV2_Handler,
		},
		{
			MethodName: "VerifySignature",
			Handler:    _TokenReaderService_VerifySignature_Handler,
		},
		{
			MethodName: "GetAuthInfo",
			Handler:    _TokenReaderService_GetAuthInfo_Handler,
		},
		{
			MethodName: "ExchangeSalesforceToken",
			Handler:    _TokenReaderService_ExchangeSalesforceToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shamir/v1/token.proto",
}

// InternalServiceClient is the client API for InternalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternalServiceClient interface {
	GenerateFakeToken(ctx context.Context, in *GenerateFakeTokenRequest, opts ...grpc.CallOption) (*GenerateFakeTokenResponse, error)
}

type internalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInternalServiceClient(cc grpc.ClientConnInterface) InternalServiceClient {
	return &internalServiceClient{cc}
}

func (c *internalServiceClient) GenerateFakeToken(ctx context.Context, in *GenerateFakeTokenRequest, opts ...grpc.CallOption) (*GenerateFakeTokenResponse, error) {
	out := new(GenerateFakeTokenResponse)
	err := c.cc.Invoke(ctx, "/shamir.v1.InternalService/GenerateFakeToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternalServiceServer is the server API for InternalService service.
// All implementations should embed UnimplementedInternalServiceServer
// for forward compatibility
type InternalServiceServer interface {
	GenerateFakeToken(context.Context, *GenerateFakeTokenRequest) (*GenerateFakeTokenResponse, error)
}

// UnimplementedInternalServiceServer should be embedded to have forward compatible implementations.
type UnimplementedInternalServiceServer struct {
}

func (UnimplementedInternalServiceServer) GenerateFakeToken(context.Context, *GenerateFakeTokenRequest) (*GenerateFakeTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateFakeToken not implemented")
}

// UnsafeInternalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternalServiceServer will
// result in compilation errors.
type UnsafeInternalServiceServer interface {
	mustEmbedUnimplementedInternalServiceServer()
}

func RegisterInternalServiceServer(s grpc.ServiceRegistrar, srv InternalServiceServer) {
	s.RegisterService(&_InternalService_serviceDesc, srv)
}

func _InternalService_GenerateFakeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateFakeTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).GenerateFakeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shamir.v1.InternalService/GenerateFakeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).GenerateFakeToken(ctx, req.(*GenerateFakeTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InternalService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "shamir.v1.InternalService",
	HandlerType: (*InternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateFakeToken",
			Handler:    _InternalService_GenerateFakeToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shamir/v1/token.proto",
}
