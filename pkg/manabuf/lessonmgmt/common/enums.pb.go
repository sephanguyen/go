// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: lessonmgmt/common/enums.proto

package common

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Country int32

const (
	Country_COUNTRY_NONE   Country = 0
	Country_COUNTRY_MASTER Country = 1
	Country_COUNTRY_VN     Country = 2
	Country_COUNTRY_ID     Country = 3
	Country_COUNTRY_SG     Country = 4
	Country_COUNTRY_JP     Country = 5
)

// Enum value maps for Country.
var (
	Country_name = map[int32]string{
		0: "COUNTRY_NONE",
		1: "COUNTRY_MASTER",
		2: "COUNTRY_VN",
		3: "COUNTRY_ID",
		4: "COUNTRY_SG",
		5: "COUNTRY_JP",
	}
	Country_value = map[string]int32{
		"COUNTRY_NONE":   0,
		"COUNTRY_MASTER": 1,
		"COUNTRY_VN":     2,
		"COUNTRY_ID":     3,
		"COUNTRY_SG":     4,
		"COUNTRY_JP":     5,
	}
)

func (x Country) Enum() *Country {
	p := new(Country)
	*p = x
	return p
}

func (x Country) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Country) Descriptor() protoreflect.EnumDescriptor {
	return file_lessonmgmt_common_enums_proto_enumTypes[0].Descriptor()
}

func (Country) Type() protoreflect.EnumType {
	return &file_lessonmgmt_common_enums_proto_enumTypes[0]
}

func (x Country) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Country.Descriptor instead.
func (Country) EnumDescriptor() ([]byte, []int) {
	return file_lessonmgmt_common_enums_proto_rawDescGZIP(), []int{0}
}

type Subject int32

const (
	Subject_SUBJECT_NONE           Subject = 0
	Subject_SUBJECT_MATHS          Subject = 1
	Subject_SUBJECT_BIOLOGY        Subject = 2
	Subject_SUBJECT_PHYSICS        Subject = 3
	Subject_SUBJECT_CHEMISTRY      Subject = 4
	Subject_SUBJECT_GEOGRAPHY      Subject = 5
	Subject_SUBJECT_ENGLISH        Subject = 6
	Subject_SUBJECT_ENGLISH_2      Subject = 7
	Subject_SUBJECT_JAPANESE       Subject = 8
	Subject_SUBJECT_SCIENCE        Subject = 9
	Subject_SUBJECT_SOCIAL_STUDIES Subject = 10
	Subject_SUBJECT_LITERATURE     Subject = 11
)

// Enum value maps for Subject.
var (
	Subject_name = map[int32]string{
		0:  "SUBJECT_NONE",
		1:  "SUBJECT_MATHS",
		2:  "SUBJECT_BIOLOGY",
		3:  "SUBJECT_PHYSICS",
		4:  "SUBJECT_CHEMISTRY",
		5:  "SUBJECT_GEOGRAPHY",
		6:  "SUBJECT_ENGLISH",
		7:  "SUBJECT_ENGLISH_2",
		8:  "SUBJECT_JAPANESE",
		9:  "SUBJECT_SCIENCE",
		10: "SUBJECT_SOCIAL_STUDIES",
		11: "SUBJECT_LITERATURE",
	}
	Subject_value = map[string]int32{
		"SUBJECT_NONE":           0,
		"SUBJECT_MATHS":          1,
		"SUBJECT_BIOLOGY":        2,
		"SUBJECT_PHYSICS":        3,
		"SUBJECT_CHEMISTRY":      4,
		"SUBJECT_GEOGRAPHY":      5,
		"SUBJECT_ENGLISH":        6,
		"SUBJECT_ENGLISH_2":      7,
		"SUBJECT_JAPANESE":       8,
		"SUBJECT_SCIENCE":        9,
		"SUBJECT_SOCIAL_STUDIES": 10,
		"SUBJECT_LITERATURE":     11,
	}
)

func (x Subject) Enum() *Subject {
	p := new(Subject)
	*p = x
	return p
}

func (x Subject) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Subject) Descriptor() protoreflect.EnumDescriptor {
	return file_lessonmgmt_common_enums_proto_enumTypes[1].Descriptor()
}

func (Subject) Type() protoreflect.EnumType {
	return &file_lessonmgmt_common_enums_proto_enumTypes[1]
}

func (x Subject) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Subject.Descriptor instead.
func (Subject) EnumDescriptor() ([]byte, []int) {
	return file_lessonmgmt_common_enums_proto_rawDescGZIP(), []int{1}
}

// online, offline, hybrid
type LessonType int32

const (
	LessonType_LESSON_TYPE_NONE    LessonType = 0
	LessonType_LESSON_TYPE_ONLINE  LessonType = 1
	LessonType_LESSON_TYPE_OFFLINE LessonType = 2
	LessonType_LESSON_TYPE_HYBRID  LessonType = 3
)

// Enum value maps for LessonType.
var (
	LessonType_name = map[int32]string{
		0: "LESSON_TYPE_NONE",
		1: "LESSON_TYPE_ONLINE",
		2: "LESSON_TYPE_OFFLINE",
		3: "LESSON_TYPE_HYBRID",
	}
	LessonType_value = map[string]int32{
		"LESSON_TYPE_NONE":    0,
		"LESSON_TYPE_ONLINE":  1,
		"LESSON_TYPE_OFFLINE": 2,
		"LESSON_TYPE_HYBRID":  3,
	}
)

func (x LessonType) Enum() *LessonType {
	p := new(LessonType)
	*p = x
	return p
}

func (x LessonType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LessonType) Descriptor() protoreflect.EnumDescriptor {
	return file_lessonmgmt_common_enums_proto_enumTypes[2].Descriptor()
}

func (LessonType) Type() protoreflect.EnumType {
	return &file_lessonmgmt_common_enums_proto_enumTypes[2]
}

func (x LessonType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LessonType.Descriptor instead.
func (LessonType) EnumDescriptor() ([]byte, []int) {
	return file_lessonmgmt_common_enums_proto_rawDescGZIP(), []int{2}
}

type TeachingModel int32

const (
	TeachingModel_LESSON_TEACHING_MODEL_INDIVIDUAL TeachingModel = 0
	TeachingModel_LESSON_TEACHING_MODEL_GROUP      TeachingModel = 1
)

// Enum value maps for TeachingModel.
var (
	TeachingModel_name = map[int32]string{
		0: "LESSON_TEACHING_MODEL_INDIVIDUAL",
		1: "LESSON_TEACHING_MODEL_GROUP",
	}
	TeachingModel_value = map[string]int32{
		"LESSON_TEACHING_MODEL_INDIVIDUAL": 0,
		"LESSON_TEACHING_MODEL_GROUP":      1,
	}
)

func (x TeachingModel) Enum() *TeachingModel {
	p := new(TeachingModel)
	*p = x
	return p
}

func (x TeachingModel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TeachingModel) Descriptor() protoreflect.EnumDescriptor {
	return file_lessonmgmt_common_enums_proto_enumTypes[3].Descriptor()
}

func (TeachingModel) Type() protoreflect.EnumType {
	return &file_lessonmgmt_common_enums_proto_enumTypes[3]
}

func (x TeachingModel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TeachingModel.Descriptor instead.
func (TeachingModel) EnumDescriptor() ([]byte, []int) {
	return file_lessonmgmt_common_enums_proto_rawDescGZIP(), []int{3}
}

type LearningObjectiveType int32

const (
	LearningObjectiveType_LEARNING_OBJECTIVE_TYPE_NONE             LearningObjectiveType = 0
	LearningObjectiveType_LEARNING_OBJECTIVE_TYPE_LEARNING         LearningObjectiveType = 1
	LearningObjectiveType_LEARNING_OBJECTIVE_TYPE_FLASH_CARD       LearningObjectiveType = 2
	LearningObjectiveType_LEARNING_OBJECTIVE_TYPE_OFFLINE_LEARNING LearningObjectiveType = 3
	LearningObjectiveType_LEARNING_OBJECTIVE_TYPE_EXAM_LO          LearningObjectiveType = 4
)

// Enum value maps for LearningObjectiveType.
var (
	LearningObjectiveType_name = map[int32]string{
		0: "LEARNING_OBJECTIVE_TYPE_NONE",
		1: "LEARNING_OBJECTIVE_TYPE_LEARNING",
		2: "LEARNING_OBJECTIVE_TYPE_FLASH_CARD",
		3: "LEARNING_OBJECTIVE_TYPE_OFFLINE_LEARNING",
		4: "LEARNING_OBJECTIVE_TYPE_EXAM_LO",
	}
	LearningObjectiveType_value = map[string]int32{
		"LEARNING_OBJECTIVE_TYPE_NONE":             0,
		"LEARNING_OBJECTIVE_TYPE_LEARNING":         1,
		"LEARNING_OBJECTIVE_TYPE_FLASH_CARD":       2,
		"LEARNING_OBJECTIVE_TYPE_OFFLINE_LEARNING": 3,
		"LEARNING_OBJECTIVE_TYPE_EXAM_LO":          4,
	}
)

func (x LearningObjectiveType) Enum() *LearningObjectiveType {
	p := new(LearningObjectiveType)
	*p = x
	return p
}

func (x LearningObjectiveType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LearningObjectiveType) Descriptor() protoreflect.EnumDescriptor {
	return file_lessonmgmt_common_enums_proto_enumTypes[4].Descriptor()
}

func (LearningObjectiveType) Type() protoreflect.EnumType {
	return &file_lessonmgmt_common_enums_proto_enumTypes[4]
}

func (x LearningObjectiveType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LearningObjectiveType.Descriptor instead.
func (LearningObjectiveType) EnumDescriptor() ([]byte, []int) {
	return file_lessonmgmt_common_enums_proto_rawDescGZIP(), []int{4}
}

type StudentStatus int32

const (
	StudentStatus_STUDENT_STATUS_NONE StudentStatus = 0
)

// Enum value maps for StudentStatus.
var (
	StudentStatus_name = map[int32]string{
		0: "STUDENT_STATUS_NONE",
	}
	StudentStatus_value = map[string]int32{
		"STUDENT_STATUS_NONE": 0,
	}
)

func (x StudentStatus) Enum() *StudentStatus {
	p := new(StudentStatus)
	*p = x
	return p
}

func (x StudentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StudentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_lessonmgmt_common_enums_proto_enumTypes[5].Descriptor()
}

func (StudentStatus) Type() protoreflect.EnumType {
	return &file_lessonmgmt_common_enums_proto_enumTypes[5]
}

func (x StudentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StudentStatus.Descriptor instead.
func (StudentStatus) EnumDescriptor() ([]byte, []int) {
	return file_lessonmgmt_common_enums_proto_rawDescGZIP(), []int{5}
}

type StudentEnrollmentStatus int32

const (
	StudentEnrollmentStatus_STUDENT_ENROLLMENT_STATUS_NONE      StudentEnrollmentStatus = 0
	StudentEnrollmentStatus_STUDENT_ENROLLMENT_STATUS_POTENTIAL StudentEnrollmentStatus = 1
	StudentEnrollmentStatus_STUDENT_ENROLLMENT_STATUS_ENROLLED  StudentEnrollmentStatus = 2
)

// Enum value maps for StudentEnrollmentStatus.
var (
	StudentEnrollmentStatus_name = map[int32]string{
		0: "STUDENT_ENROLLMENT_STATUS_NONE",
		1: "STUDENT_ENROLLMENT_STATUS_POTENTIAL",
		2: "STUDENT_ENROLLMENT_STATUS_ENROLLED",
	}
	StudentEnrollmentStatus_value = map[string]int32{
		"STUDENT_ENROLLMENT_STATUS_NONE":      0,
		"STUDENT_ENROLLMENT_STATUS_POTENTIAL": 1,
		"STUDENT_ENROLLMENT_STATUS_ENROLLED":  2,
	}
)

func (x StudentEnrollmentStatus) Enum() *StudentEnrollmentStatus {
	p := new(StudentEnrollmentStatus)
	*p = x
	return p
}

func (x StudentEnrollmentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StudentEnrollmentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_lessonmgmt_common_enums_proto_enumTypes[6].Descriptor()
}

func (StudentEnrollmentStatus) Type() protoreflect.EnumType {
	return &file_lessonmgmt_common_enums_proto_enumTypes[6]
}

func (x StudentEnrollmentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StudentEnrollmentStatus.Descriptor instead.
func (StudentEnrollmentStatus) EnumDescriptor() ([]byte, []int) {
	return file_lessonmgmt_common_enums_proto_rawDescGZIP(), []int{6}
}

type LessonTeachingMethod int32

const (
	LessonTeachingMethod_LESSON_TEACHING_METHOD_INDIVIDUAL LessonTeachingMethod = 0
	LessonTeachingMethod_LESSON_TEACHING_METHOD_GROUP      LessonTeachingMethod = 1
)

// Enum value maps for LessonTeachingMethod.
var (
	LessonTeachingMethod_name = map[int32]string{
		0: "LESSON_TEACHING_METHOD_INDIVIDUAL",
		1: "LESSON_TEACHING_METHOD_GROUP",
	}
	LessonTeachingMethod_value = map[string]int32{
		"LESSON_TEACHING_METHOD_INDIVIDUAL": 0,
		"LESSON_TEACHING_METHOD_GROUP":      1,
	}
)

func (x LessonTeachingMethod) Enum() *LessonTeachingMethod {
	p := new(LessonTeachingMethod)
	*p = x
	return p
}

func (x LessonTeachingMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LessonTeachingMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_lessonmgmt_common_enums_proto_enumTypes[7].Descriptor()
}

func (LessonTeachingMethod) Type() protoreflect.EnumType {
	return &file_lessonmgmt_common_enums_proto_enumTypes[7]
}

func (x LessonTeachingMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LessonTeachingMethod.Descriptor instead.
func (LessonTeachingMethod) EnumDescriptor() ([]byte, []int) {
	return file_lessonmgmt_common_enums_proto_rawDescGZIP(), []int{7}
}

type LessonTeachingMedium int32

const (
	LessonTeachingMedium_LESSON_TEACHING_MEDIUM_OFFLINE  LessonTeachingMedium = 0
	LessonTeachingMedium_LESSON_TEACHING_MEDIUM_ONLINE   LessonTeachingMedium = 1
	LessonTeachingMedium_LESSON_TEACHING_MEDIUM_HYBRID   LessonTeachingMedium = 2
	LessonTeachingMedium_LESSON_TEACHING_MEDIUM_ZOOM     LessonTeachingMedium = 3
	LessonTeachingMedium_LESSON_TEACHING_MEDIUM_CLASS_DO LessonTeachingMedium = 4
)

// Enum value maps for LessonTeachingMedium.
var (
	LessonTeachingMedium_name = map[int32]string{
		0: "LESSON_TEACHING_MEDIUM_OFFLINE",
		1: "LESSON_TEACHING_MEDIUM_ONLINE",
		2: "LESSON_TEACHING_MEDIUM_HYBRID",
		3: "LESSON_TEACHING_MEDIUM_ZOOM",
		4: "LESSON_TEACHING_MEDIUM_CLASS_DO",
	}
	LessonTeachingMedium_value = map[string]int32{
		"LESSON_TEACHING_MEDIUM_OFFLINE":  0,
		"LESSON_TEACHING_MEDIUM_ONLINE":   1,
		"LESSON_TEACHING_MEDIUM_HYBRID":   2,
		"LESSON_TEACHING_MEDIUM_ZOOM":     3,
		"LESSON_TEACHING_MEDIUM_CLASS_DO": 4,
	}
)

func (x LessonTeachingMedium) Enum() *LessonTeachingMedium {
	p := new(LessonTeachingMedium)
	*p = x
	return p
}

func (x LessonTeachingMedium) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LessonTeachingMedium) Descriptor() protoreflect.EnumDescriptor {
	return file_lessonmgmt_common_enums_proto_enumTypes[8].Descriptor()
}

func (LessonTeachingMedium) Type() protoreflect.EnumType {
	return &file_lessonmgmt_common_enums_proto_enumTypes[8]
}

func (x LessonTeachingMedium) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LessonTeachingMedium.Descriptor instead.
func (LessonTeachingMedium) EnumDescriptor() ([]byte, []int) {
	return file_lessonmgmt_common_enums_proto_rawDescGZIP(), []int{8}
}

type LessonSchedulingStatus int32

const (
	LessonSchedulingStatus_LESSON_SCHEDULING_STATUS_DRAFT     LessonSchedulingStatus = 0
	LessonSchedulingStatus_LESSON_SCHEDULING_STATUS_PUBLISHED LessonSchedulingStatus = 1
	LessonSchedulingStatus_LESSON_SCHEDULING_STATUS_COMPLETED LessonSchedulingStatus = 2
	LessonSchedulingStatus_LESSON_SCHEDULING_STATUS_CANCELED  LessonSchedulingStatus = 3
)

// Enum value maps for LessonSchedulingStatus.
var (
	LessonSchedulingStatus_name = map[int32]string{
		0: "LESSON_SCHEDULING_STATUS_DRAFT",
		1: "LESSON_SCHEDULING_STATUS_PUBLISHED",
		2: "LESSON_SCHEDULING_STATUS_COMPLETED",
		3: "LESSON_SCHEDULING_STATUS_CANCELED",
	}
	LessonSchedulingStatus_value = map[string]int32{
		"LESSON_SCHEDULING_STATUS_DRAFT":     0,
		"LESSON_SCHEDULING_STATUS_PUBLISHED": 1,
		"LESSON_SCHEDULING_STATUS_COMPLETED": 2,
		"LESSON_SCHEDULING_STATUS_CANCELED":  3,
	}
)

func (x LessonSchedulingStatus) Enum() *LessonSchedulingStatus {
	p := new(LessonSchedulingStatus)
	*p = x
	return p
}

func (x LessonSchedulingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LessonSchedulingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_lessonmgmt_common_enums_proto_enumTypes[9].Descriptor()
}

func (LessonSchedulingStatus) Type() protoreflect.EnumType {
	return &file_lessonmgmt_common_enums_proto_enumTypes[9]
}

func (x LessonSchedulingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LessonSchedulingStatus.Descriptor instead.
func (LessonSchedulingStatus) EnumDescriptor() ([]byte, []int) {
	return file_lessonmgmt_common_enums_proto_rawDescGZIP(), []int{9}
}

type ImportUserEventStatus int32

const (
	ImportUserEventStatus_IMPORT_USER_EVENT_STATUS_WAITING  ImportUserEventStatus = 0
	ImportUserEventStatus_IMPORT_USER_EVENT_STATUS_FINISHED ImportUserEventStatus = 1
	ImportUserEventStatus_IMPORT_USER_EVENT_STATUS_FAILED   ImportUserEventStatus = 2
)

// Enum value maps for ImportUserEventStatus.
var (
	ImportUserEventStatus_name = map[int32]string{
		0: "IMPORT_USER_EVENT_STATUS_WAITING",
		1: "IMPORT_USER_EVENT_STATUS_FINISHED",
		2: "IMPORT_USER_EVENT_STATUS_FAILED",
	}
	ImportUserEventStatus_value = map[string]int32{
		"IMPORT_USER_EVENT_STATUS_WAITING":  0,
		"IMPORT_USER_EVENT_STATUS_FINISHED": 1,
		"IMPORT_USER_EVENT_STATUS_FAILED":   2,
	}
)

func (x ImportUserEventStatus) Enum() *ImportUserEventStatus {
	p := new(ImportUserEventStatus)
	*p = x
	return p
}

func (x ImportUserEventStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImportUserEventStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_lessonmgmt_common_enums_proto_enumTypes[10].Descriptor()
}

func (ImportUserEventStatus) Type() protoreflect.EnumType {
	return &file_lessonmgmt_common_enums_proto_enumTypes[10]
}

func (x ImportUserEventStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImportUserEventStatus.Descriptor instead.
func (ImportUserEventStatus) EnumDescriptor() ([]byte, []int) {
	return file_lessonmgmt_common_enums_proto_rawDescGZIP(), []int{10}
}

type DateOfWeek int32

const (
	DateOfWeek_DATE_OF_WEEK_SUNDAY    DateOfWeek = 0
	DateOfWeek_DATE_OF_WEEK_MONDAY    DateOfWeek = 1
	DateOfWeek_DATE_OF_WEEK_TUESDAY   DateOfWeek = 2
	DateOfWeek_DATE_OF_WEEK_WEDNESDAY DateOfWeek = 3
	DateOfWeek_DATE_OF_WEEK_THURSDAY  DateOfWeek = 4
	DateOfWeek_DATE_OF_WEEK_FRIDAY    DateOfWeek = 5
	DateOfWeek_DATE_OF_WEEK_SATURDAY  DateOfWeek = 6
)

// Enum value maps for DateOfWeek.
var (
	DateOfWeek_name = map[int32]string{
		0: "DATE_OF_WEEK_SUNDAY",
		1: "DATE_OF_WEEK_MONDAY",
		2: "DATE_OF_WEEK_TUESDAY",
		3: "DATE_OF_WEEK_WEDNESDAY",
		4: "DATE_OF_WEEK_THURSDAY",
		5: "DATE_OF_WEEK_FRIDAY",
		6: "DATE_OF_WEEK_SATURDAY",
	}
	DateOfWeek_value = map[string]int32{
		"DATE_OF_WEEK_SUNDAY":    0,
		"DATE_OF_WEEK_MONDAY":    1,
		"DATE_OF_WEEK_TUESDAY":   2,
		"DATE_OF_WEEK_WEDNESDAY": 3,
		"DATE_OF_WEEK_THURSDAY":  4,
		"DATE_OF_WEEK_FRIDAY":    5,
		"DATE_OF_WEEK_SATURDAY":  6,
	}
)

func (x DateOfWeek) Enum() *DateOfWeek {
	p := new(DateOfWeek)
	*p = x
	return p
}

func (x DateOfWeek) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DateOfWeek) Descriptor() protoreflect.EnumDescriptor {
	return file_lessonmgmt_common_enums_proto_enumTypes[11].Descriptor()
}

func (DateOfWeek) Type() protoreflect.EnumType {
	return &file_lessonmgmt_common_enums_proto_enumTypes[11]
}

func (x DateOfWeek) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DateOfWeek.Descriptor instead.
func (DateOfWeek) EnumDescriptor() ([]byte, []int) {
	return file_lessonmgmt_common_enums_proto_rawDescGZIP(), []int{11}
}

type AchievementCrown int32

const (
	AchievementCrown_ACHIEVEMENT_CROWN_NONE   AchievementCrown = 0
	AchievementCrown_ACHIEVEMENT_CROWN_BRONZE AchievementCrown = 1
	AchievementCrown_ACHIEVEMENT_CROWN_SILVER AchievementCrown = 2
	AchievementCrown_ACHIEVEMENT_CROWN_GOLD   AchievementCrown = 3
)

// Enum value maps for AchievementCrown.
var (
	AchievementCrown_name = map[int32]string{
		0: "ACHIEVEMENT_CROWN_NONE",
		1: "ACHIEVEMENT_CROWN_BRONZE",
		2: "ACHIEVEMENT_CROWN_SILVER",
		3: "ACHIEVEMENT_CROWN_GOLD",
	}
	AchievementCrown_value = map[string]int32{
		"ACHIEVEMENT_CROWN_NONE":   0,
		"ACHIEVEMENT_CROWN_BRONZE": 1,
		"ACHIEVEMENT_CROWN_SILVER": 2,
		"ACHIEVEMENT_CROWN_GOLD":   3,
	}
)

func (x AchievementCrown) Enum() *AchievementCrown {
	p := new(AchievementCrown)
	*p = x
	return p
}

func (x AchievementCrown) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AchievementCrown) Descriptor() protoreflect.EnumDescriptor {
	return file_lessonmgmt_common_enums_proto_enumTypes[12].Descriptor()
}

func (AchievementCrown) Type() protoreflect.EnumType {
	return &file_lessonmgmt_common_enums_proto_enumTypes[12]
}

func (x AchievementCrown) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AchievementCrown.Descriptor instead.
func (AchievementCrown) EnumDescriptor() ([]byte, []int) {
	return file_lessonmgmt_common_enums_proto_rawDescGZIP(), []int{12}
}

type Platform int32

const (
	Platform_PLATFORM_BACKOFFICE Platform = 0
	Platform_PLATFORM_TEACHER    Platform = 1
	Platform_PLATFORM_LEARNER    Platform = 2
)

// Enum value maps for Platform.
var (
	Platform_name = map[int32]string{
		0: "PLATFORM_BACKOFFICE",
		1: "PLATFORM_TEACHER",
		2: "PLATFORM_LEARNER",
	}
	Platform_value = map[string]int32{
		"PLATFORM_BACKOFFICE": 0,
		"PLATFORM_TEACHER":    1,
		"PLATFORM_LEARNER":    2,
	}
)

func (x Platform) Enum() *Platform {
	p := new(Platform)
	*p = x
	return p
}

func (x Platform) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Platform) Descriptor() protoreflect.EnumDescriptor {
	return file_lessonmgmt_common_enums_proto_enumTypes[13].Descriptor()
}

func (Platform) Type() protoreflect.EnumType {
	return &file_lessonmgmt_common_enums_proto_enumTypes[13]
}

func (x Platform) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Platform.Descriptor instead.
func (Platform) EnumDescriptor() ([]byte, []int) {
	return file_lessonmgmt_common_enums_proto_rawDescGZIP(), []int{13}
}

type StudentAttendStatus int32

const (
	StudentAttendStatus_STUDENT_ATTEND_STATUS_EMPTY           StudentAttendStatus = 0
	StudentAttendStatus_STUDENT_ATTEND_STATUS_ATTEND          StudentAttendStatus = 1
	StudentAttendStatus_STUDENT_ATTEND_STATUS_ABSENT          StudentAttendStatus = 2
	StudentAttendStatus_STUDENT_ATTEND_STATUS_LATE            StudentAttendStatus = 3
	StudentAttendStatus_STUDENT_ATTEND_STATUS_LEAVE_EARLY     StudentAttendStatus = 4
	StudentAttendStatus_STUDENT_ATTEND_STATUS_INFORMED_ABSENT StudentAttendStatus = 5
	StudentAttendStatus_STUDENT_ATTEND_STATUS_INFORMED_LATE   StudentAttendStatus = 6
	StudentAttendStatus_STUDENT_ATTEND_STATUS_REALLOCATE      StudentAttendStatus = 7
)

// Enum value maps for StudentAttendStatus.
var (
	StudentAttendStatus_name = map[int32]string{
		0: "STUDENT_ATTEND_STATUS_EMPTY",
		1: "STUDENT_ATTEND_STATUS_ATTEND",
		2: "STUDENT_ATTEND_STATUS_ABSENT",
		3: "STUDENT_ATTEND_STATUS_LATE",
		4: "STUDENT_ATTEND_STATUS_LEAVE_EARLY",
		5: "STUDENT_ATTEND_STATUS_INFORMED_ABSENT",
		6: "STUDENT_ATTEND_STATUS_INFORMED_LATE",
		7: "STUDENT_ATTEND_STATUS_REALLOCATE",
	}
	StudentAttendStatus_value = map[string]int32{
		"STUDENT_ATTEND_STATUS_EMPTY":           0,
		"STUDENT_ATTEND_STATUS_ATTEND":          1,
		"STUDENT_ATTEND_STATUS_ABSENT":          2,
		"STUDENT_ATTEND_STATUS_LATE":            3,
		"STUDENT_ATTEND_STATUS_LEAVE_EARLY":     4,
		"STUDENT_ATTEND_STATUS_INFORMED_ABSENT": 5,
		"STUDENT_ATTEND_STATUS_INFORMED_LATE":   6,
		"STUDENT_ATTEND_STATUS_REALLOCATE":      7,
	}
)

func (x StudentAttendStatus) Enum() *StudentAttendStatus {
	p := new(StudentAttendStatus)
	*p = x
	return p
}

func (x StudentAttendStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StudentAttendStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_lessonmgmt_common_enums_proto_enumTypes[14].Descriptor()
}

func (StudentAttendStatus) Type() protoreflect.EnumType {
	return &file_lessonmgmt_common_enums_proto_enumTypes[14]
}

func (x StudentAttendStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StudentAttendStatus.Descriptor instead.
func (StudentAttendStatus) EnumDescriptor() ([]byte, []int) {
	return file_lessonmgmt_common_enums_proto_rawDescGZIP(), []int{14}
}

type ValueType int32

const (
	ValueType_VALUE_TYPE_INT    ValueType = 0
	ValueType_VALUE_TYPE_STRING ValueType = 1
	ValueType_VALUE_TYPE_BOOL   ValueType = 2
	// array
	ValueType_VALUE_TYPE_INT_ARRAY    ValueType = 3
	ValueType_VALUE_TYPE_STRING_ARRAY ValueType = 4
	// set
	ValueType_VALUE_TYPE_INT_SET    ValueType = 5
	ValueType_VALUE_TYPE_STRING_SET ValueType = 6
	// map
	ValueType_VALUE_TYPE_STRING_MAP ValueType = 7
	ValueType_VALUE_TYPE_INT_MAP    ValueType = 8
)

// Enum value maps for ValueType.
var (
	ValueType_name = map[int32]string{
		0: "VALUE_TYPE_INT",
		1: "VALUE_TYPE_STRING",
		2: "VALUE_TYPE_BOOL",
		3: "VALUE_TYPE_INT_ARRAY",
		4: "VALUE_TYPE_STRING_ARRAY",
		5: "VALUE_TYPE_INT_SET",
		6: "VALUE_TYPE_STRING_SET",
		7: "VALUE_TYPE_STRING_MAP",
		8: "VALUE_TYPE_INT_MAP",
	}
	ValueType_value = map[string]int32{
		"VALUE_TYPE_INT":          0,
		"VALUE_TYPE_STRING":       1,
		"VALUE_TYPE_BOOL":         2,
		"VALUE_TYPE_INT_ARRAY":    3,
		"VALUE_TYPE_STRING_ARRAY": 4,
		"VALUE_TYPE_INT_SET":      5,
		"VALUE_TYPE_STRING_SET":   6,
		"VALUE_TYPE_STRING_MAP":   7,
		"VALUE_TYPE_INT_MAP":      8,
	}
)

func (x ValueType) Enum() *ValueType {
	p := new(ValueType)
	*p = x
	return p
}

func (x ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_lessonmgmt_common_enums_proto_enumTypes[15].Descriptor()
}

func (ValueType) Type() protoreflect.EnumType {
	return &file_lessonmgmt_common_enums_proto_enumTypes[15]
}

func (x ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValueType.Descriptor instead.
func (ValueType) EnumDescriptor() ([]byte, []int) {
	return file_lessonmgmt_common_enums_proto_rawDescGZIP(), []int{15}
}

type ExamLOReviewOption int32

const (
	ExamLOReviewOption_EXAM_LO_REVIEW_OPTION_IMMEDIATELY    ExamLOReviewOption = 0
	ExamLOReviewOption_EXAM_LO_REVIEW_OPTION_AFTER_DUE_DATE ExamLOReviewOption = 1
)

// Enum value maps for ExamLOReviewOption.
var (
	ExamLOReviewOption_name = map[int32]string{
		0: "EXAM_LO_REVIEW_OPTION_IMMEDIATELY",
		1: "EXAM_LO_REVIEW_OPTION_AFTER_DUE_DATE",
	}
	ExamLOReviewOption_value = map[string]int32{
		"EXAM_LO_REVIEW_OPTION_IMMEDIATELY":    0,
		"EXAM_LO_REVIEW_OPTION_AFTER_DUE_DATE": 1,
	}
)

func (x ExamLOReviewOption) Enum() *ExamLOReviewOption {
	p := new(ExamLOReviewOption)
	*p = x
	return p
}

func (x ExamLOReviewOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExamLOReviewOption) Descriptor() protoreflect.EnumDescriptor {
	return file_lessonmgmt_common_enums_proto_enumTypes[16].Descriptor()
}

func (ExamLOReviewOption) Type() protoreflect.EnumType {
	return &file_lessonmgmt_common_enums_proto_enumTypes[16]
}

func (x ExamLOReviewOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExamLOReviewOption.Descriptor instead.
func (ExamLOReviewOption) EnumDescriptor() ([]byte, []int) {
	return file_lessonmgmt_common_enums_proto_rawDescGZIP(), []int{16}
}

type StudentAttendanceNotice int32

const (
	StudentAttendanceNotice_NOTICE_EMPTY StudentAttendanceNotice = 0
	StudentAttendanceNotice_IN_ADVANCE   StudentAttendanceNotice = 1
	StudentAttendanceNotice_ON_THE_DAY   StudentAttendanceNotice = 2
	StudentAttendanceNotice_NO_CONTACT   StudentAttendanceNotice = 3
)

// Enum value maps for StudentAttendanceNotice.
var (
	StudentAttendanceNotice_name = map[int32]string{
		0: "NOTICE_EMPTY",
		1: "IN_ADVANCE",
		2: "ON_THE_DAY",
		3: "NO_CONTACT",
	}
	StudentAttendanceNotice_value = map[string]int32{
		"NOTICE_EMPTY": 0,
		"IN_ADVANCE":   1,
		"ON_THE_DAY":   2,
		"NO_CONTACT":   3,
	}
)

func (x StudentAttendanceNotice) Enum() *StudentAttendanceNotice {
	p := new(StudentAttendanceNotice)
	*p = x
	return p
}

func (x StudentAttendanceNotice) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StudentAttendanceNotice) Descriptor() protoreflect.EnumDescriptor {
	return file_lessonmgmt_common_enums_proto_enumTypes[17].Descriptor()
}

func (StudentAttendanceNotice) Type() protoreflect.EnumType {
	return &file_lessonmgmt_common_enums_proto_enumTypes[17]
}

func (x StudentAttendanceNotice) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StudentAttendanceNotice.Descriptor instead.
func (StudentAttendanceNotice) EnumDescriptor() ([]byte, []int) {
	return file_lessonmgmt_common_enums_proto_rawDescGZIP(), []int{17}
}

type StudentAttendanceReason int32

const (
	StudentAttendanceReason_REASON_EMPTY       StudentAttendanceReason = 0
	StudentAttendanceReason_PHYSICAL_CONDITION StudentAttendanceReason = 1
	StudentAttendanceReason_SCHOOL_EVENT       StudentAttendanceReason = 2
	StudentAttendanceReason_FAMILY_REASON      StudentAttendanceReason = 3
	StudentAttendanceReason_REASON_OTHER       StudentAttendanceReason = 4
)

// Enum value maps for StudentAttendanceReason.
var (
	StudentAttendanceReason_name = map[int32]string{
		0: "REASON_EMPTY",
		1: "PHYSICAL_CONDITION",
		2: "SCHOOL_EVENT",
		3: "FAMILY_REASON",
		4: "REASON_OTHER",
	}
	StudentAttendanceReason_value = map[string]int32{
		"REASON_EMPTY":       0,
		"PHYSICAL_CONDITION": 1,
		"SCHOOL_EVENT":       2,
		"FAMILY_REASON":      3,
		"REASON_OTHER":       4,
	}
)

func (x StudentAttendanceReason) Enum() *StudentAttendanceReason {
	p := new(StudentAttendanceReason)
	*p = x
	return p
}

func (x StudentAttendanceReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StudentAttendanceReason) Descriptor() protoreflect.EnumDescriptor {
	return file_lessonmgmt_common_enums_proto_enumTypes[18].Descriptor()
}

func (StudentAttendanceReason) Type() protoreflect.EnumType {
	return &file_lessonmgmt_common_enums_proto_enumTypes[18]
}

func (x StudentAttendanceReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StudentAttendanceReason.Descriptor instead.
func (StudentAttendanceReason) EnumDescriptor() ([]byte, []int) {
	return file_lessonmgmt_common_enums_proto_rawDescGZIP(), []int{18}
}

type LearningMaterialVendorType int32

const (
	LearningMaterialVendorType_LM_VENDOR_TYPE_NONE       LearningMaterialVendorType = 0
	LearningMaterialVendorType_LM_VENDOR_TYPE_MANABIE    LearningMaterialVendorType = 1
	LearningMaterialVendorType_LM_VENDOR_TYPE_LEARNOSITY LearningMaterialVendorType = 2
)

// Enum value maps for LearningMaterialVendorType.
var (
	LearningMaterialVendorType_name = map[int32]string{
		0: "LM_VENDOR_TYPE_NONE",
		1: "LM_VENDOR_TYPE_MANABIE",
		2: "LM_VENDOR_TYPE_LEARNOSITY",
	}
	LearningMaterialVendorType_value = map[string]int32{
		"LM_VENDOR_TYPE_NONE":       0,
		"LM_VENDOR_TYPE_MANABIE":    1,
		"LM_VENDOR_TYPE_LEARNOSITY": 2,
	}
)

func (x LearningMaterialVendorType) Enum() *LearningMaterialVendorType {
	p := new(LearningMaterialVendorType)
	*p = x
	return p
}

func (x LearningMaterialVendorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LearningMaterialVendorType) Descriptor() protoreflect.EnumDescriptor {
	return file_lessonmgmt_common_enums_proto_enumTypes[19].Descriptor()
}

func (LearningMaterialVendorType) Type() protoreflect.EnumType {
	return &file_lessonmgmt_common_enums_proto_enumTypes[19]
}

func (x LearningMaterialVendorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LearningMaterialVendorType.Descriptor instead.
func (LearningMaterialVendorType) EnumDescriptor() ([]byte, []int) {
	return file_lessonmgmt_common_enums_proto_rawDescGZIP(), []int{19}
}

var File_lessonmgmt_common_enums_proto protoreflect.FileDescriptor

var file_lessonmgmt_common_enums_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x6d, 0x67, 0x6d, 0x74, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x11, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x6d, 0x67, 0x6d, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2a, 0x6f, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x56,
	0x4e, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x49,
	0x44, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x53,
	0x47, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x4a,
	0x50, 0x10, 0x05, 0x2a, 0x91, 0x02, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x41, 0x54,
	0x48, 0x53, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x42, 0x49, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x55, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x53, 0x10, 0x03, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x48, 0x45, 0x4d, 0x49, 0x53,
	0x54, 0x52, 0x59, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x47, 0x45, 0x4f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x59, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x45, 0x4e, 0x47, 0x4c, 0x49, 0x53, 0x48, 0x10,
	0x06, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x45, 0x4e, 0x47,
	0x4c, 0x49, 0x53, 0x48, 0x5f, 0x32, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x55, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x4a, 0x41, 0x50, 0x41, 0x4e, 0x45, 0x53, 0x45, 0x10, 0x08, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x43, 0x49, 0x45, 0x4e, 0x43,
	0x45, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53,
	0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x49, 0x45, 0x53, 0x10, 0x0a, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4c, 0x49, 0x54, 0x45, 0x52,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x0b, 0x2a, 0x6b, 0x0a, 0x0a, 0x4c, 0x65, 0x73, 0x73, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x45, 0x53, 0x53, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4c,
	0x45, 0x53, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e,
	0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x45, 0x53, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x4c, 0x45, 0x53, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x59, 0x42, 0x52,
	0x49, 0x44, 0x10, 0x03, 0x2a, 0x56, 0x0a, 0x0d, 0x54, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x20, 0x4c, 0x45, 0x53, 0x53, 0x4f, 0x4e, 0x5f,
	0x54, 0x45, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x49,
	0x4e, 0x44, 0x49, 0x56, 0x49, 0x44, 0x55, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x4c,
	0x45, 0x53, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x01, 0x2a, 0xda, 0x01, 0x0a,
	0x15, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x49,
	0x4e, 0x47, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x4c, 0x45, 0x41, 0x52,
	0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x26,
	0x0a, 0x22, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x53, 0x48, 0x5f,
	0x43, 0x41, 0x52, 0x44, 0x10, 0x02, 0x12, 0x2c, 0x0a, 0x28, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x49,
	0x4e, 0x47, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47,
	0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x58, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x10, 0x04, 0x2a, 0x76, 0x0a, 0x0d, 0x53, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54,
	0x55, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x22, 0x04, 0x08, 0x01, 0x10, 0x03, 0x2a, 0x18, 0x53, 0x54, 0x55, 0x44, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x4f, 0x54, 0x45, 0x4e, 0x54,
	0x49, 0x41, 0x4c, 0x2a, 0x17, 0x53, 0x54, 0x55, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x2a, 0x13, 0x53, 0x54,
	0x55, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x51, 0x55, 0x49,
	0x54, 0x2a, 0x8e, 0x01, 0x0a, 0x17, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x72,
	0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a,
	0x1e, 0x53, 0x54, 0x55, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x55, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4e, 0x52,
	0x4f, 0x4c, 0x4c, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50,
	0x4f, 0x54, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x54,
	0x55, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0x02, 0x2a, 0x5f, 0x0a, 0x14, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x54, 0x65, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x25, 0x0a, 0x21, 0x4c, 0x45,
	0x53, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x45,
	0x54, 0x48, 0x4f, 0x44, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x56, 0x49, 0x44, 0x55, 0x41, 0x4c, 0x10,
	0x00, 0x12, 0x20, 0x0a, 0x1c, 0x4c, 0x45, 0x53, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x41, 0x43,
	0x48, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x10, 0x01, 0x2a, 0xc6, 0x01, 0x0a, 0x14, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x54, 0x65,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x1e,
	0x4c, 0x45, 0x53, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f,
	0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x21, 0x0a, 0x1d, 0x4c, 0x45, 0x53, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x45, 0x41, 0x43, 0x48,
	0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e,
	0x45, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x4c, 0x45, 0x53, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x45,
	0x41, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x5f, 0x48, 0x59,
	0x42, 0x52, 0x49, 0x44, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x4c, 0x45, 0x53, 0x53, 0x4f, 0x4e,
	0x5f, 0x54, 0x45, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d,
	0x5f, 0x5a, 0x4f, 0x4f, 0x4d, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x4c, 0x45, 0x53, 0x53, 0x4f,
	0x4e, 0x5f, 0x54, 0x45, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55,
	0x4d, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x44, 0x4f, 0x10, 0x04, 0x2a, 0xb3, 0x01, 0x0a,
	0x16, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x1e, 0x4c, 0x45, 0x53, 0x53, 0x4f,
	0x4e, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x4c,
	0x45, 0x53, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x4c, 0x45, 0x53, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x43,
	0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x4c,
	0x45, 0x53, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44,
	0x10, 0x03, 0x2a, 0x89, 0x01, 0x0a, 0x15, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x20,
	0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46,
	0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4d, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x2a, 0xc3,
	0x01, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x12, 0x17, 0x0a,
	0x13, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x53, 0x55,
	0x4e, 0x44, 0x41, 0x59, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f,
	0x46, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x4d, 0x4f, 0x4e, 0x44, 0x41, 0x59, 0x10, 0x01, 0x12,
	0x18, 0x0a, 0x14, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f,
	0x54, 0x55, 0x45, 0x53, 0x44, 0x41, 0x59, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x57, 0x45, 0x44, 0x4e, 0x45, 0x53,
	0x44, 0x41, 0x59, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x46,
	0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x54, 0x48, 0x55, 0x52, 0x53, 0x44, 0x41, 0x59, 0x10, 0x04,
	0x12, 0x17, 0x0a, 0x13, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x57, 0x45, 0x45, 0x4b,
	0x5f, 0x46, 0x52, 0x49, 0x44, 0x41, 0x59, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x53, 0x41, 0x54, 0x55, 0x52, 0x44,
	0x41, 0x59, 0x10, 0x06, 0x2a, 0x86, 0x01, 0x0a, 0x10, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x6f, 0x77, 0x6e, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x48,
	0x49, 0x45, 0x56, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x4f, 0x57, 0x4e, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x4f, 0x57, 0x4e, 0x5f, 0x42, 0x52, 0x4f, 0x4e, 0x5a,
	0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x43, 0x52, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x49, 0x4c, 0x56, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x43, 0x52, 0x4f, 0x57, 0x4e, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x10, 0x03, 0x2a, 0x4f, 0x0a,
	0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x4c, 0x41,
	0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x4f, 0x46, 0x46, 0x49, 0x43, 0x45,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x54,
	0x45, 0x41, 0x43, 0x48, 0x45, 0x52, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4c, 0x41, 0x54,
	0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x45, 0x52, 0x10, 0x02, 0x2a, 0xbb,
	0x02, 0x0a, 0x13, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x55, 0x44, 0x45, 0x4e,
	0x54, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x55, 0x44, 0x45,
	0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x41, 0x54, 0x54, 0x45, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x55,
	0x44, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x41, 0x42, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x53,
	0x54, 0x55, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x53,
	0x54, 0x55, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f, 0x45, 0x41, 0x52, 0x4c, 0x59,
	0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x54, 0x55, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x54,
	0x54, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x46, 0x4f,
	0x52, 0x4d, 0x45, 0x44, 0x5f, 0x41, 0x42, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x27, 0x0a,
	0x23, 0x53, 0x54, 0x55, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x4e, 0x44, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x5f,
	0x4c, 0x41, 0x54, 0x45, 0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54, 0x55, 0x44, 0x45, 0x4e,
	0x54, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x52, 0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x45, 0x10, 0x07, 0x2a, 0xe8, 0x01, 0x0a,
	0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x52, 0x52,
	0x41, 0x59, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10,
	0x04, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x45, 0x54, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x07, 0x12,
	0x16, 0x0a, 0x12, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e,
	0x54, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x08, 0x2a, 0x65, 0x0a, 0x12, 0x45, 0x78, 0x61, 0x6d, 0x4c,
	0x4f, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a,
	0x21, 0x45, 0x58, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f,
	0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45,
	0x4c, 0x59, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x58, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x5f,
	0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x46,
	0x54, 0x45, 0x52, 0x5f, 0x44, 0x55, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x2a, 0x5b,
	0x0a, 0x17, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54,
	0x49, 0x43, 0x45, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x49,
	0x4e, 0x5f, 0x41, 0x44, 0x56, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4f,
	0x4e, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4e,
	0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x10, 0x03, 0x2a, 0x7a, 0x0a, 0x17, 0x53,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x48, 0x59, 0x53,
	0x49, 0x43, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x43, 0x48, 0x4f, 0x4f, 0x4c, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x04, 0x2a, 0x70, 0x0a, 0x1a, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x4d, 0x5f, 0x56, 0x45, 0x4e, 0x44,
	0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x16, 0x4c, 0x4d, 0x5f, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x42, 0x49, 0x45, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x4d,
	0x5f, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x41,
	0x52, 0x4e, 0x4f, 0x53, 0x49, 0x54, 0x59, 0x10, 0x02, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x62, 0x69, 0x65, 0x2d,
	0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x6d, 0x61, 0x6e, 0x61, 0x62, 0x75, 0x66, 0x2f, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x6d, 0x67,
	0x6d, 0x74, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_lessonmgmt_common_enums_proto_rawDescOnce sync.Once
	file_lessonmgmt_common_enums_proto_rawDescData = file_lessonmgmt_common_enums_proto_rawDesc
)

func file_lessonmgmt_common_enums_proto_rawDescGZIP() []byte {
	file_lessonmgmt_common_enums_proto_rawDescOnce.Do(func() {
		file_lessonmgmt_common_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_lessonmgmt_common_enums_proto_rawDescData)
	})
	return file_lessonmgmt_common_enums_proto_rawDescData
}

var file_lessonmgmt_common_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 20)
var file_lessonmgmt_common_enums_proto_goTypes = []interface{}{
	(Country)(0),                    // 0: lessonmgmt.common.Country
	(Subject)(0),                    // 1: lessonmgmt.common.Subject
	(LessonType)(0),                 // 2: lessonmgmt.common.LessonType
	(TeachingModel)(0),              // 3: lessonmgmt.common.TeachingModel
	(LearningObjectiveType)(0),      // 4: lessonmgmt.common.LearningObjectiveType
	(StudentStatus)(0),              // 5: lessonmgmt.common.StudentStatus
	(StudentEnrollmentStatus)(0),    // 6: lessonmgmt.common.StudentEnrollmentStatus
	(LessonTeachingMethod)(0),       // 7: lessonmgmt.common.LessonTeachingMethod
	(LessonTeachingMedium)(0),       // 8: lessonmgmt.common.LessonTeachingMedium
	(LessonSchedulingStatus)(0),     // 9: lessonmgmt.common.LessonSchedulingStatus
	(ImportUserEventStatus)(0),      // 10: lessonmgmt.common.ImportUserEventStatus
	(DateOfWeek)(0),                 // 11: lessonmgmt.common.DateOfWeek
	(AchievementCrown)(0),           // 12: lessonmgmt.common.AchievementCrown
	(Platform)(0),                   // 13: lessonmgmt.common.Platform
	(StudentAttendStatus)(0),        // 14: lessonmgmt.common.StudentAttendStatus
	(ValueType)(0),                  // 15: lessonmgmt.common.ValueType
	(ExamLOReviewOption)(0),         // 16: lessonmgmt.common.ExamLOReviewOption
	(StudentAttendanceNotice)(0),    // 17: lessonmgmt.common.StudentAttendanceNotice
	(StudentAttendanceReason)(0),    // 18: lessonmgmt.common.StudentAttendanceReason
	(LearningMaterialVendorType)(0), // 19: lessonmgmt.common.LearningMaterialVendorType
}
var file_lessonmgmt_common_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_lessonmgmt_common_enums_proto_init() }
func file_lessonmgmt_common_enums_proto_init() {
	if File_lessonmgmt_common_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lessonmgmt_common_enums_proto_rawDesc,
			NumEnums:      20,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_lessonmgmt_common_enums_proto_goTypes,
		DependencyIndexes: file_lessonmgmt_common_enums_proto_depIdxs,
		EnumInfos:         file_lessonmgmt_common_enums_proto_enumTypes,
	}.Build()
	File_lessonmgmt_common_enums_proto = out.File
	file_lessonmgmt_common_enums_proto_rawDesc = nil
	file_lessonmgmt_common_enums_proto_goTypes = nil
	file_lessonmgmt_common_enums_proto_depIdxs = nil
}
