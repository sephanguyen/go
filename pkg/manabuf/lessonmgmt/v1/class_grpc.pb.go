// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ClassReaderServiceClient is the client API for ClassReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClassReaderServiceClient interface {
	GetByStudentSubscription(ctx context.Context, in *GetByStudentSubscriptionRequest, opts ...grpc.CallOption) (*GetByStudentSubscriptionResponse, error)
}

type classReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClassReaderServiceClient(cc grpc.ClientConnInterface) ClassReaderServiceClient {
	return &classReaderServiceClient{cc}
}

func (c *classReaderServiceClient) GetByStudentSubscription(ctx context.Context, in *GetByStudentSubscriptionRequest, opts ...grpc.CallOption) (*GetByStudentSubscriptionResponse, error) {
	out := new(GetByStudentSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.ClassReaderService/GetByStudentSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClassReaderServiceServer is the server API for ClassReaderService service.
// All implementations should embed UnimplementedClassReaderServiceServer
// for forward compatibility
type ClassReaderServiceServer interface {
	GetByStudentSubscription(context.Context, *GetByStudentSubscriptionRequest) (*GetByStudentSubscriptionResponse, error)
}

// UnimplementedClassReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedClassReaderServiceServer struct {
}

func (UnimplementedClassReaderServiceServer) GetByStudentSubscription(context.Context, *GetByStudentSubscriptionRequest) (*GetByStudentSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByStudentSubscription not implemented")
}

// UnsafeClassReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClassReaderServiceServer will
// result in compilation errors.
type UnsafeClassReaderServiceServer interface {
	mustEmbedUnimplementedClassReaderServiceServer()
}

func RegisterClassReaderServiceServer(s grpc.ServiceRegistrar, srv ClassReaderServiceServer) {
	s.RegisterService(&_ClassReaderService_serviceDesc, srv)
}

func _ClassReaderService_GetByStudentSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByStudentSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassReaderServiceServer).GetByStudentSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.ClassReaderService/GetByStudentSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassReaderServiceServer).GetByStudentSubscription(ctx, req.(*GetByStudentSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClassReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lessonmgmt.v1.ClassReaderService",
	HandlerType: (*ClassReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetByStudentSubscription",
			Handler:    _ClassReaderService_GetByStudentSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lessonmgmt/v1/class.proto",
}
