// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LessonReportModifierServiceClient is the client API for LessonReportModifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LessonReportModifierServiceClient interface {
	// group lesson report
	SaveDraftGroupLessonReport(ctx context.Context, in *WriteGroupLessonReportRequest, opts ...grpc.CallOption) (*SaveDraftGroupLessonReportResponse, error)
	SubmitGroupLessonReport(ctx context.Context, in *WriteGroupLessonReportRequest, opts ...grpc.CallOption) (*SubmitGroupLessonReportResponse, error)
	// individual lesson report
	SaveDraftIndividualLessonReport(ctx context.Context, in *WriteIndividualLessonReportRequest, opts ...grpc.CallOption) (*SaveDraftIndividualLessonReportResponse, error)
	SubmitIndividualLessonReport(ctx context.Context, in *WriteIndividualLessonReportRequest, opts ...grpc.CallOption) (*SubmitIndividualLessonReportResponse, error)
}

type lessonReportModifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLessonReportModifierServiceClient(cc grpc.ClientConnInterface) LessonReportModifierServiceClient {
	return &lessonReportModifierServiceClient{cc}
}

func (c *lessonReportModifierServiceClient) SaveDraftGroupLessonReport(ctx context.Context, in *WriteGroupLessonReportRequest, opts ...grpc.CallOption) (*SaveDraftGroupLessonReportResponse, error) {
	out := new(SaveDraftGroupLessonReportResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.LessonReportModifierService/SaveDraftGroupLessonReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonReportModifierServiceClient) SubmitGroupLessonReport(ctx context.Context, in *WriteGroupLessonReportRequest, opts ...grpc.CallOption) (*SubmitGroupLessonReportResponse, error) {
	out := new(SubmitGroupLessonReportResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.LessonReportModifierService/SubmitGroupLessonReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonReportModifierServiceClient) SaveDraftIndividualLessonReport(ctx context.Context, in *WriteIndividualLessonReportRequest, opts ...grpc.CallOption) (*SaveDraftIndividualLessonReportResponse, error) {
	out := new(SaveDraftIndividualLessonReportResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.LessonReportModifierService/SaveDraftIndividualLessonReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonReportModifierServiceClient) SubmitIndividualLessonReport(ctx context.Context, in *WriteIndividualLessonReportRequest, opts ...grpc.CallOption) (*SubmitIndividualLessonReportResponse, error) {
	out := new(SubmitIndividualLessonReportResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.LessonReportModifierService/SubmitIndividualLessonReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LessonReportModifierServiceServer is the server API for LessonReportModifierService service.
// All implementations should embed UnimplementedLessonReportModifierServiceServer
// for forward compatibility
type LessonReportModifierServiceServer interface {
	// group lesson report
	SaveDraftGroupLessonReport(context.Context, *WriteGroupLessonReportRequest) (*SaveDraftGroupLessonReportResponse, error)
	SubmitGroupLessonReport(context.Context, *WriteGroupLessonReportRequest) (*SubmitGroupLessonReportResponse, error)
	// individual lesson report
	SaveDraftIndividualLessonReport(context.Context, *WriteIndividualLessonReportRequest) (*SaveDraftIndividualLessonReportResponse, error)
	SubmitIndividualLessonReport(context.Context, *WriteIndividualLessonReportRequest) (*SubmitIndividualLessonReportResponse, error)
}

// UnimplementedLessonReportModifierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLessonReportModifierServiceServer struct {
}

func (UnimplementedLessonReportModifierServiceServer) SaveDraftGroupLessonReport(context.Context, *WriteGroupLessonReportRequest) (*SaveDraftGroupLessonReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveDraftGroupLessonReport not implemented")
}
func (UnimplementedLessonReportModifierServiceServer) SubmitGroupLessonReport(context.Context, *WriteGroupLessonReportRequest) (*SubmitGroupLessonReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitGroupLessonReport not implemented")
}
func (UnimplementedLessonReportModifierServiceServer) SaveDraftIndividualLessonReport(context.Context, *WriteIndividualLessonReportRequest) (*SaveDraftIndividualLessonReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveDraftIndividualLessonReport not implemented")
}
func (UnimplementedLessonReportModifierServiceServer) SubmitIndividualLessonReport(context.Context, *WriteIndividualLessonReportRequest) (*SubmitIndividualLessonReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitIndividualLessonReport not implemented")
}

// UnsafeLessonReportModifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LessonReportModifierServiceServer will
// result in compilation errors.
type UnsafeLessonReportModifierServiceServer interface {
	mustEmbedUnimplementedLessonReportModifierServiceServer()
}

func RegisterLessonReportModifierServiceServer(s grpc.ServiceRegistrar, srv LessonReportModifierServiceServer) {
	s.RegisterService(&_LessonReportModifierService_serviceDesc, srv)
}

func _LessonReportModifierService_SaveDraftGroupLessonReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteGroupLessonReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonReportModifierServiceServer).SaveDraftGroupLessonReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.LessonReportModifierService/SaveDraftGroupLessonReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonReportModifierServiceServer).SaveDraftGroupLessonReport(ctx, req.(*WriteGroupLessonReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonReportModifierService_SubmitGroupLessonReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteGroupLessonReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonReportModifierServiceServer).SubmitGroupLessonReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.LessonReportModifierService/SubmitGroupLessonReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonReportModifierServiceServer).SubmitGroupLessonReport(ctx, req.(*WriteGroupLessonReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonReportModifierService_SaveDraftIndividualLessonReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteIndividualLessonReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonReportModifierServiceServer).SaveDraftIndividualLessonReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.LessonReportModifierService/SaveDraftIndividualLessonReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonReportModifierServiceServer).SaveDraftIndividualLessonReport(ctx, req.(*WriteIndividualLessonReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonReportModifierService_SubmitIndividualLessonReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteIndividualLessonReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonReportModifierServiceServer).SubmitIndividualLessonReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.LessonReportModifierService/SubmitIndividualLessonReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonReportModifierServiceServer).SubmitIndividualLessonReport(ctx, req.(*WriteIndividualLessonReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LessonReportModifierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lessonmgmt.v1.LessonReportModifierService",
	HandlerType: (*LessonReportModifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveDraftGroupLessonReport",
			Handler:    _LessonReportModifierService_SaveDraftGroupLessonReport_Handler,
		},
		{
			MethodName: "SubmitGroupLessonReport",
			Handler:    _LessonReportModifierService_SubmitGroupLessonReport_Handler,
		},
		{
			MethodName: "SaveDraftIndividualLessonReport",
			Handler:    _LessonReportModifierService_SaveDraftIndividualLessonReport_Handler,
		},
		{
			MethodName: "SubmitIndividualLessonReport",
			Handler:    _LessonReportModifierService_SubmitIndividualLessonReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lessonmgmt/v1/lesson_report.proto",
}

// LessonReportReaderServiceClient is the client API for LessonReportReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LessonReportReaderServiceClient interface {
	RetrievePartnerDomain(ctx context.Context, in *GetPartnerDomainRequest, opts ...grpc.CallOption) (*GetPartnerDomainResponse, error)
}

type lessonReportReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLessonReportReaderServiceClient(cc grpc.ClientConnInterface) LessonReportReaderServiceClient {
	return &lessonReportReaderServiceClient{cc}
}

func (c *lessonReportReaderServiceClient) RetrievePartnerDomain(ctx context.Context, in *GetPartnerDomainRequest, opts ...grpc.CallOption) (*GetPartnerDomainResponse, error) {
	out := new(GetPartnerDomainResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.LessonReportReaderService/RetrievePartnerDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LessonReportReaderServiceServer is the server API for LessonReportReaderService service.
// All implementations should embed UnimplementedLessonReportReaderServiceServer
// for forward compatibility
type LessonReportReaderServiceServer interface {
	RetrievePartnerDomain(context.Context, *GetPartnerDomainRequest) (*GetPartnerDomainResponse, error)
}

// UnimplementedLessonReportReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLessonReportReaderServiceServer struct {
}

func (UnimplementedLessonReportReaderServiceServer) RetrievePartnerDomain(context.Context, *GetPartnerDomainRequest) (*GetPartnerDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrievePartnerDomain not implemented")
}

// UnsafeLessonReportReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LessonReportReaderServiceServer will
// result in compilation errors.
type UnsafeLessonReportReaderServiceServer interface {
	mustEmbedUnimplementedLessonReportReaderServiceServer()
}

func RegisterLessonReportReaderServiceServer(s grpc.ServiceRegistrar, srv LessonReportReaderServiceServer) {
	s.RegisterService(&_LessonReportReaderService_serviceDesc, srv)
}

func _LessonReportReaderService_RetrievePartnerDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartnerDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonReportReaderServiceServer).RetrievePartnerDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.LessonReportReaderService/RetrievePartnerDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonReportReaderServiceServer).RetrievePartnerDomain(ctx, req.(*GetPartnerDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LessonReportReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lessonmgmt.v1.LessonReportReaderService",
	HandlerType: (*LessonReportReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrievePartnerDomain",
			Handler:    _LessonReportReaderService_RetrievePartnerDomain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lessonmgmt/v1/lesson_report.proto",
}
