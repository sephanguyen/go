// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ZoomAccountServiceClient is the client API for ZoomAccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZoomAccountServiceClient interface {
	ImportZoomAccount(ctx context.Context, in *ImportZoomAccountRequest, opts ...grpc.CallOption) (*ImportZoomAccountResponse, error)
	ExportZoomAccount(ctx context.Context, in *ExportZoomAccountRequest, opts ...grpc.CallOption) (*ExportZoomAccountResponse, error)
}

type zoomAccountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewZoomAccountServiceClient(cc grpc.ClientConnInterface) ZoomAccountServiceClient {
	return &zoomAccountServiceClient{cc}
}

func (c *zoomAccountServiceClient) ImportZoomAccount(ctx context.Context, in *ImportZoomAccountRequest, opts ...grpc.CallOption) (*ImportZoomAccountResponse, error) {
	out := new(ImportZoomAccountResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.ZoomAccountService/ImportZoomAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoomAccountServiceClient) ExportZoomAccount(ctx context.Context, in *ExportZoomAccountRequest, opts ...grpc.CallOption) (*ExportZoomAccountResponse, error) {
	out := new(ExportZoomAccountResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.ZoomAccountService/ExportZoomAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZoomAccountServiceServer is the server API for ZoomAccountService service.
// All implementations should embed UnimplementedZoomAccountServiceServer
// for forward compatibility
type ZoomAccountServiceServer interface {
	ImportZoomAccount(context.Context, *ImportZoomAccountRequest) (*ImportZoomAccountResponse, error)
	ExportZoomAccount(context.Context, *ExportZoomAccountRequest) (*ExportZoomAccountResponse, error)
}

// UnimplementedZoomAccountServiceServer should be embedded to have forward compatible implementations.
type UnimplementedZoomAccountServiceServer struct {
}

func (UnimplementedZoomAccountServiceServer) ImportZoomAccount(context.Context, *ImportZoomAccountRequest) (*ImportZoomAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportZoomAccount not implemented")
}
func (UnimplementedZoomAccountServiceServer) ExportZoomAccount(context.Context, *ExportZoomAccountRequest) (*ExportZoomAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportZoomAccount not implemented")
}

// UnsafeZoomAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZoomAccountServiceServer will
// result in compilation errors.
type UnsafeZoomAccountServiceServer interface {
	mustEmbedUnimplementedZoomAccountServiceServer()
}

func RegisterZoomAccountServiceServer(s grpc.ServiceRegistrar, srv ZoomAccountServiceServer) {
	s.RegisterService(&_ZoomAccountService_serviceDesc, srv)
}

func _ZoomAccountService_ImportZoomAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportZoomAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoomAccountServiceServer).ImportZoomAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.ZoomAccountService/ImportZoomAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoomAccountServiceServer).ImportZoomAccount(ctx, req.(*ImportZoomAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZoomAccountService_ExportZoomAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportZoomAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoomAccountServiceServer).ExportZoomAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.ZoomAccountService/ExportZoomAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoomAccountServiceServer).ExportZoomAccount(ctx, req.(*ExportZoomAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ZoomAccountService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lessonmgmt.v1.ZoomAccountService",
	HandlerType: (*ZoomAccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportZoomAccount",
			Handler:    _ZoomAccountService_ImportZoomAccount_Handler,
		},
		{
			MethodName: "ExportZoomAccount",
			Handler:    _ZoomAccountService_ExportZoomAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lessonmgmt/v1/zoom_account.proto",
}
