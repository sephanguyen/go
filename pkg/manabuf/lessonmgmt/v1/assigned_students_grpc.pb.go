// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AssignedStudentListServiceClient is the client API for AssignedStudentListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssignedStudentListServiceClient interface {
	GetAssignedStudentList(ctx context.Context, in *GetAssignedStudentListRequest, opts ...grpc.CallOption) (*GetAssignedStudentListResponse, error)
	GetStudentAttendance(ctx context.Context, in *GetStudentAttendanceRequest, opts ...grpc.CallOption) (*GetStudentAttendanceResponse, error)
}

type assignedStudentListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssignedStudentListServiceClient(cc grpc.ClientConnInterface) AssignedStudentListServiceClient {
	return &assignedStudentListServiceClient{cc}
}

func (c *assignedStudentListServiceClient) GetAssignedStudentList(ctx context.Context, in *GetAssignedStudentListRequest, opts ...grpc.CallOption) (*GetAssignedStudentListResponse, error) {
	out := new(GetAssignedStudentListResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.AssignedStudentListService/GetAssignedStudentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignedStudentListServiceClient) GetStudentAttendance(ctx context.Context, in *GetStudentAttendanceRequest, opts ...grpc.CallOption) (*GetStudentAttendanceResponse, error) {
	out := new(GetStudentAttendanceResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.AssignedStudentListService/GetStudentAttendance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssignedStudentListServiceServer is the server API for AssignedStudentListService service.
// All implementations should embed UnimplementedAssignedStudentListServiceServer
// for forward compatibility
type AssignedStudentListServiceServer interface {
	GetAssignedStudentList(context.Context, *GetAssignedStudentListRequest) (*GetAssignedStudentListResponse, error)
	GetStudentAttendance(context.Context, *GetStudentAttendanceRequest) (*GetStudentAttendanceResponse, error)
}

// UnimplementedAssignedStudentListServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAssignedStudentListServiceServer struct {
}

func (UnimplementedAssignedStudentListServiceServer) GetAssignedStudentList(context.Context, *GetAssignedStudentListRequest) (*GetAssignedStudentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssignedStudentList not implemented")
}
func (UnimplementedAssignedStudentListServiceServer) GetStudentAttendance(context.Context, *GetStudentAttendanceRequest) (*GetStudentAttendanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentAttendance not implemented")
}

// UnsafeAssignedStudentListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssignedStudentListServiceServer will
// result in compilation errors.
type UnsafeAssignedStudentListServiceServer interface {
	mustEmbedUnimplementedAssignedStudentListServiceServer()
}

func RegisterAssignedStudentListServiceServer(s grpc.ServiceRegistrar, srv AssignedStudentListServiceServer) {
	s.RegisterService(&_AssignedStudentListService_serviceDesc, srv)
}

func _AssignedStudentListService_GetAssignedStudentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssignedStudentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignedStudentListServiceServer).GetAssignedStudentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.AssignedStudentListService/GetAssignedStudentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignedStudentListServiceServer).GetAssignedStudentList(ctx, req.(*GetAssignedStudentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignedStudentListService_GetStudentAttendance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentAttendanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignedStudentListServiceServer).GetStudentAttendance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.AssignedStudentListService/GetStudentAttendance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignedStudentListServiceServer).GetStudentAttendance(ctx, req.(*GetStudentAttendanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AssignedStudentListService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lessonmgmt.v1.AssignedStudentListService",
	HandlerType: (*AssignedStudentListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAssignedStudentList",
			Handler:    _AssignedStudentListService_GetAssignedStudentList_Handler,
		},
		{
			MethodName: "GetStudentAttendance",
			Handler:    _AssignedStudentListService_GetStudentAttendance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lessonmgmt/v1/assigned_students.proto",
}
