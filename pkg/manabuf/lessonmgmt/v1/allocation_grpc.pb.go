// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LessonAllocationReaderServiceClient is the client API for LessonAllocationReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LessonAllocationReaderServiceClient interface {
	GetLessonAllocation(ctx context.Context, in *GetLessonAllocationRequest, opts ...grpc.CallOption) (*GetLessonAllocationResponse, error)
	GetLessonScheduleByStudentSubscription(ctx context.Context, in *GetLessonScheduleByStudentSubscriptionRequest, opts ...grpc.CallOption) (*GetLessonScheduleByStudentSubscriptionResponse, error)
}

type lessonAllocationReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLessonAllocationReaderServiceClient(cc grpc.ClientConnInterface) LessonAllocationReaderServiceClient {
	return &lessonAllocationReaderServiceClient{cc}
}

func (c *lessonAllocationReaderServiceClient) GetLessonAllocation(ctx context.Context, in *GetLessonAllocationRequest, opts ...grpc.CallOption) (*GetLessonAllocationResponse, error) {
	out := new(GetLessonAllocationResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.LessonAllocationReaderService/GetLessonAllocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonAllocationReaderServiceClient) GetLessonScheduleByStudentSubscription(ctx context.Context, in *GetLessonScheduleByStudentSubscriptionRequest, opts ...grpc.CallOption) (*GetLessonScheduleByStudentSubscriptionResponse, error) {
	out := new(GetLessonScheduleByStudentSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.LessonAllocationReaderService/GetLessonScheduleByStudentSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LessonAllocationReaderServiceServer is the server API for LessonAllocationReaderService service.
// All implementations should embed UnimplementedLessonAllocationReaderServiceServer
// for forward compatibility
type LessonAllocationReaderServiceServer interface {
	GetLessonAllocation(context.Context, *GetLessonAllocationRequest) (*GetLessonAllocationResponse, error)
	GetLessonScheduleByStudentSubscription(context.Context, *GetLessonScheduleByStudentSubscriptionRequest) (*GetLessonScheduleByStudentSubscriptionResponse, error)
}

// UnimplementedLessonAllocationReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLessonAllocationReaderServiceServer struct {
}

func (UnimplementedLessonAllocationReaderServiceServer) GetLessonAllocation(context.Context, *GetLessonAllocationRequest) (*GetLessonAllocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLessonAllocation not implemented")
}
func (UnimplementedLessonAllocationReaderServiceServer) GetLessonScheduleByStudentSubscription(context.Context, *GetLessonScheduleByStudentSubscriptionRequest) (*GetLessonScheduleByStudentSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLessonScheduleByStudentSubscription not implemented")
}

// UnsafeLessonAllocationReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LessonAllocationReaderServiceServer will
// result in compilation errors.
type UnsafeLessonAllocationReaderServiceServer interface {
	mustEmbedUnimplementedLessonAllocationReaderServiceServer()
}

func RegisterLessonAllocationReaderServiceServer(s grpc.ServiceRegistrar, srv LessonAllocationReaderServiceServer) {
	s.RegisterService(&_LessonAllocationReaderService_serviceDesc, srv)
}

func _LessonAllocationReaderService_GetLessonAllocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLessonAllocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonAllocationReaderServiceServer).GetLessonAllocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.LessonAllocationReaderService/GetLessonAllocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonAllocationReaderServiceServer).GetLessonAllocation(ctx, req.(*GetLessonAllocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonAllocationReaderService_GetLessonScheduleByStudentSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLessonScheduleByStudentSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonAllocationReaderServiceServer).GetLessonScheduleByStudentSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.LessonAllocationReaderService/GetLessonScheduleByStudentSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonAllocationReaderServiceServer).GetLessonScheduleByStudentSubscription(ctx, req.(*GetLessonScheduleByStudentSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LessonAllocationReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lessonmgmt.v1.LessonAllocationReaderService",
	HandlerType: (*LessonAllocationReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLessonAllocation",
			Handler:    _LessonAllocationReaderService_GetLessonAllocation_Handler,
		},
		{
			MethodName: "GetLessonScheduleByStudentSubscription",
			Handler:    _LessonAllocationReaderService_GetLessonScheduleByStudentSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lessonmgmt/v1/allocation.proto",
}
