// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CourseLocationScheduleServiceClient is the client API for CourseLocationScheduleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourseLocationScheduleServiceClient interface {
	ImportCourseLocationSchedule(ctx context.Context, in *ImportCourseLocationScheduleRequest, opts ...grpc.CallOption) (*ImportCourseLocationScheduleResponse, error)
	ExportCourseLocationSchedule(ctx context.Context, in *ExportCourseLocationScheduleRequest, opts ...grpc.CallOption) (*ExportCourseLocationScheduleResponse, error)
}

type courseLocationScheduleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseLocationScheduleServiceClient(cc grpc.ClientConnInterface) CourseLocationScheduleServiceClient {
	return &courseLocationScheduleServiceClient{cc}
}

func (c *courseLocationScheduleServiceClient) ImportCourseLocationSchedule(ctx context.Context, in *ImportCourseLocationScheduleRequest, opts ...grpc.CallOption) (*ImportCourseLocationScheduleResponse, error) {
	out := new(ImportCourseLocationScheduleResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.CourseLocationScheduleService/ImportCourseLocationSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseLocationScheduleServiceClient) ExportCourseLocationSchedule(ctx context.Context, in *ExportCourseLocationScheduleRequest, opts ...grpc.CallOption) (*ExportCourseLocationScheduleResponse, error) {
	out := new(ExportCourseLocationScheduleResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.CourseLocationScheduleService/ExportCourseLocationSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseLocationScheduleServiceServer is the server API for CourseLocationScheduleService service.
// All implementations should embed UnimplementedCourseLocationScheduleServiceServer
// for forward compatibility
type CourseLocationScheduleServiceServer interface {
	ImportCourseLocationSchedule(context.Context, *ImportCourseLocationScheduleRequest) (*ImportCourseLocationScheduleResponse, error)
	ExportCourseLocationSchedule(context.Context, *ExportCourseLocationScheduleRequest) (*ExportCourseLocationScheduleResponse, error)
}

// UnimplementedCourseLocationScheduleServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCourseLocationScheduleServiceServer struct {
}

func (UnimplementedCourseLocationScheduleServiceServer) ImportCourseLocationSchedule(context.Context, *ImportCourseLocationScheduleRequest) (*ImportCourseLocationScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportCourseLocationSchedule not implemented")
}
func (UnimplementedCourseLocationScheduleServiceServer) ExportCourseLocationSchedule(context.Context, *ExportCourseLocationScheduleRequest) (*ExportCourseLocationScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportCourseLocationSchedule not implemented")
}

// UnsafeCourseLocationScheduleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseLocationScheduleServiceServer will
// result in compilation errors.
type UnsafeCourseLocationScheduleServiceServer interface {
	mustEmbedUnimplementedCourseLocationScheduleServiceServer()
}

func RegisterCourseLocationScheduleServiceServer(s grpc.ServiceRegistrar, srv CourseLocationScheduleServiceServer) {
	s.RegisterService(&_CourseLocationScheduleService_serviceDesc, srv)
}

func _CourseLocationScheduleService_ImportCourseLocationSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportCourseLocationScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseLocationScheduleServiceServer).ImportCourseLocationSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.CourseLocationScheduleService/ImportCourseLocationSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseLocationScheduleServiceServer).ImportCourseLocationSchedule(ctx, req.(*ImportCourseLocationScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseLocationScheduleService_ExportCourseLocationSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportCourseLocationScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseLocationScheduleServiceServer).ExportCourseLocationSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.CourseLocationScheduleService/ExportCourseLocationSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseLocationScheduleServiceServer).ExportCourseLocationSchedule(ctx, req.(*ExportCourseLocationScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CourseLocationScheduleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lessonmgmt.v1.CourseLocationScheduleService",
	HandlerType: (*CourseLocationScheduleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportCourseLocationSchedule",
			Handler:    _CourseLocationScheduleService_ImportCourseLocationSchedule_Handler,
		},
		{
			MethodName: "ExportCourseLocationSchedule",
			Handler:    _CourseLocationScheduleService_ExportCourseLocationSchedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lessonmgmt/v1/course_location_schedule.proto",
}
