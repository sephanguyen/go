// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ClassroomReaderServiceClient is the client API for ClassroomReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClassroomReaderServiceClient interface {
	RetrieveClassroomsByLocationID(ctx context.Context, in *RetrieveClassroomsByLocationIDRequest, opts ...grpc.CallOption) (*RetrieveClassroomsByLocationIDResponse, error)
}

type classroomReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClassroomReaderServiceClient(cc grpc.ClientConnInterface) ClassroomReaderServiceClient {
	return &classroomReaderServiceClient{cc}
}

func (c *classroomReaderServiceClient) RetrieveClassroomsByLocationID(ctx context.Context, in *RetrieveClassroomsByLocationIDRequest, opts ...grpc.CallOption) (*RetrieveClassroomsByLocationIDResponse, error) {
	out := new(RetrieveClassroomsByLocationIDResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.ClassroomReaderService/RetrieveClassroomsByLocationID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClassroomReaderServiceServer is the server API for ClassroomReaderService service.
// All implementations should embed UnimplementedClassroomReaderServiceServer
// for forward compatibility
type ClassroomReaderServiceServer interface {
	RetrieveClassroomsByLocationID(context.Context, *RetrieveClassroomsByLocationIDRequest) (*RetrieveClassroomsByLocationIDResponse, error)
}

// UnimplementedClassroomReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedClassroomReaderServiceServer struct {
}

func (UnimplementedClassroomReaderServiceServer) RetrieveClassroomsByLocationID(context.Context, *RetrieveClassroomsByLocationIDRequest) (*RetrieveClassroomsByLocationIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveClassroomsByLocationID not implemented")
}

// UnsafeClassroomReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClassroomReaderServiceServer will
// result in compilation errors.
type UnsafeClassroomReaderServiceServer interface {
	mustEmbedUnimplementedClassroomReaderServiceServer()
}

func RegisterClassroomReaderServiceServer(s grpc.ServiceRegistrar, srv ClassroomReaderServiceServer) {
	s.RegisterService(&_ClassroomReaderService_serviceDesc, srv)
}

func _ClassroomReaderService_RetrieveClassroomsByLocationID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveClassroomsByLocationIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassroomReaderServiceServer).RetrieveClassroomsByLocationID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.ClassroomReaderService/RetrieveClassroomsByLocationID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassroomReaderServiceServer).RetrieveClassroomsByLocationID(ctx, req.(*RetrieveClassroomsByLocationIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClassroomReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lessonmgmt.v1.ClassroomReaderService",
	HandlerType: (*ClassroomReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveClassroomsByLocationID",
			Handler:    _ClassroomReaderService_RetrieveClassroomsByLocationID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lessonmgmt/v1/classroom.proto",
}
