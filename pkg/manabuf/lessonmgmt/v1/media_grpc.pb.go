// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MediaReaderServiceClient is the client API for MediaReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediaReaderServiceClient interface {
	RetrieveMediasByIDs(ctx context.Context, in *RetrieveMediasByIDsRequest, opts ...grpc.CallOption) (*RetrieveMediasByIDsResponse, error)
	CreateMedia(ctx context.Context, in *CreateMediaRequest, opts ...grpc.CallOption) (*CreateMediaResponse, error)
	DeleteMedias(ctx context.Context, in *DeleteMediasRequest, opts ...grpc.CallOption) (*DeleteMediasResponse, error)
}

type mediaReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaReaderServiceClient(cc grpc.ClientConnInterface) MediaReaderServiceClient {
	return &mediaReaderServiceClient{cc}
}

func (c *mediaReaderServiceClient) RetrieveMediasByIDs(ctx context.Context, in *RetrieveMediasByIDsRequest, opts ...grpc.CallOption) (*RetrieveMediasByIDsResponse, error) {
	out := new(RetrieveMediasByIDsResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.MediaReaderService/RetrieveMediasByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaReaderServiceClient) CreateMedia(ctx context.Context, in *CreateMediaRequest, opts ...grpc.CallOption) (*CreateMediaResponse, error) {
	out := new(CreateMediaResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.MediaReaderService/CreateMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaReaderServiceClient) DeleteMedias(ctx context.Context, in *DeleteMediasRequest, opts ...grpc.CallOption) (*DeleteMediasResponse, error) {
	out := new(DeleteMediasResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.MediaReaderService/DeleteMedias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediaReaderServiceServer is the server API for MediaReaderService service.
// All implementations should embed UnimplementedMediaReaderServiceServer
// for forward compatibility
type MediaReaderServiceServer interface {
	RetrieveMediasByIDs(context.Context, *RetrieveMediasByIDsRequest) (*RetrieveMediasByIDsResponse, error)
	CreateMedia(context.Context, *CreateMediaRequest) (*CreateMediaResponse, error)
	DeleteMedias(context.Context, *DeleteMediasRequest) (*DeleteMediasResponse, error)
}

// UnimplementedMediaReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMediaReaderServiceServer struct {
}

func (UnimplementedMediaReaderServiceServer) RetrieveMediasByIDs(context.Context, *RetrieveMediasByIDsRequest) (*RetrieveMediasByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveMediasByIDs not implemented")
}
func (UnimplementedMediaReaderServiceServer) CreateMedia(context.Context, *CreateMediaRequest) (*CreateMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMedia not implemented")
}
func (UnimplementedMediaReaderServiceServer) DeleteMedias(context.Context, *DeleteMediasRequest) (*DeleteMediasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMedias not implemented")
}

// UnsafeMediaReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaReaderServiceServer will
// result in compilation errors.
type UnsafeMediaReaderServiceServer interface {
	mustEmbedUnimplementedMediaReaderServiceServer()
}

func RegisterMediaReaderServiceServer(s grpc.ServiceRegistrar, srv MediaReaderServiceServer) {
	s.RegisterService(&_MediaReaderService_serviceDesc, srv)
}

func _MediaReaderService_RetrieveMediasByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveMediasByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaReaderServiceServer).RetrieveMediasByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.MediaReaderService/RetrieveMediasByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaReaderServiceServer).RetrieveMediasByIDs(ctx, req.(*RetrieveMediasByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaReaderService_CreateMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaReaderServiceServer).CreateMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.MediaReaderService/CreateMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaReaderServiceServer).CreateMedia(ctx, req.(*CreateMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaReaderService_DeleteMedias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMediasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaReaderServiceServer).DeleteMedias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.MediaReaderService/DeleteMedias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaReaderServiceServer).DeleteMedias(ctx, req.(*DeleteMediasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MediaReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lessonmgmt.v1.MediaReaderService",
	HandlerType: (*MediaReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveMediasByIDs",
			Handler:    _MediaReaderService_RetrieveMediasByIDs_Handler,
		},
		{
			MethodName: "CreateMedia",
			Handler:    _MediaReaderService_CreateMedia_Handler,
		},
		{
			MethodName: "DeleteMedias",
			Handler:    _MediaReaderService_DeleteMedias_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lessonmgmt/v1/media.proto",
}
