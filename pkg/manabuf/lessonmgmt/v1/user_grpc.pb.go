// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	GetStudentsManyReferenceByNameOrEmail(ctx context.Context, in *GetStudentsManyReferenceByNameOrEmailRequest, opts ...grpc.CallOption) (*GetStudentsManyReferenceByNameOrEmailResponse, error)
	GetUserGroup(ctx context.Context, in *GetUserGroupRequest, opts ...grpc.CallOption) (*GetUserGroupResponse, error)
	GetTeachers(ctx context.Context, in *GetTeachersRequest, opts ...grpc.CallOption) (*GetTeachersResponse, error)
	GetTeachersSameGrantedLocation(ctx context.Context, in *GetTeachersSameGrantedLocationRequest, opts ...grpc.CallOption) (*GetTeachersSameGrantedLocationResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetStudentsManyReferenceByNameOrEmail(ctx context.Context, in *GetStudentsManyReferenceByNameOrEmailRequest, opts ...grpc.CallOption) (*GetStudentsManyReferenceByNameOrEmailResponse, error) {
	out := new(GetStudentsManyReferenceByNameOrEmailResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.UserService/GetStudentsManyReferenceByNameOrEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserGroup(ctx context.Context, in *GetUserGroupRequest, opts ...grpc.CallOption) (*GetUserGroupResponse, error) {
	out := new(GetUserGroupResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.UserService/GetUserGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetTeachers(ctx context.Context, in *GetTeachersRequest, opts ...grpc.CallOption) (*GetTeachersResponse, error) {
	out := new(GetTeachersResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.UserService/GetTeachers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetTeachersSameGrantedLocation(ctx context.Context, in *GetTeachersSameGrantedLocationRequest, opts ...grpc.CallOption) (*GetTeachersSameGrantedLocationResponse, error) {
	out := new(GetTeachersSameGrantedLocationResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.UserService/GetTeachersSameGrantedLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations should embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	GetStudentsManyReferenceByNameOrEmail(context.Context, *GetStudentsManyReferenceByNameOrEmailRequest) (*GetStudentsManyReferenceByNameOrEmailResponse, error)
	GetUserGroup(context.Context, *GetUserGroupRequest) (*GetUserGroupResponse, error)
	GetTeachers(context.Context, *GetTeachersRequest) (*GetTeachersResponse, error)
	GetTeachersSameGrantedLocation(context.Context, *GetTeachersSameGrantedLocationRequest) (*GetTeachersSameGrantedLocationResponse, error)
}

// UnimplementedUserServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) GetStudentsManyReferenceByNameOrEmail(context.Context, *GetStudentsManyReferenceByNameOrEmailRequest) (*GetStudentsManyReferenceByNameOrEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentsManyReferenceByNameOrEmail not implemented")
}
func (UnimplementedUserServiceServer) GetUserGroup(context.Context, *GetUserGroupRequest) (*GetUserGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGroup not implemented")
}
func (UnimplementedUserServiceServer) GetTeachers(context.Context, *GetTeachersRequest) (*GetTeachersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeachers not implemented")
}
func (UnimplementedUserServiceServer) GetTeachersSameGrantedLocation(context.Context, *GetTeachersSameGrantedLocationRequest) (*GetTeachersSameGrantedLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeachersSameGrantedLocation not implemented")
}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_GetStudentsManyReferenceByNameOrEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentsManyReferenceByNameOrEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetStudentsManyReferenceByNameOrEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.UserService/GetStudentsManyReferenceByNameOrEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetStudentsManyReferenceByNameOrEmail(ctx, req.(*GetStudentsManyReferenceByNameOrEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.UserService/GetUserGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserGroup(ctx, req.(*GetUserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetTeachers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeachersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetTeachers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.UserService/GetTeachers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetTeachers(ctx, req.(*GetTeachersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetTeachersSameGrantedLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeachersSameGrantedLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetTeachersSameGrantedLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.UserService/GetTeachersSameGrantedLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetTeachersSameGrantedLocation(ctx, req.(*GetTeachersSameGrantedLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lessonmgmt.v1.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStudentsManyReferenceByNameOrEmail",
			Handler:    _UserService_GetStudentsManyReferenceByNameOrEmail_Handler,
		},
		{
			MethodName: "GetUserGroup",
			Handler:    _UserService_GetUserGroup_Handler,
		},
		{
			MethodName: "GetTeachers",
			Handler:    _UserService_GetTeachers_Handler,
		},
		{
			MethodName: "GetTeachersSameGrantedLocation",
			Handler:    _UserService_GetTeachersSameGrantedLocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lessonmgmt/v1/user.proto",
}
