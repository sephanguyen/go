// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LessonExecutorServiceClient is the client API for LessonExecutorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LessonExecutorServiceClient interface {
	GenerateLessonCSVTemplate(ctx context.Context, in *GenerateLessonCSVTemplateRequest, opts ...grpc.CallOption) (*GenerateLessonCSVTemplateResponse, error)
	ImportClassroom(ctx context.Context, in *ImportClassroomRequest, opts ...grpc.CallOption) (*ImportClassroomResponse, error)
	ImportLesson(ctx context.Context, in *ImportLessonRequest, opts ...grpc.CallOption) (*ImportLessonResponse, error)
	ImportZoomAccount(ctx context.Context, in *ImportZoomAccountRequest, opts ...grpc.CallOption) (*ImportZoomAccountResponse, error)
	ImportCourseTeachingTime(ctx context.Context, in *ImportCourseTeachingTimeRequest, opts ...grpc.CallOption) (*ImportCourseTeachingTimeResponse, error)
	ExportClassrooms(ctx context.Context, in *ExportClassroomsRequest, opts ...grpc.CallOption) (*ExportClassroomsResponse, error)
	ExportTeacher(ctx context.Context, in *ExportTeacherRequest, opts ...grpc.CallOption) (*ExportTeacherResponse, error)
	ExportEnrolledStudent(ctx context.Context, in *ExportEnrolledStudentRequest, opts ...grpc.CallOption) (*ExportEnrolledStudentResponse, error)
	ExportCourseTeachingTime(ctx context.Context, in *ExportCourseTeachingTimeRequest, opts ...grpc.CallOption) (*ExportCourseTeachingTimeResponse, error)
}

type lessonExecutorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLessonExecutorServiceClient(cc grpc.ClientConnInterface) LessonExecutorServiceClient {
	return &lessonExecutorServiceClient{cc}
}

func (c *lessonExecutorServiceClient) GenerateLessonCSVTemplate(ctx context.Context, in *GenerateLessonCSVTemplateRequest, opts ...grpc.CallOption) (*GenerateLessonCSVTemplateResponse, error) {
	out := new(GenerateLessonCSVTemplateResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.LessonExecutorService/GenerateLessonCSVTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonExecutorServiceClient) ImportClassroom(ctx context.Context, in *ImportClassroomRequest, opts ...grpc.CallOption) (*ImportClassroomResponse, error) {
	out := new(ImportClassroomResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.LessonExecutorService/ImportClassroom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonExecutorServiceClient) ImportLesson(ctx context.Context, in *ImportLessonRequest, opts ...grpc.CallOption) (*ImportLessonResponse, error) {
	out := new(ImportLessonResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.LessonExecutorService/ImportLesson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonExecutorServiceClient) ImportZoomAccount(ctx context.Context, in *ImportZoomAccountRequest, opts ...grpc.CallOption) (*ImportZoomAccountResponse, error) {
	out := new(ImportZoomAccountResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.LessonExecutorService/ImportZoomAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonExecutorServiceClient) ImportCourseTeachingTime(ctx context.Context, in *ImportCourseTeachingTimeRequest, opts ...grpc.CallOption) (*ImportCourseTeachingTimeResponse, error) {
	out := new(ImportCourseTeachingTimeResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.LessonExecutorService/ImportCourseTeachingTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonExecutorServiceClient) ExportClassrooms(ctx context.Context, in *ExportClassroomsRequest, opts ...grpc.CallOption) (*ExportClassroomsResponse, error) {
	out := new(ExportClassroomsResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.LessonExecutorService/ExportClassrooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonExecutorServiceClient) ExportTeacher(ctx context.Context, in *ExportTeacherRequest, opts ...grpc.CallOption) (*ExportTeacherResponse, error) {
	out := new(ExportTeacherResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.LessonExecutorService/ExportTeacher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonExecutorServiceClient) ExportEnrolledStudent(ctx context.Context, in *ExportEnrolledStudentRequest, opts ...grpc.CallOption) (*ExportEnrolledStudentResponse, error) {
	out := new(ExportEnrolledStudentResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.LessonExecutorService/ExportEnrolledStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonExecutorServiceClient) ExportCourseTeachingTime(ctx context.Context, in *ExportCourseTeachingTimeRequest, opts ...grpc.CallOption) (*ExportCourseTeachingTimeResponse, error) {
	out := new(ExportCourseTeachingTimeResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.LessonExecutorService/ExportCourseTeachingTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LessonExecutorServiceServer is the server API for LessonExecutorService service.
// All implementations should embed UnimplementedLessonExecutorServiceServer
// for forward compatibility
type LessonExecutorServiceServer interface {
	GenerateLessonCSVTemplate(context.Context, *GenerateLessonCSVTemplateRequest) (*GenerateLessonCSVTemplateResponse, error)
	ImportClassroom(context.Context, *ImportClassroomRequest) (*ImportClassroomResponse, error)
	ImportLesson(context.Context, *ImportLessonRequest) (*ImportLessonResponse, error)
	ImportZoomAccount(context.Context, *ImportZoomAccountRequest) (*ImportZoomAccountResponse, error)
	ImportCourseTeachingTime(context.Context, *ImportCourseTeachingTimeRequest) (*ImportCourseTeachingTimeResponse, error)
	ExportClassrooms(context.Context, *ExportClassroomsRequest) (*ExportClassroomsResponse, error)
	ExportTeacher(context.Context, *ExportTeacherRequest) (*ExportTeacherResponse, error)
	ExportEnrolledStudent(context.Context, *ExportEnrolledStudentRequest) (*ExportEnrolledStudentResponse, error)
	ExportCourseTeachingTime(context.Context, *ExportCourseTeachingTimeRequest) (*ExportCourseTeachingTimeResponse, error)
}

// UnimplementedLessonExecutorServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLessonExecutorServiceServer struct {
}

func (UnimplementedLessonExecutorServiceServer) GenerateLessonCSVTemplate(context.Context, *GenerateLessonCSVTemplateRequest) (*GenerateLessonCSVTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateLessonCSVTemplate not implemented")
}
func (UnimplementedLessonExecutorServiceServer) ImportClassroom(context.Context, *ImportClassroomRequest) (*ImportClassroomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportClassroom not implemented")
}
func (UnimplementedLessonExecutorServiceServer) ImportLesson(context.Context, *ImportLessonRequest) (*ImportLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportLesson not implemented")
}
func (UnimplementedLessonExecutorServiceServer) ImportZoomAccount(context.Context, *ImportZoomAccountRequest) (*ImportZoomAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportZoomAccount not implemented")
}
func (UnimplementedLessonExecutorServiceServer) ImportCourseTeachingTime(context.Context, *ImportCourseTeachingTimeRequest) (*ImportCourseTeachingTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportCourseTeachingTime not implemented")
}
func (UnimplementedLessonExecutorServiceServer) ExportClassrooms(context.Context, *ExportClassroomsRequest) (*ExportClassroomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportClassrooms not implemented")
}
func (UnimplementedLessonExecutorServiceServer) ExportTeacher(context.Context, *ExportTeacherRequest) (*ExportTeacherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportTeacher not implemented")
}
func (UnimplementedLessonExecutorServiceServer) ExportEnrolledStudent(context.Context, *ExportEnrolledStudentRequest) (*ExportEnrolledStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportEnrolledStudent not implemented")
}
func (UnimplementedLessonExecutorServiceServer) ExportCourseTeachingTime(context.Context, *ExportCourseTeachingTimeRequest) (*ExportCourseTeachingTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportCourseTeachingTime not implemented")
}

// UnsafeLessonExecutorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LessonExecutorServiceServer will
// result in compilation errors.
type UnsafeLessonExecutorServiceServer interface {
	mustEmbedUnimplementedLessonExecutorServiceServer()
}

func RegisterLessonExecutorServiceServer(s grpc.ServiceRegistrar, srv LessonExecutorServiceServer) {
	s.RegisterService(&_LessonExecutorService_serviceDesc, srv)
}

func _LessonExecutorService_GenerateLessonCSVTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateLessonCSVTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonExecutorServiceServer).GenerateLessonCSVTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.LessonExecutorService/GenerateLessonCSVTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonExecutorServiceServer).GenerateLessonCSVTemplate(ctx, req.(*GenerateLessonCSVTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonExecutorService_ImportClassroom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportClassroomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonExecutorServiceServer).ImportClassroom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.LessonExecutorService/ImportClassroom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonExecutorServiceServer).ImportClassroom(ctx, req.(*ImportClassroomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonExecutorService_ImportLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonExecutorServiceServer).ImportLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.LessonExecutorService/ImportLesson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonExecutorServiceServer).ImportLesson(ctx, req.(*ImportLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonExecutorService_ImportZoomAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportZoomAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonExecutorServiceServer).ImportZoomAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.LessonExecutorService/ImportZoomAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonExecutorServiceServer).ImportZoomAccount(ctx, req.(*ImportZoomAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonExecutorService_ImportCourseTeachingTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportCourseTeachingTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonExecutorServiceServer).ImportCourseTeachingTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.LessonExecutorService/ImportCourseTeachingTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonExecutorServiceServer).ImportCourseTeachingTime(ctx, req.(*ImportCourseTeachingTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonExecutorService_ExportClassrooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportClassroomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonExecutorServiceServer).ExportClassrooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.LessonExecutorService/ExportClassrooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonExecutorServiceServer).ExportClassrooms(ctx, req.(*ExportClassroomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonExecutorService_ExportTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportTeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonExecutorServiceServer).ExportTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.LessonExecutorService/ExportTeacher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonExecutorServiceServer).ExportTeacher(ctx, req.(*ExportTeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonExecutorService_ExportEnrolledStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportEnrolledStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonExecutorServiceServer).ExportEnrolledStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.LessonExecutorService/ExportEnrolledStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonExecutorServiceServer).ExportEnrolledStudent(ctx, req.(*ExportEnrolledStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonExecutorService_ExportCourseTeachingTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportCourseTeachingTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonExecutorServiceServer).ExportCourseTeachingTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.LessonExecutorService/ExportCourseTeachingTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonExecutorServiceServer).ExportCourseTeachingTime(ctx, req.(*ExportCourseTeachingTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LessonExecutorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lessonmgmt.v1.LessonExecutorService",
	HandlerType: (*LessonExecutorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateLessonCSVTemplate",
			Handler:    _LessonExecutorService_GenerateLessonCSVTemplate_Handler,
		},
		{
			MethodName: "ImportClassroom",
			Handler:    _LessonExecutorService_ImportClassroom_Handler,
		},
		{
			MethodName: "ImportLesson",
			Handler:    _LessonExecutorService_ImportLesson_Handler,
		},
		{
			MethodName: "ImportZoomAccount",
			Handler:    _LessonExecutorService_ImportZoomAccount_Handler,
		},
		{
			MethodName: "ImportCourseTeachingTime",
			Handler:    _LessonExecutorService_ImportCourseTeachingTime_Handler,
		},
		{
			MethodName: "ExportClassrooms",
			Handler:    _LessonExecutorService_ExportClassrooms_Handler,
		},
		{
			MethodName: "ExportTeacher",
			Handler:    _LessonExecutorService_ExportTeacher_Handler,
		},
		{
			MethodName: "ExportEnrolledStudent",
			Handler:    _LessonExecutorService_ExportEnrolledStudent_Handler,
		},
		{
			MethodName: "ExportCourseTeachingTime",
			Handler:    _LessonExecutorService_ExportCourseTeachingTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lessonmgmt/v1/lesson_executor.proto",
}
