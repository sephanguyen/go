// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LessonReaderServiceClient is the client API for LessonReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LessonReaderServiceClient interface {
	RetrieveLessonByID(ctx context.Context, in *RetrieveLessonByIDRequest, opts ...grpc.CallOption) (*RetrieveLessonByIDResponse, error)
	RetrieveStudentsByLesson(ctx context.Context, in *ListStudentsByLessonRequest, opts ...grpc.CallOption) (*ListStudentsByLessonResponse, error)
	RetrieveLessonMedias(ctx context.Context, in *ListLessonMediasRequest, opts ...grpc.CallOption) (*ListLessonMediasResponse, error)
	RetrieveLessons(ctx context.Context, in *RetrieveLessonsRequest, opts ...grpc.CallOption) (*RetrieveLessonsResponse, error)
	RetrieveLessonsV2(ctx context.Context, in *RetrieveLessonsRequest, opts ...grpc.CallOption) (*RetrieveLessonsResponse, error)
	RetrieveLessonsOnCalendar(ctx context.Context, in *RetrieveLessonsOnCalendarRequest, opts ...grpc.CallOption) (*RetrieveLessonsOnCalendarResponse, error)
}

type lessonReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLessonReaderServiceClient(cc grpc.ClientConnInterface) LessonReaderServiceClient {
	return &lessonReaderServiceClient{cc}
}

func (c *lessonReaderServiceClient) RetrieveLessonByID(ctx context.Context, in *RetrieveLessonByIDRequest, opts ...grpc.CallOption) (*RetrieveLessonByIDResponse, error) {
	out := new(RetrieveLessonByIDResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.LessonReaderService/RetrieveLessonByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonReaderServiceClient) RetrieveStudentsByLesson(ctx context.Context, in *ListStudentsByLessonRequest, opts ...grpc.CallOption) (*ListStudentsByLessonResponse, error) {
	out := new(ListStudentsByLessonResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.LessonReaderService/RetrieveStudentsByLesson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonReaderServiceClient) RetrieveLessonMedias(ctx context.Context, in *ListLessonMediasRequest, opts ...grpc.CallOption) (*ListLessonMediasResponse, error) {
	out := new(ListLessonMediasResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.LessonReaderService/RetrieveLessonMedias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonReaderServiceClient) RetrieveLessons(ctx context.Context, in *RetrieveLessonsRequest, opts ...grpc.CallOption) (*RetrieveLessonsResponse, error) {
	out := new(RetrieveLessonsResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.LessonReaderService/RetrieveLessons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonReaderServiceClient) RetrieveLessonsV2(ctx context.Context, in *RetrieveLessonsRequest, opts ...grpc.CallOption) (*RetrieveLessonsResponse, error) {
	out := new(RetrieveLessonsResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.LessonReaderService/RetrieveLessonsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonReaderServiceClient) RetrieveLessonsOnCalendar(ctx context.Context, in *RetrieveLessonsOnCalendarRequest, opts ...grpc.CallOption) (*RetrieveLessonsOnCalendarResponse, error) {
	out := new(RetrieveLessonsOnCalendarResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.LessonReaderService/RetrieveLessonsOnCalendar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LessonReaderServiceServer is the server API for LessonReaderService service.
// All implementations should embed UnimplementedLessonReaderServiceServer
// for forward compatibility
type LessonReaderServiceServer interface {
	RetrieveLessonByID(context.Context, *RetrieveLessonByIDRequest) (*RetrieveLessonByIDResponse, error)
	RetrieveStudentsByLesson(context.Context, *ListStudentsByLessonRequest) (*ListStudentsByLessonResponse, error)
	RetrieveLessonMedias(context.Context, *ListLessonMediasRequest) (*ListLessonMediasResponse, error)
	RetrieveLessons(context.Context, *RetrieveLessonsRequest) (*RetrieveLessonsResponse, error)
	RetrieveLessonsV2(context.Context, *RetrieveLessonsRequest) (*RetrieveLessonsResponse, error)
	RetrieveLessonsOnCalendar(context.Context, *RetrieveLessonsOnCalendarRequest) (*RetrieveLessonsOnCalendarResponse, error)
}

// UnimplementedLessonReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLessonReaderServiceServer struct {
}

func (UnimplementedLessonReaderServiceServer) RetrieveLessonByID(context.Context, *RetrieveLessonByIDRequest) (*RetrieveLessonByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveLessonByID not implemented")
}
func (UnimplementedLessonReaderServiceServer) RetrieveStudentsByLesson(context.Context, *ListStudentsByLessonRequest) (*ListStudentsByLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveStudentsByLesson not implemented")
}
func (UnimplementedLessonReaderServiceServer) RetrieveLessonMedias(context.Context, *ListLessonMediasRequest) (*ListLessonMediasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveLessonMedias not implemented")
}
func (UnimplementedLessonReaderServiceServer) RetrieveLessons(context.Context, *RetrieveLessonsRequest) (*RetrieveLessonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveLessons not implemented")
}
func (UnimplementedLessonReaderServiceServer) RetrieveLessonsV2(context.Context, *RetrieveLessonsRequest) (*RetrieveLessonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveLessonsV2 not implemented")
}
func (UnimplementedLessonReaderServiceServer) RetrieveLessonsOnCalendar(context.Context, *RetrieveLessonsOnCalendarRequest) (*RetrieveLessonsOnCalendarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveLessonsOnCalendar not implemented")
}

// UnsafeLessonReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LessonReaderServiceServer will
// result in compilation errors.
type UnsafeLessonReaderServiceServer interface {
	mustEmbedUnimplementedLessonReaderServiceServer()
}

func RegisterLessonReaderServiceServer(s grpc.ServiceRegistrar, srv LessonReaderServiceServer) {
	s.RegisterService(&_LessonReaderService_serviceDesc, srv)
}

func _LessonReaderService_RetrieveLessonByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveLessonByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonReaderServiceServer).RetrieveLessonByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.LessonReaderService/RetrieveLessonByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonReaderServiceServer).RetrieveLessonByID(ctx, req.(*RetrieveLessonByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonReaderService_RetrieveStudentsByLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStudentsByLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonReaderServiceServer).RetrieveStudentsByLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.LessonReaderService/RetrieveStudentsByLesson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonReaderServiceServer).RetrieveStudentsByLesson(ctx, req.(*ListStudentsByLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonReaderService_RetrieveLessonMedias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLessonMediasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonReaderServiceServer).RetrieveLessonMedias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.LessonReaderService/RetrieveLessonMedias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonReaderServiceServer).RetrieveLessonMedias(ctx, req.(*ListLessonMediasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonReaderService_RetrieveLessons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveLessonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonReaderServiceServer).RetrieveLessons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.LessonReaderService/RetrieveLessons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonReaderServiceServer).RetrieveLessons(ctx, req.(*RetrieveLessonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonReaderService_RetrieveLessonsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveLessonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonReaderServiceServer).RetrieveLessonsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.LessonReaderService/RetrieveLessonsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonReaderServiceServer).RetrieveLessonsV2(ctx, req.(*RetrieveLessonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonReaderService_RetrieveLessonsOnCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveLessonsOnCalendarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonReaderServiceServer).RetrieveLessonsOnCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.LessonReaderService/RetrieveLessonsOnCalendar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonReaderServiceServer).RetrieveLessonsOnCalendar(ctx, req.(*RetrieveLessonsOnCalendarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LessonReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lessonmgmt.v1.LessonReaderService",
	HandlerType: (*LessonReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveLessonByID",
			Handler:    _LessonReaderService_RetrieveLessonByID_Handler,
		},
		{
			MethodName: "RetrieveStudentsByLesson",
			Handler:    _LessonReaderService_RetrieveStudentsByLesson_Handler,
		},
		{
			MethodName: "RetrieveLessonMedias",
			Handler:    _LessonReaderService_RetrieveLessonMedias_Handler,
		},
		{
			MethodName: "RetrieveLessons",
			Handler:    _LessonReaderService_RetrieveLessons_Handler,
		},
		{
			MethodName: "RetrieveLessonsV2",
			Handler:    _LessonReaderService_RetrieveLessonsV2_Handler,
		},
		{
			MethodName: "RetrieveLessonsOnCalendar",
			Handler:    _LessonReaderService_RetrieveLessonsOnCalendar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lessonmgmt/v1/lessons.proto",
}

// LessonModifierServiceClient is the client API for LessonModifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LessonModifierServiceClient interface {
	UpdateLessonSchedulingStatus(ctx context.Context, in *UpdateLessonSchedulingStatusRequest, opts ...grpc.CallOption) (*UpdateLessonSchedulingStatusResponse, error)
	CreateLesson(ctx context.Context, in *CreateLessonRequest, opts ...grpc.CallOption) (*CreateLessonResponse, error)
	DeleteLesson(ctx context.Context, in *DeleteLessonRequest, opts ...grpc.CallOption) (*DeleteLessonResponse, error)
	UpdateLesson(ctx context.Context, in *UpdateLessonRequest, opts ...grpc.CallOption) (*UpdateLessonResponse, error)
	BulkUpdateLessonSchedulingStatus(ctx context.Context, in *BulkUpdateLessonSchedulingStatusRequest, opts ...grpc.CallOption) (*BulkUpdateLessonSchedulingStatusResponse, error)
	UpdateToRecurrence(ctx context.Context, in *UpdateToRecurrenceRequest, opts ...grpc.CallOption) (*UpdateToRecurrenceResponse, error)
	MarkStudentAsReallocate(ctx context.Context, in *MarkStudentAsReallocateRequest, opts ...grpc.CallOption) (*MarkStudentAsReallocateResponse, error)
}

type lessonModifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLessonModifierServiceClient(cc grpc.ClientConnInterface) LessonModifierServiceClient {
	return &lessonModifierServiceClient{cc}
}

func (c *lessonModifierServiceClient) UpdateLessonSchedulingStatus(ctx context.Context, in *UpdateLessonSchedulingStatusRequest, opts ...grpc.CallOption) (*UpdateLessonSchedulingStatusResponse, error) {
	out := new(UpdateLessonSchedulingStatusResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.LessonModifierService/UpdateLessonSchedulingStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonModifierServiceClient) CreateLesson(ctx context.Context, in *CreateLessonRequest, opts ...grpc.CallOption) (*CreateLessonResponse, error) {
	out := new(CreateLessonResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.LessonModifierService/CreateLesson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonModifierServiceClient) DeleteLesson(ctx context.Context, in *DeleteLessonRequest, opts ...grpc.CallOption) (*DeleteLessonResponse, error) {
	out := new(DeleteLessonResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.LessonModifierService/DeleteLesson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonModifierServiceClient) UpdateLesson(ctx context.Context, in *UpdateLessonRequest, opts ...grpc.CallOption) (*UpdateLessonResponse, error) {
	out := new(UpdateLessonResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.LessonModifierService/UpdateLesson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonModifierServiceClient) BulkUpdateLessonSchedulingStatus(ctx context.Context, in *BulkUpdateLessonSchedulingStatusRequest, opts ...grpc.CallOption) (*BulkUpdateLessonSchedulingStatusResponse, error) {
	out := new(BulkUpdateLessonSchedulingStatusResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.LessonModifierService/BulkUpdateLessonSchedulingStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonModifierServiceClient) UpdateToRecurrence(ctx context.Context, in *UpdateToRecurrenceRequest, opts ...grpc.CallOption) (*UpdateToRecurrenceResponse, error) {
	out := new(UpdateToRecurrenceResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.LessonModifierService/UpdateToRecurrence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonModifierServiceClient) MarkStudentAsReallocate(ctx context.Context, in *MarkStudentAsReallocateRequest, opts ...grpc.CallOption) (*MarkStudentAsReallocateResponse, error) {
	out := new(MarkStudentAsReallocateResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.LessonModifierService/MarkStudentAsReallocate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LessonModifierServiceServer is the server API for LessonModifierService service.
// All implementations should embed UnimplementedLessonModifierServiceServer
// for forward compatibility
type LessonModifierServiceServer interface {
	UpdateLessonSchedulingStatus(context.Context, *UpdateLessonSchedulingStatusRequest) (*UpdateLessonSchedulingStatusResponse, error)
	CreateLesson(context.Context, *CreateLessonRequest) (*CreateLessonResponse, error)
	DeleteLesson(context.Context, *DeleteLessonRequest) (*DeleteLessonResponse, error)
	UpdateLesson(context.Context, *UpdateLessonRequest) (*UpdateLessonResponse, error)
	BulkUpdateLessonSchedulingStatus(context.Context, *BulkUpdateLessonSchedulingStatusRequest) (*BulkUpdateLessonSchedulingStatusResponse, error)
	UpdateToRecurrence(context.Context, *UpdateToRecurrenceRequest) (*UpdateToRecurrenceResponse, error)
	MarkStudentAsReallocate(context.Context, *MarkStudentAsReallocateRequest) (*MarkStudentAsReallocateResponse, error)
}

// UnimplementedLessonModifierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLessonModifierServiceServer struct {
}

func (UnimplementedLessonModifierServiceServer) UpdateLessonSchedulingStatus(context.Context, *UpdateLessonSchedulingStatusRequest) (*UpdateLessonSchedulingStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLessonSchedulingStatus not implemented")
}
func (UnimplementedLessonModifierServiceServer) CreateLesson(context.Context, *CreateLessonRequest) (*CreateLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLesson not implemented")
}
func (UnimplementedLessonModifierServiceServer) DeleteLesson(context.Context, *DeleteLessonRequest) (*DeleteLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLesson not implemented")
}
func (UnimplementedLessonModifierServiceServer) UpdateLesson(context.Context, *UpdateLessonRequest) (*UpdateLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLesson not implemented")
}
func (UnimplementedLessonModifierServiceServer) BulkUpdateLessonSchedulingStatus(context.Context, *BulkUpdateLessonSchedulingStatusRequest) (*BulkUpdateLessonSchedulingStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkUpdateLessonSchedulingStatus not implemented")
}
func (UnimplementedLessonModifierServiceServer) UpdateToRecurrence(context.Context, *UpdateToRecurrenceRequest) (*UpdateToRecurrenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateToRecurrence not implemented")
}
func (UnimplementedLessonModifierServiceServer) MarkStudentAsReallocate(context.Context, *MarkStudentAsReallocateRequest) (*MarkStudentAsReallocateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkStudentAsReallocate not implemented")
}

// UnsafeLessonModifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LessonModifierServiceServer will
// result in compilation errors.
type UnsafeLessonModifierServiceServer interface {
	mustEmbedUnimplementedLessonModifierServiceServer()
}

func RegisterLessonModifierServiceServer(s grpc.ServiceRegistrar, srv LessonModifierServiceServer) {
	s.RegisterService(&_LessonModifierService_serviceDesc, srv)
}

func _LessonModifierService_UpdateLessonSchedulingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLessonSchedulingStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonModifierServiceServer).UpdateLessonSchedulingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.LessonModifierService/UpdateLessonSchedulingStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonModifierServiceServer).UpdateLessonSchedulingStatus(ctx, req.(*UpdateLessonSchedulingStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonModifierService_CreateLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonModifierServiceServer).CreateLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.LessonModifierService/CreateLesson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonModifierServiceServer).CreateLesson(ctx, req.(*CreateLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonModifierService_DeleteLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonModifierServiceServer).DeleteLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.LessonModifierService/DeleteLesson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonModifierServiceServer).DeleteLesson(ctx, req.(*DeleteLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonModifierService_UpdateLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonModifierServiceServer).UpdateLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.LessonModifierService/UpdateLesson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonModifierServiceServer).UpdateLesson(ctx, req.(*UpdateLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonModifierService_BulkUpdateLessonSchedulingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkUpdateLessonSchedulingStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonModifierServiceServer).BulkUpdateLessonSchedulingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.LessonModifierService/BulkUpdateLessonSchedulingStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonModifierServiceServer).BulkUpdateLessonSchedulingStatus(ctx, req.(*BulkUpdateLessonSchedulingStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonModifierService_UpdateToRecurrence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateToRecurrenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonModifierServiceServer).UpdateToRecurrence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.LessonModifierService/UpdateToRecurrence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonModifierServiceServer).UpdateToRecurrence(ctx, req.(*UpdateToRecurrenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonModifierService_MarkStudentAsReallocate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkStudentAsReallocateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonModifierServiceServer).MarkStudentAsReallocate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.LessonModifierService/MarkStudentAsReallocate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonModifierServiceServer).MarkStudentAsReallocate(ctx, req.(*MarkStudentAsReallocateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LessonModifierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lessonmgmt.v1.LessonModifierService",
	HandlerType: (*LessonModifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateLessonSchedulingStatus",
			Handler:    _LessonModifierService_UpdateLessonSchedulingStatus_Handler,
		},
		{
			MethodName: "CreateLesson",
			Handler:    _LessonModifierService_CreateLesson_Handler,
		},
		{
			MethodName: "DeleteLesson",
			Handler:    _LessonModifierService_DeleteLesson_Handler,
		},
		{
			MethodName: "UpdateLesson",
			Handler:    _LessonModifierService_UpdateLesson_Handler,
		},
		{
			MethodName: "BulkUpdateLessonSchedulingStatus",
			Handler:    _LessonModifierService_BulkUpdateLessonSchedulingStatus_Handler,
		},
		{
			MethodName: "UpdateToRecurrence",
			Handler:    _LessonModifierService_UpdateToRecurrence_Handler,
		},
		{
			MethodName: "MarkStudentAsReallocate",
			Handler:    _LessonModifierService_MarkStudentAsReallocate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lessonmgmt/v1/lessons.proto",
}

// StudentSubscriptionServiceClient is the client API for StudentSubscriptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentSubscriptionServiceClient interface {
	RetrieveStudentSubscription(ctx context.Context, in *RetrieveStudentSubscriptionRequest, opts ...grpc.CallOption) (*RetrieveStudentSubscriptionResponse, error)
	GetStudentCourseSubscriptions(ctx context.Context, in *GetStudentCourseSubscriptionsRequest, opts ...grpc.CallOption) (*GetStudentCourseSubscriptionsResponse, error)
	RetrieveStudentPendingReallocate(ctx context.Context, in *RetrieveStudentPendingReallocateRequest, opts ...grpc.CallOption) (*RetrieveStudentPendingReallocateResponse, error)
	GetStudentCoursesAndClasses(ctx context.Context, in *GetStudentCoursesAndClassesRequest, opts ...grpc.CallOption) (*GetStudentCoursesAndClassesResponse, error)
}

type studentSubscriptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentSubscriptionServiceClient(cc grpc.ClientConnInterface) StudentSubscriptionServiceClient {
	return &studentSubscriptionServiceClient{cc}
}

func (c *studentSubscriptionServiceClient) RetrieveStudentSubscription(ctx context.Context, in *RetrieveStudentSubscriptionRequest, opts ...grpc.CallOption) (*RetrieveStudentSubscriptionResponse, error) {
	out := new(RetrieveStudentSubscriptionResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.StudentSubscriptionService/RetrieveStudentSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentSubscriptionServiceClient) GetStudentCourseSubscriptions(ctx context.Context, in *GetStudentCourseSubscriptionsRequest, opts ...grpc.CallOption) (*GetStudentCourseSubscriptionsResponse, error) {
	out := new(GetStudentCourseSubscriptionsResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.StudentSubscriptionService/GetStudentCourseSubscriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentSubscriptionServiceClient) RetrieveStudentPendingReallocate(ctx context.Context, in *RetrieveStudentPendingReallocateRequest, opts ...grpc.CallOption) (*RetrieveStudentPendingReallocateResponse, error) {
	out := new(RetrieveStudentPendingReallocateResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.StudentSubscriptionService/RetrieveStudentPendingReallocate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentSubscriptionServiceClient) GetStudentCoursesAndClasses(ctx context.Context, in *GetStudentCoursesAndClassesRequest, opts ...grpc.CallOption) (*GetStudentCoursesAndClassesResponse, error) {
	out := new(GetStudentCoursesAndClassesResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.StudentSubscriptionService/GetStudentCoursesAndClasses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentSubscriptionServiceServer is the server API for StudentSubscriptionService service.
// All implementations should embed UnimplementedStudentSubscriptionServiceServer
// for forward compatibility
type StudentSubscriptionServiceServer interface {
	RetrieveStudentSubscription(context.Context, *RetrieveStudentSubscriptionRequest) (*RetrieveStudentSubscriptionResponse, error)
	GetStudentCourseSubscriptions(context.Context, *GetStudentCourseSubscriptionsRequest) (*GetStudentCourseSubscriptionsResponse, error)
	RetrieveStudentPendingReallocate(context.Context, *RetrieveStudentPendingReallocateRequest) (*RetrieveStudentPendingReallocateResponse, error)
	GetStudentCoursesAndClasses(context.Context, *GetStudentCoursesAndClassesRequest) (*GetStudentCoursesAndClassesResponse, error)
}

// UnimplementedStudentSubscriptionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStudentSubscriptionServiceServer struct {
}

func (UnimplementedStudentSubscriptionServiceServer) RetrieveStudentSubscription(context.Context, *RetrieveStudentSubscriptionRequest) (*RetrieveStudentSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveStudentSubscription not implemented")
}
func (UnimplementedStudentSubscriptionServiceServer) GetStudentCourseSubscriptions(context.Context, *GetStudentCourseSubscriptionsRequest) (*GetStudentCourseSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentCourseSubscriptions not implemented")
}
func (UnimplementedStudentSubscriptionServiceServer) RetrieveStudentPendingReallocate(context.Context, *RetrieveStudentPendingReallocateRequest) (*RetrieveStudentPendingReallocateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveStudentPendingReallocate not implemented")
}
func (UnimplementedStudentSubscriptionServiceServer) GetStudentCoursesAndClasses(context.Context, *GetStudentCoursesAndClassesRequest) (*GetStudentCoursesAndClassesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentCoursesAndClasses not implemented")
}

// UnsafeStudentSubscriptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentSubscriptionServiceServer will
// result in compilation errors.
type UnsafeStudentSubscriptionServiceServer interface {
	mustEmbedUnimplementedStudentSubscriptionServiceServer()
}

func RegisterStudentSubscriptionServiceServer(s grpc.ServiceRegistrar, srv StudentSubscriptionServiceServer) {
	s.RegisterService(&_StudentSubscriptionService_serviceDesc, srv)
}

func _StudentSubscriptionService_RetrieveStudentSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveStudentSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentSubscriptionServiceServer).RetrieveStudentSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.StudentSubscriptionService/RetrieveStudentSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentSubscriptionServiceServer).RetrieveStudentSubscription(ctx, req.(*RetrieveStudentSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentSubscriptionService_GetStudentCourseSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentCourseSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentSubscriptionServiceServer).GetStudentCourseSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.StudentSubscriptionService/GetStudentCourseSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentSubscriptionServiceServer).GetStudentCourseSubscriptions(ctx, req.(*GetStudentCourseSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentSubscriptionService_RetrieveStudentPendingReallocate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveStudentPendingReallocateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentSubscriptionServiceServer).RetrieveStudentPendingReallocate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.StudentSubscriptionService/RetrieveStudentPendingReallocate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentSubscriptionServiceServer).RetrieveStudentPendingReallocate(ctx, req.(*RetrieveStudentPendingReallocateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentSubscriptionService_GetStudentCoursesAndClasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentCoursesAndClassesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentSubscriptionServiceServer).GetStudentCoursesAndClasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.StudentSubscriptionService/GetStudentCoursesAndClasses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentSubscriptionServiceServer).GetStudentCoursesAndClasses(ctx, req.(*GetStudentCoursesAndClassesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StudentSubscriptionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lessonmgmt.v1.StudentSubscriptionService",
	HandlerType: (*StudentSubscriptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveStudentSubscription",
			Handler:    _StudentSubscriptionService_RetrieveStudentSubscription_Handler,
		},
		{
			MethodName: "GetStudentCourseSubscriptions",
			Handler:    _StudentSubscriptionService_GetStudentCourseSubscriptions_Handler,
		},
		{
			MethodName: "RetrieveStudentPendingReallocate",
			Handler:    _StudentSubscriptionService_RetrieveStudentPendingReallocate_Handler,
		},
		{
			MethodName: "GetStudentCoursesAndClasses",
			Handler:    _StudentSubscriptionService_GetStudentCoursesAndClasses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lessonmgmt/v1/lessons.proto",
}
