// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ClassDoAccountServiceClient is the client API for ClassDoAccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClassDoAccountServiceClient interface {
	ImportClassDoAccount(ctx context.Context, in *ImportClassDoAccountRequest, opts ...grpc.CallOption) (*ImportClassDoAccountResponse, error)
	ExportClassDoAccount(ctx context.Context, in *ExportClassDoAccountRequest, opts ...grpc.CallOption) (*ExportClassDoAccountResponse, error)
}

type classDoAccountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClassDoAccountServiceClient(cc grpc.ClientConnInterface) ClassDoAccountServiceClient {
	return &classDoAccountServiceClient{cc}
}

func (c *classDoAccountServiceClient) ImportClassDoAccount(ctx context.Context, in *ImportClassDoAccountRequest, opts ...grpc.CallOption) (*ImportClassDoAccountResponse, error) {
	out := new(ImportClassDoAccountResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.ClassDoAccountService/ImportClassDoAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classDoAccountServiceClient) ExportClassDoAccount(ctx context.Context, in *ExportClassDoAccountRequest, opts ...grpc.CallOption) (*ExportClassDoAccountResponse, error) {
	out := new(ExportClassDoAccountResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.ClassDoAccountService/ExportClassDoAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClassDoAccountServiceServer is the server API for ClassDoAccountService service.
// All implementations should embed UnimplementedClassDoAccountServiceServer
// for forward compatibility
type ClassDoAccountServiceServer interface {
	ImportClassDoAccount(context.Context, *ImportClassDoAccountRequest) (*ImportClassDoAccountResponse, error)
	ExportClassDoAccount(context.Context, *ExportClassDoAccountRequest) (*ExportClassDoAccountResponse, error)
}

// UnimplementedClassDoAccountServiceServer should be embedded to have forward compatible implementations.
type UnimplementedClassDoAccountServiceServer struct {
}

func (UnimplementedClassDoAccountServiceServer) ImportClassDoAccount(context.Context, *ImportClassDoAccountRequest) (*ImportClassDoAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportClassDoAccount not implemented")
}
func (UnimplementedClassDoAccountServiceServer) ExportClassDoAccount(context.Context, *ExportClassDoAccountRequest) (*ExportClassDoAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportClassDoAccount not implemented")
}

// UnsafeClassDoAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClassDoAccountServiceServer will
// result in compilation errors.
type UnsafeClassDoAccountServiceServer interface {
	mustEmbedUnimplementedClassDoAccountServiceServer()
}

func RegisterClassDoAccountServiceServer(s grpc.ServiceRegistrar, srv ClassDoAccountServiceServer) {
	s.RegisterService(&_ClassDoAccountService_serviceDesc, srv)
}

func _ClassDoAccountService_ImportClassDoAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportClassDoAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassDoAccountServiceServer).ImportClassDoAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.ClassDoAccountService/ImportClassDoAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassDoAccountServiceServer).ImportClassDoAccount(ctx, req.(*ImportClassDoAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassDoAccountService_ExportClassDoAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportClassDoAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassDoAccountServiceServer).ExportClassDoAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.ClassDoAccountService/ExportClassDoAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassDoAccountServiceServer).ExportClassDoAccount(ctx, req.(*ExportClassDoAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClassDoAccountService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lessonmgmt.v1.ClassDoAccountService",
	HandlerType: (*ClassDoAccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportClassDoAccount",
			Handler:    _ClassDoAccountService_ImportClassDoAccount_Handler,
		},
		{
			MethodName: "ExportClassDoAccount",
			Handler:    _ClassDoAccountService_ExportClassDoAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lessonmgmt/v1/classdo_account.proto",
}
