// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LessonZoomServiceClient is the client API for LessonZoomService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LessonZoomServiceClient interface {
	GenerateZoomLink(ctx context.Context, in *GenerateZoomLinkRequest, opts ...grpc.CallOption) (*GenerateZoomLinkResponse, error)
	DeleteZoomLink(ctx context.Context, in *DeleteZoomLinkRequest, opts ...grpc.CallOption) (*DeleteZoomLinkResponse, error)
}

type lessonZoomServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLessonZoomServiceClient(cc grpc.ClientConnInterface) LessonZoomServiceClient {
	return &lessonZoomServiceClient{cc}
}

func (c *lessonZoomServiceClient) GenerateZoomLink(ctx context.Context, in *GenerateZoomLinkRequest, opts ...grpc.CallOption) (*GenerateZoomLinkResponse, error) {
	out := new(GenerateZoomLinkResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.LessonZoomService/GenerateZoomLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonZoomServiceClient) DeleteZoomLink(ctx context.Context, in *DeleteZoomLinkRequest, opts ...grpc.CallOption) (*DeleteZoomLinkResponse, error) {
	out := new(DeleteZoomLinkResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.LessonZoomService/DeleteZoomLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LessonZoomServiceServer is the server API for LessonZoomService service.
// All implementations should embed UnimplementedLessonZoomServiceServer
// for forward compatibility
type LessonZoomServiceServer interface {
	GenerateZoomLink(context.Context, *GenerateZoomLinkRequest) (*GenerateZoomLinkResponse, error)
	DeleteZoomLink(context.Context, *DeleteZoomLinkRequest) (*DeleteZoomLinkResponse, error)
}

// UnimplementedLessonZoomServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLessonZoomServiceServer struct {
}

func (UnimplementedLessonZoomServiceServer) GenerateZoomLink(context.Context, *GenerateZoomLinkRequest) (*GenerateZoomLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateZoomLink not implemented")
}
func (UnimplementedLessonZoomServiceServer) DeleteZoomLink(context.Context, *DeleteZoomLinkRequest) (*DeleteZoomLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteZoomLink not implemented")
}

// UnsafeLessonZoomServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LessonZoomServiceServer will
// result in compilation errors.
type UnsafeLessonZoomServiceServer interface {
	mustEmbedUnimplementedLessonZoomServiceServer()
}

func RegisterLessonZoomServiceServer(s grpc.ServiceRegistrar, srv LessonZoomServiceServer) {
	s.RegisterService(&_LessonZoomService_serviceDesc, srv)
}

func _LessonZoomService_GenerateZoomLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateZoomLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonZoomServiceServer).GenerateZoomLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.LessonZoomService/GenerateZoomLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonZoomServiceServer).GenerateZoomLink(ctx, req.(*GenerateZoomLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonZoomService_DeleteZoomLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteZoomLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonZoomServiceServer).DeleteZoomLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.LessonZoomService/DeleteZoomLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonZoomServiceServer).DeleteZoomLink(ctx, req.(*DeleteZoomLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LessonZoomService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lessonmgmt.v1.LessonZoomService",
	HandlerType: (*LessonZoomServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateZoomLink",
			Handler:    _LessonZoomService_GenerateZoomLink_Handler,
		},
		{
			MethodName: "DeleteZoomLink",
			Handler:    _LessonZoomService_DeleteZoomLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lessonmgmt/v1/zoom.proto",
}
