// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CourseLocationSchedulingServiceClient is the client API for CourseLocationSchedulingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourseLocationSchedulingServiceClient interface {
	ImportCourseLocationScheduling(ctx context.Context, in *ImportCourseLocationSchedulingRequest, opts ...grpc.CallOption) (*ImportCourseLocationSchedulingResponse, error)
}

type courseLocationSchedulingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseLocationSchedulingServiceClient(cc grpc.ClientConnInterface) CourseLocationSchedulingServiceClient {
	return &courseLocationSchedulingServiceClient{cc}
}

func (c *courseLocationSchedulingServiceClient) ImportCourseLocationScheduling(ctx context.Context, in *ImportCourseLocationSchedulingRequest, opts ...grpc.CallOption) (*ImportCourseLocationSchedulingResponse, error) {
	out := new(ImportCourseLocationSchedulingResponse)
	err := c.cc.Invoke(ctx, "/lessonmgmt.v1.CourseLocationSchedulingService/ImportCourseLocationScheduling", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseLocationSchedulingServiceServer is the server API for CourseLocationSchedulingService service.
// All implementations should embed UnimplementedCourseLocationSchedulingServiceServer
// for forward compatibility
type CourseLocationSchedulingServiceServer interface {
	ImportCourseLocationScheduling(context.Context, *ImportCourseLocationSchedulingRequest) (*ImportCourseLocationSchedulingResponse, error)
}

// UnimplementedCourseLocationSchedulingServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCourseLocationSchedulingServiceServer struct {
}

func (UnimplementedCourseLocationSchedulingServiceServer) ImportCourseLocationScheduling(context.Context, *ImportCourseLocationSchedulingRequest) (*ImportCourseLocationSchedulingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportCourseLocationScheduling not implemented")
}

// UnsafeCourseLocationSchedulingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseLocationSchedulingServiceServer will
// result in compilation errors.
type UnsafeCourseLocationSchedulingServiceServer interface {
	mustEmbedUnimplementedCourseLocationSchedulingServiceServer()
}

func RegisterCourseLocationSchedulingServiceServer(s grpc.ServiceRegistrar, srv CourseLocationSchedulingServiceServer) {
	s.RegisterService(&_CourseLocationSchedulingService_serviceDesc, srv)
}

func _CourseLocationSchedulingService_ImportCourseLocationScheduling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportCourseLocationSchedulingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseLocationSchedulingServiceServer).ImportCourseLocationScheduling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lessonmgmt.v1.CourseLocationSchedulingService/ImportCourseLocationScheduling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseLocationSchedulingServiceServer).ImportCourseLocationScheduling(ctx, req.(*ImportCourseLocationSchedulingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CourseLocationSchedulingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lessonmgmt.v1.CourseLocationSchedulingService",
	HandlerType: (*CourseLocationSchedulingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportCourseLocationScheduling",
			Handler:    _CourseLocationSchedulingService_ImportCourseLocationScheduling_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lessonmgmt/v1/course_location_scheduling.proto",
}
