// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BDDSuiteServiceClient is the client API for BDDSuiteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BDDSuiteServiceClient interface {
	AddInstance(ctx context.Context, in *AddInstanceRequest, opts ...grpc.CallOption) (*AddInstanceResponse, error)
	MarkInstanceEnded(ctx context.Context, in *MarkInstanceEndedRequest, opts ...grpc.CallOption) (*MarkInstanceEndedResponse, error)
	AddFeature(ctx context.Context, in *AddFeatureRequest, opts ...grpc.CallOption) (*AddFeatureResponse, error)
	MarkFeatureEnded(ctx context.Context, in *MarkFeatureEndedRequest, opts ...grpc.CallOption) (*MarkFeatureEndedResponse, error)
	SetFeatureStatus(ctx context.Context, in *SetFeatureStatusRequest, opts ...grpc.CallOption) (*SetFeatureStatusResponse, error)
	AddScenario(ctx context.Context, in *AddScenarioRequest, opts ...grpc.CallOption) (*AddScenarioResponse, error)
	MarkScenarioEnded(ctx context.Context, in *MarkScenarioEndedRequest, opts ...grpc.CallOption) (*MarkScenarioEndedResponse, error)
	AddStep(ctx context.Context, in *AddStepRequest, opts ...grpc.CallOption) (*AddStepResponse, error)
	MarkStepEnded(ctx context.Context, in *MarkStepEndedRequest, opts ...grpc.CallOption) (*MarkStepEndedResponse, error)
	RetrieveSkippedBDDTests(ctx context.Context, in *RetrieveSkippedBDDTestsRequest, opts ...grpc.CallOption) (*RetrieveSkippedBDDTestsResponse, error)
}

type bDDSuiteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBDDSuiteServiceClient(cc grpc.ClientConnInterface) BDDSuiteServiceClient {
	return &bDDSuiteServiceClient{cc}
}

func (c *bDDSuiteServiceClient) AddInstance(ctx context.Context, in *AddInstanceRequest, opts ...grpc.CallOption) (*AddInstanceResponse, error) {
	out := new(AddInstanceResponse)
	err := c.cc.Invoke(ctx, "/draft.v1.BDDSuiteService/AddInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bDDSuiteServiceClient) MarkInstanceEnded(ctx context.Context, in *MarkInstanceEndedRequest, opts ...grpc.CallOption) (*MarkInstanceEndedResponse, error) {
	out := new(MarkInstanceEndedResponse)
	err := c.cc.Invoke(ctx, "/draft.v1.BDDSuiteService/MarkInstanceEnded", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bDDSuiteServiceClient) AddFeature(ctx context.Context, in *AddFeatureRequest, opts ...grpc.CallOption) (*AddFeatureResponse, error) {
	out := new(AddFeatureResponse)
	err := c.cc.Invoke(ctx, "/draft.v1.BDDSuiteService/AddFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bDDSuiteServiceClient) MarkFeatureEnded(ctx context.Context, in *MarkFeatureEndedRequest, opts ...grpc.CallOption) (*MarkFeatureEndedResponse, error) {
	out := new(MarkFeatureEndedResponse)
	err := c.cc.Invoke(ctx, "/draft.v1.BDDSuiteService/MarkFeatureEnded", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bDDSuiteServiceClient) SetFeatureStatus(ctx context.Context, in *SetFeatureStatusRequest, opts ...grpc.CallOption) (*SetFeatureStatusResponse, error) {
	out := new(SetFeatureStatusResponse)
	err := c.cc.Invoke(ctx, "/draft.v1.BDDSuiteService/SetFeatureStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bDDSuiteServiceClient) AddScenario(ctx context.Context, in *AddScenarioRequest, opts ...grpc.CallOption) (*AddScenarioResponse, error) {
	out := new(AddScenarioResponse)
	err := c.cc.Invoke(ctx, "/draft.v1.BDDSuiteService/AddScenario", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bDDSuiteServiceClient) MarkScenarioEnded(ctx context.Context, in *MarkScenarioEndedRequest, opts ...grpc.CallOption) (*MarkScenarioEndedResponse, error) {
	out := new(MarkScenarioEndedResponse)
	err := c.cc.Invoke(ctx, "/draft.v1.BDDSuiteService/MarkScenarioEnded", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bDDSuiteServiceClient) AddStep(ctx context.Context, in *AddStepRequest, opts ...grpc.CallOption) (*AddStepResponse, error) {
	out := new(AddStepResponse)
	err := c.cc.Invoke(ctx, "/draft.v1.BDDSuiteService/AddStep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bDDSuiteServiceClient) MarkStepEnded(ctx context.Context, in *MarkStepEndedRequest, opts ...grpc.CallOption) (*MarkStepEndedResponse, error) {
	out := new(MarkStepEndedResponse)
	err := c.cc.Invoke(ctx, "/draft.v1.BDDSuiteService/MarkStepEnded", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bDDSuiteServiceClient) RetrieveSkippedBDDTests(ctx context.Context, in *RetrieveSkippedBDDTestsRequest, opts ...grpc.CallOption) (*RetrieveSkippedBDDTestsResponse, error) {
	out := new(RetrieveSkippedBDDTestsResponse)
	err := c.cc.Invoke(ctx, "/draft.v1.BDDSuiteService/RetrieveSkippedBDDTests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BDDSuiteServiceServer is the server API for BDDSuiteService service.
// All implementations should embed UnimplementedBDDSuiteServiceServer
// for forward compatibility
type BDDSuiteServiceServer interface {
	AddInstance(context.Context, *AddInstanceRequest) (*AddInstanceResponse, error)
	MarkInstanceEnded(context.Context, *MarkInstanceEndedRequest) (*MarkInstanceEndedResponse, error)
	AddFeature(context.Context, *AddFeatureRequest) (*AddFeatureResponse, error)
	MarkFeatureEnded(context.Context, *MarkFeatureEndedRequest) (*MarkFeatureEndedResponse, error)
	SetFeatureStatus(context.Context, *SetFeatureStatusRequest) (*SetFeatureStatusResponse, error)
	AddScenario(context.Context, *AddScenarioRequest) (*AddScenarioResponse, error)
	MarkScenarioEnded(context.Context, *MarkScenarioEndedRequest) (*MarkScenarioEndedResponse, error)
	AddStep(context.Context, *AddStepRequest) (*AddStepResponse, error)
	MarkStepEnded(context.Context, *MarkStepEndedRequest) (*MarkStepEndedResponse, error)
	RetrieveSkippedBDDTests(context.Context, *RetrieveSkippedBDDTestsRequest) (*RetrieveSkippedBDDTestsResponse, error)
}

// UnimplementedBDDSuiteServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBDDSuiteServiceServer struct {
}

func (UnimplementedBDDSuiteServiceServer) AddInstance(context.Context, *AddInstanceRequest) (*AddInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInstance not implemented")
}
func (UnimplementedBDDSuiteServiceServer) MarkInstanceEnded(context.Context, *MarkInstanceEndedRequest) (*MarkInstanceEndedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkInstanceEnded not implemented")
}
func (UnimplementedBDDSuiteServiceServer) AddFeature(context.Context, *AddFeatureRequest) (*AddFeatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFeature not implemented")
}
func (UnimplementedBDDSuiteServiceServer) MarkFeatureEnded(context.Context, *MarkFeatureEndedRequest) (*MarkFeatureEndedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkFeatureEnded not implemented")
}
func (UnimplementedBDDSuiteServiceServer) SetFeatureStatus(context.Context, *SetFeatureStatusRequest) (*SetFeatureStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFeatureStatus not implemented")
}
func (UnimplementedBDDSuiteServiceServer) AddScenario(context.Context, *AddScenarioRequest) (*AddScenarioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddScenario not implemented")
}
func (UnimplementedBDDSuiteServiceServer) MarkScenarioEnded(context.Context, *MarkScenarioEndedRequest) (*MarkScenarioEndedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkScenarioEnded not implemented")
}
func (UnimplementedBDDSuiteServiceServer) AddStep(context.Context, *AddStepRequest) (*AddStepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStep not implemented")
}
func (UnimplementedBDDSuiteServiceServer) MarkStepEnded(context.Context, *MarkStepEndedRequest) (*MarkStepEndedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkStepEnded not implemented")
}
func (UnimplementedBDDSuiteServiceServer) RetrieveSkippedBDDTests(context.Context, *RetrieveSkippedBDDTestsRequest) (*RetrieveSkippedBDDTestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveSkippedBDDTests not implemented")
}

// UnsafeBDDSuiteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BDDSuiteServiceServer will
// result in compilation errors.
type UnsafeBDDSuiteServiceServer interface {
	mustEmbedUnimplementedBDDSuiteServiceServer()
}

func RegisterBDDSuiteServiceServer(s grpc.ServiceRegistrar, srv BDDSuiteServiceServer) {
	s.RegisterService(&_BDDSuiteService_serviceDesc, srv)
}

func _BDDSuiteService_AddInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BDDSuiteServiceServer).AddInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/draft.v1.BDDSuiteService/AddInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BDDSuiteServiceServer).AddInstance(ctx, req.(*AddInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BDDSuiteService_MarkInstanceEnded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkInstanceEndedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BDDSuiteServiceServer).MarkInstanceEnded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/draft.v1.BDDSuiteService/MarkInstanceEnded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BDDSuiteServiceServer).MarkInstanceEnded(ctx, req.(*MarkInstanceEndedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BDDSuiteService_AddFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BDDSuiteServiceServer).AddFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/draft.v1.BDDSuiteService/AddFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BDDSuiteServiceServer).AddFeature(ctx, req.(*AddFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BDDSuiteService_MarkFeatureEnded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkFeatureEndedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BDDSuiteServiceServer).MarkFeatureEnded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/draft.v1.BDDSuiteService/MarkFeatureEnded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BDDSuiteServiceServer).MarkFeatureEnded(ctx, req.(*MarkFeatureEndedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BDDSuiteService_SetFeatureStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFeatureStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BDDSuiteServiceServer).SetFeatureStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/draft.v1.BDDSuiteService/SetFeatureStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BDDSuiteServiceServer).SetFeatureStatus(ctx, req.(*SetFeatureStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BDDSuiteService_AddScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddScenarioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BDDSuiteServiceServer).AddScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/draft.v1.BDDSuiteService/AddScenario",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BDDSuiteServiceServer).AddScenario(ctx, req.(*AddScenarioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BDDSuiteService_MarkScenarioEnded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkScenarioEndedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BDDSuiteServiceServer).MarkScenarioEnded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/draft.v1.BDDSuiteService/MarkScenarioEnded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BDDSuiteServiceServer).MarkScenarioEnded(ctx, req.(*MarkScenarioEndedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BDDSuiteService_AddStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BDDSuiteServiceServer).AddStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/draft.v1.BDDSuiteService/AddStep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BDDSuiteServiceServer).AddStep(ctx, req.(*AddStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BDDSuiteService_MarkStepEnded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkStepEndedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BDDSuiteServiceServer).MarkStepEnded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/draft.v1.BDDSuiteService/MarkStepEnded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BDDSuiteServiceServer).MarkStepEnded(ctx, req.(*MarkStepEndedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BDDSuiteService_RetrieveSkippedBDDTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveSkippedBDDTestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BDDSuiteServiceServer).RetrieveSkippedBDDTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/draft.v1.BDDSuiteService/RetrieveSkippedBDDTests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BDDSuiteServiceServer).RetrieveSkippedBDDTests(ctx, req.(*RetrieveSkippedBDDTestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BDDSuiteService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "draft.v1.BDDSuiteService",
	HandlerType: (*BDDSuiteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddInstance",
			Handler:    _BDDSuiteService_AddInstance_Handler,
		},
		{
			MethodName: "MarkInstanceEnded",
			Handler:    _BDDSuiteService_MarkInstanceEnded_Handler,
		},
		{
			MethodName: "AddFeature",
			Handler:    _BDDSuiteService_AddFeature_Handler,
		},
		{
			MethodName: "MarkFeatureEnded",
			Handler:    _BDDSuiteService_MarkFeatureEnded_Handler,
		},
		{
			MethodName: "SetFeatureStatus",
			Handler:    _BDDSuiteService_SetFeatureStatus_Handler,
		},
		{
			MethodName: "AddScenario",
			Handler:    _BDDSuiteService_AddScenario_Handler,
		},
		{
			MethodName: "MarkScenarioEnded",
			Handler:    _BDDSuiteService_MarkScenarioEnded_Handler,
		},
		{
			MethodName: "AddStep",
			Handler:    _BDDSuiteService_AddStep_Handler,
		},
		{
			MethodName: "MarkStepEnded",
			Handler:    _BDDSuiteService_MarkStepEnded_Handler,
		},
		{
			MethodName: "RetrieveSkippedBDDTests",
			Handler:    _BDDSuiteService_RetrieveSkippedBDDTests_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "draft/v1/bdd_suite.proto",
}
