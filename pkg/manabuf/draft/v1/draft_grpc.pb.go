// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SendCoverageServiceClient is the client API for SendCoverageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SendCoverageServiceClient interface {
	SendCoverage(ctx context.Context, in *SendCoverageRequest, opts ...grpc.CallOption) (*SendCoverageResponse, error)
	CreateTargetCoverage(ctx context.Context, in *CreateTargetCoverageRequest, opts ...grpc.CallOption) (*CreateTargetCoverageResponse, error)
	UpdateTargetCoverage(ctx context.Context, in *UpdateTargetCoverageRequest, opts ...grpc.CallOption) (*UpdateTargetCoverageResponse, error)
}

type sendCoverageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSendCoverageServiceClient(cc grpc.ClientConnInterface) SendCoverageServiceClient {
	return &sendCoverageServiceClient{cc}
}

func (c *sendCoverageServiceClient) SendCoverage(ctx context.Context, in *SendCoverageRequest, opts ...grpc.CallOption) (*SendCoverageResponse, error) {
	out := new(SendCoverageResponse)
	err := c.cc.Invoke(ctx, "/draft.v1.SendCoverageService/SendCoverage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendCoverageServiceClient) CreateTargetCoverage(ctx context.Context, in *CreateTargetCoverageRequest, opts ...grpc.CallOption) (*CreateTargetCoverageResponse, error) {
	out := new(CreateTargetCoverageResponse)
	err := c.cc.Invoke(ctx, "/draft.v1.SendCoverageService/CreateTargetCoverage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendCoverageServiceClient) UpdateTargetCoverage(ctx context.Context, in *UpdateTargetCoverageRequest, opts ...grpc.CallOption) (*UpdateTargetCoverageResponse, error) {
	out := new(UpdateTargetCoverageResponse)
	err := c.cc.Invoke(ctx, "/draft.v1.SendCoverageService/UpdateTargetCoverage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SendCoverageServiceServer is the server API for SendCoverageService service.
// All implementations should embed UnimplementedSendCoverageServiceServer
// for forward compatibility
type SendCoverageServiceServer interface {
	SendCoverage(context.Context, *SendCoverageRequest) (*SendCoverageResponse, error)
	CreateTargetCoverage(context.Context, *CreateTargetCoverageRequest) (*CreateTargetCoverageResponse, error)
	UpdateTargetCoverage(context.Context, *UpdateTargetCoverageRequest) (*UpdateTargetCoverageResponse, error)
}

// UnimplementedSendCoverageServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSendCoverageServiceServer struct {
}

func (UnimplementedSendCoverageServiceServer) SendCoverage(context.Context, *SendCoverageRequest) (*SendCoverageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCoverage not implemented")
}
func (UnimplementedSendCoverageServiceServer) CreateTargetCoverage(context.Context, *CreateTargetCoverageRequest) (*CreateTargetCoverageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTargetCoverage not implemented")
}
func (UnimplementedSendCoverageServiceServer) UpdateTargetCoverage(context.Context, *UpdateTargetCoverageRequest) (*UpdateTargetCoverageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTargetCoverage not implemented")
}

// UnsafeSendCoverageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SendCoverageServiceServer will
// result in compilation errors.
type UnsafeSendCoverageServiceServer interface {
	mustEmbedUnimplementedSendCoverageServiceServer()
}

func RegisterSendCoverageServiceServer(s grpc.ServiceRegistrar, srv SendCoverageServiceServer) {
	s.RegisterService(&_SendCoverageService_serviceDesc, srv)
}

func _SendCoverageService_SendCoverage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCoverageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendCoverageServiceServer).SendCoverage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/draft.v1.SendCoverageService/SendCoverage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendCoverageServiceServer).SendCoverage(ctx, req.(*SendCoverageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendCoverageService_CreateTargetCoverage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTargetCoverageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendCoverageServiceServer).CreateTargetCoverage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/draft.v1.SendCoverageService/CreateTargetCoverage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendCoverageServiceServer).CreateTargetCoverage(ctx, req.(*CreateTargetCoverageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendCoverageService_UpdateTargetCoverage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTargetCoverageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendCoverageServiceServer).UpdateTargetCoverage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/draft.v1.SendCoverageService/UpdateTargetCoverage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendCoverageServiceServer).UpdateTargetCoverage(ctx, req.(*UpdateTargetCoverageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SendCoverageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "draft.v1.SendCoverageService",
	HandlerType: (*SendCoverageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCoverage",
			Handler:    _SendCoverageService_SendCoverage_Handler,
		},
		{
			MethodName: "CreateTargetCoverage",
			Handler:    _SendCoverageService_CreateTargetCoverage_Handler,
		},
		{
			MethodName: "UpdateTargetCoverage",
			Handler:    _SendCoverageService_UpdateTargetCoverage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "draft/v1/draft.proto",
}
