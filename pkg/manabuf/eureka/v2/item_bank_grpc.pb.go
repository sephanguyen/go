// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package epb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ItemBankServiceClient is the client API for ItemBankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemBankServiceClient interface {
	GetTotalItemsByLM(ctx context.Context, in *GetTotalItemsByLMRequest, opts ...grpc.CallOption) (*GetTotalItemsByLMResponse, error)
	GetItemsByLM(ctx context.Context, in *GetItemsByLMRequest, opts ...grpc.CallOption) (*GetItemsByLMResponse, error)
}

type itemBankServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewItemBankServiceClient(cc grpc.ClientConnInterface) ItemBankServiceClient {
	return &itemBankServiceClient{cc}
}

func (c *itemBankServiceClient) GetTotalItemsByLM(ctx context.Context, in *GetTotalItemsByLMRequest, opts ...grpc.CallOption) (*GetTotalItemsByLMResponse, error) {
	out := new(GetTotalItemsByLMResponse)
	err := c.cc.Invoke(ctx, "/eureka.v2.ItemBankService/GetTotalItemsByLM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemBankServiceClient) GetItemsByLM(ctx context.Context, in *GetItemsByLMRequest, opts ...grpc.CallOption) (*GetItemsByLMResponse, error) {
	out := new(GetItemsByLMResponse)
	err := c.cc.Invoke(ctx, "/eureka.v2.ItemBankService/GetItemsByLM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemBankServiceServer is the server API for ItemBankService service.
// All implementations should embed UnimplementedItemBankServiceServer
// for forward compatibility
type ItemBankServiceServer interface {
	GetTotalItemsByLM(context.Context, *GetTotalItemsByLMRequest) (*GetTotalItemsByLMResponse, error)
	GetItemsByLM(context.Context, *GetItemsByLMRequest) (*GetItemsByLMResponse, error)
}

// UnimplementedItemBankServiceServer should be embedded to have forward compatible implementations.
type UnimplementedItemBankServiceServer struct {
}

func (UnimplementedItemBankServiceServer) GetTotalItemsByLM(context.Context, *GetTotalItemsByLMRequest) (*GetTotalItemsByLMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalItemsByLM not implemented")
}
func (UnimplementedItemBankServiceServer) GetItemsByLM(context.Context, *GetItemsByLMRequest) (*GetItemsByLMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemsByLM not implemented")
}

// UnsafeItemBankServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemBankServiceServer will
// result in compilation errors.
type UnsafeItemBankServiceServer interface {
	mustEmbedUnimplementedItemBankServiceServer()
}

func RegisterItemBankServiceServer(s grpc.ServiceRegistrar, srv ItemBankServiceServer) {
	s.RegisterService(&_ItemBankService_serviceDesc, srv)
}

func _ItemBankService_GetTotalItemsByLM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalItemsByLMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemBankServiceServer).GetTotalItemsByLM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v2.ItemBankService/GetTotalItemsByLM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemBankServiceServer).GetTotalItemsByLM(ctx, req.(*GetTotalItemsByLMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemBankService_GetItemsByLM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemsByLMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemBankServiceServer).GetItemsByLM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v2.ItemBankService/GetItemsByLM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemBankServiceServer).GetItemsByLM(ctx, req.(*GetItemsByLMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ItemBankService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eureka.v2.ItemBankService",
	HandlerType: (*ItemBankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTotalItemsByLM",
			Handler:    _ItemBankService_GetTotalItemsByLM_Handler,
		},
		{
			MethodName: "GetItemsByLM",
			Handler:    _ItemBankService_GetItemsByLM_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eureka/v2/item_bank.proto",
}
