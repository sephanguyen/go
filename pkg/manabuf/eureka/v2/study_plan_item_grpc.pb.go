// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package epb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// StudyPlanItemServiceClient is the client API for StudyPlanItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudyPlanItemServiceClient interface {
	UpsertStudyPlanItem(ctx context.Context, in *UpsertStudyPlanItemRequest, opts ...grpc.CallOption) (*UpsertStudyPlanItemResponse, error)
}

type studyPlanItemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudyPlanItemServiceClient(cc grpc.ClientConnInterface) StudyPlanItemServiceClient {
	return &studyPlanItemServiceClient{cc}
}

func (c *studyPlanItemServiceClient) UpsertStudyPlanItem(ctx context.Context, in *UpsertStudyPlanItemRequest, opts ...grpc.CallOption) (*UpsertStudyPlanItemResponse, error) {
	out := new(UpsertStudyPlanItemResponse)
	err := c.cc.Invoke(ctx, "/eureka.v2.StudyPlanItemService/UpsertStudyPlanItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudyPlanItemServiceServer is the server API for StudyPlanItemService service.
// All implementations should embed UnimplementedStudyPlanItemServiceServer
// for forward compatibility
type StudyPlanItemServiceServer interface {
	UpsertStudyPlanItem(context.Context, *UpsertStudyPlanItemRequest) (*UpsertStudyPlanItemResponse, error)
}

// UnimplementedStudyPlanItemServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStudyPlanItemServiceServer struct {
}

func (UnimplementedStudyPlanItemServiceServer) UpsertStudyPlanItem(context.Context, *UpsertStudyPlanItemRequest) (*UpsertStudyPlanItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertStudyPlanItem not implemented")
}

// UnsafeStudyPlanItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudyPlanItemServiceServer will
// result in compilation errors.
type UnsafeStudyPlanItemServiceServer interface {
	mustEmbedUnimplementedStudyPlanItemServiceServer()
}

func RegisterStudyPlanItemServiceServer(s grpc.ServiceRegistrar, srv StudyPlanItemServiceServer) {
	s.RegisterService(&_StudyPlanItemService_serviceDesc, srv)
}

func _StudyPlanItemService_UpsertStudyPlanItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertStudyPlanItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanItemServiceServer).UpsertStudyPlanItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v2.StudyPlanItemService/UpsertStudyPlanItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanItemServiceServer).UpsertStudyPlanItem(ctx, req.(*UpsertStudyPlanItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StudyPlanItemService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eureka.v2.StudyPlanItemService",
	HandlerType: (*StudyPlanItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertStudyPlanItem",
			Handler:    _StudyPlanItemService_UpsertStudyPlanItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eureka/v2/study_plan_item.proto",
}
