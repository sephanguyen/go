// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package epb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LearningMaterialServiceClient is the client API for LearningMaterialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LearningMaterialServiceClient interface {
	UpdatePublishStatusLearningMaterials(ctx context.Context, in *UpdatePublishStatusLearningMaterialsRequest, opts ...grpc.CallOption) (*UpdatePublishStatusLearningMaterialsResponse, error)
	ListLearningMaterialInfo(ctx context.Context, in *ListLearningMaterialInfoRequest, opts ...grpc.CallOption) (*ListLearningMaterialInfoResponse, error)
}

type learningMaterialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLearningMaterialServiceClient(cc grpc.ClientConnInterface) LearningMaterialServiceClient {
	return &learningMaterialServiceClient{cc}
}

func (c *learningMaterialServiceClient) UpdatePublishStatusLearningMaterials(ctx context.Context, in *UpdatePublishStatusLearningMaterialsRequest, opts ...grpc.CallOption) (*UpdatePublishStatusLearningMaterialsResponse, error) {
	out := new(UpdatePublishStatusLearningMaterialsResponse)
	err := c.cc.Invoke(ctx, "/eureka.v2.LearningMaterialService/UpdatePublishStatusLearningMaterials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningMaterialServiceClient) ListLearningMaterialInfo(ctx context.Context, in *ListLearningMaterialInfoRequest, opts ...grpc.CallOption) (*ListLearningMaterialInfoResponse, error) {
	out := new(ListLearningMaterialInfoResponse)
	err := c.cc.Invoke(ctx, "/eureka.v2.LearningMaterialService/ListLearningMaterialInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LearningMaterialServiceServer is the server API for LearningMaterialService service.
// All implementations should embed UnimplementedLearningMaterialServiceServer
// for forward compatibility
type LearningMaterialServiceServer interface {
	UpdatePublishStatusLearningMaterials(context.Context, *UpdatePublishStatusLearningMaterialsRequest) (*UpdatePublishStatusLearningMaterialsResponse, error)
	ListLearningMaterialInfo(context.Context, *ListLearningMaterialInfoRequest) (*ListLearningMaterialInfoResponse, error)
}

// UnimplementedLearningMaterialServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLearningMaterialServiceServer struct {
}

func (UnimplementedLearningMaterialServiceServer) UpdatePublishStatusLearningMaterials(context.Context, *UpdatePublishStatusLearningMaterialsRequest) (*UpdatePublishStatusLearningMaterialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePublishStatusLearningMaterials not implemented")
}
func (UnimplementedLearningMaterialServiceServer) ListLearningMaterialInfo(context.Context, *ListLearningMaterialInfoRequest) (*ListLearningMaterialInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLearningMaterialInfo not implemented")
}

// UnsafeLearningMaterialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LearningMaterialServiceServer will
// result in compilation errors.
type UnsafeLearningMaterialServiceServer interface {
	mustEmbedUnimplementedLearningMaterialServiceServer()
}

func RegisterLearningMaterialServiceServer(s grpc.ServiceRegistrar, srv LearningMaterialServiceServer) {
	s.RegisterService(&_LearningMaterialService_serviceDesc, srv)
}

func _LearningMaterialService_UpdatePublishStatusLearningMaterials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePublishStatusLearningMaterialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningMaterialServiceServer).UpdatePublishStatusLearningMaterials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v2.LearningMaterialService/UpdatePublishStatusLearningMaterials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningMaterialServiceServer).UpdatePublishStatusLearningMaterials(ctx, req.(*UpdatePublishStatusLearningMaterialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningMaterialService_ListLearningMaterialInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLearningMaterialInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningMaterialServiceServer).ListLearningMaterialInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v2.LearningMaterialService/ListLearningMaterialInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningMaterialServiceServer).ListLearningMaterialInfo(ctx, req.(*ListLearningMaterialInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LearningMaterialService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eureka.v2.LearningMaterialService",
	HandlerType: (*LearningMaterialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdatePublishStatusLearningMaterials",
			Handler:    _LearningMaterialService_UpdatePublishStatusLearningMaterials_Handler,
		},
		{
			MethodName: "ListLearningMaterialInfo",
			Handler:    _LearningMaterialService_ListLearningMaterialInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eureka/v2/learning_material.proto",
}
