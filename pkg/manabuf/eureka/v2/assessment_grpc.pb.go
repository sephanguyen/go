// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package epb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AssessmentServiceClient is the client API for AssessmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssessmentServiceClient interface {
	GetAssessmentSignedRequest(ctx context.Context, in *GetAssessmentSignedRequestRequest, opts ...grpc.CallOption) (*GetAssessmentSignedRequestResponse, error)
	GetStudyPlanAssessmentSignedRequest(ctx context.Context, in *GetStudyPlanAssessmentSignedRequestRequest, opts ...grpc.CallOption) (*GetStudyPlanAssessmentSignedRequestResponse, error)
	GetLearningMaterialStatuses(ctx context.Context, in *GetLearningMaterialStatusesRequest, opts ...grpc.CallOption) (*GetLearningMaterialStatusesResponse, error)
	GetAssessmentSubmissionDetail(ctx context.Context, in *GetAssessmentSubmissionDetailRequest, opts ...grpc.CallOption) (*GetAssessmentSubmissionDetailResponse, error)
	// actually AssessmentAttemptHistory
	ListAssessmentSubmissionResult(ctx context.Context, in *ListAssessmentSubmissionResultRequest, opts ...grpc.CallOption) (*ListAssessmentSubmissionResultResponse, error)
	ListStudyPlanAssessmentSubmissionResult(ctx context.Context, in *ListStudyPlanAssessmentSubmissionResultRequest, opts ...grpc.CallOption) (*ListStudyPlanAssessmentSubmissionResultResponse, error)
	CompleteAssessmentSession(ctx context.Context, in *CompleteAssessmentSessionRequest, opts ...grpc.CallOption) (*CompleteAssessmentSessionResponse, error)
	CompleteStudyPlanAssessmentSession(ctx context.Context, in *CompleteStudyPlanAssessmentSessionRequest, opts ...grpc.CallOption) (*CompleteStudyPlanAssessmentSessionResponse, error)
	AllocateMarkerSubmissions(ctx context.Context, in *AllocateMarkerSubmissionsRequest, opts ...grpc.CallOption) (*AllocateMarkerSubmissionsResponse, error)
	UpdateManualGradingSubmission(ctx context.Context, in *UpdateManualGradingSubmissionRequest, opts ...grpc.CallOption) (*UpdateManualGradingSubmissionResponse, error)
	ListSubmissions(ctx context.Context, in *ListSubmissionsRequest, opts ...grpc.CallOption) (*ListSubmissionsResponse, error)
}

type assessmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssessmentServiceClient(cc grpc.ClientConnInterface) AssessmentServiceClient {
	return &assessmentServiceClient{cc}
}

func (c *assessmentServiceClient) GetAssessmentSignedRequest(ctx context.Context, in *GetAssessmentSignedRequestRequest, opts ...grpc.CallOption) (*GetAssessmentSignedRequestResponse, error) {
	out := new(GetAssessmentSignedRequestResponse)
	err := c.cc.Invoke(ctx, "/eureka.v2.AssessmentService/GetAssessmentSignedRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assessmentServiceClient) GetStudyPlanAssessmentSignedRequest(ctx context.Context, in *GetStudyPlanAssessmentSignedRequestRequest, opts ...grpc.CallOption) (*GetStudyPlanAssessmentSignedRequestResponse, error) {
	out := new(GetStudyPlanAssessmentSignedRequestResponse)
	err := c.cc.Invoke(ctx, "/eureka.v2.AssessmentService/GetStudyPlanAssessmentSignedRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assessmentServiceClient) GetLearningMaterialStatuses(ctx context.Context, in *GetLearningMaterialStatusesRequest, opts ...grpc.CallOption) (*GetLearningMaterialStatusesResponse, error) {
	out := new(GetLearningMaterialStatusesResponse)
	err := c.cc.Invoke(ctx, "/eureka.v2.AssessmentService/GetLearningMaterialStatuses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assessmentServiceClient) GetAssessmentSubmissionDetail(ctx context.Context, in *GetAssessmentSubmissionDetailRequest, opts ...grpc.CallOption) (*GetAssessmentSubmissionDetailResponse, error) {
	out := new(GetAssessmentSubmissionDetailResponse)
	err := c.cc.Invoke(ctx, "/eureka.v2.AssessmentService/GetAssessmentSubmissionDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assessmentServiceClient) ListAssessmentSubmissionResult(ctx context.Context, in *ListAssessmentSubmissionResultRequest, opts ...grpc.CallOption) (*ListAssessmentSubmissionResultResponse, error) {
	out := new(ListAssessmentSubmissionResultResponse)
	err := c.cc.Invoke(ctx, "/eureka.v2.AssessmentService/ListAssessmentSubmissionResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assessmentServiceClient) ListStudyPlanAssessmentSubmissionResult(ctx context.Context, in *ListStudyPlanAssessmentSubmissionResultRequest, opts ...grpc.CallOption) (*ListStudyPlanAssessmentSubmissionResultResponse, error) {
	out := new(ListStudyPlanAssessmentSubmissionResultResponse)
	err := c.cc.Invoke(ctx, "/eureka.v2.AssessmentService/ListStudyPlanAssessmentSubmissionResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assessmentServiceClient) CompleteAssessmentSession(ctx context.Context, in *CompleteAssessmentSessionRequest, opts ...grpc.CallOption) (*CompleteAssessmentSessionResponse, error) {
	out := new(CompleteAssessmentSessionResponse)
	err := c.cc.Invoke(ctx, "/eureka.v2.AssessmentService/CompleteAssessmentSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assessmentServiceClient) CompleteStudyPlanAssessmentSession(ctx context.Context, in *CompleteStudyPlanAssessmentSessionRequest, opts ...grpc.CallOption) (*CompleteStudyPlanAssessmentSessionResponse, error) {
	out := new(CompleteStudyPlanAssessmentSessionResponse)
	err := c.cc.Invoke(ctx, "/eureka.v2.AssessmentService/CompleteStudyPlanAssessmentSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assessmentServiceClient) AllocateMarkerSubmissions(ctx context.Context, in *AllocateMarkerSubmissionsRequest, opts ...grpc.CallOption) (*AllocateMarkerSubmissionsResponse, error) {
	out := new(AllocateMarkerSubmissionsResponse)
	err := c.cc.Invoke(ctx, "/eureka.v2.AssessmentService/AllocateMarkerSubmissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assessmentServiceClient) UpdateManualGradingSubmission(ctx context.Context, in *UpdateManualGradingSubmissionRequest, opts ...grpc.CallOption) (*UpdateManualGradingSubmissionResponse, error) {
	out := new(UpdateManualGradingSubmissionResponse)
	err := c.cc.Invoke(ctx, "/eureka.v2.AssessmentService/UpdateManualGradingSubmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assessmentServiceClient) ListSubmissions(ctx context.Context, in *ListSubmissionsRequest, opts ...grpc.CallOption) (*ListSubmissionsResponse, error) {
	out := new(ListSubmissionsResponse)
	err := c.cc.Invoke(ctx, "/eureka.v2.AssessmentService/ListSubmissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssessmentServiceServer is the server API for AssessmentService service.
// All implementations should embed UnimplementedAssessmentServiceServer
// for forward compatibility
type AssessmentServiceServer interface {
	GetAssessmentSignedRequest(context.Context, *GetAssessmentSignedRequestRequest) (*GetAssessmentSignedRequestResponse, error)
	GetStudyPlanAssessmentSignedRequest(context.Context, *GetStudyPlanAssessmentSignedRequestRequest) (*GetStudyPlanAssessmentSignedRequestResponse, error)
	GetLearningMaterialStatuses(context.Context, *GetLearningMaterialStatusesRequest) (*GetLearningMaterialStatusesResponse, error)
	GetAssessmentSubmissionDetail(context.Context, *GetAssessmentSubmissionDetailRequest) (*GetAssessmentSubmissionDetailResponse, error)
	// actually AssessmentAttemptHistory
	ListAssessmentSubmissionResult(context.Context, *ListAssessmentSubmissionResultRequest) (*ListAssessmentSubmissionResultResponse, error)
	ListStudyPlanAssessmentSubmissionResult(context.Context, *ListStudyPlanAssessmentSubmissionResultRequest) (*ListStudyPlanAssessmentSubmissionResultResponse, error)
	CompleteAssessmentSession(context.Context, *CompleteAssessmentSessionRequest) (*CompleteAssessmentSessionResponse, error)
	CompleteStudyPlanAssessmentSession(context.Context, *CompleteStudyPlanAssessmentSessionRequest) (*CompleteStudyPlanAssessmentSessionResponse, error)
	AllocateMarkerSubmissions(context.Context, *AllocateMarkerSubmissionsRequest) (*AllocateMarkerSubmissionsResponse, error)
	UpdateManualGradingSubmission(context.Context, *UpdateManualGradingSubmissionRequest) (*UpdateManualGradingSubmissionResponse, error)
	ListSubmissions(context.Context, *ListSubmissionsRequest) (*ListSubmissionsResponse, error)
}

// UnimplementedAssessmentServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAssessmentServiceServer struct {
}

func (UnimplementedAssessmentServiceServer) GetAssessmentSignedRequest(context.Context, *GetAssessmentSignedRequestRequest) (*GetAssessmentSignedRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssessmentSignedRequest not implemented")
}
func (UnimplementedAssessmentServiceServer) GetStudyPlanAssessmentSignedRequest(context.Context, *GetStudyPlanAssessmentSignedRequestRequest) (*GetStudyPlanAssessmentSignedRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudyPlanAssessmentSignedRequest not implemented")
}
func (UnimplementedAssessmentServiceServer) GetLearningMaterialStatuses(context.Context, *GetLearningMaterialStatusesRequest) (*GetLearningMaterialStatusesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLearningMaterialStatuses not implemented")
}
func (UnimplementedAssessmentServiceServer) GetAssessmentSubmissionDetail(context.Context, *GetAssessmentSubmissionDetailRequest) (*GetAssessmentSubmissionDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssessmentSubmissionDetail not implemented")
}
func (UnimplementedAssessmentServiceServer) ListAssessmentSubmissionResult(context.Context, *ListAssessmentSubmissionResultRequest) (*ListAssessmentSubmissionResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssessmentSubmissionResult not implemented")
}
func (UnimplementedAssessmentServiceServer) ListStudyPlanAssessmentSubmissionResult(context.Context, *ListStudyPlanAssessmentSubmissionResultRequest) (*ListStudyPlanAssessmentSubmissionResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStudyPlanAssessmentSubmissionResult not implemented")
}
func (UnimplementedAssessmentServiceServer) CompleteAssessmentSession(context.Context, *CompleteAssessmentSessionRequest) (*CompleteAssessmentSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteAssessmentSession not implemented")
}
func (UnimplementedAssessmentServiceServer) CompleteStudyPlanAssessmentSession(context.Context, *CompleteStudyPlanAssessmentSessionRequest) (*CompleteStudyPlanAssessmentSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteStudyPlanAssessmentSession not implemented")
}
func (UnimplementedAssessmentServiceServer) AllocateMarkerSubmissions(context.Context, *AllocateMarkerSubmissionsRequest) (*AllocateMarkerSubmissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateMarkerSubmissions not implemented")
}
func (UnimplementedAssessmentServiceServer) UpdateManualGradingSubmission(context.Context, *UpdateManualGradingSubmissionRequest) (*UpdateManualGradingSubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateManualGradingSubmission not implemented")
}
func (UnimplementedAssessmentServiceServer) ListSubmissions(context.Context, *ListSubmissionsRequest) (*ListSubmissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubmissions not implemented")
}

// UnsafeAssessmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssessmentServiceServer will
// result in compilation errors.
type UnsafeAssessmentServiceServer interface {
	mustEmbedUnimplementedAssessmentServiceServer()
}

func RegisterAssessmentServiceServer(s grpc.ServiceRegistrar, srv AssessmentServiceServer) {
	s.RegisterService(&_AssessmentService_serviceDesc, srv)
}

func _AssessmentService_GetAssessmentSignedRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssessmentSignedRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentServiceServer).GetAssessmentSignedRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v2.AssessmentService/GetAssessmentSignedRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentServiceServer).GetAssessmentSignedRequest(ctx, req.(*GetAssessmentSignedRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssessmentService_GetStudyPlanAssessmentSignedRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudyPlanAssessmentSignedRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentServiceServer).GetStudyPlanAssessmentSignedRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v2.AssessmentService/GetStudyPlanAssessmentSignedRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentServiceServer).GetStudyPlanAssessmentSignedRequest(ctx, req.(*GetStudyPlanAssessmentSignedRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssessmentService_GetLearningMaterialStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLearningMaterialStatusesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentServiceServer).GetLearningMaterialStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v2.AssessmentService/GetLearningMaterialStatuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentServiceServer).GetLearningMaterialStatuses(ctx, req.(*GetLearningMaterialStatusesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssessmentService_GetAssessmentSubmissionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssessmentSubmissionDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentServiceServer).GetAssessmentSubmissionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v2.AssessmentService/GetAssessmentSubmissionDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentServiceServer).GetAssessmentSubmissionDetail(ctx, req.(*GetAssessmentSubmissionDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssessmentService_ListAssessmentSubmissionResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssessmentSubmissionResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentServiceServer).ListAssessmentSubmissionResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v2.AssessmentService/ListAssessmentSubmissionResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentServiceServer).ListAssessmentSubmissionResult(ctx, req.(*ListAssessmentSubmissionResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssessmentService_ListStudyPlanAssessmentSubmissionResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStudyPlanAssessmentSubmissionResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentServiceServer).ListStudyPlanAssessmentSubmissionResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v2.AssessmentService/ListStudyPlanAssessmentSubmissionResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentServiceServer).ListStudyPlanAssessmentSubmissionResult(ctx, req.(*ListStudyPlanAssessmentSubmissionResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssessmentService_CompleteAssessmentSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteAssessmentSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentServiceServer).CompleteAssessmentSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v2.AssessmentService/CompleteAssessmentSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentServiceServer).CompleteAssessmentSession(ctx, req.(*CompleteAssessmentSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssessmentService_CompleteStudyPlanAssessmentSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteStudyPlanAssessmentSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentServiceServer).CompleteStudyPlanAssessmentSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v2.AssessmentService/CompleteStudyPlanAssessmentSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentServiceServer).CompleteStudyPlanAssessmentSession(ctx, req.(*CompleteStudyPlanAssessmentSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssessmentService_AllocateMarkerSubmissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateMarkerSubmissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentServiceServer).AllocateMarkerSubmissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v2.AssessmentService/AllocateMarkerSubmissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentServiceServer).AllocateMarkerSubmissions(ctx, req.(*AllocateMarkerSubmissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssessmentService_UpdateManualGradingSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateManualGradingSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentServiceServer).UpdateManualGradingSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v2.AssessmentService/UpdateManualGradingSubmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentServiceServer).UpdateManualGradingSubmission(ctx, req.(*UpdateManualGradingSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssessmentService_ListSubmissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubmissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentServiceServer).ListSubmissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v2.AssessmentService/ListSubmissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentServiceServer).ListSubmissions(ctx, req.(*ListSubmissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AssessmentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eureka.v2.AssessmentService",
	HandlerType: (*AssessmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAssessmentSignedRequest",
			Handler:    _AssessmentService_GetAssessmentSignedRequest_Handler,
		},
		{
			MethodName: "GetStudyPlanAssessmentSignedRequest",
			Handler:    _AssessmentService_GetStudyPlanAssessmentSignedRequest_Handler,
		},
		{
			MethodName: "GetLearningMaterialStatuses",
			Handler:    _AssessmentService_GetLearningMaterialStatuses_Handler,
		},
		{
			MethodName: "GetAssessmentSubmissionDetail",
			Handler:    _AssessmentService_GetAssessmentSubmissionDetail_Handler,
		},
		{
			MethodName: "ListAssessmentSubmissionResult",
			Handler:    _AssessmentService_ListAssessmentSubmissionResult_Handler,
		},
		{
			MethodName: "ListStudyPlanAssessmentSubmissionResult",
			Handler:    _AssessmentService_ListStudyPlanAssessmentSubmissionResult_Handler,
		},
		{
			MethodName: "CompleteAssessmentSession",
			Handler:    _AssessmentService_CompleteAssessmentSession_Handler,
		},
		{
			MethodName: "CompleteStudyPlanAssessmentSession",
			Handler:    _AssessmentService_CompleteStudyPlanAssessmentSession_Handler,
		},
		{
			MethodName: "AllocateMarkerSubmissions",
			Handler:    _AssessmentService_AllocateMarkerSubmissions_Handler,
		},
		{
			MethodName: "UpdateManualGradingSubmission",
			Handler:    _AssessmentService_UpdateManualGradingSubmission_Handler,
		},
		{
			MethodName: "ListSubmissions",
			Handler:    _AssessmentService_ListSubmissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eureka/v2/assessment.proto",
}
