// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package epb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CerebryServiceClient is the client API for CerebryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CerebryServiceClient interface {
	GetCerebryUserToken(ctx context.Context, in *GetCerebryUserTokenRequest, opts ...grpc.CallOption) (*GetCerebryUserTokenResponse, error)
}

type cerebryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCerebryServiceClient(cc grpc.ClientConnInterface) CerebryServiceClient {
	return &cerebryServiceClient{cc}
}

func (c *cerebryServiceClient) GetCerebryUserToken(ctx context.Context, in *GetCerebryUserTokenRequest, opts ...grpc.CallOption) (*GetCerebryUserTokenResponse, error) {
	out := new(GetCerebryUserTokenResponse)
	err := c.cc.Invoke(ctx, "/eureka.v2.CerebryService/GetCerebryUserToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CerebryServiceServer is the server API for CerebryService service.
// All implementations should embed UnimplementedCerebryServiceServer
// for forward compatibility
type CerebryServiceServer interface {
	GetCerebryUserToken(context.Context, *GetCerebryUserTokenRequest) (*GetCerebryUserTokenResponse, error)
}

// UnimplementedCerebryServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCerebryServiceServer struct {
}

func (UnimplementedCerebryServiceServer) GetCerebryUserToken(context.Context, *GetCerebryUserTokenRequest) (*GetCerebryUserTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCerebryUserToken not implemented")
}

// UnsafeCerebryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CerebryServiceServer will
// result in compilation errors.
type UnsafeCerebryServiceServer interface {
	mustEmbedUnimplementedCerebryServiceServer()
}

func RegisterCerebryServiceServer(s grpc.ServiceRegistrar, srv CerebryServiceServer) {
	s.RegisterService(&_CerebryService_serviceDesc, srv)
}

func _CerebryService_GetCerebryUserToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCerebryUserTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CerebryServiceServer).GetCerebryUserToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v2.CerebryService/GetCerebryUserToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CerebryServiceServer).GetCerebryUserToken(ctx, req.(*GetCerebryUserTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CerebryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eureka.v2.CerebryService",
	HandlerType: (*CerebryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCerebryUserToken",
			Handler:    _CerebryService_GetCerebryUserToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eureka/v2/cerebry.proto",
}
