// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package epb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BookServiceClient is the client API for BookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookServiceClient interface {
	UpsertBooks(ctx context.Context, in *UpsertBooksRequest, opts ...grpc.CallOption) (*UpsertBooksResponse, error)
	GetBookContent(ctx context.Context, in *GetBookContentRequest, opts ...grpc.CallOption) (*GetBookContentResponse, error)
	GetBookHierarchyFlattenByLearningMaterialID(ctx context.Context, in *GetBookHierarchyFlattenByLearningMaterialIDRequest, opts ...grpc.CallOption) (*GetBookHierarchyFlattenByLearningMaterialIDResponse, error)
}

type bookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookServiceClient(cc grpc.ClientConnInterface) BookServiceClient {
	return &bookServiceClient{cc}
}

func (c *bookServiceClient) UpsertBooks(ctx context.Context, in *UpsertBooksRequest, opts ...grpc.CallOption) (*UpsertBooksResponse, error) {
	out := new(UpsertBooksResponse)
	err := c.cc.Invoke(ctx, "/eureka.v2.BookService/UpsertBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) GetBookContent(ctx context.Context, in *GetBookContentRequest, opts ...grpc.CallOption) (*GetBookContentResponse, error) {
	out := new(GetBookContentResponse)
	err := c.cc.Invoke(ctx, "/eureka.v2.BookService/GetBookContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookServiceClient) GetBookHierarchyFlattenByLearningMaterialID(ctx context.Context, in *GetBookHierarchyFlattenByLearningMaterialIDRequest, opts ...grpc.CallOption) (*GetBookHierarchyFlattenByLearningMaterialIDResponse, error) {
	out := new(GetBookHierarchyFlattenByLearningMaterialIDResponse)
	err := c.cc.Invoke(ctx, "/eureka.v2.BookService/GetBookHierarchyFlattenByLearningMaterialID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookServiceServer is the server API for BookService service.
// All implementations should embed UnimplementedBookServiceServer
// for forward compatibility
type BookServiceServer interface {
	UpsertBooks(context.Context, *UpsertBooksRequest) (*UpsertBooksResponse, error)
	GetBookContent(context.Context, *GetBookContentRequest) (*GetBookContentResponse, error)
	GetBookHierarchyFlattenByLearningMaterialID(context.Context, *GetBookHierarchyFlattenByLearningMaterialIDRequest) (*GetBookHierarchyFlattenByLearningMaterialIDResponse, error)
}

// UnimplementedBookServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBookServiceServer struct {
}

func (UnimplementedBookServiceServer) UpsertBooks(context.Context, *UpsertBooksRequest) (*UpsertBooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertBooks not implemented")
}
func (UnimplementedBookServiceServer) GetBookContent(context.Context, *GetBookContentRequest) (*GetBookContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookContent not implemented")
}
func (UnimplementedBookServiceServer) GetBookHierarchyFlattenByLearningMaterialID(context.Context, *GetBookHierarchyFlattenByLearningMaterialIDRequest) (*GetBookHierarchyFlattenByLearningMaterialIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookHierarchyFlattenByLearningMaterialID not implemented")
}

// UnsafeBookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookServiceServer will
// result in compilation errors.
type UnsafeBookServiceServer interface {
	mustEmbedUnimplementedBookServiceServer()
}

func RegisterBookServiceServer(s grpc.ServiceRegistrar, srv BookServiceServer) {
	s.RegisterService(&_BookService_serviceDesc, srv)
}

func _BookService_UpsertBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertBooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).UpsertBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v2.BookService/UpsertBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).UpsertBooks(ctx, req.(*UpsertBooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_GetBookContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).GetBookContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v2.BookService/GetBookContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).GetBookContent(ctx, req.(*GetBookContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookService_GetBookHierarchyFlattenByLearningMaterialID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookHierarchyFlattenByLearningMaterialIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookServiceServer).GetBookHierarchyFlattenByLearningMaterialID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v2.BookService/GetBookHierarchyFlattenByLearningMaterialID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookServiceServer).GetBookHierarchyFlattenByLearningMaterialID(ctx, req.(*GetBookHierarchyFlattenByLearningMaterialIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BookService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eureka.v2.BookService",
	HandlerType: (*BookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertBooks",
			Handler:    _BookService_UpsertBooks_Handler,
		},
		{
			MethodName: "GetBookContent",
			Handler:    _BookService_GetBookContent_Handler,
		},
		{
			MethodName: "GetBookHierarchyFlattenByLearningMaterialID",
			Handler:    _BookService_GetBookHierarchyFlattenByLearningMaterialID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eureka/v2/book.proto",
}
