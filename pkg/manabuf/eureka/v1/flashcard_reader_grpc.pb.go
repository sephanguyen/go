// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package epb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// FlashCardReaderServiceClient is the client API for FlashCardReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlashCardReaderServiceClient interface {
	RetrieveFlashCardStudyProgress(ctx context.Context, in *RetrieveFlashCardStudyProgressRequest, opts ...grpc.CallOption) (*RetrieveFlashCardStudyProgressResponse, error)
	RetrieveLastFlashcardStudyProgress(ctx context.Context, in *RetrieveLastFlashcardStudyProgressRequest, opts ...grpc.CallOption) (*RetrieveLastFlashcardStudyProgressResponse, error)
}

type flashCardReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlashCardReaderServiceClient(cc grpc.ClientConnInterface) FlashCardReaderServiceClient {
	return &flashCardReaderServiceClient{cc}
}

func (c *flashCardReaderServiceClient) RetrieveFlashCardStudyProgress(ctx context.Context, in *RetrieveFlashCardStudyProgressRequest, opts ...grpc.CallOption) (*RetrieveFlashCardStudyProgressResponse, error) {
	out := new(RetrieveFlashCardStudyProgressResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.FlashCardReaderService/RetrieveFlashCardStudyProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashCardReaderServiceClient) RetrieveLastFlashcardStudyProgress(ctx context.Context, in *RetrieveLastFlashcardStudyProgressRequest, opts ...grpc.CallOption) (*RetrieveLastFlashcardStudyProgressResponse, error) {
	out := new(RetrieveLastFlashcardStudyProgressResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.FlashCardReaderService/RetrieveLastFlashcardStudyProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlashCardReaderServiceServer is the server API for FlashCardReaderService service.
// All implementations should embed UnimplementedFlashCardReaderServiceServer
// for forward compatibility
type FlashCardReaderServiceServer interface {
	RetrieveFlashCardStudyProgress(context.Context, *RetrieveFlashCardStudyProgressRequest) (*RetrieveFlashCardStudyProgressResponse, error)
	RetrieveLastFlashcardStudyProgress(context.Context, *RetrieveLastFlashcardStudyProgressRequest) (*RetrieveLastFlashcardStudyProgressResponse, error)
}

// UnimplementedFlashCardReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFlashCardReaderServiceServer struct {
}

func (UnimplementedFlashCardReaderServiceServer) RetrieveFlashCardStudyProgress(context.Context, *RetrieveFlashCardStudyProgressRequest) (*RetrieveFlashCardStudyProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveFlashCardStudyProgress not implemented")
}
func (UnimplementedFlashCardReaderServiceServer) RetrieveLastFlashcardStudyProgress(context.Context, *RetrieveLastFlashcardStudyProgressRequest) (*RetrieveLastFlashcardStudyProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveLastFlashcardStudyProgress not implemented")
}

// UnsafeFlashCardReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlashCardReaderServiceServer will
// result in compilation errors.
type UnsafeFlashCardReaderServiceServer interface {
	mustEmbedUnimplementedFlashCardReaderServiceServer()
}

func RegisterFlashCardReaderServiceServer(s grpc.ServiceRegistrar, srv FlashCardReaderServiceServer) {
	s.RegisterService(&_FlashCardReaderService_serviceDesc, srv)
}

func _FlashCardReaderService_RetrieveFlashCardStudyProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveFlashCardStudyProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashCardReaderServiceServer).RetrieveFlashCardStudyProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.FlashCardReaderService/RetrieveFlashCardStudyProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashCardReaderServiceServer).RetrieveFlashCardStudyProgress(ctx, req.(*RetrieveFlashCardStudyProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlashCardReaderService_RetrieveLastFlashcardStudyProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveLastFlashcardStudyProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashCardReaderServiceServer).RetrieveLastFlashcardStudyProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.FlashCardReaderService/RetrieveLastFlashcardStudyProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashCardReaderServiceServer).RetrieveLastFlashcardStudyProgress(ctx, req.(*RetrieveLastFlashcardStudyProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FlashCardReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eureka.v1.FlashCardReaderService",
	HandlerType: (*FlashCardReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveFlashCardStudyProgress",
			Handler:    _FlashCardReaderService_RetrieveFlashCardStudyProgress_Handler,
		},
		{
			MethodName: "RetrieveLastFlashcardStudyProgress",
			Handler:    _FlashCardReaderService_RetrieveLastFlashcardStudyProgress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eureka/v1/flashcard_reader.proto",
}
