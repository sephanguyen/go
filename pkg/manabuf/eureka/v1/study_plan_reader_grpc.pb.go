// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package epb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// StudyPlanReaderServiceClient is the client API for StudyPlanReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudyPlanReaderServiceClient interface {
	ListStudyPlanByCourse(ctx context.Context, in *ListStudyPlanByCourseRequest, opts ...grpc.CallOption) (*ListStudyPlanByCourseResponse, error)
	GetBookIDsBelongsToStudentStudyPlan(ctx context.Context, in *GetBookIDsBelongsToStudentStudyPlanRequest, opts ...grpc.CallOption) (*GetBookIDsBelongsToStudentStudyPlanResponse, error)
	StudentBookStudyProgress(ctx context.Context, in *StudentBookStudyProgressRequest, opts ...grpc.CallOption) (*StudentBookStudyProgressResponse, error)
	RetrieveStudyPlanItemEventLogs(ctx context.Context, in *RetrieveStudyPlanItemEventLogsRequest, opts ...grpc.CallOption) (*RetrieveStudyPlanItemEventLogsResponse, error)
	GetLOHighestScoresByStudyPlanItemIDs(ctx context.Context, in *GetLOHighestScoresByStudyPlanItemIDsRequest, opts ...grpc.CallOption) (*GetLOHighestScoresByStudyPlanItemIDsResponse, error)
	RetrieveStat(ctx context.Context, in *RetrieveStatRequest, opts ...grpc.CallOption) (*RetrieveStatResponse, error)
	RetrieveStatV2(ctx context.Context, in *RetrieveStatRequest, opts ...grpc.CallOption) (*RetrieveStatResponse, error)
	GetStudentStudyPlan(ctx context.Context, in *GetStudentStudyPlanRequest, opts ...grpc.CallOption) (*GetStudentStudyPlanResponse, error)
}

type studyPlanReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudyPlanReaderServiceClient(cc grpc.ClientConnInterface) StudyPlanReaderServiceClient {
	return &studyPlanReaderServiceClient{cc}
}

func (c *studyPlanReaderServiceClient) ListStudyPlanByCourse(ctx context.Context, in *ListStudyPlanByCourseRequest, opts ...grpc.CallOption) (*ListStudyPlanByCourseResponse, error) {
	out := new(ListStudyPlanByCourseResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.StudyPlanReaderService/ListStudyPlanByCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyPlanReaderServiceClient) GetBookIDsBelongsToStudentStudyPlan(ctx context.Context, in *GetBookIDsBelongsToStudentStudyPlanRequest, opts ...grpc.CallOption) (*GetBookIDsBelongsToStudentStudyPlanResponse, error) {
	out := new(GetBookIDsBelongsToStudentStudyPlanResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.StudyPlanReaderService/GetBookIDsBelongsToStudentStudyPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyPlanReaderServiceClient) StudentBookStudyProgress(ctx context.Context, in *StudentBookStudyProgressRequest, opts ...grpc.CallOption) (*StudentBookStudyProgressResponse, error) {
	out := new(StudentBookStudyProgressResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.StudyPlanReaderService/StudentBookStudyProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyPlanReaderServiceClient) RetrieveStudyPlanItemEventLogs(ctx context.Context, in *RetrieveStudyPlanItemEventLogsRequest, opts ...grpc.CallOption) (*RetrieveStudyPlanItemEventLogsResponse, error) {
	out := new(RetrieveStudyPlanItemEventLogsResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.StudyPlanReaderService/RetrieveStudyPlanItemEventLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyPlanReaderServiceClient) GetLOHighestScoresByStudyPlanItemIDs(ctx context.Context, in *GetLOHighestScoresByStudyPlanItemIDsRequest, opts ...grpc.CallOption) (*GetLOHighestScoresByStudyPlanItemIDsResponse, error) {
	out := new(GetLOHighestScoresByStudyPlanItemIDsResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.StudyPlanReaderService/GetLOHighestScoresByStudyPlanItemIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyPlanReaderServiceClient) RetrieveStat(ctx context.Context, in *RetrieveStatRequest, opts ...grpc.CallOption) (*RetrieveStatResponse, error) {
	out := new(RetrieveStatResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.StudyPlanReaderService/RetrieveStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyPlanReaderServiceClient) RetrieveStatV2(ctx context.Context, in *RetrieveStatRequest, opts ...grpc.CallOption) (*RetrieveStatResponse, error) {
	out := new(RetrieveStatResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.StudyPlanReaderService/RetrieveStatV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyPlanReaderServiceClient) GetStudentStudyPlan(ctx context.Context, in *GetStudentStudyPlanRequest, opts ...grpc.CallOption) (*GetStudentStudyPlanResponse, error) {
	out := new(GetStudentStudyPlanResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.StudyPlanReaderService/GetStudentStudyPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudyPlanReaderServiceServer is the server API for StudyPlanReaderService service.
// All implementations should embed UnimplementedStudyPlanReaderServiceServer
// for forward compatibility
type StudyPlanReaderServiceServer interface {
	ListStudyPlanByCourse(context.Context, *ListStudyPlanByCourseRequest) (*ListStudyPlanByCourseResponse, error)
	GetBookIDsBelongsToStudentStudyPlan(context.Context, *GetBookIDsBelongsToStudentStudyPlanRequest) (*GetBookIDsBelongsToStudentStudyPlanResponse, error)
	StudentBookStudyProgress(context.Context, *StudentBookStudyProgressRequest) (*StudentBookStudyProgressResponse, error)
	RetrieveStudyPlanItemEventLogs(context.Context, *RetrieveStudyPlanItemEventLogsRequest) (*RetrieveStudyPlanItemEventLogsResponse, error)
	GetLOHighestScoresByStudyPlanItemIDs(context.Context, *GetLOHighestScoresByStudyPlanItemIDsRequest) (*GetLOHighestScoresByStudyPlanItemIDsResponse, error)
	RetrieveStat(context.Context, *RetrieveStatRequest) (*RetrieveStatResponse, error)
	RetrieveStatV2(context.Context, *RetrieveStatRequest) (*RetrieveStatResponse, error)
	GetStudentStudyPlan(context.Context, *GetStudentStudyPlanRequest) (*GetStudentStudyPlanResponse, error)
}

// UnimplementedStudyPlanReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStudyPlanReaderServiceServer struct {
}

func (UnimplementedStudyPlanReaderServiceServer) ListStudyPlanByCourse(context.Context, *ListStudyPlanByCourseRequest) (*ListStudyPlanByCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStudyPlanByCourse not implemented")
}
func (UnimplementedStudyPlanReaderServiceServer) GetBookIDsBelongsToStudentStudyPlan(context.Context, *GetBookIDsBelongsToStudentStudyPlanRequest) (*GetBookIDsBelongsToStudentStudyPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookIDsBelongsToStudentStudyPlan not implemented")
}
func (UnimplementedStudyPlanReaderServiceServer) StudentBookStudyProgress(context.Context, *StudentBookStudyProgressRequest) (*StudentBookStudyProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StudentBookStudyProgress not implemented")
}
func (UnimplementedStudyPlanReaderServiceServer) RetrieveStudyPlanItemEventLogs(context.Context, *RetrieveStudyPlanItemEventLogsRequest) (*RetrieveStudyPlanItemEventLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveStudyPlanItemEventLogs not implemented")
}
func (UnimplementedStudyPlanReaderServiceServer) GetLOHighestScoresByStudyPlanItemIDs(context.Context, *GetLOHighestScoresByStudyPlanItemIDsRequest) (*GetLOHighestScoresByStudyPlanItemIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLOHighestScoresByStudyPlanItemIDs not implemented")
}
func (UnimplementedStudyPlanReaderServiceServer) RetrieveStat(context.Context, *RetrieveStatRequest) (*RetrieveStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveStat not implemented")
}
func (UnimplementedStudyPlanReaderServiceServer) RetrieveStatV2(context.Context, *RetrieveStatRequest) (*RetrieveStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveStatV2 not implemented")
}
func (UnimplementedStudyPlanReaderServiceServer) GetStudentStudyPlan(context.Context, *GetStudentStudyPlanRequest) (*GetStudentStudyPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentStudyPlan not implemented")
}

// UnsafeStudyPlanReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudyPlanReaderServiceServer will
// result in compilation errors.
type UnsafeStudyPlanReaderServiceServer interface {
	mustEmbedUnimplementedStudyPlanReaderServiceServer()
}

func RegisterStudyPlanReaderServiceServer(s grpc.ServiceRegistrar, srv StudyPlanReaderServiceServer) {
	s.RegisterService(&_StudyPlanReaderService_serviceDesc, srv)
}

func _StudyPlanReaderService_ListStudyPlanByCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStudyPlanByCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanReaderServiceServer).ListStudyPlanByCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.StudyPlanReaderService/ListStudyPlanByCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanReaderServiceServer).ListStudyPlanByCourse(ctx, req.(*ListStudyPlanByCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyPlanReaderService_GetBookIDsBelongsToStudentStudyPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookIDsBelongsToStudentStudyPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanReaderServiceServer).GetBookIDsBelongsToStudentStudyPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.StudyPlanReaderService/GetBookIDsBelongsToStudentStudyPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanReaderServiceServer).GetBookIDsBelongsToStudentStudyPlan(ctx, req.(*GetBookIDsBelongsToStudentStudyPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyPlanReaderService_StudentBookStudyProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentBookStudyProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanReaderServiceServer).StudentBookStudyProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.StudyPlanReaderService/StudentBookStudyProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanReaderServiceServer).StudentBookStudyProgress(ctx, req.(*StudentBookStudyProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyPlanReaderService_RetrieveStudyPlanItemEventLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveStudyPlanItemEventLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanReaderServiceServer).RetrieveStudyPlanItemEventLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.StudyPlanReaderService/RetrieveStudyPlanItemEventLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanReaderServiceServer).RetrieveStudyPlanItemEventLogs(ctx, req.(*RetrieveStudyPlanItemEventLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyPlanReaderService_GetLOHighestScoresByStudyPlanItemIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLOHighestScoresByStudyPlanItemIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanReaderServiceServer).GetLOHighestScoresByStudyPlanItemIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.StudyPlanReaderService/GetLOHighestScoresByStudyPlanItemIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanReaderServiceServer).GetLOHighestScoresByStudyPlanItemIDs(ctx, req.(*GetLOHighestScoresByStudyPlanItemIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyPlanReaderService_RetrieveStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanReaderServiceServer).RetrieveStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.StudyPlanReaderService/RetrieveStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanReaderServiceServer).RetrieveStat(ctx, req.(*RetrieveStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyPlanReaderService_RetrieveStatV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanReaderServiceServer).RetrieveStatV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.StudyPlanReaderService/RetrieveStatV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanReaderServiceServer).RetrieveStatV2(ctx, req.(*RetrieveStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyPlanReaderService_GetStudentStudyPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentStudyPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanReaderServiceServer).GetStudentStudyPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.StudyPlanReaderService/GetStudentStudyPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanReaderServiceServer).GetStudentStudyPlan(ctx, req.(*GetStudentStudyPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StudyPlanReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eureka.v1.StudyPlanReaderService",
	HandlerType: (*StudyPlanReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListStudyPlanByCourse",
			Handler:    _StudyPlanReaderService_ListStudyPlanByCourse_Handler,
		},
		{
			MethodName: "GetBookIDsBelongsToStudentStudyPlan",
			Handler:    _StudyPlanReaderService_GetBookIDsBelongsToStudentStudyPlan_Handler,
		},
		{
			MethodName: "StudentBookStudyProgress",
			Handler:    _StudyPlanReaderService_StudentBookStudyProgress_Handler,
		},
		{
			MethodName: "RetrieveStudyPlanItemEventLogs",
			Handler:    _StudyPlanReaderService_RetrieveStudyPlanItemEventLogs_Handler,
		},
		{
			MethodName: "GetLOHighestScoresByStudyPlanItemIDs",
			Handler:    _StudyPlanReaderService_GetLOHighestScoresByStudyPlanItemIDs_Handler,
		},
		{
			MethodName: "RetrieveStat",
			Handler:    _StudyPlanReaderService_RetrieveStat_Handler,
		},
		{
			MethodName: "RetrieveStatV2",
			Handler:    _StudyPlanReaderService_RetrieveStatV2_Handler,
		},
		{
			MethodName: "GetStudentStudyPlan",
			Handler:    _StudyPlanReaderService_GetStudentStudyPlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eureka/v1/study_plan_reader.proto",
}
