// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package epb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AssignmentModifierServiceClient is the client API for AssignmentModifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssignmentModifierServiceClient interface {
	UpsertStudyPlanItem(ctx context.Context, in *UpsertStudyPlanItemRequest, opts ...grpc.CallOption) (*UpsertStudyPlanItemResponse, error)
	AssignStudyPlan(ctx context.Context, in *AssignStudyPlanRequest, opts ...grpc.CallOption) (*AssignStudyPlanResponse, error)
	DeleteAssignments(ctx context.Context, in *DeleteAssignmentsRequest, opts ...grpc.CallOption) (*DeleteAssignmentsResponse, error)
	EditAssignmentTime(ctx context.Context, in *EditAssignmentTimeRequest, opts ...grpc.CallOption) (*EditAssignmentTimeResponse, error)
	AssignAssignmentsToTopic(ctx context.Context, in *AssignAssignmentsToTopicRequest, opts ...grpc.CallOption) (*AssignAssignmentsToTopicResponse, error)
	UpsertAssignmentsData(ctx context.Context, in *UpsertAssignmentsDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpsertAssignments(ctx context.Context, in *UpsertAssignmentsRequest, opts ...grpc.CallOption) (*UpsertAssignmentsResponse, error)
	UpsertAdHocAssignment(ctx context.Context, in *UpsertAdHocAssignmentRequest, opts ...grpc.CallOption) (*UpsertAdHocAssignmentResponse, error)
}

type assignmentModifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssignmentModifierServiceClient(cc grpc.ClientConnInterface) AssignmentModifierServiceClient {
	return &assignmentModifierServiceClient{cc}
}

func (c *assignmentModifierServiceClient) UpsertStudyPlanItem(ctx context.Context, in *UpsertStudyPlanItemRequest, opts ...grpc.CallOption) (*UpsertStudyPlanItemResponse, error) {
	out := new(UpsertStudyPlanItemResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.AssignmentModifierService/UpsertStudyPlanItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentModifierServiceClient) AssignStudyPlan(ctx context.Context, in *AssignStudyPlanRequest, opts ...grpc.CallOption) (*AssignStudyPlanResponse, error) {
	out := new(AssignStudyPlanResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.AssignmentModifierService/AssignStudyPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentModifierServiceClient) DeleteAssignments(ctx context.Context, in *DeleteAssignmentsRequest, opts ...grpc.CallOption) (*DeleteAssignmentsResponse, error) {
	out := new(DeleteAssignmentsResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.AssignmentModifierService/DeleteAssignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentModifierServiceClient) EditAssignmentTime(ctx context.Context, in *EditAssignmentTimeRequest, opts ...grpc.CallOption) (*EditAssignmentTimeResponse, error) {
	out := new(EditAssignmentTimeResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.AssignmentModifierService/EditAssignmentTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentModifierServiceClient) AssignAssignmentsToTopic(ctx context.Context, in *AssignAssignmentsToTopicRequest, opts ...grpc.CallOption) (*AssignAssignmentsToTopicResponse, error) {
	out := new(AssignAssignmentsToTopicResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.AssignmentModifierService/AssignAssignmentsToTopic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentModifierServiceClient) UpsertAssignmentsData(ctx context.Context, in *UpsertAssignmentsDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/eureka.v1.AssignmentModifierService/UpsertAssignmentsData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentModifierServiceClient) UpsertAssignments(ctx context.Context, in *UpsertAssignmentsRequest, opts ...grpc.CallOption) (*UpsertAssignmentsResponse, error) {
	out := new(UpsertAssignmentsResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.AssignmentModifierService/UpsertAssignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentModifierServiceClient) UpsertAdHocAssignment(ctx context.Context, in *UpsertAdHocAssignmentRequest, opts ...grpc.CallOption) (*UpsertAdHocAssignmentResponse, error) {
	out := new(UpsertAdHocAssignmentResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.AssignmentModifierService/UpsertAdHocAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssignmentModifierServiceServer is the server API for AssignmentModifierService service.
// All implementations should embed UnimplementedAssignmentModifierServiceServer
// for forward compatibility
type AssignmentModifierServiceServer interface {
	UpsertStudyPlanItem(context.Context, *UpsertStudyPlanItemRequest) (*UpsertStudyPlanItemResponse, error)
	AssignStudyPlan(context.Context, *AssignStudyPlanRequest) (*AssignStudyPlanResponse, error)
	DeleteAssignments(context.Context, *DeleteAssignmentsRequest) (*DeleteAssignmentsResponse, error)
	EditAssignmentTime(context.Context, *EditAssignmentTimeRequest) (*EditAssignmentTimeResponse, error)
	AssignAssignmentsToTopic(context.Context, *AssignAssignmentsToTopicRequest) (*AssignAssignmentsToTopicResponse, error)
	UpsertAssignmentsData(context.Context, *UpsertAssignmentsDataRequest) (*emptypb.Empty, error)
	UpsertAssignments(context.Context, *UpsertAssignmentsRequest) (*UpsertAssignmentsResponse, error)
	UpsertAdHocAssignment(context.Context, *UpsertAdHocAssignmentRequest) (*UpsertAdHocAssignmentResponse, error)
}

// UnimplementedAssignmentModifierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAssignmentModifierServiceServer struct {
}

func (UnimplementedAssignmentModifierServiceServer) UpsertStudyPlanItem(context.Context, *UpsertStudyPlanItemRequest) (*UpsertStudyPlanItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertStudyPlanItem not implemented")
}
func (UnimplementedAssignmentModifierServiceServer) AssignStudyPlan(context.Context, *AssignStudyPlanRequest) (*AssignStudyPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignStudyPlan not implemented")
}
func (UnimplementedAssignmentModifierServiceServer) DeleteAssignments(context.Context, *DeleteAssignmentsRequest) (*DeleteAssignmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAssignments not implemented")
}
func (UnimplementedAssignmentModifierServiceServer) EditAssignmentTime(context.Context, *EditAssignmentTimeRequest) (*EditAssignmentTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditAssignmentTime not implemented")
}
func (UnimplementedAssignmentModifierServiceServer) AssignAssignmentsToTopic(context.Context, *AssignAssignmentsToTopicRequest) (*AssignAssignmentsToTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignAssignmentsToTopic not implemented")
}
func (UnimplementedAssignmentModifierServiceServer) UpsertAssignmentsData(context.Context, *UpsertAssignmentsDataRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertAssignmentsData not implemented")
}
func (UnimplementedAssignmentModifierServiceServer) UpsertAssignments(context.Context, *UpsertAssignmentsRequest) (*UpsertAssignmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertAssignments not implemented")
}
func (UnimplementedAssignmentModifierServiceServer) UpsertAdHocAssignment(context.Context, *UpsertAdHocAssignmentRequest) (*UpsertAdHocAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertAdHocAssignment not implemented")
}

// UnsafeAssignmentModifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssignmentModifierServiceServer will
// result in compilation errors.
type UnsafeAssignmentModifierServiceServer interface {
	mustEmbedUnimplementedAssignmentModifierServiceServer()
}

func RegisterAssignmentModifierServiceServer(s grpc.ServiceRegistrar, srv AssignmentModifierServiceServer) {
	s.RegisterService(&_AssignmentModifierService_serviceDesc, srv)
}

func _AssignmentModifierService_UpsertStudyPlanItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertStudyPlanItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentModifierServiceServer).UpsertStudyPlanItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.AssignmentModifierService/UpsertStudyPlanItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentModifierServiceServer).UpsertStudyPlanItem(ctx, req.(*UpsertStudyPlanItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignmentModifierService_AssignStudyPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignStudyPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentModifierServiceServer).AssignStudyPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.AssignmentModifierService/AssignStudyPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentModifierServiceServer).AssignStudyPlan(ctx, req.(*AssignStudyPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignmentModifierService_DeleteAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAssignmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentModifierServiceServer).DeleteAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.AssignmentModifierService/DeleteAssignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentModifierServiceServer).DeleteAssignments(ctx, req.(*DeleteAssignmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignmentModifierService_EditAssignmentTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditAssignmentTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentModifierServiceServer).EditAssignmentTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.AssignmentModifierService/EditAssignmentTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentModifierServiceServer).EditAssignmentTime(ctx, req.(*EditAssignmentTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignmentModifierService_AssignAssignmentsToTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignAssignmentsToTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentModifierServiceServer).AssignAssignmentsToTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.AssignmentModifierService/AssignAssignmentsToTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentModifierServiceServer).AssignAssignmentsToTopic(ctx, req.(*AssignAssignmentsToTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignmentModifierService_UpsertAssignmentsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertAssignmentsDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentModifierServiceServer).UpsertAssignmentsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.AssignmentModifierService/UpsertAssignmentsData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentModifierServiceServer).UpsertAssignmentsData(ctx, req.(*UpsertAssignmentsDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignmentModifierService_UpsertAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertAssignmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentModifierServiceServer).UpsertAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.AssignmentModifierService/UpsertAssignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentModifierServiceServer).UpsertAssignments(ctx, req.(*UpsertAssignmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignmentModifierService_UpsertAdHocAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertAdHocAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentModifierServiceServer).UpsertAdHocAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.AssignmentModifierService/UpsertAdHocAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentModifierServiceServer).UpsertAdHocAssignment(ctx, req.(*UpsertAdHocAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AssignmentModifierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eureka.v1.AssignmentModifierService",
	HandlerType: (*AssignmentModifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertStudyPlanItem",
			Handler:    _AssignmentModifierService_UpsertStudyPlanItem_Handler,
		},
		{
			MethodName: "AssignStudyPlan",
			Handler:    _AssignmentModifierService_AssignStudyPlan_Handler,
		},
		{
			MethodName: "DeleteAssignments",
			Handler:    _AssignmentModifierService_DeleteAssignments_Handler,
		},
		{
			MethodName: "EditAssignmentTime",
			Handler:    _AssignmentModifierService_EditAssignmentTime_Handler,
		},
		{
			MethodName: "AssignAssignmentsToTopic",
			Handler:    _AssignmentModifierService_AssignAssignmentsToTopic_Handler,
		},
		{
			MethodName: "UpsertAssignmentsData",
			Handler:    _AssignmentModifierService_UpsertAssignmentsData_Handler,
		},
		{
			MethodName: "UpsertAssignments",
			Handler:    _AssignmentModifierService_UpsertAssignments_Handler,
		},
		{
			MethodName: "UpsertAdHocAssignment",
			Handler:    _AssignmentModifierService_UpsertAdHocAssignment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eureka/v1/assignment_writer.proto",
}
