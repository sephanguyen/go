// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package epb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// StudentAssignmentReaderServiceClient is the client API for StudentAssignmentReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentAssignmentReaderServiceClient interface {
	ListSubmissions(ctx context.Context, in *ListSubmissionsRequest, opts ...grpc.CallOption) (*ListSubmissionsResponse, error)
	RetrieveSubmissions(ctx context.Context, in *RetrieveSubmissionsRequest, opts ...grpc.CallOption) (*RetrieveSubmissionsResponse, error)
	RetrieveSubmissionGrades(ctx context.Context, in *RetrieveSubmissionGradesRequest, opts ...grpc.CallOption) (*RetrieveSubmissionGradesRespose, error)
	ListSubmissionsV2(ctx context.Context, in *ListSubmissionsV2Request, opts ...grpc.CallOption) (*ListSubmissionsV2Response, error)
}

type studentAssignmentReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentAssignmentReaderServiceClient(cc grpc.ClientConnInterface) StudentAssignmentReaderServiceClient {
	return &studentAssignmentReaderServiceClient{cc}
}

func (c *studentAssignmentReaderServiceClient) ListSubmissions(ctx context.Context, in *ListSubmissionsRequest, opts ...grpc.CallOption) (*ListSubmissionsResponse, error) {
	out := new(ListSubmissionsResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.StudentAssignmentReaderService/ListSubmissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentAssignmentReaderServiceClient) RetrieveSubmissions(ctx context.Context, in *RetrieveSubmissionsRequest, opts ...grpc.CallOption) (*RetrieveSubmissionsResponse, error) {
	out := new(RetrieveSubmissionsResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.StudentAssignmentReaderService/RetrieveSubmissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentAssignmentReaderServiceClient) RetrieveSubmissionGrades(ctx context.Context, in *RetrieveSubmissionGradesRequest, opts ...grpc.CallOption) (*RetrieveSubmissionGradesRespose, error) {
	out := new(RetrieveSubmissionGradesRespose)
	err := c.cc.Invoke(ctx, "/eureka.v1.StudentAssignmentReaderService/RetrieveSubmissionGrades", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentAssignmentReaderServiceClient) ListSubmissionsV2(ctx context.Context, in *ListSubmissionsV2Request, opts ...grpc.CallOption) (*ListSubmissionsV2Response, error) {
	out := new(ListSubmissionsV2Response)
	err := c.cc.Invoke(ctx, "/eureka.v1.StudentAssignmentReaderService/ListSubmissionsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentAssignmentReaderServiceServer is the server API for StudentAssignmentReaderService service.
// All implementations should embed UnimplementedStudentAssignmentReaderServiceServer
// for forward compatibility
type StudentAssignmentReaderServiceServer interface {
	ListSubmissions(context.Context, *ListSubmissionsRequest) (*ListSubmissionsResponse, error)
	RetrieveSubmissions(context.Context, *RetrieveSubmissionsRequest) (*RetrieveSubmissionsResponse, error)
	RetrieveSubmissionGrades(context.Context, *RetrieveSubmissionGradesRequest) (*RetrieveSubmissionGradesRespose, error)
	ListSubmissionsV2(context.Context, *ListSubmissionsV2Request) (*ListSubmissionsV2Response, error)
}

// UnimplementedStudentAssignmentReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStudentAssignmentReaderServiceServer struct {
}

func (UnimplementedStudentAssignmentReaderServiceServer) ListSubmissions(context.Context, *ListSubmissionsRequest) (*ListSubmissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubmissions not implemented")
}
func (UnimplementedStudentAssignmentReaderServiceServer) RetrieveSubmissions(context.Context, *RetrieveSubmissionsRequest) (*RetrieveSubmissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveSubmissions not implemented")
}
func (UnimplementedStudentAssignmentReaderServiceServer) RetrieveSubmissionGrades(context.Context, *RetrieveSubmissionGradesRequest) (*RetrieveSubmissionGradesRespose, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveSubmissionGrades not implemented")
}
func (UnimplementedStudentAssignmentReaderServiceServer) ListSubmissionsV2(context.Context, *ListSubmissionsV2Request) (*ListSubmissionsV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubmissionsV2 not implemented")
}

// UnsafeStudentAssignmentReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentAssignmentReaderServiceServer will
// result in compilation errors.
type UnsafeStudentAssignmentReaderServiceServer interface {
	mustEmbedUnimplementedStudentAssignmentReaderServiceServer()
}

func RegisterStudentAssignmentReaderServiceServer(s grpc.ServiceRegistrar, srv StudentAssignmentReaderServiceServer) {
	s.RegisterService(&_StudentAssignmentReaderService_serviceDesc, srv)
}

func _StudentAssignmentReaderService_ListSubmissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubmissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentAssignmentReaderServiceServer).ListSubmissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.StudentAssignmentReaderService/ListSubmissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentAssignmentReaderServiceServer).ListSubmissions(ctx, req.(*ListSubmissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentAssignmentReaderService_RetrieveSubmissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveSubmissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentAssignmentReaderServiceServer).RetrieveSubmissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.StudentAssignmentReaderService/RetrieveSubmissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentAssignmentReaderServiceServer).RetrieveSubmissions(ctx, req.(*RetrieveSubmissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentAssignmentReaderService_RetrieveSubmissionGrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveSubmissionGradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentAssignmentReaderServiceServer).RetrieveSubmissionGrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.StudentAssignmentReaderService/RetrieveSubmissionGrades",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentAssignmentReaderServiceServer).RetrieveSubmissionGrades(ctx, req.(*RetrieveSubmissionGradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentAssignmentReaderService_ListSubmissionsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubmissionsV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentAssignmentReaderServiceServer).ListSubmissionsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.StudentAssignmentReaderService/ListSubmissionsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentAssignmentReaderServiceServer).ListSubmissionsV2(ctx, req.(*ListSubmissionsV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _StudentAssignmentReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eureka.v1.StudentAssignmentReaderService",
	HandlerType: (*StudentAssignmentReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSubmissions",
			Handler:    _StudentAssignmentReaderService_ListSubmissions_Handler,
		},
		{
			MethodName: "RetrieveSubmissions",
			Handler:    _StudentAssignmentReaderService_RetrieveSubmissions_Handler,
		},
		{
			MethodName: "RetrieveSubmissionGrades",
			Handler:    _StudentAssignmentReaderService_RetrieveSubmissionGrades_Handler,
		},
		{
			MethodName: "ListSubmissionsV2",
			Handler:    _StudentAssignmentReaderService_ListSubmissionsV2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eureka/v1/student_assignment_read.proto",
}
