// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package epb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// StudyPlanWriteServiceClient is the client API for StudyPlanWriteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudyPlanWriteServiceClient interface {
	ImportStudyPlan(ctx context.Context, in *ImportStudyPlanRequest, opts ...grpc.CallOption) (*ImportStudyPlanResponse, error)
}

type studyPlanWriteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudyPlanWriteServiceClient(cc grpc.ClientConnInterface) StudyPlanWriteServiceClient {
	return &studyPlanWriteServiceClient{cc}
}

func (c *studyPlanWriteServiceClient) ImportStudyPlan(ctx context.Context, in *ImportStudyPlanRequest, opts ...grpc.CallOption) (*ImportStudyPlanResponse, error) {
	out := new(ImportStudyPlanResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.StudyPlanWriteService/ImportStudyPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudyPlanWriteServiceServer is the server API for StudyPlanWriteService service.
// All implementations should embed UnimplementedStudyPlanWriteServiceServer
// for forward compatibility
type StudyPlanWriteServiceServer interface {
	ImportStudyPlan(context.Context, *ImportStudyPlanRequest) (*ImportStudyPlanResponse, error)
}

// UnimplementedStudyPlanWriteServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStudyPlanWriteServiceServer struct {
}

func (UnimplementedStudyPlanWriteServiceServer) ImportStudyPlan(context.Context, *ImportStudyPlanRequest) (*ImportStudyPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportStudyPlan not implemented")
}

// UnsafeStudyPlanWriteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudyPlanWriteServiceServer will
// result in compilation errors.
type UnsafeStudyPlanWriteServiceServer interface {
	mustEmbedUnimplementedStudyPlanWriteServiceServer()
}

func RegisterStudyPlanWriteServiceServer(s grpc.ServiceRegistrar, srv StudyPlanWriteServiceServer) {
	s.RegisterService(&_StudyPlanWriteService_serviceDesc, srv)
}

func _StudyPlanWriteService_ImportStudyPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportStudyPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanWriteServiceServer).ImportStudyPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.StudyPlanWriteService/ImportStudyPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanWriteServiceServer).ImportStudyPlan(ctx, req.(*ImportStudyPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StudyPlanWriteService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eureka.v1.StudyPlanWriteService",
	HandlerType: (*StudyPlanWriteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportStudyPlan",
			Handler:    _StudyPlanWriteService_ImportStudyPlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eureka/v1/study_plan_write.proto",
}
