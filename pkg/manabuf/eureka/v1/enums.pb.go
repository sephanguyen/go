// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: eureka/v1/enums.proto

package epb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AssignmentType int32

const (
	AssignmentType_ASSIGNMENT_TYPE_NONE               AssignmentType = 0
	AssignmentType_ASSIGNMENT_TYPE_TOPIC              AssignmentType = 1
	AssignmentType_ASSIGNMENT_TYPE_LEARNING_OBJECTIVE AssignmentType = 2
	AssignmentType_ASSIGNMENT_TYPE_TASK               AssignmentType = 3
)

// Enum value maps for AssignmentType.
var (
	AssignmentType_name = map[int32]string{
		0: "ASSIGNMENT_TYPE_NONE",
		1: "ASSIGNMENT_TYPE_TOPIC",
		2: "ASSIGNMENT_TYPE_LEARNING_OBJECTIVE",
		3: "ASSIGNMENT_TYPE_TASK",
	}
	AssignmentType_value = map[string]int32{
		"ASSIGNMENT_TYPE_NONE":               0,
		"ASSIGNMENT_TYPE_TOPIC":              1,
		"ASSIGNMENT_TYPE_LEARNING_OBJECTIVE": 2,
		"ASSIGNMENT_TYPE_TASK":               3,
	}
)

func (x AssignmentType) Enum() *AssignmentType {
	p := new(AssignmentType)
	*p = x
	return p
}

func (x AssignmentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssignmentType) Descriptor() protoreflect.EnumDescriptor {
	return file_eureka_v1_enums_proto_enumTypes[0].Descriptor()
}

func (AssignmentType) Type() protoreflect.EnumType {
	return &file_eureka_v1_enums_proto_enumTypes[0]
}

func (x AssignmentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssignmentType.Descriptor instead.
func (AssignmentType) EnumDescriptor() ([]byte, []int) {
	return file_eureka_v1_enums_proto_rawDescGZIP(), []int{0}
}

type AssignmentStatus int32

const (
	AssignmentStatus_ASSIGNMENT_STATUS_NONE     AssignmentStatus = 0
	AssignmentStatus_ASSIGNMENT_STATUS_ACTIVE   AssignmentStatus = 1
	AssignmentStatus_ASSIGNMENT_STATUS_ARCHIVED AssignmentStatus = 2
)

// Enum value maps for AssignmentStatus.
var (
	AssignmentStatus_name = map[int32]string{
		0: "ASSIGNMENT_STATUS_NONE",
		1: "ASSIGNMENT_STATUS_ACTIVE",
		2: "ASSIGNMENT_STATUS_ARCHIVED",
	}
	AssignmentStatus_value = map[string]int32{
		"ASSIGNMENT_STATUS_NONE":     0,
		"ASSIGNMENT_STATUS_ACTIVE":   1,
		"ASSIGNMENT_STATUS_ARCHIVED": 2,
	}
)

func (x AssignmentStatus) Enum() *AssignmentStatus {
	p := new(AssignmentStatus)
	*p = x
	return p
}

func (x AssignmentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssignmentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_eureka_v1_enums_proto_enumTypes[1].Descriptor()
}

func (AssignmentStatus) Type() protoreflect.EnumType {
	return &file_eureka_v1_enums_proto_enumTypes[1]
}

func (x AssignmentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssignmentStatus.Descriptor instead.
func (AssignmentStatus) EnumDescriptor() ([]byte, []int) {
	return file_eureka_v1_enums_proto_rawDescGZIP(), []int{1}
}

type SubmissionStatus int32

const (
	SubmissionStatus_SUBMISSION_STATUS_NONE        SubmissionStatus = 0
	SubmissionStatus_SUBMISSION_STATUS_NOT_MARKED  SubmissionStatus = 1
	SubmissionStatus_SUBMISSION_STATUS_IN_PROGRESS SubmissionStatus = 2
	SubmissionStatus_SUBMISSION_STATUS_MARKED      SubmissionStatus = 3
	SubmissionStatus_SUBMISSION_STATUS_RETURNED    SubmissionStatus = 4
)

// Enum value maps for SubmissionStatus.
var (
	SubmissionStatus_name = map[int32]string{
		0: "SUBMISSION_STATUS_NONE",
		1: "SUBMISSION_STATUS_NOT_MARKED",
		2: "SUBMISSION_STATUS_IN_PROGRESS",
		3: "SUBMISSION_STATUS_MARKED",
		4: "SUBMISSION_STATUS_RETURNED",
	}
	SubmissionStatus_value = map[string]int32{
		"SUBMISSION_STATUS_NONE":        0,
		"SUBMISSION_STATUS_NOT_MARKED":  1,
		"SUBMISSION_STATUS_IN_PROGRESS": 2,
		"SUBMISSION_STATUS_MARKED":      3,
		"SUBMISSION_STATUS_RETURNED":    4,
	}
)

func (x SubmissionStatus) Enum() *SubmissionStatus {
	p := new(SubmissionStatus)
	*p = x
	return p
}

func (x SubmissionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubmissionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_eureka_v1_enums_proto_enumTypes[2].Descriptor()
}

func (SubmissionStatus) Type() protoreflect.EnumType {
	return &file_eureka_v1_enums_proto_enumTypes[2]
}

func (x SubmissionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubmissionStatus.Descriptor instead.
func (SubmissionStatus) EnumDescriptor() ([]byte, []int) {
	return file_eureka_v1_enums_proto_rawDescGZIP(), []int{2}
}

type ToDoItemType int32

const (
	ToDoItemType_TO_DO_ITEM_TYPE_NONE       ToDoItemType = 0
	ToDoItemType_TO_DO_ITEM_TYPE_ASSIGNMENT ToDoItemType = 1
	ToDoItemType_TO_DO_ITEM_TYPE_LO         ToDoItemType = 2
)

// Enum value maps for ToDoItemType.
var (
	ToDoItemType_name = map[int32]string{
		0: "TO_DO_ITEM_TYPE_NONE",
		1: "TO_DO_ITEM_TYPE_ASSIGNMENT",
		2: "TO_DO_ITEM_TYPE_LO",
	}
	ToDoItemType_value = map[string]int32{
		"TO_DO_ITEM_TYPE_NONE":       0,
		"TO_DO_ITEM_TYPE_ASSIGNMENT": 1,
		"TO_DO_ITEM_TYPE_LO":         2,
	}
)

func (x ToDoItemType) Enum() *ToDoItemType {
	p := new(ToDoItemType)
	*p = x
	return p
}

func (x ToDoItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ToDoItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_eureka_v1_enums_proto_enumTypes[3].Descriptor()
}

func (ToDoItemType) Type() protoreflect.EnumType {
	return &file_eureka_v1_enums_proto_enumTypes[3]
}

func (x ToDoItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ToDoItemType.Descriptor instead.
func (ToDoItemType) EnumDescriptor() ([]byte, []int) {
	return file_eureka_v1_enums_proto_rawDescGZIP(), []int{3}
}

type ToDoStatus int32

const (
	ToDoStatus_TO_DO_STATUS_NONE      ToDoStatus = 0
	ToDoStatus_TO_DO_STATUS_ACTIVE    ToDoStatus = 1
	ToDoStatus_TO_DO_STATUS_OVERDUE   ToDoStatus = 2
	ToDoStatus_TO_DO_STATUS_COMPLETED ToDoStatus = 3
	ToDoStatus_TO_DO_STATUS_UPCOMING  ToDoStatus = 4
)

// Enum value maps for ToDoStatus.
var (
	ToDoStatus_name = map[int32]string{
		0: "TO_DO_STATUS_NONE",
		1: "TO_DO_STATUS_ACTIVE",
		2: "TO_DO_STATUS_OVERDUE",
		3: "TO_DO_STATUS_COMPLETED",
		4: "TO_DO_STATUS_UPCOMING",
	}
	ToDoStatus_value = map[string]int32{
		"TO_DO_STATUS_NONE":      0,
		"TO_DO_STATUS_ACTIVE":    1,
		"TO_DO_STATUS_OVERDUE":   2,
		"TO_DO_STATUS_COMPLETED": 3,
		"TO_DO_STATUS_UPCOMING":  4,
	}
)

func (x ToDoStatus) Enum() *ToDoStatus {
	p := new(ToDoStatus)
	*p = x
	return p
}

func (x ToDoStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ToDoStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_eureka_v1_enums_proto_enumTypes[4].Descriptor()
}

func (ToDoStatus) Type() protoreflect.EnumType {
	return &file_eureka_v1_enums_proto_enumTypes[4]
}

func (x ToDoStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ToDoStatus.Descriptor instead.
func (ToDoStatus) EnumDescriptor() ([]byte, []int) {
	return file_eureka_v1_enums_proto_rawDescGZIP(), []int{4}
}

type ContentType int32

const (
	ContentType_CONTENT_TYPE_NONE       ContentType = 0
	ContentType_CONTENT_TYPE_ASSIGNMENT ContentType = 1
	ContentType_CONTENT_TYPE_LO         ContentType = 2
)

// Enum value maps for ContentType.
var (
	ContentType_name = map[int32]string{
		0: "CONTENT_TYPE_NONE",
		1: "CONTENT_TYPE_ASSIGNMENT",
		2: "CONTENT_TYPE_LO",
	}
	ContentType_value = map[string]int32{
		"CONTENT_TYPE_NONE":       0,
		"CONTENT_TYPE_ASSIGNMENT": 1,
		"CONTENT_TYPE_LO":         2,
	}
)

func (x ContentType) Enum() *ContentType {
	p := new(ContentType)
	*p = x
	return p
}

func (x ContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_eureka_v1_enums_proto_enumTypes[5].Descriptor()
}

func (ContentType) Type() protoreflect.EnumType {
	return &file_eureka_v1_enums_proto_enumTypes[5]
}

func (x ContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentType.Descriptor instead.
func (ContentType) EnumDescriptor() ([]byte, []int) {
	return file_eureka_v1_enums_proto_rawDescGZIP(), []int{5}
}

type SearchType int32

const (
	SearchType_SEARCH_TYPE_NONE            SearchType = 0
	SearchType_SEARCH_TYPE_ASSIGNMENT_NAME SearchType = 1
	SearchType_SEARCH_TYPE_STUDENT_NAME    SearchType = 2
)

// Enum value maps for SearchType.
var (
	SearchType_name = map[int32]string{
		0: "SEARCH_TYPE_NONE",
		1: "SEARCH_TYPE_ASSIGNMENT_NAME",
		2: "SEARCH_TYPE_STUDENT_NAME",
	}
	SearchType_value = map[string]int32{
		"SEARCH_TYPE_NONE":            0,
		"SEARCH_TYPE_ASSIGNMENT_NAME": 1,
		"SEARCH_TYPE_STUDENT_NAME":    2,
	}
)

func (x SearchType) Enum() *SearchType {
	p := new(SearchType)
	*p = x
	return p
}

func (x SearchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchType) Descriptor() protoreflect.EnumDescriptor {
	return file_eureka_v1_enums_proto_enumTypes[6].Descriptor()
}

func (SearchType) Type() protoreflect.EnumType {
	return &file_eureka_v1_enums_proto_enumTypes[6]
}

func (x SearchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchType.Descriptor instead.
func (SearchType) EnumDescriptor() ([]byte, []int) {
	return file_eureka_v1_enums_proto_rawDescGZIP(), []int{6}
}

type StudyPlanType int32

const (
	StudyPlanType_STUDY_PLAN_TYPE_NONE       StudyPlanType = 0
	StudyPlanType_STUDY_PLAN_TYPE_COURSE     StudyPlanType = 1
	StudyPlanType_STUDY_PLAN_TYPE_INDIVIDUAL StudyPlanType = 2
)

// Enum value maps for StudyPlanType.
var (
	StudyPlanType_name = map[int32]string{
		0: "STUDY_PLAN_TYPE_NONE",
		1: "STUDY_PLAN_TYPE_COURSE",
		2: "STUDY_PLAN_TYPE_INDIVIDUAL",
	}
	StudyPlanType_value = map[string]int32{
		"STUDY_PLAN_TYPE_NONE":       0,
		"STUDY_PLAN_TYPE_COURSE":     1,
		"STUDY_PLAN_TYPE_INDIVIDUAL": 2,
	}
)

func (x StudyPlanType) Enum() *StudyPlanType {
	p := new(StudyPlanType)
	*p = x
	return p
}

func (x StudyPlanType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StudyPlanType) Descriptor() protoreflect.EnumDescriptor {
	return file_eureka_v1_enums_proto_enumTypes[7].Descriptor()
}

func (StudyPlanType) Type() protoreflect.EnumType {
	return &file_eureka_v1_enums_proto_enumTypes[7]
}

func (x StudyPlanType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StudyPlanType.Descriptor instead.
func (StudyPlanType) EnumDescriptor() ([]byte, []int) {
	return file_eureka_v1_enums_proto_rawDescGZIP(), []int{7}
}

type ImportMode int32

const (
	ImportMode_IMPORT_MODE_NONE   ImportMode = 0
	ImportMode_IMPORT_MODE_CREATE ImportMode = 1
	ImportMode_IMPORT_MODE_UPDATE ImportMode = 2
)

// Enum value maps for ImportMode.
var (
	ImportMode_name = map[int32]string{
		0: "IMPORT_MODE_NONE",
		1: "IMPORT_MODE_CREATE",
		2: "IMPORT_MODE_UPDATE",
	}
	ImportMode_value = map[string]int32{
		"IMPORT_MODE_NONE":   0,
		"IMPORT_MODE_CREATE": 1,
		"IMPORT_MODE_UPDATE": 2,
	}
)

func (x ImportMode) Enum() *ImportMode {
	p := new(ImportMode)
	*p = x
	return p
}

func (x ImportMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImportMode) Descriptor() protoreflect.EnumDescriptor {
	return file_eureka_v1_enums_proto_enumTypes[8].Descriptor()
}

func (ImportMode) Type() protoreflect.EnumType {
	return &file_eureka_v1_enums_proto_enumTypes[8]
}

func (x ImportMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImportMode.Descriptor instead.
func (ImportMode) EnumDescriptor() ([]byte, []int) {
	return file_eureka_v1_enums_proto_rawDescGZIP(), []int{8}
}

type StudyPlanTaskStatus int32

const (
	StudyPlanTaskStatus_STUDY_PLAN_TASK_STATUS_NONE        StudyPlanTaskStatus = 0
	StudyPlanTaskStatus_STUDY_PLAN_TASK_STATUS_IN_PROGRESS StudyPlanTaskStatus = 1
	StudyPlanTaskStatus_STUDY_PLAN_TASK_STATUS_COMPLETED   StudyPlanTaskStatus = 2
	StudyPlanTaskStatus_STUDY_PLAN_TASK_STATUS_ERROR       StudyPlanTaskStatus = 3
)

// Enum value maps for StudyPlanTaskStatus.
var (
	StudyPlanTaskStatus_name = map[int32]string{
		0: "STUDY_PLAN_TASK_STATUS_NONE",
		1: "STUDY_PLAN_TASK_STATUS_IN_PROGRESS",
		2: "STUDY_PLAN_TASK_STATUS_COMPLETED",
		3: "STUDY_PLAN_TASK_STATUS_ERROR",
	}
	StudyPlanTaskStatus_value = map[string]int32{
		"STUDY_PLAN_TASK_STATUS_NONE":        0,
		"STUDY_PLAN_TASK_STATUS_IN_PROGRESS": 1,
		"STUDY_PLAN_TASK_STATUS_COMPLETED":   2,
		"STUDY_PLAN_TASK_STATUS_ERROR":       3,
	}
)

func (x StudyPlanTaskStatus) Enum() *StudyPlanTaskStatus {
	p := new(StudyPlanTaskStatus)
	*p = x
	return p
}

func (x StudyPlanTaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StudyPlanTaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_eureka_v1_enums_proto_enumTypes[9].Descriptor()
}

func (StudyPlanTaskStatus) Type() protoreflect.EnumType {
	return &file_eureka_v1_enums_proto_enumTypes[9]
}

func (x StudyPlanTaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StudyPlanTaskStatus.Descriptor instead.
func (StudyPlanTaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_eureka_v1_enums_proto_rawDescGZIP(), []int{9}
}

type StudyPlanStatus int32

const (
	StudyPlanStatus_STUDY_PLAN_STATUS_NONE     StudyPlanStatus = 0
	StudyPlanStatus_STUDY_PLAN_STATUS_ACTIVE   StudyPlanStatus = 1
	StudyPlanStatus_STUDY_PLAN_STATUS_ARCHIVED StudyPlanStatus = 2
)

// Enum value maps for StudyPlanStatus.
var (
	StudyPlanStatus_name = map[int32]string{
		0: "STUDY_PLAN_STATUS_NONE",
		1: "STUDY_PLAN_STATUS_ACTIVE",
		2: "STUDY_PLAN_STATUS_ARCHIVED",
	}
	StudyPlanStatus_value = map[string]int32{
		"STUDY_PLAN_STATUS_NONE":     0,
		"STUDY_PLAN_STATUS_ACTIVE":   1,
		"STUDY_PLAN_STATUS_ARCHIVED": 2,
	}
)

func (x StudyPlanStatus) Enum() *StudyPlanStatus {
	p := new(StudyPlanStatus)
	*p = x
	return p
}

func (x StudyPlanStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StudyPlanStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_eureka_v1_enums_proto_enumTypes[10].Descriptor()
}

func (StudyPlanStatus) Type() protoreflect.EnumType {
	return &file_eureka_v1_enums_proto_enumTypes[10]
}

func (x StudyPlanStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StudyPlanStatus.Descriptor instead.
func (StudyPlanStatus) EnumDescriptor() ([]byte, []int) {
	return file_eureka_v1_enums_proto_rawDescGZIP(), []int{10}
}

type Country int32

const (
	Country_COUNTRY_NONE   Country = 0
	Country_COUNTRY_MASTER Country = 1
	Country_COUNTRY_VN     Country = 2
	Country_COUNTRY_ID     Country = 3
	Country_COUNTRY_SG     Country = 4
	Country_COUNTRY_JP     Country = 5
)

// Enum value maps for Country.
var (
	Country_name = map[int32]string{
		0: "COUNTRY_NONE",
		1: "COUNTRY_MASTER",
		2: "COUNTRY_VN",
		3: "COUNTRY_ID",
		4: "COUNTRY_SG",
		5: "COUNTRY_JP",
	}
	Country_value = map[string]int32{
		"COUNTRY_NONE":   0,
		"COUNTRY_MASTER": 1,
		"COUNTRY_VN":     2,
		"COUNTRY_ID":     3,
		"COUNTRY_SG":     4,
		"COUNTRY_JP":     5,
	}
)

func (x Country) Enum() *Country {
	p := new(Country)
	*p = x
	return p
}

func (x Country) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Country) Descriptor() protoreflect.EnumDescriptor {
	return file_eureka_v1_enums_proto_enumTypes[11].Descriptor()
}

func (Country) Type() protoreflect.EnumType {
	return &file_eureka_v1_enums_proto_enumTypes[11]
}

func (x Country) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Country.Descriptor instead.
func (Country) EnumDescriptor() ([]byte, []int) {
	return file_eureka_v1_enums_proto_rawDescGZIP(), []int{11}
}

type Subject int32

const (
	Subject_SUBJECT_NONE           Subject = 0
	Subject_SUBJECT_MATHS          Subject = 1
	Subject_SUBJECT_BIOLOGY        Subject = 2
	Subject_SUBJECT_PHYSICS        Subject = 3
	Subject_SUBJECT_CHEMISTRY      Subject = 4
	Subject_SUBJECT_GEOGRAPHY      Subject = 5
	Subject_SUBJECT_ENGLISH        Subject = 6
	Subject_SUBJECT_ENGLISH_2      Subject = 7
	Subject_SUBJECT_JAPANESE       Subject = 8
	Subject_SUBJECT_SCIENCE        Subject = 9
	Subject_SUBJECT_SOCIAL_STUDIES Subject = 10
	Subject_SUBJECT_LITERATURE     Subject = 11
)

// Enum value maps for Subject.
var (
	Subject_name = map[int32]string{
		0:  "SUBJECT_NONE",
		1:  "SUBJECT_MATHS",
		2:  "SUBJECT_BIOLOGY",
		3:  "SUBJECT_PHYSICS",
		4:  "SUBJECT_CHEMISTRY",
		5:  "SUBJECT_GEOGRAPHY",
		6:  "SUBJECT_ENGLISH",
		7:  "SUBJECT_ENGLISH_2",
		8:  "SUBJECT_JAPANESE",
		9:  "SUBJECT_SCIENCE",
		10: "SUBJECT_SOCIAL_STUDIES",
		11: "SUBJECT_LITERATURE",
	}
	Subject_value = map[string]int32{
		"SUBJECT_NONE":           0,
		"SUBJECT_MATHS":          1,
		"SUBJECT_BIOLOGY":        2,
		"SUBJECT_PHYSICS":        3,
		"SUBJECT_CHEMISTRY":      4,
		"SUBJECT_GEOGRAPHY":      5,
		"SUBJECT_ENGLISH":        6,
		"SUBJECT_ENGLISH_2":      7,
		"SUBJECT_JAPANESE":       8,
		"SUBJECT_SCIENCE":        9,
		"SUBJECT_SOCIAL_STUDIES": 10,
		"SUBJECT_LITERATURE":     11,
	}
)

func (x Subject) Enum() *Subject {
	p := new(Subject)
	*p = x
	return p
}

func (x Subject) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Subject) Descriptor() protoreflect.EnumDescriptor {
	return file_eureka_v1_enums_proto_enumTypes[12].Descriptor()
}

func (Subject) Type() protoreflect.EnumType {
	return &file_eureka_v1_enums_proto_enumTypes[12]
}

func (x Subject) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Subject.Descriptor instead.
func (Subject) EnumDescriptor() ([]byte, []int) {
	return file_eureka_v1_enums_proto_rawDescGZIP(), []int{12}
}

type TopicType int32

const (
	TopicType_TOPIC_TYPE_NONE        TopicType = 0
	TopicType_TOPIC_TYPE_LEARNING    TopicType = 1
	TopicType_TOPIC_TYPE_PRACTICAL   TopicType = 2
	TopicType_TOPIC_TYPE_EXAM        TopicType = 3
	TopicType_TOPIC_TYPE_ASSIGNMENT  TopicType = 4
	TopicType_TOPIC_TYPE_LIVE_LESSON TopicType = 5
)

// Enum value maps for TopicType.
var (
	TopicType_name = map[int32]string{
		0: "TOPIC_TYPE_NONE",
		1: "TOPIC_TYPE_LEARNING",
		2: "TOPIC_TYPE_PRACTICAL",
		3: "TOPIC_TYPE_EXAM",
		4: "TOPIC_TYPE_ASSIGNMENT",
		5: "TOPIC_TYPE_LIVE_LESSON",
	}
	TopicType_value = map[string]int32{
		"TOPIC_TYPE_NONE":        0,
		"TOPIC_TYPE_LEARNING":    1,
		"TOPIC_TYPE_PRACTICAL":   2,
		"TOPIC_TYPE_EXAM":        3,
		"TOPIC_TYPE_ASSIGNMENT":  4,
		"TOPIC_TYPE_LIVE_LESSON": 5,
	}
)

func (x TopicType) Enum() *TopicType {
	p := new(TopicType)
	*p = x
	return p
}

func (x TopicType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TopicType) Descriptor() protoreflect.EnumDescriptor {
	return file_eureka_v1_enums_proto_enumTypes[13].Descriptor()
}

func (TopicType) Type() protoreflect.EnumType {
	return &file_eureka_v1_enums_proto_enumTypes[13]
}

func (x TopicType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TopicType.Descriptor instead.
func (TopicType) EnumDescriptor() ([]byte, []int) {
	return file_eureka_v1_enums_proto_rawDescGZIP(), []int{13}
}

type TopicStatus int32

const (
	TopicStatus_TOPIC_STATUS_NONE      TopicStatus = 0
	TopicStatus_TOPIC_STATUS_DRAFT     TopicStatus = 1
	TopicStatus_TOPIC_STATUS_PUBLISHED TopicStatus = 2
)

// Enum value maps for TopicStatus.
var (
	TopicStatus_name = map[int32]string{
		0: "TOPIC_STATUS_NONE",
		1: "TOPIC_STATUS_DRAFT",
		2: "TOPIC_STATUS_PUBLISHED",
	}
	TopicStatus_value = map[string]int32{
		"TOPIC_STATUS_NONE":      0,
		"TOPIC_STATUS_DRAFT":     1,
		"TOPIC_STATUS_PUBLISHED": 2,
	}
)

func (x TopicStatus) Enum() *TopicStatus {
	p := new(TopicStatus)
	*p = x
	return p
}

func (x TopicStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TopicStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_eureka_v1_enums_proto_enumTypes[14].Descriptor()
}

func (TopicStatus) Type() protoreflect.EnumType {
	return &file_eureka_v1_enums_proto_enumTypes[14]
}

func (x TopicStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TopicStatus.Descriptor instead.
func (TopicStatus) EnumDescriptor() ([]byte, []int) {
	return file_eureka_v1_enums_proto_rawDescGZIP(), []int{14}
}

type QuizStatus int32

const (
	QuizStatus_QUIZ_STATUS_NEW      QuizStatus = 0
	QuizStatus_QUIZ_STATUS_APPROVED QuizStatus = 1
	QuizStatus_QUIZ_STATUS_DELETED  QuizStatus = 2
)

// Enum value maps for QuizStatus.
var (
	QuizStatus_name = map[int32]string{
		0: "QUIZ_STATUS_NEW",
		1: "QUIZ_STATUS_APPROVED",
		2: "QUIZ_STATUS_DELETED",
	}
	QuizStatus_value = map[string]int32{
		"QUIZ_STATUS_NEW":      0,
		"QUIZ_STATUS_APPROVED": 1,
		"QUIZ_STATUS_DELETED":  2,
	}
)

func (x QuizStatus) Enum() *QuizStatus {
	p := new(QuizStatus)
	*p = x
	return p
}

func (x QuizStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuizStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_eureka_v1_enums_proto_enumTypes[15].Descriptor()
}

func (QuizStatus) Type() protoreflect.EnumType {
	return &file_eureka_v1_enums_proto_enumTypes[15]
}

func (x QuizStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuizStatus.Descriptor instead.
func (QuizStatus) EnumDescriptor() ([]byte, []int) {
	return file_eureka_v1_enums_proto_rawDescGZIP(), []int{15}
}

type QuizSetStatus int32

const (
	QuizSetStatus_QUIZSET_STATUS_NEW      QuizSetStatus = 0
	QuizSetStatus_QUIZSET_STATUS_APPROVED QuizSetStatus = 1
	QuizSetStatus_QUIZSET_STATUS_DELETED  QuizSetStatus = 2
)

// Enum value maps for QuizSetStatus.
var (
	QuizSetStatus_name = map[int32]string{
		0: "QUIZSET_STATUS_NEW",
		1: "QUIZSET_STATUS_APPROVED",
		2: "QUIZSET_STATUS_DELETED",
	}
	QuizSetStatus_value = map[string]int32{
		"QUIZSET_STATUS_NEW":      0,
		"QUIZSET_STATUS_APPROVED": 1,
		"QUIZSET_STATUS_DELETED":  2,
	}
)

func (x QuizSetStatus) Enum() *QuizSetStatus {
	p := new(QuizSetStatus)
	*p = x
	return p
}

func (x QuizSetStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuizSetStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_eureka_v1_enums_proto_enumTypes[16].Descriptor()
}

func (QuizSetStatus) Type() protoreflect.EnumType {
	return &file_eureka_v1_enums_proto_enumTypes[16]
}

func (x QuizSetStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuizSetStatus.Descriptor instead.
func (QuizSetStatus) EnumDescriptor() ([]byte, []int) {
	return file_eureka_v1_enums_proto_rawDescGZIP(), []int{16}
}

type QuizOptionConfig int32

const (
	QuizOptionConfig_QUIZ_OPTION_CONFIG_CASE_SENSITIVE QuizOptionConfig = 0
	QuizOptionConfig_QUIZ_OPTION_CONFIG_PARTIAL_CREDIT QuizOptionConfig = 1
	QuizOptionConfig_QUIZ_OPTION_CONFIG_PLAN_LIST      QuizOptionConfig = 2
)

// Enum value maps for QuizOptionConfig.
var (
	QuizOptionConfig_name = map[int32]string{
		0: "QUIZ_OPTION_CONFIG_CASE_SENSITIVE",
		1: "QUIZ_OPTION_CONFIG_PARTIAL_CREDIT",
		2: "QUIZ_OPTION_CONFIG_PLAN_LIST",
	}
	QuizOptionConfig_value = map[string]int32{
		"QUIZ_OPTION_CONFIG_CASE_SENSITIVE": 0,
		"QUIZ_OPTION_CONFIG_PARTIAL_CREDIT": 1,
		"QUIZ_OPTION_CONFIG_PLAN_LIST":      2,
	}
)

func (x QuizOptionConfig) Enum() *QuizOptionConfig {
	p := new(QuizOptionConfig)
	*p = x
	return p
}

func (x QuizOptionConfig) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuizOptionConfig) Descriptor() protoreflect.EnumDescriptor {
	return file_eureka_v1_enums_proto_enumTypes[17].Descriptor()
}

func (QuizOptionConfig) Type() protoreflect.EnumType {
	return &file_eureka_v1_enums_proto_enumTypes[17]
}

func (x QuizOptionConfig) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuizOptionConfig.Descriptor instead.
func (QuizOptionConfig) EnumDescriptor() ([]byte, []int) {
	return file_eureka_v1_enums_proto_rawDescGZIP(), []int{17}
}

type FlashcardQuizStudyStatus int32

const (
	FlashcardQuizStudyStatus_FLASHCARD_QUIZ_STUDY_STATUS_NONE       FlashcardQuizStudyStatus = 0
	FlashcardQuizStudyStatus_FLASHCARD_QUIZ_STUDY_STATUS_SKIPPED    FlashcardQuizStudyStatus = 1
	FlashcardQuizStudyStatus_FLASHCARD_QUIZ_STUDY_STATUS_REMEMBERED FlashcardQuizStudyStatus = 2
)

// Enum value maps for FlashcardQuizStudyStatus.
var (
	FlashcardQuizStudyStatus_name = map[int32]string{
		0: "FLASHCARD_QUIZ_STUDY_STATUS_NONE",
		1: "FLASHCARD_QUIZ_STUDY_STATUS_SKIPPED",
		2: "FLASHCARD_QUIZ_STUDY_STATUS_REMEMBERED",
	}
	FlashcardQuizStudyStatus_value = map[string]int32{
		"FLASHCARD_QUIZ_STUDY_STATUS_NONE":       0,
		"FLASHCARD_QUIZ_STUDY_STATUS_SKIPPED":    1,
		"FLASHCARD_QUIZ_STUDY_STATUS_REMEMBERED": 2,
	}
)

func (x FlashcardQuizStudyStatus) Enum() *FlashcardQuizStudyStatus {
	p := new(FlashcardQuizStudyStatus)
	*p = x
	return p
}

func (x FlashcardQuizStudyStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlashcardQuizStudyStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_eureka_v1_enums_proto_enumTypes[18].Descriptor()
}

func (FlashcardQuizStudyStatus) Type() protoreflect.EnumType {
	return &file_eureka_v1_enums_proto_enumTypes[18]
}

func (x FlashcardQuizStudyStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlashcardQuizStudyStatus.Descriptor instead.
func (FlashcardQuizStudyStatus) EnumDescriptor() ([]byte, []int) {
	return file_eureka_v1_enums_proto_rawDescGZIP(), []int{18}
}

type AchievementCrown int32

const (
	AchievementCrown_ACHIEVEMENT_CROWN_NONE   AchievementCrown = 0
	AchievementCrown_ACHIEVEMENT_CROWN_BRONZE AchievementCrown = 1
	AchievementCrown_ACHIEVEMENT_CROWN_SILVER AchievementCrown = 2
	AchievementCrown_ACHIEVEMENT_CROWN_GOLD   AchievementCrown = 3
)

// Enum value maps for AchievementCrown.
var (
	AchievementCrown_name = map[int32]string{
		0: "ACHIEVEMENT_CROWN_NONE",
		1: "ACHIEVEMENT_CROWN_BRONZE",
		2: "ACHIEVEMENT_CROWN_SILVER",
		3: "ACHIEVEMENT_CROWN_GOLD",
	}
	AchievementCrown_value = map[string]int32{
		"ACHIEVEMENT_CROWN_NONE":   0,
		"ACHIEVEMENT_CROWN_BRONZE": 1,
		"ACHIEVEMENT_CROWN_SILVER": 2,
		"ACHIEVEMENT_CROWN_GOLD":   3,
	}
)

func (x AchievementCrown) Enum() *AchievementCrown {
	p := new(AchievementCrown)
	*p = x
	return p
}

func (x AchievementCrown) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AchievementCrown) Descriptor() protoreflect.EnumDescriptor {
	return file_eureka_v1_enums_proto_enumTypes[19].Descriptor()
}

func (AchievementCrown) Type() protoreflect.EnumType {
	return &file_eureka_v1_enums_proto_enumTypes[19]
}

func (x AchievementCrown) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AchievementCrown.Descriptor instead.
func (AchievementCrown) EnumDescriptor() ([]byte, []int) {
	return file_eureka_v1_enums_proto_rawDescGZIP(), []int{19}
}

type ExamLOSubmissionResult int32

const (
	ExamLOSubmissionResult_EXAM_LO_SUBMISSION_WAITING_FOR_GRADE ExamLOSubmissionResult = 0
	ExamLOSubmissionResult_EXAM_LO_SUBMISSION_PASSED            ExamLOSubmissionResult = 1
	ExamLOSubmissionResult_EXAM_LO_SUBMISSION_FAILED            ExamLOSubmissionResult = 2
	ExamLOSubmissionResult_EXAM_LO_SUBMISSION_COMPLETED         ExamLOSubmissionResult = 3
)

// Enum value maps for ExamLOSubmissionResult.
var (
	ExamLOSubmissionResult_name = map[int32]string{
		0: "EXAM_LO_SUBMISSION_WAITING_FOR_GRADE",
		1: "EXAM_LO_SUBMISSION_PASSED",
		2: "EXAM_LO_SUBMISSION_FAILED",
		3: "EXAM_LO_SUBMISSION_COMPLETED",
	}
	ExamLOSubmissionResult_value = map[string]int32{
		"EXAM_LO_SUBMISSION_WAITING_FOR_GRADE": 0,
		"EXAM_LO_SUBMISSION_PASSED":            1,
		"EXAM_LO_SUBMISSION_FAILED":            2,
		"EXAM_LO_SUBMISSION_COMPLETED":         3,
	}
)

func (x ExamLOSubmissionResult) Enum() *ExamLOSubmissionResult {
	p := new(ExamLOSubmissionResult)
	*p = x
	return p
}

func (x ExamLOSubmissionResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExamLOSubmissionResult) Descriptor() protoreflect.EnumDescriptor {
	return file_eureka_v1_enums_proto_enumTypes[20].Descriptor()
}

func (ExamLOSubmissionResult) Type() protoreflect.EnumType {
	return &file_eureka_v1_enums_proto_enumTypes[20]
}

func (x ExamLOSubmissionResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExamLOSubmissionResult.Descriptor instead.
func (ExamLOSubmissionResult) EnumDescriptor() ([]byte, []int) {
	return file_eureka_v1_enums_proto_rawDescGZIP(), []int{20}
}

var File_eureka_v1_enums_proto protoreflect.FileDescriptor

var file_eureka_v1_enums_proto_rawDesc = []byte{
	0x0a, 0x15, 0x65, 0x75, 0x72, 0x65, 0x6b, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x65, 0x75, 0x72, 0x65, 0x6b, 0x61, 0x2e,
	0x76, 0x31, 0x2a, 0x87, 0x01, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x53,
	0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45,
	0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x03, 0x2a, 0x6c, 0x0a, 0x10,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1a, 0x0a, 0x16, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18,
	0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x53,
	0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x44, 0x10, 0x02, 0x2a, 0xb1, 0x01, 0x0a, 0x10, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1a, 0x0a, 0x16, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x53,
	0x55, 0x42, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x44, 0x10, 0x01, 0x12, 0x21, 0x0a,
	0x1d, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02,
	0x12, 0x1c, 0x0a, 0x18, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1e,
	0x0a, 0x1a, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x60,
	0x0a, 0x0c, 0x54, 0x6f, 0x44, 0x6f, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x14, 0x54, 0x4f, 0x5f, 0x44, 0x4f, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x4f, 0x5f, 0x44,
	0x4f, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x49,
	0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x4f, 0x5f, 0x44,
	0x4f, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x10, 0x02,
	0x2a, 0x8d, 0x01, 0x0a, 0x0a, 0x54, 0x6f, 0x44, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x15, 0x0a, 0x11, 0x54, 0x4f, 0x5f, 0x44, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x4f, 0x5f, 0x44, 0x4f, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12,
	0x18, 0x0a, 0x14, 0x54, 0x4f, 0x5f, 0x44, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4f, 0x56, 0x45, 0x52, 0x44, 0x55, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x4f, 0x5f,
	0x44, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x4f, 0x5f, 0x44, 0x4f, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x43, 0x4f, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x04,
	0x2a, 0x56, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x10, 0x02, 0x2a, 0x61, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b,
	0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x49,
	0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a,
	0x18, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x55,
	0x44, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x2a, 0x65, 0x0a, 0x0d, 0x53,
	0x74, 0x75, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14,
	0x53, 0x54, 0x55, 0x44, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x55, 0x44, 0x59, 0x5f,
	0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x52, 0x53, 0x45,
	0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x55, 0x44, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x56, 0x49, 0x44, 0x55, 0x41, 0x4c,
	0x10, 0x02, 0x2a, 0x52, 0x0a, 0x0a, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x16,
	0x0a, 0x12, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x2a, 0xa6, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x75, 0x64, 0x79,
	0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f,
	0x0a, 0x1b, 0x53, 0x54, 0x55, 0x44, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x26, 0x0a, 0x22, 0x53, 0x54, 0x55, 0x44, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f,
	0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54, 0x55, 0x44, 0x59,
	0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x20, 0x0a,
	0x1c, 0x53, 0x54, 0x55, 0x44, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x2a,
	0x6b, 0x0a, 0x0f, 0x53, 0x74, 0x75, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x55, 0x44, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1c,
	0x0a, 0x18, 0x53, 0x54, 0x55, 0x44, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a,
	0x53, 0x54, 0x55, 0x44, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x6f, 0x0a, 0x07,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x56, 0x4e, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x49, 0x44, 0x10, 0x03, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x53, 0x47, 0x10, 0x04, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x4a, 0x50, 0x10, 0x05, 0x2a, 0x91, 0x02,
	0x0a, 0x07, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x55, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x48, 0x53, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x42, 0x49, 0x4f, 0x4c, 0x4f, 0x47,
	0x59, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x50,
	0x48, 0x59, 0x53, 0x49, 0x43, 0x53, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x55, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x43, 0x48, 0x45, 0x4d, 0x49, 0x53, 0x54, 0x52, 0x59, 0x10, 0x04, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x47, 0x45, 0x4f, 0x47, 0x52,
	0x41, 0x50, 0x48, 0x59, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x45, 0x4e, 0x47, 0x4c, 0x49, 0x53, 0x48, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x45, 0x4e, 0x47, 0x4c, 0x49, 0x53, 0x48, 0x5f, 0x32,
	0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4a, 0x41,
	0x50, 0x41, 0x4e, 0x45, 0x53, 0x45, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x55, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x53, 0x43, 0x49, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x09, 0x12, 0x1a, 0x0a,
	0x16, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x5f,
	0x53, 0x54, 0x55, 0x44, 0x49, 0x45, 0x53, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x55, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4c, 0x49, 0x54, 0x45, 0x52, 0x41, 0x54, 0x55, 0x52, 0x45, 0x10,
	0x0b, 0x2a, 0x9f, 0x01, 0x0a, 0x09, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x13, 0x0a, 0x0f, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x41, 0x43,
	0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x4f, 0x50, 0x49, 0x43,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x41, 0x4d, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15,
	0x54, 0x4f, 0x50, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47,
	0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x4f, 0x50, 0x49, 0x43,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x4f,
	0x4e, 0x10, 0x05, 0x2a, 0x58, 0x0a, 0x0b, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x4f, 0x50,
	0x49, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10,
	0x01, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x54, 0x0a,
	0x0a, 0x51, 0x75, 0x69, 0x7a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x51,
	0x55, 0x49, 0x5a, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x51, 0x55, 0x49, 0x5a, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x51, 0x55,
	0x49, 0x5a, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x02, 0x2a, 0x60, 0x0a, 0x0d, 0x51, 0x75, 0x69, 0x7a, 0x53, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x51, 0x55, 0x49, 0x5a, 0x53, 0x45, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17,
	0x51, 0x55, 0x49, 0x5a, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41,
	0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x51, 0x55, 0x49,
	0x5a, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x82, 0x01, 0x0a, 0x10, 0x51, 0x75, 0x69, 0x7a, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x21, 0x51, 0x55,
	0x49, 0x5a, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x43, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x00, 0x12, 0x25, 0x0a, 0x21, 0x51, 0x55, 0x49, 0x5a, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f,
	0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x51, 0x55, 0x49, 0x5a,
	0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x50,
	0x4c, 0x41, 0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x02, 0x2a, 0x95, 0x01, 0x0a, 0x18, 0x46,
	0x6c, 0x61, 0x73, 0x68, 0x63, 0x61, 0x72, 0x64, 0x51, 0x75, 0x69, 0x7a, 0x53, 0x74, 0x75, 0x64,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x4c, 0x41, 0x53, 0x48,
	0x43, 0x41, 0x52, 0x44, 0x5f, 0x51, 0x55, 0x49, 0x5a, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x27, 0x0a,
	0x23, 0x46, 0x4c, 0x41, 0x53, 0x48, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x51, 0x55, 0x49, 0x5a, 0x5f,
	0x53, 0x54, 0x55, 0x44, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x4b, 0x49,
	0x50, 0x50, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x46, 0x4c, 0x41, 0x53, 0x48, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x51, 0x55, 0x49, 0x5a, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x45, 0x44,
	0x10, 0x02, 0x2a, 0x86, 0x01, 0x0a, 0x10, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x72, 0x6f, 0x77, 0x6e, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x48, 0x49, 0x45,
	0x56, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x4f, 0x57, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x43, 0x52, 0x4f, 0x57, 0x4e, 0x5f, 0x42, 0x52, 0x4f, 0x4e, 0x5a, 0x45, 0x10,
	0x01, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x43, 0x52, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x49, 0x4c, 0x56, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x1a, 0x0a, 0x16, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43,
	0x52, 0x4f, 0x57, 0x4e, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x10, 0x03, 0x2a, 0xa2, 0x01, 0x0a, 0x16,
	0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x58, 0x41, 0x4d, 0x5f, 0x4c,
	0x4f, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x41, 0x49,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0x00,
	0x12, 0x1d, 0x0a, 0x19, 0x45, 0x58, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x5f, 0x53, 0x55, 0x42, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x1d, 0x0a, 0x19, 0x45, 0x58, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x20,
	0x0a, 0x1c, 0x45, 0x58, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03,
	0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d,
	0x61, 0x6e, 0x61, 0x62, 0x69, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x75, 0x72, 0x65, 0x6b, 0x61, 0x2f, 0x76, 0x31, 0x3b, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eureka_v1_enums_proto_rawDescOnce sync.Once
	file_eureka_v1_enums_proto_rawDescData = file_eureka_v1_enums_proto_rawDesc
)

func file_eureka_v1_enums_proto_rawDescGZIP() []byte {
	file_eureka_v1_enums_proto_rawDescOnce.Do(func() {
		file_eureka_v1_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_eureka_v1_enums_proto_rawDescData)
	})
	return file_eureka_v1_enums_proto_rawDescData
}

var file_eureka_v1_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 21)
var file_eureka_v1_enums_proto_goTypes = []interface{}{
	(AssignmentType)(0),           // 0: eureka.v1.AssignmentType
	(AssignmentStatus)(0),         // 1: eureka.v1.AssignmentStatus
	(SubmissionStatus)(0),         // 2: eureka.v1.SubmissionStatus
	(ToDoItemType)(0),             // 3: eureka.v1.ToDoItemType
	(ToDoStatus)(0),               // 4: eureka.v1.ToDoStatus
	(ContentType)(0),              // 5: eureka.v1.ContentType
	(SearchType)(0),               // 6: eureka.v1.SearchType
	(StudyPlanType)(0),            // 7: eureka.v1.StudyPlanType
	(ImportMode)(0),               // 8: eureka.v1.ImportMode
	(StudyPlanTaskStatus)(0),      // 9: eureka.v1.StudyPlanTaskStatus
	(StudyPlanStatus)(0),          // 10: eureka.v1.StudyPlanStatus
	(Country)(0),                  // 11: eureka.v1.Country
	(Subject)(0),                  // 12: eureka.v1.Subject
	(TopicType)(0),                // 13: eureka.v1.TopicType
	(TopicStatus)(0),              // 14: eureka.v1.TopicStatus
	(QuizStatus)(0),               // 15: eureka.v1.QuizStatus
	(QuizSetStatus)(0),            // 16: eureka.v1.QuizSetStatus
	(QuizOptionConfig)(0),         // 17: eureka.v1.QuizOptionConfig
	(FlashcardQuizStudyStatus)(0), // 18: eureka.v1.FlashcardQuizStudyStatus
	(AchievementCrown)(0),         // 19: eureka.v1.AchievementCrown
	(ExamLOSubmissionResult)(0),   // 20: eureka.v1.ExamLOSubmissionResult
}
var file_eureka_v1_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_eureka_v1_enums_proto_init() }
func file_eureka_v1_enums_proto_init() {
	if File_eureka_v1_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eureka_v1_enums_proto_rawDesc,
			NumEnums:      21,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eureka_v1_enums_proto_goTypes,
		DependencyIndexes: file_eureka_v1_enums_proto_depIdxs,
		EnumInfos:         file_eureka_v1_enums_proto_enumTypes,
	}.Build()
	File_eureka_v1_enums_proto = out.File
	file_eureka_v1_enums_proto_rawDesc = nil
	file_eureka_v1_enums_proto_goTypes = nil
	file_eureka_v1_enums_proto_depIdxs = nil
}
