// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package epb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AssignmentReaderServiceClient is the client API for AssignmentReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssignmentReaderServiceClient interface {
	ListStudyPlans(ctx context.Context, in *ListStudyPlansRequest, opts ...grpc.CallOption) (*ListStudyPlansResponse, error)
	ListStudentToDoItems(ctx context.Context, in *ListStudentToDoItemsRequest, opts ...grpc.CallOption) (*ListStudentToDoItemsResponse, error)
	ListStudentAvailableContents(ctx context.Context, in *ListStudentAvailableContentsRequest, opts ...grpc.CallOption) (*ListStudentAvailableContentsResponse, error)
	RetrieveAssignments(ctx context.Context, in *RetrieveAssignmentsRequest, opts ...grpc.CallOption) (*RetrieveAssignmentsResponse, error)
	RetrieveStudyPlanProgress(ctx context.Context, in *RetrieveStudyPlanProgressRequest, opts ...grpc.CallOption) (*RetrieveStudyPlanProgressResponse, error)
	ListCourseTodo(ctx context.Context, in *ListCourseTodoRequest, opts ...grpc.CallOption) (*ListCourseTodoResponse, error)
	GetChildStudyPlanItems(ctx context.Context, in *GetChildStudyPlanItemsRequest, opts ...grpc.CallOption) (*GetChildStudyPlanItemsResponse, error)
	RetrieveStatisticAssignmentClass(ctx context.Context, in *RetrieveStatisticAssignmentClassRequest, opts ...grpc.CallOption) (*RetrieveStatisticAssignmentClassResponse, error)
}

type assignmentReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssignmentReaderServiceClient(cc grpc.ClientConnInterface) AssignmentReaderServiceClient {
	return &assignmentReaderServiceClient{cc}
}

func (c *assignmentReaderServiceClient) ListStudyPlans(ctx context.Context, in *ListStudyPlansRequest, opts ...grpc.CallOption) (*ListStudyPlansResponse, error) {
	out := new(ListStudyPlansResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.AssignmentReaderService/ListStudyPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentReaderServiceClient) ListStudentToDoItems(ctx context.Context, in *ListStudentToDoItemsRequest, opts ...grpc.CallOption) (*ListStudentToDoItemsResponse, error) {
	out := new(ListStudentToDoItemsResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.AssignmentReaderService/ListStudentToDoItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentReaderServiceClient) ListStudentAvailableContents(ctx context.Context, in *ListStudentAvailableContentsRequest, opts ...grpc.CallOption) (*ListStudentAvailableContentsResponse, error) {
	out := new(ListStudentAvailableContentsResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.AssignmentReaderService/ListStudentAvailableContents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentReaderServiceClient) RetrieveAssignments(ctx context.Context, in *RetrieveAssignmentsRequest, opts ...grpc.CallOption) (*RetrieveAssignmentsResponse, error) {
	out := new(RetrieveAssignmentsResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.AssignmentReaderService/RetrieveAssignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentReaderServiceClient) RetrieveStudyPlanProgress(ctx context.Context, in *RetrieveStudyPlanProgressRequest, opts ...grpc.CallOption) (*RetrieveStudyPlanProgressResponse, error) {
	out := new(RetrieveStudyPlanProgressResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.AssignmentReaderService/RetrieveStudyPlanProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentReaderServiceClient) ListCourseTodo(ctx context.Context, in *ListCourseTodoRequest, opts ...grpc.CallOption) (*ListCourseTodoResponse, error) {
	out := new(ListCourseTodoResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.AssignmentReaderService/ListCourseTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentReaderServiceClient) GetChildStudyPlanItems(ctx context.Context, in *GetChildStudyPlanItemsRequest, opts ...grpc.CallOption) (*GetChildStudyPlanItemsResponse, error) {
	out := new(GetChildStudyPlanItemsResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.AssignmentReaderService/GetChildStudyPlanItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentReaderServiceClient) RetrieveStatisticAssignmentClass(ctx context.Context, in *RetrieveStatisticAssignmentClassRequest, opts ...grpc.CallOption) (*RetrieveStatisticAssignmentClassResponse, error) {
	out := new(RetrieveStatisticAssignmentClassResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.AssignmentReaderService/RetrieveStatisticAssignmentClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssignmentReaderServiceServer is the server API for AssignmentReaderService service.
// All implementations should embed UnimplementedAssignmentReaderServiceServer
// for forward compatibility
type AssignmentReaderServiceServer interface {
	ListStudyPlans(context.Context, *ListStudyPlansRequest) (*ListStudyPlansResponse, error)
	ListStudentToDoItems(context.Context, *ListStudentToDoItemsRequest) (*ListStudentToDoItemsResponse, error)
	ListStudentAvailableContents(context.Context, *ListStudentAvailableContentsRequest) (*ListStudentAvailableContentsResponse, error)
	RetrieveAssignments(context.Context, *RetrieveAssignmentsRequest) (*RetrieveAssignmentsResponse, error)
	RetrieveStudyPlanProgress(context.Context, *RetrieveStudyPlanProgressRequest) (*RetrieveStudyPlanProgressResponse, error)
	ListCourseTodo(context.Context, *ListCourseTodoRequest) (*ListCourseTodoResponse, error)
	GetChildStudyPlanItems(context.Context, *GetChildStudyPlanItemsRequest) (*GetChildStudyPlanItemsResponse, error)
	RetrieveStatisticAssignmentClass(context.Context, *RetrieveStatisticAssignmentClassRequest) (*RetrieveStatisticAssignmentClassResponse, error)
}

// UnimplementedAssignmentReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAssignmentReaderServiceServer struct {
}

func (UnimplementedAssignmentReaderServiceServer) ListStudyPlans(context.Context, *ListStudyPlansRequest) (*ListStudyPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStudyPlans not implemented")
}
func (UnimplementedAssignmentReaderServiceServer) ListStudentToDoItems(context.Context, *ListStudentToDoItemsRequest) (*ListStudentToDoItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStudentToDoItems not implemented")
}
func (UnimplementedAssignmentReaderServiceServer) ListStudentAvailableContents(context.Context, *ListStudentAvailableContentsRequest) (*ListStudentAvailableContentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStudentAvailableContents not implemented")
}
func (UnimplementedAssignmentReaderServiceServer) RetrieveAssignments(context.Context, *RetrieveAssignmentsRequest) (*RetrieveAssignmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveAssignments not implemented")
}
func (UnimplementedAssignmentReaderServiceServer) RetrieveStudyPlanProgress(context.Context, *RetrieveStudyPlanProgressRequest) (*RetrieveStudyPlanProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveStudyPlanProgress not implemented")
}
func (UnimplementedAssignmentReaderServiceServer) ListCourseTodo(context.Context, *ListCourseTodoRequest) (*ListCourseTodoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCourseTodo not implemented")
}
func (UnimplementedAssignmentReaderServiceServer) GetChildStudyPlanItems(context.Context, *GetChildStudyPlanItemsRequest) (*GetChildStudyPlanItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChildStudyPlanItems not implemented")
}
func (UnimplementedAssignmentReaderServiceServer) RetrieveStatisticAssignmentClass(context.Context, *RetrieveStatisticAssignmentClassRequest) (*RetrieveStatisticAssignmentClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveStatisticAssignmentClass not implemented")
}

// UnsafeAssignmentReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssignmentReaderServiceServer will
// result in compilation errors.
type UnsafeAssignmentReaderServiceServer interface {
	mustEmbedUnimplementedAssignmentReaderServiceServer()
}

func RegisterAssignmentReaderServiceServer(s grpc.ServiceRegistrar, srv AssignmentReaderServiceServer) {
	s.RegisterService(&_AssignmentReaderService_serviceDesc, srv)
}

func _AssignmentReaderService_ListStudyPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStudyPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentReaderServiceServer).ListStudyPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.AssignmentReaderService/ListStudyPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentReaderServiceServer).ListStudyPlans(ctx, req.(*ListStudyPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignmentReaderService_ListStudentToDoItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStudentToDoItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentReaderServiceServer).ListStudentToDoItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.AssignmentReaderService/ListStudentToDoItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentReaderServiceServer).ListStudentToDoItems(ctx, req.(*ListStudentToDoItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignmentReaderService_ListStudentAvailableContents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStudentAvailableContentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentReaderServiceServer).ListStudentAvailableContents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.AssignmentReaderService/ListStudentAvailableContents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentReaderServiceServer).ListStudentAvailableContents(ctx, req.(*ListStudentAvailableContentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignmentReaderService_RetrieveAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveAssignmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentReaderServiceServer).RetrieveAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.AssignmentReaderService/RetrieveAssignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentReaderServiceServer).RetrieveAssignments(ctx, req.(*RetrieveAssignmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignmentReaderService_RetrieveStudyPlanProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveStudyPlanProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentReaderServiceServer).RetrieveStudyPlanProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.AssignmentReaderService/RetrieveStudyPlanProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentReaderServiceServer).RetrieveStudyPlanProgress(ctx, req.(*RetrieveStudyPlanProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignmentReaderService_ListCourseTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCourseTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentReaderServiceServer).ListCourseTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.AssignmentReaderService/ListCourseTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentReaderServiceServer).ListCourseTodo(ctx, req.(*ListCourseTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignmentReaderService_GetChildStudyPlanItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChildStudyPlanItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentReaderServiceServer).GetChildStudyPlanItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.AssignmentReaderService/GetChildStudyPlanItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentReaderServiceServer).GetChildStudyPlanItems(ctx, req.(*GetChildStudyPlanItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssignmentReaderService_RetrieveStatisticAssignmentClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveStatisticAssignmentClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentReaderServiceServer).RetrieveStatisticAssignmentClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.AssignmentReaderService/RetrieveStatisticAssignmentClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentReaderServiceServer).RetrieveStatisticAssignmentClass(ctx, req.(*RetrieveStatisticAssignmentClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AssignmentReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eureka.v1.AssignmentReaderService",
	HandlerType: (*AssignmentReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListStudyPlans",
			Handler:    _AssignmentReaderService_ListStudyPlans_Handler,
		},
		{
			MethodName: "ListStudentToDoItems",
			Handler:    _AssignmentReaderService_ListStudentToDoItems_Handler,
		},
		{
			MethodName: "ListStudentAvailableContents",
			Handler:    _AssignmentReaderService_ListStudentAvailableContents_Handler,
		},
		{
			MethodName: "RetrieveAssignments",
			Handler:    _AssignmentReaderService_RetrieveAssignments_Handler,
		},
		{
			MethodName: "RetrieveStudyPlanProgress",
			Handler:    _AssignmentReaderService_RetrieveStudyPlanProgress_Handler,
		},
		{
			MethodName: "ListCourseTodo",
			Handler:    _AssignmentReaderService_ListCourseTodo_Handler,
		},
		{
			MethodName: "GetChildStudyPlanItems",
			Handler:    _AssignmentReaderService_GetChildStudyPlanItems_Handler,
		},
		{
			MethodName: "RetrieveStatisticAssignmentClass",
			Handler:    _AssignmentReaderService_RetrieveStatisticAssignmentClass_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eureka/v1/assignment_reader.proto",
}
