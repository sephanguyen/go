// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package epb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CourseReaderServiceClient is the client API for CourseReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourseReaderServiceClient interface {
	RetrieveLOs(ctx context.Context, in *RetrieveLOsRequest, opts ...grpc.CallOption) (*RetrieveLOsResponse, error)
	ListTopicsByStudyPlan(ctx context.Context, in *ListTopicsByStudyPlanRequest, opts ...grpc.CallOption) (*ListTopicsByStudyPlanResponse, error)
	ListClassByCourse(ctx context.Context, in *ListClassByCourseRequest, opts ...grpc.CallOption) (*ListClassByCourseResponse, error)
	ListStudentByCourse(ctx context.Context, in *ListStudentByCourseRequest, opts ...grpc.CallOption) (*ListStudentByCourseResponse, error)
	ListStudentIDsByCourse(ctx context.Context, in *ListStudentIDsByCourseRequest, opts ...grpc.CallOption) (*ListStudentIDsByCourseResponse, error)
	ListCourseIDsByStudents(ctx context.Context, in *ListCourseIDsByStudentsRequest, opts ...grpc.CallOption) (*ListCourseIDsByStudentsResponse, error)
	ListStudentIDsByCourseV2(ctx context.Context, in *ListStudentIDsByCourseV2Request, opts ...grpc.CallOption) (CourseReaderService_ListStudentIDsByCourseV2Client, error)
	RetrieveCourseStatistic(ctx context.Context, in *RetrieveCourseStatisticRequest, opts ...grpc.CallOption) (*RetrieveCourseStatisticResponse, error)
	RetrieveCourseStatisticV2(ctx context.Context, in *RetrieveCourseStatisticRequestV2, opts ...grpc.CallOption) (*RetrieveCourseStatisticResponseV2, error)
	GetLOsByCourse(ctx context.Context, in *GetLOsByCourseRequest, opts ...grpc.CallOption) (*GetLOsByCourseResponse, error)
	GetStudentsAccessPath(ctx context.Context, in *GetStudentsAccessPathRequest, opts ...grpc.CallOption) (*GetStudentsAccessPathResponse, error)
}

type courseReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseReaderServiceClient(cc grpc.ClientConnInterface) CourseReaderServiceClient {
	return &courseReaderServiceClient{cc}
}

func (c *courseReaderServiceClient) RetrieveLOs(ctx context.Context, in *RetrieveLOsRequest, opts ...grpc.CallOption) (*RetrieveLOsResponse, error) {
	out := new(RetrieveLOsResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.CourseReaderService/RetrieveLOs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseReaderServiceClient) ListTopicsByStudyPlan(ctx context.Context, in *ListTopicsByStudyPlanRequest, opts ...grpc.CallOption) (*ListTopicsByStudyPlanResponse, error) {
	out := new(ListTopicsByStudyPlanResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.CourseReaderService/ListTopicsByStudyPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseReaderServiceClient) ListClassByCourse(ctx context.Context, in *ListClassByCourseRequest, opts ...grpc.CallOption) (*ListClassByCourseResponse, error) {
	out := new(ListClassByCourseResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.CourseReaderService/ListClassByCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseReaderServiceClient) ListStudentByCourse(ctx context.Context, in *ListStudentByCourseRequest, opts ...grpc.CallOption) (*ListStudentByCourseResponse, error) {
	out := new(ListStudentByCourseResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.CourseReaderService/ListStudentByCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseReaderServiceClient) ListStudentIDsByCourse(ctx context.Context, in *ListStudentIDsByCourseRequest, opts ...grpc.CallOption) (*ListStudentIDsByCourseResponse, error) {
	out := new(ListStudentIDsByCourseResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.CourseReaderService/ListStudentIDsByCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseReaderServiceClient) ListCourseIDsByStudents(ctx context.Context, in *ListCourseIDsByStudentsRequest, opts ...grpc.CallOption) (*ListCourseIDsByStudentsResponse, error) {
	out := new(ListCourseIDsByStudentsResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.CourseReaderService/ListCourseIDsByStudents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseReaderServiceClient) ListStudentIDsByCourseV2(ctx context.Context, in *ListStudentIDsByCourseV2Request, opts ...grpc.CallOption) (CourseReaderService_ListStudentIDsByCourseV2Client, error) {
	stream, err := c.cc.NewStream(ctx, &_CourseReaderService_serviceDesc.Streams[0], "/eureka.v1.CourseReaderService/ListStudentIDsByCourseV2", opts...)
	if err != nil {
		return nil, err
	}
	x := &courseReaderServiceListStudentIDsByCourseV2Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CourseReaderService_ListStudentIDsByCourseV2Client interface {
	Recv() (*ListStudentIDsByCourseV2Response, error)
	grpc.ClientStream
}

type courseReaderServiceListStudentIDsByCourseV2Client struct {
	grpc.ClientStream
}

func (x *courseReaderServiceListStudentIDsByCourseV2Client) Recv() (*ListStudentIDsByCourseV2Response, error) {
	m := new(ListStudentIDsByCourseV2Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *courseReaderServiceClient) RetrieveCourseStatistic(ctx context.Context, in *RetrieveCourseStatisticRequest, opts ...grpc.CallOption) (*RetrieveCourseStatisticResponse, error) {
	out := new(RetrieveCourseStatisticResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.CourseReaderService/RetrieveCourseStatistic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseReaderServiceClient) RetrieveCourseStatisticV2(ctx context.Context, in *RetrieveCourseStatisticRequestV2, opts ...grpc.CallOption) (*RetrieveCourseStatisticResponseV2, error) {
	out := new(RetrieveCourseStatisticResponseV2)
	err := c.cc.Invoke(ctx, "/eureka.v1.CourseReaderService/RetrieveCourseStatisticV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseReaderServiceClient) GetLOsByCourse(ctx context.Context, in *GetLOsByCourseRequest, opts ...grpc.CallOption) (*GetLOsByCourseResponse, error) {
	out := new(GetLOsByCourseResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.CourseReaderService/GetLOsByCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseReaderServiceClient) GetStudentsAccessPath(ctx context.Context, in *GetStudentsAccessPathRequest, opts ...grpc.CallOption) (*GetStudentsAccessPathResponse, error) {
	out := new(GetStudentsAccessPathResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.CourseReaderService/GetStudentsAccessPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseReaderServiceServer is the server API for CourseReaderService service.
// All implementations should embed UnimplementedCourseReaderServiceServer
// for forward compatibility
type CourseReaderServiceServer interface {
	RetrieveLOs(context.Context, *RetrieveLOsRequest) (*RetrieveLOsResponse, error)
	ListTopicsByStudyPlan(context.Context, *ListTopicsByStudyPlanRequest) (*ListTopicsByStudyPlanResponse, error)
	ListClassByCourse(context.Context, *ListClassByCourseRequest) (*ListClassByCourseResponse, error)
	ListStudentByCourse(context.Context, *ListStudentByCourseRequest) (*ListStudentByCourseResponse, error)
	ListStudentIDsByCourse(context.Context, *ListStudentIDsByCourseRequest) (*ListStudentIDsByCourseResponse, error)
	ListCourseIDsByStudents(context.Context, *ListCourseIDsByStudentsRequest) (*ListCourseIDsByStudentsResponse, error)
	ListStudentIDsByCourseV2(*ListStudentIDsByCourseV2Request, CourseReaderService_ListStudentIDsByCourseV2Server) error
	RetrieveCourseStatistic(context.Context, *RetrieveCourseStatisticRequest) (*RetrieveCourseStatisticResponse, error)
	RetrieveCourseStatisticV2(context.Context, *RetrieveCourseStatisticRequestV2) (*RetrieveCourseStatisticResponseV2, error)
	GetLOsByCourse(context.Context, *GetLOsByCourseRequest) (*GetLOsByCourseResponse, error)
	GetStudentsAccessPath(context.Context, *GetStudentsAccessPathRequest) (*GetStudentsAccessPathResponse, error)
}

// UnimplementedCourseReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCourseReaderServiceServer struct {
}

func (UnimplementedCourseReaderServiceServer) RetrieveLOs(context.Context, *RetrieveLOsRequest) (*RetrieveLOsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveLOs not implemented")
}
func (UnimplementedCourseReaderServiceServer) ListTopicsByStudyPlan(context.Context, *ListTopicsByStudyPlanRequest) (*ListTopicsByStudyPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTopicsByStudyPlan not implemented")
}
func (UnimplementedCourseReaderServiceServer) ListClassByCourse(context.Context, *ListClassByCourseRequest) (*ListClassByCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClassByCourse not implemented")
}
func (UnimplementedCourseReaderServiceServer) ListStudentByCourse(context.Context, *ListStudentByCourseRequest) (*ListStudentByCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStudentByCourse not implemented")
}
func (UnimplementedCourseReaderServiceServer) ListStudentIDsByCourse(context.Context, *ListStudentIDsByCourseRequest) (*ListStudentIDsByCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStudentIDsByCourse not implemented")
}
func (UnimplementedCourseReaderServiceServer) ListCourseIDsByStudents(context.Context, *ListCourseIDsByStudentsRequest) (*ListCourseIDsByStudentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCourseIDsByStudents not implemented")
}
func (UnimplementedCourseReaderServiceServer) ListStudentIDsByCourseV2(*ListStudentIDsByCourseV2Request, CourseReaderService_ListStudentIDsByCourseV2Server) error {
	return status.Errorf(codes.Unimplemented, "method ListStudentIDsByCourseV2 not implemented")
}
func (UnimplementedCourseReaderServiceServer) RetrieveCourseStatistic(context.Context, *RetrieveCourseStatisticRequest) (*RetrieveCourseStatisticResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveCourseStatistic not implemented")
}
func (UnimplementedCourseReaderServiceServer) RetrieveCourseStatisticV2(context.Context, *RetrieveCourseStatisticRequestV2) (*RetrieveCourseStatisticResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveCourseStatisticV2 not implemented")
}
func (UnimplementedCourseReaderServiceServer) GetLOsByCourse(context.Context, *GetLOsByCourseRequest) (*GetLOsByCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLOsByCourse not implemented")
}
func (UnimplementedCourseReaderServiceServer) GetStudentsAccessPath(context.Context, *GetStudentsAccessPathRequest) (*GetStudentsAccessPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentsAccessPath not implemented")
}

// UnsafeCourseReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseReaderServiceServer will
// result in compilation errors.
type UnsafeCourseReaderServiceServer interface {
	mustEmbedUnimplementedCourseReaderServiceServer()
}

func RegisterCourseReaderServiceServer(s grpc.ServiceRegistrar, srv CourseReaderServiceServer) {
	s.RegisterService(&_CourseReaderService_serviceDesc, srv)
}

func _CourseReaderService_RetrieveLOs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveLOsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseReaderServiceServer).RetrieveLOs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.CourseReaderService/RetrieveLOs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseReaderServiceServer).RetrieveLOs(ctx, req.(*RetrieveLOsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseReaderService_ListTopicsByStudyPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTopicsByStudyPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseReaderServiceServer).ListTopicsByStudyPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.CourseReaderService/ListTopicsByStudyPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseReaderServiceServer).ListTopicsByStudyPlan(ctx, req.(*ListTopicsByStudyPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseReaderService_ListClassByCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClassByCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseReaderServiceServer).ListClassByCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.CourseReaderService/ListClassByCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseReaderServiceServer).ListClassByCourse(ctx, req.(*ListClassByCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseReaderService_ListStudentByCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStudentByCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseReaderServiceServer).ListStudentByCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.CourseReaderService/ListStudentByCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseReaderServiceServer).ListStudentByCourse(ctx, req.(*ListStudentByCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseReaderService_ListStudentIDsByCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStudentIDsByCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseReaderServiceServer).ListStudentIDsByCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.CourseReaderService/ListStudentIDsByCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseReaderServiceServer).ListStudentIDsByCourse(ctx, req.(*ListStudentIDsByCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseReaderService_ListCourseIDsByStudents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCourseIDsByStudentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseReaderServiceServer).ListCourseIDsByStudents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.CourseReaderService/ListCourseIDsByStudents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseReaderServiceServer).ListCourseIDsByStudents(ctx, req.(*ListCourseIDsByStudentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseReaderService_ListStudentIDsByCourseV2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListStudentIDsByCourseV2Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CourseReaderServiceServer).ListStudentIDsByCourseV2(m, &courseReaderServiceListStudentIDsByCourseV2Server{stream})
}

type CourseReaderService_ListStudentIDsByCourseV2Server interface {
	Send(*ListStudentIDsByCourseV2Response) error
	grpc.ServerStream
}

type courseReaderServiceListStudentIDsByCourseV2Server struct {
	grpc.ServerStream
}

func (x *courseReaderServiceListStudentIDsByCourseV2Server) Send(m *ListStudentIDsByCourseV2Response) error {
	return x.ServerStream.SendMsg(m)
}

func _CourseReaderService_RetrieveCourseStatistic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveCourseStatisticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseReaderServiceServer).RetrieveCourseStatistic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.CourseReaderService/RetrieveCourseStatistic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseReaderServiceServer).RetrieveCourseStatistic(ctx, req.(*RetrieveCourseStatisticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseReaderService_RetrieveCourseStatisticV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveCourseStatisticRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseReaderServiceServer).RetrieveCourseStatisticV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.CourseReaderService/RetrieveCourseStatisticV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseReaderServiceServer).RetrieveCourseStatisticV2(ctx, req.(*RetrieveCourseStatisticRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseReaderService_GetLOsByCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLOsByCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseReaderServiceServer).GetLOsByCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.CourseReaderService/GetLOsByCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseReaderServiceServer).GetLOsByCourse(ctx, req.(*GetLOsByCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseReaderService_GetStudentsAccessPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentsAccessPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseReaderServiceServer).GetStudentsAccessPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.CourseReaderService/GetStudentsAccessPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseReaderServiceServer).GetStudentsAccessPath(ctx, req.(*GetStudentsAccessPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CourseReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eureka.v1.CourseReaderService",
	HandlerType: (*CourseReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveLOs",
			Handler:    _CourseReaderService_RetrieveLOs_Handler,
		},
		{
			MethodName: "ListTopicsByStudyPlan",
			Handler:    _CourseReaderService_ListTopicsByStudyPlan_Handler,
		},
		{
			MethodName: "ListClassByCourse",
			Handler:    _CourseReaderService_ListClassByCourse_Handler,
		},
		{
			MethodName: "ListStudentByCourse",
			Handler:    _CourseReaderService_ListStudentByCourse_Handler,
		},
		{
			MethodName: "ListStudentIDsByCourse",
			Handler:    _CourseReaderService_ListStudentIDsByCourse_Handler,
		},
		{
			MethodName: "ListCourseIDsByStudents",
			Handler:    _CourseReaderService_ListCourseIDsByStudents_Handler,
		},
		{
			MethodName: "RetrieveCourseStatistic",
			Handler:    _CourseReaderService_RetrieveCourseStatistic_Handler,
		},
		{
			MethodName: "RetrieveCourseStatisticV2",
			Handler:    _CourseReaderService_RetrieveCourseStatisticV2_Handler,
		},
		{
			MethodName: "GetLOsByCourse",
			Handler:    _CourseReaderService_GetLOsByCourse_Handler,
		},
		{
			MethodName: "GetStudentsAccessPath",
			Handler:    _CourseReaderService_GetStudentsAccessPath_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListStudentIDsByCourseV2",
			Handler:       _CourseReaderService_ListStudentIDsByCourseV2_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "eureka/v1/course_reader.proto",
}
