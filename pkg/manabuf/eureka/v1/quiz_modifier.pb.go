// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: eureka/v1/quiz_modifier.proto

package epb

import (
	proto "github.com/golang/protobuf/proto"
	v1 "github.com/manabie-com/backend/pkg/manabuf/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// For backward compatible
type QuizCore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalId      string           `protobuf:"bytes,1,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	Kind            v1.QuizType      `protobuf:"varint,2,opt,name=kind,proto3,enum=common.v1.QuizType" json:"kind,omitempty"`
	SchoolId        int32            `protobuf:"varint,3,opt,name=school_id,json=schoolId,proto3" json:"school_id,omitempty"`
	Country         v1.Country       `protobuf:"varint,4,opt,name=country,proto3,enum=common.v1.Country" json:"country,omitempty"`
	Question        *v1.RichText     `protobuf:"bytes,5,opt,name=question,proto3" json:"question,omitempty"`
	Explanation     *v1.RichText     `protobuf:"bytes,6,opt,name=explanation,proto3" json:"explanation,omitempty"`
	TaggedLos       []string         `protobuf:"bytes,7,rep,name=tagged_los,json=taggedLos,proto3" json:"tagged_los,omitempty"`
	DifficultyLevel int32            `protobuf:"varint,8,opt,name=difficulty_level,json=difficultyLevel,proto3" json:"difficulty_level,omitempty"`
	Options         []*v1.QuizOption `protobuf:"bytes,9,rep,name=options,proto3" json:"options,omitempty"`
	Config          []v1.QuizConfig  `protobuf:"varint,10,rep,packed,name=config,proto3,enum=common.v1.QuizConfig" json:"config,omitempty"`
}

func (x *QuizCore) Reset() {
	*x = QuizCore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuizCore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuizCore) ProtoMessage() {}

func (x *QuizCore) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuizCore.ProtoReflect.Descriptor instead.
func (*QuizCore) Descriptor() ([]byte, []int) {
	return file_eureka_v1_quiz_modifier_proto_rawDescGZIP(), []int{0}
}

func (x *QuizCore) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *QuizCore) GetKind() v1.QuizType {
	if x != nil {
		return x.Kind
	}
	return v1.QuizType_QUIZ_TYPE_MCQ
}

func (x *QuizCore) GetSchoolId() int32 {
	if x != nil {
		return x.SchoolId
	}
	return 0
}

func (x *QuizCore) GetCountry() v1.Country {
	if x != nil {
		return x.Country
	}
	return v1.Country_COUNTRY_NONE
}

func (x *QuizCore) GetQuestion() *v1.RichText {
	if x != nil {
		return x.Question
	}
	return nil
}

func (x *QuizCore) GetExplanation() *v1.RichText {
	if x != nil {
		return x.Explanation
	}
	return nil
}

func (x *QuizCore) GetTaggedLos() []string {
	if x != nil {
		return x.TaggedLos
	}
	return nil
}

func (x *QuizCore) GetDifficultyLevel() int32 {
	if x != nil {
		return x.DifficultyLevel
	}
	return 0
}

func (x *QuizCore) GetOptions() []*v1.QuizOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *QuizCore) GetConfig() []v1.QuizConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type UpsertQuizRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quiz *QuizCore `protobuf:"bytes,1,opt,name=quiz,proto3" json:"quiz,omitempty"`
	LoId string    `protobuf:"bytes,2,opt,name=lo_id,json=loId,proto3" json:"lo_id,omitempty"`
}

func (x *UpsertQuizRequest) Reset() {
	*x = UpsertQuizRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertQuizRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertQuizRequest) ProtoMessage() {}

func (x *UpsertQuizRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertQuizRequest.ProtoReflect.Descriptor instead.
func (*UpsertQuizRequest) Descriptor() ([]byte, []int) {
	return file_eureka_v1_quiz_modifier_proto_rawDescGZIP(), []int{1}
}

func (x *UpsertQuizRequest) GetQuiz() *QuizCore {
	if x != nil {
		return x.Quiz
	}
	return nil
}

func (x *UpsertQuizRequest) GetLoId() string {
	if x != nil {
		return x.LoId
	}
	return ""
}

type UpsertQuizResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UpsertQuizResponse) Reset() {
	*x = UpsertQuizResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertQuizResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertQuizResponse) ProtoMessage() {}

func (x *UpsertQuizResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertQuizResponse.ProtoReflect.Descriptor instead.
func (*UpsertQuizResponse) Descriptor() ([]byte, []int) {
	return file_eureka_v1_quiz_modifier_proto_rawDescGZIP(), []int{2}
}

func (x *UpsertQuizResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type QuizLO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quiz *v1.QuizCore `protobuf:"bytes,1,opt,name=quiz,proto3" json:"quiz,omitempty"`
	LoId string       `protobuf:"bytes,2,opt,name=lo_id,json=loId,proto3" json:"lo_id,omitempty"`
}

func (x *QuizLO) Reset() {
	*x = QuizLO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuizLO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuizLO) ProtoMessage() {}

func (x *QuizLO) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuizLO.ProtoReflect.Descriptor instead.
func (*QuizLO) Descriptor() ([]byte, []int) {
	return file_eureka_v1_quiz_modifier_proto_rawDescGZIP(), []int{3}
}

func (x *QuizLO) GetQuiz() *v1.QuizCore {
	if x != nil {
		return x.Quiz
	}
	return nil
}

func (x *QuizLO) GetLoId() string {
	if x != nil {
		return x.LoId
	}
	return ""
}

type UpsertSingleQuizRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuizLo *QuizLO `protobuf:"bytes,1,opt,name=quiz_lo,json=quizLo,proto3" json:"quiz_lo,omitempty"`
}

func (x *UpsertSingleQuizRequest) Reset() {
	*x = UpsertSingleQuizRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertSingleQuizRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertSingleQuizRequest) ProtoMessage() {}

func (x *UpsertSingleQuizRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertSingleQuizRequest.ProtoReflect.Descriptor instead.
func (*UpsertSingleQuizRequest) Descriptor() ([]byte, []int) {
	return file_eureka_v1_quiz_modifier_proto_rawDescGZIP(), []int{4}
}

func (x *UpsertSingleQuizRequest) GetQuizLo() *QuizLO {
	if x != nil {
		return x.QuizLo
	}
	return nil
}

type UpsertSingleQuizResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UpsertSingleQuizResponse) Reset() {
	*x = UpsertSingleQuizResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertSingleQuizResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertSingleQuizResponse) ProtoMessage() {}

func (x *UpsertSingleQuizResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertSingleQuizResponse.ProtoReflect.Descriptor instead.
func (*UpsertSingleQuizResponse) Descriptor() ([]byte, []int) {
	return file_eureka_v1_quiz_modifier_proto_rawDescGZIP(), []int{5}
}

func (x *UpsertSingleQuizResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type CreateQuizTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudyPlanItemId string `protobuf:"bytes,1,opt,name=study_plan_item_id,json=studyPlanItemId,proto3" json:"study_plan_item_id,omitempty"`
	LoId            string `protobuf:"bytes,2,opt,name=lo_id,json=loId,proto3" json:"lo_id,omitempty"`
	StudentId       string `protobuf:"bytes,3,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	// let empty for the first call
	SetId     *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty"`
	Paging    *v1.Paging              `protobuf:"bytes,5,opt,name=paging,proto3" json:"paging,omitempty"`
	SessionId string                  `protobuf:"bytes,6,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	KeepOrder bool                    `protobuf:"varint,7,opt,name=keep_order,json=keepOrder,proto3" json:"keep_order,omitempty"`
}

func (x *CreateQuizTestRequest) Reset() {
	*x = CreateQuizTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQuizTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuizTestRequest) ProtoMessage() {}

func (x *CreateQuizTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuizTestRequest.ProtoReflect.Descriptor instead.
func (*CreateQuizTestRequest) Descriptor() ([]byte, []int) {
	return file_eureka_v1_quiz_modifier_proto_rawDescGZIP(), []int{6}
}

func (x *CreateQuizTestRequest) GetStudyPlanItemId() string {
	if x != nil {
		return x.StudyPlanItemId
	}
	return ""
}

func (x *CreateQuizTestRequest) GetLoId() string {
	if x != nil {
		return x.LoId
	}
	return ""
}

func (x *CreateQuizTestRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *CreateQuizTestRequest) GetSetId() *wrapperspb.StringValue {
	if x != nil {
		return x.SetId
	}
	return nil
}

func (x *CreateQuizTestRequest) GetPaging() *v1.Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

func (x *CreateQuizTestRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CreateQuizTestRequest) GetKeepOrder() bool {
	if x != nil {
		return x.KeepOrder
	}
	return false
}

type CreateQuizTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextPage       *v1.Paging          `protobuf:"bytes,1,opt,name=next_page,json=nextPage,proto3" json:"next_page,omitempty"`
	Items          []*v1.Quiz          `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	QuizzesId      string              `protobuf:"bytes,3,opt,name=quizzes_id,json=quizzesId,proto3" json:"quizzes_id,omitempty"`
	QuestionGroups []*v1.QuestionGroup `protobuf:"bytes,4,rep,name=question_groups,json=questionGroups,proto3" json:"question_groups,omitempty"`
}

func (x *CreateQuizTestResponse) Reset() {
	*x = CreateQuizTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQuizTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuizTestResponse) ProtoMessage() {}

func (x *CreateQuizTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuizTestResponse.ProtoReflect.Descriptor instead.
func (*CreateQuizTestResponse) Descriptor() ([]byte, []int) {
	return file_eureka_v1_quiz_modifier_proto_rawDescGZIP(), []int{7}
}

func (x *CreateQuizTestResponse) GetNextPage() *v1.Paging {
	if x != nil {
		return x.NextPage
	}
	return nil
}

func (x *CreateQuizTestResponse) GetItems() []*v1.Quiz {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CreateQuizTestResponse) GetQuizzesId() string {
	if x != nil {
		return x.QuizzesId
	}
	return ""
}

func (x *CreateQuizTestResponse) GetQuestionGroups() []*v1.QuestionGroup {
	if x != nil {
		return x.QuestionGroups
	}
	return nil
}

type DeleteQuizRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuizId   string `protobuf:"bytes,1,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	SchoolId int32  `protobuf:"varint,2,opt,name=school_id,json=schoolId,proto3" json:"school_id,omitempty"`
}

func (x *DeleteQuizRequest) Reset() {
	*x = DeleteQuizRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteQuizRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQuizRequest) ProtoMessage() {}

func (x *DeleteQuizRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQuizRequest.ProtoReflect.Descriptor instead.
func (*DeleteQuizRequest) Descriptor() ([]byte, []int) {
	return file_eureka_v1_quiz_modifier_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteQuizRequest) GetQuizId() string {
	if x != nil {
		return x.QuizId
	}
	return ""
}

func (x *DeleteQuizRequest) GetSchoolId() int32 {
	if x != nil {
		return x.SchoolId
	}
	return 0
}

type DeleteQuizResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteQuizResponse) Reset() {
	*x = DeleteQuizResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteQuizResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQuizResponse) ProtoMessage() {}

func (x *DeleteQuizResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQuizResponse.ProtoReflect.Descriptor instead.
func (*DeleteQuizResponse) Descriptor() ([]byte, []int) {
	return file_eureka_v1_quiz_modifier_proto_rawDescGZIP(), []int{9}
}

type CreateFlashCardStudyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudyPlanItemId string     `protobuf:"bytes,1,opt,name=study_plan_item_id,json=studyPlanItemId,proto3" json:"study_plan_item_id,omitempty"`
	LoId            string     `protobuf:"bytes,2,opt,name=lo_id,json=loId,proto3" json:"lo_id,omitempty"`
	StudentId       string     `protobuf:"bytes,3,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	StudySetId      string     `protobuf:"bytes,4,opt,name=study_set_id,json=studySetId,proto3" json:"study_set_id,omitempty"`
	Paging          *v1.Paging `protobuf:"bytes,5,opt,name=paging,proto3" json:"paging,omitempty"`
	KeepOrder       bool       `protobuf:"varint,6,opt,name=keep_order,json=keepOrder,proto3" json:"keep_order,omitempty"`
}

func (x *CreateFlashCardStudyRequest) Reset() {
	*x = CreateFlashCardStudyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFlashCardStudyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlashCardStudyRequest) ProtoMessage() {}

func (x *CreateFlashCardStudyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlashCardStudyRequest.ProtoReflect.Descriptor instead.
func (*CreateFlashCardStudyRequest) Descriptor() ([]byte, []int) {
	return file_eureka_v1_quiz_modifier_proto_rawDescGZIP(), []int{10}
}

func (x *CreateFlashCardStudyRequest) GetStudyPlanItemId() string {
	if x != nil {
		return x.StudyPlanItemId
	}
	return ""
}

func (x *CreateFlashCardStudyRequest) GetLoId() string {
	if x != nil {
		return x.LoId
	}
	return ""
}

func (x *CreateFlashCardStudyRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *CreateFlashCardStudyRequest) GetStudySetId() string {
	if x != nil {
		return x.StudySetId
	}
	return ""
}

func (x *CreateFlashCardStudyRequest) GetPaging() *v1.Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

func (x *CreateFlashCardStudyRequest) GetKeepOrder() bool {
	if x != nil {
		return x.KeepOrder
	}
	return false
}

type CreateFlashCardStudyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextPage      *v1.Paging          `protobuf:"bytes,1,opt,name=next_page,json=nextPage,proto3" json:"next_page,omitempty"`
	StudySetId    string              `protobuf:"bytes,2,opt,name=study_set_id,json=studySetId,proto3" json:"study_set_id,omitempty"`
	Items         []*FlashcardQuizzes `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	StudyingIndex int32               `protobuf:"varint,4,opt,name=studying_index,json=studyingIndex,proto3" json:"studying_index,omitempty"`
}

func (x *CreateFlashCardStudyResponse) Reset() {
	*x = CreateFlashCardStudyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFlashCardStudyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlashCardStudyResponse) ProtoMessage() {}

func (x *CreateFlashCardStudyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlashCardStudyResponse.ProtoReflect.Descriptor instead.
func (*CreateFlashCardStudyResponse) Descriptor() ([]byte, []int) {
	return file_eureka_v1_quiz_modifier_proto_rawDescGZIP(), []int{11}
}

func (x *CreateFlashCardStudyResponse) GetNextPage() *v1.Paging {
	if x != nil {
		return x.NextPage
	}
	return nil
}

func (x *CreateFlashCardStudyResponse) GetStudySetId() string {
	if x != nil {
		return x.StudySetId
	}
	return ""
}

func (x *CreateFlashCardStudyResponse) GetItems() []*FlashcardQuizzes {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CreateFlashCardStudyResponse) GetStudyingIndex() int32 {
	if x != nil {
		return x.StudyingIndex
	}
	return 0
}

type CreateRetryQuizTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudyPlanItemId    string                  `protobuf:"bytes,1,opt,name=study_plan_item_id,json=studyPlanItemId,proto3" json:"study_plan_item_id,omitempty"`
	LoId               string                  `protobuf:"bytes,2,opt,name=lo_id,json=loId,proto3" json:"lo_id,omitempty"`
	StudentId          string                  `protobuf:"bytes,3,opt,name=student_id,json=studentId,proto3" json:"student_id,omitempty"`
	SetId              *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty"`
	Paging             *v1.Paging              `protobuf:"bytes,5,opt,name=paging,proto3" json:"paging,omitempty"`
	SessionId          string                  `protobuf:"bytes,6,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	KeepOrder          bool                    `protobuf:"varint,7,opt,name=keep_order,json=keepOrder,proto3" json:"keep_order,omitempty"`
	RetryShuffleQuizId *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=retry_shuffle_quiz_id,json=retryShuffleQuizId,proto3" json:"retry_shuffle_quiz_id,omitempty"`
}

func (x *CreateRetryQuizTestRequest) Reset() {
	*x = CreateRetryQuizTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRetryQuizTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRetryQuizTestRequest) ProtoMessage() {}

func (x *CreateRetryQuizTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRetryQuizTestRequest.ProtoReflect.Descriptor instead.
func (*CreateRetryQuizTestRequest) Descriptor() ([]byte, []int) {
	return file_eureka_v1_quiz_modifier_proto_rawDescGZIP(), []int{12}
}

func (x *CreateRetryQuizTestRequest) GetStudyPlanItemId() string {
	if x != nil {
		return x.StudyPlanItemId
	}
	return ""
}

func (x *CreateRetryQuizTestRequest) GetLoId() string {
	if x != nil {
		return x.LoId
	}
	return ""
}

func (x *CreateRetryQuizTestRequest) GetStudentId() string {
	if x != nil {
		return x.StudentId
	}
	return ""
}

func (x *CreateRetryQuizTestRequest) GetSetId() *wrapperspb.StringValue {
	if x != nil {
		return x.SetId
	}
	return nil
}

func (x *CreateRetryQuizTestRequest) GetPaging() *v1.Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

func (x *CreateRetryQuizTestRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CreateRetryQuizTestRequest) GetKeepOrder() bool {
	if x != nil {
		return x.KeepOrder
	}
	return false
}

func (x *CreateRetryQuizTestRequest) GetRetryShuffleQuizId() *wrapperspb.StringValue {
	if x != nil {
		return x.RetryShuffleQuizId
	}
	return nil
}

type CreateRetryQuizTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextPage       *v1.Paging          `protobuf:"bytes,1,opt,name=next_page,json=nextPage,proto3" json:"next_page,omitempty"`
	Items          []*v1.Quiz          `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	QuizzesId      string              `protobuf:"bytes,3,opt,name=quizzes_id,json=quizzesId,proto3" json:"quizzes_id,omitempty"`
	QuestionGroups []*v1.QuestionGroup `protobuf:"bytes,4,rep,name=question_groups,json=questionGroups,proto3" json:"question_groups,omitempty"`
}

func (x *CreateRetryQuizTestResponse) Reset() {
	*x = CreateRetryQuizTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRetryQuizTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRetryQuizTestResponse) ProtoMessage() {}

func (x *CreateRetryQuizTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRetryQuizTestResponse.ProtoReflect.Descriptor instead.
func (*CreateRetryQuizTestResponse) Descriptor() ([]byte, []int) {
	return file_eureka_v1_quiz_modifier_proto_rawDescGZIP(), []int{13}
}

func (x *CreateRetryQuizTestResponse) GetNextPage() *v1.Paging {
	if x != nil {
		return x.NextPage
	}
	return nil
}

func (x *CreateRetryQuizTestResponse) GetItems() []*v1.Quiz {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CreateRetryQuizTestResponse) GetQuizzesId() string {
	if x != nil {
		return x.QuizzesId
	}
	return ""
}

func (x *CreateRetryQuizTestResponse) GetQuestionGroups() []*v1.QuestionGroup {
	if x != nil {
		return x.QuestionGroups
	}
	return nil
}

type CheckQuizCorrectnessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetId  string    `protobuf:"bytes,1,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty"`
	QuizId string    `protobuf:"bytes,2,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	Answer []*Answer `protobuf:"bytes,3,rep,name=answer,proto3" json:"answer,omitempty"`
}

func (x *CheckQuizCorrectnessRequest) Reset() {
	*x = CheckQuizCorrectnessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckQuizCorrectnessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckQuizCorrectnessRequest) ProtoMessage() {}

func (x *CheckQuizCorrectnessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckQuizCorrectnessRequest.ProtoReflect.Descriptor instead.
func (*CheckQuizCorrectnessRequest) Descriptor() ([]byte, []int) {
	return file_eureka_v1_quiz_modifier_proto_rawDescGZIP(), []int{14}
}

func (x *CheckQuizCorrectnessRequest) GetSetId() string {
	if x != nil {
		return x.SetId
	}
	return ""
}

func (x *CheckQuizCorrectnessRequest) GetQuizId() string {
	if x != nil {
		return x.QuizId
	}
	return ""
}

func (x *CheckQuizCorrectnessRequest) GetAnswer() []*Answer {
	if x != nil {
		return x.Answer
	}
	return nil
}

type CheckQuizCorrectnessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Correctness  []bool   `protobuf:"varint,1,rep,packed,name=correctness,proto3" json:"correctness,omitempty"`
	IsCorrectAll bool     `protobuf:"varint,2,opt,name=is_correct_all,json=isCorrectAll,proto3" json:"is_correct_all,omitempty"`
	FilledTexts  []string `protobuf:"bytes,3,rep,name=filled_texts,json=filledTexts,proto3" json:"filled_texts,omitempty"`
	CorrectTexts []string `protobuf:"bytes,4,rep,name=correct_texts,json=correctTexts,proto3" json:"correct_texts,omitempty"`
	// Types that are assignable to Result:
	//
	//	*CheckQuizCorrectnessResponse_OrderingResult
	Result isCheckQuizCorrectnessResponse_Result `protobuf_oneof:"result"`
}

func (x *CheckQuizCorrectnessResponse) Reset() {
	*x = CheckQuizCorrectnessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckQuizCorrectnessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckQuizCorrectnessResponse) ProtoMessage() {}

func (x *CheckQuizCorrectnessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckQuizCorrectnessResponse.ProtoReflect.Descriptor instead.
func (*CheckQuizCorrectnessResponse) Descriptor() ([]byte, []int) {
	return file_eureka_v1_quiz_modifier_proto_rawDescGZIP(), []int{15}
}

func (x *CheckQuizCorrectnessResponse) GetCorrectness() []bool {
	if x != nil {
		return x.Correctness
	}
	return nil
}

func (x *CheckQuizCorrectnessResponse) GetIsCorrectAll() bool {
	if x != nil {
		return x.IsCorrectAll
	}
	return false
}

func (x *CheckQuizCorrectnessResponse) GetFilledTexts() []string {
	if x != nil {
		return x.FilledTexts
	}
	return nil
}

func (x *CheckQuizCorrectnessResponse) GetCorrectTexts() []string {
	if x != nil {
		return x.CorrectTexts
	}
	return nil
}

func (m *CheckQuizCorrectnessResponse) GetResult() isCheckQuizCorrectnessResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *CheckQuizCorrectnessResponse) GetOrderingResult() *v1.OrderingResult {
	if x, ok := x.GetResult().(*CheckQuizCorrectnessResponse_OrderingResult); ok {
		return x.OrderingResult
	}
	return nil
}

type isCheckQuizCorrectnessResponse_Result interface {
	isCheckQuizCorrectnessResponse_Result()
}

type CheckQuizCorrectnessResponse_OrderingResult struct {
	OrderingResult *v1.OrderingResult `protobuf:"bytes,11,opt,name=ordering_result,json=orderingResult,proto3,oneof"`
}

func (*CheckQuizCorrectnessResponse_OrderingResult) isCheckQuizCorrectnessResponse_Result() {}

type RemoveQuizFromLORequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuizId string `protobuf:"bytes,1,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	LoId   string `protobuf:"bytes,2,opt,name=lo_id,json=loId,proto3" json:"lo_id,omitempty"`
}

func (x *RemoveQuizFromLORequest) Reset() {
	*x = RemoveQuizFromLORequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveQuizFromLORequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveQuizFromLORequest) ProtoMessage() {}

func (x *RemoveQuizFromLORequest) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveQuizFromLORequest.ProtoReflect.Descriptor instead.
func (*RemoveQuizFromLORequest) Descriptor() ([]byte, []int) {
	return file_eureka_v1_quiz_modifier_proto_rawDescGZIP(), []int{16}
}

func (x *RemoveQuizFromLORequest) GetQuizId() string {
	if x != nil {
		return x.QuizId
	}
	return ""
}

func (x *RemoveQuizFromLORequest) GetLoId() string {
	if x != nil {
		return x.LoId
	}
	return ""
}

type RemoveQuizFromLOResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveQuizFromLOResponse) Reset() {
	*x = RemoveQuizFromLOResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveQuizFromLOResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveQuizFromLOResponse) ProtoMessage() {}

func (x *RemoveQuizFromLOResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveQuizFromLOResponse.ProtoReflect.Descriptor instead.
func (*RemoveQuizFromLOResponse) Descriptor() ([]byte, []int) {
	return file_eureka_v1_quiz_modifier_proto_rawDescGZIP(), []int{17}
}

type UpdateDisplayOrderOfQuizSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoId  string                                                   `protobuf:"bytes,1,opt,name=lo_id,json=loId,proto3" json:"lo_id,omitempty"`
	Pairs []*UpdateDisplayOrderOfQuizSetRequest_QuizExternalIDPair `protobuf:"bytes,2,rep,name=pairs,proto3" json:"pairs,omitempty"`
}

func (x *UpdateDisplayOrderOfQuizSetRequest) Reset() {
	*x = UpdateDisplayOrderOfQuizSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDisplayOrderOfQuizSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDisplayOrderOfQuizSetRequest) ProtoMessage() {}

func (x *UpdateDisplayOrderOfQuizSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDisplayOrderOfQuizSetRequest.ProtoReflect.Descriptor instead.
func (*UpdateDisplayOrderOfQuizSetRequest) Descriptor() ([]byte, []int) {
	return file_eureka_v1_quiz_modifier_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateDisplayOrderOfQuizSetRequest) GetLoId() string {
	if x != nil {
		return x.LoId
	}
	return ""
}

func (x *UpdateDisplayOrderOfQuizSetRequest) GetPairs() []*UpdateDisplayOrderOfQuizSetRequest_QuizExternalIDPair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

type UpdateDisplayOrderOfQuizSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateDisplayOrderOfQuizSetResponse) Reset() {
	*x = UpdateDisplayOrderOfQuizSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDisplayOrderOfQuizSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDisplayOrderOfQuizSetResponse) ProtoMessage() {}

func (x *UpdateDisplayOrderOfQuizSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDisplayOrderOfQuizSetResponse.ProtoReflect.Descriptor instead.
func (*UpdateDisplayOrderOfQuizSetResponse) Descriptor() ([]byte, []int) {
	return file_eureka_v1_quiz_modifier_proto_rawDescGZIP(), []int{19}
}

type UpdateDisplayOrderOfQuizSetRequest_QuizExternalIDPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	First  string `protobuf:"bytes,1,opt,name=first,proto3" json:"first,omitempty"`
	Second string `protobuf:"bytes,2,opt,name=second,proto3" json:"second,omitempty"`
}

func (x *UpdateDisplayOrderOfQuizSetRequest_QuizExternalIDPair) Reset() {
	*x = UpdateDisplayOrderOfQuizSetRequest_QuizExternalIDPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDisplayOrderOfQuizSetRequest_QuizExternalIDPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDisplayOrderOfQuizSetRequest_QuizExternalIDPair) ProtoMessage() {}

func (x *UpdateDisplayOrderOfQuizSetRequest_QuizExternalIDPair) ProtoReflect() protoreflect.Message {
	mi := &file_eureka_v1_quiz_modifier_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDisplayOrderOfQuizSetRequest_QuizExternalIDPair.ProtoReflect.Descriptor instead.
func (*UpdateDisplayOrderOfQuizSetRequest_QuizExternalIDPair) Descriptor() ([]byte, []int) {
	return file_eureka_v1_quiz_modifier_proto_rawDescGZIP(), []int{18, 0}
}

func (x *UpdateDisplayOrderOfQuizSetRequest_QuizExternalIDPair) GetFirst() string {
	if x != nil {
		return x.First
	}
	return ""
}

func (x *UpdateDisplayOrderOfQuizSetRequest_QuizExternalIDPair) GetSecond() string {
	if x != nil {
		return x.Second
	}
	return ""
}

var File_eureka_v1_quiz_modifier_proto protoreflect.FileDescriptor

var file_eureka_v1_quiz_modifier_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x65, 0x75, 0x72, 0x65, 0x6b, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x69, 0x7a,
	0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x09, 0x65, 0x75, 0x72, 0x65, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x1a, 0x18, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x65, 0x75, 0x72, 0x65, 0x6b, 0x61, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x65, 0x75, 0x72, 0x65, 0x6b, 0x61, 0x2f, 0x76,
	0x31, 0x2f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x03, 0x0a, 0x08, 0x51, 0x75, 0x69,
	0x7a, 0x43, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x08, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0b, 0x65,
	0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63,
	0x68, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x4c, 0x6f,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x51, 0x0a, 0x11,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x04, 0x71, 0x75, 0x69, 0x7a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x65, 0x75, 0x72, 0x65, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x69, 0x7a,
	0x43, 0x6f, 0x72, 0x65, 0x52, 0x04, 0x71, 0x75, 0x69, 0x7a, 0x12, 0x13, 0x0a, 0x05, 0x6c, 0x6f,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x49, 0x64, 0x22,
	0x24, 0x0a, 0x12, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x46, 0x0a, 0x06, 0x51, 0x75, 0x69, 0x7a, 0x4c, 0x4f, 0x12,
	0x27, 0x0a, 0x04, 0x71, 0x75, 0x69, 0x7a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x43, 0x6f,
	0x72, 0x65, 0x52, 0x04, 0x71, 0x75, 0x69, 0x7a, 0x12, 0x13, 0x0a, 0x05, 0x6c, 0x6f, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x49, 0x64, 0x22, 0x45, 0x0a,
	0x17, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x51, 0x75, 0x69,
	0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x7a,
	0x5f, 0x6c, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x75, 0x72, 0x65,
	0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x4c, 0x4f, 0x52, 0x06, 0x71, 0x75,
	0x69, 0x7a, 0x4c, 0x6f, 0x22, 0x2a, 0x0a, 0x18, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x96, 0x02, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x75, 0x64, 0x79, 0x50, 0x6c, 0x61,
	0x6e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x6c, 0x6f, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x29, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65,
	0x65, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x6b, 0x65, 0x65, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xd1, 0x01, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x69, 0x7a, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x71,
	0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0f, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0e, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x49, 0x0a,
	0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x75, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xea,
	0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x43, 0x61,
	0x72, 0x64, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x12, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x6c,
	0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0c, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x79, 0x53, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a,
	0x6b, 0x65, 0x65, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xca, 0x01, 0x0a, 0x1c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x43, 0x61, 0x72, 0x64, 0x53,
	0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0c,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x79, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x31,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x65, 0x75, 0x72, 0x65, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x63,
	0x61, 0x72, 0x64, 0x51, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xec, 0x02, 0x0a, 0x1a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x74, 0x72, 0x79, 0x51, 0x75, 0x69, 0x7a, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x75, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x6c, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x65, 0x70, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6b, 0x65, 0x65,
	0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x15, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x12, 0x72, 0x65, 0x74, 0x72, 0x79, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c,
	0x65, 0x51, 0x75, 0x69, 0x7a, 0x49, 0x64, 0x22, 0xd6, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x74, 0x72, 0x79, 0x51, 0x75, 0x69, 0x7a, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x49, 0x64, 0x12, 0x41, 0x0a,
	0x0f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x0e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x22, 0x78, 0x0a, 0x1b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x75, 0x69, 0x7a, 0x43, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x75, 0x69, 0x7a, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x65, 0x75, 0x72, 0x65, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x22, 0xfe, 0x01, 0x0a, 0x1c, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x51, 0x75, 0x69, 0x7a, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x08,
	0x52, 0x0b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x41, 0x6c, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x6c, 0x65,
	0x64, 0x54, 0x65, 0x78, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48,
	0x00, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x47, 0x0a, 0x17, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x4f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x75, 0x69, 0x7a, 0x49, 0x64, 0x12,
	0x13, 0x0a, 0x05, 0x6c, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x6f, 0x49, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x51, 0x75,
	0x69, 0x7a, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x4f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xd5, 0x01, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x66, 0x51, 0x75, 0x69, 0x7a, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x6c, 0x6f, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x05,
	0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x65, 0x75,
	0x72, 0x65, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x66, 0x51, 0x75, 0x69, 0x7a,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x44, 0x50, 0x61, 0x69, 0x72, 0x52, 0x05, 0x70,
	0x61, 0x69, 0x72, 0x73, 0x1a, 0x42, 0x0a, 0x12, 0x51, 0x75, 0x69, 0x7a, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x49, 0x44, 0x50, 0x61, 0x69, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0x25, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x66,
	0x51, 0x75, 0x69, 0x7a, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0xf7, 0x06, 0x0a, 0x13, 0x51, 0x75, 0x69, 0x7a, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x51, 0x75, 0x69, 0x7a, 0x12, 0x1c, 0x2e, 0x65, 0x75, 0x72, 0x65, 0x6b, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x75, 0x72, 0x65, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x5b, 0x0a, 0x10, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x12, 0x22, 0x2e, 0x65, 0x75,
	0x72, 0x65, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x65, 0x75, 0x72, 0x65, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75,
	0x69, 0x7a, 0x54, 0x65, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x65, 0x75, 0x72, 0x65, 0x6b, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x75, 0x72, 0x65, 0x6b,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x12, 0x1c, 0x2e, 0x65, 0x75, 0x72, 0x65,
	0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x75, 0x72, 0x65, 0x6b, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x6c, 0x61, 0x73, 0x68, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x26,
	0x2e, 0x65, 0x75, 0x72, 0x65, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x43, 0x61, 0x72, 0x64, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x75, 0x72, 0x65, 0x6b, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x43, 0x61,
	0x72, 0x64, 0x53, 0x74, 0x75, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x64, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x74, 0x72, 0x79, 0x51, 0x75,
	0x69, 0x7a, 0x54, 0x65, 0x73, 0x74, 0x12, 0x25, 0x2e, 0x65, 0x75, 0x72, 0x65, 0x6b, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x74, 0x72, 0x79, 0x51, 0x75,
	0x69, 0x7a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x65, 0x75, 0x72, 0x65, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x51, 0x75, 0x69, 0x7a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x75,
	0x69, 0x7a, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x26, 0x2e,
	0x65, 0x75, 0x72, 0x65, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51,
	0x75, 0x69, 0x7a, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x75, 0x72, 0x65, 0x6b, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x75, 0x69, 0x7a, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b,
	0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x46, 0x72, 0x6f, 0x6d,
	0x4c, 0x4f, 0x12, 0x22, 0x2e, 0x65, 0x75, 0x72, 0x65, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x4f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x65, 0x75, 0x72, 0x65, 0x6b, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x46, 0x72, 0x6f,
	0x6d, 0x4c, 0x4f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a, 0x1b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4f, 0x66, 0x51, 0x75, 0x69, 0x7a, 0x53, 0x65, 0x74, 0x12, 0x2d, 0x2e, 0x65, 0x75, 0x72,
	0x65, 0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x66, 0x51, 0x75, 0x69, 0x7a, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x65, 0x75, 0x72, 0x65,
	0x6b, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x66, 0x51, 0x75, 0x69, 0x7a, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x62, 0x69, 0x65, 0x2d,
	0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f,
	0x6d, 0x61, 0x6e, 0x61, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x75, 0x72, 0x65, 0x6b, 0x61, 0x2f, 0x76,
	0x31, 0x3b, 0x65, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eureka_v1_quiz_modifier_proto_rawDescOnce sync.Once
	file_eureka_v1_quiz_modifier_proto_rawDescData = file_eureka_v1_quiz_modifier_proto_rawDesc
)

func file_eureka_v1_quiz_modifier_proto_rawDescGZIP() []byte {
	file_eureka_v1_quiz_modifier_proto_rawDescOnce.Do(func() {
		file_eureka_v1_quiz_modifier_proto_rawDescData = protoimpl.X.CompressGZIP(file_eureka_v1_quiz_modifier_proto_rawDescData)
	})
	return file_eureka_v1_quiz_modifier_proto_rawDescData
}

var file_eureka_v1_quiz_modifier_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_eureka_v1_quiz_modifier_proto_goTypes = []interface{}{
	(*QuizCore)(nil),                                              // 0: eureka.v1.QuizCore
	(*UpsertQuizRequest)(nil),                                     // 1: eureka.v1.UpsertQuizRequest
	(*UpsertQuizResponse)(nil),                                    // 2: eureka.v1.UpsertQuizResponse
	(*QuizLO)(nil),                                                // 3: eureka.v1.QuizLO
	(*UpsertSingleQuizRequest)(nil),                               // 4: eureka.v1.UpsertSingleQuizRequest
	(*UpsertSingleQuizResponse)(nil),                              // 5: eureka.v1.UpsertSingleQuizResponse
	(*CreateQuizTestRequest)(nil),                                 // 6: eureka.v1.CreateQuizTestRequest
	(*CreateQuizTestResponse)(nil),                                // 7: eureka.v1.CreateQuizTestResponse
	(*DeleteQuizRequest)(nil),                                     // 8: eureka.v1.DeleteQuizRequest
	(*DeleteQuizResponse)(nil),                                    // 9: eureka.v1.DeleteQuizResponse
	(*CreateFlashCardStudyRequest)(nil),                           // 10: eureka.v1.CreateFlashCardStudyRequest
	(*CreateFlashCardStudyResponse)(nil),                          // 11: eureka.v1.CreateFlashCardStudyResponse
	(*CreateRetryQuizTestRequest)(nil),                            // 12: eureka.v1.CreateRetryQuizTestRequest
	(*CreateRetryQuizTestResponse)(nil),                           // 13: eureka.v1.CreateRetryQuizTestResponse
	(*CheckQuizCorrectnessRequest)(nil),                           // 14: eureka.v1.CheckQuizCorrectnessRequest
	(*CheckQuizCorrectnessResponse)(nil),                          // 15: eureka.v1.CheckQuizCorrectnessResponse
	(*RemoveQuizFromLORequest)(nil),                               // 16: eureka.v1.RemoveQuizFromLORequest
	(*RemoveQuizFromLOResponse)(nil),                              // 17: eureka.v1.RemoveQuizFromLOResponse
	(*UpdateDisplayOrderOfQuizSetRequest)(nil),                    // 18: eureka.v1.UpdateDisplayOrderOfQuizSetRequest
	(*UpdateDisplayOrderOfQuizSetResponse)(nil),                   // 19: eureka.v1.UpdateDisplayOrderOfQuizSetResponse
	(*UpdateDisplayOrderOfQuizSetRequest_QuizExternalIDPair)(nil), // 20: eureka.v1.UpdateDisplayOrderOfQuizSetRequest.QuizExternalIDPair
	(v1.QuizType)(0),                                              // 21: common.v1.QuizType
	(v1.Country)(0),                                               // 22: common.v1.Country
	(*v1.RichText)(nil),                                           // 23: common.v1.RichText
	(*v1.QuizOption)(nil),                                         // 24: common.v1.QuizOption
	(v1.QuizConfig)(0),                                            // 25: common.v1.QuizConfig
	(*v1.QuizCore)(nil),                                           // 26: common.v1.QuizCore
	(*wrapperspb.StringValue)(nil),                                // 27: google.protobuf.StringValue
	(*v1.Paging)(nil),                                             // 28: common.v1.Paging
	(*v1.Quiz)(nil),                                               // 29: common.v1.Quiz
	(*v1.QuestionGroup)(nil),                                      // 30: common.v1.QuestionGroup
	(*FlashcardQuizzes)(nil),                                      // 31: eureka.v1.FlashcardQuizzes
	(*Answer)(nil),                                                // 32: eureka.v1.Answer
	(*v1.OrderingResult)(nil),                                     // 33: common.v1.OrderingResult
}
var file_eureka_v1_quiz_modifier_proto_depIdxs = []int32{
	21, // 0: eureka.v1.QuizCore.kind:type_name -> common.v1.QuizType
	22, // 1: eureka.v1.QuizCore.country:type_name -> common.v1.Country
	23, // 2: eureka.v1.QuizCore.question:type_name -> common.v1.RichText
	23, // 3: eureka.v1.QuizCore.explanation:type_name -> common.v1.RichText
	24, // 4: eureka.v1.QuizCore.options:type_name -> common.v1.QuizOption
	25, // 5: eureka.v1.QuizCore.config:type_name -> common.v1.QuizConfig
	0,  // 6: eureka.v1.UpsertQuizRequest.quiz:type_name -> eureka.v1.QuizCore
	26, // 7: eureka.v1.QuizLO.quiz:type_name -> common.v1.QuizCore
	3,  // 8: eureka.v1.UpsertSingleQuizRequest.quiz_lo:type_name -> eureka.v1.QuizLO
	27, // 9: eureka.v1.CreateQuizTestRequest.set_id:type_name -> google.protobuf.StringValue
	28, // 10: eureka.v1.CreateQuizTestRequest.paging:type_name -> common.v1.Paging
	28, // 11: eureka.v1.CreateQuizTestResponse.next_page:type_name -> common.v1.Paging
	29, // 12: eureka.v1.CreateQuizTestResponse.items:type_name -> common.v1.Quiz
	30, // 13: eureka.v1.CreateQuizTestResponse.question_groups:type_name -> common.v1.QuestionGroup
	28, // 14: eureka.v1.CreateFlashCardStudyRequest.paging:type_name -> common.v1.Paging
	28, // 15: eureka.v1.CreateFlashCardStudyResponse.next_page:type_name -> common.v1.Paging
	31, // 16: eureka.v1.CreateFlashCardStudyResponse.items:type_name -> eureka.v1.FlashcardQuizzes
	27, // 17: eureka.v1.CreateRetryQuizTestRequest.set_id:type_name -> google.protobuf.StringValue
	28, // 18: eureka.v1.CreateRetryQuizTestRequest.paging:type_name -> common.v1.Paging
	27, // 19: eureka.v1.CreateRetryQuizTestRequest.retry_shuffle_quiz_id:type_name -> google.protobuf.StringValue
	28, // 20: eureka.v1.CreateRetryQuizTestResponse.next_page:type_name -> common.v1.Paging
	29, // 21: eureka.v1.CreateRetryQuizTestResponse.items:type_name -> common.v1.Quiz
	30, // 22: eureka.v1.CreateRetryQuizTestResponse.question_groups:type_name -> common.v1.QuestionGroup
	32, // 23: eureka.v1.CheckQuizCorrectnessRequest.answer:type_name -> eureka.v1.Answer
	33, // 24: eureka.v1.CheckQuizCorrectnessResponse.ordering_result:type_name -> common.v1.OrderingResult
	20, // 25: eureka.v1.UpdateDisplayOrderOfQuizSetRequest.pairs:type_name -> eureka.v1.UpdateDisplayOrderOfQuizSetRequest.QuizExternalIDPair
	1,  // 26: eureka.v1.QuizModifierService.UpsertQuiz:input_type -> eureka.v1.UpsertQuizRequest
	4,  // 27: eureka.v1.QuizModifierService.UpsertSingleQuiz:input_type -> eureka.v1.UpsertSingleQuizRequest
	6,  // 28: eureka.v1.QuizModifierService.CreateQuizTest:input_type -> eureka.v1.CreateQuizTestRequest
	8,  // 29: eureka.v1.QuizModifierService.DeleteQuiz:input_type -> eureka.v1.DeleteQuizRequest
	10, // 30: eureka.v1.QuizModifierService.CreateFlashCardStudy:input_type -> eureka.v1.CreateFlashCardStudyRequest
	12, // 31: eureka.v1.QuizModifierService.CreateRetryQuizTest:input_type -> eureka.v1.CreateRetryQuizTestRequest
	14, // 32: eureka.v1.QuizModifierService.CheckQuizCorrectness:input_type -> eureka.v1.CheckQuizCorrectnessRequest
	16, // 33: eureka.v1.QuizModifierService.RemoveQuizFromLO:input_type -> eureka.v1.RemoveQuizFromLORequest
	18, // 34: eureka.v1.QuizModifierService.UpdateDisplayOrderOfQuizSet:input_type -> eureka.v1.UpdateDisplayOrderOfQuizSetRequest
	2,  // 35: eureka.v1.QuizModifierService.UpsertQuiz:output_type -> eureka.v1.UpsertQuizResponse
	5,  // 36: eureka.v1.QuizModifierService.UpsertSingleQuiz:output_type -> eureka.v1.UpsertSingleQuizResponse
	7,  // 37: eureka.v1.QuizModifierService.CreateQuizTest:output_type -> eureka.v1.CreateQuizTestResponse
	9,  // 38: eureka.v1.QuizModifierService.DeleteQuiz:output_type -> eureka.v1.DeleteQuizResponse
	11, // 39: eureka.v1.QuizModifierService.CreateFlashCardStudy:output_type -> eureka.v1.CreateFlashCardStudyResponse
	13, // 40: eureka.v1.QuizModifierService.CreateRetryQuizTest:output_type -> eureka.v1.CreateRetryQuizTestResponse
	15, // 41: eureka.v1.QuizModifierService.CheckQuizCorrectness:output_type -> eureka.v1.CheckQuizCorrectnessResponse
	17, // 42: eureka.v1.QuizModifierService.RemoveQuizFromLO:output_type -> eureka.v1.RemoveQuizFromLOResponse
	19, // 43: eureka.v1.QuizModifierService.UpdateDisplayOrderOfQuizSet:output_type -> eureka.v1.UpdateDisplayOrderOfQuizSetResponse
	35, // [35:44] is the sub-list for method output_type
	26, // [26:35] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_eureka_v1_quiz_modifier_proto_init() }
func file_eureka_v1_quiz_modifier_proto_init() {
	if File_eureka_v1_quiz_modifier_proto != nil {
		return
	}
	file_eureka_v1_course_modifier_proto_init()
	file_eureka_v1_flashcard_reader_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_eureka_v1_quiz_modifier_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuizCore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_v1_quiz_modifier_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertQuizRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_v1_quiz_modifier_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertQuizResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_v1_quiz_modifier_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuizLO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_v1_quiz_modifier_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertSingleQuizRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_v1_quiz_modifier_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertSingleQuizResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_v1_quiz_modifier_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQuizTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_v1_quiz_modifier_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQuizTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_v1_quiz_modifier_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteQuizRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_v1_quiz_modifier_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteQuizResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_v1_quiz_modifier_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFlashCardStudyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_v1_quiz_modifier_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFlashCardStudyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_v1_quiz_modifier_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRetryQuizTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_v1_quiz_modifier_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRetryQuizTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_v1_quiz_modifier_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckQuizCorrectnessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_v1_quiz_modifier_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckQuizCorrectnessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_v1_quiz_modifier_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveQuizFromLORequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_v1_quiz_modifier_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveQuizFromLOResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_v1_quiz_modifier_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDisplayOrderOfQuizSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_v1_quiz_modifier_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDisplayOrderOfQuizSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eureka_v1_quiz_modifier_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDisplayOrderOfQuizSetRequest_QuizExternalIDPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_eureka_v1_quiz_modifier_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*CheckQuizCorrectnessResponse_OrderingResult)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eureka_v1_quiz_modifier_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_eureka_v1_quiz_modifier_proto_goTypes,
		DependencyIndexes: file_eureka_v1_quiz_modifier_proto_depIdxs,
		MessageInfos:      file_eureka_v1_quiz_modifier_proto_msgTypes,
	}.Build()
	File_eureka_v1_quiz_modifier_proto = out.File
	file_eureka_v1_quiz_modifier_proto_rawDesc = nil
	file_eureka_v1_quiz_modifier_proto_goTypes = nil
	file_eureka_v1_quiz_modifier_proto_depIdxs = nil
}
