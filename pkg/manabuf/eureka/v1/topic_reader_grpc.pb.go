// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package epb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TopicReaderServiceClient is the client API for TopicReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TopicReaderServiceClient interface {
	ListToDoItemsByTopics(ctx context.Context, in *ListToDoItemsByTopicsRequest, opts ...grpc.CallOption) (*ListToDoItemsByTopicsResponse, error)
	RetrieveTopics(ctx context.Context, in *RetrieveTopicsRequest, opts ...grpc.CallOption) (*RetrieveTopicsResponse, error)
}

type topicReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTopicReaderServiceClient(cc grpc.ClientConnInterface) TopicReaderServiceClient {
	return &topicReaderServiceClient{cc}
}

func (c *topicReaderServiceClient) ListToDoItemsByTopics(ctx context.Context, in *ListToDoItemsByTopicsRequest, opts ...grpc.CallOption) (*ListToDoItemsByTopicsResponse, error) {
	out := new(ListToDoItemsByTopicsResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.TopicReaderService/ListToDoItemsByTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicReaderServiceClient) RetrieveTopics(ctx context.Context, in *RetrieveTopicsRequest, opts ...grpc.CallOption) (*RetrieveTopicsResponse, error) {
	out := new(RetrieveTopicsResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.TopicReaderService/RetrieveTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopicReaderServiceServer is the server API for TopicReaderService service.
// All implementations should embed UnimplementedTopicReaderServiceServer
// for forward compatibility
type TopicReaderServiceServer interface {
	ListToDoItemsByTopics(context.Context, *ListToDoItemsByTopicsRequest) (*ListToDoItemsByTopicsResponse, error)
	RetrieveTopics(context.Context, *RetrieveTopicsRequest) (*RetrieveTopicsResponse, error)
}

// UnimplementedTopicReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTopicReaderServiceServer struct {
}

func (UnimplementedTopicReaderServiceServer) ListToDoItemsByTopics(context.Context, *ListToDoItemsByTopicsRequest) (*ListToDoItemsByTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListToDoItemsByTopics not implemented")
}
func (UnimplementedTopicReaderServiceServer) RetrieveTopics(context.Context, *RetrieveTopicsRequest) (*RetrieveTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveTopics not implemented")
}

// UnsafeTopicReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TopicReaderServiceServer will
// result in compilation errors.
type UnsafeTopicReaderServiceServer interface {
	mustEmbedUnimplementedTopicReaderServiceServer()
}

func RegisterTopicReaderServiceServer(s grpc.ServiceRegistrar, srv TopicReaderServiceServer) {
	s.RegisterService(&_TopicReaderService_serviceDesc, srv)
}

func _TopicReaderService_ListToDoItemsByTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListToDoItemsByTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicReaderServiceServer).ListToDoItemsByTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.TopicReaderService/ListToDoItemsByTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicReaderServiceServer).ListToDoItemsByTopics(ctx, req.(*ListToDoItemsByTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopicReaderService_RetrieveTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicReaderServiceServer).RetrieveTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.TopicReaderService/RetrieveTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicReaderServiceServer).RetrieveTopics(ctx, req.(*RetrieveTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TopicReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eureka.v1.TopicReaderService",
	HandlerType: (*TopicReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListToDoItemsByTopics",
			Handler:    _TopicReaderService_ListToDoItemsByTopics_Handler,
		},
		{
			MethodName: "RetrieveTopics",
			Handler:    _TopicReaderService_RetrieveTopics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eureka/v1/topic_reader.proto",
}
