// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package epb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// StudentAssignmentWriteServiceClient is the client API for StudentAssignmentWriteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentAssignmentWriteServiceClient interface {
	SubmitAssignment(ctx context.Context, in *SubmitAssignmentRequest, opts ...grpc.CallOption) (*SubmitAssignmentResponse, error)
	GradeStudentSubmission(ctx context.Context, in *GradeStudentSubmissionRequest, opts ...grpc.CallOption) (*GradeStudentSubmissionResponse, error)
	UpdateStudentSubmissionsStatus(ctx context.Context, in *UpdateStudentSubmissionsStatusRequest, opts ...grpc.CallOption) (*UpdateStudentSubmissionsStatusResponse, error)
}

type studentAssignmentWriteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentAssignmentWriteServiceClient(cc grpc.ClientConnInterface) StudentAssignmentWriteServiceClient {
	return &studentAssignmentWriteServiceClient{cc}
}

func (c *studentAssignmentWriteServiceClient) SubmitAssignment(ctx context.Context, in *SubmitAssignmentRequest, opts ...grpc.CallOption) (*SubmitAssignmentResponse, error) {
	out := new(SubmitAssignmentResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.StudentAssignmentWriteService/SubmitAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentAssignmentWriteServiceClient) GradeStudentSubmission(ctx context.Context, in *GradeStudentSubmissionRequest, opts ...grpc.CallOption) (*GradeStudentSubmissionResponse, error) {
	out := new(GradeStudentSubmissionResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.StudentAssignmentWriteService/GradeStudentSubmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentAssignmentWriteServiceClient) UpdateStudentSubmissionsStatus(ctx context.Context, in *UpdateStudentSubmissionsStatusRequest, opts ...grpc.CallOption) (*UpdateStudentSubmissionsStatusResponse, error) {
	out := new(UpdateStudentSubmissionsStatusResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.StudentAssignmentWriteService/UpdateStudentSubmissionsStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentAssignmentWriteServiceServer is the server API for StudentAssignmentWriteService service.
// All implementations should embed UnimplementedStudentAssignmentWriteServiceServer
// for forward compatibility
type StudentAssignmentWriteServiceServer interface {
	SubmitAssignment(context.Context, *SubmitAssignmentRequest) (*SubmitAssignmentResponse, error)
	GradeStudentSubmission(context.Context, *GradeStudentSubmissionRequest) (*GradeStudentSubmissionResponse, error)
	UpdateStudentSubmissionsStatus(context.Context, *UpdateStudentSubmissionsStatusRequest) (*UpdateStudentSubmissionsStatusResponse, error)
}

// UnimplementedStudentAssignmentWriteServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStudentAssignmentWriteServiceServer struct {
}

func (UnimplementedStudentAssignmentWriteServiceServer) SubmitAssignment(context.Context, *SubmitAssignmentRequest) (*SubmitAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitAssignment not implemented")
}
func (UnimplementedStudentAssignmentWriteServiceServer) GradeStudentSubmission(context.Context, *GradeStudentSubmissionRequest) (*GradeStudentSubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GradeStudentSubmission not implemented")
}
func (UnimplementedStudentAssignmentWriteServiceServer) UpdateStudentSubmissionsStatus(context.Context, *UpdateStudentSubmissionsStatusRequest) (*UpdateStudentSubmissionsStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudentSubmissionsStatus not implemented")
}

// UnsafeStudentAssignmentWriteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentAssignmentWriteServiceServer will
// result in compilation errors.
type UnsafeStudentAssignmentWriteServiceServer interface {
	mustEmbedUnimplementedStudentAssignmentWriteServiceServer()
}

func RegisterStudentAssignmentWriteServiceServer(s grpc.ServiceRegistrar, srv StudentAssignmentWriteServiceServer) {
	s.RegisterService(&_StudentAssignmentWriteService_serviceDesc, srv)
}

func _StudentAssignmentWriteService_SubmitAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentAssignmentWriteServiceServer).SubmitAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.StudentAssignmentWriteService/SubmitAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentAssignmentWriteServiceServer).SubmitAssignment(ctx, req.(*SubmitAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentAssignmentWriteService_GradeStudentSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GradeStudentSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentAssignmentWriteServiceServer).GradeStudentSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.StudentAssignmentWriteService/GradeStudentSubmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentAssignmentWriteServiceServer).GradeStudentSubmission(ctx, req.(*GradeStudentSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentAssignmentWriteService_UpdateStudentSubmissionsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudentSubmissionsStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentAssignmentWriteServiceServer).UpdateStudentSubmissionsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.StudentAssignmentWriteService/UpdateStudentSubmissionsStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentAssignmentWriteServiceServer).UpdateStudentSubmissionsStatus(ctx, req.(*UpdateStudentSubmissionsStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StudentAssignmentWriteService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eureka.v1.StudentAssignmentWriteService",
	HandlerType: (*StudentAssignmentWriteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitAssignment",
			Handler:    _StudentAssignmentWriteService_SubmitAssignment_Handler,
		},
		{
			MethodName: "GradeStudentSubmission",
			Handler:    _StudentAssignmentWriteService_GradeStudentSubmission_Handler,
		},
		{
			MethodName: "UpdateStudentSubmissionsStatus",
			Handler:    _StudentAssignmentWriteService_UpdateStudentSubmissionsStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eureka/v1/student_assignment_write.proto",
}
