// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package epb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// StudyPlanItemReaderServiceClient is the client API for StudyPlanItemReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudyPlanItemReaderServiceClient interface {
	RetrieveMappingLmIDToStudyPlanItemID(ctx context.Context, in *RetrieveMappingLmIDToStudyPlanItemIDRequest, opts ...grpc.CallOption) (*RetrieveMappingLmIDToStudyPlanItemIDResponse, error)
}

type studyPlanItemReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudyPlanItemReaderServiceClient(cc grpc.ClientConnInterface) StudyPlanItemReaderServiceClient {
	return &studyPlanItemReaderServiceClient{cc}
}

func (c *studyPlanItemReaderServiceClient) RetrieveMappingLmIDToStudyPlanItemID(ctx context.Context, in *RetrieveMappingLmIDToStudyPlanItemIDRequest, opts ...grpc.CallOption) (*RetrieveMappingLmIDToStudyPlanItemIDResponse, error) {
	out := new(RetrieveMappingLmIDToStudyPlanItemIDResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.StudyPlanItemReaderService/RetrieveMappingLmIDToStudyPlanItemID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudyPlanItemReaderServiceServer is the server API for StudyPlanItemReaderService service.
// All implementations should embed UnimplementedStudyPlanItemReaderServiceServer
// for forward compatibility
type StudyPlanItemReaderServiceServer interface {
	RetrieveMappingLmIDToStudyPlanItemID(context.Context, *RetrieveMappingLmIDToStudyPlanItemIDRequest) (*RetrieveMappingLmIDToStudyPlanItemIDResponse, error)
}

// UnimplementedStudyPlanItemReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStudyPlanItemReaderServiceServer struct {
}

func (UnimplementedStudyPlanItemReaderServiceServer) RetrieveMappingLmIDToStudyPlanItemID(context.Context, *RetrieveMappingLmIDToStudyPlanItemIDRequest) (*RetrieveMappingLmIDToStudyPlanItemIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveMappingLmIDToStudyPlanItemID not implemented")
}

// UnsafeStudyPlanItemReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudyPlanItemReaderServiceServer will
// result in compilation errors.
type UnsafeStudyPlanItemReaderServiceServer interface {
	mustEmbedUnimplementedStudyPlanItemReaderServiceServer()
}

func RegisterStudyPlanItemReaderServiceServer(s grpc.ServiceRegistrar, srv StudyPlanItemReaderServiceServer) {
	s.RegisterService(&_StudyPlanItemReaderService_serviceDesc, srv)
}

func _StudyPlanItemReaderService_RetrieveMappingLmIDToStudyPlanItemID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveMappingLmIDToStudyPlanItemIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanItemReaderServiceServer).RetrieveMappingLmIDToStudyPlanItemID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.StudyPlanItemReaderService/RetrieveMappingLmIDToStudyPlanItemID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanItemReaderServiceServer).RetrieveMappingLmIDToStudyPlanItemID(ctx, req.(*RetrieveMappingLmIDToStudyPlanItemIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StudyPlanItemReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eureka.v1.StudyPlanItemReaderService",
	HandlerType: (*StudyPlanItemReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveMappingLmIDToStudyPlanItemID",
			Handler:    _StudyPlanItemReaderService_RetrieveMappingLmIDToStudyPlanItemID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eureka/v1/study_plan_item_reader.proto",
}
