// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package epb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// StudyPlanModifierServiceClient is the client API for StudyPlanModifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudyPlanModifierServiceClient interface {
	DeleteStudyPlanBelongsToACourse(ctx context.Context, in *DeleteStudyPlanBelongsToACourseRequest, opts ...grpc.CallOption) (*DeleteStudyPlanBelongsToACourseResponse, error)
	UpsertStudyPlanItemV2(ctx context.Context, in *UpsertStudyPlanItemV2Request, opts ...grpc.CallOption) (*UpsertStudyPlanItemV2Response, error)
	UpdateStudyPlanItemsSchoolDate(ctx context.Context, in *UpdateStudyPlanItemsSchoolDateRequest, opts ...grpc.CallOption) (*UpdateStudyPlanItemsSchoolDateResponse, error)
	UpdateStudyPlanItemsStatus(ctx context.Context, in *UpdateStudyPlanItemsStatusRequest, opts ...grpc.CallOption) (*UpdateStudyPlanItemsStatusResponse, error)
	UpsertStudyPlan(ctx context.Context, in *UpsertStudyPlanRequest, opts ...grpc.CallOption) (*UpsertStudyPlanResponse, error)
}

type studyPlanModifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudyPlanModifierServiceClient(cc grpc.ClientConnInterface) StudyPlanModifierServiceClient {
	return &studyPlanModifierServiceClient{cc}
}

func (c *studyPlanModifierServiceClient) DeleteStudyPlanBelongsToACourse(ctx context.Context, in *DeleteStudyPlanBelongsToACourseRequest, opts ...grpc.CallOption) (*DeleteStudyPlanBelongsToACourseResponse, error) {
	out := new(DeleteStudyPlanBelongsToACourseResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.StudyPlanModifierService/DeleteStudyPlanBelongsToACourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyPlanModifierServiceClient) UpsertStudyPlanItemV2(ctx context.Context, in *UpsertStudyPlanItemV2Request, opts ...grpc.CallOption) (*UpsertStudyPlanItemV2Response, error) {
	out := new(UpsertStudyPlanItemV2Response)
	err := c.cc.Invoke(ctx, "/eureka.v1.StudyPlanModifierService/UpsertStudyPlanItemV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyPlanModifierServiceClient) UpdateStudyPlanItemsSchoolDate(ctx context.Context, in *UpdateStudyPlanItemsSchoolDateRequest, opts ...grpc.CallOption) (*UpdateStudyPlanItemsSchoolDateResponse, error) {
	out := new(UpdateStudyPlanItemsSchoolDateResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.StudyPlanModifierService/UpdateStudyPlanItemsSchoolDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyPlanModifierServiceClient) UpdateStudyPlanItemsStatus(ctx context.Context, in *UpdateStudyPlanItemsStatusRequest, opts ...grpc.CallOption) (*UpdateStudyPlanItemsStatusResponse, error) {
	out := new(UpdateStudyPlanItemsStatusResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.StudyPlanModifierService/UpdateStudyPlanItemsStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyPlanModifierServiceClient) UpsertStudyPlan(ctx context.Context, in *UpsertStudyPlanRequest, opts ...grpc.CallOption) (*UpsertStudyPlanResponse, error) {
	out := new(UpsertStudyPlanResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.StudyPlanModifierService/UpsertStudyPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudyPlanModifierServiceServer is the server API for StudyPlanModifierService service.
// All implementations should embed UnimplementedStudyPlanModifierServiceServer
// for forward compatibility
type StudyPlanModifierServiceServer interface {
	DeleteStudyPlanBelongsToACourse(context.Context, *DeleteStudyPlanBelongsToACourseRequest) (*DeleteStudyPlanBelongsToACourseResponse, error)
	UpsertStudyPlanItemV2(context.Context, *UpsertStudyPlanItemV2Request) (*UpsertStudyPlanItemV2Response, error)
	UpdateStudyPlanItemsSchoolDate(context.Context, *UpdateStudyPlanItemsSchoolDateRequest) (*UpdateStudyPlanItemsSchoolDateResponse, error)
	UpdateStudyPlanItemsStatus(context.Context, *UpdateStudyPlanItemsStatusRequest) (*UpdateStudyPlanItemsStatusResponse, error)
	UpsertStudyPlan(context.Context, *UpsertStudyPlanRequest) (*UpsertStudyPlanResponse, error)
}

// UnimplementedStudyPlanModifierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStudyPlanModifierServiceServer struct {
}

func (UnimplementedStudyPlanModifierServiceServer) DeleteStudyPlanBelongsToACourse(context.Context, *DeleteStudyPlanBelongsToACourseRequest) (*DeleteStudyPlanBelongsToACourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudyPlanBelongsToACourse not implemented")
}
func (UnimplementedStudyPlanModifierServiceServer) UpsertStudyPlanItemV2(context.Context, *UpsertStudyPlanItemV2Request) (*UpsertStudyPlanItemV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertStudyPlanItemV2 not implemented")
}
func (UnimplementedStudyPlanModifierServiceServer) UpdateStudyPlanItemsSchoolDate(context.Context, *UpdateStudyPlanItemsSchoolDateRequest) (*UpdateStudyPlanItemsSchoolDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudyPlanItemsSchoolDate not implemented")
}
func (UnimplementedStudyPlanModifierServiceServer) UpdateStudyPlanItemsStatus(context.Context, *UpdateStudyPlanItemsStatusRequest) (*UpdateStudyPlanItemsStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudyPlanItemsStatus not implemented")
}
func (UnimplementedStudyPlanModifierServiceServer) UpsertStudyPlan(context.Context, *UpsertStudyPlanRequest) (*UpsertStudyPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertStudyPlan not implemented")
}

// UnsafeStudyPlanModifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudyPlanModifierServiceServer will
// result in compilation errors.
type UnsafeStudyPlanModifierServiceServer interface {
	mustEmbedUnimplementedStudyPlanModifierServiceServer()
}

func RegisterStudyPlanModifierServiceServer(s grpc.ServiceRegistrar, srv StudyPlanModifierServiceServer) {
	s.RegisterService(&_StudyPlanModifierService_serviceDesc, srv)
}

func _StudyPlanModifierService_DeleteStudyPlanBelongsToACourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStudyPlanBelongsToACourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanModifierServiceServer).DeleteStudyPlanBelongsToACourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.StudyPlanModifierService/DeleteStudyPlanBelongsToACourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanModifierServiceServer).DeleteStudyPlanBelongsToACourse(ctx, req.(*DeleteStudyPlanBelongsToACourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyPlanModifierService_UpsertStudyPlanItemV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertStudyPlanItemV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanModifierServiceServer).UpsertStudyPlanItemV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.StudyPlanModifierService/UpsertStudyPlanItemV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanModifierServiceServer).UpsertStudyPlanItemV2(ctx, req.(*UpsertStudyPlanItemV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyPlanModifierService_UpdateStudyPlanItemsSchoolDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudyPlanItemsSchoolDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanModifierServiceServer).UpdateStudyPlanItemsSchoolDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.StudyPlanModifierService/UpdateStudyPlanItemsSchoolDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanModifierServiceServer).UpdateStudyPlanItemsSchoolDate(ctx, req.(*UpdateStudyPlanItemsSchoolDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyPlanModifierService_UpdateStudyPlanItemsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudyPlanItemsStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanModifierServiceServer).UpdateStudyPlanItemsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.StudyPlanModifierService/UpdateStudyPlanItemsStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanModifierServiceServer).UpdateStudyPlanItemsStatus(ctx, req.(*UpdateStudyPlanItemsStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyPlanModifierService_UpsertStudyPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertStudyPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanModifierServiceServer).UpsertStudyPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.StudyPlanModifierService/UpsertStudyPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanModifierServiceServer).UpsertStudyPlan(ctx, req.(*UpsertStudyPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StudyPlanModifierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eureka.v1.StudyPlanModifierService",
	HandlerType: (*StudyPlanModifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteStudyPlanBelongsToACourse",
			Handler:    _StudyPlanModifierService_DeleteStudyPlanBelongsToACourse_Handler,
		},
		{
			MethodName: "UpsertStudyPlanItemV2",
			Handler:    _StudyPlanModifierService_UpsertStudyPlanItemV2_Handler,
		},
		{
			MethodName: "UpdateStudyPlanItemsSchoolDate",
			Handler:    _StudyPlanModifierService_UpdateStudyPlanItemsSchoolDate_Handler,
		},
		{
			MethodName: "UpdateStudyPlanItemsStatus",
			Handler:    _StudyPlanModifierService_UpdateStudyPlanItemsStatus_Handler,
		},
		{
			MethodName: "UpsertStudyPlan",
			Handler:    _StudyPlanModifierService_UpsertStudyPlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eureka/v1/study_plan_modifier.proto",
}
