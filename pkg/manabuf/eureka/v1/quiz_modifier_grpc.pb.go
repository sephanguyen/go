// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package epb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// QuizModifierServiceClient is the client API for QuizModifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuizModifierServiceClient interface {
	// Deprecated: Do not use.
	UpsertQuiz(ctx context.Context, in *UpsertQuizRequest, opts ...grpc.CallOption) (*UpsertQuizResponse, error)
	UpsertSingleQuiz(ctx context.Context, in *UpsertSingleQuizRequest, opts ...grpc.CallOption) (*UpsertSingleQuizResponse, error)
	CreateQuizTest(ctx context.Context, in *CreateQuizTestRequest, opts ...grpc.CallOption) (*CreateQuizTestResponse, error)
	DeleteQuiz(ctx context.Context, in *DeleteQuizRequest, opts ...grpc.CallOption) (*DeleteQuizResponse, error)
	CreateFlashCardStudy(ctx context.Context, in *CreateFlashCardStudyRequest, opts ...grpc.CallOption) (*CreateFlashCardStudyResponse, error)
	CreateRetryQuizTest(ctx context.Context, in *CreateRetryQuizTestRequest, opts ...grpc.CallOption) (*CreateRetryQuizTestResponse, error)
	CheckQuizCorrectness(ctx context.Context, in *CheckQuizCorrectnessRequest, opts ...grpc.CallOption) (*CheckQuizCorrectnessResponse, error)
	RemoveQuizFromLO(ctx context.Context, in *RemoveQuizFromLORequest, opts ...grpc.CallOption) (*RemoveQuizFromLOResponse, error)
	UpdateDisplayOrderOfQuizSet(ctx context.Context, in *UpdateDisplayOrderOfQuizSetRequest, opts ...grpc.CallOption) (*UpdateDisplayOrderOfQuizSetResponse, error)
}

type quizModifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuizModifierServiceClient(cc grpc.ClientConnInterface) QuizModifierServiceClient {
	return &quizModifierServiceClient{cc}
}

// Deprecated: Do not use.
func (c *quizModifierServiceClient) UpsertQuiz(ctx context.Context, in *UpsertQuizRequest, opts ...grpc.CallOption) (*UpsertQuizResponse, error) {
	out := new(UpsertQuizResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.QuizModifierService/UpsertQuiz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizModifierServiceClient) UpsertSingleQuiz(ctx context.Context, in *UpsertSingleQuizRequest, opts ...grpc.CallOption) (*UpsertSingleQuizResponse, error) {
	out := new(UpsertSingleQuizResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.QuizModifierService/UpsertSingleQuiz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizModifierServiceClient) CreateQuizTest(ctx context.Context, in *CreateQuizTestRequest, opts ...grpc.CallOption) (*CreateQuizTestResponse, error) {
	out := new(CreateQuizTestResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.QuizModifierService/CreateQuizTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizModifierServiceClient) DeleteQuiz(ctx context.Context, in *DeleteQuizRequest, opts ...grpc.CallOption) (*DeleteQuizResponse, error) {
	out := new(DeleteQuizResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.QuizModifierService/DeleteQuiz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizModifierServiceClient) CreateFlashCardStudy(ctx context.Context, in *CreateFlashCardStudyRequest, opts ...grpc.CallOption) (*CreateFlashCardStudyResponse, error) {
	out := new(CreateFlashCardStudyResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.QuizModifierService/CreateFlashCardStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizModifierServiceClient) CreateRetryQuizTest(ctx context.Context, in *CreateRetryQuizTestRequest, opts ...grpc.CallOption) (*CreateRetryQuizTestResponse, error) {
	out := new(CreateRetryQuizTestResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.QuizModifierService/CreateRetryQuizTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizModifierServiceClient) CheckQuizCorrectness(ctx context.Context, in *CheckQuizCorrectnessRequest, opts ...grpc.CallOption) (*CheckQuizCorrectnessResponse, error) {
	out := new(CheckQuizCorrectnessResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.QuizModifierService/CheckQuizCorrectness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizModifierServiceClient) RemoveQuizFromLO(ctx context.Context, in *RemoveQuizFromLORequest, opts ...grpc.CallOption) (*RemoveQuizFromLOResponse, error) {
	out := new(RemoveQuizFromLOResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.QuizModifierService/RemoveQuizFromLO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizModifierServiceClient) UpdateDisplayOrderOfQuizSet(ctx context.Context, in *UpdateDisplayOrderOfQuizSetRequest, opts ...grpc.CallOption) (*UpdateDisplayOrderOfQuizSetResponse, error) {
	out := new(UpdateDisplayOrderOfQuizSetResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.QuizModifierService/UpdateDisplayOrderOfQuizSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuizModifierServiceServer is the server API for QuizModifierService service.
// All implementations should embed UnimplementedQuizModifierServiceServer
// for forward compatibility
type QuizModifierServiceServer interface {
	// Deprecated: Do not use.
	UpsertQuiz(context.Context, *UpsertQuizRequest) (*UpsertQuizResponse, error)
	UpsertSingleQuiz(context.Context, *UpsertSingleQuizRequest) (*UpsertSingleQuizResponse, error)
	CreateQuizTest(context.Context, *CreateQuizTestRequest) (*CreateQuizTestResponse, error)
	DeleteQuiz(context.Context, *DeleteQuizRequest) (*DeleteQuizResponse, error)
	CreateFlashCardStudy(context.Context, *CreateFlashCardStudyRequest) (*CreateFlashCardStudyResponse, error)
	CreateRetryQuizTest(context.Context, *CreateRetryQuizTestRequest) (*CreateRetryQuizTestResponse, error)
	CheckQuizCorrectness(context.Context, *CheckQuizCorrectnessRequest) (*CheckQuizCorrectnessResponse, error)
	RemoveQuizFromLO(context.Context, *RemoveQuizFromLORequest) (*RemoveQuizFromLOResponse, error)
	UpdateDisplayOrderOfQuizSet(context.Context, *UpdateDisplayOrderOfQuizSetRequest) (*UpdateDisplayOrderOfQuizSetResponse, error)
}

// UnimplementedQuizModifierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedQuizModifierServiceServer struct {
}

func (UnimplementedQuizModifierServiceServer) UpsertQuiz(context.Context, *UpsertQuizRequest) (*UpsertQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertQuiz not implemented")
}
func (UnimplementedQuizModifierServiceServer) UpsertSingleQuiz(context.Context, *UpsertSingleQuizRequest) (*UpsertSingleQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertSingleQuiz not implemented")
}
func (UnimplementedQuizModifierServiceServer) CreateQuizTest(context.Context, *CreateQuizTestRequest) (*CreateQuizTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuizTest not implemented")
}
func (UnimplementedQuizModifierServiceServer) DeleteQuiz(context.Context, *DeleteQuizRequest) (*DeleteQuizResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuiz not implemented")
}
func (UnimplementedQuizModifierServiceServer) CreateFlashCardStudy(context.Context, *CreateFlashCardStudyRequest) (*CreateFlashCardStudyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlashCardStudy not implemented")
}
func (UnimplementedQuizModifierServiceServer) CreateRetryQuizTest(context.Context, *CreateRetryQuizTestRequest) (*CreateRetryQuizTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRetryQuizTest not implemented")
}
func (UnimplementedQuizModifierServiceServer) CheckQuizCorrectness(context.Context, *CheckQuizCorrectnessRequest) (*CheckQuizCorrectnessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckQuizCorrectness not implemented")
}
func (UnimplementedQuizModifierServiceServer) RemoveQuizFromLO(context.Context, *RemoveQuizFromLORequest) (*RemoveQuizFromLOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveQuizFromLO not implemented")
}
func (UnimplementedQuizModifierServiceServer) UpdateDisplayOrderOfQuizSet(context.Context, *UpdateDisplayOrderOfQuizSetRequest) (*UpdateDisplayOrderOfQuizSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDisplayOrderOfQuizSet not implemented")
}

// UnsafeQuizModifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuizModifierServiceServer will
// result in compilation errors.
type UnsafeQuizModifierServiceServer interface {
	mustEmbedUnimplementedQuizModifierServiceServer()
}

func RegisterQuizModifierServiceServer(s grpc.ServiceRegistrar, srv QuizModifierServiceServer) {
	s.RegisterService(&_QuizModifierService_serviceDesc, srv)
}

func _QuizModifierService_UpsertQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizModifierServiceServer).UpsertQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.QuizModifierService/UpsertQuiz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizModifierServiceServer).UpsertQuiz(ctx, req.(*UpsertQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizModifierService_UpsertSingleQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertSingleQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizModifierServiceServer).UpsertSingleQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.QuizModifierService/UpsertSingleQuiz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizModifierServiceServer).UpsertSingleQuiz(ctx, req.(*UpsertSingleQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizModifierService_CreateQuizTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuizTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizModifierServiceServer).CreateQuizTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.QuizModifierService/CreateQuizTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizModifierServiceServer).CreateQuizTest(ctx, req.(*CreateQuizTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizModifierService_DeleteQuiz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuizRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizModifierServiceServer).DeleteQuiz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.QuizModifierService/DeleteQuiz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizModifierServiceServer).DeleteQuiz(ctx, req.(*DeleteQuizRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizModifierService_CreateFlashCardStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlashCardStudyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizModifierServiceServer).CreateFlashCardStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.QuizModifierService/CreateFlashCardStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizModifierServiceServer).CreateFlashCardStudy(ctx, req.(*CreateFlashCardStudyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizModifierService_CreateRetryQuizTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRetryQuizTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizModifierServiceServer).CreateRetryQuizTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.QuizModifierService/CreateRetryQuizTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizModifierServiceServer).CreateRetryQuizTest(ctx, req.(*CreateRetryQuizTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizModifierService_CheckQuizCorrectness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckQuizCorrectnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizModifierServiceServer).CheckQuizCorrectness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.QuizModifierService/CheckQuizCorrectness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizModifierServiceServer).CheckQuizCorrectness(ctx, req.(*CheckQuizCorrectnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizModifierService_RemoveQuizFromLO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveQuizFromLORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizModifierServiceServer).RemoveQuizFromLO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.QuizModifierService/RemoveQuizFromLO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizModifierServiceServer).RemoveQuizFromLO(ctx, req.(*RemoveQuizFromLORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizModifierService_UpdateDisplayOrderOfQuizSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDisplayOrderOfQuizSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizModifierServiceServer).UpdateDisplayOrderOfQuizSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.QuizModifierService/UpdateDisplayOrderOfQuizSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizModifierServiceServer).UpdateDisplayOrderOfQuizSet(ctx, req.(*UpdateDisplayOrderOfQuizSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QuizModifierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eureka.v1.QuizModifierService",
	HandlerType: (*QuizModifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertQuiz",
			Handler:    _QuizModifierService_UpsertQuiz_Handler,
		},
		{
			MethodName: "UpsertSingleQuiz",
			Handler:    _QuizModifierService_UpsertSingleQuiz_Handler,
		},
		{
			MethodName: "CreateQuizTest",
			Handler:    _QuizModifierService_CreateQuizTest_Handler,
		},
		{
			MethodName: "DeleteQuiz",
			Handler:    _QuizModifierService_DeleteQuiz_Handler,
		},
		{
			MethodName: "CreateFlashCardStudy",
			Handler:    _QuizModifierService_CreateFlashCardStudy_Handler,
		},
		{
			MethodName: "CreateRetryQuizTest",
			Handler:    _QuizModifierService_CreateRetryQuizTest_Handler,
		},
		{
			MethodName: "CheckQuizCorrectness",
			Handler:    _QuizModifierService_CheckQuizCorrectness_Handler,
		},
		{
			MethodName: "RemoveQuizFromLO",
			Handler:    _QuizModifierService_RemoveQuizFromLO_Handler,
		},
		{
			MethodName: "UpdateDisplayOrderOfQuizSet",
			Handler:    _QuizModifierService_UpdateDisplayOrderOfQuizSet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eureka/v1/quiz_modifier.proto",
}
