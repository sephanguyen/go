// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package epb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TopicModifierServiceClient is the client API for TopicModifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TopicModifierServiceClient interface {
	Upsert(ctx context.Context, in *UpsertTopicsRequest, opts ...grpc.CallOption) (*UpsertTopicsResponse, error)
	Publish(ctx context.Context, in *PublishTopicsRequest, opts ...grpc.CallOption) (*PublishTopicsResponse, error)
	DeleteTopics(ctx context.Context, in *DeleteTopicsRequest, opts ...grpc.CallOption) (*DeleteTopicsResponse, error)
	AssignTopicItems(ctx context.Context, in *AssignTopicItemsRequest, opts ...grpc.CallOption) (*AssignTopicItemsResponse, error)
}

type topicModifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTopicModifierServiceClient(cc grpc.ClientConnInterface) TopicModifierServiceClient {
	return &topicModifierServiceClient{cc}
}

func (c *topicModifierServiceClient) Upsert(ctx context.Context, in *UpsertTopicsRequest, opts ...grpc.CallOption) (*UpsertTopicsResponse, error) {
	out := new(UpsertTopicsResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.TopicModifierService/Upsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicModifierServiceClient) Publish(ctx context.Context, in *PublishTopicsRequest, opts ...grpc.CallOption) (*PublishTopicsResponse, error) {
	out := new(PublishTopicsResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.TopicModifierService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicModifierServiceClient) DeleteTopics(ctx context.Context, in *DeleteTopicsRequest, opts ...grpc.CallOption) (*DeleteTopicsResponse, error) {
	out := new(DeleteTopicsResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.TopicModifierService/DeleteTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topicModifierServiceClient) AssignTopicItems(ctx context.Context, in *AssignTopicItemsRequest, opts ...grpc.CallOption) (*AssignTopicItemsResponse, error) {
	out := new(AssignTopicItemsResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.TopicModifierService/AssignTopicItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopicModifierServiceServer is the server API for TopicModifierService service.
// All implementations should embed UnimplementedTopicModifierServiceServer
// for forward compatibility
type TopicModifierServiceServer interface {
	Upsert(context.Context, *UpsertTopicsRequest) (*UpsertTopicsResponse, error)
	Publish(context.Context, *PublishTopicsRequest) (*PublishTopicsResponse, error)
	DeleteTopics(context.Context, *DeleteTopicsRequest) (*DeleteTopicsResponse, error)
	AssignTopicItems(context.Context, *AssignTopicItemsRequest) (*AssignTopicItemsResponse, error)
}

// UnimplementedTopicModifierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTopicModifierServiceServer struct {
}

func (UnimplementedTopicModifierServiceServer) Upsert(context.Context, *UpsertTopicsRequest) (*UpsertTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (UnimplementedTopicModifierServiceServer) Publish(context.Context, *PublishTopicsRequest) (*PublishTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedTopicModifierServiceServer) DeleteTopics(context.Context, *DeleteTopicsRequest) (*DeleteTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopics not implemented")
}
func (UnimplementedTopicModifierServiceServer) AssignTopicItems(context.Context, *AssignTopicItemsRequest) (*AssignTopicItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignTopicItems not implemented")
}

// UnsafeTopicModifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TopicModifierServiceServer will
// result in compilation errors.
type UnsafeTopicModifierServiceServer interface {
	mustEmbedUnimplementedTopicModifierServiceServer()
}

func RegisterTopicModifierServiceServer(s grpc.ServiceRegistrar, srv TopicModifierServiceServer) {
	s.RegisterService(&_TopicModifierService_serviceDesc, srv)
}

func _TopicModifierService_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicModifierServiceServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.TopicModifierService/Upsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicModifierServiceServer).Upsert(ctx, req.(*UpsertTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopicModifierService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicModifierServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.TopicModifierService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicModifierServiceServer).Publish(ctx, req.(*PublishTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopicModifierService_DeleteTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicModifierServiceServer).DeleteTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.TopicModifierService/DeleteTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicModifierServiceServer).DeleteTopics(ctx, req.(*DeleteTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopicModifierService_AssignTopicItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignTopicItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicModifierServiceServer).AssignTopicItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.TopicModifierService/AssignTopicItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicModifierServiceServer).AssignTopicItems(ctx, req.(*AssignTopicItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TopicModifierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eureka.v1.TopicModifierService",
	HandlerType: (*TopicModifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upsert",
			Handler:    _TopicModifierService_Upsert_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _TopicModifierService_Publish_Handler,
		},
		{
			MethodName: "DeleteTopics",
			Handler:    _TopicModifierService_DeleteTopics_Handler,
		},
		{
			MethodName: "AssignTopicItems",
			Handler:    _TopicModifierService_AssignTopicItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eureka/v1/topic_modifier.proto",
}
