// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package epb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// QuizReaderServiceClient is the client API for QuizReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuizReaderServiceClient interface {
	RetrieveQuizTests(ctx context.Context, in *RetrieveQuizTestsRequest, opts ...grpc.CallOption) (*RetrieveQuizTestsResponse, error)
	RetrieveTotalQuizLOs(ctx context.Context, in *RetrieveTotalQuizLOsRequest, opts ...grpc.CallOption) (*RetrieveTotalQuizLOsResponse, error)
	RetrieveSubmissionHistory(ctx context.Context, in *RetrieveSubmissionHistoryRequest, opts ...grpc.CallOption) (*RetrieveSubmissionHistoryResponse, error)
	ListQuizzesOfLO(ctx context.Context, in *ListQuizzesOfLORequest, opts ...grpc.CallOption) (*ListQuizzesOfLOResponse, error)
}

type quizReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuizReaderServiceClient(cc grpc.ClientConnInterface) QuizReaderServiceClient {
	return &quizReaderServiceClient{cc}
}

func (c *quizReaderServiceClient) RetrieveQuizTests(ctx context.Context, in *RetrieveQuizTestsRequest, opts ...grpc.CallOption) (*RetrieveQuizTestsResponse, error) {
	out := new(RetrieveQuizTestsResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.QuizReaderService/RetrieveQuizTests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizReaderServiceClient) RetrieveTotalQuizLOs(ctx context.Context, in *RetrieveTotalQuizLOsRequest, opts ...grpc.CallOption) (*RetrieveTotalQuizLOsResponse, error) {
	out := new(RetrieveTotalQuizLOsResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.QuizReaderService/RetrieveTotalQuizLOs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizReaderServiceClient) RetrieveSubmissionHistory(ctx context.Context, in *RetrieveSubmissionHistoryRequest, opts ...grpc.CallOption) (*RetrieveSubmissionHistoryResponse, error) {
	out := new(RetrieveSubmissionHistoryResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.QuizReaderService/RetrieveSubmissionHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizReaderServiceClient) ListQuizzesOfLO(ctx context.Context, in *ListQuizzesOfLORequest, opts ...grpc.CallOption) (*ListQuizzesOfLOResponse, error) {
	out := new(ListQuizzesOfLOResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.QuizReaderService/ListQuizzesOfLO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuizReaderServiceServer is the server API for QuizReaderService service.
// All implementations should embed UnimplementedQuizReaderServiceServer
// for forward compatibility
type QuizReaderServiceServer interface {
	RetrieveQuizTests(context.Context, *RetrieveQuizTestsRequest) (*RetrieveQuizTestsResponse, error)
	RetrieveTotalQuizLOs(context.Context, *RetrieveTotalQuizLOsRequest) (*RetrieveTotalQuizLOsResponse, error)
	RetrieveSubmissionHistory(context.Context, *RetrieveSubmissionHistoryRequest) (*RetrieveSubmissionHistoryResponse, error)
	ListQuizzesOfLO(context.Context, *ListQuizzesOfLORequest) (*ListQuizzesOfLOResponse, error)
}

// UnimplementedQuizReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedQuizReaderServiceServer struct {
}

func (UnimplementedQuizReaderServiceServer) RetrieveQuizTests(context.Context, *RetrieveQuizTestsRequest) (*RetrieveQuizTestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveQuizTests not implemented")
}
func (UnimplementedQuizReaderServiceServer) RetrieveTotalQuizLOs(context.Context, *RetrieveTotalQuizLOsRequest) (*RetrieveTotalQuizLOsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveTotalQuizLOs not implemented")
}
func (UnimplementedQuizReaderServiceServer) RetrieveSubmissionHistory(context.Context, *RetrieveSubmissionHistoryRequest) (*RetrieveSubmissionHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveSubmissionHistory not implemented")
}
func (UnimplementedQuizReaderServiceServer) ListQuizzesOfLO(context.Context, *ListQuizzesOfLORequest) (*ListQuizzesOfLOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuizzesOfLO not implemented")
}

// UnsafeQuizReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuizReaderServiceServer will
// result in compilation errors.
type UnsafeQuizReaderServiceServer interface {
	mustEmbedUnimplementedQuizReaderServiceServer()
}

func RegisterQuizReaderServiceServer(s grpc.ServiceRegistrar, srv QuizReaderServiceServer) {
	s.RegisterService(&_QuizReaderService_serviceDesc, srv)
}

func _QuizReaderService_RetrieveQuizTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveQuizTestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizReaderServiceServer).RetrieveQuizTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.QuizReaderService/RetrieveQuizTests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizReaderServiceServer).RetrieveQuizTests(ctx, req.(*RetrieveQuizTestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizReaderService_RetrieveTotalQuizLOs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveTotalQuizLOsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizReaderServiceServer).RetrieveTotalQuizLOs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.QuizReaderService/RetrieveTotalQuizLOs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizReaderServiceServer).RetrieveTotalQuizLOs(ctx, req.(*RetrieveTotalQuizLOsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizReaderService_RetrieveSubmissionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveSubmissionHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizReaderServiceServer).RetrieveSubmissionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.QuizReaderService/RetrieveSubmissionHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizReaderServiceServer).RetrieveSubmissionHistory(ctx, req.(*RetrieveSubmissionHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuizReaderService_ListQuizzesOfLO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuizzesOfLORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizReaderServiceServer).ListQuizzesOfLO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.QuizReaderService/ListQuizzesOfLO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizReaderServiceServer).ListQuizzesOfLO(ctx, req.(*ListQuizzesOfLORequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QuizReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eureka.v1.QuizReaderService",
	HandlerType: (*QuizReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveQuizTests",
			Handler:    _QuizReaderService_RetrieveQuizTests_Handler,
		},
		{
			MethodName: "RetrieveTotalQuizLOs",
			Handler:    _QuizReaderService_RetrieveTotalQuizLOs_Handler,
		},
		{
			MethodName: "RetrieveSubmissionHistory",
			Handler:    _QuizReaderService_RetrieveSubmissionHistory_Handler,
		},
		{
			MethodName: "ListQuizzesOfLO",
			Handler:    _QuizReaderService_ListQuizzesOfLO_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eureka/v1/quiz_reader.proto",
}
