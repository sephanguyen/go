// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package epb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AssessmentSessionServiceClient is the client API for AssessmentSessionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssessmentSessionServiceClient interface {
	GetAssessmentSessionsByCourseAndLM(ctx context.Context, in *GetAssessmentSessionsByCourseAndLMRequest, opts ...grpc.CallOption) (*GetAssessmentSessionsByCourseAndLMResponse, error)
}

type assessmentSessionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssessmentSessionServiceClient(cc grpc.ClientConnInterface) AssessmentSessionServiceClient {
	return &assessmentSessionServiceClient{cc}
}

func (c *assessmentSessionServiceClient) GetAssessmentSessionsByCourseAndLM(ctx context.Context, in *GetAssessmentSessionsByCourseAndLMRequest, opts ...grpc.CallOption) (*GetAssessmentSessionsByCourseAndLMResponse, error) {
	out := new(GetAssessmentSessionsByCourseAndLMResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.AssessmentSessionService/GetAssessmentSessionsByCourseAndLM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssessmentSessionServiceServer is the server API for AssessmentSessionService service.
// All implementations should embed UnimplementedAssessmentSessionServiceServer
// for forward compatibility
type AssessmentSessionServiceServer interface {
	GetAssessmentSessionsByCourseAndLM(context.Context, *GetAssessmentSessionsByCourseAndLMRequest) (*GetAssessmentSessionsByCourseAndLMResponse, error)
}

// UnimplementedAssessmentSessionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAssessmentSessionServiceServer struct {
}

func (UnimplementedAssessmentSessionServiceServer) GetAssessmentSessionsByCourseAndLM(context.Context, *GetAssessmentSessionsByCourseAndLMRequest) (*GetAssessmentSessionsByCourseAndLMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssessmentSessionsByCourseAndLM not implemented")
}

// UnsafeAssessmentSessionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssessmentSessionServiceServer will
// result in compilation errors.
type UnsafeAssessmentSessionServiceServer interface {
	mustEmbedUnimplementedAssessmentSessionServiceServer()
}

func RegisterAssessmentSessionServiceServer(s grpc.ServiceRegistrar, srv AssessmentSessionServiceServer) {
	s.RegisterService(&_AssessmentSessionService_serviceDesc, srv)
}

func _AssessmentSessionService_GetAssessmentSessionsByCourseAndLM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssessmentSessionsByCourseAndLMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentSessionServiceServer).GetAssessmentSessionsByCourseAndLM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.AssessmentSessionService/GetAssessmentSessionsByCourseAndLM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentSessionServiceServer).GetAssessmentSessionsByCourseAndLM(ctx, req.(*GetAssessmentSessionsByCourseAndLMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AssessmentSessionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eureka.v1.AssessmentSessionService",
	HandlerType: (*AssessmentSessionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAssessmentSessionsByCourseAndLM",
			Handler:    _AssessmentSessionService_GetAssessmentSessionsByCourseAndLM_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eureka/v1/assessment_session.proto",
}
