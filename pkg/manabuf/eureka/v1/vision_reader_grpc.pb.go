// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package epb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// VisionReaderServiceClient is the client API for VisionReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VisionReaderServiceClient interface {
	DetectTextFromImage(ctx context.Context, in *DetectTextFromImageRequest, opts ...grpc.CallOption) (*DetectTextFromImageResponse, error)
}

type visionReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVisionReaderServiceClient(cc grpc.ClientConnInterface) VisionReaderServiceClient {
	return &visionReaderServiceClient{cc}
}

func (c *visionReaderServiceClient) DetectTextFromImage(ctx context.Context, in *DetectTextFromImageRequest, opts ...grpc.CallOption) (*DetectTextFromImageResponse, error) {
	out := new(DetectTextFromImageResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.VisionReaderService/DetectTextFromImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VisionReaderServiceServer is the server API for VisionReaderService service.
// All implementations should embed UnimplementedVisionReaderServiceServer
// for forward compatibility
type VisionReaderServiceServer interface {
	DetectTextFromImage(context.Context, *DetectTextFromImageRequest) (*DetectTextFromImageResponse, error)
}

// UnimplementedVisionReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedVisionReaderServiceServer struct {
}

func (UnimplementedVisionReaderServiceServer) DetectTextFromImage(context.Context, *DetectTextFromImageRequest) (*DetectTextFromImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetectTextFromImage not implemented")
}

// UnsafeVisionReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VisionReaderServiceServer will
// result in compilation errors.
type UnsafeVisionReaderServiceServer interface {
	mustEmbedUnimplementedVisionReaderServiceServer()
}

func RegisterVisionReaderServiceServer(s grpc.ServiceRegistrar, srv VisionReaderServiceServer) {
	s.RegisterService(&_VisionReaderService_serviceDesc, srv)
}

func _VisionReaderService_DetectTextFromImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectTextFromImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VisionReaderServiceServer).DetectTextFromImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.VisionReaderService/DetectTextFromImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VisionReaderServiceServer).DetectTextFromImage(ctx, req.(*DetectTextFromImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VisionReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eureka.v1.VisionReaderService",
	HandlerType: (*VisionReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DetectTextFromImage",
			Handler:    _VisionReaderService_DetectTextFromImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eureka/v1/vision_reader.proto",
}
