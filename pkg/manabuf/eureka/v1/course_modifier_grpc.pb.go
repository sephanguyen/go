// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package epb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CourseModifierServiceClient is the client API for CourseModifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourseModifierServiceClient interface {
	DuplicateBook(ctx context.Context, in *DuplicateBookRequest, opts ...grpc.CallOption) (*DuplicateBookResponse, error)
	UpsertLOsAndAssignments(ctx context.Context, in *UpsertLOsAndAssignmentsRequest, opts ...grpc.CallOption) (*UpsertLOsAndAssignmentsResponse, error)
	UpdateDisplayOrdersOfLOsAndAssignments(ctx context.Context, in *UpdateDisplayOrdersOfLOsAndAssignmentsRequest, opts ...grpc.CallOption) (*UpdateDisplayOrdersOfLOsAndAssignmentsResponse, error)
	CompleteStudyPlanItem(ctx context.Context, in *CompleteStudyPlanItemRequest, opts ...grpc.CallOption) (*CompleteStudyPlanItemResponse, error)
	SubmitQuizAnswers(ctx context.Context, in *SubmitQuizAnswersRequest, opts ...grpc.CallOption) (*SubmitQuizAnswersResponse, error)
	FinishFlashCardStudyProgress(ctx context.Context, in *FinishFlashCardStudyProgressRequest, opts ...grpc.CallOption) (*FinishFlashCardStudyProgressResponse, error)
	UpdateFlashCardStudyProgress(ctx context.Context, in *UpdateFlashCardStudyProgressRequest, opts ...grpc.CallOption) (*UpdateFlashCardStudyProgressResponse, error)
	AddBooks(ctx context.Context, in *AddBooksRequest, opts ...grpc.CallOption) (*AddBooksResponse, error)
}

type courseModifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseModifierServiceClient(cc grpc.ClientConnInterface) CourseModifierServiceClient {
	return &courseModifierServiceClient{cc}
}

func (c *courseModifierServiceClient) DuplicateBook(ctx context.Context, in *DuplicateBookRequest, opts ...grpc.CallOption) (*DuplicateBookResponse, error) {
	out := new(DuplicateBookResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.CourseModifierService/DuplicateBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseModifierServiceClient) UpsertLOsAndAssignments(ctx context.Context, in *UpsertLOsAndAssignmentsRequest, opts ...grpc.CallOption) (*UpsertLOsAndAssignmentsResponse, error) {
	out := new(UpsertLOsAndAssignmentsResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.CourseModifierService/UpsertLOsAndAssignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseModifierServiceClient) UpdateDisplayOrdersOfLOsAndAssignments(ctx context.Context, in *UpdateDisplayOrdersOfLOsAndAssignmentsRequest, opts ...grpc.CallOption) (*UpdateDisplayOrdersOfLOsAndAssignmentsResponse, error) {
	out := new(UpdateDisplayOrdersOfLOsAndAssignmentsResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.CourseModifierService/UpdateDisplayOrdersOfLOsAndAssignments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseModifierServiceClient) CompleteStudyPlanItem(ctx context.Context, in *CompleteStudyPlanItemRequest, opts ...grpc.CallOption) (*CompleteStudyPlanItemResponse, error) {
	out := new(CompleteStudyPlanItemResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.CourseModifierService/CompleteStudyPlanItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseModifierServiceClient) SubmitQuizAnswers(ctx context.Context, in *SubmitQuizAnswersRequest, opts ...grpc.CallOption) (*SubmitQuizAnswersResponse, error) {
	out := new(SubmitQuizAnswersResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.CourseModifierService/SubmitQuizAnswers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseModifierServiceClient) FinishFlashCardStudyProgress(ctx context.Context, in *FinishFlashCardStudyProgressRequest, opts ...grpc.CallOption) (*FinishFlashCardStudyProgressResponse, error) {
	out := new(FinishFlashCardStudyProgressResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.CourseModifierService/FinishFlashCardStudyProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseModifierServiceClient) UpdateFlashCardStudyProgress(ctx context.Context, in *UpdateFlashCardStudyProgressRequest, opts ...grpc.CallOption) (*UpdateFlashCardStudyProgressResponse, error) {
	out := new(UpdateFlashCardStudyProgressResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.CourseModifierService/UpdateFlashCardStudyProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseModifierServiceClient) AddBooks(ctx context.Context, in *AddBooksRequest, opts ...grpc.CallOption) (*AddBooksResponse, error) {
	out := new(AddBooksResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.CourseModifierService/AddBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseModifierServiceServer is the server API for CourseModifierService service.
// All implementations should embed UnimplementedCourseModifierServiceServer
// for forward compatibility
type CourseModifierServiceServer interface {
	DuplicateBook(context.Context, *DuplicateBookRequest) (*DuplicateBookResponse, error)
	UpsertLOsAndAssignments(context.Context, *UpsertLOsAndAssignmentsRequest) (*UpsertLOsAndAssignmentsResponse, error)
	UpdateDisplayOrdersOfLOsAndAssignments(context.Context, *UpdateDisplayOrdersOfLOsAndAssignmentsRequest) (*UpdateDisplayOrdersOfLOsAndAssignmentsResponse, error)
	CompleteStudyPlanItem(context.Context, *CompleteStudyPlanItemRequest) (*CompleteStudyPlanItemResponse, error)
	SubmitQuizAnswers(context.Context, *SubmitQuizAnswersRequest) (*SubmitQuizAnswersResponse, error)
	FinishFlashCardStudyProgress(context.Context, *FinishFlashCardStudyProgressRequest) (*FinishFlashCardStudyProgressResponse, error)
	UpdateFlashCardStudyProgress(context.Context, *UpdateFlashCardStudyProgressRequest) (*UpdateFlashCardStudyProgressResponse, error)
	AddBooks(context.Context, *AddBooksRequest) (*AddBooksResponse, error)
}

// UnimplementedCourseModifierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCourseModifierServiceServer struct {
}

func (UnimplementedCourseModifierServiceServer) DuplicateBook(context.Context, *DuplicateBookRequest) (*DuplicateBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DuplicateBook not implemented")
}
func (UnimplementedCourseModifierServiceServer) UpsertLOsAndAssignments(context.Context, *UpsertLOsAndAssignmentsRequest) (*UpsertLOsAndAssignmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertLOsAndAssignments not implemented")
}
func (UnimplementedCourseModifierServiceServer) UpdateDisplayOrdersOfLOsAndAssignments(context.Context, *UpdateDisplayOrdersOfLOsAndAssignmentsRequest) (*UpdateDisplayOrdersOfLOsAndAssignmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDisplayOrdersOfLOsAndAssignments not implemented")
}
func (UnimplementedCourseModifierServiceServer) CompleteStudyPlanItem(context.Context, *CompleteStudyPlanItemRequest) (*CompleteStudyPlanItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteStudyPlanItem not implemented")
}
func (UnimplementedCourseModifierServiceServer) SubmitQuizAnswers(context.Context, *SubmitQuizAnswersRequest) (*SubmitQuizAnswersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitQuizAnswers not implemented")
}
func (UnimplementedCourseModifierServiceServer) FinishFlashCardStudyProgress(context.Context, *FinishFlashCardStudyProgressRequest) (*FinishFlashCardStudyProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishFlashCardStudyProgress not implemented")
}
func (UnimplementedCourseModifierServiceServer) UpdateFlashCardStudyProgress(context.Context, *UpdateFlashCardStudyProgressRequest) (*UpdateFlashCardStudyProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlashCardStudyProgress not implemented")
}
func (UnimplementedCourseModifierServiceServer) AddBooks(context.Context, *AddBooksRequest) (*AddBooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBooks not implemented")
}

// UnsafeCourseModifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseModifierServiceServer will
// result in compilation errors.
type UnsafeCourseModifierServiceServer interface {
	mustEmbedUnimplementedCourseModifierServiceServer()
}

func RegisterCourseModifierServiceServer(s grpc.ServiceRegistrar, srv CourseModifierServiceServer) {
	s.RegisterService(&_CourseModifierService_serviceDesc, srv)
}

func _CourseModifierService_DuplicateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DuplicateBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseModifierServiceServer).DuplicateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.CourseModifierService/DuplicateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseModifierServiceServer).DuplicateBook(ctx, req.(*DuplicateBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseModifierService_UpsertLOsAndAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertLOsAndAssignmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseModifierServiceServer).UpsertLOsAndAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.CourseModifierService/UpsertLOsAndAssignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseModifierServiceServer).UpsertLOsAndAssignments(ctx, req.(*UpsertLOsAndAssignmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseModifierService_UpdateDisplayOrdersOfLOsAndAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDisplayOrdersOfLOsAndAssignmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseModifierServiceServer).UpdateDisplayOrdersOfLOsAndAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.CourseModifierService/UpdateDisplayOrdersOfLOsAndAssignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseModifierServiceServer).UpdateDisplayOrdersOfLOsAndAssignments(ctx, req.(*UpdateDisplayOrdersOfLOsAndAssignmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseModifierService_CompleteStudyPlanItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteStudyPlanItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseModifierServiceServer).CompleteStudyPlanItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.CourseModifierService/CompleteStudyPlanItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseModifierServiceServer).CompleteStudyPlanItem(ctx, req.(*CompleteStudyPlanItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseModifierService_SubmitQuizAnswers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitQuizAnswersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseModifierServiceServer).SubmitQuizAnswers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.CourseModifierService/SubmitQuizAnswers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseModifierServiceServer).SubmitQuizAnswers(ctx, req.(*SubmitQuizAnswersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseModifierService_FinishFlashCardStudyProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishFlashCardStudyProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseModifierServiceServer).FinishFlashCardStudyProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.CourseModifierService/FinishFlashCardStudyProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseModifierServiceServer).FinishFlashCardStudyProgress(ctx, req.(*FinishFlashCardStudyProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseModifierService_UpdateFlashCardStudyProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlashCardStudyProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseModifierServiceServer).UpdateFlashCardStudyProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.CourseModifierService/UpdateFlashCardStudyProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseModifierServiceServer).UpdateFlashCardStudyProgress(ctx, req.(*UpdateFlashCardStudyProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseModifierService_AddBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseModifierServiceServer).AddBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.CourseModifierService/AddBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseModifierServiceServer).AddBooks(ctx, req.(*AddBooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CourseModifierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eureka.v1.CourseModifierService",
	HandlerType: (*CourseModifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DuplicateBook",
			Handler:    _CourseModifierService_DuplicateBook_Handler,
		},
		{
			MethodName: "UpsertLOsAndAssignments",
			Handler:    _CourseModifierService_UpsertLOsAndAssignments_Handler,
		},
		{
			MethodName: "UpdateDisplayOrdersOfLOsAndAssignments",
			Handler:    _CourseModifierService_UpdateDisplayOrdersOfLOsAndAssignments_Handler,
		},
		{
			MethodName: "CompleteStudyPlanItem",
			Handler:    _CourseModifierService_CompleteStudyPlanItem_Handler,
		},
		{
			MethodName: "SubmitQuizAnswers",
			Handler:    _CourseModifierService_SubmitQuizAnswers_Handler,
		},
		{
			MethodName: "FinishFlashCardStudyProgress",
			Handler:    _CourseModifierService_FinishFlashCardStudyProgress_Handler,
		},
		{
			MethodName: "UpdateFlashCardStudyProgress",
			Handler:    _CourseModifierService_UpdateFlashCardStudyProgress_Handler,
		},
		{
			MethodName: "AddBooks",
			Handler:    _CourseModifierService_AddBooks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eureka/v1/course_modifier.proto",
}
