// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package epb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BookReaderServiceClient is the client API for BookReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookReaderServiceClient interface {
	ListBooks(ctx context.Context, in *ListBooksRequest, opts ...grpc.CallOption) (*ListBooksResponse, error)
}

type bookReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookReaderServiceClient(cc grpc.ClientConnInterface) BookReaderServiceClient {
	return &bookReaderServiceClient{cc}
}

func (c *bookReaderServiceClient) ListBooks(ctx context.Context, in *ListBooksRequest, opts ...grpc.CallOption) (*ListBooksResponse, error) {
	out := new(ListBooksResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.BookReaderService/ListBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookReaderServiceServer is the server API for BookReaderService service.
// All implementations should embed UnimplementedBookReaderServiceServer
// for forward compatibility
type BookReaderServiceServer interface {
	ListBooks(context.Context, *ListBooksRequest) (*ListBooksResponse, error)
}

// UnimplementedBookReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBookReaderServiceServer struct {
}

func (UnimplementedBookReaderServiceServer) ListBooks(context.Context, *ListBooksRequest) (*ListBooksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBooks not implemented")
}

// UnsafeBookReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookReaderServiceServer will
// result in compilation errors.
type UnsafeBookReaderServiceServer interface {
	mustEmbedUnimplementedBookReaderServiceServer()
}

func RegisterBookReaderServiceServer(s grpc.ServiceRegistrar, srv BookReaderServiceServer) {
	s.RegisterService(&_BookReaderService_serviceDesc, srv)
}

func _BookReaderService_ListBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookReaderServiceServer).ListBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.BookReaderService/ListBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookReaderServiceServer).ListBooks(ctx, req.(*ListBooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BookReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eureka.v1.BookReaderService",
	HandlerType: (*BookReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBooks",
			Handler:    _BookReaderService_ListBooks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eureka/v1/book_reader.proto",
}
