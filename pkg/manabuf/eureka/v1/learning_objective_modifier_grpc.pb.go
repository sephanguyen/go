// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package epb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LearningObjectiveModifierServiceClient is the client API for LearningObjectiveModifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LearningObjectiveModifierServiceClient interface {
	UpsertLOs(ctx context.Context, in *UpsertLOsRequest, opts ...grpc.CallOption) (*UpsertLOsResponse, error)
	DeleteLos(ctx context.Context, in *DeleteLosRequest, opts ...grpc.CallOption) (*DeleteLosResponse, error)
	UpdateLearningObjectiveName(ctx context.Context, in *UpdateLearningObjectiveNameRequest, opts ...grpc.CallOption) (*UpdateLearningObjectiveNameResponse, error)
}

type learningObjectiveModifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLearningObjectiveModifierServiceClient(cc grpc.ClientConnInterface) LearningObjectiveModifierServiceClient {
	return &learningObjectiveModifierServiceClient{cc}
}

func (c *learningObjectiveModifierServiceClient) UpsertLOs(ctx context.Context, in *UpsertLOsRequest, opts ...grpc.CallOption) (*UpsertLOsResponse, error) {
	out := new(UpsertLOsResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.LearningObjectiveModifierService/UpsertLOs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningObjectiveModifierServiceClient) DeleteLos(ctx context.Context, in *DeleteLosRequest, opts ...grpc.CallOption) (*DeleteLosResponse, error) {
	out := new(DeleteLosResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.LearningObjectiveModifierService/DeleteLos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningObjectiveModifierServiceClient) UpdateLearningObjectiveName(ctx context.Context, in *UpdateLearningObjectiveNameRequest, opts ...grpc.CallOption) (*UpdateLearningObjectiveNameResponse, error) {
	out := new(UpdateLearningObjectiveNameResponse)
	err := c.cc.Invoke(ctx, "/eureka.v1.LearningObjectiveModifierService/UpdateLearningObjectiveName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LearningObjectiveModifierServiceServer is the server API for LearningObjectiveModifierService service.
// All implementations should embed UnimplementedLearningObjectiveModifierServiceServer
// for forward compatibility
type LearningObjectiveModifierServiceServer interface {
	UpsertLOs(context.Context, *UpsertLOsRequest) (*UpsertLOsResponse, error)
	DeleteLos(context.Context, *DeleteLosRequest) (*DeleteLosResponse, error)
	UpdateLearningObjectiveName(context.Context, *UpdateLearningObjectiveNameRequest) (*UpdateLearningObjectiveNameResponse, error)
}

// UnimplementedLearningObjectiveModifierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLearningObjectiveModifierServiceServer struct {
}

func (UnimplementedLearningObjectiveModifierServiceServer) UpsertLOs(context.Context, *UpsertLOsRequest) (*UpsertLOsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertLOs not implemented")
}
func (UnimplementedLearningObjectiveModifierServiceServer) DeleteLos(context.Context, *DeleteLosRequest) (*DeleteLosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLos not implemented")
}
func (UnimplementedLearningObjectiveModifierServiceServer) UpdateLearningObjectiveName(context.Context, *UpdateLearningObjectiveNameRequest) (*UpdateLearningObjectiveNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLearningObjectiveName not implemented")
}

// UnsafeLearningObjectiveModifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LearningObjectiveModifierServiceServer will
// result in compilation errors.
type UnsafeLearningObjectiveModifierServiceServer interface {
	mustEmbedUnimplementedLearningObjectiveModifierServiceServer()
}

func RegisterLearningObjectiveModifierServiceServer(s grpc.ServiceRegistrar, srv LearningObjectiveModifierServiceServer) {
	s.RegisterService(&_LearningObjectiveModifierService_serviceDesc, srv)
}

func _LearningObjectiveModifierService_UpsertLOs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertLOsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningObjectiveModifierServiceServer).UpsertLOs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.LearningObjectiveModifierService/UpsertLOs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningObjectiveModifierServiceServer).UpsertLOs(ctx, req.(*UpsertLOsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningObjectiveModifierService_DeleteLos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningObjectiveModifierServiceServer).DeleteLos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.LearningObjectiveModifierService/DeleteLos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningObjectiveModifierServiceServer).DeleteLos(ctx, req.(*DeleteLosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningObjectiveModifierService_UpdateLearningObjectiveName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLearningObjectiveNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningObjectiveModifierServiceServer).UpdateLearningObjectiveName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eureka.v1.LearningObjectiveModifierService/UpdateLearningObjectiveName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningObjectiveModifierServiceServer).UpdateLearningObjectiveName(ctx, req.(*UpdateLearningObjectiveNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LearningObjectiveModifierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eureka.v1.LearningObjectiveModifierService",
	HandlerType: (*LearningObjectiveModifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertLOs",
			Handler:    _LearningObjectiveModifierService_UpsertLOs_Handler,
		},
		{
			MethodName: "DeleteLos",
			Handler:    _LearningObjectiveModifierService_DeleteLos_Handler,
		},
		{
			MethodName: "UpdateLearningObjectiveName",
			Handler:    _LearningObjectiveModifierService_UpdateLearningObjectiveName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eureka/v1/learning_objective_modifier.proto",
}
