// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package eepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// EntryExitServiceClient is the client API for EntryExitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntryExitServiceClient interface {
	Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (*ScanResponse, error)
	GenerateBatchQRCodes(ctx context.Context, in *GenerateBatchQRCodesRequest, opts ...grpc.CallOption) (*GenerateBatchQRCodesResponse, error)
	CreateEntryExit(ctx context.Context, in *CreateEntryExitRequest, opts ...grpc.CallOption) (*CreateEntryExitResponse, error)
	UpdateEntryExit(ctx context.Context, in *UpdateEntryExitRequest, opts ...grpc.CallOption) (*UpdateEntryExitResponse, error)
	DeleteEntryExit(ctx context.Context, in *DeleteEntryExitRequest, opts ...grpc.CallOption) (*DeleteEntryExitResponse, error)
	RetrieveEntryExitRecords(ctx context.Context, in *RetrieveEntryExitRecordsRequest, opts ...grpc.CallOption) (*RetrieveEntryExitRecordsResponse, error)
	RetrieveStudentQRCode(ctx context.Context, in *RetrieveStudentQRCodeRequest, opts ...grpc.CallOption) (*RetrieveStudentQRCodeResponse, error)
}

type entryExitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEntryExitServiceClient(cc grpc.ClientConnInterface) EntryExitServiceClient {
	return &entryExitServiceClient{cc}
}

func (c *entryExitServiceClient) Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (*ScanResponse, error) {
	out := new(ScanResponse)
	err := c.cc.Invoke(ctx, "/entryexitmgmt.v1.EntryExitService/Scan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entryExitServiceClient) GenerateBatchQRCodes(ctx context.Context, in *GenerateBatchQRCodesRequest, opts ...grpc.CallOption) (*GenerateBatchQRCodesResponse, error) {
	out := new(GenerateBatchQRCodesResponse)
	err := c.cc.Invoke(ctx, "/entryexitmgmt.v1.EntryExitService/GenerateBatchQRCodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entryExitServiceClient) CreateEntryExit(ctx context.Context, in *CreateEntryExitRequest, opts ...grpc.CallOption) (*CreateEntryExitResponse, error) {
	out := new(CreateEntryExitResponse)
	err := c.cc.Invoke(ctx, "/entryexitmgmt.v1.EntryExitService/CreateEntryExit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entryExitServiceClient) UpdateEntryExit(ctx context.Context, in *UpdateEntryExitRequest, opts ...grpc.CallOption) (*UpdateEntryExitResponse, error) {
	out := new(UpdateEntryExitResponse)
	err := c.cc.Invoke(ctx, "/entryexitmgmt.v1.EntryExitService/UpdateEntryExit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entryExitServiceClient) DeleteEntryExit(ctx context.Context, in *DeleteEntryExitRequest, opts ...grpc.CallOption) (*DeleteEntryExitResponse, error) {
	out := new(DeleteEntryExitResponse)
	err := c.cc.Invoke(ctx, "/entryexitmgmt.v1.EntryExitService/DeleteEntryExit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entryExitServiceClient) RetrieveEntryExitRecords(ctx context.Context, in *RetrieveEntryExitRecordsRequest, opts ...grpc.CallOption) (*RetrieveEntryExitRecordsResponse, error) {
	out := new(RetrieveEntryExitRecordsResponse)
	err := c.cc.Invoke(ctx, "/entryexitmgmt.v1.EntryExitService/RetrieveEntryExitRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entryExitServiceClient) RetrieveStudentQRCode(ctx context.Context, in *RetrieveStudentQRCodeRequest, opts ...grpc.CallOption) (*RetrieveStudentQRCodeResponse, error) {
	out := new(RetrieveStudentQRCodeResponse)
	err := c.cc.Invoke(ctx, "/entryexitmgmt.v1.EntryExitService/RetrieveStudentQRCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntryExitServiceServer is the server API for EntryExitService service.
// All implementations should embed UnimplementedEntryExitServiceServer
// for forward compatibility
type EntryExitServiceServer interface {
	Scan(context.Context, *ScanRequest) (*ScanResponse, error)
	GenerateBatchQRCodes(context.Context, *GenerateBatchQRCodesRequest) (*GenerateBatchQRCodesResponse, error)
	CreateEntryExit(context.Context, *CreateEntryExitRequest) (*CreateEntryExitResponse, error)
	UpdateEntryExit(context.Context, *UpdateEntryExitRequest) (*UpdateEntryExitResponse, error)
	DeleteEntryExit(context.Context, *DeleteEntryExitRequest) (*DeleteEntryExitResponse, error)
	RetrieveEntryExitRecords(context.Context, *RetrieveEntryExitRecordsRequest) (*RetrieveEntryExitRecordsResponse, error)
	RetrieveStudentQRCode(context.Context, *RetrieveStudentQRCodeRequest) (*RetrieveStudentQRCodeResponse, error)
}

// UnimplementedEntryExitServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEntryExitServiceServer struct {
}

func (UnimplementedEntryExitServiceServer) Scan(context.Context, *ScanRequest) (*ScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scan not implemented")
}
func (UnimplementedEntryExitServiceServer) GenerateBatchQRCodes(context.Context, *GenerateBatchQRCodesRequest) (*GenerateBatchQRCodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateBatchQRCodes not implemented")
}
func (UnimplementedEntryExitServiceServer) CreateEntryExit(context.Context, *CreateEntryExitRequest) (*CreateEntryExitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntryExit not implemented")
}
func (UnimplementedEntryExitServiceServer) UpdateEntryExit(context.Context, *UpdateEntryExitRequest) (*UpdateEntryExitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEntryExit not implemented")
}
func (UnimplementedEntryExitServiceServer) DeleteEntryExit(context.Context, *DeleteEntryExitRequest) (*DeleteEntryExitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntryExit not implemented")
}
func (UnimplementedEntryExitServiceServer) RetrieveEntryExitRecords(context.Context, *RetrieveEntryExitRecordsRequest) (*RetrieveEntryExitRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveEntryExitRecords not implemented")
}
func (UnimplementedEntryExitServiceServer) RetrieveStudentQRCode(context.Context, *RetrieveStudentQRCodeRequest) (*RetrieveStudentQRCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveStudentQRCode not implemented")
}

// UnsafeEntryExitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntryExitServiceServer will
// result in compilation errors.
type UnsafeEntryExitServiceServer interface {
	mustEmbedUnimplementedEntryExitServiceServer()
}

func RegisterEntryExitServiceServer(s grpc.ServiceRegistrar, srv EntryExitServiceServer) {
	s.RegisterService(&_EntryExitService_serviceDesc, srv)
}

func _EntryExitService_Scan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntryExitServiceServer).Scan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entryexitmgmt.v1.EntryExitService/Scan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntryExitServiceServer).Scan(ctx, req.(*ScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntryExitService_GenerateBatchQRCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateBatchQRCodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntryExitServiceServer).GenerateBatchQRCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entryexitmgmt.v1.EntryExitService/GenerateBatchQRCodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntryExitServiceServer).GenerateBatchQRCodes(ctx, req.(*GenerateBatchQRCodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntryExitService_CreateEntryExit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntryExitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntryExitServiceServer).CreateEntryExit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entryexitmgmt.v1.EntryExitService/CreateEntryExit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntryExitServiceServer).CreateEntryExit(ctx, req.(*CreateEntryExitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntryExitService_UpdateEntryExit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntryExitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntryExitServiceServer).UpdateEntryExit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entryexitmgmt.v1.EntryExitService/UpdateEntryExit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntryExitServiceServer).UpdateEntryExit(ctx, req.(*UpdateEntryExitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntryExitService_DeleteEntryExit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntryExitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntryExitServiceServer).DeleteEntryExit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entryexitmgmt.v1.EntryExitService/DeleteEntryExit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntryExitServiceServer).DeleteEntryExit(ctx, req.(*DeleteEntryExitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntryExitService_RetrieveEntryExitRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveEntryExitRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntryExitServiceServer).RetrieveEntryExitRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entryexitmgmt.v1.EntryExitService/RetrieveEntryExitRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntryExitServiceServer).RetrieveEntryExitRecords(ctx, req.(*RetrieveEntryExitRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntryExitService_RetrieveStudentQRCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveStudentQRCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntryExitServiceServer).RetrieveStudentQRCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entryexitmgmt.v1.EntryExitService/RetrieveStudentQRCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntryExitServiceServer).RetrieveStudentQRCode(ctx, req.(*RetrieveStudentQRCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EntryExitService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "entryexitmgmt.v1.EntryExitService",
	HandlerType: (*EntryExitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Scan",
			Handler:    _EntryExitService_Scan_Handler,
		},
		{
			MethodName: "GenerateBatchQRCodes",
			Handler:    _EntryExitService_GenerateBatchQRCodes_Handler,
		},
		{
			MethodName: "CreateEntryExit",
			Handler:    _EntryExitService_CreateEntryExit_Handler,
		},
		{
			MethodName: "UpdateEntryExit",
			Handler:    _EntryExitService_UpdateEntryExit_Handler,
		},
		{
			MethodName: "DeleteEntryExit",
			Handler:    _EntryExitService_DeleteEntryExit_Handler,
		},
		{
			MethodName: "RetrieveEntryExitRecords",
			Handler:    _EntryExitService_RetrieveEntryExitRecords_Handler,
		},
		{
			MethodName: "RetrieveStudentQRCode",
			Handler:    _EntryExitService_RetrieveStudentQRCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entryexitmgmt/v1/entry_exit.proto",
}
