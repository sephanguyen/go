// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: tom/v1/enums.proto

package tpb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MessageType int32

const (
	// content in message is normal text
	MessageType_MESSAGE_TYPE_TEXT MessageType = 0
	// content in message must be image_url
	MessageType_MESSAGE_TYPE_IMAGE MessageType = 1
	// content in message must be video_url
	MessageType_MESSAGE_TYPE_VIDEO MessageType = 2
	// content in message must be:
	// - CODES_MESSAGE_TYPE_COACH_CHANGE
	// - CODES_MESSAGE_TYPE_CREATED_SP
	// - CODES_MESSAGE_TYPE_EDITED_SP
	// - CODES_MESSAGE_TYPE_MARKED_AS_RESOLVED
	// - CODES_MESSAGE_TYPE_QUESTION_SOLVED
	// - CODES_MESSAGE_TYPE_QUESTION_DOUBT
	// - CODES_MESSAGE_TYPE_MARKED_AS_INVALID
	// - CODES_MESSAGE_TYPE_QUESTION_INVALID
	// - CODES_MESSAGE_TYPE_QUESTION_NOT_INVALID
	// - CODES_MESSAGE_TYPE_QUESTION_ARCHIVED
	// - CODES_MESSAGE_TYPE_QUESTION_EXPIRED
	// - CODES_MESSAGE_TYPE_RATED_ANSWER
	// - CODES_MESSAGE_TYPE_TUTOR_JOINED
	// - CODES_MESSAGE_TYPE_TUTOR_LEFT
	// - CODES_MESSAGE_TYPE_RATE_LOVE
	// - CODES_MESSAGE_TYPE_RATE_NEUTRAL
	// - CODES_MESSAGE_TYPE_RATE_SAD
	MessageType_MESSAGE_TYPE_SYSTEM MessageType = 3
	// content in message must be CODES_MESSAGE_TYPE_BTN_CREATE_SP
	MessageType_MESSAGE_TYPE_BUTTON MessageType = 4
	// content in message must be:
	// - CODES_MESSAGE_TYPE_EVT_FINISH_FIRST_LO
	// - CODES_MESSAGE_TYPE_EVT_FINISH_FIRST_TOPIC
	//
	// Deprecated: Do not use.
	MessageType_MESSAGE_TYPE_COACH_AUTO MessageType = 5
	MessageType_MESSAGE_TYPE_FILE       MessageType = 6
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0: "MESSAGE_TYPE_TEXT",
		1: "MESSAGE_TYPE_IMAGE",
		2: "MESSAGE_TYPE_VIDEO",
		3: "MESSAGE_TYPE_SYSTEM",
		4: "MESSAGE_TYPE_BUTTON",
		5: "MESSAGE_TYPE_COACH_AUTO",
		6: "MESSAGE_TYPE_FILE",
	}
	MessageType_value = map[string]int32{
		"MESSAGE_TYPE_TEXT":       0,
		"MESSAGE_TYPE_IMAGE":      1,
		"MESSAGE_TYPE_VIDEO":      2,
		"MESSAGE_TYPE_SYSTEM":     3,
		"MESSAGE_TYPE_BUTTON":     4,
		"MESSAGE_TYPE_COACH_AUTO": 5,
		"MESSAGE_TYPE_FILE":       6,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_tom_v1_enums_proto_enumTypes[0].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_tom_v1_enums_proto_enumTypes[0]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_tom_v1_enums_proto_rawDescGZIP(), []int{0}
}

type MessageStatus int32

const (
	MessageStatus_MESSAGE_STATUS_NEW  MessageStatus = 0
	MessageStatus_MESSAGE_STATUS_READ MessageStatus = 1
)

// Enum value maps for MessageStatus.
var (
	MessageStatus_name = map[int32]string{
		0: "MESSAGE_STATUS_NEW",
		1: "MESSAGE_STATUS_READ",
	}
	MessageStatus_value = map[string]int32{
		"MESSAGE_STATUS_NEW":  0,
		"MESSAGE_STATUS_READ": 1,
	}
)

func (x MessageStatus) Enum() *MessageStatus {
	p := new(MessageStatus)
	*p = x
	return p
}

func (x MessageStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_tom_v1_enums_proto_enumTypes[1].Descriptor()
}

func (MessageStatus) Type() protoreflect.EnumType {
	return &file_tom_v1_enums_proto_enumTypes[1]
}

func (x MessageStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageStatus.Descriptor instead.
func (MessageStatus) EnumDescriptor() ([]byte, []int) {
	return file_tom_v1_enums_proto_rawDescGZIP(), []int{1}
}

type CodesMessageType int32

const (
	// Deprecated: Do not use.
	CodesMessageType_CODES_MESSAGE_TYPE_COACH_CHANGE            CodesMessageType = 0
	CodesMessageType_CODES_MESSAGE_TYPE_CREATED_SP              CodesMessageType = 1
	CodesMessageType_CODES_MESSAGE_TYPE_EDITED_SP               CodesMessageType = 2
	CodesMessageType_CODES_MESSAGE_TYPE_BTN_CREATE_SP           CodesMessageType = 3
	CodesMessageType_CODES_MESSAGE_TYPE_MARKED_AS_RESOLVED      CodesMessageType = 4
	CodesMessageType_CODES_MESSAGE_TYPE_QUESTION_SOLVED         CodesMessageType = 5
	CodesMessageType_CODES_MESSAGE_TYPE_QUESTION_DOUBT          CodesMessageType = 6
	CodesMessageType_CODES_MESSAGE_TYPE_QUESTION_EXPIRED_SOLVED CodesMessageType = 7
	CodesMessageType_CODES_MESSAGE_TYPE_MARKED_AS_INVALID       CodesMessageType = 8
	CodesMessageType_CODES_MESSAGE_TYPE_QUESTION_INVALID        CodesMessageType = 9
	CodesMessageType_CODES_MESSAGE_TYPE_QUESTION_NOT_INVALID    CodesMessageType = 10
	CodesMessageType_CODES_MESSAGE_TYPE_QUESTION_ARCHIVED       CodesMessageType = 11
	CodesMessageType_CODES_MESSAGE_TYPE_QUESTION_EXPIRED        CodesMessageType = 12
	CodesMessageType_CODES_MESSAGE_TYPE_RATED_ANSWER            CodesMessageType = 13
	CodesMessageType_CODES_MESSAGE_TYPE_TUTOR_JOINED            CodesMessageType = 14
	CodesMessageType_CODES_MESSAGE_TYPE_TUTOR_LEFT              CodesMessageType = 15
	// for rating
	CodesMessageType_CODES_MESSAGE_TYPE_RATE_LOVE    CodesMessageType = 16
	CodesMessageType_CODES_MESSAGE_TYPE_RATE_NEUTRAL CodesMessageType = 17
	CodesMessageType_CODES_MESSAGE_TYPE_RATE_SAD     CodesMessageType = 18
	// for coach auto
	CodesMessageType_CODES_MESSAGE_TYPE_EVT_FINISH_FIRST_LO    CodesMessageType = 19
	CodesMessageType_CODES_MESSAGE_TYPE_EVT_FINISH_FIRST_TOPIC CodesMessageType = 20
	// class room
	CodesMessageType_CODES_MESSAGE_TYPE_CREATED_CLASS      CodesMessageType = 21
	CodesMessageType_CODES_MESSAGE_TYPE_JOINED_CLASS       CodesMessageType = 22
	CodesMessageType_CODES_MESSAGE_TYPE_LEFT_CLASS         CodesMessageType = 23
	CodesMessageType_CODES_MESSAGE_TYPE_REMOVED_FROM_CLASS CodesMessageType = 24
	// lesson room
	CodesMessageType_CODES_MESSAGE_TYPE_JOINED_LESSON                   CodesMessageType = 25
	CodesMessageType_CODES_MESSAGE_TYPE_LEFT_LESSON                     CodesMessageType = 26
	CodesMessageType_CODES_MESSAGE_TYPE_RAISED_HAND                     CodesMessageType = 27
	CodesMessageType_CODES_MESSAGE_TYPE_ALLOW_STUDENT_TO_SPEAK          CodesMessageType = 28
	CodesMessageType_CODES_MESSAGE_TYPE_PROHIBIT_STUDENT_TO_SPEAK       CodesMessageType = 29
	CodesMessageType_CODES_MESSAGE_TYPE_ALLOW_STUDENT_TO_CHAT           CodesMessageType = 30
	CodesMessageType_CODES_MESSAGE_TYPE_PROHIBIT_STUDENT_TO_CHAT        CodesMessageType = 31
	CodesMessageType_CODES_MESSAGE_TYPE_PUT_HAND_DOWN                   CodesMessageType = 32
	CodesMessageType_CODES_MESSAGE_TYPE_STUDENT_ACCEPT_TO_SPEAK         CodesMessageType = 33
	CodesMessageType_CODES_MESSAGE_TYPE_STUDENT_DECLINE_TO_SPEAK        CodesMessageType = 34
	CodesMessageType_CODES_MESSAGE_TYPE_ALLOW_ALL_STUDENT_TO_SPEAK      CodesMessageType = 35
	CodesMessageType_CODES_MESSAGE_TYPE_PROHIBIT_ALL_STUDENT_TO_SPEAK   CodesMessageType = 36
	CodesMessageType_CODES_MESSAGE_TYPE_ALLOW_STUDENT_TO_SHOW_CAMERA    CodesMessageType = 37
	CodesMessageType_CODES_MESSAGE_TYPE_PROHIBIT_STUDENT_TO_SHOW_CAMERA CodesMessageType = 38
	CodesMessageType_CODES_MESSAGE_TYPE_HAND_OFF_ALL_STUDENT            CodesMessageType = 39
	CodesMessageType_CODES_MESSAGE_TYPE_HAND_OFF_STUDENT                CodesMessageType = 40
	// Add from old proto
	CodesMessageType_CODES_MESSAGE_TYPE_END_LIVE_LESSON CodesMessageType = 41
	// Student, Parent conversation
	CodesMessageType_CODES_MESSAGE_TYPE_CREATED_CONVERSATION       CodesMessageType = 42
	CodesMessageType_CODES_MESSAGE_TYPE_JOINED_CONVERSATION        CodesMessageType = 43
	CodesMessageType_CODES_MESSAGE_TYPE_SEEN_CONVERSATION          CodesMessageType = 44
	CodesMessageType_CODES_MESSAGE_TYPE_LEAVE_CONVERSATION         CodesMessageType = 45
	CodesMessageType_CODES_MESSAGE_TYPE_USER_ADDED_TO_CONVERSATION CodesMessageType = 46
	// Private conversation lesson
	CodesMessageType_CODES_MESSAGE_TYPE_CREATED_PRIVATE_CONVERSATION_LESSON CodesMessageType = 47
)

// Enum value maps for CodesMessageType.
var (
	CodesMessageType_name = map[int32]string{
		0:  "CODES_MESSAGE_TYPE_COACH_CHANGE",
		1:  "CODES_MESSAGE_TYPE_CREATED_SP",
		2:  "CODES_MESSAGE_TYPE_EDITED_SP",
		3:  "CODES_MESSAGE_TYPE_BTN_CREATE_SP",
		4:  "CODES_MESSAGE_TYPE_MARKED_AS_RESOLVED",
		5:  "CODES_MESSAGE_TYPE_QUESTION_SOLVED",
		6:  "CODES_MESSAGE_TYPE_QUESTION_DOUBT",
		7:  "CODES_MESSAGE_TYPE_QUESTION_EXPIRED_SOLVED",
		8:  "CODES_MESSAGE_TYPE_MARKED_AS_INVALID",
		9:  "CODES_MESSAGE_TYPE_QUESTION_INVALID",
		10: "CODES_MESSAGE_TYPE_QUESTION_NOT_INVALID",
		11: "CODES_MESSAGE_TYPE_QUESTION_ARCHIVED",
		12: "CODES_MESSAGE_TYPE_QUESTION_EXPIRED",
		13: "CODES_MESSAGE_TYPE_RATED_ANSWER",
		14: "CODES_MESSAGE_TYPE_TUTOR_JOINED",
		15: "CODES_MESSAGE_TYPE_TUTOR_LEFT",
		16: "CODES_MESSAGE_TYPE_RATE_LOVE",
		17: "CODES_MESSAGE_TYPE_RATE_NEUTRAL",
		18: "CODES_MESSAGE_TYPE_RATE_SAD",
		19: "CODES_MESSAGE_TYPE_EVT_FINISH_FIRST_LO",
		20: "CODES_MESSAGE_TYPE_EVT_FINISH_FIRST_TOPIC",
		21: "CODES_MESSAGE_TYPE_CREATED_CLASS",
		22: "CODES_MESSAGE_TYPE_JOINED_CLASS",
		23: "CODES_MESSAGE_TYPE_LEFT_CLASS",
		24: "CODES_MESSAGE_TYPE_REMOVED_FROM_CLASS",
		25: "CODES_MESSAGE_TYPE_JOINED_LESSON",
		26: "CODES_MESSAGE_TYPE_LEFT_LESSON",
		27: "CODES_MESSAGE_TYPE_RAISED_HAND",
		28: "CODES_MESSAGE_TYPE_ALLOW_STUDENT_TO_SPEAK",
		29: "CODES_MESSAGE_TYPE_PROHIBIT_STUDENT_TO_SPEAK",
		30: "CODES_MESSAGE_TYPE_ALLOW_STUDENT_TO_CHAT",
		31: "CODES_MESSAGE_TYPE_PROHIBIT_STUDENT_TO_CHAT",
		32: "CODES_MESSAGE_TYPE_PUT_HAND_DOWN",
		33: "CODES_MESSAGE_TYPE_STUDENT_ACCEPT_TO_SPEAK",
		34: "CODES_MESSAGE_TYPE_STUDENT_DECLINE_TO_SPEAK",
		35: "CODES_MESSAGE_TYPE_ALLOW_ALL_STUDENT_TO_SPEAK",
		36: "CODES_MESSAGE_TYPE_PROHIBIT_ALL_STUDENT_TO_SPEAK",
		37: "CODES_MESSAGE_TYPE_ALLOW_STUDENT_TO_SHOW_CAMERA",
		38: "CODES_MESSAGE_TYPE_PROHIBIT_STUDENT_TO_SHOW_CAMERA",
		39: "CODES_MESSAGE_TYPE_HAND_OFF_ALL_STUDENT",
		40: "CODES_MESSAGE_TYPE_HAND_OFF_STUDENT",
		41: "CODES_MESSAGE_TYPE_END_LIVE_LESSON",
		42: "CODES_MESSAGE_TYPE_CREATED_CONVERSATION",
		43: "CODES_MESSAGE_TYPE_JOINED_CONVERSATION",
		44: "CODES_MESSAGE_TYPE_SEEN_CONVERSATION",
		45: "CODES_MESSAGE_TYPE_LEAVE_CONVERSATION",
		46: "CODES_MESSAGE_TYPE_USER_ADDED_TO_CONVERSATION",
		47: "CODES_MESSAGE_TYPE_CREATED_PRIVATE_CONVERSATION_LESSON",
	}
	CodesMessageType_value = map[string]int32{
		"CODES_MESSAGE_TYPE_COACH_CHANGE":                        0,
		"CODES_MESSAGE_TYPE_CREATED_SP":                          1,
		"CODES_MESSAGE_TYPE_EDITED_SP":                           2,
		"CODES_MESSAGE_TYPE_BTN_CREATE_SP":                       3,
		"CODES_MESSAGE_TYPE_MARKED_AS_RESOLVED":                  4,
		"CODES_MESSAGE_TYPE_QUESTION_SOLVED":                     5,
		"CODES_MESSAGE_TYPE_QUESTION_DOUBT":                      6,
		"CODES_MESSAGE_TYPE_QUESTION_EXPIRED_SOLVED":             7,
		"CODES_MESSAGE_TYPE_MARKED_AS_INVALID":                   8,
		"CODES_MESSAGE_TYPE_QUESTION_INVALID":                    9,
		"CODES_MESSAGE_TYPE_QUESTION_NOT_INVALID":                10,
		"CODES_MESSAGE_TYPE_QUESTION_ARCHIVED":                   11,
		"CODES_MESSAGE_TYPE_QUESTION_EXPIRED":                    12,
		"CODES_MESSAGE_TYPE_RATED_ANSWER":                        13,
		"CODES_MESSAGE_TYPE_TUTOR_JOINED":                        14,
		"CODES_MESSAGE_TYPE_TUTOR_LEFT":                          15,
		"CODES_MESSAGE_TYPE_RATE_LOVE":                           16,
		"CODES_MESSAGE_TYPE_RATE_NEUTRAL":                        17,
		"CODES_MESSAGE_TYPE_RATE_SAD":                            18,
		"CODES_MESSAGE_TYPE_EVT_FINISH_FIRST_LO":                 19,
		"CODES_MESSAGE_TYPE_EVT_FINISH_FIRST_TOPIC":              20,
		"CODES_MESSAGE_TYPE_CREATED_CLASS":                       21,
		"CODES_MESSAGE_TYPE_JOINED_CLASS":                        22,
		"CODES_MESSAGE_TYPE_LEFT_CLASS":                          23,
		"CODES_MESSAGE_TYPE_REMOVED_FROM_CLASS":                  24,
		"CODES_MESSAGE_TYPE_JOINED_LESSON":                       25,
		"CODES_MESSAGE_TYPE_LEFT_LESSON":                         26,
		"CODES_MESSAGE_TYPE_RAISED_HAND":                         27,
		"CODES_MESSAGE_TYPE_ALLOW_STUDENT_TO_SPEAK":              28,
		"CODES_MESSAGE_TYPE_PROHIBIT_STUDENT_TO_SPEAK":           29,
		"CODES_MESSAGE_TYPE_ALLOW_STUDENT_TO_CHAT":               30,
		"CODES_MESSAGE_TYPE_PROHIBIT_STUDENT_TO_CHAT":            31,
		"CODES_MESSAGE_TYPE_PUT_HAND_DOWN":                       32,
		"CODES_MESSAGE_TYPE_STUDENT_ACCEPT_TO_SPEAK":             33,
		"CODES_MESSAGE_TYPE_STUDENT_DECLINE_TO_SPEAK":            34,
		"CODES_MESSAGE_TYPE_ALLOW_ALL_STUDENT_TO_SPEAK":          35,
		"CODES_MESSAGE_TYPE_PROHIBIT_ALL_STUDENT_TO_SPEAK":       36,
		"CODES_MESSAGE_TYPE_ALLOW_STUDENT_TO_SHOW_CAMERA":        37,
		"CODES_MESSAGE_TYPE_PROHIBIT_STUDENT_TO_SHOW_CAMERA":     38,
		"CODES_MESSAGE_TYPE_HAND_OFF_ALL_STUDENT":                39,
		"CODES_MESSAGE_TYPE_HAND_OFF_STUDENT":                    40,
		"CODES_MESSAGE_TYPE_END_LIVE_LESSON":                     41,
		"CODES_MESSAGE_TYPE_CREATED_CONVERSATION":                42,
		"CODES_MESSAGE_TYPE_JOINED_CONVERSATION":                 43,
		"CODES_MESSAGE_TYPE_SEEN_CONVERSATION":                   44,
		"CODES_MESSAGE_TYPE_LEAVE_CONVERSATION":                  45,
		"CODES_MESSAGE_TYPE_USER_ADDED_TO_CONVERSATION":          46,
		"CODES_MESSAGE_TYPE_CREATED_PRIVATE_CONVERSATION_LESSON": 47,
	}
)

func (x CodesMessageType) Enum() *CodesMessageType {
	p := new(CodesMessageType)
	*p = x
	return p
}

func (x CodesMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CodesMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_tom_v1_enums_proto_enumTypes[2].Descriptor()
}

func (CodesMessageType) Type() protoreflect.EnumType {
	return &file_tom_v1_enums_proto_enumTypes[2]
}

func (x CodesMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CodesMessageType.Descriptor instead.
func (CodesMessageType) EnumDescriptor() ([]byte, []int) {
	return file_tom_v1_enums_proto_rawDescGZIP(), []int{2}
}

type ConversationStatus int32

const (
	ConversationStatus_CONVERSATION_STATUS_NONE  ConversationStatus = 0
	ConversationStatus_CONVERSATION_STATUS_CLOSE ConversationStatus = 1
)

// Enum value maps for ConversationStatus.
var (
	ConversationStatus_name = map[int32]string{
		0: "CONVERSATION_STATUS_NONE",
		1: "CONVERSATION_STATUS_CLOSE",
	}
	ConversationStatus_value = map[string]int32{
		"CONVERSATION_STATUS_NONE":  0,
		"CONVERSATION_STATUS_CLOSE": 1,
	}
)

func (x ConversationStatus) Enum() *ConversationStatus {
	p := new(ConversationStatus)
	*p = x
	return p
}

func (x ConversationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConversationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_tom_v1_enums_proto_enumTypes[3].Descriptor()
}

func (ConversationStatus) Type() protoreflect.EnumType {
	return &file_tom_v1_enums_proto_enumTypes[3]
}

func (x ConversationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConversationStatus.Descriptor instead.
func (ConversationStatus) EnumDescriptor() ([]byte, []int) {
	return file_tom_v1_enums_proto_rawDescGZIP(), []int{3}
}

type ConversationType int32

const (
	ConversationType_CONVERSATION_CLASS    ConversationType = 0
	ConversationType_CONVERSATION_QUESTION ConversationType = 1
	// Deprecated: Do not use.
	ConversationType_CONVERSATION_COACH          ConversationType = 2
	ConversationType_CONVERSATION_LESSON         ConversationType = 3
	ConversationType_CONVERSATION_STUDENT        ConversationType = 4
	ConversationType_CONVERSATION_PARENT         ConversationType = 5
	ConversationType_CONVERSATION_LESSON_PRIVATE ConversationType = 6
)

// Enum value maps for ConversationType.
var (
	ConversationType_name = map[int32]string{
		0: "CONVERSATION_CLASS",
		1: "CONVERSATION_QUESTION",
		2: "CONVERSATION_COACH",
		3: "CONVERSATION_LESSON",
		4: "CONVERSATION_STUDENT",
		5: "CONVERSATION_PARENT",
		6: "CONVERSATION_LESSON_PRIVATE",
	}
	ConversationType_value = map[string]int32{
		"CONVERSATION_CLASS":          0,
		"CONVERSATION_QUESTION":       1,
		"CONVERSATION_COACH":          2,
		"CONVERSATION_LESSON":         3,
		"CONVERSATION_STUDENT":        4,
		"CONVERSATION_PARENT":         5,
		"CONVERSATION_LESSON_PRIVATE": 6,
	}
)

func (x ConversationType) Enum() *ConversationType {
	p := new(ConversationType)
	*p = x
	return p
}

func (x ConversationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConversationType) Descriptor() protoreflect.EnumDescriptor {
	return file_tom_v1_enums_proto_enumTypes[4].Descriptor()
}

func (ConversationType) Type() protoreflect.EnumType {
	return &file_tom_v1_enums_proto_enumTypes[4]
}

func (x ConversationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConversationType.Descriptor instead.
func (ConversationType) EnumDescriptor() ([]byte, []int) {
	return file_tom_v1_enums_proto_rawDescGZIP(), []int{4}
}

type ConversationEventType int32

const (
	ConversationEventType_CONVERSATION_EVENT_TYPE_NONE                          ConversationEventType = 0
	ConversationEventType_CONVERSATION_EVENT_TYPE_STUDENT_HAND_EVENT            ConversationEventType = 1
	ConversationEventType_CONVERSATION_EVENT_TYPE_ALLOW_PROHIBIT_TO_SPEAK       ConversationEventType = 2
	ConversationEventType_CONVERSATION_EVENT_TYPE_TEACHER_CREATE_POOL           ConversationEventType = 3
	ConversationEventType_CONVERSATION_EVENT_TYPE_STUDENT_ANSWER_POOL           ConversationEventType = 4
	ConversationEventType_CONVERSATION_EVENT_TYPE_ACCEPT_DECLINE_TO_SPEAK       ConversationEventType = 5
	ConversationEventType_CONVERSATION_EVENT_TYPE_ALLOW_PROHIBIT_TO_SHOW_CAMERA ConversationEventType = 6
	ConversationEventType_CONVERSATION_EVENT_TYPE_HAND_OFF_STUDENT              ConversationEventType = 7
)

// Enum value maps for ConversationEventType.
var (
	ConversationEventType_name = map[int32]string{
		0: "CONVERSATION_EVENT_TYPE_NONE",
		1: "CONVERSATION_EVENT_TYPE_STUDENT_HAND_EVENT",
		2: "CONVERSATION_EVENT_TYPE_ALLOW_PROHIBIT_TO_SPEAK",
		3: "CONVERSATION_EVENT_TYPE_TEACHER_CREATE_POOL",
		4: "CONVERSATION_EVENT_TYPE_STUDENT_ANSWER_POOL",
		5: "CONVERSATION_EVENT_TYPE_ACCEPT_DECLINE_TO_SPEAK",
		6: "CONVERSATION_EVENT_TYPE_ALLOW_PROHIBIT_TO_SHOW_CAMERA",
		7: "CONVERSATION_EVENT_TYPE_HAND_OFF_STUDENT",
	}
	ConversationEventType_value = map[string]int32{
		"CONVERSATION_EVENT_TYPE_NONE":                          0,
		"CONVERSATION_EVENT_TYPE_STUDENT_HAND_EVENT":            1,
		"CONVERSATION_EVENT_TYPE_ALLOW_PROHIBIT_TO_SPEAK":       2,
		"CONVERSATION_EVENT_TYPE_TEACHER_CREATE_POOL":           3,
		"CONVERSATION_EVENT_TYPE_STUDENT_ANSWER_POOL":           4,
		"CONVERSATION_EVENT_TYPE_ACCEPT_DECLINE_TO_SPEAK":       5,
		"CONVERSATION_EVENT_TYPE_ALLOW_PROHIBIT_TO_SHOW_CAMERA": 6,
		"CONVERSATION_EVENT_TYPE_HAND_OFF_STUDENT":              7,
	}
)

func (x ConversationEventType) Enum() *ConversationEventType {
	p := new(ConversationEventType)
	*p = x
	return p
}

func (x ConversationEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConversationEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_tom_v1_enums_proto_enumTypes[5].Descriptor()
}

func (ConversationEventType) Type() protoreflect.EnumType {
	return &file_tom_v1_enums_proto_enumTypes[5]
}

func (x ConversationEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConversationEventType.Descriptor instead.
func (ConversationEventType) EnumDescriptor() ([]byte, []int) {
	return file_tom_v1_enums_proto_rawDescGZIP(), []int{5}
}

type ConversationEventStatus int32

const (
	ConversationEventStatus_CONVERSATION_EVENT_STATUS_NONE                            ConversationEventStatus = 0
	ConversationEventStatus_CONVERSATION_EVENT_STATUS_STUDENT_RAISE_HAND              ConversationEventStatus = 1
	ConversationEventStatus_CONVERSATION_EVENT_STATUS_STUDENT_PUT_HAND_DOWN           ConversationEventStatus = 2
	ConversationEventStatus_CONVERSATION_EVENT_STATUS_POOL_OPEN                       ConversationEventStatus = 3
	ConversationEventStatus_CONVERSATION_EVENT_STATUS_POOL_CLOSE                      ConversationEventStatus = 4
	ConversationEventStatus_CONVERSATION_EVENT_STATUS_STUDENT_ALLOW_TO_SPEAK          ConversationEventStatus = 5
	ConversationEventStatus_CONVERSATION_EVENT_STATUS_STUDENT_PROHIBIT_TO_SPEAK       ConversationEventStatus = 6
	ConversationEventStatus_CONVERSATION_EVENT_STATUS_STUDENT_ACCEPT_TO_SPEAK         ConversationEventStatus = 7
	ConversationEventStatus_CONVERSATION_EVENT_STATUS_STUDENT_DECLINE_TO_SPEAK        ConversationEventStatus = 8
	ConversationEventStatus_CONVERSATION_EVENT_STATUS_ALLOW_ALL_STUDENT_TO_SPEAK      ConversationEventStatus = 9
	ConversationEventStatus_CONVERSATION_EVENT_STATUS_PROHIBIT_ALL_STUDENT_TO_SPEAK   ConversationEventStatus = 10
	ConversationEventStatus_CONVERSATION_EVENT_STATUS_ALLOW_STUDENT_TO_SHOW_CAMERA    ConversationEventStatus = 11
	ConversationEventStatus_CONVERSATION_EVENT_STATUS_PROHIBIT_STUDENT_TO_SHOW_CAMERA ConversationEventStatus = 12
	ConversationEventStatus_CONVERSATION_EVENT_STATUS_HAND_OFF_ALL_STUDENT            ConversationEventStatus = 13
	ConversationEventStatus_CONVERSATION_EVENT_STATUS_HAND_OFF_STUDENT                ConversationEventStatus = 14
)

// Enum value maps for ConversationEventStatus.
var (
	ConversationEventStatus_name = map[int32]string{
		0:  "CONVERSATION_EVENT_STATUS_NONE",
		1:  "CONVERSATION_EVENT_STATUS_STUDENT_RAISE_HAND",
		2:  "CONVERSATION_EVENT_STATUS_STUDENT_PUT_HAND_DOWN",
		3:  "CONVERSATION_EVENT_STATUS_POOL_OPEN",
		4:  "CONVERSATION_EVENT_STATUS_POOL_CLOSE",
		5:  "CONVERSATION_EVENT_STATUS_STUDENT_ALLOW_TO_SPEAK",
		6:  "CONVERSATION_EVENT_STATUS_STUDENT_PROHIBIT_TO_SPEAK",
		7:  "CONVERSATION_EVENT_STATUS_STUDENT_ACCEPT_TO_SPEAK",
		8:  "CONVERSATION_EVENT_STATUS_STUDENT_DECLINE_TO_SPEAK",
		9:  "CONVERSATION_EVENT_STATUS_ALLOW_ALL_STUDENT_TO_SPEAK",
		10: "CONVERSATION_EVENT_STATUS_PROHIBIT_ALL_STUDENT_TO_SPEAK",
		11: "CONVERSATION_EVENT_STATUS_ALLOW_STUDENT_TO_SHOW_CAMERA",
		12: "CONVERSATION_EVENT_STATUS_PROHIBIT_STUDENT_TO_SHOW_CAMERA",
		13: "CONVERSATION_EVENT_STATUS_HAND_OFF_ALL_STUDENT",
		14: "CONVERSATION_EVENT_STATUS_HAND_OFF_STUDENT",
	}
	ConversationEventStatus_value = map[string]int32{
		"CONVERSATION_EVENT_STATUS_NONE":                            0,
		"CONVERSATION_EVENT_STATUS_STUDENT_RAISE_HAND":              1,
		"CONVERSATION_EVENT_STATUS_STUDENT_PUT_HAND_DOWN":           2,
		"CONVERSATION_EVENT_STATUS_POOL_OPEN":                       3,
		"CONVERSATION_EVENT_STATUS_POOL_CLOSE":                      4,
		"CONVERSATION_EVENT_STATUS_STUDENT_ALLOW_TO_SPEAK":          5,
		"CONVERSATION_EVENT_STATUS_STUDENT_PROHIBIT_TO_SPEAK":       6,
		"CONVERSATION_EVENT_STATUS_STUDENT_ACCEPT_TO_SPEAK":         7,
		"CONVERSATION_EVENT_STATUS_STUDENT_DECLINE_TO_SPEAK":        8,
		"CONVERSATION_EVENT_STATUS_ALLOW_ALL_STUDENT_TO_SPEAK":      9,
		"CONVERSATION_EVENT_STATUS_PROHIBIT_ALL_STUDENT_TO_SPEAK":   10,
		"CONVERSATION_EVENT_STATUS_ALLOW_STUDENT_TO_SHOW_CAMERA":    11,
		"CONVERSATION_EVENT_STATUS_PROHIBIT_STUDENT_TO_SHOW_CAMERA": 12,
		"CONVERSATION_EVENT_STATUS_HAND_OFF_ALL_STUDENT":            13,
		"CONVERSATION_EVENT_STATUS_HAND_OFF_STUDENT":                14,
	}
)

func (x ConversationEventStatus) Enum() *ConversationEventStatus {
	p := new(ConversationEventStatus)
	*p = x
	return p
}

func (x ConversationEventStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConversationEventStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_tom_v1_enums_proto_enumTypes[6].Descriptor()
}

func (ConversationEventStatus) Type() protoreflect.EnumType {
	return &file_tom_v1_enums_proto_enumTypes[6]
}

func (x ConversationEventStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConversationEventStatus.Descriptor instead.
func (ConversationEventStatus) EnumDescriptor() ([]byte, []int) {
	return file_tom_v1_enums_proto_rawDescGZIP(), []int{6}
}

type TeacherConversationStatus int32

const (
	TeacherConversationStatus_TEACHER_CONVERSATION_STATUS_NONE        TeacherConversationStatus = 0
	TeacherConversationStatus_TEACHER_CONVERSATION_STATUS_ALL         TeacherConversationStatus = 1
	TeacherConversationStatus_TEACHER_CONVERSATION_STATUS_REPLIED     TeacherConversationStatus = 2
	TeacherConversationStatus_TEACHER_CONVERSATION_STATUS_NOT_REPLIED TeacherConversationStatus = 3
)

// Enum value maps for TeacherConversationStatus.
var (
	TeacherConversationStatus_name = map[int32]string{
		0: "TEACHER_CONVERSATION_STATUS_NONE",
		1: "TEACHER_CONVERSATION_STATUS_ALL",
		2: "TEACHER_CONVERSATION_STATUS_REPLIED",
		3: "TEACHER_CONVERSATION_STATUS_NOT_REPLIED",
	}
	TeacherConversationStatus_value = map[string]int32{
		"TEACHER_CONVERSATION_STATUS_NONE":        0,
		"TEACHER_CONVERSATION_STATUS_ALL":         1,
		"TEACHER_CONVERSATION_STATUS_REPLIED":     2,
		"TEACHER_CONVERSATION_STATUS_NOT_REPLIED": 3,
	}
)

func (x TeacherConversationStatus) Enum() *TeacherConversationStatus {
	p := new(TeacherConversationStatus)
	*p = x
	return p
}

func (x TeacherConversationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TeacherConversationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_tom_v1_enums_proto_enumTypes[7].Descriptor()
}

func (TeacherConversationStatus) Type() protoreflect.EnumType {
	return &file_tom_v1_enums_proto_enumTypes[7]
}

func (x TeacherConversationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TeacherConversationStatus.Descriptor instead.
func (TeacherConversationStatus) EnumDescriptor() ([]byte, []int) {
	return file_tom_v1_enums_proto_rawDescGZIP(), []int{7}
}

type ConversationJoinStatus int32

const (
	ConversationJoinStatus_CONVERSATION_JOIN_STATUS_NONE       ConversationJoinStatus = 0
	ConversationJoinStatus_CONVERSATION_JOIN_STATUS_JOINED     ConversationJoinStatus = 1
	ConversationJoinStatus_CONVERSATION_JOIN_STATUS_NOT_JOINED ConversationJoinStatus = 2
)

// Enum value maps for ConversationJoinStatus.
var (
	ConversationJoinStatus_name = map[int32]string{
		0: "CONVERSATION_JOIN_STATUS_NONE",
		1: "CONVERSATION_JOIN_STATUS_JOINED",
		2: "CONVERSATION_JOIN_STATUS_NOT_JOINED",
	}
	ConversationJoinStatus_value = map[string]int32{
		"CONVERSATION_JOIN_STATUS_NONE":       0,
		"CONVERSATION_JOIN_STATUS_JOINED":     1,
		"CONVERSATION_JOIN_STATUS_NOT_JOINED": 2,
	}
)

func (x ConversationJoinStatus) Enum() *ConversationJoinStatus {
	p := new(ConversationJoinStatus)
	*p = x
	return p
}

func (x ConversationJoinStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConversationJoinStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_tom_v1_enums_proto_enumTypes[8].Descriptor()
}

func (ConversationJoinStatus) Type() protoreflect.EnumType {
	return &file_tom_v1_enums_proto_enumTypes[8]
}

func (x ConversationJoinStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConversationJoinStatus.Descriptor instead.
func (ConversationJoinStatus) EnumDescriptor() ([]byte, []int) {
	return file_tom_v1_enums_proto_rawDescGZIP(), []int{8}
}

var File_tom_v1_enums_proto protoreflect.FileDescriptor

var file_tom_v1_enums_proto_rawDesc = []byte{
	0x0a, 0x12, 0x74, 0x6f, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x74, 0x6f, 0x6d, 0x2e, 0x76, 0x31, 0x2a, 0xbe, 0x01, 0x0a,
	0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x58,
	0x54, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x44, 0x45,
	0x4f, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x54,
	0x54, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x17, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x41, 0x43, 0x48, 0x5f, 0x41, 0x55, 0x54, 0x4f,
	0x10, 0x05, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x06, 0x2a, 0x40, 0x0a,
	0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16,
	0x0a, 0x12, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4e, 0x45, 0x57, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x01, 0x2a,
	0x92, 0x10, 0x0a, 0x10, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x1f, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x41, 0x43, 0x48,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x21, 0x0a,
	0x1d, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x50, 0x10, 0x01,
	0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x50,
	0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x54, 0x4e, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x5f, 0x53, 0x50, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x4f, 0x44, 0x45,
	0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x41, 0x52, 0x4b, 0x45, 0x44, 0x5f, 0x41, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x43,
	0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x54,
	0x10, 0x06, 0x12, 0x2e, 0x0a, 0x2a, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44,
	0x10, 0x07, 0x12, 0x28, 0x0a, 0x24, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x44, 0x5f,
	0x41, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x08, 0x12, 0x27, 0x0a, 0x23,
	0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x09, 0x12, 0x2b, 0x0a, 0x27, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x0a, 0x12, 0x28, 0x0a, 0x24, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x27, 0x0a, 0x23,
	0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49,
	0x52, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45,
	0x44, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x0d, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f,
	0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x0e, 0x12,
	0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x55, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x45, 0x46, 0x54,
	0x10, 0x0f, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x4f,
	0x56, 0x45, 0x10, 0x10, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f,
	0x4e, 0x45, 0x55, 0x54, 0x52, 0x41, 0x4c, 0x10, 0x11, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x44,
	0x45, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x41, 0x44, 0x10, 0x12, 0x12, 0x2a, 0x0a, 0x26, 0x43, 0x4f,
	0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x56, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x46, 0x49, 0x52, 0x53,
	0x54, 0x5f, 0x4c, 0x4f, 0x10, 0x13, 0x12, 0x2d, 0x0a, 0x29, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x56, 0x54,
	0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x54, 0x4f,
	0x50, 0x49, 0x43, 0x10, 0x14, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x44, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0x15, 0x12, 0x23, 0x0a, 0x1f, 0x43,
	0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0x16,
	0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x10, 0x17, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45,
	0x44, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0x18, 0x12, 0x24,
	0x0a, 0x20, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x4c, 0x45, 0x53, 0x53,
	0x4f, 0x4e, 0x10, 0x19, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x5f,
	0x4c, 0x45, 0x53, 0x53, 0x4f, 0x4e, 0x10, 0x1a, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x44, 0x45,
	0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x41, 0x49, 0x53, 0x45, 0x44, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x10, 0x1b, 0x12, 0x2d, 0x0a, 0x29,
	0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x50, 0x45, 0x41, 0x4b, 0x10, 0x1c, 0x12, 0x30, 0x0a, 0x2c, 0x43,
	0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x48, 0x49, 0x42, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x50, 0x45, 0x41, 0x4b, 0x10, 0x1d, 0x12, 0x2c, 0x0a,
	0x28, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x1e, 0x12, 0x2f, 0x0a, 0x2b, 0x43,
	0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x48, 0x49, 0x42, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x1f, 0x12, 0x24, 0x0a, 0x20,
	0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x50, 0x55, 0x54, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x4f, 0x57, 0x4e,
	0x10, 0x20, 0x12, 0x2e, 0x0a, 0x2a, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x45, 0x4e, 0x54,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x50, 0x45, 0x41, 0x4b,
	0x10, 0x21, 0x12, 0x2f, 0x0a, 0x2b, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x45, 0x4e, 0x54,
	0x5f, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x50, 0x45, 0x41,
	0x4b, 0x10, 0x22, 0x12, 0x31, 0x0a, 0x2d, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f,
	0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x53,
	0x50, 0x45, 0x41, 0x4b, 0x10, 0x23, 0x12, 0x34, 0x0a, 0x30, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x48, 0x49, 0x42, 0x49, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x50, 0x45, 0x41, 0x4b, 0x10, 0x24, 0x12, 0x33, 0x0a, 0x2f,
	0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x10,
	0x25, 0x12, 0x36, 0x0a, 0x32, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x48, 0x49, 0x42, 0x49, 0x54,
	0x5f, 0x53, 0x54, 0x55, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x57,
	0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x10, 0x26, 0x12, 0x2b, 0x0a, 0x27, 0x43, 0x4f, 0x44,
	0x45, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x48, 0x41, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x55,
	0x44, 0x45, 0x4e, 0x54, 0x10, 0x27, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41, 0x4e,
	0x44, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x45, 0x4e, 0x54, 0x10, 0x28, 0x12,
	0x26, 0x0a, 0x22, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x4c,
	0x45, 0x53, 0x53, 0x4f, 0x4e, 0x10, 0x29, 0x12, 0x2b, 0x0a, 0x27, 0x43, 0x4f, 0x44, 0x45, 0x53,
	0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x2a, 0x12, 0x2a, 0x0a, 0x26, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x45,
	0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x2b,
	0x12, 0x28, 0x0a, 0x24, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x45, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x56,
	0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x2c, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x4f,
	0x44, 0x45, 0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x2d, 0x12, 0x31, 0x0a, 0x2d, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x5f, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x41, 0x44, 0x44, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52,
	0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x2e, 0x12, 0x3a, 0x0a, 0x36, 0x43, 0x4f, 0x44, 0x45,
	0x53, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x53, 0x53,
	0x4f, 0x4e, 0x10, 0x2f, 0x2a, 0x51, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f,
	0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x56,
	0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x01, 0x2a, 0xce, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12,
	0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x41, 0x43, 0x48, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x43,
	0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x53, 0x53,
	0x4f, 0x4e, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x17,
	0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x41, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x56, 0x45,
	0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x4f, 0x4e, 0x5f, 0x50,
	0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x06, 0x2a, 0x9e, 0x03, 0x0a, 0x15, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x2e, 0x0a, 0x2a, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x55, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x10, 0x01, 0x12, 0x33, 0x0a, 0x2f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x50, 0x52, 0x4f, 0x48, 0x49, 0x42, 0x49, 0x54, 0x5f, 0x54,
	0x4f, 0x5f, 0x53, 0x50, 0x45, 0x41, 0x4b, 0x10, 0x02, 0x12, 0x2f, 0x0a, 0x2b, 0x43, 0x4f, 0x4e,
	0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x43, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x10, 0x03, 0x12, 0x2f, 0x0a, 0x2b, 0x43, 0x4f,
	0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x4e,
	0x53, 0x57, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x10, 0x04, 0x12, 0x33, 0x0a, 0x2f, 0x43,
	0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x44, 0x45,
	0x43, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x50, 0x45, 0x41, 0x4b, 0x10, 0x05,
	0x12, 0x39, 0x0a, 0x35, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f,
	0x57, 0x5f, 0x50, 0x52, 0x4f, 0x48, 0x49, 0x42, 0x49, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x48,
	0x4f, 0x57, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x10, 0x06, 0x12, 0x2c, 0x0a, 0x28, 0x43,
	0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x46, 0x5f,
	0x53, 0x54, 0x55, 0x44, 0x45, 0x4e, 0x54, 0x10, 0x07, 0x2a, 0xab, 0x06, 0x0a, 0x17, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x30, 0x0a, 0x2c, 0x43, 0x4f, 0x4e,
	0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x52,
	0x41, 0x49, 0x53, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x33, 0x0a, 0x2f, 0x43,
	0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x45, 0x4e, 0x54,
	0x5f, 0x50, 0x55, 0x54, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02,
	0x12, 0x27, 0x0a, 0x23, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x4f,
	0x4f, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x43, 0x4f, 0x4e,
	0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x5f, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x10, 0x04, 0x12, 0x34, 0x0a, 0x30, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x53, 0x54, 0x55, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x54,
	0x4f, 0x5f, 0x53, 0x50, 0x45, 0x41, 0x4b, 0x10, 0x05, 0x12, 0x37, 0x0a, 0x33, 0x43, 0x4f, 0x4e,
	0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x48, 0x49, 0x42, 0x49, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x50, 0x45, 0x41, 0x4b,
	0x10, 0x06, 0x12, 0x35, 0x0a, 0x31, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x53, 0x54, 0x55, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x54,
	0x4f, 0x5f, 0x53, 0x50, 0x45, 0x41, 0x4b, 0x10, 0x07, 0x12, 0x36, 0x0a, 0x32, 0x43, 0x4f, 0x4e,
	0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x44,
	0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x50, 0x45, 0x41, 0x4b, 0x10,
	0x08, 0x12, 0x38, 0x0a, 0x34, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41,
	0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x50, 0x45, 0x41, 0x4b, 0x10, 0x09, 0x12, 0x3b, 0x0a, 0x37, 0x43,
	0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x48, 0x49, 0x42, 0x49,
	0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x4f,
	0x5f, 0x53, 0x50, 0x45, 0x41, 0x4b, 0x10, 0x0a, 0x12, 0x3a, 0x0a, 0x36, 0x43, 0x4f, 0x4e, 0x56,
	0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x54, 0x55, 0x44,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x43, 0x41, 0x4d, 0x45,
	0x52, 0x41, 0x10, 0x0b, 0x12, 0x3d, 0x0a, 0x39, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x50, 0x52, 0x4f, 0x48, 0x49, 0x42, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x48, 0x4f, 0x57, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52,
	0x41, 0x10, 0x0c, 0x12, 0x32, 0x0a, 0x2e, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x48, 0x41, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x54,
	0x55, 0x44, 0x45, 0x4e, 0x54, 0x10, 0x0d, 0x12, 0x2e, 0x0a, 0x2a, 0x43, 0x4f, 0x4e, 0x56, 0x45,
	0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x53, 0x54,
	0x55, 0x44, 0x45, 0x4e, 0x54, 0x10, 0x0e, 0x2a, 0xbc, 0x01, 0x0a, 0x19, 0x54, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x45, 0x41, 0x43, 0x48, 0x45, 0x52,
	0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x54,
	0x45, 0x41, 0x43, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x01,
	0x12, 0x27, 0x0a, 0x23, 0x54, 0x45, 0x41, 0x43, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x56,
	0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x52, 0x45, 0x50, 0x4c, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x54, 0x45, 0x41,
	0x43, 0x48, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x49, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x89, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x4f, 0x4e,
	0x56, 0x45, 0x52, 0x53, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x45, 0x44,
	0x10, 0x02, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x62, 0x69, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x6f, 0x6d, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_tom_v1_enums_proto_rawDescOnce sync.Once
	file_tom_v1_enums_proto_rawDescData = file_tom_v1_enums_proto_rawDesc
)

func file_tom_v1_enums_proto_rawDescGZIP() []byte {
	file_tom_v1_enums_proto_rawDescOnce.Do(func() {
		file_tom_v1_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_tom_v1_enums_proto_rawDescData)
	})
	return file_tom_v1_enums_proto_rawDescData
}

var file_tom_v1_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_tom_v1_enums_proto_goTypes = []interface{}{
	(MessageType)(0),               // 0: tom.v1.MessageType
	(MessageStatus)(0),             // 1: tom.v1.MessageStatus
	(CodesMessageType)(0),          // 2: tom.v1.CodesMessageType
	(ConversationStatus)(0),        // 3: tom.v1.ConversationStatus
	(ConversationType)(0),          // 4: tom.v1.ConversationType
	(ConversationEventType)(0),     // 5: tom.v1.ConversationEventType
	(ConversationEventStatus)(0),   // 6: tom.v1.ConversationEventStatus
	(TeacherConversationStatus)(0), // 7: tom.v1.TeacherConversationStatus
	(ConversationJoinStatus)(0),    // 8: tom.v1.ConversationJoinStatus
}
var file_tom_v1_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_tom_v1_enums_proto_init() }
func file_tom_v1_enums_proto_init() {
	if File_tom_v1_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tom_v1_enums_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tom_v1_enums_proto_goTypes,
		DependencyIndexes: file_tom_v1_enums_proto_depIdxs,
		EnumInfos:         file_tom_v1_enums_proto_enumTypes,
	}.Build()
	File_tom_v1_enums_proto = out.File
	file_tom_v1_enums_proto_rawDesc = nil
	file_tom_v1_enums_proto_goTypes = nil
	file_tom_v1_enums_proto_depIdxs = nil
}
