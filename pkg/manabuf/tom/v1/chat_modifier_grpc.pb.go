// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ChatModifierServiceClient is the client API for ChatModifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatModifierServiceClient interface {
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ChatModifierService_SubscribeClient, error)
	PingSubscribe(ctx context.Context, in *PingSubscribeRequest, opts ...grpc.CallOption) (*PingSubscribeResponse, error)
	GetConversation(ctx context.Context, in *GetConversationRequest, opts ...grpc.CallOption) (*GetConversationResponse, error)
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	SeenMessage(ctx context.Context, in *SeenMessageRequest, opts ...grpc.CallOption) (*SeenMessageResponse, error)
	DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error)
	TeacherProhibitAllStudentToChat(ctx context.Context, in *TeacherProhibitAllStudentToChatRequest, opts ...grpc.CallOption) (*TeacherProhibitAllStudentToChatResponse, error)
	TeacherAllowAllStudentToChat(ctx context.Context, in *TeacherAllowAllStudentToChatRequest, opts ...grpc.CallOption) (*TeacherAllowAllStudentToChatResponse, error)
	TeacherAllowStudentToSpeak(ctx context.Context, in *TeacherAllowStudentToSpeakRequest, opts ...grpc.CallOption) (*TeacherAllowStudentToSpeakResponse, error)
	TeacherProhibitStudentToSpeak(ctx context.Context, in *TeacherProhibitStudentToSpeakRequest, opts ...grpc.CallOption) (*TeacherProhibitStudentToSpeakResponse, error)
	StudentAcceptToSpeak(ctx context.Context, in *StudentAcceptToSpeakRequest, opts ...grpc.CallOption) (*StudentAcceptToSpeakResponse, error)
	StudentDeclineToSpeak(ctx context.Context, in *StudentDeclineToSpeakRequest, opts ...grpc.CallOption) (*StudentDeclineToSpeakResponse, error)
	StudentRaiseHand(ctx context.Context, in *StudentRaiseHandRequest, opts ...grpc.CallOption) (*StudentRaiseHandResponse, error)
	StudentPutHandDown(ctx context.Context, in *StudentPutHandDownRequest, opts ...grpc.CallOption) (*StudentPutHandDownResponse, error)
	TeacherAllowStudentToShowCamera(ctx context.Context, in *TeacherAllowStudentToShowCameraRequest, opts ...grpc.CallOption) (*TeacherAllowStudentToShowCameraResponse, error)
	TeacherProhibitStudentToShowCamera(ctx context.Context, in *TeacherProhibitStudentToShowCameraRequest, opts ...grpc.CallOption) (*TeacherProhibitStudentToShowCameraResponse, error)
	TeacherAllowAllStudentToSpeak(ctx context.Context, in *TeacherAllowAllStudentToSpeakRequest, opts ...grpc.CallOption) (*TeacherAllowAllStudentToSpeakResponse, error)
	TeacherProhibitAllStudentToSpeak(ctx context.Context, in *TeacherProhibitAllStudentToSpeakRequest, opts ...grpc.CallOption) (*TeacherProhibitAllStudentToSpeakResponse, error)
	TeacherHandOffAllStudent(ctx context.Context, in *TeacherHandOffAllStudentRequest, opts ...grpc.CallOption) (*TeacherHandOffAllStudentResponse, error)
	TeacherHandOffStudent(ctx context.Context, in *TeacherHandOffStudentRequest, opts ...grpc.CallOption) (*TeacherHandOffStudentResponse, error)
	JoinConversations(ctx context.Context, in *JoinConversationsRequest, opts ...grpc.CallOption) (*JoinConversationsResponse, error)
	JoinAllConversations(ctx context.Context, in *JoinAllConversationRequest, opts ...grpc.CallOption) (*JoinAllConversationResponse, error)
	JoinAllConversationsWithLocations(ctx context.Context, in *JoinAllConversationRequest, opts ...grpc.CallOption) (*JoinAllConversationResponse, error)
	LeaveConversations(ctx context.Context, in *LeaveConversationsRequest, opts ...grpc.CallOption) (*LeaveConversationsResponse, error)
}

type chatModifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatModifierServiceClient(cc grpc.ClientConnInterface) ChatModifierServiceClient {
	return &chatModifierServiceClient{cc}
}

func (c *chatModifierServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ChatModifierService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatModifierService_serviceDesc.Streams[0], "/tom.v1.ChatModifierService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatModifierServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatModifierService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type chatModifierServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *chatModifierServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatModifierServiceClient) PingSubscribe(ctx context.Context, in *PingSubscribeRequest, opts ...grpc.CallOption) (*PingSubscribeResponse, error) {
	out := new(PingSubscribeResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatModifierService/PingSubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModifierServiceClient) GetConversation(ctx context.Context, in *GetConversationRequest, opts ...grpc.CallOption) (*GetConversationResponse, error) {
	out := new(GetConversationResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatModifierService/GetConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModifierServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatModifierService/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModifierServiceClient) SeenMessage(ctx context.Context, in *SeenMessageRequest, opts ...grpc.CallOption) (*SeenMessageResponse, error) {
	out := new(SeenMessageResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatModifierService/SeenMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModifierServiceClient) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error) {
	out := new(DeleteMessageResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatModifierService/DeleteMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModifierServiceClient) TeacherProhibitAllStudentToChat(ctx context.Context, in *TeacherProhibitAllStudentToChatRequest, opts ...grpc.CallOption) (*TeacherProhibitAllStudentToChatResponse, error) {
	out := new(TeacherProhibitAllStudentToChatResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatModifierService/TeacherProhibitAllStudentToChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModifierServiceClient) TeacherAllowAllStudentToChat(ctx context.Context, in *TeacherAllowAllStudentToChatRequest, opts ...grpc.CallOption) (*TeacherAllowAllStudentToChatResponse, error) {
	out := new(TeacherAllowAllStudentToChatResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatModifierService/TeacherAllowAllStudentToChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModifierServiceClient) TeacherAllowStudentToSpeak(ctx context.Context, in *TeacherAllowStudentToSpeakRequest, opts ...grpc.CallOption) (*TeacherAllowStudentToSpeakResponse, error) {
	out := new(TeacherAllowStudentToSpeakResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatModifierService/TeacherAllowStudentToSpeak", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModifierServiceClient) TeacherProhibitStudentToSpeak(ctx context.Context, in *TeacherProhibitStudentToSpeakRequest, opts ...grpc.CallOption) (*TeacherProhibitStudentToSpeakResponse, error) {
	out := new(TeacherProhibitStudentToSpeakResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatModifierService/TeacherProhibitStudentToSpeak", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModifierServiceClient) StudentAcceptToSpeak(ctx context.Context, in *StudentAcceptToSpeakRequest, opts ...grpc.CallOption) (*StudentAcceptToSpeakResponse, error) {
	out := new(StudentAcceptToSpeakResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatModifierService/StudentAcceptToSpeak", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModifierServiceClient) StudentDeclineToSpeak(ctx context.Context, in *StudentDeclineToSpeakRequest, opts ...grpc.CallOption) (*StudentDeclineToSpeakResponse, error) {
	out := new(StudentDeclineToSpeakResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatModifierService/StudentDeclineToSpeak", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModifierServiceClient) StudentRaiseHand(ctx context.Context, in *StudentRaiseHandRequest, opts ...grpc.CallOption) (*StudentRaiseHandResponse, error) {
	out := new(StudentRaiseHandResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatModifierService/StudentRaiseHand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModifierServiceClient) StudentPutHandDown(ctx context.Context, in *StudentPutHandDownRequest, opts ...grpc.CallOption) (*StudentPutHandDownResponse, error) {
	out := new(StudentPutHandDownResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatModifierService/StudentPutHandDown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModifierServiceClient) TeacherAllowStudentToShowCamera(ctx context.Context, in *TeacherAllowStudentToShowCameraRequest, opts ...grpc.CallOption) (*TeacherAllowStudentToShowCameraResponse, error) {
	out := new(TeacherAllowStudentToShowCameraResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatModifierService/TeacherAllowStudentToShowCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModifierServiceClient) TeacherProhibitStudentToShowCamera(ctx context.Context, in *TeacherProhibitStudentToShowCameraRequest, opts ...grpc.CallOption) (*TeacherProhibitStudentToShowCameraResponse, error) {
	out := new(TeacherProhibitStudentToShowCameraResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatModifierService/TeacherProhibitStudentToShowCamera", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModifierServiceClient) TeacherAllowAllStudentToSpeak(ctx context.Context, in *TeacherAllowAllStudentToSpeakRequest, opts ...grpc.CallOption) (*TeacherAllowAllStudentToSpeakResponse, error) {
	out := new(TeacherAllowAllStudentToSpeakResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatModifierService/TeacherAllowAllStudentToSpeak", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModifierServiceClient) TeacherProhibitAllStudentToSpeak(ctx context.Context, in *TeacherProhibitAllStudentToSpeakRequest, opts ...grpc.CallOption) (*TeacherProhibitAllStudentToSpeakResponse, error) {
	out := new(TeacherProhibitAllStudentToSpeakResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatModifierService/TeacherProhibitAllStudentToSpeak", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModifierServiceClient) TeacherHandOffAllStudent(ctx context.Context, in *TeacherHandOffAllStudentRequest, opts ...grpc.CallOption) (*TeacherHandOffAllStudentResponse, error) {
	out := new(TeacherHandOffAllStudentResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatModifierService/TeacherHandOffAllStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModifierServiceClient) TeacherHandOffStudent(ctx context.Context, in *TeacherHandOffStudentRequest, opts ...grpc.CallOption) (*TeacherHandOffStudentResponse, error) {
	out := new(TeacherHandOffStudentResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatModifierService/TeacherHandOffStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModifierServiceClient) JoinConversations(ctx context.Context, in *JoinConversationsRequest, opts ...grpc.CallOption) (*JoinConversationsResponse, error) {
	out := new(JoinConversationsResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatModifierService/JoinConversations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModifierServiceClient) JoinAllConversations(ctx context.Context, in *JoinAllConversationRequest, opts ...grpc.CallOption) (*JoinAllConversationResponse, error) {
	out := new(JoinAllConversationResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatModifierService/JoinAllConversations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModifierServiceClient) JoinAllConversationsWithLocations(ctx context.Context, in *JoinAllConversationRequest, opts ...grpc.CallOption) (*JoinAllConversationResponse, error) {
	out := new(JoinAllConversationResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatModifierService/JoinAllConversationsWithLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatModifierServiceClient) LeaveConversations(ctx context.Context, in *LeaveConversationsRequest, opts ...grpc.CallOption) (*LeaveConversationsResponse, error) {
	out := new(LeaveConversationsResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatModifierService/LeaveConversations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatModifierServiceServer is the server API for ChatModifierService service.
// All implementations should embed UnimplementedChatModifierServiceServer
// for forward compatibility
type ChatModifierServiceServer interface {
	Subscribe(*SubscribeRequest, ChatModifierService_SubscribeServer) error
	PingSubscribe(context.Context, *PingSubscribeRequest) (*PingSubscribeResponse, error)
	GetConversation(context.Context, *GetConversationRequest) (*GetConversationResponse, error)
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	SeenMessage(context.Context, *SeenMessageRequest) (*SeenMessageResponse, error)
	DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error)
	TeacherProhibitAllStudentToChat(context.Context, *TeacherProhibitAllStudentToChatRequest) (*TeacherProhibitAllStudentToChatResponse, error)
	TeacherAllowAllStudentToChat(context.Context, *TeacherAllowAllStudentToChatRequest) (*TeacherAllowAllStudentToChatResponse, error)
	TeacherAllowStudentToSpeak(context.Context, *TeacherAllowStudentToSpeakRequest) (*TeacherAllowStudentToSpeakResponse, error)
	TeacherProhibitStudentToSpeak(context.Context, *TeacherProhibitStudentToSpeakRequest) (*TeacherProhibitStudentToSpeakResponse, error)
	StudentAcceptToSpeak(context.Context, *StudentAcceptToSpeakRequest) (*StudentAcceptToSpeakResponse, error)
	StudentDeclineToSpeak(context.Context, *StudentDeclineToSpeakRequest) (*StudentDeclineToSpeakResponse, error)
	StudentRaiseHand(context.Context, *StudentRaiseHandRequest) (*StudentRaiseHandResponse, error)
	StudentPutHandDown(context.Context, *StudentPutHandDownRequest) (*StudentPutHandDownResponse, error)
	TeacherAllowStudentToShowCamera(context.Context, *TeacherAllowStudentToShowCameraRequest) (*TeacherAllowStudentToShowCameraResponse, error)
	TeacherProhibitStudentToShowCamera(context.Context, *TeacherProhibitStudentToShowCameraRequest) (*TeacherProhibitStudentToShowCameraResponse, error)
	TeacherAllowAllStudentToSpeak(context.Context, *TeacherAllowAllStudentToSpeakRequest) (*TeacherAllowAllStudentToSpeakResponse, error)
	TeacherProhibitAllStudentToSpeak(context.Context, *TeacherProhibitAllStudentToSpeakRequest) (*TeacherProhibitAllStudentToSpeakResponse, error)
	TeacherHandOffAllStudent(context.Context, *TeacherHandOffAllStudentRequest) (*TeacherHandOffAllStudentResponse, error)
	TeacherHandOffStudent(context.Context, *TeacherHandOffStudentRequest) (*TeacherHandOffStudentResponse, error)
	JoinConversations(context.Context, *JoinConversationsRequest) (*JoinConversationsResponse, error)
	JoinAllConversations(context.Context, *JoinAllConversationRequest) (*JoinAllConversationResponse, error)
	JoinAllConversationsWithLocations(context.Context, *JoinAllConversationRequest) (*JoinAllConversationResponse, error)
	LeaveConversations(context.Context, *LeaveConversationsRequest) (*LeaveConversationsResponse, error)
}

// UnimplementedChatModifierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChatModifierServiceServer struct {
}

func (UnimplementedChatModifierServiceServer) Subscribe(*SubscribeRequest, ChatModifierService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedChatModifierServiceServer) PingSubscribe(context.Context, *PingSubscribeRequest) (*PingSubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingSubscribe not implemented")
}
func (UnimplementedChatModifierServiceServer) GetConversation(context.Context, *GetConversationRequest) (*GetConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversation not implemented")
}
func (UnimplementedChatModifierServiceServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedChatModifierServiceServer) SeenMessage(context.Context, *SeenMessageRequest) (*SeenMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SeenMessage not implemented")
}
func (UnimplementedChatModifierServiceServer) DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedChatModifierServiceServer) TeacherProhibitAllStudentToChat(context.Context, *TeacherProhibitAllStudentToChatRequest) (*TeacherProhibitAllStudentToChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherProhibitAllStudentToChat not implemented")
}
func (UnimplementedChatModifierServiceServer) TeacherAllowAllStudentToChat(context.Context, *TeacherAllowAllStudentToChatRequest) (*TeacherAllowAllStudentToChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherAllowAllStudentToChat not implemented")
}
func (UnimplementedChatModifierServiceServer) TeacherAllowStudentToSpeak(context.Context, *TeacherAllowStudentToSpeakRequest) (*TeacherAllowStudentToSpeakResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherAllowStudentToSpeak not implemented")
}
func (UnimplementedChatModifierServiceServer) TeacherProhibitStudentToSpeak(context.Context, *TeacherProhibitStudentToSpeakRequest) (*TeacherProhibitStudentToSpeakResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherProhibitStudentToSpeak not implemented")
}
func (UnimplementedChatModifierServiceServer) StudentAcceptToSpeak(context.Context, *StudentAcceptToSpeakRequest) (*StudentAcceptToSpeakResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StudentAcceptToSpeak not implemented")
}
func (UnimplementedChatModifierServiceServer) StudentDeclineToSpeak(context.Context, *StudentDeclineToSpeakRequest) (*StudentDeclineToSpeakResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StudentDeclineToSpeak not implemented")
}
func (UnimplementedChatModifierServiceServer) StudentRaiseHand(context.Context, *StudentRaiseHandRequest) (*StudentRaiseHandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StudentRaiseHand not implemented")
}
func (UnimplementedChatModifierServiceServer) StudentPutHandDown(context.Context, *StudentPutHandDownRequest) (*StudentPutHandDownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StudentPutHandDown not implemented")
}
func (UnimplementedChatModifierServiceServer) TeacherAllowStudentToShowCamera(context.Context, *TeacherAllowStudentToShowCameraRequest) (*TeacherAllowStudentToShowCameraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherAllowStudentToShowCamera not implemented")
}
func (UnimplementedChatModifierServiceServer) TeacherProhibitStudentToShowCamera(context.Context, *TeacherProhibitStudentToShowCameraRequest) (*TeacherProhibitStudentToShowCameraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherProhibitStudentToShowCamera not implemented")
}
func (UnimplementedChatModifierServiceServer) TeacherAllowAllStudentToSpeak(context.Context, *TeacherAllowAllStudentToSpeakRequest) (*TeacherAllowAllStudentToSpeakResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherAllowAllStudentToSpeak not implemented")
}
func (UnimplementedChatModifierServiceServer) TeacherProhibitAllStudentToSpeak(context.Context, *TeacherProhibitAllStudentToSpeakRequest) (*TeacherProhibitAllStudentToSpeakResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherProhibitAllStudentToSpeak not implemented")
}
func (UnimplementedChatModifierServiceServer) TeacherHandOffAllStudent(context.Context, *TeacherHandOffAllStudentRequest) (*TeacherHandOffAllStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherHandOffAllStudent not implemented")
}
func (UnimplementedChatModifierServiceServer) TeacherHandOffStudent(context.Context, *TeacherHandOffStudentRequest) (*TeacherHandOffStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeacherHandOffStudent not implemented")
}
func (UnimplementedChatModifierServiceServer) JoinConversations(context.Context, *JoinConversationsRequest) (*JoinConversationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinConversations not implemented")
}
func (UnimplementedChatModifierServiceServer) JoinAllConversations(context.Context, *JoinAllConversationRequest) (*JoinAllConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinAllConversations not implemented")
}
func (UnimplementedChatModifierServiceServer) JoinAllConversationsWithLocations(context.Context, *JoinAllConversationRequest) (*JoinAllConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinAllConversationsWithLocations not implemented")
}
func (UnimplementedChatModifierServiceServer) LeaveConversations(context.Context, *LeaveConversationsRequest) (*LeaveConversationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveConversations not implemented")
}

// UnsafeChatModifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatModifierServiceServer will
// result in compilation errors.
type UnsafeChatModifierServiceServer interface {
	mustEmbedUnimplementedChatModifierServiceServer()
}

func RegisterChatModifierServiceServer(s grpc.ServiceRegistrar, srv ChatModifierServiceServer) {
	s.RegisterService(&_ChatModifierService_serviceDesc, srv)
}

func _ChatModifierService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatModifierServiceServer).Subscribe(m, &chatModifierServiceSubscribeServer{stream})
}

type ChatModifierService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type chatModifierServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *chatModifierServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatModifierService_PingSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingSubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModifierServiceServer).PingSubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatModifierService/PingSubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModifierServiceServer).PingSubscribe(ctx, req.(*PingSubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModifierService_GetConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModifierServiceServer).GetConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatModifierService/GetConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModifierServiceServer).GetConversation(ctx, req.(*GetConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModifierService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModifierServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatModifierService/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModifierServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModifierService_SeenMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeenMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModifierServiceServer).SeenMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatModifierService/SeenMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModifierServiceServer).SeenMessage(ctx, req.(*SeenMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModifierService_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModifierServiceServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatModifierService/DeleteMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModifierServiceServer).DeleteMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModifierService_TeacherProhibitAllStudentToChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeacherProhibitAllStudentToChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModifierServiceServer).TeacherProhibitAllStudentToChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatModifierService/TeacherProhibitAllStudentToChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModifierServiceServer).TeacherProhibitAllStudentToChat(ctx, req.(*TeacherProhibitAllStudentToChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModifierService_TeacherAllowAllStudentToChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeacherAllowAllStudentToChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModifierServiceServer).TeacherAllowAllStudentToChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatModifierService/TeacherAllowAllStudentToChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModifierServiceServer).TeacherAllowAllStudentToChat(ctx, req.(*TeacherAllowAllStudentToChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModifierService_TeacherAllowStudentToSpeak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeacherAllowStudentToSpeakRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModifierServiceServer).TeacherAllowStudentToSpeak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatModifierService/TeacherAllowStudentToSpeak",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModifierServiceServer).TeacherAllowStudentToSpeak(ctx, req.(*TeacherAllowStudentToSpeakRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModifierService_TeacherProhibitStudentToSpeak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeacherProhibitStudentToSpeakRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModifierServiceServer).TeacherProhibitStudentToSpeak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatModifierService/TeacherProhibitStudentToSpeak",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModifierServiceServer).TeacherProhibitStudentToSpeak(ctx, req.(*TeacherProhibitStudentToSpeakRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModifierService_StudentAcceptToSpeak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentAcceptToSpeakRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModifierServiceServer).StudentAcceptToSpeak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatModifierService/StudentAcceptToSpeak",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModifierServiceServer).StudentAcceptToSpeak(ctx, req.(*StudentAcceptToSpeakRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModifierService_StudentDeclineToSpeak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentDeclineToSpeakRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModifierServiceServer).StudentDeclineToSpeak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatModifierService/StudentDeclineToSpeak",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModifierServiceServer).StudentDeclineToSpeak(ctx, req.(*StudentDeclineToSpeakRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModifierService_StudentRaiseHand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentRaiseHandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModifierServiceServer).StudentRaiseHand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatModifierService/StudentRaiseHand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModifierServiceServer).StudentRaiseHand(ctx, req.(*StudentRaiseHandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModifierService_StudentPutHandDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentPutHandDownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModifierServiceServer).StudentPutHandDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatModifierService/StudentPutHandDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModifierServiceServer).StudentPutHandDown(ctx, req.(*StudentPutHandDownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModifierService_TeacherAllowStudentToShowCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeacherAllowStudentToShowCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModifierServiceServer).TeacherAllowStudentToShowCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatModifierService/TeacherAllowStudentToShowCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModifierServiceServer).TeacherAllowStudentToShowCamera(ctx, req.(*TeacherAllowStudentToShowCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModifierService_TeacherProhibitStudentToShowCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeacherProhibitStudentToShowCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModifierServiceServer).TeacherProhibitStudentToShowCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatModifierService/TeacherProhibitStudentToShowCamera",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModifierServiceServer).TeacherProhibitStudentToShowCamera(ctx, req.(*TeacherProhibitStudentToShowCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModifierService_TeacherAllowAllStudentToSpeak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeacherAllowAllStudentToSpeakRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModifierServiceServer).TeacherAllowAllStudentToSpeak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatModifierService/TeacherAllowAllStudentToSpeak",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModifierServiceServer).TeacherAllowAllStudentToSpeak(ctx, req.(*TeacherAllowAllStudentToSpeakRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModifierService_TeacherProhibitAllStudentToSpeak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeacherProhibitAllStudentToSpeakRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModifierServiceServer).TeacherProhibitAllStudentToSpeak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatModifierService/TeacherProhibitAllStudentToSpeak",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModifierServiceServer).TeacherProhibitAllStudentToSpeak(ctx, req.(*TeacherProhibitAllStudentToSpeakRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModifierService_TeacherHandOffAllStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeacherHandOffAllStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModifierServiceServer).TeacherHandOffAllStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatModifierService/TeacherHandOffAllStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModifierServiceServer).TeacherHandOffAllStudent(ctx, req.(*TeacherHandOffAllStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModifierService_TeacherHandOffStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeacherHandOffStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModifierServiceServer).TeacherHandOffStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatModifierService/TeacherHandOffStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModifierServiceServer).TeacherHandOffStudent(ctx, req.(*TeacherHandOffStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModifierService_JoinConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinConversationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModifierServiceServer).JoinConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatModifierService/JoinConversations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModifierServiceServer).JoinConversations(ctx, req.(*JoinConversationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModifierService_JoinAllConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinAllConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModifierServiceServer).JoinAllConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatModifierService/JoinAllConversations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModifierServiceServer).JoinAllConversations(ctx, req.(*JoinAllConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModifierService_JoinAllConversationsWithLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinAllConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModifierServiceServer).JoinAllConversationsWithLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatModifierService/JoinAllConversationsWithLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModifierServiceServer).JoinAllConversationsWithLocations(ctx, req.(*JoinAllConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatModifierService_LeaveConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveConversationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatModifierServiceServer).LeaveConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatModifierService/LeaveConversations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatModifierServiceServer).LeaveConversations(ctx, req.(*LeaveConversationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatModifierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tom.v1.ChatModifierService",
	HandlerType: (*ChatModifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingSubscribe",
			Handler:    _ChatModifierService_PingSubscribe_Handler,
		},
		{
			MethodName: "GetConversation",
			Handler:    _ChatModifierService_GetConversation_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _ChatModifierService_SendMessage_Handler,
		},
		{
			MethodName: "SeenMessage",
			Handler:    _ChatModifierService_SeenMessage_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _ChatModifierService_DeleteMessage_Handler,
		},
		{
			MethodName: "TeacherProhibitAllStudentToChat",
			Handler:    _ChatModifierService_TeacherProhibitAllStudentToChat_Handler,
		},
		{
			MethodName: "TeacherAllowAllStudentToChat",
			Handler:    _ChatModifierService_TeacherAllowAllStudentToChat_Handler,
		},
		{
			MethodName: "TeacherAllowStudentToSpeak",
			Handler:    _ChatModifierService_TeacherAllowStudentToSpeak_Handler,
		},
		{
			MethodName: "TeacherProhibitStudentToSpeak",
			Handler:    _ChatModifierService_TeacherProhibitStudentToSpeak_Handler,
		},
		{
			MethodName: "StudentAcceptToSpeak",
			Handler:    _ChatModifierService_StudentAcceptToSpeak_Handler,
		},
		{
			MethodName: "StudentDeclineToSpeak",
			Handler:    _ChatModifierService_StudentDeclineToSpeak_Handler,
		},
		{
			MethodName: "StudentRaiseHand",
			Handler:    _ChatModifierService_StudentRaiseHand_Handler,
		},
		{
			MethodName: "StudentPutHandDown",
			Handler:    _ChatModifierService_StudentPutHandDown_Handler,
		},
		{
			MethodName: "TeacherAllowStudentToShowCamera",
			Handler:    _ChatModifierService_TeacherAllowStudentToShowCamera_Handler,
		},
		{
			MethodName: "TeacherProhibitStudentToShowCamera",
			Handler:    _ChatModifierService_TeacherProhibitStudentToShowCamera_Handler,
		},
		{
			MethodName: "TeacherAllowAllStudentToSpeak",
			Handler:    _ChatModifierService_TeacherAllowAllStudentToSpeak_Handler,
		},
		{
			MethodName: "TeacherProhibitAllStudentToSpeak",
			Handler:    _ChatModifierService_TeacherProhibitAllStudentToSpeak_Handler,
		},
		{
			MethodName: "TeacherHandOffAllStudent",
			Handler:    _ChatModifierService_TeacherHandOffAllStudent_Handler,
		},
		{
			MethodName: "TeacherHandOffStudent",
			Handler:    _ChatModifierService_TeacherHandOffStudent_Handler,
		},
		{
			MethodName: "JoinConversations",
			Handler:    _ChatModifierService_JoinConversations_Handler,
		},
		{
			MethodName: "JoinAllConversations",
			Handler:    _ChatModifierService_JoinAllConversations_Handler,
		},
		{
			MethodName: "JoinAllConversationsWithLocations",
			Handler:    _ChatModifierService_JoinAllConversationsWithLocations_Handler,
		},
		{
			MethodName: "LeaveConversations",
			Handler:    _ChatModifierService_LeaveConversations_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _ChatModifierService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tom/v1/chat_modifier.proto",
}
