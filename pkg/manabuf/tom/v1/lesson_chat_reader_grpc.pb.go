// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LessonChatReaderServiceClient is the client API for LessonChatReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LessonChatReaderServiceClient interface {
	RefreshLiveLessonSession(ctx context.Context, in *RefreshLiveLessonSessionRequest, opts ...grpc.CallOption) (*RefreshLiveLessonSessionResponse, error)
	LiveLessonConversationDetail(ctx context.Context, in *LiveLessonConversationDetailRequest, opts ...grpc.CallOption) (*LiveLessonConversationDetailResponse, error)
	LiveLessonConversationMessages(ctx context.Context, in *LiveLessonConversationMessagesRequest, opts ...grpc.CallOption) (*LiveLessonConversationMessagesResponse, error)
	LiveLessonPrivateConversationMessages(ctx context.Context, in *LiveLessonPrivateConversationMessagesRequest, opts ...grpc.CallOption) (*LiveLessonPrivateConversationMessagesResponse, error)
}

type lessonChatReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLessonChatReaderServiceClient(cc grpc.ClientConnInterface) LessonChatReaderServiceClient {
	return &lessonChatReaderServiceClient{cc}
}

func (c *lessonChatReaderServiceClient) RefreshLiveLessonSession(ctx context.Context, in *RefreshLiveLessonSessionRequest, opts ...grpc.CallOption) (*RefreshLiveLessonSessionResponse, error) {
	out := new(RefreshLiveLessonSessionResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.LessonChatReaderService/RefreshLiveLessonSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonChatReaderServiceClient) LiveLessonConversationDetail(ctx context.Context, in *LiveLessonConversationDetailRequest, opts ...grpc.CallOption) (*LiveLessonConversationDetailResponse, error) {
	out := new(LiveLessonConversationDetailResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.LessonChatReaderService/LiveLessonConversationDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonChatReaderServiceClient) LiveLessonConversationMessages(ctx context.Context, in *LiveLessonConversationMessagesRequest, opts ...grpc.CallOption) (*LiveLessonConversationMessagesResponse, error) {
	out := new(LiveLessonConversationMessagesResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.LessonChatReaderService/LiveLessonConversationMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonChatReaderServiceClient) LiveLessonPrivateConversationMessages(ctx context.Context, in *LiveLessonPrivateConversationMessagesRequest, opts ...grpc.CallOption) (*LiveLessonPrivateConversationMessagesResponse, error) {
	out := new(LiveLessonPrivateConversationMessagesResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.LessonChatReaderService/LiveLessonPrivateConversationMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LessonChatReaderServiceServer is the server API for LessonChatReaderService service.
// All implementations should embed UnimplementedLessonChatReaderServiceServer
// for forward compatibility
type LessonChatReaderServiceServer interface {
	RefreshLiveLessonSession(context.Context, *RefreshLiveLessonSessionRequest) (*RefreshLiveLessonSessionResponse, error)
	LiveLessonConversationDetail(context.Context, *LiveLessonConversationDetailRequest) (*LiveLessonConversationDetailResponse, error)
	LiveLessonConversationMessages(context.Context, *LiveLessonConversationMessagesRequest) (*LiveLessonConversationMessagesResponse, error)
	LiveLessonPrivateConversationMessages(context.Context, *LiveLessonPrivateConversationMessagesRequest) (*LiveLessonPrivateConversationMessagesResponse, error)
}

// UnimplementedLessonChatReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLessonChatReaderServiceServer struct {
}

func (UnimplementedLessonChatReaderServiceServer) RefreshLiveLessonSession(context.Context, *RefreshLiveLessonSessionRequest) (*RefreshLiveLessonSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshLiveLessonSession not implemented")
}
func (UnimplementedLessonChatReaderServiceServer) LiveLessonConversationDetail(context.Context, *LiveLessonConversationDetailRequest) (*LiveLessonConversationDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveLessonConversationDetail not implemented")
}
func (UnimplementedLessonChatReaderServiceServer) LiveLessonConversationMessages(context.Context, *LiveLessonConversationMessagesRequest) (*LiveLessonConversationMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveLessonConversationMessages not implemented")
}
func (UnimplementedLessonChatReaderServiceServer) LiveLessonPrivateConversationMessages(context.Context, *LiveLessonPrivateConversationMessagesRequest) (*LiveLessonPrivateConversationMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveLessonPrivateConversationMessages not implemented")
}

// UnsafeLessonChatReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LessonChatReaderServiceServer will
// result in compilation errors.
type UnsafeLessonChatReaderServiceServer interface {
	mustEmbedUnimplementedLessonChatReaderServiceServer()
}

func RegisterLessonChatReaderServiceServer(s grpc.ServiceRegistrar, srv LessonChatReaderServiceServer) {
	s.RegisterService(&_LessonChatReaderService_serviceDesc, srv)
}

func _LessonChatReaderService_RefreshLiveLessonSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshLiveLessonSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonChatReaderServiceServer).RefreshLiveLessonSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.LessonChatReaderService/RefreshLiveLessonSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonChatReaderServiceServer).RefreshLiveLessonSession(ctx, req.(*RefreshLiveLessonSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonChatReaderService_LiveLessonConversationDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveLessonConversationDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonChatReaderServiceServer).LiveLessonConversationDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.LessonChatReaderService/LiveLessonConversationDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonChatReaderServiceServer).LiveLessonConversationDetail(ctx, req.(*LiveLessonConversationDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonChatReaderService_LiveLessonConversationMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveLessonConversationMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonChatReaderServiceServer).LiveLessonConversationMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.LessonChatReaderService/LiveLessonConversationMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonChatReaderServiceServer).LiveLessonConversationMessages(ctx, req.(*LiveLessonConversationMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonChatReaderService_LiveLessonPrivateConversationMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveLessonPrivateConversationMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonChatReaderServiceServer).LiveLessonPrivateConversationMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.LessonChatReaderService/LiveLessonPrivateConversationMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonChatReaderServiceServer).LiveLessonPrivateConversationMessages(ctx, req.(*LiveLessonPrivateConversationMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LessonChatReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tom.v1.LessonChatReaderService",
	HandlerType: (*LessonChatReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RefreshLiveLessonSession",
			Handler:    _LessonChatReaderService_RefreshLiveLessonSession_Handler,
		},
		{
			MethodName: "LiveLessonConversationDetail",
			Handler:    _LessonChatReaderService_LiveLessonConversationDetail_Handler,
		},
		{
			MethodName: "LiveLessonConversationMessages",
			Handler:    _LessonChatReaderService_LiveLessonConversationMessages_Handler,
		},
		{
			MethodName: "LiveLessonPrivateConversationMessages",
			Handler:    _LessonChatReaderService_LiveLessonPrivateConversationMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tom/v1/lesson_chat_reader.proto",
}
