// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ConversationReaderServiceClient is the client API for ConversationReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConversationReaderServiceClient interface {
	ListConversationByUsers(ctx context.Context, in *ListConversationByUsersRequest, opts ...grpc.CallOption) (*ListConversationByUsersResponse, error)
	ListConversationIDs(ctx context.Context, in *ListConversationIDsRequest, opts ...grpc.CallOption) (*ListConversationIDsResponse, error)
	ListConversationByLessons(ctx context.Context, in *ListConversationByLessonsRequest, opts ...grpc.CallOption) (*ListConversationByLessonsResponse, error)
}

type conversationReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConversationReaderServiceClient(cc grpc.ClientConnInterface) ConversationReaderServiceClient {
	return &conversationReaderServiceClient{cc}
}

func (c *conversationReaderServiceClient) ListConversationByUsers(ctx context.Context, in *ListConversationByUsersRequest, opts ...grpc.CallOption) (*ListConversationByUsersResponse, error) {
	out := new(ListConversationByUsersResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ConversationReaderService/ListConversationByUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationReaderServiceClient) ListConversationIDs(ctx context.Context, in *ListConversationIDsRequest, opts ...grpc.CallOption) (*ListConversationIDsResponse, error) {
	out := new(ListConversationIDsResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ConversationReaderService/ListConversationIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationReaderServiceClient) ListConversationByLessons(ctx context.Context, in *ListConversationByLessonsRequest, opts ...grpc.CallOption) (*ListConversationByLessonsResponse, error) {
	out := new(ListConversationByLessonsResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ConversationReaderService/ListConversationByLessons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConversationReaderServiceServer is the server API for ConversationReaderService service.
// All implementations should embed UnimplementedConversationReaderServiceServer
// for forward compatibility
type ConversationReaderServiceServer interface {
	ListConversationByUsers(context.Context, *ListConversationByUsersRequest) (*ListConversationByUsersResponse, error)
	ListConversationIDs(context.Context, *ListConversationIDsRequest) (*ListConversationIDsResponse, error)
	ListConversationByLessons(context.Context, *ListConversationByLessonsRequest) (*ListConversationByLessonsResponse, error)
}

// UnimplementedConversationReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConversationReaderServiceServer struct {
}

func (UnimplementedConversationReaderServiceServer) ListConversationByUsers(context.Context, *ListConversationByUsersRequest) (*ListConversationByUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConversationByUsers not implemented")
}
func (UnimplementedConversationReaderServiceServer) ListConversationIDs(context.Context, *ListConversationIDsRequest) (*ListConversationIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConversationIDs not implemented")
}
func (UnimplementedConversationReaderServiceServer) ListConversationByLessons(context.Context, *ListConversationByLessonsRequest) (*ListConversationByLessonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConversationByLessons not implemented")
}

// UnsafeConversationReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConversationReaderServiceServer will
// result in compilation errors.
type UnsafeConversationReaderServiceServer interface {
	mustEmbedUnimplementedConversationReaderServiceServer()
}

func RegisterConversationReaderServiceServer(s grpc.ServiceRegistrar, srv ConversationReaderServiceServer) {
	s.RegisterService(&_ConversationReaderService_serviceDesc, srv)
}

func _ConversationReaderService_ListConversationByUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConversationByUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationReaderServiceServer).ListConversationByUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ConversationReaderService/ListConversationByUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationReaderServiceServer).ListConversationByUsers(ctx, req.(*ListConversationByUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationReaderService_ListConversationIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConversationIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationReaderServiceServer).ListConversationIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ConversationReaderService/ListConversationIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationReaderServiceServer).ListConversationIDs(ctx, req.(*ListConversationIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationReaderService_ListConversationByLessons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConversationByLessonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationReaderServiceServer).ListConversationByLessons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ConversationReaderService/ListConversationByLessons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationReaderServiceServer).ListConversationByLessons(ctx, req.(*ListConversationByLessonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConversationReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tom.v1.ConversationReaderService",
	HandlerType: (*ConversationReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListConversationByUsers",
			Handler:    _ConversationReaderService_ListConversationByUsers_Handler,
		},
		{
			MethodName: "ListConversationIDs",
			Handler:    _ConversationReaderService_ListConversationIDs_Handler,
		},
		{
			MethodName: "ListConversationByLessons",
			Handler:    _ConversationReaderService_ListConversationByLessons_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tom/v1/conversation_reader.proto",
}
