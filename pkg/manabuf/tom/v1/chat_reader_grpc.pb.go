// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ChatReaderServiceClient is the client API for ChatReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatReaderServiceClient interface {
	ListConversations(ctx context.Context, in *ListConversationsRequest, opts ...grpc.CallOption) (*ListConversationsResponse, error)
	RetrieveConversationMessages(ctx context.Context, in *RetrieveConversationMessagesRequest, opts ...grpc.CallOption) (*RetrieveConversationMessagesResponse, error)
	RetrieveConversationEvents(ctx context.Context, in *RetrieveConversationEventsRequest, opts ...grpc.CallOption) (*RetrieveConversationEventsResponse, error)
	ConversationByStudentQuestions(ctx context.Context, in *ConversationByStudentQuestionsRequest, opts ...grpc.CallOption) (*ConversationByStudentQuestionsResponse, error)
	ConversationByClass(ctx context.Context, in *ConversationByClassRequest, opts ...grpc.CallOption) (*ConversationByClassResponse, error)
	ConversationByLesson(ctx context.Context, in *ConversationByLessonRequest, opts ...grpc.CallOption) (*ConversationByLessonResponse, error)
	TotalUserInConversation(ctx context.Context, in *TotalUserInConversationRequest, opts ...grpc.CallOption) (*TotalUserInConversationResponse, error)
	// Deprecated: Do not use.
	AutoCoachCustomMessage(ctx context.Context, in *AutoCoachCustomMessageRequest, opts ...grpc.CallOption) (*AutoCoachCustomMessageResponse, error)
	RetrievePushedNotificationMessages(ctx context.Context, in *RetrievePushedNotificationMessagesRequest, opts ...grpc.CallOption) (*RetrievePushedNotificationMessagesResponse, error)
	RetrieveConversationMemberLatestEvent(ctx context.Context, in *RetrieveConversationMemberLatestEventRequest, opts ...grpc.CallOption) (*RetrieveConversationMemberLatestEventResponse, error)
	ListConversationsInSchool(ctx context.Context, in *ListConversationsInSchoolRequest, opts ...grpc.CallOption) (*ListConversationsInSchoolResponse, error)
	ListConversationsInSchoolWithLocations(ctx context.Context, in *ListConversationsInSchoolRequest, opts ...grpc.CallOption) (*ListConversationsInSchoolResponse, error)
	RetrieveTotalUnreadMessage(ctx context.Context, in *RetrieveTotalUnreadMessageRequest, opts ...grpc.CallOption) (*RetrieveTotalUnreadMessageResponse, error)
	ListConversationsInSchoolV2(ctx context.Context, in *ListConversationsInSchoolRequest, opts ...grpc.CallOption) (*ListConversationsInSchoolResponse, error)
	RetrieveTotalUnreadConversationsWithLocations(ctx context.Context, in *RetrieveTotalUnreadConversationsWithLocationsRequest, opts ...grpc.CallOption) (*RetrieveTotalUnreadConversationsWithLocationsResponse, error)
	GetConversationV2(ctx context.Context, in *GetConversationV2Request, opts ...grpc.CallOption) (*GetConversationV2Response, error)
}

type chatReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatReaderServiceClient(cc grpc.ClientConnInterface) ChatReaderServiceClient {
	return &chatReaderServiceClient{cc}
}

func (c *chatReaderServiceClient) ListConversations(ctx context.Context, in *ListConversationsRequest, opts ...grpc.CallOption) (*ListConversationsResponse, error) {
	out := new(ListConversationsResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatReaderService/ListConversations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatReaderServiceClient) RetrieveConversationMessages(ctx context.Context, in *RetrieveConversationMessagesRequest, opts ...grpc.CallOption) (*RetrieveConversationMessagesResponse, error) {
	out := new(RetrieveConversationMessagesResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatReaderService/RetrieveConversationMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatReaderServiceClient) RetrieveConversationEvents(ctx context.Context, in *RetrieveConversationEventsRequest, opts ...grpc.CallOption) (*RetrieveConversationEventsResponse, error) {
	out := new(RetrieveConversationEventsResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatReaderService/RetrieveConversationEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatReaderServiceClient) ConversationByStudentQuestions(ctx context.Context, in *ConversationByStudentQuestionsRequest, opts ...grpc.CallOption) (*ConversationByStudentQuestionsResponse, error) {
	out := new(ConversationByStudentQuestionsResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatReaderService/ConversationByStudentQuestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatReaderServiceClient) ConversationByClass(ctx context.Context, in *ConversationByClassRequest, opts ...grpc.CallOption) (*ConversationByClassResponse, error) {
	out := new(ConversationByClassResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatReaderService/ConversationByClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatReaderServiceClient) ConversationByLesson(ctx context.Context, in *ConversationByLessonRequest, opts ...grpc.CallOption) (*ConversationByLessonResponse, error) {
	out := new(ConversationByLessonResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatReaderService/ConversationByLesson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatReaderServiceClient) TotalUserInConversation(ctx context.Context, in *TotalUserInConversationRequest, opts ...grpc.CallOption) (*TotalUserInConversationResponse, error) {
	out := new(TotalUserInConversationResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatReaderService/TotalUserInConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *chatReaderServiceClient) AutoCoachCustomMessage(ctx context.Context, in *AutoCoachCustomMessageRequest, opts ...grpc.CallOption) (*AutoCoachCustomMessageResponse, error) {
	out := new(AutoCoachCustomMessageResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatReaderService/AutoCoachCustomMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatReaderServiceClient) RetrievePushedNotificationMessages(ctx context.Context, in *RetrievePushedNotificationMessagesRequest, opts ...grpc.CallOption) (*RetrievePushedNotificationMessagesResponse, error) {
	out := new(RetrievePushedNotificationMessagesResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatReaderService/RetrievePushedNotificationMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatReaderServiceClient) RetrieveConversationMemberLatestEvent(ctx context.Context, in *RetrieveConversationMemberLatestEventRequest, opts ...grpc.CallOption) (*RetrieveConversationMemberLatestEventResponse, error) {
	out := new(RetrieveConversationMemberLatestEventResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatReaderService/RetrieveConversationMemberLatestEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatReaderServiceClient) ListConversationsInSchool(ctx context.Context, in *ListConversationsInSchoolRequest, opts ...grpc.CallOption) (*ListConversationsInSchoolResponse, error) {
	out := new(ListConversationsInSchoolResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatReaderService/ListConversationsInSchool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatReaderServiceClient) ListConversationsInSchoolWithLocations(ctx context.Context, in *ListConversationsInSchoolRequest, opts ...grpc.CallOption) (*ListConversationsInSchoolResponse, error) {
	out := new(ListConversationsInSchoolResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatReaderService/ListConversationsInSchoolWithLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatReaderServiceClient) RetrieveTotalUnreadMessage(ctx context.Context, in *RetrieveTotalUnreadMessageRequest, opts ...grpc.CallOption) (*RetrieveTotalUnreadMessageResponse, error) {
	out := new(RetrieveTotalUnreadMessageResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatReaderService/RetrieveTotalUnreadMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatReaderServiceClient) ListConversationsInSchoolV2(ctx context.Context, in *ListConversationsInSchoolRequest, opts ...grpc.CallOption) (*ListConversationsInSchoolResponse, error) {
	out := new(ListConversationsInSchoolResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatReaderService/ListConversationsInSchoolV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatReaderServiceClient) RetrieveTotalUnreadConversationsWithLocations(ctx context.Context, in *RetrieveTotalUnreadConversationsWithLocationsRequest, opts ...grpc.CallOption) (*RetrieveTotalUnreadConversationsWithLocationsResponse, error) {
	out := new(RetrieveTotalUnreadConversationsWithLocationsResponse)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatReaderService/RetrieveTotalUnreadConversationsWithLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatReaderServiceClient) GetConversationV2(ctx context.Context, in *GetConversationV2Request, opts ...grpc.CallOption) (*GetConversationV2Response, error) {
	out := new(GetConversationV2Response)
	err := c.cc.Invoke(ctx, "/tom.v1.ChatReaderService/GetConversationV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatReaderServiceServer is the server API for ChatReaderService service.
// All implementations should embed UnimplementedChatReaderServiceServer
// for forward compatibility
type ChatReaderServiceServer interface {
	ListConversations(context.Context, *ListConversationsRequest) (*ListConversationsResponse, error)
	RetrieveConversationMessages(context.Context, *RetrieveConversationMessagesRequest) (*RetrieveConversationMessagesResponse, error)
	RetrieveConversationEvents(context.Context, *RetrieveConversationEventsRequest) (*RetrieveConversationEventsResponse, error)
	ConversationByStudentQuestions(context.Context, *ConversationByStudentQuestionsRequest) (*ConversationByStudentQuestionsResponse, error)
	ConversationByClass(context.Context, *ConversationByClassRequest) (*ConversationByClassResponse, error)
	ConversationByLesson(context.Context, *ConversationByLessonRequest) (*ConversationByLessonResponse, error)
	TotalUserInConversation(context.Context, *TotalUserInConversationRequest) (*TotalUserInConversationResponse, error)
	// Deprecated: Do not use.
	AutoCoachCustomMessage(context.Context, *AutoCoachCustomMessageRequest) (*AutoCoachCustomMessageResponse, error)
	RetrievePushedNotificationMessages(context.Context, *RetrievePushedNotificationMessagesRequest) (*RetrievePushedNotificationMessagesResponse, error)
	RetrieveConversationMemberLatestEvent(context.Context, *RetrieveConversationMemberLatestEventRequest) (*RetrieveConversationMemberLatestEventResponse, error)
	ListConversationsInSchool(context.Context, *ListConversationsInSchoolRequest) (*ListConversationsInSchoolResponse, error)
	ListConversationsInSchoolWithLocations(context.Context, *ListConversationsInSchoolRequest) (*ListConversationsInSchoolResponse, error)
	RetrieveTotalUnreadMessage(context.Context, *RetrieveTotalUnreadMessageRequest) (*RetrieveTotalUnreadMessageResponse, error)
	ListConversationsInSchoolV2(context.Context, *ListConversationsInSchoolRequest) (*ListConversationsInSchoolResponse, error)
	RetrieveTotalUnreadConversationsWithLocations(context.Context, *RetrieveTotalUnreadConversationsWithLocationsRequest) (*RetrieveTotalUnreadConversationsWithLocationsResponse, error)
	GetConversationV2(context.Context, *GetConversationV2Request) (*GetConversationV2Response, error)
}

// UnimplementedChatReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedChatReaderServiceServer struct {
}

func (UnimplementedChatReaderServiceServer) ListConversations(context.Context, *ListConversationsRequest) (*ListConversationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConversations not implemented")
}
func (UnimplementedChatReaderServiceServer) RetrieveConversationMessages(context.Context, *RetrieveConversationMessagesRequest) (*RetrieveConversationMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveConversationMessages not implemented")
}
func (UnimplementedChatReaderServiceServer) RetrieveConversationEvents(context.Context, *RetrieveConversationEventsRequest) (*RetrieveConversationEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveConversationEvents not implemented")
}
func (UnimplementedChatReaderServiceServer) ConversationByStudentQuestions(context.Context, *ConversationByStudentQuestionsRequest) (*ConversationByStudentQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConversationByStudentQuestions not implemented")
}
func (UnimplementedChatReaderServiceServer) ConversationByClass(context.Context, *ConversationByClassRequest) (*ConversationByClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConversationByClass not implemented")
}
func (UnimplementedChatReaderServiceServer) ConversationByLesson(context.Context, *ConversationByLessonRequest) (*ConversationByLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConversationByLesson not implemented")
}
func (UnimplementedChatReaderServiceServer) TotalUserInConversation(context.Context, *TotalUserInConversationRequest) (*TotalUserInConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalUserInConversation not implemented")
}
func (UnimplementedChatReaderServiceServer) AutoCoachCustomMessage(context.Context, *AutoCoachCustomMessageRequest) (*AutoCoachCustomMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutoCoachCustomMessage not implemented")
}
func (UnimplementedChatReaderServiceServer) RetrievePushedNotificationMessages(context.Context, *RetrievePushedNotificationMessagesRequest) (*RetrievePushedNotificationMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrievePushedNotificationMessages not implemented")
}
func (UnimplementedChatReaderServiceServer) RetrieveConversationMemberLatestEvent(context.Context, *RetrieveConversationMemberLatestEventRequest) (*RetrieveConversationMemberLatestEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveConversationMemberLatestEvent not implemented")
}
func (UnimplementedChatReaderServiceServer) ListConversationsInSchool(context.Context, *ListConversationsInSchoolRequest) (*ListConversationsInSchoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConversationsInSchool not implemented")
}
func (UnimplementedChatReaderServiceServer) ListConversationsInSchoolWithLocations(context.Context, *ListConversationsInSchoolRequest) (*ListConversationsInSchoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConversationsInSchoolWithLocations not implemented")
}
func (UnimplementedChatReaderServiceServer) RetrieveTotalUnreadMessage(context.Context, *RetrieveTotalUnreadMessageRequest) (*RetrieveTotalUnreadMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveTotalUnreadMessage not implemented")
}
func (UnimplementedChatReaderServiceServer) ListConversationsInSchoolV2(context.Context, *ListConversationsInSchoolRequest) (*ListConversationsInSchoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConversationsInSchoolV2 not implemented")
}
func (UnimplementedChatReaderServiceServer) RetrieveTotalUnreadConversationsWithLocations(context.Context, *RetrieveTotalUnreadConversationsWithLocationsRequest) (*RetrieveTotalUnreadConversationsWithLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveTotalUnreadConversationsWithLocations not implemented")
}
func (UnimplementedChatReaderServiceServer) GetConversationV2(context.Context, *GetConversationV2Request) (*GetConversationV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversationV2 not implemented")
}

// UnsafeChatReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatReaderServiceServer will
// result in compilation errors.
type UnsafeChatReaderServiceServer interface {
	mustEmbedUnimplementedChatReaderServiceServer()
}

func RegisterChatReaderServiceServer(s grpc.ServiceRegistrar, srv ChatReaderServiceServer) {
	s.RegisterService(&_ChatReaderService_serviceDesc, srv)
}

func _ChatReaderService_ListConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConversationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatReaderServiceServer).ListConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatReaderService/ListConversations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatReaderServiceServer).ListConversations(ctx, req.(*ListConversationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatReaderService_RetrieveConversationMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveConversationMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatReaderServiceServer).RetrieveConversationMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatReaderService/RetrieveConversationMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatReaderServiceServer).RetrieveConversationMessages(ctx, req.(*RetrieveConversationMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatReaderService_RetrieveConversationEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveConversationEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatReaderServiceServer).RetrieveConversationEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatReaderService/RetrieveConversationEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatReaderServiceServer).RetrieveConversationEvents(ctx, req.(*RetrieveConversationEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatReaderService_ConversationByStudentQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationByStudentQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatReaderServiceServer).ConversationByStudentQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatReaderService/ConversationByStudentQuestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatReaderServiceServer).ConversationByStudentQuestions(ctx, req.(*ConversationByStudentQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatReaderService_ConversationByClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationByClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatReaderServiceServer).ConversationByClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatReaderService/ConversationByClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatReaderServiceServer).ConversationByClass(ctx, req.(*ConversationByClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatReaderService_ConversationByLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationByLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatReaderServiceServer).ConversationByLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatReaderService/ConversationByLesson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatReaderServiceServer).ConversationByLesson(ctx, req.(*ConversationByLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatReaderService_TotalUserInConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalUserInConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatReaderServiceServer).TotalUserInConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatReaderService/TotalUserInConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatReaderServiceServer).TotalUserInConversation(ctx, req.(*TotalUserInConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatReaderService_AutoCoachCustomMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoCoachCustomMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatReaderServiceServer).AutoCoachCustomMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatReaderService/AutoCoachCustomMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatReaderServiceServer).AutoCoachCustomMessage(ctx, req.(*AutoCoachCustomMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatReaderService_RetrievePushedNotificationMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrievePushedNotificationMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatReaderServiceServer).RetrievePushedNotificationMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatReaderService/RetrievePushedNotificationMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatReaderServiceServer).RetrievePushedNotificationMessages(ctx, req.(*RetrievePushedNotificationMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatReaderService_RetrieveConversationMemberLatestEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveConversationMemberLatestEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatReaderServiceServer).RetrieveConversationMemberLatestEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatReaderService/RetrieveConversationMemberLatestEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatReaderServiceServer).RetrieveConversationMemberLatestEvent(ctx, req.(*RetrieveConversationMemberLatestEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatReaderService_ListConversationsInSchool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConversationsInSchoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatReaderServiceServer).ListConversationsInSchool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatReaderService/ListConversationsInSchool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatReaderServiceServer).ListConversationsInSchool(ctx, req.(*ListConversationsInSchoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatReaderService_ListConversationsInSchoolWithLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConversationsInSchoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatReaderServiceServer).ListConversationsInSchoolWithLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatReaderService/ListConversationsInSchoolWithLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatReaderServiceServer).ListConversationsInSchoolWithLocations(ctx, req.(*ListConversationsInSchoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatReaderService_RetrieveTotalUnreadMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveTotalUnreadMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatReaderServiceServer).RetrieveTotalUnreadMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatReaderService/RetrieveTotalUnreadMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatReaderServiceServer).RetrieveTotalUnreadMessage(ctx, req.(*RetrieveTotalUnreadMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatReaderService_ListConversationsInSchoolV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConversationsInSchoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatReaderServiceServer).ListConversationsInSchoolV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatReaderService/ListConversationsInSchoolV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatReaderServiceServer).ListConversationsInSchoolV2(ctx, req.(*ListConversationsInSchoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatReaderService_RetrieveTotalUnreadConversationsWithLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveTotalUnreadConversationsWithLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatReaderServiceServer).RetrieveTotalUnreadConversationsWithLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatReaderService/RetrieveTotalUnreadConversationsWithLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatReaderServiceServer).RetrieveTotalUnreadConversationsWithLocations(ctx, req.(*RetrieveTotalUnreadConversationsWithLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatReaderService_GetConversationV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatReaderServiceServer).GetConversationV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tom.v1.ChatReaderService/GetConversationV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatReaderServiceServer).GetConversationV2(ctx, req.(*GetConversationV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tom.v1.ChatReaderService",
	HandlerType: (*ChatReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListConversations",
			Handler:    _ChatReaderService_ListConversations_Handler,
		},
		{
			MethodName: "RetrieveConversationMessages",
			Handler:    _ChatReaderService_RetrieveConversationMessages_Handler,
		},
		{
			MethodName: "RetrieveConversationEvents",
			Handler:    _ChatReaderService_RetrieveConversationEvents_Handler,
		},
		{
			MethodName: "ConversationByStudentQuestions",
			Handler:    _ChatReaderService_ConversationByStudentQuestions_Handler,
		},
		{
			MethodName: "ConversationByClass",
			Handler:    _ChatReaderService_ConversationByClass_Handler,
		},
		{
			MethodName: "ConversationByLesson",
			Handler:    _ChatReaderService_ConversationByLesson_Handler,
		},
		{
			MethodName: "TotalUserInConversation",
			Handler:    _ChatReaderService_TotalUserInConversation_Handler,
		},
		{
			MethodName: "AutoCoachCustomMessage",
			Handler:    _ChatReaderService_AutoCoachCustomMessage_Handler,
		},
		{
			MethodName: "RetrievePushedNotificationMessages",
			Handler:    _ChatReaderService_RetrievePushedNotificationMessages_Handler,
		},
		{
			MethodName: "RetrieveConversationMemberLatestEvent",
			Handler:    _ChatReaderService_RetrieveConversationMemberLatestEvent_Handler,
		},
		{
			MethodName: "ListConversationsInSchool",
			Handler:    _ChatReaderService_ListConversationsInSchool_Handler,
		},
		{
			MethodName: "ListConversationsInSchoolWithLocations",
			Handler:    _ChatReaderService_ListConversationsInSchoolWithLocations_Handler,
		},
		{
			MethodName: "RetrieveTotalUnreadMessage",
			Handler:    _ChatReaderService_RetrieveTotalUnreadMessage_Handler,
		},
		{
			MethodName: "ListConversationsInSchoolV2",
			Handler:    _ChatReaderService_ListConversationsInSchoolV2_Handler,
		},
		{
			MethodName: "RetrieveTotalUnreadConversationsWithLocations",
			Handler:    _ChatReaderService_RetrieveTotalUnreadConversationsWithLocations_Handler,
		},
		{
			MethodName: "GetConversationV2",
			Handler:    _ChatReaderService_GetConversationV2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tom/v1/chat_reader.proto",
}
