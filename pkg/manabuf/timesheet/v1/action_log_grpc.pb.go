// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TimesheetActionLogServiceClient is the client API for TimesheetActionLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimesheetActionLogServiceClient interface {
	GetTimesheetActionLogList(ctx context.Context, in *GetTimesheetActionLogListRequest, opts ...grpc.CallOption) (*GetTimesheetActionLogListResponse, error)
}

type timesheetActionLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTimesheetActionLogServiceClient(cc grpc.ClientConnInterface) TimesheetActionLogServiceClient {
	return &timesheetActionLogServiceClient{cc}
}

func (c *timesheetActionLogServiceClient) GetTimesheetActionLogList(ctx context.Context, in *GetTimesheetActionLogListRequest, opts ...grpc.CallOption) (*GetTimesheetActionLogListResponse, error) {
	out := new(GetTimesheetActionLogListResponse)
	err := c.cc.Invoke(ctx, "/timesheet.v1.TimesheetActionLogService/GetTimesheetActionLogList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimesheetActionLogServiceServer is the server API for TimesheetActionLogService service.
// All implementations should embed UnimplementedTimesheetActionLogServiceServer
// for forward compatibility
type TimesheetActionLogServiceServer interface {
	GetTimesheetActionLogList(context.Context, *GetTimesheetActionLogListRequest) (*GetTimesheetActionLogListResponse, error)
}

// UnimplementedTimesheetActionLogServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTimesheetActionLogServiceServer struct {
}

func (UnimplementedTimesheetActionLogServiceServer) GetTimesheetActionLogList(context.Context, *GetTimesheetActionLogListRequest) (*GetTimesheetActionLogListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimesheetActionLogList not implemented")
}

// UnsafeTimesheetActionLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimesheetActionLogServiceServer will
// result in compilation errors.
type UnsafeTimesheetActionLogServiceServer interface {
	mustEmbedUnimplementedTimesheetActionLogServiceServer()
}

func RegisterTimesheetActionLogServiceServer(s grpc.ServiceRegistrar, srv TimesheetActionLogServiceServer) {
	s.RegisterService(&_TimesheetActionLogService_serviceDesc, srv)
}

func _TimesheetActionLogService_GetTimesheetActionLogList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimesheetActionLogListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimesheetActionLogServiceServer).GetTimesheetActionLogList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timesheet.v1.TimesheetActionLogService/GetTimesheetActionLogList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimesheetActionLogServiceServer).GetTimesheetActionLogList(ctx, req.(*GetTimesheetActionLogListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TimesheetActionLogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "timesheet.v1.TimesheetActionLogService",
	HandlerType: (*TimesheetActionLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTimesheetActionLogList",
			Handler:    _TimesheetActionLogService_GetTimesheetActionLogList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "timesheet/v1/action_log.proto",
}
