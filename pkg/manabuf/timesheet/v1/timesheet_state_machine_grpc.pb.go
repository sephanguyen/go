// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TimesheetStateMachineServiceClient is the client API for TimesheetStateMachineService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimesheetStateMachineServiceClient interface {
	DeleteTimesheet(ctx context.Context, in *DeleteTimesheetRequest, opts ...grpc.CallOption) (*DeleteTimesheetResponse, error)
	SubmitTimesheet(ctx context.Context, in *SubmitTimesheetRequest, opts ...grpc.CallOption) (*SubmitTimesheetResponse, error)
	ApproveTimesheet(ctx context.Context, in *ApproveTimesheetRequest, opts ...grpc.CallOption) (*ApproveTimesheetResponse, error)
	CancelApproveTimesheet(ctx context.Context, in *CancelApproveTimesheetRequest, opts ...grpc.CallOption) (*CancelApproveTimesheetResponse, error)
	ConfirmTimesheet(ctx context.Context, in *ConfirmTimesheetRequest, opts ...grpc.CallOption) (*ConfirmTimesheetResponse, error)
	CancelSubmissionTimesheet(ctx context.Context, in *CancelSubmissionTimesheetRequest, opts ...grpc.CallOption) (*CancelSubmissionTimesheetResponse, error)
}

type timesheetStateMachineServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTimesheetStateMachineServiceClient(cc grpc.ClientConnInterface) TimesheetStateMachineServiceClient {
	return &timesheetStateMachineServiceClient{cc}
}

func (c *timesheetStateMachineServiceClient) DeleteTimesheet(ctx context.Context, in *DeleteTimesheetRequest, opts ...grpc.CallOption) (*DeleteTimesheetResponse, error) {
	out := new(DeleteTimesheetResponse)
	err := c.cc.Invoke(ctx, "/timesheet.v1.TimesheetStateMachineService/DeleteTimesheet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timesheetStateMachineServiceClient) SubmitTimesheet(ctx context.Context, in *SubmitTimesheetRequest, opts ...grpc.CallOption) (*SubmitTimesheetResponse, error) {
	out := new(SubmitTimesheetResponse)
	err := c.cc.Invoke(ctx, "/timesheet.v1.TimesheetStateMachineService/SubmitTimesheet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timesheetStateMachineServiceClient) ApproveTimesheet(ctx context.Context, in *ApproveTimesheetRequest, opts ...grpc.CallOption) (*ApproveTimesheetResponse, error) {
	out := new(ApproveTimesheetResponse)
	err := c.cc.Invoke(ctx, "/timesheet.v1.TimesheetStateMachineService/ApproveTimesheet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timesheetStateMachineServiceClient) CancelApproveTimesheet(ctx context.Context, in *CancelApproveTimesheetRequest, opts ...grpc.CallOption) (*CancelApproveTimesheetResponse, error) {
	out := new(CancelApproveTimesheetResponse)
	err := c.cc.Invoke(ctx, "/timesheet.v1.TimesheetStateMachineService/CancelApproveTimesheet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timesheetStateMachineServiceClient) ConfirmTimesheet(ctx context.Context, in *ConfirmTimesheetRequest, opts ...grpc.CallOption) (*ConfirmTimesheetResponse, error) {
	out := new(ConfirmTimesheetResponse)
	err := c.cc.Invoke(ctx, "/timesheet.v1.TimesheetStateMachineService/ConfirmTimesheet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timesheetStateMachineServiceClient) CancelSubmissionTimesheet(ctx context.Context, in *CancelSubmissionTimesheetRequest, opts ...grpc.CallOption) (*CancelSubmissionTimesheetResponse, error) {
	out := new(CancelSubmissionTimesheetResponse)
	err := c.cc.Invoke(ctx, "/timesheet.v1.TimesheetStateMachineService/CancelSubmissionTimesheet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimesheetStateMachineServiceServer is the server API for TimesheetStateMachineService service.
// All implementations should embed UnimplementedTimesheetStateMachineServiceServer
// for forward compatibility
type TimesheetStateMachineServiceServer interface {
	DeleteTimesheet(context.Context, *DeleteTimesheetRequest) (*DeleteTimesheetResponse, error)
	SubmitTimesheet(context.Context, *SubmitTimesheetRequest) (*SubmitTimesheetResponse, error)
	ApproveTimesheet(context.Context, *ApproveTimesheetRequest) (*ApproveTimesheetResponse, error)
	CancelApproveTimesheet(context.Context, *CancelApproveTimesheetRequest) (*CancelApproveTimesheetResponse, error)
	ConfirmTimesheet(context.Context, *ConfirmTimesheetRequest) (*ConfirmTimesheetResponse, error)
	CancelSubmissionTimesheet(context.Context, *CancelSubmissionTimesheetRequest) (*CancelSubmissionTimesheetResponse, error)
}

// UnimplementedTimesheetStateMachineServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTimesheetStateMachineServiceServer struct {
}

func (UnimplementedTimesheetStateMachineServiceServer) DeleteTimesheet(context.Context, *DeleteTimesheetRequest) (*DeleteTimesheetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTimesheet not implemented")
}
func (UnimplementedTimesheetStateMachineServiceServer) SubmitTimesheet(context.Context, *SubmitTimesheetRequest) (*SubmitTimesheetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTimesheet not implemented")
}
func (UnimplementedTimesheetStateMachineServiceServer) ApproveTimesheet(context.Context, *ApproveTimesheetRequest) (*ApproveTimesheetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveTimesheet not implemented")
}
func (UnimplementedTimesheetStateMachineServiceServer) CancelApproveTimesheet(context.Context, *CancelApproveTimesheetRequest) (*CancelApproveTimesheetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelApproveTimesheet not implemented")
}
func (UnimplementedTimesheetStateMachineServiceServer) ConfirmTimesheet(context.Context, *ConfirmTimesheetRequest) (*ConfirmTimesheetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmTimesheet not implemented")
}
func (UnimplementedTimesheetStateMachineServiceServer) CancelSubmissionTimesheet(context.Context, *CancelSubmissionTimesheetRequest) (*CancelSubmissionTimesheetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSubmissionTimesheet not implemented")
}

// UnsafeTimesheetStateMachineServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimesheetStateMachineServiceServer will
// result in compilation errors.
type UnsafeTimesheetStateMachineServiceServer interface {
	mustEmbedUnimplementedTimesheetStateMachineServiceServer()
}

func RegisterTimesheetStateMachineServiceServer(s grpc.ServiceRegistrar, srv TimesheetStateMachineServiceServer) {
	s.RegisterService(&_TimesheetStateMachineService_serviceDesc, srv)
}

func _TimesheetStateMachineService_DeleteTimesheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTimesheetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimesheetStateMachineServiceServer).DeleteTimesheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timesheet.v1.TimesheetStateMachineService/DeleteTimesheet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimesheetStateMachineServiceServer).DeleteTimesheet(ctx, req.(*DeleteTimesheetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimesheetStateMachineService_SubmitTimesheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTimesheetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimesheetStateMachineServiceServer).SubmitTimesheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timesheet.v1.TimesheetStateMachineService/SubmitTimesheet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimesheetStateMachineServiceServer).SubmitTimesheet(ctx, req.(*SubmitTimesheetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimesheetStateMachineService_ApproveTimesheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveTimesheetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimesheetStateMachineServiceServer).ApproveTimesheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timesheet.v1.TimesheetStateMachineService/ApproveTimesheet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimesheetStateMachineServiceServer).ApproveTimesheet(ctx, req.(*ApproveTimesheetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimesheetStateMachineService_CancelApproveTimesheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelApproveTimesheetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimesheetStateMachineServiceServer).CancelApproveTimesheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timesheet.v1.TimesheetStateMachineService/CancelApproveTimesheet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimesheetStateMachineServiceServer).CancelApproveTimesheet(ctx, req.(*CancelApproveTimesheetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimesheetStateMachineService_ConfirmTimesheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmTimesheetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimesheetStateMachineServiceServer).ConfirmTimesheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timesheet.v1.TimesheetStateMachineService/ConfirmTimesheet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimesheetStateMachineServiceServer).ConfirmTimesheet(ctx, req.(*ConfirmTimesheetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimesheetStateMachineService_CancelSubmissionTimesheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelSubmissionTimesheetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimesheetStateMachineServiceServer).CancelSubmissionTimesheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timesheet.v1.TimesheetStateMachineService/CancelSubmissionTimesheet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimesheetStateMachineServiceServer).CancelSubmissionTimesheet(ctx, req.(*CancelSubmissionTimesheetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TimesheetStateMachineService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "timesheet.v1.TimesheetStateMachineService",
	HandlerType: (*TimesheetStateMachineServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteTimesheet",
			Handler:    _TimesheetStateMachineService_DeleteTimesheet_Handler,
		},
		{
			MethodName: "SubmitTimesheet",
			Handler:    _TimesheetStateMachineService_SubmitTimesheet_Handler,
		},
		{
			MethodName: "ApproveTimesheet",
			Handler:    _TimesheetStateMachineService_ApproveTimesheet_Handler,
		},
		{
			MethodName: "CancelApproveTimesheet",
			Handler:    _TimesheetStateMachineService_CancelApproveTimesheet_Handler,
		},
		{
			MethodName: "ConfirmTimesheet",
			Handler:    _TimesheetStateMachineService_ConfirmTimesheet_Handler,
		},
		{
			MethodName: "CancelSubmissionTimesheet",
			Handler:    _TimesheetStateMachineService_CancelSubmissionTimesheet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "timesheet/v1/timesheet_state_machine.proto",
}
