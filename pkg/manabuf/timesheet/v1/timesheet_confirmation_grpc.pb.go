// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TimesheetConfirmationServiceClient is the client API for TimesheetConfirmationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimesheetConfirmationServiceClient interface {
	GetConfirmationPeriodByDate(ctx context.Context, in *GetTimesheetConfirmationPeriodByDateRequest, opts ...grpc.CallOption) (*GetTimesheetConfirmationPeriodByDateResponse, error)
	ConfirmTimesheet(ctx context.Context, in *ConfirmTimesheetWithLocationRequest, opts ...grpc.CallOption) (*ConfirmTimesheetWithLocationResponse, error)
	GetTimesheetLocationList(ctx context.Context, in *GetTimesheetLocationListRequest, opts ...grpc.CallOption) (*GetTimesheetLocationListResponse, error)
	GetNonConfirmedLocationCount(ctx context.Context, in *GetNonConfirmedLocationCountRequest, opts ...grpc.CallOption) (*GetNonConfirmedLocationCountResponse, error)
}

type timesheetConfirmationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTimesheetConfirmationServiceClient(cc grpc.ClientConnInterface) TimesheetConfirmationServiceClient {
	return &timesheetConfirmationServiceClient{cc}
}

func (c *timesheetConfirmationServiceClient) GetConfirmationPeriodByDate(ctx context.Context, in *GetTimesheetConfirmationPeriodByDateRequest, opts ...grpc.CallOption) (*GetTimesheetConfirmationPeriodByDateResponse, error) {
	out := new(GetTimesheetConfirmationPeriodByDateResponse)
	err := c.cc.Invoke(ctx, "/timesheet.v1.TimesheetConfirmationService/GetConfirmationPeriodByDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timesheetConfirmationServiceClient) ConfirmTimesheet(ctx context.Context, in *ConfirmTimesheetWithLocationRequest, opts ...grpc.CallOption) (*ConfirmTimesheetWithLocationResponse, error) {
	out := new(ConfirmTimesheetWithLocationResponse)
	err := c.cc.Invoke(ctx, "/timesheet.v1.TimesheetConfirmationService/ConfirmTimesheet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timesheetConfirmationServiceClient) GetTimesheetLocationList(ctx context.Context, in *GetTimesheetLocationListRequest, opts ...grpc.CallOption) (*GetTimesheetLocationListResponse, error) {
	out := new(GetTimesheetLocationListResponse)
	err := c.cc.Invoke(ctx, "/timesheet.v1.TimesheetConfirmationService/GetTimesheetLocationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timesheetConfirmationServiceClient) GetNonConfirmedLocationCount(ctx context.Context, in *GetNonConfirmedLocationCountRequest, opts ...grpc.CallOption) (*GetNonConfirmedLocationCountResponse, error) {
	out := new(GetNonConfirmedLocationCountResponse)
	err := c.cc.Invoke(ctx, "/timesheet.v1.TimesheetConfirmationService/GetNonConfirmedLocationCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimesheetConfirmationServiceServer is the server API for TimesheetConfirmationService service.
// All implementations should embed UnimplementedTimesheetConfirmationServiceServer
// for forward compatibility
type TimesheetConfirmationServiceServer interface {
	GetConfirmationPeriodByDate(context.Context, *GetTimesheetConfirmationPeriodByDateRequest) (*GetTimesheetConfirmationPeriodByDateResponse, error)
	ConfirmTimesheet(context.Context, *ConfirmTimesheetWithLocationRequest) (*ConfirmTimesheetWithLocationResponse, error)
	GetTimesheetLocationList(context.Context, *GetTimesheetLocationListRequest) (*GetTimesheetLocationListResponse, error)
	GetNonConfirmedLocationCount(context.Context, *GetNonConfirmedLocationCountRequest) (*GetNonConfirmedLocationCountResponse, error)
}

// UnimplementedTimesheetConfirmationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTimesheetConfirmationServiceServer struct {
}

func (UnimplementedTimesheetConfirmationServiceServer) GetConfirmationPeriodByDate(context.Context, *GetTimesheetConfirmationPeriodByDateRequest) (*GetTimesheetConfirmationPeriodByDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfirmationPeriodByDate not implemented")
}
func (UnimplementedTimesheetConfirmationServiceServer) ConfirmTimesheet(context.Context, *ConfirmTimesheetWithLocationRequest) (*ConfirmTimesheetWithLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmTimesheet not implemented")
}
func (UnimplementedTimesheetConfirmationServiceServer) GetTimesheetLocationList(context.Context, *GetTimesheetLocationListRequest) (*GetTimesheetLocationListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimesheetLocationList not implemented")
}
func (UnimplementedTimesheetConfirmationServiceServer) GetNonConfirmedLocationCount(context.Context, *GetNonConfirmedLocationCountRequest) (*GetNonConfirmedLocationCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNonConfirmedLocationCount not implemented")
}

// UnsafeTimesheetConfirmationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimesheetConfirmationServiceServer will
// result in compilation errors.
type UnsafeTimesheetConfirmationServiceServer interface {
	mustEmbedUnimplementedTimesheetConfirmationServiceServer()
}

func RegisterTimesheetConfirmationServiceServer(s grpc.ServiceRegistrar, srv TimesheetConfirmationServiceServer) {
	s.RegisterService(&_TimesheetConfirmationService_serviceDesc, srv)
}

func _TimesheetConfirmationService_GetConfirmationPeriodByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimesheetConfirmationPeriodByDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimesheetConfirmationServiceServer).GetConfirmationPeriodByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timesheet.v1.TimesheetConfirmationService/GetConfirmationPeriodByDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimesheetConfirmationServiceServer).GetConfirmationPeriodByDate(ctx, req.(*GetTimesheetConfirmationPeriodByDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimesheetConfirmationService_ConfirmTimesheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmTimesheetWithLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimesheetConfirmationServiceServer).ConfirmTimesheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timesheet.v1.TimesheetConfirmationService/ConfirmTimesheet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimesheetConfirmationServiceServer).ConfirmTimesheet(ctx, req.(*ConfirmTimesheetWithLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimesheetConfirmationService_GetTimesheetLocationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimesheetLocationListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimesheetConfirmationServiceServer).GetTimesheetLocationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timesheet.v1.TimesheetConfirmationService/GetTimesheetLocationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimesheetConfirmationServiceServer).GetTimesheetLocationList(ctx, req.(*GetTimesheetLocationListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimesheetConfirmationService_GetNonConfirmedLocationCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNonConfirmedLocationCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimesheetConfirmationServiceServer).GetNonConfirmedLocationCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timesheet.v1.TimesheetConfirmationService/GetNonConfirmedLocationCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimesheetConfirmationServiceServer).GetNonConfirmedLocationCount(ctx, req.(*GetNonConfirmedLocationCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TimesheetConfirmationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "timesheet.v1.TimesheetConfirmationService",
	HandlerType: (*TimesheetConfirmationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfirmationPeriodByDate",
			Handler:    _TimesheetConfirmationService_GetConfirmationPeriodByDate_Handler,
		},
		{
			MethodName: "ConfirmTimesheet",
			Handler:    _TimesheetConfirmationService_ConfirmTimesheet_Handler,
		},
		{
			MethodName: "GetTimesheetLocationList",
			Handler:    _TimesheetConfirmationService_GetTimesheetLocationList_Handler,
		},
		{
			MethodName: "GetNonConfirmedLocationCount",
			Handler:    _TimesheetConfirmationService_GetNonConfirmedLocationCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "timesheet/v1/timesheet_confirmation.proto",
}
