// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TimesheetServiceClient is the client API for TimesheetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimesheetServiceClient interface {
	UpdateTimesheet(ctx context.Context, in *UpdateTimesheetRequest, opts ...grpc.CallOption) (*UpdateTimesheetResponse, error)
	CreateTimesheet(ctx context.Context, in *CreateTimesheetRequest, opts ...grpc.CallOption) (*CreateTimesheetResponse, error)
	CountTimesheets(ctx context.Context, in *CountTimesheetsRequest, opts ...grpc.CallOption) (*CountTimesheetsResponse, error)
	CountTimesheetsV2(ctx context.Context, in *CountTimesheetsV2Request, opts ...grpc.CallOption) (*CountTimesheetsV2Response, error)
	CountSubmittedTimesheets(ctx context.Context, in *CountSubmittedTimesheetsRequest, opts ...grpc.CallOption) (*CountSubmittedTimesheetsResponse, error)
}

type timesheetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTimesheetServiceClient(cc grpc.ClientConnInterface) TimesheetServiceClient {
	return &timesheetServiceClient{cc}
}

func (c *timesheetServiceClient) UpdateTimesheet(ctx context.Context, in *UpdateTimesheetRequest, opts ...grpc.CallOption) (*UpdateTimesheetResponse, error) {
	out := new(UpdateTimesheetResponse)
	err := c.cc.Invoke(ctx, "/timesheet.v1.TimesheetService/UpdateTimesheet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timesheetServiceClient) CreateTimesheet(ctx context.Context, in *CreateTimesheetRequest, opts ...grpc.CallOption) (*CreateTimesheetResponse, error) {
	out := new(CreateTimesheetResponse)
	err := c.cc.Invoke(ctx, "/timesheet.v1.TimesheetService/CreateTimesheet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timesheetServiceClient) CountTimesheets(ctx context.Context, in *CountTimesheetsRequest, opts ...grpc.CallOption) (*CountTimesheetsResponse, error) {
	out := new(CountTimesheetsResponse)
	err := c.cc.Invoke(ctx, "/timesheet.v1.TimesheetService/CountTimesheets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timesheetServiceClient) CountTimesheetsV2(ctx context.Context, in *CountTimesheetsV2Request, opts ...grpc.CallOption) (*CountTimesheetsV2Response, error) {
	out := new(CountTimesheetsV2Response)
	err := c.cc.Invoke(ctx, "/timesheet.v1.TimesheetService/CountTimesheetsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timesheetServiceClient) CountSubmittedTimesheets(ctx context.Context, in *CountSubmittedTimesheetsRequest, opts ...grpc.CallOption) (*CountSubmittedTimesheetsResponse, error) {
	out := new(CountSubmittedTimesheetsResponse)
	err := c.cc.Invoke(ctx, "/timesheet.v1.TimesheetService/CountSubmittedTimesheets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimesheetServiceServer is the server API for TimesheetService service.
// All implementations should embed UnimplementedTimesheetServiceServer
// for forward compatibility
type TimesheetServiceServer interface {
	UpdateTimesheet(context.Context, *UpdateTimesheetRequest) (*UpdateTimesheetResponse, error)
	CreateTimesheet(context.Context, *CreateTimesheetRequest) (*CreateTimesheetResponse, error)
	CountTimesheets(context.Context, *CountTimesheetsRequest) (*CountTimesheetsResponse, error)
	CountTimesheetsV2(context.Context, *CountTimesheetsV2Request) (*CountTimesheetsV2Response, error)
	CountSubmittedTimesheets(context.Context, *CountSubmittedTimesheetsRequest) (*CountSubmittedTimesheetsResponse, error)
}

// UnimplementedTimesheetServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTimesheetServiceServer struct {
}

func (UnimplementedTimesheetServiceServer) UpdateTimesheet(context.Context, *UpdateTimesheetRequest) (*UpdateTimesheetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTimesheet not implemented")
}
func (UnimplementedTimesheetServiceServer) CreateTimesheet(context.Context, *CreateTimesheetRequest) (*CreateTimesheetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTimesheet not implemented")
}
func (UnimplementedTimesheetServiceServer) CountTimesheets(context.Context, *CountTimesheetsRequest) (*CountTimesheetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountTimesheets not implemented")
}
func (UnimplementedTimesheetServiceServer) CountTimesheetsV2(context.Context, *CountTimesheetsV2Request) (*CountTimesheetsV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountTimesheetsV2 not implemented")
}
func (UnimplementedTimesheetServiceServer) CountSubmittedTimesheets(context.Context, *CountSubmittedTimesheetsRequest) (*CountSubmittedTimesheetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountSubmittedTimesheets not implemented")
}

// UnsafeTimesheetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimesheetServiceServer will
// result in compilation errors.
type UnsafeTimesheetServiceServer interface {
	mustEmbedUnimplementedTimesheetServiceServer()
}

func RegisterTimesheetServiceServer(s grpc.ServiceRegistrar, srv TimesheetServiceServer) {
	s.RegisterService(&_TimesheetService_serviceDesc, srv)
}

func _TimesheetService_UpdateTimesheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTimesheetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimesheetServiceServer).UpdateTimesheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timesheet.v1.TimesheetService/UpdateTimesheet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimesheetServiceServer).UpdateTimesheet(ctx, req.(*UpdateTimesheetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimesheetService_CreateTimesheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTimesheetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimesheetServiceServer).CreateTimesheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timesheet.v1.TimesheetService/CreateTimesheet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimesheetServiceServer).CreateTimesheet(ctx, req.(*CreateTimesheetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimesheetService_CountTimesheets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountTimesheetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimesheetServiceServer).CountTimesheets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timesheet.v1.TimesheetService/CountTimesheets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimesheetServiceServer).CountTimesheets(ctx, req.(*CountTimesheetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimesheetService_CountTimesheetsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountTimesheetsV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimesheetServiceServer).CountTimesheetsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timesheet.v1.TimesheetService/CountTimesheetsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimesheetServiceServer).CountTimesheetsV2(ctx, req.(*CountTimesheetsV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimesheetService_CountSubmittedTimesheets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountSubmittedTimesheetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimesheetServiceServer).CountSubmittedTimesheets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timesheet.v1.TimesheetService/CountSubmittedTimesheets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimesheetServiceServer).CountSubmittedTimesheets(ctx, req.(*CountSubmittedTimesheetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TimesheetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "timesheet.v1.TimesheetService",
	HandlerType: (*TimesheetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateTimesheet",
			Handler:    _TimesheetService_UpdateTimesheet_Handler,
		},
		{
			MethodName: "CreateTimesheet",
			Handler:    _TimesheetService_CreateTimesheet_Handler,
		},
		{
			MethodName: "CountTimesheets",
			Handler:    _TimesheetService_CountTimesheets_Handler,
		},
		{
			MethodName: "CountTimesheetsV2",
			Handler:    _TimesheetService_CountTimesheetsV2_Handler,
		},
		{
			MethodName: "CountSubmittedTimesheets",
			Handler:    _TimesheetService_CountSubmittedTimesheets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "timesheet/v1/timesheet.proto",
}
