// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: payment/v1/enums.proto

package pmpb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DiscountType int32

const (
	DiscountType_DISCOUNT_TYPE_NONE               DiscountType = 0
	DiscountType_DISCOUNT_TYPE_REGULAR            DiscountType = 1
	DiscountType_DISCOUNT_TYPE_COMBO              DiscountType = 2
	DiscountType_DISCOUNT_TYPE_SIBLING            DiscountType = 3
	DiscountType_DISCOUNT_TYPE_EMPLOYEE_FULL_TIME DiscountType = 4
	DiscountType_DISCOUNT_TYPE_EMPLOYEE_PART_TIME DiscountType = 5
	DiscountType_DISCOUNT_TYPE_SINGLE_PARENT      DiscountType = 6
	DiscountType_DISCOUNT_TYPE_FAMILY             DiscountType = 7
	DiscountType_DISCOUNT_TYPE_CAMPAIGN           DiscountType = 8
)

// Enum value maps for DiscountType.
var (
	DiscountType_name = map[int32]string{
		0: "DISCOUNT_TYPE_NONE",
		1: "DISCOUNT_TYPE_REGULAR",
		2: "DISCOUNT_TYPE_COMBO",
		3: "DISCOUNT_TYPE_SIBLING",
		4: "DISCOUNT_TYPE_EMPLOYEE_FULL_TIME",
		5: "DISCOUNT_TYPE_EMPLOYEE_PART_TIME",
		6: "DISCOUNT_TYPE_SINGLE_PARENT",
		7: "DISCOUNT_TYPE_FAMILY",
		8: "DISCOUNT_TYPE_CAMPAIGN",
	}
	DiscountType_value = map[string]int32{
		"DISCOUNT_TYPE_NONE":               0,
		"DISCOUNT_TYPE_REGULAR":            1,
		"DISCOUNT_TYPE_COMBO":              2,
		"DISCOUNT_TYPE_SIBLING":            3,
		"DISCOUNT_TYPE_EMPLOYEE_FULL_TIME": 4,
		"DISCOUNT_TYPE_EMPLOYEE_PART_TIME": 5,
		"DISCOUNT_TYPE_SINGLE_PARENT":      6,
		"DISCOUNT_TYPE_FAMILY":             7,
		"DISCOUNT_TYPE_CAMPAIGN":           8,
	}
)

func (x DiscountType) Enum() *DiscountType {
	p := new(DiscountType)
	*p = x
	return p
}

func (x DiscountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiscountType) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_v1_enums_proto_enumTypes[0].Descriptor()
}

func (DiscountType) Type() protoreflect.EnumType {
	return &file_payment_v1_enums_proto_enumTypes[0]
}

func (x DiscountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiscountType.Descriptor instead.
func (DiscountType) EnumDescriptor() ([]byte, []int) {
	return file_payment_v1_enums_proto_rawDescGZIP(), []int{0}
}

type DiscountAmountType int32

const (
	DiscountAmountType_DISCOUNT_AMOUNT_TYPE_NONE         DiscountAmountType = 0
	DiscountAmountType_DISCOUNT_AMOUNT_TYPE_PERCENTAGE   DiscountAmountType = 1
	DiscountAmountType_DISCOUNT_AMOUNT_TYPE_FIXED_AMOUNT DiscountAmountType = 2
)

// Enum value maps for DiscountAmountType.
var (
	DiscountAmountType_name = map[int32]string{
		0: "DISCOUNT_AMOUNT_TYPE_NONE",
		1: "DISCOUNT_AMOUNT_TYPE_PERCENTAGE",
		2: "DISCOUNT_AMOUNT_TYPE_FIXED_AMOUNT",
	}
	DiscountAmountType_value = map[string]int32{
		"DISCOUNT_AMOUNT_TYPE_NONE":         0,
		"DISCOUNT_AMOUNT_TYPE_PERCENTAGE":   1,
		"DISCOUNT_AMOUNT_TYPE_FIXED_AMOUNT": 2,
	}
)

func (x DiscountAmountType) Enum() *DiscountAmountType {
	p := new(DiscountAmountType)
	*p = x
	return p
}

func (x DiscountAmountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiscountAmountType) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_v1_enums_proto_enumTypes[1].Descriptor()
}

func (DiscountAmountType) Type() protoreflect.EnumType {
	return &file_payment_v1_enums_proto_enumTypes[1]
}

func (x DiscountAmountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiscountAmountType.Descriptor instead.
func (DiscountAmountType) EnumDescriptor() ([]byte, []int) {
	return file_payment_v1_enums_proto_rawDescGZIP(), []int{1}
}

type ProductType int32

const (
	ProductType_PRODUCT_TYPE_NONE     ProductType = 0
	ProductType_PRODUCT_TYPE_PACKAGE  ProductType = 1
	ProductType_PRODUCT_TYPE_MATERIAL ProductType = 2
	ProductType_PRODUCT_TYPE_FEE      ProductType = 3
)

// Enum value maps for ProductType.
var (
	ProductType_name = map[int32]string{
		0: "PRODUCT_TYPE_NONE",
		1: "PRODUCT_TYPE_PACKAGE",
		2: "PRODUCT_TYPE_MATERIAL",
		3: "PRODUCT_TYPE_FEE",
	}
	ProductType_value = map[string]int32{
		"PRODUCT_TYPE_NONE":     0,
		"PRODUCT_TYPE_PACKAGE":  1,
		"PRODUCT_TYPE_MATERIAL": 2,
		"PRODUCT_TYPE_FEE":      3,
	}
)

func (x ProductType) Enum() *ProductType {
	p := new(ProductType)
	*p = x
	return p
}

func (x ProductType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductType) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_v1_enums_proto_enumTypes[2].Descriptor()
}

func (ProductType) Type() protoreflect.EnumType {
	return &file_payment_v1_enums_proto_enumTypes[2]
}

func (x ProductType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductType.Descriptor instead.
func (ProductType) EnumDescriptor() ([]byte, []int) {
	return file_payment_v1_enums_proto_rawDescGZIP(), []int{2}
}

type ProductAssociatedDataType int32

const (
	ProductAssociatedDataType_PRODUCT_ASSOCIATED_DATA_TYPE_NONE                ProductAssociatedDataType = 0
	ProductAssociatedDataType_PRODUCT_ASSOCIATED_DATA_TYPE_COURSE              ProductAssociatedDataType = 1
	ProductAssociatedDataType_PRODUCT_ASSOCIATED_DATA_TYPE_LOCATION            ProductAssociatedDataType = 2
	ProductAssociatedDataType_PRODUCT_ASSOCIATED_DATA_TYPE_GRADE               ProductAssociatedDataType = 3
	ProductAssociatedDataType_PRODUCT_ASSOCIATED_DATA_TYPE_ACCOUNTING_CATEGORY ProductAssociatedDataType = 4
	ProductAssociatedDataType_PRODUCT_ASSOCIATED_DATA_TYPE_DISCOUNT            ProductAssociatedDataType = 5
)

// Enum value maps for ProductAssociatedDataType.
var (
	ProductAssociatedDataType_name = map[int32]string{
		0: "PRODUCT_ASSOCIATED_DATA_TYPE_NONE",
		1: "PRODUCT_ASSOCIATED_DATA_TYPE_COURSE",
		2: "PRODUCT_ASSOCIATED_DATA_TYPE_LOCATION",
		3: "PRODUCT_ASSOCIATED_DATA_TYPE_GRADE",
		4: "PRODUCT_ASSOCIATED_DATA_TYPE_ACCOUNTING_CATEGORY",
		5: "PRODUCT_ASSOCIATED_DATA_TYPE_DISCOUNT",
	}
	ProductAssociatedDataType_value = map[string]int32{
		"PRODUCT_ASSOCIATED_DATA_TYPE_NONE":                0,
		"PRODUCT_ASSOCIATED_DATA_TYPE_COURSE":              1,
		"PRODUCT_ASSOCIATED_DATA_TYPE_LOCATION":            2,
		"PRODUCT_ASSOCIATED_DATA_TYPE_GRADE":               3,
		"PRODUCT_ASSOCIATED_DATA_TYPE_ACCOUNTING_CATEGORY": 4,
		"PRODUCT_ASSOCIATED_DATA_TYPE_DISCOUNT":            5,
	}
)

func (x ProductAssociatedDataType) Enum() *ProductAssociatedDataType {
	p := new(ProductAssociatedDataType)
	*p = x
	return p
}

func (x ProductAssociatedDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductAssociatedDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_v1_enums_proto_enumTypes[3].Descriptor()
}

func (ProductAssociatedDataType) Type() protoreflect.EnumType {
	return &file_payment_v1_enums_proto_enumTypes[3]
}

func (x ProductAssociatedDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductAssociatedDataType.Descriptor instead.
func (ProductAssociatedDataType) EnumDescriptor() ([]byte, []int) {
	return file_payment_v1_enums_proto_rawDescGZIP(), []int{3}
}

type AssociatedProductsType int32

const (
	AssociatedProductsType_ASSOCIATED_PRODUCTS_NONE     AssociatedProductsType = 0
	AssociatedProductsType_ASSOCIATED_PRODUCTS_MATERIAL AssociatedProductsType = 1
	AssociatedProductsType_ASSOCIATED_PRODUCTS_FEE      AssociatedProductsType = 2
)

// Enum value maps for AssociatedProductsType.
var (
	AssociatedProductsType_name = map[int32]string{
		0: "ASSOCIATED_PRODUCTS_NONE",
		1: "ASSOCIATED_PRODUCTS_MATERIAL",
		2: "ASSOCIATED_PRODUCTS_FEE",
	}
	AssociatedProductsType_value = map[string]int32{
		"ASSOCIATED_PRODUCTS_NONE":     0,
		"ASSOCIATED_PRODUCTS_MATERIAL": 1,
		"ASSOCIATED_PRODUCTS_FEE":      2,
	}
)

func (x AssociatedProductsType) Enum() *AssociatedProductsType {
	p := new(AssociatedProductsType)
	*p = x
	return p
}

func (x AssociatedProductsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssociatedProductsType) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_v1_enums_proto_enumTypes[4].Descriptor()
}

func (AssociatedProductsType) Type() protoreflect.EnumType {
	return &file_payment_v1_enums_proto_enumTypes[4]
}

func (x AssociatedProductsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssociatedProductsType.Descriptor instead.
func (AssociatedProductsType) EnumDescriptor() ([]byte, []int) {
	return file_payment_v1_enums_proto_rawDescGZIP(), []int{4}
}

type TaxCategory int32

const (
	TaxCategory_TAX_CATEGORY_NONE      TaxCategory = 0
	TaxCategory_TAX_CATEGORY_INCLUSIVE TaxCategory = 1
	TaxCategory_TAX_CATEGORY_EXCLUSIVE TaxCategory = 2
)

// Enum value maps for TaxCategory.
var (
	TaxCategory_name = map[int32]string{
		0: "TAX_CATEGORY_NONE",
		1: "TAX_CATEGORY_INCLUSIVE",
		2: "TAX_CATEGORY_EXCLUSIVE",
	}
	TaxCategory_value = map[string]int32{
		"TAX_CATEGORY_NONE":      0,
		"TAX_CATEGORY_INCLUSIVE": 1,
		"TAX_CATEGORY_EXCLUSIVE": 2,
	}
)

func (x TaxCategory) Enum() *TaxCategory {
	p := new(TaxCategory)
	*p = x
	return p
}

func (x TaxCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaxCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_v1_enums_proto_enumTypes[5].Descriptor()
}

func (TaxCategory) Type() protoreflect.EnumType {
	return &file_payment_v1_enums_proto_enumTypes[5]
}

func (x TaxCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaxCategory.Descriptor instead.
func (TaxCategory) EnumDescriptor() ([]byte, []int) {
	return file_payment_v1_enums_proto_rawDescGZIP(), []int{5}
}

type PackageType int32

const (
	PackageType_PACKAGE_TYPE_NONE       PackageType = 0
	PackageType_PACKAGE_TYPE_ONE_TIME   PackageType = 1
	PackageType_PACKAGE_TYPE_SLOT_BASED PackageType = 2
	PackageType_PACKAGE_TYPE_FREQUENCY  PackageType = 3
	PackageType_PACKAGE_TYPE_SCHEDULED  PackageType = 4
)

// Enum value maps for PackageType.
var (
	PackageType_name = map[int32]string{
		0: "PACKAGE_TYPE_NONE",
		1: "PACKAGE_TYPE_ONE_TIME",
		2: "PACKAGE_TYPE_SLOT_BASED",
		3: "PACKAGE_TYPE_FREQUENCY",
		4: "PACKAGE_TYPE_SCHEDULED",
	}
	PackageType_value = map[string]int32{
		"PACKAGE_TYPE_NONE":       0,
		"PACKAGE_TYPE_ONE_TIME":   1,
		"PACKAGE_TYPE_SLOT_BASED": 2,
		"PACKAGE_TYPE_FREQUENCY":  3,
		"PACKAGE_TYPE_SCHEDULED":  4,
	}
)

func (x PackageType) Enum() *PackageType {
	p := new(PackageType)
	*p = x
	return p
}

func (x PackageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PackageType) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_v1_enums_proto_enumTypes[6].Descriptor()
}

func (PackageType) Type() protoreflect.EnumType {
	return &file_payment_v1_enums_proto_enumTypes[6]
}

func (x PackageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PackageType.Descriptor instead.
func (PackageType) EnumDescriptor() ([]byte, []int) {
	return file_payment_v1_enums_proto_rawDescGZIP(), []int{6}
}

type MaterialType int32

const (
	MaterialType_MATERIAL_TYPE_NONE      MaterialType = 0
	MaterialType_MATERIAL_TYPE_ONE_TIME  MaterialType = 1
	MaterialType_MATERIAL_TYPE_RECURRING MaterialType = 2
)

// Enum value maps for MaterialType.
var (
	MaterialType_name = map[int32]string{
		0: "MATERIAL_TYPE_NONE",
		1: "MATERIAL_TYPE_ONE_TIME",
		2: "MATERIAL_TYPE_RECURRING",
	}
	MaterialType_value = map[string]int32{
		"MATERIAL_TYPE_NONE":      0,
		"MATERIAL_TYPE_ONE_TIME":  1,
		"MATERIAL_TYPE_RECURRING": 2,
	}
)

func (x MaterialType) Enum() *MaterialType {
	p := new(MaterialType)
	*p = x
	return p
}

func (x MaterialType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MaterialType) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_v1_enums_proto_enumTypes[7].Descriptor()
}

func (MaterialType) Type() protoreflect.EnumType {
	return &file_payment_v1_enums_proto_enumTypes[7]
}

func (x MaterialType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MaterialType.Descriptor instead.
func (MaterialType) EnumDescriptor() ([]byte, []int) {
	return file_payment_v1_enums_proto_rawDescGZIP(), []int{7}
}

type FeeType int32

const (
	FeeType_FEE_TYPE_NONE      FeeType = 0
	FeeType_FEE_TYPE_ONE_TIME  FeeType = 1
	FeeType_FEE_TYPE_RECURRING FeeType = 2
)

// Enum value maps for FeeType.
var (
	FeeType_name = map[int32]string{
		0: "FEE_TYPE_NONE",
		1: "FEE_TYPE_ONE_TIME",
		2: "FEE_TYPE_RECURRING",
	}
	FeeType_value = map[string]int32{
		"FEE_TYPE_NONE":      0,
		"FEE_TYPE_ONE_TIME":  1,
		"FEE_TYPE_RECURRING": 2,
	}
)

func (x FeeType) Enum() *FeeType {
	p := new(FeeType)
	*p = x
	return p
}

func (x FeeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeeType) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_v1_enums_proto_enumTypes[8].Descriptor()
}

func (FeeType) Type() protoreflect.EnumType {
	return &file_payment_v1_enums_proto_enumTypes[8]
}

func (x FeeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeeType.Descriptor instead.
func (FeeType) EnumDescriptor() ([]byte, []int) {
	return file_payment_v1_enums_proto_rawDescGZIP(), []int{8}
}

type LeavingReasonType int32

const (
	LeavingReasonType_LEAVING_REASON_TYPE_NONE       LeavingReasonType = 0
	LeavingReasonType_LEAVING_REASON_TYPE_WITHDRAWAL LeavingReasonType = 1
	LeavingReasonType_LEAVING_REASON_TYPE_GRADUATE   LeavingReasonType = 2
	LeavingReasonType_LEAVING_REASON_TYPE_LOA        LeavingReasonType = 3
)

// Enum value maps for LeavingReasonType.
var (
	LeavingReasonType_name = map[int32]string{
		0: "LEAVING_REASON_TYPE_NONE",
		1: "LEAVING_REASON_TYPE_WITHDRAWAL",
		2: "LEAVING_REASON_TYPE_GRADUATE",
		3: "LEAVING_REASON_TYPE_LOA",
	}
	LeavingReasonType_value = map[string]int32{
		"LEAVING_REASON_TYPE_NONE":       0,
		"LEAVING_REASON_TYPE_WITHDRAWAL": 1,
		"LEAVING_REASON_TYPE_GRADUATE":   2,
		"LEAVING_REASON_TYPE_LOA":        3,
	}
)

func (x LeavingReasonType) Enum() *LeavingReasonType {
	p := new(LeavingReasonType)
	*p = x
	return p
}

func (x LeavingReasonType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LeavingReasonType) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_v1_enums_proto_enumTypes[9].Descriptor()
}

func (LeavingReasonType) Type() protoreflect.EnumType {
	return &file_payment_v1_enums_proto_enumTypes[9]
}

func (x LeavingReasonType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LeavingReasonType.Descriptor instead.
func (LeavingReasonType) EnumDescriptor() ([]byte, []int) {
	return file_payment_v1_enums_proto_rawDescGZIP(), []int{9}
}

type OrderType int32

const (
	OrderType_ORDER_TYPE_NEW            OrderType = 0
	OrderType_ORDER_TYPE_ENROLLMENT     OrderType = 1
	OrderType_ORDER_TYPE_UPDATE         OrderType = 2
	OrderType_ORDER_TYPE_WITHDRAWAL     OrderType = 3
	OrderType_ORDER_TYPE_CUSTOM_BILLING OrderType = 4
	// Deprecated: Do not use.
	OrderType_ORDER_TYPE_PAUSE    OrderType = 5
	OrderType_ORDER_TYPE_GRADUATE OrderType = 6
	OrderType_ORDER_TYPE_RESUME   OrderType = 7
	OrderType_ORDER_TYPE_LOA      OrderType = 8
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "ORDER_TYPE_NEW",
		1: "ORDER_TYPE_ENROLLMENT",
		2: "ORDER_TYPE_UPDATE",
		3: "ORDER_TYPE_WITHDRAWAL",
		4: "ORDER_TYPE_CUSTOM_BILLING",
		5: "ORDER_TYPE_PAUSE",
		6: "ORDER_TYPE_GRADUATE",
		7: "ORDER_TYPE_RESUME",
		8: "ORDER_TYPE_LOA",
	}
	OrderType_value = map[string]int32{
		"ORDER_TYPE_NEW":            0,
		"ORDER_TYPE_ENROLLMENT":     1,
		"ORDER_TYPE_UPDATE":         2,
		"ORDER_TYPE_WITHDRAWAL":     3,
		"ORDER_TYPE_CUSTOM_BILLING": 4,
		"ORDER_TYPE_PAUSE":          5,
		"ORDER_TYPE_GRADUATE":       6,
		"ORDER_TYPE_RESUME":         7,
		"ORDER_TYPE_LOA":            8,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_v1_enums_proto_enumTypes[10].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_payment_v1_enums_proto_enumTypes[10]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_payment_v1_enums_proto_rawDescGZIP(), []int{10}
}

type OrderStatus int32

const (
	OrderStatus_ORDER_STATUS_ALL       OrderStatus = 0
	OrderStatus_ORDER_STATUS_SUBMITTED OrderStatus = 1
	OrderStatus_ORDER_STATUS_PENDING   OrderStatus = 2
	OrderStatus_ORDER_STATUS_REJECTED  OrderStatus = 3
	OrderStatus_ORDER_STATUS_VOIDED    OrderStatus = 4
	OrderStatus_ORDER_STATUS_INVOICED  OrderStatus = 5
)

// Enum value maps for OrderStatus.
var (
	OrderStatus_name = map[int32]string{
		0: "ORDER_STATUS_ALL",
		1: "ORDER_STATUS_SUBMITTED",
		2: "ORDER_STATUS_PENDING",
		3: "ORDER_STATUS_REJECTED",
		4: "ORDER_STATUS_VOIDED",
		5: "ORDER_STATUS_INVOICED",
	}
	OrderStatus_value = map[string]int32{
		"ORDER_STATUS_ALL":       0,
		"ORDER_STATUS_SUBMITTED": 1,
		"ORDER_STATUS_PENDING":   2,
		"ORDER_STATUS_REJECTED":  3,
		"ORDER_STATUS_VOIDED":    4,
		"ORDER_STATUS_INVOICED":  5,
	}
)

func (x OrderStatus) Enum() *OrderStatus {
	p := new(OrderStatus)
	*p = x
	return p
}

func (x OrderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_v1_enums_proto_enumTypes[11].Descriptor()
}

func (OrderStatus) Type() protoreflect.EnumType {
	return &file_payment_v1_enums_proto_enumTypes[11]
}

func (x OrderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderStatus.Descriptor instead.
func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return file_payment_v1_enums_proto_rawDescGZIP(), []int{11}
}

type BillingStatus int32

const (
	BillingStatus_BILLING_STATUS_WAITING_APPROVAL BillingStatus = 0
	BillingStatus_BILLING_STATUS_PENDING          BillingStatus = 1
	BillingStatus_BILLING_STATUS_BILLED           BillingStatus = 2
	BillingStatus_BILLING_STATUS_INVOICED         BillingStatus = 3
	BillingStatus_BILLING_STATUS_CANCELLED        BillingStatus = 4
)

// Enum value maps for BillingStatus.
var (
	BillingStatus_name = map[int32]string{
		0: "BILLING_STATUS_WAITING_APPROVAL",
		1: "BILLING_STATUS_PENDING",
		2: "BILLING_STATUS_BILLED",
		3: "BILLING_STATUS_INVOICED",
		4: "BILLING_STATUS_CANCELLED",
	}
	BillingStatus_value = map[string]int32{
		"BILLING_STATUS_WAITING_APPROVAL": 0,
		"BILLING_STATUS_PENDING":          1,
		"BILLING_STATUS_BILLED":           2,
		"BILLING_STATUS_INVOICED":         3,
		"BILLING_STATUS_CANCELLED":        4,
	}
)

func (x BillingStatus) Enum() *BillingStatus {
	p := new(BillingStatus)
	*p = x
	return p
}

func (x BillingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BillingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_v1_enums_proto_enumTypes[12].Descriptor()
}

func (BillingStatus) Type() protoreflect.EnumType {
	return &file_payment_v1_enums_proto_enumTypes[12]
}

func (x BillingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BillingStatus.Descriptor instead.
func (BillingStatus) EnumDescriptor() ([]byte, []int) {
	return file_payment_v1_enums_proto_rawDescGZIP(), []int{12}
}

type BillingType int32

const (
	BillingType_BILLING_TYPE_BILLED_AT_ORDER    BillingType = 0
	BillingType_BILLING_TYPE_UPCOMING_BILLING   BillingType = 1
	BillingType_BILLING_TYPE_ADJUSTMENT_BILLING BillingType = 2
)

// Enum value maps for BillingType.
var (
	BillingType_name = map[int32]string{
		0: "BILLING_TYPE_BILLED_AT_ORDER",
		1: "BILLING_TYPE_UPCOMING_BILLING",
		2: "BILLING_TYPE_ADJUSTMENT_BILLING",
	}
	BillingType_value = map[string]int32{
		"BILLING_TYPE_BILLED_AT_ORDER":    0,
		"BILLING_TYPE_UPCOMING_BILLING":   1,
		"BILLING_TYPE_ADJUSTMENT_BILLING": 2,
	}
)

func (x BillingType) Enum() *BillingType {
	p := new(BillingType)
	*p = x
	return p
}

func (x BillingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BillingType) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_v1_enums_proto_enumTypes[13].Descriptor()
}

func (BillingType) Type() protoreflect.EnumType {
	return &file_payment_v1_enums_proto_enumTypes[13]
}

func (x BillingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BillingType.Descriptor instead.
func (BillingType) EnumDescriptor() ([]byte, []int) {
	return file_payment_v1_enums_proto_rawDescGZIP(), []int{13}
}

type OrderActionStatus int32

const (
	OrderActionStatus_ORDER_ACTION_SUBMITTED OrderActionStatus = 0
	OrderActionStatus_ORDER_ACTION_VOIDED    OrderActionStatus = 1
)

// Enum value maps for OrderActionStatus.
var (
	OrderActionStatus_name = map[int32]string{
		0: "ORDER_ACTION_SUBMITTED",
		1: "ORDER_ACTION_VOIDED",
	}
	OrderActionStatus_value = map[string]int32{
		"ORDER_ACTION_SUBMITTED": 0,
		"ORDER_ACTION_VOIDED":    1,
	}
)

func (x OrderActionStatus) Enum() *OrderActionStatus {
	p := new(OrderActionStatus)
	*p = x
	return p
}

func (x OrderActionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderActionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_v1_enums_proto_enumTypes[14].Descriptor()
}

func (OrderActionStatus) Type() protoreflect.EnumType {
	return &file_payment_v1_enums_proto_enumTypes[14]
}

func (x OrderActionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderActionStatus.Descriptor instead.
func (OrderActionStatus) EnumDescriptor() ([]byte, []int) {
	return file_payment_v1_enums_proto_rawDescGZIP(), []int{14}
}

type QuantityType int32

const (
	QuantityType_QUANTITY_TYPE_NONE          QuantityType = 0
	QuantityType_QUANTITY_TYPE_COURSE_WEIGHT QuantityType = 1
	QuantityType_QUANTITY_TYPE_SLOT          QuantityType = 2
	QuantityType_QUANTITY_TYPE_SLOT_PER_WEEK QuantityType = 3
)

// Enum value maps for QuantityType.
var (
	QuantityType_name = map[int32]string{
		0: "QUANTITY_TYPE_NONE",
		1: "QUANTITY_TYPE_COURSE_WEIGHT",
		2: "QUANTITY_TYPE_SLOT",
		3: "QUANTITY_TYPE_SLOT_PER_WEEK",
	}
	QuantityType_value = map[string]int32{
		"QUANTITY_TYPE_NONE":          0,
		"QUANTITY_TYPE_COURSE_WEIGHT": 1,
		"QUANTITY_TYPE_SLOT":          2,
		"QUANTITY_TYPE_SLOT_PER_WEEK": 3,
	}
)

func (x QuantityType) Enum() *QuantityType {
	p := new(QuantityType)
	*p = x
	return p
}

func (x QuantityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuantityType) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_v1_enums_proto_enumTypes[15].Descriptor()
}

func (QuantityType) Type() protoreflect.EnumType {
	return &file_payment_v1_enums_proto_enumTypes[15]
}

func (x QuantityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuantityType.Descriptor instead.
func (QuantityType) EnumDescriptor() ([]byte, []int) {
	return file_payment_v1_enums_proto_rawDescGZIP(), []int{15}
}

type BillingItemType int32

const (
	BillingItemType_ONE_TIME_MATERIAL  BillingItemType = 0
	BillingItemType_ONE_TIME_FEE       BillingItemType = 1
	BillingItemType_ONE_TIME_PACKAGE   BillingItemType = 2
	BillingItemType_RECURRING_MATERIAL BillingItemType = 3
	BillingItemType_RECURRING_FEE      BillingItemType = 4
	BillingItemType_RECURRING_PACKAGE  BillingItemType = 5
)

// Enum value maps for BillingItemType.
var (
	BillingItemType_name = map[int32]string{
		0: "ONE_TIME_MATERIAL",
		1: "ONE_TIME_FEE",
		2: "ONE_TIME_PACKAGE",
		3: "RECURRING_MATERIAL",
		4: "RECURRING_FEE",
		5: "RECURRING_PACKAGE",
	}
	BillingItemType_value = map[string]int32{
		"ONE_TIME_MATERIAL":  0,
		"ONE_TIME_FEE":       1,
		"ONE_TIME_PACKAGE":   2,
		"RECURRING_MATERIAL": 3,
		"RECURRING_FEE":      4,
		"RECURRING_PACKAGE":  5,
	}
)

func (x BillingItemType) Enum() *BillingItemType {
	p := new(BillingItemType)
	*p = x
	return p
}

func (x BillingItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BillingItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_v1_enums_proto_enumTypes[16].Descriptor()
}

func (BillingItemType) Type() protoreflect.EnumType {
	return &file_payment_v1_enums_proto_enumTypes[16]
}

func (x BillingItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BillingItemType.Descriptor instead.
func (BillingItemType) EnumDescriptor() ([]byte, []int) {
	return file_payment_v1_enums_proto_rawDescGZIP(), []int{16}
}

type StudentProductStatus int32

const (
	StudentProductStatus_PENDING   StudentProductStatus = 0
	StudentProductStatus_ORDERED   StudentProductStatus = 1
	StudentProductStatus_CANCELLED StudentProductStatus = 2
)

// Enum value maps for StudentProductStatus.
var (
	StudentProductStatus_name = map[int32]string{
		0: "PENDING",
		1: "ORDERED",
		2: "CANCELLED",
	}
	StudentProductStatus_value = map[string]int32{
		"PENDING":   0,
		"ORDERED":   1,
		"CANCELLED": 2,
	}
)

func (x StudentProductStatus) Enum() *StudentProductStatus {
	p := new(StudentProductStatus)
	*p = x
	return p
}

func (x StudentProductStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StudentProductStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_v1_enums_proto_enumTypes[17].Descriptor()
}

func (StudentProductStatus) Type() protoreflect.EnumType {
	return &file_payment_v1_enums_proto_enumTypes[17]
}

func (x StudentProductStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StudentProductStatus.Descriptor instead.
func (StudentProductStatus) EnumDescriptor() ([]byte, []int) {
	return file_payment_v1_enums_proto_rawDescGZIP(), []int{17}
}

type StudentProductLabel int32

const (
	StudentProductLabel_CREATED              StudentProductLabel = 0
	StudentProductLabel_UPDATED              StudentProductLabel = 1
	StudentProductLabel_UPDATE_SCHEDULED     StudentProductLabel = 2
	StudentProductLabel_WITHDRAWAL_SCHEDULED StudentProductLabel = 3
	StudentProductLabel_GRADUATION_SCHEDULED StudentProductLabel = 4
	StudentProductLabel_PAUSE_SCHEDULED      StudentProductLabel = 5
	StudentProductLabel_PAUSED               StudentProductLabel = 6
)

// Enum value maps for StudentProductLabel.
var (
	StudentProductLabel_name = map[int32]string{
		0: "CREATED",
		1: "UPDATED",
		2: "UPDATE_SCHEDULED",
		3: "WITHDRAWAL_SCHEDULED",
		4: "GRADUATION_SCHEDULED",
		5: "PAUSE_SCHEDULED",
		6: "PAUSED",
	}
	StudentProductLabel_value = map[string]int32{
		"CREATED":              0,
		"UPDATED":              1,
		"UPDATE_SCHEDULED":     2,
		"WITHDRAWAL_SCHEDULED": 3,
		"GRADUATION_SCHEDULED": 4,
		"PAUSE_SCHEDULED":      5,
		"PAUSED":               6,
	}
)

func (x StudentProductLabel) Enum() *StudentProductLabel {
	p := new(StudentProductLabel)
	*p = x
	return p
}

func (x StudentProductLabel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StudentProductLabel) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_v1_enums_proto_enumTypes[18].Descriptor()
}

func (StudentProductLabel) Type() protoreflect.EnumType {
	return &file_payment_v1_enums_proto_enumTypes[18]
}

func (x StudentProductLabel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StudentProductLabel.Descriptor instead.
func (StudentProductLabel) EnumDescriptor() ([]byte, []int) {
	return file_payment_v1_enums_proto_rawDescGZIP(), []int{18}
}

type ReviewedFlag int32

const (
	ReviewedFlag_NOT_REVIEWED ReviewedFlag = 0
	ReviewedFlag_REVIEWED     ReviewedFlag = 1
)

// Enum value maps for ReviewedFlag.
var (
	ReviewedFlag_name = map[int32]string{
		0: "NOT_REVIEWED",
		1: "REVIEWED",
	}
	ReviewedFlag_value = map[string]int32{
		"NOT_REVIEWED": 0,
		"REVIEWED":     1,
	}
)

func (x ReviewedFlag) Enum() *ReviewedFlag {
	p := new(ReviewedFlag)
	*p = x
	return p
}

func (x ReviewedFlag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReviewedFlag) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_v1_enums_proto_enumTypes[19].Descriptor()
}

func (ReviewedFlag) Type() protoreflect.EnumType {
	return &file_payment_v1_enums_proto_enumTypes[19]
}

func (x ReviewedFlag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReviewedFlag.Descriptor instead.
func (ReviewedFlag) EnumDescriptor() ([]byte, []int) {
	return file_payment_v1_enums_proto_rawDescGZIP(), []int{19}
}

type FileName int32

const (
	FileName_ENROLLMENT FileName = 0
)

// Enum value maps for FileName.
var (
	FileName_name = map[int32]string{
		0: "ENROLLMENT",
	}
	FileName_value = map[string]int32{
		"ENROLLMENT": 0,
	}
)

func (x FileName) Enum() *FileName {
	p := new(FileName)
	*p = x
	return p
}

func (x FileName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileName) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_v1_enums_proto_enumTypes[20].Descriptor()
}

func (FileName) Type() protoreflect.EnumType {
	return &file_payment_v1_enums_proto_enumTypes[20]
}

func (x FileName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileName.Descriptor instead.
func (FileName) EnumDescriptor() ([]byte, []int) {
	return file_payment_v1_enums_proto_rawDescGZIP(), []int{20}
}

type FileType int32

const (
	FileType_PDF FileType = 0
)

// Enum value maps for FileType.
var (
	FileType_name = map[int32]string{
		0: "PDF",
	}
	FileType_value = map[string]int32{
		"PDF": 0,
	}
)

func (x FileType) Enum() *FileType {
	p := new(FileType)
	*p = x
	return p
}

func (x FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_v1_enums_proto_enumTypes[21].Descriptor()
}

func (FileType) Type() protoreflect.EnumType {
	return &file_payment_v1_enums_proto_enumTypes[21]
}

func (x FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileType.Descriptor instead.
func (FileType) EnumDescriptor() ([]byte, []int) {
	return file_payment_v1_enums_proto_rawDescGZIP(), []int{21}
}

type ExportMasterDataType int32

const (
	ExportMasterDataType_EXPORT_ACCOUNTING_CATEGORY                    ExportMasterDataType = 0
	ExportMasterDataType_EXPORT_ASSOCIATED_PRODUCTS_FEE                ExportMasterDataType = 1
	ExportMasterDataType_EXPORT_ASSOCIATED_PRODUCTS_MATERIAL           ExportMasterDataType = 2
	ExportMasterDataType_EXPORT_BILLING_RATIO                          ExportMasterDataType = 3
	ExportMasterDataType_EXPORT_BILLING_SCHEDULE                       ExportMasterDataType = 4
	ExportMasterDataType_EXPORT_BILLING_SCHEDULE_PERIOD                ExportMasterDataType = 5
	ExportMasterDataType_EXPORT_DISCOUNT                               ExportMasterDataType = 6
	ExportMasterDataType_EXPORT_FEE                                    ExportMasterDataType = 7
	ExportMasterDataType_EXPORT_LEAVING_REASON                         ExportMasterDataType = 8
	ExportMasterDataType_EXPORT_MATERIAL                               ExportMasterDataType = 9
	ExportMasterDataType_EXPORT_TAX                                    ExportMasterDataType = 10
	ExportMasterDataType_EXPORT_PRODUCT_SETTING                        ExportMasterDataType = 11
	ExportMasterDataType_EXPORT_PRODUCT_PRICE                          ExportMasterDataType = 12
	ExportMasterDataType_EXPORT_PRODUCT_DISCOUNT                       ExportMasterDataType = 13
	ExportMasterDataType_EXPORT_PRODUCT_ASSOCIATED_LOCATION            ExportMasterDataType = 14
	ExportMasterDataType_EXPORT_PRODUCT_ASSOCIATED_GRADE               ExportMasterDataType = 15
	ExportMasterDataType_EXPORT_PRODUCT_ASSOCIATED_ACCOUNTING_CATEGORY ExportMasterDataType = 16
	ExportMasterDataType_EXPORT_PACKAGE_QUANTITY_TYPE_MAPPING          ExportMasterDataType = 17
	ExportMasterDataType_EXPORT_PACKAGE_ASSOCIATED_COURSE              ExportMasterDataType = 18
	ExportMasterDataType_EXPORT_PACKAGE                                ExportMasterDataType = 19
	ExportMasterDataType_EXPORT_NOTIFICATION_DATE                      ExportMasterDataType = 20
)

// Enum value maps for ExportMasterDataType.
var (
	ExportMasterDataType_name = map[int32]string{
		0:  "EXPORT_ACCOUNTING_CATEGORY",
		1:  "EXPORT_ASSOCIATED_PRODUCTS_FEE",
		2:  "EXPORT_ASSOCIATED_PRODUCTS_MATERIAL",
		3:  "EXPORT_BILLING_RATIO",
		4:  "EXPORT_BILLING_SCHEDULE",
		5:  "EXPORT_BILLING_SCHEDULE_PERIOD",
		6:  "EXPORT_DISCOUNT",
		7:  "EXPORT_FEE",
		8:  "EXPORT_LEAVING_REASON",
		9:  "EXPORT_MATERIAL",
		10: "EXPORT_TAX",
		11: "EXPORT_PRODUCT_SETTING",
		12: "EXPORT_PRODUCT_PRICE",
		13: "EXPORT_PRODUCT_DISCOUNT",
		14: "EXPORT_PRODUCT_ASSOCIATED_LOCATION",
		15: "EXPORT_PRODUCT_ASSOCIATED_GRADE",
		16: "EXPORT_PRODUCT_ASSOCIATED_ACCOUNTING_CATEGORY",
		17: "EXPORT_PACKAGE_QUANTITY_TYPE_MAPPING",
		18: "EXPORT_PACKAGE_ASSOCIATED_COURSE",
		19: "EXPORT_PACKAGE",
		20: "EXPORT_NOTIFICATION_DATE",
	}
	ExportMasterDataType_value = map[string]int32{
		"EXPORT_ACCOUNTING_CATEGORY":                    0,
		"EXPORT_ASSOCIATED_PRODUCTS_FEE":                1,
		"EXPORT_ASSOCIATED_PRODUCTS_MATERIAL":           2,
		"EXPORT_BILLING_RATIO":                          3,
		"EXPORT_BILLING_SCHEDULE":                       4,
		"EXPORT_BILLING_SCHEDULE_PERIOD":                5,
		"EXPORT_DISCOUNT":                               6,
		"EXPORT_FEE":                                    7,
		"EXPORT_LEAVING_REASON":                         8,
		"EXPORT_MATERIAL":                               9,
		"EXPORT_TAX":                                    10,
		"EXPORT_PRODUCT_SETTING":                        11,
		"EXPORT_PRODUCT_PRICE":                          12,
		"EXPORT_PRODUCT_DISCOUNT":                       13,
		"EXPORT_PRODUCT_ASSOCIATED_LOCATION":            14,
		"EXPORT_PRODUCT_ASSOCIATED_GRADE":               15,
		"EXPORT_PRODUCT_ASSOCIATED_ACCOUNTING_CATEGORY": 16,
		"EXPORT_PACKAGE_QUANTITY_TYPE_MAPPING":          17,
		"EXPORT_PACKAGE_ASSOCIATED_COURSE":              18,
		"EXPORT_PACKAGE":                                19,
		"EXPORT_NOTIFICATION_DATE":                      20,
	}
)

func (x ExportMasterDataType) Enum() *ExportMasterDataType {
	p := new(ExportMasterDataType)
	*p = x
	return p
}

func (x ExportMasterDataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExportMasterDataType) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_v1_enums_proto_enumTypes[22].Descriptor()
}

func (ExportMasterDataType) Type() protoreflect.EnumType {
	return &file_payment_v1_enums_proto_enumTypes[22]
}

func (x ExportMasterDataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExportMasterDataType.Descriptor instead.
func (ExportMasterDataType) EnumDescriptor() ([]byte, []int) {
	return file_payment_v1_enums_proto_rawDescGZIP(), []int{22}
}

type ProductStatus int32

const (
	ProductStatus_PRODUCT_STATUS_ALL      ProductStatus = 0
	ProductStatus_PRODUCT_STATUS_ACTIVE   ProductStatus = 1
	ProductStatus_PRODUCT_STATUS_INACTIVE ProductStatus = 2
)

// Enum value maps for ProductStatus.
var (
	ProductStatus_name = map[int32]string{
		0: "PRODUCT_STATUS_ALL",
		1: "PRODUCT_STATUS_ACTIVE",
		2: "PRODUCT_STATUS_INACTIVE",
	}
	ProductStatus_value = map[string]int32{
		"PRODUCT_STATUS_ALL":      0,
		"PRODUCT_STATUS_ACTIVE":   1,
		"PRODUCT_STATUS_INACTIVE": 2,
	}
)

func (x ProductStatus) Enum() *ProductStatus {
	p := new(ProductStatus)
	*p = x
	return p
}

func (x ProductStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_v1_enums_proto_enumTypes[23].Descriptor()
}

func (ProductStatus) Type() protoreflect.EnumType {
	return &file_payment_v1_enums_proto_enumTypes[23]
}

func (x ProductStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductStatus.Descriptor instead.
func (ProductStatus) EnumDescriptor() ([]byte, []int) {
	return file_payment_v1_enums_proto_rawDescGZIP(), []int{23}
}

type ProductPriceType int32

const (
	ProductPriceType_DEFAULT_PRICE  ProductPriceType = 0
	ProductPriceType_ENROLLED_PRICE ProductPriceType = 1
)

// Enum value maps for ProductPriceType.
var (
	ProductPriceType_name = map[int32]string{
		0: "DEFAULT_PRICE",
		1: "ENROLLED_PRICE",
	}
	ProductPriceType_value = map[string]int32{
		"DEFAULT_PRICE":  0,
		"ENROLLED_PRICE": 1,
	}
)

func (x ProductPriceType) Enum() *ProductPriceType {
	p := new(ProductPriceType)
	*p = x
	return p
}

func (x ProductPriceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductPriceType) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_v1_enums_proto_enumTypes[24].Descriptor()
}

func (ProductPriceType) Type() protoreflect.EnumType {
	return &file_payment_v1_enums_proto_enumTypes[24]
}

func (x ProductPriceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductPriceType.Descriptor instead.
func (ProductPriceType) EnumDescriptor() ([]byte, []int) {
	return file_payment_v1_enums_proto_rawDescGZIP(), []int{24}
}

type ProductTags int32

const (
	ProductTags_PRODUCT_TAG_NONE        ProductTags = 0
	ProductTags_PRODUCT_TAG_TRIAL       ProductTags = 1
	ProductTags_PRODUCT_TAG_SEASONAL    ProductTags = 2
	ProductTags_PRODUCT_TAG_EXAMINATION ProductTags = 3
)

// Enum value maps for ProductTags.
var (
	ProductTags_name = map[int32]string{
		0: "PRODUCT_TAG_NONE",
		1: "PRODUCT_TAG_TRIAL",
		2: "PRODUCT_TAG_SEASONAL",
		3: "PRODUCT_TAG_EXAMINATION",
	}
	ProductTags_value = map[string]int32{
		"PRODUCT_TAG_NONE":        0,
		"PRODUCT_TAG_TRIAL":       1,
		"PRODUCT_TAG_SEASONAL":    2,
		"PRODUCT_TAG_EXAMINATION": 3,
	}
)

func (x ProductTags) Enum() *ProductTags {
	p := new(ProductTags)
	*p = x
	return p
}

func (x ProductTags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductTags) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_v1_enums_proto_enumTypes[25].Descriptor()
}

func (ProductTags) Type() protoreflect.EnumType {
	return &file_payment_v1_enums_proto_enumTypes[25]
}

func (x ProductTags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductTags.Descriptor instead.
func (ProductTags) EnumDescriptor() ([]byte, []int) {
	return file_payment_v1_enums_proto_rawDescGZIP(), []int{25}
}

type StudentPackageActions int32

const (
	StudentPackageActions_STUDENT_PACKAGE_ACTION_INSERT   StudentPackageActions = 0
	StudentPackageActions_STUDENT_PACKAGE_ACTION_UPDATE   StudentPackageActions = 1
	StudentPackageActions_STUDENT_PACKAGE_ACTION_UPSERT   StudentPackageActions = 2
	StudentPackageActions_STUDENT_PACKAGE_ACTION_CANCELED StudentPackageActions = 3
)

// Enum value maps for StudentPackageActions.
var (
	StudentPackageActions_name = map[int32]string{
		0: "STUDENT_PACKAGE_ACTION_INSERT",
		1: "STUDENT_PACKAGE_ACTION_UPDATE",
		2: "STUDENT_PACKAGE_ACTION_UPSERT",
		3: "STUDENT_PACKAGE_ACTION_CANCELED",
	}
	StudentPackageActions_value = map[string]int32{
		"STUDENT_PACKAGE_ACTION_INSERT":   0,
		"STUDENT_PACKAGE_ACTION_UPDATE":   1,
		"STUDENT_PACKAGE_ACTION_UPSERT":   2,
		"STUDENT_PACKAGE_ACTION_CANCELED": 3,
	}
)

func (x StudentPackageActions) Enum() *StudentPackageActions {
	p := new(StudentPackageActions)
	*p = x
	return p
}

func (x StudentPackageActions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StudentPackageActions) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_v1_enums_proto_enumTypes[26].Descriptor()
}

func (StudentPackageActions) Type() protoreflect.EnumType {
	return &file_payment_v1_enums_proto_enumTypes[26]
}

func (x StudentPackageActions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StudentPackageActions.Descriptor instead.
func (StudentPackageActions) EnumDescriptor() ([]byte, []int) {
	return file_payment_v1_enums_proto_rawDescGZIP(), []int{26}
}

var File_payment_v1_enums_proto protoreflect.FileDescriptor

var file_payment_v1_enums_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2a, 0x98, 0x02, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x45, 0x47, 0x55, 0x4c, 0x41, 0x52, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x4f, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x49, 0x42, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d,
	0x50, 0x4c, 0x4f, 0x59, 0x45, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d, 0x50, 0x4c, 0x4f, 0x59, 0x45, 0x45, 0x5f, 0x50, 0x41, 0x52,
	0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45,
	0x5f, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c,
	0x59, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4d, 0x50, 0x41, 0x49, 0x47, 0x4e, 0x10, 0x08, 0x2a,
	0x7f, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52,
	0x43, 0x45, 0x4e, 0x54, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x46, 0x49, 0x58, 0x45, 0x44, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02,
	0x2a, 0x6f, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x15, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x50,
	0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x45, 0x45, 0x10,
	0x03, 0x2a, 0x9f, 0x02, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x25, 0x0a, 0x21, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x41, 0x53, 0x53, 0x4f, 0x43,
	0x49, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43,
	0x54, 0x5f, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x55, 0x52, 0x53, 0x45, 0x10, 0x01, 0x12,
	0x29, 0x0a, 0x25, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x41, 0x53, 0x53, 0x4f, 0x43,
	0x49, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x52,
	0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x45, 0x44,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x44, 0x45,
	0x10, 0x03, 0x12, 0x34, 0x0a, 0x30, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x41, 0x53,
	0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x52, 0x4f, 0x44,
	0x55, 0x43, 0x54, 0x5f, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x05, 0x2a, 0x75, 0x0a, 0x16, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x18, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x44,
	0x55, 0x43, 0x54, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x41,
	0x53, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43,
	0x54, 0x53, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1b, 0x0a,
	0x17, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x44,
	0x55, 0x43, 0x54, 0x53, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x02, 0x2a, 0x5c, 0x0a, 0x0b, 0x54, 0x61,
	0x78, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x41, 0x58,
	0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x16, 0x54, 0x41, 0x58, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16,
	0x54, 0x41, 0x58, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x45, 0x58, 0x43,
	0x4c, 0x55, 0x53, 0x49, 0x56, 0x45, 0x10, 0x02, 0x2a, 0x94, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x41, 0x43, 0x4b,
	0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4f, 0x4e, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x41,
	0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x5f,
	0x42, 0x41, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41, 0x43, 0x4b, 0x41,
	0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43,
	0x59, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x2a,
	0x5f, 0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x12, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x41, 0x54, 0x45, 0x52,
	0x49, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x55, 0x52, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02,
	0x2a, 0x4b, 0x0a, 0x07, 0x46, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x46,
	0x45, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x15,
	0x0a, 0x11, 0x46, 0x45, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x45, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x45, 0x43, 0x55, 0x52, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x2a, 0x94, 0x01,
	0x0a, 0x11, 0x4c, 0x65, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x45, 0x41, 0x56, 0x49, 0x4e, 0x47, 0x5f, 0x52,
	0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x22, 0x0a, 0x1e, 0x4c, 0x45, 0x41, 0x56, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41,
	0x57, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x4c, 0x45, 0x41, 0x56, 0x49, 0x4e, 0x47,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x41,
	0x44, 0x55, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x45, 0x41, 0x56, 0x49,
	0x4e, 0x47, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c,
	0x4f, 0x41, 0x10, 0x03, 0x2a, 0xe9, 0x01, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x45, 0x57, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x01, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x41,
	0x4c, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47,
	0x10, 0x04, 0x12, 0x18, 0x0a, 0x10, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x10, 0x05, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x17, 0x0a, 0x13,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x44, 0x55,
	0x41, 0x54, 0x45, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x10, 0x08,
	0x2a, 0xa8, 0x01, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x14, 0x0a, 0x10, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4a,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x56, 0x4f, 0x49, 0x44, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x19, 0x0a, 0x15, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x44, 0x10, 0x05, 0x2a, 0xa6, 0x01, 0x0a, 0x0d,
	0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a,
	0x1f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x19,
	0x0a, 0x15, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x49, 0x4c,
	0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x4f,
	0x49, 0x43, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c,
	0x45, 0x44, 0x10, 0x04, 0x2a, 0x77, 0x0a, 0x0b, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x43, 0x4f, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x42,
	0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x49, 0x4c, 0x4c,
	0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x4a, 0x55, 0x53, 0x54, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x2a, 0x48, 0x0a,
	0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x56,
	0x4f, 0x49, 0x44, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x80, 0x01, 0x0a, 0x0c, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x51, 0x55, 0x41, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x1f, 0x0a, 0x1b, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x4f, 0x55, 0x52, 0x53, 0x45, 0x5f, 0x57, 0x45, 0x49, 0x47, 0x48, 0x54, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x51, 0x55, 0x41,
	0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x5f,
	0x50, 0x45, 0x52, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x03, 0x2a, 0x92, 0x01, 0x0a, 0x0f, 0x42,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15,
	0x0a, 0x11, 0x4f, 0x4e, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52,
	0x49, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x4e, 0x45, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x4e, 0x45, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a,
	0x12, 0x52, 0x45, 0x43, 0x55, 0x52, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52,
	0x49, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x43, 0x55, 0x52, 0x52, 0x49,
	0x4e, 0x47, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x43, 0x55,
	0x52, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x05, 0x2a,
	0x3f, 0x0a, 0x14, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x02,
	0x2a, 0x9a, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x57, 0x49, 0x54, 0x48,
	0x44, 0x52, 0x41, 0x57, 0x41, 0x4c, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x52, 0x41, 0x44, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f,
	0x50, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x44, 0x10,
	0x05, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x06, 0x2a, 0x2e, 0x0a,
	0x0c, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x10, 0x0a,
	0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x1a, 0x0a,
	0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x52,
	0x4f, 0x4c, 0x4c, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x2a, 0x13, 0x0a, 0x08, 0x46, 0x69, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x44, 0x46, 0x10, 0x00, 0x2a, 0x98,
	0x05, 0x0a, 0x14, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x58, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x58, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f,
	0x44, 0x55, 0x43, 0x54, 0x53, 0x5f, 0x46, 0x45, 0x45, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x45,
	0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x45, 0x44,
	0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x53, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49,
	0x41, 0x4c, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x42,
	0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x10, 0x03, 0x12, 0x1b,
	0x0a, 0x17, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x45,
	0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x43,
	0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x05, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46,
	0x45, 0x45, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4c,
	0x45, 0x41, 0x56, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x10, 0x08, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49,
	0x41, 0x4c, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x54,
	0x41, 0x58, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x0b,
	0x12, 0x18, 0x0a, 0x14, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55,
	0x43, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x0c, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x58,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x44, 0x49, 0x53,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0d, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x58, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x49,
	0x41, 0x54, 0x45, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0e, 0x12,
	0x23, 0x0a, 0x1f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43,
	0x54, 0x5f, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x47, 0x52, 0x41,
	0x44, 0x45, 0x10, 0x0f, 0x12, 0x31, 0x0a, 0x2d, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x45,
	0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x54,
	0x45, 0x47, 0x4f, 0x52, 0x59, 0x10, 0x10, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x58, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10,
	0x11, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x41, 0x43, 0x4b,
	0x41, 0x47, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x43,
	0x4f, 0x55, 0x52, 0x53, 0x45, 0x10, 0x12, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x58, 0x50, 0x4f, 0x52,
	0x54, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x13, 0x12, 0x1c, 0x0a, 0x18, 0x45,
	0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x14, 0x2a, 0x5f, 0x0a, 0x0d, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52,
	0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x4c, 0x4c,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a,
	0x17, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x2a, 0x39, 0x0a, 0x10, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11,
	0x0a, 0x0d, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x50, 0x52,
	0x49, 0x43, 0x45, 0x10, 0x01, 0x2a, 0x71, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x54, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f,
	0x54, 0x41, 0x47, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52,
	0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x54, 0x52, 0x49, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x54, 0x41, 0x47,
	0x5f, 0x53, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x50,
	0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x45, 0x58, 0x41, 0x4d, 0x49,
	0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a, 0xa5, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x55, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41,
	0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x53,
	0x45, 0x52, 0x54, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x55, 0x44, 0x45, 0x4e, 0x54,
	0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x55, 0x44,
	0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x53, 0x45, 0x52, 0x54, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x53,
	0x54, 0x55, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x03,
	0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d,
	0x61, 0x6e, 0x61, 0x62, 0x69, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x62, 0x75, 0x66, 0x2f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x6d, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_payment_v1_enums_proto_rawDescOnce sync.Once
	file_payment_v1_enums_proto_rawDescData = file_payment_v1_enums_proto_rawDesc
)

func file_payment_v1_enums_proto_rawDescGZIP() []byte {
	file_payment_v1_enums_proto_rawDescOnce.Do(func() {
		file_payment_v1_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_payment_v1_enums_proto_rawDescData)
	})
	return file_payment_v1_enums_proto_rawDescData
}

var file_payment_v1_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 27)
var file_payment_v1_enums_proto_goTypes = []interface{}{
	(DiscountType)(0),              // 0: payment.v1.DiscountType
	(DiscountAmountType)(0),        // 1: payment.v1.DiscountAmountType
	(ProductType)(0),               // 2: payment.v1.ProductType
	(ProductAssociatedDataType)(0), // 3: payment.v1.ProductAssociatedDataType
	(AssociatedProductsType)(0),    // 4: payment.v1.AssociatedProductsType
	(TaxCategory)(0),               // 5: payment.v1.TaxCategory
	(PackageType)(0),               // 6: payment.v1.PackageType
	(MaterialType)(0),              // 7: payment.v1.MaterialType
	(FeeType)(0),                   // 8: payment.v1.FeeType
	(LeavingReasonType)(0),         // 9: payment.v1.LeavingReasonType
	(OrderType)(0),                 // 10: payment.v1.OrderType
	(OrderStatus)(0),               // 11: payment.v1.OrderStatus
	(BillingStatus)(0),             // 12: payment.v1.BillingStatus
	(BillingType)(0),               // 13: payment.v1.BillingType
	(OrderActionStatus)(0),         // 14: payment.v1.OrderActionStatus
	(QuantityType)(0),              // 15: payment.v1.QuantityType
	(BillingItemType)(0),           // 16: payment.v1.BillingItemType
	(StudentProductStatus)(0),      // 17: payment.v1.StudentProductStatus
	(StudentProductLabel)(0),       // 18: payment.v1.StudentProductLabel
	(ReviewedFlag)(0),              // 19: payment.v1.ReviewedFlag
	(FileName)(0),                  // 20: payment.v1.FileName
	(FileType)(0),                  // 21: payment.v1.FileType
	(ExportMasterDataType)(0),      // 22: payment.v1.ExportMasterDataType
	(ProductStatus)(0),             // 23: payment.v1.ProductStatus
	(ProductPriceType)(0),          // 24: payment.v1.ProductPriceType
	(ProductTags)(0),               // 25: payment.v1.ProductTags
	(StudentPackageActions)(0),     // 26: payment.v1.StudentPackageActions
}
var file_payment_v1_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_payment_v1_enums_proto_init() }
func file_payment_v1_enums_proto_init() {
	if File_payment_v1_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_payment_v1_enums_proto_rawDesc,
			NumEnums:      27,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_payment_v1_enums_proto_goTypes,
		DependencyIndexes: file_payment_v1_enums_proto_depIdxs,
		EnumInfos:         file_payment_v1_enums_proto_enumTypes,
	}.Build()
	File_payment_v1_enums_proto = out.File
	file_payment_v1_enums_proto_rawDesc = nil
	file_payment_v1_enums_proto_goTypes = nil
	file_payment_v1_enums_proto_depIdxs = nil
}
