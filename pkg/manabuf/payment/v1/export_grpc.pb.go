// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pmpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ExportServiceClient is the client API for ExportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExportServiceClient interface {
	ExportStudentBilling(ctx context.Context, in *ExportStudentBillingRequest, opts ...grpc.CallOption) (*ExportStudentBillingResponse, error)
	ExportMasterData(ctx context.Context, in *ExportMasterDataRequest, opts ...grpc.CallOption) (*ExportMasterDataResponse, error)
}

type exportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExportServiceClient(cc grpc.ClientConnInterface) ExportServiceClient {
	return &exportServiceClient{cc}
}

func (c *exportServiceClient) ExportStudentBilling(ctx context.Context, in *ExportStudentBillingRequest, opts ...grpc.CallOption) (*ExportStudentBillingResponse, error) {
	out := new(ExportStudentBillingResponse)
	err := c.cc.Invoke(ctx, "/payment.v1.ExportService/ExportStudentBilling", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exportServiceClient) ExportMasterData(ctx context.Context, in *ExportMasterDataRequest, opts ...grpc.CallOption) (*ExportMasterDataResponse, error) {
	out := new(ExportMasterDataResponse)
	err := c.cc.Invoke(ctx, "/payment.v1.ExportService/ExportMasterData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExportServiceServer is the server API for ExportService service.
// All implementations should embed UnimplementedExportServiceServer
// for forward compatibility
type ExportServiceServer interface {
	ExportStudentBilling(context.Context, *ExportStudentBillingRequest) (*ExportStudentBillingResponse, error)
	ExportMasterData(context.Context, *ExportMasterDataRequest) (*ExportMasterDataResponse, error)
}

// UnimplementedExportServiceServer should be embedded to have forward compatible implementations.
type UnimplementedExportServiceServer struct {
}

func (UnimplementedExportServiceServer) ExportStudentBilling(context.Context, *ExportStudentBillingRequest) (*ExportStudentBillingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportStudentBilling not implemented")
}
func (UnimplementedExportServiceServer) ExportMasterData(context.Context, *ExportMasterDataRequest) (*ExportMasterDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportMasterData not implemented")
}

// UnsafeExportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExportServiceServer will
// result in compilation errors.
type UnsafeExportServiceServer interface {
	mustEmbedUnimplementedExportServiceServer()
}

func RegisterExportServiceServer(s grpc.ServiceRegistrar, srv ExportServiceServer) {
	s.RegisterService(&_ExportService_serviceDesc, srv)
}

func _ExportService_ExportStudentBilling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportStudentBillingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExportServiceServer).ExportStudentBilling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.ExportService/ExportStudentBilling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExportServiceServer).ExportStudentBilling(ctx, req.(*ExportStudentBillingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExportService_ExportMasterData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportMasterDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExportServiceServer).ExportMasterData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.ExportService/ExportMasterData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExportServiceServer).ExportMasterData(ctx, req.(*ExportMasterDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExportService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "payment.v1.ExportService",
	HandlerType: (*ExportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExportStudentBilling",
			Handler:    _ExportService_ExportStudentBilling_Handler,
		},
		{
			MethodName: "ExportMasterData",
			Handler:    _ExportService_ExportMasterData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment/v1/export.proto",
}
