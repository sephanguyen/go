// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pmpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CourseServiceClient is the client API for CourseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourseServiceClient interface {
	ImportStudentCourses(ctx context.Context, in *ImportStudentCoursesRequest, opts ...grpc.CallOption) (*ImportStudentCoursesResponse, error)
	ImportStudentClasses(ctx context.Context, in *ImportStudentClassesRequest, opts ...grpc.CallOption) (*ImportStudentClassesResponse, error)
	ManualUpsertStudentCourse(ctx context.Context, in *ManualUpsertStudentCourseRequest, opts ...grpc.CallOption) (*ManualUpsertStudentCourseResponse, error)
}

type courseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseServiceClient(cc grpc.ClientConnInterface) CourseServiceClient {
	return &courseServiceClient{cc}
}

func (c *courseServiceClient) ImportStudentCourses(ctx context.Context, in *ImportStudentCoursesRequest, opts ...grpc.CallOption) (*ImportStudentCoursesResponse, error) {
	out := new(ImportStudentCoursesResponse)
	err := c.cc.Invoke(ctx, "/payment.v1.CourseService/ImportStudentCourses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) ImportStudentClasses(ctx context.Context, in *ImportStudentClassesRequest, opts ...grpc.CallOption) (*ImportStudentClassesResponse, error) {
	out := new(ImportStudentClassesResponse)
	err := c.cc.Invoke(ctx, "/payment.v1.CourseService/ImportStudentClasses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseServiceClient) ManualUpsertStudentCourse(ctx context.Context, in *ManualUpsertStudentCourseRequest, opts ...grpc.CallOption) (*ManualUpsertStudentCourseResponse, error) {
	out := new(ManualUpsertStudentCourseResponse)
	err := c.cc.Invoke(ctx, "/payment.v1.CourseService/ManualUpsertStudentCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseServiceServer is the server API for CourseService service.
// All implementations should embed UnimplementedCourseServiceServer
// for forward compatibility
type CourseServiceServer interface {
	ImportStudentCourses(context.Context, *ImportStudentCoursesRequest) (*ImportStudentCoursesResponse, error)
	ImportStudentClasses(context.Context, *ImportStudentClassesRequest) (*ImportStudentClassesResponse, error)
	ManualUpsertStudentCourse(context.Context, *ManualUpsertStudentCourseRequest) (*ManualUpsertStudentCourseResponse, error)
}

// UnimplementedCourseServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCourseServiceServer struct {
}

func (UnimplementedCourseServiceServer) ImportStudentCourses(context.Context, *ImportStudentCoursesRequest) (*ImportStudentCoursesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportStudentCourses not implemented")
}
func (UnimplementedCourseServiceServer) ImportStudentClasses(context.Context, *ImportStudentClassesRequest) (*ImportStudentClassesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportStudentClasses not implemented")
}
func (UnimplementedCourseServiceServer) ManualUpsertStudentCourse(context.Context, *ManualUpsertStudentCourseRequest) (*ManualUpsertStudentCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManualUpsertStudentCourse not implemented")
}

// UnsafeCourseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseServiceServer will
// result in compilation errors.
type UnsafeCourseServiceServer interface {
	mustEmbedUnimplementedCourseServiceServer()
}

func RegisterCourseServiceServer(s grpc.ServiceRegistrar, srv CourseServiceServer) {
	s.RegisterService(&_CourseService_serviceDesc, srv)
}

func _CourseService_ImportStudentCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportStudentCoursesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).ImportStudentCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.CourseService/ImportStudentCourses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).ImportStudentCourses(ctx, req.(*ImportStudentCoursesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_ImportStudentClasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportStudentClassesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).ImportStudentClasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.CourseService/ImportStudentClasses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).ImportStudentClasses(ctx, req.(*ImportStudentClassesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseService_ManualUpsertStudentCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManualUpsertStudentCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseServiceServer).ManualUpsertStudentCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.CourseService/ManualUpsertStudentCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseServiceServer).ManualUpsertStudentCourse(ctx, req.(*ManualUpsertStudentCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CourseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "payment.v1.CourseService",
	HandlerType: (*CourseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportStudentCourses",
			Handler:    _CourseService_ImportStudentCourses_Handler,
		},
		{
			MethodName: "ImportStudentClasses",
			Handler:    _CourseService_ImportStudentClasses_Handler,
		},
		{
			MethodName: "ManualUpsertStudentCourse",
			Handler:    _CourseService_ManualUpsertStudentCourse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment/v1/course.proto",
}
