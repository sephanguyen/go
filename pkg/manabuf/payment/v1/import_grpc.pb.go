// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pmpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ImportMasterDataServiceClient is the client API for ImportMasterDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImportMasterDataServiceClient interface {
	ImportAccountingCategory(ctx context.Context, in *ImportAccountingCategoryRequest, opts ...grpc.CallOption) (*ImportAccountingCategoryResponse, error)
	ImportBillingSchedule(ctx context.Context, in *ImportBillingScheduleRequest, opts ...grpc.CallOption) (*ImportBillingScheduleResponse, error)
	ImportBillingSchedulePeriod(ctx context.Context, in *ImportBillingSchedulePeriodRequest, opts ...grpc.CallOption) (*ImportBillingSchedulePeriodResponse, error)
	ImportDiscount(ctx context.Context, in *ImportDiscountRequest, opts ...grpc.CallOption) (*ImportDiscountResponse, error)
	ImportTax(ctx context.Context, in *ImportTaxRequest, opts ...grpc.CallOption) (*ImportTaxResponse, error)
	ImportProduct(ctx context.Context, in *ImportProductRequest, opts ...grpc.CallOption) (*ImportProductResponse, error)
	ImportProductAssociatedData(ctx context.Context, in *ImportProductAssociatedDataRequest, opts ...grpc.CallOption) (*ImportProductAssociatedDataResponse, error)
	ImportProductPrice(ctx context.Context, in *ImportProductPriceRequest, opts ...grpc.CallOption) (*ImportProductPriceResponse, error)
	ImportBillingRatioType(ctx context.Context, in *ImportBillingRatioTypeRequest, opts ...grpc.CallOption) (*ImportBillingRatioTypeResponse, error)
	ImportLeavingReason(ctx context.Context, in *ImportLeavingReasonRequest, opts ...grpc.CallOption) (*ImportLeavingReasonResponse, error)
	ImportBillingRatio(ctx context.Context, in *ImportBillingRatioRequest, opts ...grpc.CallOption) (*ImportBillingRatioResponse, error)
	ImportPackageQuantityTypeMapping(ctx context.Context, in *ImportPackageQuantityTypeMappingRequest, opts ...grpc.CallOption) (*ImportPackageQuantityTypeMappingResponse, error)
	ImportProductSetting(ctx context.Context, in *ImportProductSettingRequest, opts ...grpc.CallOption) (*ImportProductSettingResponse, error)
	ImportAssociatedProducts(ctx context.Context, in *ImportAssociatedProductsRequest, opts ...grpc.CallOption) (*ImportAssociatedProductsResponse, error)
	ImportProductGroup(ctx context.Context, in *ImportProductGroupRequest, opts ...grpc.CallOption) (*ImportProductGroupResponse, error)
	ImportProductGroupMapping(ctx context.Context, in *ImportProductGroupMappingRequest, opts ...grpc.CallOption) (*ImportProductGroupMappingResponse, error)
	ImportNotificationDate(ctx context.Context, in *ImportNotificationDateRequest, opts ...grpc.CallOption) (*ImportNotificationDateResponse, error)
}

type importMasterDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImportMasterDataServiceClient(cc grpc.ClientConnInterface) ImportMasterDataServiceClient {
	return &importMasterDataServiceClient{cc}
}

func (c *importMasterDataServiceClient) ImportAccountingCategory(ctx context.Context, in *ImportAccountingCategoryRequest, opts ...grpc.CallOption) (*ImportAccountingCategoryResponse, error) {
	out := new(ImportAccountingCategoryResponse)
	err := c.cc.Invoke(ctx, "/payment.v1.ImportMasterDataService/ImportAccountingCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importMasterDataServiceClient) ImportBillingSchedule(ctx context.Context, in *ImportBillingScheduleRequest, opts ...grpc.CallOption) (*ImportBillingScheduleResponse, error) {
	out := new(ImportBillingScheduleResponse)
	err := c.cc.Invoke(ctx, "/payment.v1.ImportMasterDataService/ImportBillingSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importMasterDataServiceClient) ImportBillingSchedulePeriod(ctx context.Context, in *ImportBillingSchedulePeriodRequest, opts ...grpc.CallOption) (*ImportBillingSchedulePeriodResponse, error) {
	out := new(ImportBillingSchedulePeriodResponse)
	err := c.cc.Invoke(ctx, "/payment.v1.ImportMasterDataService/ImportBillingSchedulePeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importMasterDataServiceClient) ImportDiscount(ctx context.Context, in *ImportDiscountRequest, opts ...grpc.CallOption) (*ImportDiscountResponse, error) {
	out := new(ImportDiscountResponse)
	err := c.cc.Invoke(ctx, "/payment.v1.ImportMasterDataService/ImportDiscount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importMasterDataServiceClient) ImportTax(ctx context.Context, in *ImportTaxRequest, opts ...grpc.CallOption) (*ImportTaxResponse, error) {
	out := new(ImportTaxResponse)
	err := c.cc.Invoke(ctx, "/payment.v1.ImportMasterDataService/ImportTax", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importMasterDataServiceClient) ImportProduct(ctx context.Context, in *ImportProductRequest, opts ...grpc.CallOption) (*ImportProductResponse, error) {
	out := new(ImportProductResponse)
	err := c.cc.Invoke(ctx, "/payment.v1.ImportMasterDataService/ImportProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importMasterDataServiceClient) ImportProductAssociatedData(ctx context.Context, in *ImportProductAssociatedDataRequest, opts ...grpc.CallOption) (*ImportProductAssociatedDataResponse, error) {
	out := new(ImportProductAssociatedDataResponse)
	err := c.cc.Invoke(ctx, "/payment.v1.ImportMasterDataService/ImportProductAssociatedData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importMasterDataServiceClient) ImportProductPrice(ctx context.Context, in *ImportProductPriceRequest, opts ...grpc.CallOption) (*ImportProductPriceResponse, error) {
	out := new(ImportProductPriceResponse)
	err := c.cc.Invoke(ctx, "/payment.v1.ImportMasterDataService/ImportProductPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importMasterDataServiceClient) ImportBillingRatioType(ctx context.Context, in *ImportBillingRatioTypeRequest, opts ...grpc.CallOption) (*ImportBillingRatioTypeResponse, error) {
	out := new(ImportBillingRatioTypeResponse)
	err := c.cc.Invoke(ctx, "/payment.v1.ImportMasterDataService/ImportBillingRatioType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importMasterDataServiceClient) ImportLeavingReason(ctx context.Context, in *ImportLeavingReasonRequest, opts ...grpc.CallOption) (*ImportLeavingReasonResponse, error) {
	out := new(ImportLeavingReasonResponse)
	err := c.cc.Invoke(ctx, "/payment.v1.ImportMasterDataService/ImportLeavingReason", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importMasterDataServiceClient) ImportBillingRatio(ctx context.Context, in *ImportBillingRatioRequest, opts ...grpc.CallOption) (*ImportBillingRatioResponse, error) {
	out := new(ImportBillingRatioResponse)
	err := c.cc.Invoke(ctx, "/payment.v1.ImportMasterDataService/ImportBillingRatio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importMasterDataServiceClient) ImportPackageQuantityTypeMapping(ctx context.Context, in *ImportPackageQuantityTypeMappingRequest, opts ...grpc.CallOption) (*ImportPackageQuantityTypeMappingResponse, error) {
	out := new(ImportPackageQuantityTypeMappingResponse)
	err := c.cc.Invoke(ctx, "/payment.v1.ImportMasterDataService/ImportPackageQuantityTypeMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importMasterDataServiceClient) ImportProductSetting(ctx context.Context, in *ImportProductSettingRequest, opts ...grpc.CallOption) (*ImportProductSettingResponse, error) {
	out := new(ImportProductSettingResponse)
	err := c.cc.Invoke(ctx, "/payment.v1.ImportMasterDataService/ImportProductSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importMasterDataServiceClient) ImportAssociatedProducts(ctx context.Context, in *ImportAssociatedProductsRequest, opts ...grpc.CallOption) (*ImportAssociatedProductsResponse, error) {
	out := new(ImportAssociatedProductsResponse)
	err := c.cc.Invoke(ctx, "/payment.v1.ImportMasterDataService/ImportAssociatedProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importMasterDataServiceClient) ImportProductGroup(ctx context.Context, in *ImportProductGroupRequest, opts ...grpc.CallOption) (*ImportProductGroupResponse, error) {
	out := new(ImportProductGroupResponse)
	err := c.cc.Invoke(ctx, "/payment.v1.ImportMasterDataService/ImportProductGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importMasterDataServiceClient) ImportProductGroupMapping(ctx context.Context, in *ImportProductGroupMappingRequest, opts ...grpc.CallOption) (*ImportProductGroupMappingResponse, error) {
	out := new(ImportProductGroupMappingResponse)
	err := c.cc.Invoke(ctx, "/payment.v1.ImportMasterDataService/ImportProductGroupMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importMasterDataServiceClient) ImportNotificationDate(ctx context.Context, in *ImportNotificationDateRequest, opts ...grpc.CallOption) (*ImportNotificationDateResponse, error) {
	out := new(ImportNotificationDateResponse)
	err := c.cc.Invoke(ctx, "/payment.v1.ImportMasterDataService/ImportNotificationDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImportMasterDataServiceServer is the server API for ImportMasterDataService service.
// All implementations should embed UnimplementedImportMasterDataServiceServer
// for forward compatibility
type ImportMasterDataServiceServer interface {
	ImportAccountingCategory(context.Context, *ImportAccountingCategoryRequest) (*ImportAccountingCategoryResponse, error)
	ImportBillingSchedule(context.Context, *ImportBillingScheduleRequest) (*ImportBillingScheduleResponse, error)
	ImportBillingSchedulePeriod(context.Context, *ImportBillingSchedulePeriodRequest) (*ImportBillingSchedulePeriodResponse, error)
	ImportDiscount(context.Context, *ImportDiscountRequest) (*ImportDiscountResponse, error)
	ImportTax(context.Context, *ImportTaxRequest) (*ImportTaxResponse, error)
	ImportProduct(context.Context, *ImportProductRequest) (*ImportProductResponse, error)
	ImportProductAssociatedData(context.Context, *ImportProductAssociatedDataRequest) (*ImportProductAssociatedDataResponse, error)
	ImportProductPrice(context.Context, *ImportProductPriceRequest) (*ImportProductPriceResponse, error)
	ImportBillingRatioType(context.Context, *ImportBillingRatioTypeRequest) (*ImportBillingRatioTypeResponse, error)
	ImportLeavingReason(context.Context, *ImportLeavingReasonRequest) (*ImportLeavingReasonResponse, error)
	ImportBillingRatio(context.Context, *ImportBillingRatioRequest) (*ImportBillingRatioResponse, error)
	ImportPackageQuantityTypeMapping(context.Context, *ImportPackageQuantityTypeMappingRequest) (*ImportPackageQuantityTypeMappingResponse, error)
	ImportProductSetting(context.Context, *ImportProductSettingRequest) (*ImportProductSettingResponse, error)
	ImportAssociatedProducts(context.Context, *ImportAssociatedProductsRequest) (*ImportAssociatedProductsResponse, error)
	ImportProductGroup(context.Context, *ImportProductGroupRequest) (*ImportProductGroupResponse, error)
	ImportProductGroupMapping(context.Context, *ImportProductGroupMappingRequest) (*ImportProductGroupMappingResponse, error)
	ImportNotificationDate(context.Context, *ImportNotificationDateRequest) (*ImportNotificationDateResponse, error)
}

// UnimplementedImportMasterDataServiceServer should be embedded to have forward compatible implementations.
type UnimplementedImportMasterDataServiceServer struct {
}

func (UnimplementedImportMasterDataServiceServer) ImportAccountingCategory(context.Context, *ImportAccountingCategoryRequest) (*ImportAccountingCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportAccountingCategory not implemented")
}
func (UnimplementedImportMasterDataServiceServer) ImportBillingSchedule(context.Context, *ImportBillingScheduleRequest) (*ImportBillingScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportBillingSchedule not implemented")
}
func (UnimplementedImportMasterDataServiceServer) ImportBillingSchedulePeriod(context.Context, *ImportBillingSchedulePeriodRequest) (*ImportBillingSchedulePeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportBillingSchedulePeriod not implemented")
}
func (UnimplementedImportMasterDataServiceServer) ImportDiscount(context.Context, *ImportDiscountRequest) (*ImportDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportDiscount not implemented")
}
func (UnimplementedImportMasterDataServiceServer) ImportTax(context.Context, *ImportTaxRequest) (*ImportTaxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportTax not implemented")
}
func (UnimplementedImportMasterDataServiceServer) ImportProduct(context.Context, *ImportProductRequest) (*ImportProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportProduct not implemented")
}
func (UnimplementedImportMasterDataServiceServer) ImportProductAssociatedData(context.Context, *ImportProductAssociatedDataRequest) (*ImportProductAssociatedDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportProductAssociatedData not implemented")
}
func (UnimplementedImportMasterDataServiceServer) ImportProductPrice(context.Context, *ImportProductPriceRequest) (*ImportProductPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportProductPrice not implemented")
}
func (UnimplementedImportMasterDataServiceServer) ImportBillingRatioType(context.Context, *ImportBillingRatioTypeRequest) (*ImportBillingRatioTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportBillingRatioType not implemented")
}
func (UnimplementedImportMasterDataServiceServer) ImportLeavingReason(context.Context, *ImportLeavingReasonRequest) (*ImportLeavingReasonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportLeavingReason not implemented")
}
func (UnimplementedImportMasterDataServiceServer) ImportBillingRatio(context.Context, *ImportBillingRatioRequest) (*ImportBillingRatioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportBillingRatio not implemented")
}
func (UnimplementedImportMasterDataServiceServer) ImportPackageQuantityTypeMapping(context.Context, *ImportPackageQuantityTypeMappingRequest) (*ImportPackageQuantityTypeMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportPackageQuantityTypeMapping not implemented")
}
func (UnimplementedImportMasterDataServiceServer) ImportProductSetting(context.Context, *ImportProductSettingRequest) (*ImportProductSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportProductSetting not implemented")
}
func (UnimplementedImportMasterDataServiceServer) ImportAssociatedProducts(context.Context, *ImportAssociatedProductsRequest) (*ImportAssociatedProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportAssociatedProducts not implemented")
}
func (UnimplementedImportMasterDataServiceServer) ImportProductGroup(context.Context, *ImportProductGroupRequest) (*ImportProductGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportProductGroup not implemented")
}
func (UnimplementedImportMasterDataServiceServer) ImportProductGroupMapping(context.Context, *ImportProductGroupMappingRequest) (*ImportProductGroupMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportProductGroupMapping not implemented")
}
func (UnimplementedImportMasterDataServiceServer) ImportNotificationDate(context.Context, *ImportNotificationDateRequest) (*ImportNotificationDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportNotificationDate not implemented")
}

// UnsafeImportMasterDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImportMasterDataServiceServer will
// result in compilation errors.
type UnsafeImportMasterDataServiceServer interface {
	mustEmbedUnimplementedImportMasterDataServiceServer()
}

func RegisterImportMasterDataServiceServer(s grpc.ServiceRegistrar, srv ImportMasterDataServiceServer) {
	s.RegisterService(&_ImportMasterDataService_serviceDesc, srv)
}

func _ImportMasterDataService_ImportAccountingCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportAccountingCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportMasterDataServiceServer).ImportAccountingCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.ImportMasterDataService/ImportAccountingCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportMasterDataServiceServer).ImportAccountingCategory(ctx, req.(*ImportAccountingCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportMasterDataService_ImportBillingSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportBillingScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportMasterDataServiceServer).ImportBillingSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.ImportMasterDataService/ImportBillingSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportMasterDataServiceServer).ImportBillingSchedule(ctx, req.(*ImportBillingScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportMasterDataService_ImportBillingSchedulePeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportBillingSchedulePeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportMasterDataServiceServer).ImportBillingSchedulePeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.ImportMasterDataService/ImportBillingSchedulePeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportMasterDataServiceServer).ImportBillingSchedulePeriod(ctx, req.(*ImportBillingSchedulePeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportMasterDataService_ImportDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportMasterDataServiceServer).ImportDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.ImportMasterDataService/ImportDiscount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportMasterDataServiceServer).ImportDiscount(ctx, req.(*ImportDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportMasterDataService_ImportTax_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportTaxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportMasterDataServiceServer).ImportTax(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.ImportMasterDataService/ImportTax",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportMasterDataServiceServer).ImportTax(ctx, req.(*ImportTaxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportMasterDataService_ImportProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportMasterDataServiceServer).ImportProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.ImportMasterDataService/ImportProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportMasterDataServiceServer).ImportProduct(ctx, req.(*ImportProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportMasterDataService_ImportProductAssociatedData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportProductAssociatedDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportMasterDataServiceServer).ImportProductAssociatedData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.ImportMasterDataService/ImportProductAssociatedData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportMasterDataServiceServer).ImportProductAssociatedData(ctx, req.(*ImportProductAssociatedDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportMasterDataService_ImportProductPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportProductPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportMasterDataServiceServer).ImportProductPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.ImportMasterDataService/ImportProductPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportMasterDataServiceServer).ImportProductPrice(ctx, req.(*ImportProductPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportMasterDataService_ImportBillingRatioType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportBillingRatioTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportMasterDataServiceServer).ImportBillingRatioType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.ImportMasterDataService/ImportBillingRatioType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportMasterDataServiceServer).ImportBillingRatioType(ctx, req.(*ImportBillingRatioTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportMasterDataService_ImportLeavingReason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportLeavingReasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportMasterDataServiceServer).ImportLeavingReason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.ImportMasterDataService/ImportLeavingReason",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportMasterDataServiceServer).ImportLeavingReason(ctx, req.(*ImportLeavingReasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportMasterDataService_ImportBillingRatio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportBillingRatioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportMasterDataServiceServer).ImportBillingRatio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.ImportMasterDataService/ImportBillingRatio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportMasterDataServiceServer).ImportBillingRatio(ctx, req.(*ImportBillingRatioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportMasterDataService_ImportPackageQuantityTypeMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportPackageQuantityTypeMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportMasterDataServiceServer).ImportPackageQuantityTypeMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.ImportMasterDataService/ImportPackageQuantityTypeMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportMasterDataServiceServer).ImportPackageQuantityTypeMapping(ctx, req.(*ImportPackageQuantityTypeMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportMasterDataService_ImportProductSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportProductSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportMasterDataServiceServer).ImportProductSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.ImportMasterDataService/ImportProductSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportMasterDataServiceServer).ImportProductSetting(ctx, req.(*ImportProductSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportMasterDataService_ImportAssociatedProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportAssociatedProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportMasterDataServiceServer).ImportAssociatedProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.ImportMasterDataService/ImportAssociatedProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportMasterDataServiceServer).ImportAssociatedProducts(ctx, req.(*ImportAssociatedProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportMasterDataService_ImportProductGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportProductGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportMasterDataServiceServer).ImportProductGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.ImportMasterDataService/ImportProductGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportMasterDataServiceServer).ImportProductGroup(ctx, req.(*ImportProductGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportMasterDataService_ImportProductGroupMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportProductGroupMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportMasterDataServiceServer).ImportProductGroupMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.ImportMasterDataService/ImportProductGroupMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportMasterDataServiceServer).ImportProductGroupMapping(ctx, req.(*ImportProductGroupMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportMasterDataService_ImportNotificationDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportNotificationDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportMasterDataServiceServer).ImportNotificationDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.v1.ImportMasterDataService/ImportNotificationDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportMasterDataServiceServer).ImportNotificationDate(ctx, req.(*ImportNotificationDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImportMasterDataService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "payment.v1.ImportMasterDataService",
	HandlerType: (*ImportMasterDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportAccountingCategory",
			Handler:    _ImportMasterDataService_ImportAccountingCategory_Handler,
		},
		{
			MethodName: "ImportBillingSchedule",
			Handler:    _ImportMasterDataService_ImportBillingSchedule_Handler,
		},
		{
			MethodName: "ImportBillingSchedulePeriod",
			Handler:    _ImportMasterDataService_ImportBillingSchedulePeriod_Handler,
		},
		{
			MethodName: "ImportDiscount",
			Handler:    _ImportMasterDataService_ImportDiscount_Handler,
		},
		{
			MethodName: "ImportTax",
			Handler:    _ImportMasterDataService_ImportTax_Handler,
		},
		{
			MethodName: "ImportProduct",
			Handler:    _ImportMasterDataService_ImportProduct_Handler,
		},
		{
			MethodName: "ImportProductAssociatedData",
			Handler:    _ImportMasterDataService_ImportProductAssociatedData_Handler,
		},
		{
			MethodName: "ImportProductPrice",
			Handler:    _ImportMasterDataService_ImportProductPrice_Handler,
		},
		{
			MethodName: "ImportBillingRatioType",
			Handler:    _ImportMasterDataService_ImportBillingRatioType_Handler,
		},
		{
			MethodName: "ImportLeavingReason",
			Handler:    _ImportMasterDataService_ImportLeavingReason_Handler,
		},
		{
			MethodName: "ImportBillingRatio",
			Handler:    _ImportMasterDataService_ImportBillingRatio_Handler,
		},
		{
			MethodName: "ImportPackageQuantityTypeMapping",
			Handler:    _ImportMasterDataService_ImportPackageQuantityTypeMapping_Handler,
		},
		{
			MethodName: "ImportProductSetting",
			Handler:    _ImportMasterDataService_ImportProductSetting_Handler,
		},
		{
			MethodName: "ImportAssociatedProducts",
			Handler:    _ImportMasterDataService_ImportAssociatedProducts_Handler,
		},
		{
			MethodName: "ImportProductGroup",
			Handler:    _ImportMasterDataService_ImportProductGroup_Handler,
		},
		{
			MethodName: "ImportProductGroupMapping",
			Handler:    _ImportMasterDataService_ImportProductGroupMapping_Handler,
		},
		{
			MethodName: "ImportNotificationDate",
			Handler:    _ImportMasterDataService_ImportNotificationDate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment/v1/import.proto",
}
