// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// QuestionTagTypeClient is the client API for QuestionTagType service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionTagTypeClient interface {
	ImportQuestionTagTypes(ctx context.Context, in *ImportQuestionTagTypesRequest, opts ...grpc.CallOption) (*ImportQuestionTagTypesResponse, error)
}

type questionTagTypeClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionTagTypeClient(cc grpc.ClientConnInterface) QuestionTagTypeClient {
	return &questionTagTypeClient{cc}
}

func (c *questionTagTypeClient) ImportQuestionTagTypes(ctx context.Context, in *ImportQuestionTagTypesRequest, opts ...grpc.CallOption) (*ImportQuestionTagTypesResponse, error) {
	out := new(ImportQuestionTagTypesResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.QuestionTagType/ImportQuestionTagTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionTagTypeServer is the server API for QuestionTagType service.
// All implementations should embed UnimplementedQuestionTagTypeServer
// for forward compatibility
type QuestionTagTypeServer interface {
	ImportQuestionTagTypes(context.Context, *ImportQuestionTagTypesRequest) (*ImportQuestionTagTypesResponse, error)
}

// UnimplementedQuestionTagTypeServer should be embedded to have forward compatible implementations.
type UnimplementedQuestionTagTypeServer struct {
}

func (UnimplementedQuestionTagTypeServer) ImportQuestionTagTypes(context.Context, *ImportQuestionTagTypesRequest) (*ImportQuestionTagTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportQuestionTagTypes not implemented")
}

// UnsafeQuestionTagTypeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionTagTypeServer will
// result in compilation errors.
type UnsafeQuestionTagTypeServer interface {
	mustEmbedUnimplementedQuestionTagTypeServer()
}

func RegisterQuestionTagTypeServer(s grpc.ServiceRegistrar, srv QuestionTagTypeServer) {
	s.RegisterService(&_QuestionTagType_serviceDesc, srv)
}

func _QuestionTagType_ImportQuestionTagTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportQuestionTagTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionTagTypeServer).ImportQuestionTagTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.QuestionTagType/ImportQuestionTagTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionTagTypeServer).ImportQuestionTagTypes(ctx, req.(*ImportQuestionTagTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QuestionTagType_serviceDesc = grpc.ServiceDesc{
	ServiceName: "syllabus.v1.QuestionTagType",
	HandlerType: (*QuestionTagTypeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportQuestionTagTypes",
			Handler:    _QuestionTagType_ImportQuestionTagTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "syllabus/v1/question_tag_type_service.proto",
}
