// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: syllabus/v1/flashcard_service.proto

package sspb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FlashcardBase with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FlashcardBase) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FlashcardBase with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FlashcardBaseMultiError, or
// nil if none found.
func (m *FlashcardBase) ValidateAll() error {
	return m.validate(true)
}

func (m *FlashcardBase) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FlashcardBaseValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FlashcardBaseValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FlashcardBaseValidationError{
				field:  "Base",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TotalQuestion

	if len(errors) > 0 {
		return FlashcardBaseMultiError(errors)
	}

	return nil
}

// FlashcardBaseMultiError is an error wrapping multiple validation errors
// returned by FlashcardBase.ValidateAll() if the designated constraints
// aren't met.
type FlashcardBaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FlashcardBaseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FlashcardBaseMultiError) AllErrors() []error { return m }

// FlashcardBaseValidationError is the validation error returned by
// FlashcardBase.Validate if the designated constraints aren't met.
type FlashcardBaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlashcardBaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlashcardBaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlashcardBaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlashcardBaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlashcardBaseValidationError) ErrorName() string { return "FlashcardBaseValidationError" }

// Error satisfies the builtin error interface
func (e FlashcardBaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlashcardBase.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlashcardBaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlashcardBaseValidationError{}

// Validate checks the field values on InsertFlashcardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InsertFlashcardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InsertFlashcardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InsertFlashcardRequestMultiError, or nil if none found.
func (m *InsertFlashcardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InsertFlashcardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFlashcard()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InsertFlashcardRequestValidationError{
					field:  "Flashcard",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InsertFlashcardRequestValidationError{
					field:  "Flashcard",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFlashcard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InsertFlashcardRequestValidationError{
				field:  "Flashcard",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InsertFlashcardRequestMultiError(errors)
	}

	return nil
}

// InsertFlashcardRequestMultiError is an error wrapping multiple validation
// errors returned by InsertFlashcardRequest.ValidateAll() if the designated
// constraints aren't met.
type InsertFlashcardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InsertFlashcardRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InsertFlashcardRequestMultiError) AllErrors() []error { return m }

// InsertFlashcardRequestValidationError is the validation error returned by
// InsertFlashcardRequest.Validate if the designated constraints aren't met.
type InsertFlashcardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InsertFlashcardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InsertFlashcardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InsertFlashcardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InsertFlashcardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InsertFlashcardRequestValidationError) ErrorName() string {
	return "InsertFlashcardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InsertFlashcardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInsertFlashcardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InsertFlashcardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InsertFlashcardRequestValidationError{}

// Validate checks the field values on InsertFlashcardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InsertFlashcardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InsertFlashcardResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InsertFlashcardResponseMultiError, or nil if none found.
func (m *InsertFlashcardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InsertFlashcardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LearningMaterialId

	if len(errors) > 0 {
		return InsertFlashcardResponseMultiError(errors)
	}

	return nil
}

// InsertFlashcardResponseMultiError is an error wrapping multiple validation
// errors returned by InsertFlashcardResponse.ValidateAll() if the designated
// constraints aren't met.
type InsertFlashcardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InsertFlashcardResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InsertFlashcardResponseMultiError) AllErrors() []error { return m }

// InsertFlashcardResponseValidationError is the validation error returned by
// InsertFlashcardResponse.Validate if the designated constraints aren't met.
type InsertFlashcardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InsertFlashcardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InsertFlashcardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InsertFlashcardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InsertFlashcardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InsertFlashcardResponseValidationError) ErrorName() string {
	return "InsertFlashcardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InsertFlashcardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInsertFlashcardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InsertFlashcardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InsertFlashcardResponseValidationError{}

// Validate checks the field values on UpdateFlashcardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFlashcardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFlashcardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFlashcardRequestMultiError, or nil if none found.
func (m *UpdateFlashcardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFlashcardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFlashcard()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateFlashcardRequestValidationError{
					field:  "Flashcard",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateFlashcardRequestValidationError{
					field:  "Flashcard",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFlashcard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateFlashcardRequestValidationError{
				field:  "Flashcard",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateFlashcardRequestMultiError(errors)
	}

	return nil
}

// UpdateFlashcardRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateFlashcardRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateFlashcardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFlashcardRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFlashcardRequestMultiError) AllErrors() []error { return m }

// UpdateFlashcardRequestValidationError is the validation error returned by
// UpdateFlashcardRequest.Validate if the designated constraints aren't met.
type UpdateFlashcardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFlashcardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFlashcardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFlashcardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFlashcardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFlashcardRequestValidationError) ErrorName() string {
	return "UpdateFlashcardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFlashcardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFlashcardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFlashcardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFlashcardRequestValidationError{}

// Validate checks the field values on UpdateFlashcardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateFlashcardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateFlashcardResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateFlashcardResponseMultiError, or nil if none found.
func (m *UpdateFlashcardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateFlashcardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateFlashcardResponseMultiError(errors)
	}

	return nil
}

// UpdateFlashcardResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateFlashcardResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateFlashcardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateFlashcardResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateFlashcardResponseMultiError) AllErrors() []error { return m }

// UpdateFlashcardResponseValidationError is the validation error returned by
// UpdateFlashcardResponse.Validate if the designated constraints aren't met.
type UpdateFlashcardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateFlashcardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateFlashcardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateFlashcardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateFlashcardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateFlashcardResponseValidationError) ErrorName() string {
	return "UpdateFlashcardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateFlashcardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateFlashcardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateFlashcardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateFlashcardResponseValidationError{}

// Validate checks the field values on ListFlashcardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFlashcardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFlashcardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFlashcardRequestMultiError, or nil if none found.
func (m *ListFlashcardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFlashcardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListFlashcardRequestMultiError(errors)
	}

	return nil
}

// ListFlashcardRequestMultiError is an error wrapping multiple validation
// errors returned by ListFlashcardRequest.ValidateAll() if the designated
// constraints aren't met.
type ListFlashcardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFlashcardRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFlashcardRequestMultiError) AllErrors() []error { return m }

// ListFlashcardRequestValidationError is the validation error returned by
// ListFlashcardRequest.Validate if the designated constraints aren't met.
type ListFlashcardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFlashcardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFlashcardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFlashcardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFlashcardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFlashcardRequestValidationError) ErrorName() string {
	return "ListFlashcardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListFlashcardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFlashcardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFlashcardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFlashcardRequestValidationError{}

// Validate checks the field values on ListFlashcardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListFlashcardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFlashcardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFlashcardResponseMultiError, or nil if none found.
func (m *ListFlashcardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFlashcardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFlashcards() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListFlashcardResponseValidationError{
						field:  fmt.Sprintf("Flashcards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListFlashcardResponseValidationError{
						field:  fmt.Sprintf("Flashcards[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFlashcardResponseValidationError{
					field:  fmt.Sprintf("Flashcards[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListFlashcardResponseMultiError(errors)
	}

	return nil
}

// ListFlashcardResponseMultiError is an error wrapping multiple validation
// errors returned by ListFlashcardResponse.ValidateAll() if the designated
// constraints aren't met.
type ListFlashcardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFlashcardResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFlashcardResponseMultiError) AllErrors() []error { return m }

// ListFlashcardResponseValidationError is the validation error returned by
// ListFlashcardResponse.Validate if the designated constraints aren't met.
type ListFlashcardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFlashcardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFlashcardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFlashcardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFlashcardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFlashcardResponseValidationError) ErrorName() string {
	return "ListFlashcardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListFlashcardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFlashcardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFlashcardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFlashcardResponseValidationError{}

// Validate checks the field values on GetLastestProgressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLastestProgressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLastestProgressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLastestProgressRequestMultiError, or nil if none found.
func (m *GetLastestProgressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLastestProgressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStudyPlanItemIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLastestProgressRequestValidationError{
					field:  "StudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLastestProgressRequestValidationError{
					field:  "StudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStudyPlanItemIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLastestProgressRequestValidationError{
				field:  "StudyPlanItemIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsCompleted

	if len(errors) > 0 {
		return GetLastestProgressRequestMultiError(errors)
	}

	return nil
}

// GetLastestProgressRequestMultiError is an error wrapping multiple validation
// errors returned by GetLastestProgressRequest.ValidateAll() if the
// designated constraints aren't met.
type GetLastestProgressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLastestProgressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLastestProgressRequestMultiError) AllErrors() []error { return m }

// GetLastestProgressRequestValidationError is the validation error returned by
// GetLastestProgressRequest.Validate if the designated constraints aren't met.
type GetLastestProgressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLastestProgressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLastestProgressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLastestProgressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLastestProgressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLastestProgressRequestValidationError) ErrorName() string {
	return "GetLastestProgressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLastestProgressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLastestProgressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLastestProgressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLastestProgressRequestValidationError{}

// Validate checks the field values on GetLastestProgressResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLastestProgressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLastestProgressResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLastestProgressResponseMultiError, or nil if none found.
func (m *GetLastestProgressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLastestProgressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStudySetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLastestProgressResponseValidationError{
					field:  "StudySetId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLastestProgressResponseValidationError{
					field:  "StudySetId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStudySetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLastestProgressResponseValidationError{
				field:  "StudySetId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetLastestProgressResponseMultiError(errors)
	}

	return nil
}

// GetLastestProgressResponseMultiError is an error wrapping multiple
// validation errors returned by GetLastestProgressResponse.ValidateAll() if
// the designated constraints aren't met.
type GetLastestProgressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLastestProgressResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLastestProgressResponseMultiError) AllErrors() []error { return m }

// GetLastestProgressResponseValidationError is the validation error returned
// by GetLastestProgressResponse.Validate if the designated constraints aren't met.
type GetLastestProgressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLastestProgressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLastestProgressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLastestProgressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLastestProgressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLastestProgressResponseValidationError) ErrorName() string {
	return "GetLastestProgressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLastestProgressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLastestProgressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLastestProgressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLastestProgressResponseValidationError{}

// Validate checks the field values on FlashcardQuizzes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FlashcardQuizzes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FlashcardQuizzes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FlashcardQuizzesMultiError, or nil if none found.
func (m *FlashcardQuizzes) ValidateAll() error {
	return m.validate(true)
}

func (m *FlashcardQuizzes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FlashcardQuizzesValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FlashcardQuizzesValidationError{
					field:  "Item",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FlashcardQuizzesValidationError{
				field:  "Item",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return FlashcardQuizzesMultiError(errors)
	}

	return nil
}

// FlashcardQuizzesMultiError is an error wrapping multiple validation errors
// returned by FlashcardQuizzes.ValidateAll() if the designated constraints
// aren't met.
type FlashcardQuizzesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FlashcardQuizzesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FlashcardQuizzesMultiError) AllErrors() []error { return m }

// FlashcardQuizzesValidationError is the validation error returned by
// FlashcardQuizzes.Validate if the designated constraints aren't met.
type FlashcardQuizzesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FlashcardQuizzesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FlashcardQuizzesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FlashcardQuizzesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FlashcardQuizzesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FlashcardQuizzesValidationError) ErrorName() string { return "FlashcardQuizzesValidationError" }

// Error satisfies the builtin error interface
func (e FlashcardQuizzesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFlashcardQuizzes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FlashcardQuizzesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FlashcardQuizzesValidationError{}

// Validate checks the field values on CreateFlashCardStudyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFlashCardStudyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFlashCardStudyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFlashCardStudyRequestMultiError, or nil if none found.
func (m *CreateFlashCardStudyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFlashCardStudyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StudyPlanId

	// no validation rules for LmId

	// no validation rules for StudentId

	// no validation rules for StudySetId

	if all {
		switch v := interface{}(m.GetPaging()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateFlashCardStudyRequestValidationError{
					field:  "Paging",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateFlashCardStudyRequestValidationError{
					field:  "Paging",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateFlashCardStudyRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for KeepOrder

	if len(errors) > 0 {
		return CreateFlashCardStudyRequestMultiError(errors)
	}

	return nil
}

// CreateFlashCardStudyRequestMultiError is an error wrapping multiple
// validation errors returned by CreateFlashCardStudyRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateFlashCardStudyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFlashCardStudyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFlashCardStudyRequestMultiError) AllErrors() []error { return m }

// CreateFlashCardStudyRequestValidationError is the validation error returned
// by CreateFlashCardStudyRequest.Validate if the designated constraints
// aren't met.
type CreateFlashCardStudyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFlashCardStudyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFlashCardStudyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFlashCardStudyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFlashCardStudyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFlashCardStudyRequestValidationError) ErrorName() string {
	return "CreateFlashCardStudyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFlashCardStudyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFlashCardStudyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFlashCardStudyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFlashCardStudyRequestValidationError{}

// Validate checks the field values on CreateFlashCardStudyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFlashCardStudyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFlashCardStudyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFlashCardStudyResponseMultiError, or nil if none found.
func (m *CreateFlashCardStudyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFlashCardStudyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNextPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateFlashCardStudyResponseValidationError{
					field:  "NextPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateFlashCardStudyResponseValidationError{
					field:  "NextPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNextPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateFlashCardStudyResponseValidationError{
				field:  "NextPage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StudySetId

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateFlashCardStudyResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateFlashCardStudyResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateFlashCardStudyResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for StudyingIndex

	if len(errors) > 0 {
		return CreateFlashCardStudyResponseMultiError(errors)
	}

	return nil
}

// CreateFlashCardStudyResponseMultiError is an error wrapping multiple
// validation errors returned by CreateFlashCardStudyResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateFlashCardStudyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFlashCardStudyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFlashCardStudyResponseMultiError) AllErrors() []error { return m }

// CreateFlashCardStudyResponseValidationError is the validation error returned
// by CreateFlashCardStudyResponse.Validate if the designated constraints
// aren't met.
type CreateFlashCardStudyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFlashCardStudyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFlashCardStudyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFlashCardStudyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFlashCardStudyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFlashCardStudyResponseValidationError) ErrorName() string {
	return "CreateFlashCardStudyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFlashCardStudyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFlashCardStudyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFlashCardStudyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFlashCardStudyResponseValidationError{}

// Validate checks the field values on FinishFlashCardStudyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FinishFlashCardStudyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FinishFlashCardStudyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FinishFlashCardStudyRequestMultiError, or nil if none found.
func (m *FinishFlashCardStudyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FinishFlashCardStudyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStudyPlanItemIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FinishFlashCardStudyRequestValidationError{
					field:  "StudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FinishFlashCardStudyRequestValidationError{
					field:  "StudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStudyPlanItemIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FinishFlashCardStudyRequestValidationError{
				field:  "StudyPlanItemIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StudySetId

	// no validation rules for IsRestart

	if len(errors) > 0 {
		return FinishFlashCardStudyRequestMultiError(errors)
	}

	return nil
}

// FinishFlashCardStudyRequestMultiError is an error wrapping multiple
// validation errors returned by FinishFlashCardStudyRequest.ValidateAll() if
// the designated constraints aren't met.
type FinishFlashCardStudyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FinishFlashCardStudyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FinishFlashCardStudyRequestMultiError) AllErrors() []error { return m }

// FinishFlashCardStudyRequestValidationError is the validation error returned
// by FinishFlashCardStudyRequest.Validate if the designated constraints
// aren't met.
type FinishFlashCardStudyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FinishFlashCardStudyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FinishFlashCardStudyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FinishFlashCardStudyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FinishFlashCardStudyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FinishFlashCardStudyRequestValidationError) ErrorName() string {
	return "FinishFlashCardStudyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FinishFlashCardStudyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFinishFlashCardStudyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FinishFlashCardStudyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FinishFlashCardStudyRequestValidationError{}

// Validate checks the field values on FinishFlashCardStudyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FinishFlashCardStudyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FinishFlashCardStudyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FinishFlashCardStudyResponseMultiError, or nil if none found.
func (m *FinishFlashCardStudyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FinishFlashCardStudyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FinishFlashCardStudyResponseMultiError(errors)
	}

	return nil
}

// FinishFlashCardStudyResponseMultiError is an error wrapping multiple
// validation errors returned by FinishFlashCardStudyResponse.ValidateAll() if
// the designated constraints aren't met.
type FinishFlashCardStudyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FinishFlashCardStudyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FinishFlashCardStudyResponseMultiError) AllErrors() []error { return m }

// FinishFlashCardStudyResponseValidationError is the validation error returned
// by FinishFlashCardStudyResponse.Validate if the designated constraints
// aren't met.
type FinishFlashCardStudyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FinishFlashCardStudyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FinishFlashCardStudyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FinishFlashCardStudyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FinishFlashCardStudyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FinishFlashCardStudyResponseValidationError) ErrorName() string {
	return "FinishFlashCardStudyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FinishFlashCardStudyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFinishFlashCardStudyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FinishFlashCardStudyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FinishFlashCardStudyResponseValidationError{}
