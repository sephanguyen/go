// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: syllabus/v1/study_plan.proto

package sspb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on StudyPlanItemIdentity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StudyPlanItemIdentity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StudyPlanItemIdentity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StudyPlanItemIdentityMultiError, or nil if none found.
func (m *StudyPlanItemIdentity) ValidateAll() error {
	return m.validate(true)
}

func (m *StudyPlanItemIdentity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StudyPlanId

	// no validation rules for LearningMaterialId

	if all {
		switch v := interface{}(m.GetStudentId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudyPlanItemIdentityValidationError{
					field:  "StudentId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudyPlanItemIdentityValidationError{
					field:  "StudentId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStudentId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudyPlanItemIdentityValidationError{
				field:  "StudentId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StudyPlanItemIdentityMultiError(errors)
	}

	return nil
}

// StudyPlanItemIdentityMultiError is an error wrapping multiple validation
// errors returned by StudyPlanItemIdentity.ValidateAll() if the designated
// constraints aren't met.
type StudyPlanItemIdentityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StudyPlanItemIdentityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StudyPlanItemIdentityMultiError) AllErrors() []error { return m }

// StudyPlanItemIdentityValidationError is the validation error returned by
// StudyPlanItemIdentity.Validate if the designated constraints aren't met.
type StudyPlanItemIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StudyPlanItemIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StudyPlanItemIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StudyPlanItemIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StudyPlanItemIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StudyPlanItemIdentityValidationError) ErrorName() string {
	return "StudyPlanItemIdentityValidationError"
}

// Error satisfies the builtin error interface
func (e StudyPlanItemIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStudyPlanItemIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StudyPlanItemIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StudyPlanItemIdentityValidationError{}

// Validate checks the field values on StudyPlanData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StudyPlanData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StudyPlanData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StudyPlanDataMultiError, or
// nil if none found.
func (m *StudyPlanData) ValidateAll() error {
	return m.validate(true)
}

func (m *StudyPlanData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StudyPlanId

	// no validation rules for Name

	// no validation rules for BookId

	// no validation rules for Status

	// no validation rules for TrackSchoolProgress

	if len(errors) > 0 {
		return StudyPlanDataMultiError(errors)
	}

	return nil
}

// StudyPlanDataMultiError is an error wrapping multiple validation errors
// returned by StudyPlanData.ValidateAll() if the designated constraints
// aren't met.
type StudyPlanDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StudyPlanDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StudyPlanDataMultiError) AllErrors() []error { return m }

// StudyPlanDataValidationError is the validation error returned by
// StudyPlanData.Validate if the designated constraints aren't met.
type StudyPlanDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StudyPlanDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StudyPlanDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StudyPlanDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StudyPlanDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StudyPlanDataValidationError) ErrorName() string { return "StudyPlanDataValidationError" }

// Error satisfies the builtin error interface
func (e StudyPlanDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStudyPlanData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StudyPlanDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StudyPlanDataValidationError{}

// Validate checks the field values on StudentStudyPlanData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StudentStudyPlanData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StudentStudyPlanData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StudentStudyPlanDataMultiError, or nil if none found.
func (m *StudentStudyPlanData) ValidateAll() error {
	return m.validate(true)
}

func (m *StudentStudyPlanData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StudyPlanId

	// no validation rules for Name

	// no validation rules for BookId

	// no validation rules for Status

	// no validation rules for TrackSchoolProgress

	// no validation rules for StudentId

	if len(errors) > 0 {
		return StudentStudyPlanDataMultiError(errors)
	}

	return nil
}

// StudentStudyPlanDataMultiError is an error wrapping multiple validation
// errors returned by StudentStudyPlanData.ValidateAll() if the designated
// constraints aren't met.
type StudentStudyPlanDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StudentStudyPlanDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StudentStudyPlanDataMultiError) AllErrors() []error { return m }

// StudentStudyPlanDataValidationError is the validation error returned by
// StudentStudyPlanData.Validate if the designated constraints aren't met.
type StudentStudyPlanDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StudentStudyPlanDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StudentStudyPlanDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StudentStudyPlanDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StudentStudyPlanDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StudentStudyPlanDataValidationError) ErrorName() string {
	return "StudentStudyPlanDataValidationError"
}

// Error satisfies the builtin error interface
func (e StudentStudyPlanDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStudentStudyPlanData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StudentStudyPlanDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StudentStudyPlanDataValidationError{}

// Validate checks the field values on StudyPlanItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StudyPlanItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StudyPlanItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StudyPlanItemMultiError, or
// nil if none found.
func (m *StudyPlanItem) ValidateAll() error {
	return m.validate(true)
}

func (m *StudyPlanItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStudyPlanItemIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudyPlanItemValidationError{
					field:  "StudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudyPlanItemValidationError{
					field:  "StudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStudyPlanItemIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudyPlanItemValidationError{
				field:  "StudyPlanItemIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAvailableFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudyPlanItemValidationError{
					field:  "AvailableFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudyPlanItemValidationError{
					field:  "AvailableFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAvailableFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudyPlanItemValidationError{
				field:  "AvailableFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAvailableTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudyPlanItemValidationError{
					field:  "AvailableTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudyPlanItemValidationError{
					field:  "AvailableTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAvailableTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudyPlanItemValidationError{
				field:  "AvailableTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudyPlanItemValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudyPlanItemValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudyPlanItemValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudyPlanItemValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudyPlanItemValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudyPlanItemValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetSchoolDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudyPlanItemValidationError{
					field:  "SchoolDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudyPlanItemValidationError{
					field:  "SchoolDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchoolDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudyPlanItemValidationError{
				field:  "SchoolDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCompletedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudyPlanItemValidationError{
					field:  "CompletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudyPlanItemValidationError{
					field:  "CompletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudyPlanItemValidationError{
				field:  "CompletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StudyPlanItemMultiError(errors)
	}

	return nil
}

// StudyPlanItemMultiError is an error wrapping multiple validation errors
// returned by StudyPlanItem.ValidateAll() if the designated constraints
// aren't met.
type StudyPlanItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StudyPlanItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StudyPlanItemMultiError) AllErrors() []error { return m }

// StudyPlanItemValidationError is the validation error returned by
// StudyPlanItem.Validate if the designated constraints aren't met.
type StudyPlanItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StudyPlanItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StudyPlanItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StudyPlanItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StudyPlanItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StudyPlanItemValidationError) ErrorName() string { return "StudyPlanItemValidationError" }

// Error satisfies the builtin error interface
func (e StudyPlanItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStudyPlanItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StudyPlanItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StudyPlanItemValidationError{}

// Validate checks the field values on StudyPlanItemContent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StudyPlanItemContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StudyPlanItemContent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StudyPlanItemContentMultiError, or nil if none found.
func (m *StudyPlanItemContent) ValidateAll() error {
	return m.validate(true)
}

func (m *StudyPlanItemContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIndividualStudyPlanItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudyPlanItemContentValidationError{
					field:  "IndividualStudyPlanItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudyPlanItemContentValidationError{
					field:  "IndividualStudyPlanItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIndividualStudyPlanItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudyPlanItemContentValidationError{
				field:  "IndividualStudyPlanItem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for LearningMaterialType

	if len(errors) > 0 {
		return StudyPlanItemContentMultiError(errors)
	}

	return nil
}

// StudyPlanItemContentMultiError is an error wrapping multiple validation
// errors returned by StudyPlanItemContent.ValidateAll() if the designated
// constraints aren't met.
type StudyPlanItemContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StudyPlanItemContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StudyPlanItemContentMultiError) AllErrors() []error { return m }

// StudyPlanItemContentValidationError is the validation error returned by
// StudyPlanItemContent.Validate if the designated constraints aren't met.
type StudyPlanItemContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StudyPlanItemContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StudyPlanItemContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StudyPlanItemContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StudyPlanItemContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StudyPlanItemContentValidationError) ErrorName() string {
	return "StudyPlanItemContentValidationError"
}

// Error satisfies the builtin error interface
func (e StudyPlanItemContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStudyPlanItemContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StudyPlanItemContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StudyPlanItemContentValidationError{}

// Validate checks the field values on StudyPlanToDoItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StudyPlanToDoItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StudyPlanToDoItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StudyPlanToDoItemMultiError, or nil if none found.
func (m *StudyPlanToDoItem) ValidateAll() error {
	return m.validate(true)
}

func (m *StudyPlanToDoItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetIndividualStudyPlanItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudyPlanToDoItemValidationError{
					field:  "IndividualStudyPlanItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudyPlanToDoItemValidationError{
					field:  "IndividualStudyPlanItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetIndividualStudyPlanItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudyPlanToDoItemValidationError{
				field:  "IndividualStudyPlanItem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	// no validation rules for Crown

	// no validation rules for LearningMaterialType

	if len(errors) > 0 {
		return StudyPlanToDoItemMultiError(errors)
	}

	return nil
}

// StudyPlanToDoItemMultiError is an error wrapping multiple validation errors
// returned by StudyPlanToDoItem.ValidateAll() if the designated constraints
// aren't met.
type StudyPlanToDoItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StudyPlanToDoItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StudyPlanToDoItemMultiError) AllErrors() []error { return m }

// StudyPlanToDoItemValidationError is the validation error returned by
// StudyPlanToDoItem.Validate if the designated constraints aren't met.
type StudyPlanToDoItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StudyPlanToDoItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StudyPlanToDoItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StudyPlanToDoItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StudyPlanToDoItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StudyPlanToDoItemValidationError) ErrorName() string {
	return "StudyPlanToDoItemValidationError"
}

// Error satisfies the builtin error interface
func (e StudyPlanToDoItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStudyPlanToDoItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StudyPlanToDoItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StudyPlanToDoItemValidationError{}

// Validate checks the field values on StudyPlanTree with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StudyPlanTree) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StudyPlanTree with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StudyPlanTreeMultiError, or
// nil if none found.
func (m *StudyPlanTree) ValidateAll() error {
	return m.validate(true)
}

func (m *StudyPlanTree) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StudyPlanId

	if all {
		switch v := interface{}(m.GetBookTree()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudyPlanTreeValidationError{
					field:  "BookTree",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudyPlanTreeValidationError{
					field:  "BookTree",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBookTree()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudyPlanTreeValidationError{
				field:  "BookTree",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAvailableFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudyPlanTreeValidationError{
					field:  "AvailableFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudyPlanTreeValidationError{
					field:  "AvailableFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAvailableFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudyPlanTreeValidationError{
				field:  "AvailableFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAvailableTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudyPlanTreeValidationError{
					field:  "AvailableTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudyPlanTreeValidationError{
					field:  "AvailableTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAvailableTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudyPlanTreeValidationError{
				field:  "AvailableTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudyPlanTreeValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudyPlanTreeValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudyPlanTreeValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudyPlanTreeValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudyPlanTreeValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudyPlanTreeValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCompletedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudyPlanTreeValidationError{
					field:  "CompletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudyPlanTreeValidationError{
					field:  "CompletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudyPlanTreeValidationError{
				field:  "CompletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetSchoolDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudyPlanTreeValidationError{
					field:  "SchoolDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudyPlanTreeValidationError{
					field:  "SchoolDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchoolDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudyPlanTreeValidationError{
				field:  "SchoolDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StudyPlanTreeMultiError(errors)
	}

	return nil
}

// StudyPlanTreeMultiError is an error wrapping multiple validation errors
// returned by StudyPlanTree.ValidateAll() if the designated constraints
// aren't met.
type StudyPlanTreeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StudyPlanTreeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StudyPlanTreeMultiError) AllErrors() []error { return m }

// StudyPlanTreeValidationError is the validation error returned by
// StudyPlanTree.Validate if the designated constraints aren't met.
type StudyPlanTreeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StudyPlanTreeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StudyPlanTreeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StudyPlanTreeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StudyPlanTreeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StudyPlanTreeValidationError) ErrorName() string { return "StudyPlanTreeValidationError" }

// Error satisfies the builtin error interface
func (e StudyPlanTreeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStudyPlanTree.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StudyPlanTreeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StudyPlanTreeValidationError{}

// Validate checks the field values on StudyPlanIdentity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StudyPlanIdentity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StudyPlanIdentity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StudyPlanIdentityMultiError, or nil if none found.
func (m *StudyPlanIdentity) ValidateAll() error {
	return m.validate(true)
}

func (m *StudyPlanIdentity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StudyPlanId

	// no validation rules for StudentId

	// no validation rules for LearningMaterialId

	// no validation rules for StudyPlanItemId

	if len(errors) > 0 {
		return StudyPlanIdentityMultiError(errors)
	}

	return nil
}

// StudyPlanIdentityMultiError is an error wrapping multiple validation errors
// returned by StudyPlanIdentity.ValidateAll() if the designated constraints
// aren't met.
type StudyPlanIdentityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StudyPlanIdentityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StudyPlanIdentityMultiError) AllErrors() []error { return m }

// StudyPlanIdentityValidationError is the validation error returned by
// StudyPlanIdentity.Validate if the designated constraints aren't met.
type StudyPlanIdentityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StudyPlanIdentityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StudyPlanIdentityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StudyPlanIdentityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StudyPlanIdentityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StudyPlanIdentityValidationError) ErrorName() string {
	return "StudyPlanIdentityValidationError"
}

// Error satisfies the builtin error interface
func (e StudyPlanIdentityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStudyPlanIdentity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StudyPlanIdentityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StudyPlanIdentityValidationError{}

// Validate checks the field values on MasterStudyPlanIdentify with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MasterStudyPlanIdentify) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MasterStudyPlanIdentify with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MasterStudyPlanIdentifyMultiError, or nil if none found.
func (m *MasterStudyPlanIdentify) ValidateAll() error {
	return m.validate(true)
}

func (m *MasterStudyPlanIdentify) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StudyPlanId

	// no validation rules for LearningMaterialId

	if len(errors) > 0 {
		return MasterStudyPlanIdentifyMultiError(errors)
	}

	return nil
}

// MasterStudyPlanIdentifyMultiError is an error wrapping multiple validation
// errors returned by MasterStudyPlanIdentify.ValidateAll() if the designated
// constraints aren't met.
type MasterStudyPlanIdentifyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MasterStudyPlanIdentifyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MasterStudyPlanIdentifyMultiError) AllErrors() []error { return m }

// MasterStudyPlanIdentifyValidationError is the validation error returned by
// MasterStudyPlanIdentify.Validate if the designated constraints aren't met.
type MasterStudyPlanIdentifyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MasterStudyPlanIdentifyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MasterStudyPlanIdentifyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MasterStudyPlanIdentifyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MasterStudyPlanIdentifyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MasterStudyPlanIdentifyValidationError) ErrorName() string {
	return "MasterStudyPlanIdentifyValidationError"
}

// Error satisfies the builtin error interface
func (e MasterStudyPlanIdentifyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMasterStudyPlanIdentify.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MasterStudyPlanIdentifyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MasterStudyPlanIdentifyValidationError{}

// Validate checks the field values on MasterStudyPlan with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MasterStudyPlan) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MasterStudyPlan with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MasterStudyPlanMultiError, or nil if none found.
func (m *MasterStudyPlan) ValidateAll() error {
	return m.validate(true)
}

func (m *MasterStudyPlan) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMasterStudyPlanIdentify()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MasterStudyPlanValidationError{
					field:  "MasterStudyPlanIdentify",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MasterStudyPlanValidationError{
					field:  "MasterStudyPlanIdentify",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMasterStudyPlanIdentify()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MasterStudyPlanValidationError{
				field:  "MasterStudyPlanIdentify",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAvailableFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MasterStudyPlanValidationError{
					field:  "AvailableFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MasterStudyPlanValidationError{
					field:  "AvailableFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAvailableFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MasterStudyPlanValidationError{
				field:  "AvailableFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAvailableTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MasterStudyPlanValidationError{
					field:  "AvailableTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MasterStudyPlanValidationError{
					field:  "AvailableTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAvailableTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MasterStudyPlanValidationError{
				field:  "AvailableTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MasterStudyPlanValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MasterStudyPlanValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MasterStudyPlanValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MasterStudyPlanValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MasterStudyPlanValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MasterStudyPlanValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetSchoolDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MasterStudyPlanValidationError{
					field:  "SchoolDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MasterStudyPlanValidationError{
					field:  "SchoolDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchoolDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MasterStudyPlanValidationError{
				field:  "SchoolDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MasterStudyPlanMultiError(errors)
	}

	return nil
}

// MasterStudyPlanMultiError is an error wrapping multiple validation errors
// returned by MasterStudyPlan.ValidateAll() if the designated constraints
// aren't met.
type MasterStudyPlanMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MasterStudyPlanMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MasterStudyPlanMultiError) AllErrors() []error { return m }

// MasterStudyPlanValidationError is the validation error returned by
// MasterStudyPlan.Validate if the designated constraints aren't met.
type MasterStudyPlanValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MasterStudyPlanValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MasterStudyPlanValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MasterStudyPlanValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MasterStudyPlanValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MasterStudyPlanValidationError) ErrorName() string { return "MasterStudyPlanValidationError" }

// Error satisfies the builtin error interface
func (e MasterStudyPlanValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMasterStudyPlan.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MasterStudyPlanValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MasterStudyPlanValidationError{}

// Validate checks the field values on StudyPlanIdt with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StudyPlanIdt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StudyPlanIdt with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StudyPlanIdtMultiError, or
// nil if none found.
func (m *StudyPlanIdt) ValidateAll() error {
	return m.validate(true)
}

func (m *StudyPlanIdt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StudyPlanId

	if all {
		switch v := interface{}(m.GetStudentId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudyPlanIdtValidationError{
					field:  "StudentId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudyPlanIdtValidationError{
					field:  "StudentId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStudentId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudyPlanIdtValidationError{
				field:  "StudentId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StudyPlanIdtMultiError(errors)
	}

	return nil
}

// StudyPlanIdtMultiError is an error wrapping multiple validation errors
// returned by StudyPlanIdt.ValidateAll() if the designated constraints aren't met.
type StudyPlanIdtMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StudyPlanIdtMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StudyPlanIdtMultiError) AllErrors() []error { return m }

// StudyPlanIdtValidationError is the validation error returned by
// StudyPlanIdt.Validate if the designated constraints aren't met.
type StudyPlanIdtValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StudyPlanIdtValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StudyPlanIdtValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StudyPlanIdtValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StudyPlanIdtValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StudyPlanIdtValidationError) ErrorName() string { return "StudyPlanIdtValidationError" }

// Error satisfies the builtin error interface
func (e StudyPlanIdtValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStudyPlanIdt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StudyPlanIdtValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StudyPlanIdtValidationError{}
