// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: syllabus/v1/learning_material_service.proto

package sspb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on InsertLearningMaterialRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InsertLearningMaterialRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InsertLearningMaterialRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// InsertLearningMaterialRequestMultiError, or nil if none found.
func (m *InsertLearningMaterialRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InsertLearningMaterialRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Message.(type) {
	case *InsertLearningMaterialRequest_Assignment:
		if v == nil {
			err := InsertLearningMaterialRequestValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAssignment()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InsertLearningMaterialRequestValidationError{
						field:  "Assignment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InsertLearningMaterialRequestValidationError{
						field:  "Assignment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAssignment()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InsertLearningMaterialRequestValidationError{
					field:  "Assignment",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InsertLearningMaterialRequest_ExamLo:
		if v == nil {
			err := InsertLearningMaterialRequestValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExamLo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InsertLearningMaterialRequestValidationError{
						field:  "ExamLo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InsertLearningMaterialRequestValidationError{
						field:  "ExamLo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExamLo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InsertLearningMaterialRequestValidationError{
					field:  "ExamLo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InsertLearningMaterialRequest_Flashcard:
		if v == nil {
			err := InsertLearningMaterialRequestValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFlashcard()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InsertLearningMaterialRequestValidationError{
						field:  "Flashcard",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InsertLearningMaterialRequestValidationError{
						field:  "Flashcard",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFlashcard()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InsertLearningMaterialRequestValidationError{
					field:  "Flashcard",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InsertLearningMaterialRequest_LearningObjective:
		if v == nil {
			err := InsertLearningMaterialRequestValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLearningObjective()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InsertLearningMaterialRequestValidationError{
						field:  "LearningObjective",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InsertLearningMaterialRequestValidationError{
						field:  "LearningObjective",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLearningObjective()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InsertLearningMaterialRequestValidationError{
					field:  "LearningObjective",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InsertLearningMaterialRequest_TaskAssignment:
		if v == nil {
			err := InsertLearningMaterialRequestValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTaskAssignment()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InsertLearningMaterialRequestValidationError{
						field:  "TaskAssignment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InsertLearningMaterialRequestValidationError{
						field:  "TaskAssignment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTaskAssignment()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InsertLearningMaterialRequestValidationError{
					field:  "TaskAssignment",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return InsertLearningMaterialRequestMultiError(errors)
	}

	return nil
}

// InsertLearningMaterialRequestMultiError is an error wrapping multiple
// validation errors returned by InsertLearningMaterialRequest.ValidateAll()
// if the designated constraints aren't met.
type InsertLearningMaterialRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InsertLearningMaterialRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InsertLearningMaterialRequestMultiError) AllErrors() []error { return m }

// InsertLearningMaterialRequestValidationError is the validation error
// returned by InsertLearningMaterialRequest.Validate if the designated
// constraints aren't met.
type InsertLearningMaterialRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InsertLearningMaterialRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InsertLearningMaterialRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InsertLearningMaterialRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InsertLearningMaterialRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InsertLearningMaterialRequestValidationError) ErrorName() string {
	return "InsertLearningMaterialRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InsertLearningMaterialRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInsertLearningMaterialRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InsertLearningMaterialRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InsertLearningMaterialRequestValidationError{}

// Validate checks the field values on InsertLearningMaterialResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InsertLearningMaterialResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InsertLearningMaterialResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// InsertLearningMaterialResponseMultiError, or nil if none found.
func (m *InsertLearningMaterialResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InsertLearningMaterialResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Message.(type) {
	case *InsertLearningMaterialResponse_Assignment:
		if v == nil {
			err := InsertLearningMaterialResponseValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAssignment()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InsertLearningMaterialResponseValidationError{
						field:  "Assignment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InsertLearningMaterialResponseValidationError{
						field:  "Assignment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAssignment()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InsertLearningMaterialResponseValidationError{
					field:  "Assignment",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InsertLearningMaterialResponse_ExamLo:
		if v == nil {
			err := InsertLearningMaterialResponseValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExamLo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InsertLearningMaterialResponseValidationError{
						field:  "ExamLo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InsertLearningMaterialResponseValidationError{
						field:  "ExamLo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExamLo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InsertLearningMaterialResponseValidationError{
					field:  "ExamLo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InsertLearningMaterialResponse_Flashcard:
		if v == nil {
			err := InsertLearningMaterialResponseValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFlashcard()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InsertLearningMaterialResponseValidationError{
						field:  "Flashcard",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InsertLearningMaterialResponseValidationError{
						field:  "Flashcard",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFlashcard()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InsertLearningMaterialResponseValidationError{
					field:  "Flashcard",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InsertLearningMaterialResponse_LearningObjective:
		if v == nil {
			err := InsertLearningMaterialResponseValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLearningObjective()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InsertLearningMaterialResponseValidationError{
						field:  "LearningObjective",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InsertLearningMaterialResponseValidationError{
						field:  "LearningObjective",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLearningObjective()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InsertLearningMaterialResponseValidationError{
					field:  "LearningObjective",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *InsertLearningMaterialResponse_TaskAssignment:
		if v == nil {
			err := InsertLearningMaterialResponseValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTaskAssignment()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InsertLearningMaterialResponseValidationError{
						field:  "TaskAssignment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InsertLearningMaterialResponseValidationError{
						field:  "TaskAssignment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTaskAssignment()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InsertLearningMaterialResponseValidationError{
					field:  "TaskAssignment",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return InsertLearningMaterialResponseMultiError(errors)
	}

	return nil
}

// InsertLearningMaterialResponseMultiError is an error wrapping multiple
// validation errors returned by InsertLearningMaterialResponse.ValidateAll()
// if the designated constraints aren't met.
type InsertLearningMaterialResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InsertLearningMaterialResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InsertLearningMaterialResponseMultiError) AllErrors() []error { return m }

// InsertLearningMaterialResponseValidationError is the validation error
// returned by InsertLearningMaterialResponse.Validate if the designated
// constraints aren't met.
type InsertLearningMaterialResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InsertLearningMaterialResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InsertLearningMaterialResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InsertLearningMaterialResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InsertLearningMaterialResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InsertLearningMaterialResponseValidationError) ErrorName() string {
	return "InsertLearningMaterialResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InsertLearningMaterialResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInsertLearningMaterialResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InsertLearningMaterialResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InsertLearningMaterialResponseValidationError{}

// Validate checks the field values on UpdateLearningMaterialRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateLearningMaterialRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLearningMaterialRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateLearningMaterialRequestMultiError, or nil if none found.
func (m *UpdateLearningMaterialRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLearningMaterialRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Message.(type) {
	case *UpdateLearningMaterialRequest_Assignment:
		if v == nil {
			err := UpdateLearningMaterialRequestValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAssignment()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateLearningMaterialRequestValidationError{
						field:  "Assignment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateLearningMaterialRequestValidationError{
						field:  "Assignment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAssignment()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateLearningMaterialRequestValidationError{
					field:  "Assignment",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpdateLearningMaterialRequest_ExamLo:
		if v == nil {
			err := UpdateLearningMaterialRequestValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExamLo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateLearningMaterialRequestValidationError{
						field:  "ExamLo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateLearningMaterialRequestValidationError{
						field:  "ExamLo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExamLo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateLearningMaterialRequestValidationError{
					field:  "ExamLo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpdateLearningMaterialRequest_Flashcard:
		if v == nil {
			err := UpdateLearningMaterialRequestValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFlashcard()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateLearningMaterialRequestValidationError{
						field:  "Flashcard",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateLearningMaterialRequestValidationError{
						field:  "Flashcard",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFlashcard()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateLearningMaterialRequestValidationError{
					field:  "Flashcard",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpdateLearningMaterialRequest_LearningObjective:
		if v == nil {
			err := UpdateLearningMaterialRequestValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLearningObjective()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateLearningMaterialRequestValidationError{
						field:  "LearningObjective",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateLearningMaterialRequestValidationError{
						field:  "LearningObjective",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLearningObjective()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateLearningMaterialRequestValidationError{
					field:  "LearningObjective",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpdateLearningMaterialRequest_TaskAssignment:
		if v == nil {
			err := UpdateLearningMaterialRequestValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTaskAssignment()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateLearningMaterialRequestValidationError{
						field:  "TaskAssignment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateLearningMaterialRequestValidationError{
						field:  "TaskAssignment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTaskAssignment()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateLearningMaterialRequestValidationError{
					field:  "TaskAssignment",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return UpdateLearningMaterialRequestMultiError(errors)
	}

	return nil
}

// UpdateLearningMaterialRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateLearningMaterialRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateLearningMaterialRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLearningMaterialRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLearningMaterialRequestMultiError) AllErrors() []error { return m }

// UpdateLearningMaterialRequestValidationError is the validation error
// returned by UpdateLearningMaterialRequest.Validate if the designated
// constraints aren't met.
type UpdateLearningMaterialRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLearningMaterialRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLearningMaterialRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLearningMaterialRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLearningMaterialRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLearningMaterialRequestValidationError) ErrorName() string {
	return "UpdateLearningMaterialRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLearningMaterialRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLearningMaterialRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLearningMaterialRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLearningMaterialRequestValidationError{}

// Validate checks the field values on UpdateLearningMaterialResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateLearningMaterialResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLearningMaterialResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateLearningMaterialResponseMultiError, or nil if none found.
func (m *UpdateLearningMaterialResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLearningMaterialResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Message.(type) {
	case *UpdateLearningMaterialResponse_Assignment:
		if v == nil {
			err := UpdateLearningMaterialResponseValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAssignment()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateLearningMaterialResponseValidationError{
						field:  "Assignment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateLearningMaterialResponseValidationError{
						field:  "Assignment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAssignment()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateLearningMaterialResponseValidationError{
					field:  "Assignment",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpdateLearningMaterialResponse_ExamLo:
		if v == nil {
			err := UpdateLearningMaterialResponseValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExamLo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateLearningMaterialResponseValidationError{
						field:  "ExamLo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateLearningMaterialResponseValidationError{
						field:  "ExamLo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExamLo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateLearningMaterialResponseValidationError{
					field:  "ExamLo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpdateLearningMaterialResponse_Flashcard:
		if v == nil {
			err := UpdateLearningMaterialResponseValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFlashcard()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateLearningMaterialResponseValidationError{
						field:  "Flashcard",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateLearningMaterialResponseValidationError{
						field:  "Flashcard",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFlashcard()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateLearningMaterialResponseValidationError{
					field:  "Flashcard",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpdateLearningMaterialResponse_LearningObjective:
		if v == nil {
			err := UpdateLearningMaterialResponseValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLearningObjective()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateLearningMaterialResponseValidationError{
						field:  "LearningObjective",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateLearningMaterialResponseValidationError{
						field:  "LearningObjective",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLearningObjective()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateLearningMaterialResponseValidationError{
					field:  "LearningObjective",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UpdateLearningMaterialResponse_TaskAssignment:
		if v == nil {
			err := UpdateLearningMaterialResponseValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTaskAssignment()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateLearningMaterialResponseValidationError{
						field:  "TaskAssignment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateLearningMaterialResponseValidationError{
						field:  "TaskAssignment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTaskAssignment()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateLearningMaterialResponseValidationError{
					field:  "TaskAssignment",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return UpdateLearningMaterialResponseMultiError(errors)
	}

	return nil
}

// UpdateLearningMaterialResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateLearningMaterialResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateLearningMaterialResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLearningMaterialResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLearningMaterialResponseMultiError) AllErrors() []error { return m }

// UpdateLearningMaterialResponseValidationError is the validation error
// returned by UpdateLearningMaterialResponse.Validate if the designated
// constraints aren't met.
type UpdateLearningMaterialResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLearningMaterialResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLearningMaterialResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLearningMaterialResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLearningMaterialResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLearningMaterialResponseValidationError) ErrorName() string {
	return "UpdateLearningMaterialResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLearningMaterialResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLearningMaterialResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLearningMaterialResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLearningMaterialResponseValidationError{}

// Validate checks the field values on DeleteLearningMaterialRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteLearningMaterialRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteLearningMaterialRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteLearningMaterialRequestMultiError, or nil if none found.
func (m *DeleteLearningMaterialRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteLearningMaterialRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LearningMaterialId

	if len(errors) > 0 {
		return DeleteLearningMaterialRequestMultiError(errors)
	}

	return nil
}

// DeleteLearningMaterialRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteLearningMaterialRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteLearningMaterialRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteLearningMaterialRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteLearningMaterialRequestMultiError) AllErrors() []error { return m }

// DeleteLearningMaterialRequestValidationError is the validation error
// returned by DeleteLearningMaterialRequest.Validate if the designated
// constraints aren't met.
type DeleteLearningMaterialRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLearningMaterialRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLearningMaterialRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLearningMaterialRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLearningMaterialRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLearningMaterialRequestValidationError) ErrorName() string {
	return "DeleteLearningMaterialRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLearningMaterialRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLearningMaterialRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLearningMaterialRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLearningMaterialRequestValidationError{}

// Validate checks the field values on DeleteLearningMaterialResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteLearningMaterialResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteLearningMaterialResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteLearningMaterialResponseMultiError, or nil if none found.
func (m *DeleteLearningMaterialResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteLearningMaterialResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteLearningMaterialResponseMultiError(errors)
	}

	return nil
}

// DeleteLearningMaterialResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteLearningMaterialResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteLearningMaterialResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteLearningMaterialResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteLearningMaterialResponseMultiError) AllErrors() []error { return m }

// DeleteLearningMaterialResponseValidationError is the validation error
// returned by DeleteLearningMaterialResponse.Validate if the designated
// constraints aren't met.
type DeleteLearningMaterialResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLearningMaterialResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLearningMaterialResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLearningMaterialResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLearningMaterialResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLearningMaterialResponseValidationError) ErrorName() string {
	return "DeleteLearningMaterialResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLearningMaterialResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLearningMaterialResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLearningMaterialResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLearningMaterialResponseValidationError{}

// Validate checks the field values on SwapDisplayOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SwapDisplayOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SwapDisplayOrderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SwapDisplayOrderRequestMultiError, or nil if none found.
func (m *SwapDisplayOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SwapDisplayOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FirstLearningMaterialId

	// no validation rules for SecondLearningMaterialId

	if len(errors) > 0 {
		return SwapDisplayOrderRequestMultiError(errors)
	}

	return nil
}

// SwapDisplayOrderRequestMultiError is an error wrapping multiple validation
// errors returned by SwapDisplayOrderRequest.ValidateAll() if the designated
// constraints aren't met.
type SwapDisplayOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SwapDisplayOrderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SwapDisplayOrderRequestMultiError) AllErrors() []error { return m }

// SwapDisplayOrderRequestValidationError is the validation error returned by
// SwapDisplayOrderRequest.Validate if the designated constraints aren't met.
type SwapDisplayOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SwapDisplayOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SwapDisplayOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SwapDisplayOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SwapDisplayOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SwapDisplayOrderRequestValidationError) ErrorName() string {
	return "SwapDisplayOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SwapDisplayOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSwapDisplayOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SwapDisplayOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SwapDisplayOrderRequestValidationError{}

// Validate checks the field values on SwapDisplayOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SwapDisplayOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SwapDisplayOrderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SwapDisplayOrderResponseMultiError, or nil if none found.
func (m *SwapDisplayOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SwapDisplayOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SwapDisplayOrderResponseMultiError(errors)
	}

	return nil
}

// SwapDisplayOrderResponseMultiError is an error wrapping multiple validation
// errors returned by SwapDisplayOrderResponse.ValidateAll() if the designated
// constraints aren't met.
type SwapDisplayOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SwapDisplayOrderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SwapDisplayOrderResponseMultiError) AllErrors() []error { return m }

// SwapDisplayOrderResponseValidationError is the validation error returned by
// SwapDisplayOrderResponse.Validate if the designated constraints aren't met.
type SwapDisplayOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SwapDisplayOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SwapDisplayOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SwapDisplayOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SwapDisplayOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SwapDisplayOrderResponseValidationError) ErrorName() string {
	return "SwapDisplayOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SwapDisplayOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSwapDisplayOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SwapDisplayOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SwapDisplayOrderResponseValidationError{}

// Validate checks the field values on DuplicateBookRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DuplicateBookRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DuplicateBookRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DuplicateBookRequestMultiError, or nil if none found.
func (m *DuplicateBookRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DuplicateBookRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BookId

	// no validation rules for BookName

	if len(errors) > 0 {
		return DuplicateBookRequestMultiError(errors)
	}

	return nil
}

// DuplicateBookRequestMultiError is an error wrapping multiple validation
// errors returned by DuplicateBookRequest.ValidateAll() if the designated
// constraints aren't met.
type DuplicateBookRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DuplicateBookRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DuplicateBookRequestMultiError) AllErrors() []error { return m }

// DuplicateBookRequestValidationError is the validation error returned by
// DuplicateBookRequest.Validate if the designated constraints aren't met.
type DuplicateBookRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DuplicateBookRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DuplicateBookRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DuplicateBookRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DuplicateBookRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DuplicateBookRequestValidationError) ErrorName() string {
	return "DuplicateBookRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DuplicateBookRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDuplicateBookRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DuplicateBookRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DuplicateBookRequestValidationError{}

// Validate checks the field values on DuplicateBookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DuplicateBookResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DuplicateBookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DuplicateBookResponseMultiError, or nil if none found.
func (m *DuplicateBookResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DuplicateBookResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NewBookID

	if len(errors) > 0 {
		return DuplicateBookResponseMultiError(errors)
	}

	return nil
}

// DuplicateBookResponseMultiError is an error wrapping multiple validation
// errors returned by DuplicateBookResponse.ValidateAll() if the designated
// constraints aren't met.
type DuplicateBookResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DuplicateBookResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DuplicateBookResponseMultiError) AllErrors() []error { return m }

// DuplicateBookResponseValidationError is the validation error returned by
// DuplicateBookResponse.Validate if the designated constraints aren't met.
type DuplicateBookResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DuplicateBookResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DuplicateBookResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DuplicateBookResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DuplicateBookResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DuplicateBookResponseValidationError) ErrorName() string {
	return "DuplicateBookResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DuplicateBookResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDuplicateBookResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DuplicateBookResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DuplicateBookResponseValidationError{}

// Validate checks the field values on ListLearningMaterialRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLearningMaterialRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLearningMaterialRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLearningMaterialRequestMultiError, or nil if none found.
func (m *ListLearningMaterialRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLearningMaterialRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Message.(type) {
	case *ListLearningMaterialRequest_Assignment:
		if v == nil {
			err := ListLearningMaterialRequestValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAssignment()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLearningMaterialRequestValidationError{
						field:  "Assignment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLearningMaterialRequestValidationError{
						field:  "Assignment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAssignment()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLearningMaterialRequestValidationError{
					field:  "Assignment",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ListLearningMaterialRequest_ExamLo:
		if v == nil {
			err := ListLearningMaterialRequestValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExamLo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLearningMaterialRequestValidationError{
						field:  "ExamLo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLearningMaterialRequestValidationError{
						field:  "ExamLo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExamLo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLearningMaterialRequestValidationError{
					field:  "ExamLo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ListLearningMaterialRequest_Flashcard:
		if v == nil {
			err := ListLearningMaterialRequestValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFlashcard()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLearningMaterialRequestValidationError{
						field:  "Flashcard",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLearningMaterialRequestValidationError{
						field:  "Flashcard",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFlashcard()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLearningMaterialRequestValidationError{
					field:  "Flashcard",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ListLearningMaterialRequest_LearningObjective:
		if v == nil {
			err := ListLearningMaterialRequestValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLearningObjective()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLearningMaterialRequestValidationError{
						field:  "LearningObjective",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLearningMaterialRequestValidationError{
						field:  "LearningObjective",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLearningObjective()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLearningMaterialRequestValidationError{
					field:  "LearningObjective",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ListLearningMaterialRequest_TaskAssignment:
		if v == nil {
			err := ListLearningMaterialRequestValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTaskAssignment()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLearningMaterialRequestValidationError{
						field:  "TaskAssignment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLearningMaterialRequestValidationError{
						field:  "TaskAssignment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTaskAssignment()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLearningMaterialRequestValidationError{
					field:  "TaskAssignment",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ListLearningMaterialRequestMultiError(errors)
	}

	return nil
}

// ListLearningMaterialRequestMultiError is an error wrapping multiple
// validation errors returned by ListLearningMaterialRequest.ValidateAll() if
// the designated constraints aren't met.
type ListLearningMaterialRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLearningMaterialRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLearningMaterialRequestMultiError) AllErrors() []error { return m }

// ListLearningMaterialRequestValidationError is the validation error returned
// by ListLearningMaterialRequest.Validate if the designated constraints
// aren't met.
type ListLearningMaterialRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLearningMaterialRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLearningMaterialRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLearningMaterialRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLearningMaterialRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLearningMaterialRequestValidationError) ErrorName() string {
	return "ListLearningMaterialRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLearningMaterialRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLearningMaterialRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLearningMaterialRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLearningMaterialRequestValidationError{}

// Validate checks the field values on ListLearningMaterialResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLearningMaterialResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLearningMaterialResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLearningMaterialResponseMultiError, or nil if none found.
func (m *ListLearningMaterialResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLearningMaterialResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Message.(type) {
	case *ListLearningMaterialResponse_Assignment:
		if v == nil {
			err := ListLearningMaterialResponseValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAssignment()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLearningMaterialResponseValidationError{
						field:  "Assignment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLearningMaterialResponseValidationError{
						field:  "Assignment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAssignment()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLearningMaterialResponseValidationError{
					field:  "Assignment",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ListLearningMaterialResponse_ExamLo:
		if v == nil {
			err := ListLearningMaterialResponseValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetExamLo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLearningMaterialResponseValidationError{
						field:  "ExamLo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLearningMaterialResponseValidationError{
						field:  "ExamLo",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExamLo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLearningMaterialResponseValidationError{
					field:  "ExamLo",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ListLearningMaterialResponse_Flashcard:
		if v == nil {
			err := ListLearningMaterialResponseValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFlashcard()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLearningMaterialResponseValidationError{
						field:  "Flashcard",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLearningMaterialResponseValidationError{
						field:  "Flashcard",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFlashcard()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLearningMaterialResponseValidationError{
					field:  "Flashcard",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ListLearningMaterialResponse_LearningObjective:
		if v == nil {
			err := ListLearningMaterialResponseValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetLearningObjective()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLearningMaterialResponseValidationError{
						field:  "LearningObjective",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLearningMaterialResponseValidationError{
						field:  "LearningObjective",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLearningObjective()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLearningMaterialResponseValidationError{
					field:  "LearningObjective",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ListLearningMaterialResponse_TaskAssignment:
		if v == nil {
			err := ListLearningMaterialResponseValidationError{
				field:  "Message",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTaskAssignment()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLearningMaterialResponseValidationError{
						field:  "TaskAssignment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLearningMaterialResponseValidationError{
						field:  "TaskAssignment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTaskAssignment()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLearningMaterialResponseValidationError{
					field:  "TaskAssignment",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ListLearningMaterialResponseMultiError(errors)
	}

	return nil
}

// ListLearningMaterialResponseMultiError is an error wrapping multiple
// validation errors returned by ListLearningMaterialResponse.ValidateAll() if
// the designated constraints aren't met.
type ListLearningMaterialResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLearningMaterialResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLearningMaterialResponseMultiError) AllErrors() []error { return m }

// ListLearningMaterialResponseValidationError is the validation error returned
// by ListLearningMaterialResponse.Validate if the designated constraints
// aren't met.
type ListLearningMaterialResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLearningMaterialResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLearningMaterialResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLearningMaterialResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLearningMaterialResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLearningMaterialResponseValidationError) ErrorName() string {
	return "ListLearningMaterialResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLearningMaterialResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLearningMaterialResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLearningMaterialResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLearningMaterialResponseValidationError{}

// Validate checks the field values on UpdateLearningMaterialNameRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateLearningMaterialNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLearningMaterialNameRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateLearningMaterialNameRequestMultiError, or nil if none found.
func (m *UpdateLearningMaterialNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLearningMaterialNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LearningMaterialId

	// no validation rules for NewLearningMaterialName

	if len(errors) > 0 {
		return UpdateLearningMaterialNameRequestMultiError(errors)
	}

	return nil
}

// UpdateLearningMaterialNameRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateLearningMaterialNameRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateLearningMaterialNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLearningMaterialNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLearningMaterialNameRequestMultiError) AllErrors() []error { return m }

// UpdateLearningMaterialNameRequestValidationError is the validation error
// returned by UpdateLearningMaterialNameRequest.Validate if the designated
// constraints aren't met.
type UpdateLearningMaterialNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLearningMaterialNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLearningMaterialNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLearningMaterialNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLearningMaterialNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLearningMaterialNameRequestValidationError) ErrorName() string {
	return "UpdateLearningMaterialNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLearningMaterialNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLearningMaterialNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLearningMaterialNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLearningMaterialNameRequestValidationError{}

// Validate checks the field values on UpdateLearningMaterialNameResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateLearningMaterialNameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLearningMaterialNameResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateLearningMaterialNameResponseMultiError, or nil if none found.
func (m *UpdateLearningMaterialNameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLearningMaterialNameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateLearningMaterialNameResponseMultiError(errors)
	}

	return nil
}

// UpdateLearningMaterialNameResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpdateLearningMaterialNameResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateLearningMaterialNameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLearningMaterialNameResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLearningMaterialNameResponseMultiError) AllErrors() []error { return m }

// UpdateLearningMaterialNameResponseValidationError is the validation error
// returned by UpdateLearningMaterialNameResponse.Validate if the designated
// constraints aren't met.
type UpdateLearningMaterialNameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLearningMaterialNameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLearningMaterialNameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLearningMaterialNameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLearningMaterialNameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLearningMaterialNameResponseValidationError) ErrorName() string {
	return "UpdateLearningMaterialNameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLearningMaterialNameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLearningMaterialNameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLearningMaterialNameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLearningMaterialNameResponseValidationError{}
