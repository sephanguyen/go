// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: syllabus/v1/quiz_service.proto

package sspb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	cpb "github.com/manabie-com/backend/pkg/manabuf/common/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = cpb.QuizType(0)
)

// Validate checks the field values on CreateQuizTestV2Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateQuizTestV2Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateQuizTestV2Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateQuizTestV2RequestMultiError, or nil if none found.
func (m *CreateQuizTestV2Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateQuizTestV2Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStudyPlanItemIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateQuizTestV2RequestValidationError{
					field:  "StudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateQuizTestV2RequestValidationError{
					field:  "StudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStudyPlanItemIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateQuizTestV2RequestValidationError{
				field:  "StudyPlanItemIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShuffleQuizSetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateQuizTestV2RequestValidationError{
					field:  "ShuffleQuizSetId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateQuizTestV2RequestValidationError{
					field:  "ShuffleQuizSetId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShuffleQuizSetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateQuizTestV2RequestValidationError{
				field:  "ShuffleQuizSetId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPaging()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateQuizTestV2RequestValidationError{
					field:  "Paging",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateQuizTestV2RequestValidationError{
					field:  "Paging",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateQuizTestV2RequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SessionId

	// no validation rules for KeepOrder

	if len(errors) > 0 {
		return CreateQuizTestV2RequestMultiError(errors)
	}

	return nil
}

// CreateQuizTestV2RequestMultiError is an error wrapping multiple validation
// errors returned by CreateQuizTestV2Request.ValidateAll() if the designated
// constraints aren't met.
type CreateQuizTestV2RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateQuizTestV2RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateQuizTestV2RequestMultiError) AllErrors() []error { return m }

// CreateQuizTestV2RequestValidationError is the validation error returned by
// CreateQuizTestV2Request.Validate if the designated constraints aren't met.
type CreateQuizTestV2RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateQuizTestV2RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateQuizTestV2RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateQuizTestV2RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateQuizTestV2RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateQuizTestV2RequestValidationError) ErrorName() string {
	return "CreateQuizTestV2RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateQuizTestV2RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateQuizTestV2Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateQuizTestV2RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateQuizTestV2RequestValidationError{}

// Validate checks the field values on CreateQuizTestV2Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateQuizTestV2Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateQuizTestV2Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateQuizTestV2ResponseMultiError, or nil if none found.
func (m *CreateQuizTestV2Response) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateQuizTestV2Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNextPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateQuizTestV2ResponseValidationError{
					field:  "NextPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateQuizTestV2ResponseValidationError{
					field:  "NextPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNextPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateQuizTestV2ResponseValidationError{
				field:  "NextPage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetQuizzes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateQuizTestV2ResponseValidationError{
						field:  fmt.Sprintf("Quizzes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateQuizTestV2ResponseValidationError{
						field:  fmt.Sprintf("Quizzes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateQuizTestV2ResponseValidationError{
					field:  fmt.Sprintf("Quizzes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ShuffleQuizSetId

	for idx, item := range m.GetQuestionGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateQuizTestV2ResponseValidationError{
						field:  fmt.Sprintf("QuestionGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateQuizTestV2ResponseValidationError{
						field:  fmt.Sprintf("QuestionGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateQuizTestV2ResponseValidationError{
					field:  fmt.Sprintf("QuestionGroups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateQuizTestV2ResponseMultiError(errors)
	}

	return nil
}

// CreateQuizTestV2ResponseMultiError is an error wrapping multiple validation
// errors returned by CreateQuizTestV2Response.ValidateAll() if the designated
// constraints aren't met.
type CreateQuizTestV2ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateQuizTestV2ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateQuizTestV2ResponseMultiError) AllErrors() []error { return m }

// CreateQuizTestV2ResponseValidationError is the validation error returned by
// CreateQuizTestV2Response.Validate if the designated constraints aren't met.
type CreateQuizTestV2ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateQuizTestV2ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateQuizTestV2ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateQuizTestV2ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateQuizTestV2ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateQuizTestV2ResponseValidationError) ErrorName() string {
	return "CreateQuizTestV2ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateQuizTestV2ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateQuizTestV2Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateQuizTestV2ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateQuizTestV2ResponseValidationError{}

// Validate checks the field values on CreateRetryQuizTestV2Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRetryQuizTestV2Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRetryQuizTestV2Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRetryQuizTestV2RequestMultiError, or nil if none found.
func (m *CreateRetryQuizTestV2Request) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRetryQuizTestV2Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStudyPlanItemIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRetryQuizTestV2RequestValidationError{
					field:  "StudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRetryQuizTestV2RequestValidationError{
					field:  "StudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStudyPlanItemIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRetryQuizTestV2RequestValidationError{
				field:  "StudyPlanItemIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetShuffleQuizSetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRetryQuizTestV2RequestValidationError{
					field:  "ShuffleQuizSetId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRetryQuizTestV2RequestValidationError{
					field:  "ShuffleQuizSetId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShuffleQuizSetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRetryQuizTestV2RequestValidationError{
				field:  "ShuffleQuizSetId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPaging()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRetryQuizTestV2RequestValidationError{
					field:  "Paging",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRetryQuizTestV2RequestValidationError{
					field:  "Paging",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRetryQuizTestV2RequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SessionId

	// no validation rules for KeepOrder

	if all {
		switch v := interface{}(m.GetRetryShuffleQuizId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRetryQuizTestV2RequestValidationError{
					field:  "RetryShuffleQuizId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRetryQuizTestV2RequestValidationError{
					field:  "RetryShuffleQuizId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRetryShuffleQuizId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRetryQuizTestV2RequestValidationError{
				field:  "RetryShuffleQuizId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRetryQuizTestV2RequestMultiError(errors)
	}

	return nil
}

// CreateRetryQuizTestV2RequestMultiError is an error wrapping multiple
// validation errors returned by CreateRetryQuizTestV2Request.ValidateAll() if
// the designated constraints aren't met.
type CreateRetryQuizTestV2RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRetryQuizTestV2RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRetryQuizTestV2RequestMultiError) AllErrors() []error { return m }

// CreateRetryQuizTestV2RequestValidationError is the validation error returned
// by CreateRetryQuizTestV2Request.Validate if the designated constraints
// aren't met.
type CreateRetryQuizTestV2RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRetryQuizTestV2RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRetryQuizTestV2RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRetryQuizTestV2RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRetryQuizTestV2RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRetryQuizTestV2RequestValidationError) ErrorName() string {
	return "CreateRetryQuizTestV2RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRetryQuizTestV2RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRetryQuizTestV2Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRetryQuizTestV2RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRetryQuizTestV2RequestValidationError{}

// Validate checks the field values on CreateRetryQuizTestV2Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRetryQuizTestV2Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRetryQuizTestV2Response with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateRetryQuizTestV2ResponseMultiError, or nil if none found.
func (m *CreateRetryQuizTestV2Response) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRetryQuizTestV2Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNextPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRetryQuizTestV2ResponseValidationError{
					field:  "NextPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRetryQuizTestV2ResponseValidationError{
					field:  "NextPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNextPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRetryQuizTestV2ResponseValidationError{
				field:  "NextPage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetQuizzes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateRetryQuizTestV2ResponseValidationError{
						field:  fmt.Sprintf("Quizzes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateRetryQuizTestV2ResponseValidationError{
						field:  fmt.Sprintf("Quizzes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateRetryQuizTestV2ResponseValidationError{
					field:  fmt.Sprintf("Quizzes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ShuffleQuizSetId

	for idx, item := range m.GetQuestionGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateRetryQuizTestV2ResponseValidationError{
						field:  fmt.Sprintf("QuestionGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateRetryQuizTestV2ResponseValidationError{
						field:  fmt.Sprintf("QuestionGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateRetryQuizTestV2ResponseValidationError{
					field:  fmt.Sprintf("QuestionGroups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateRetryQuizTestV2ResponseMultiError(errors)
	}

	return nil
}

// CreateRetryQuizTestV2ResponseMultiError is an error wrapping multiple
// validation errors returned by CreateRetryQuizTestV2Response.ValidateAll()
// if the designated constraints aren't met.
type CreateRetryQuizTestV2ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRetryQuizTestV2ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRetryQuizTestV2ResponseMultiError) AllErrors() []error { return m }

// CreateRetryQuizTestV2ResponseValidationError is the validation error
// returned by CreateRetryQuizTestV2Response.Validate if the designated
// constraints aren't met.
type CreateRetryQuizTestV2ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRetryQuizTestV2ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRetryQuizTestV2ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRetryQuizTestV2ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRetryQuizTestV2ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRetryQuizTestV2ResponseValidationError) ErrorName() string {
	return "CreateRetryQuizTestV2ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRetryQuizTestV2ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRetryQuizTestV2Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRetryQuizTestV2ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRetryQuizTestV2ResponseValidationError{}

// Validate checks the field values on RetrieveQuizTestV2Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RetrieveQuizTestV2Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetrieveQuizTestV2Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RetrieveQuizTestV2RequestMultiError, or nil if none found.
func (m *RetrieveQuizTestV2Request) ValidateAll() error {
	return m.validate(true)
}

func (m *RetrieveQuizTestV2Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStudyPlanItemIdentities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RetrieveQuizTestV2RequestValidationError{
						field:  fmt.Sprintf("StudyPlanItemIdentities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RetrieveQuizTestV2RequestValidationError{
						field:  fmt.Sprintf("StudyPlanItemIdentities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RetrieveQuizTestV2RequestValidationError{
					field:  fmt.Sprintf("StudyPlanItemIdentities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IsCompleted

	if len(errors) > 0 {
		return RetrieveQuizTestV2RequestMultiError(errors)
	}

	return nil
}

// RetrieveQuizTestV2RequestMultiError is an error wrapping multiple validation
// errors returned by RetrieveQuizTestV2Request.ValidateAll() if the
// designated constraints aren't met.
type RetrieveQuizTestV2RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetrieveQuizTestV2RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetrieveQuizTestV2RequestMultiError) AllErrors() []error { return m }

// RetrieveQuizTestV2RequestValidationError is the validation error returned by
// RetrieveQuizTestV2Request.Validate if the designated constraints aren't met.
type RetrieveQuizTestV2RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveQuizTestV2RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveQuizTestV2RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveQuizTestV2RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveQuizTestV2RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveQuizTestV2RequestValidationError) ErrorName() string {
	return "RetrieveQuizTestV2RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveQuizTestV2RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveQuizTestV2Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveQuizTestV2RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveQuizTestV2RequestValidationError{}

// Validate checks the field values on RetrieveQuizTestV2Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RetrieveQuizTestV2Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetrieveQuizTestV2Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RetrieveQuizTestV2ResponseMultiError, or nil if none found.
func (m *RetrieveQuizTestV2Response) ValidateAll() error {
	return m.validate(true)
}

func (m *RetrieveQuizTestV2Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RetrieveQuizTestV2ResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RetrieveQuizTestV2ResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RetrieveQuizTestV2ResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for HighestCrown

	// no validation rules for TotalAttempts

	if all {
		switch v := interface{}(m.GetHighestScore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RetrieveQuizTestV2ResponseValidationError{
					field:  "HighestScore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RetrieveQuizTestV2ResponseValidationError{
					field:  "HighestScore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHighestScore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetrieveQuizTestV2ResponseValidationError{
				field:  "HighestScore",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RetrieveQuizTestV2ResponseMultiError(errors)
	}

	return nil
}

// RetrieveQuizTestV2ResponseMultiError is an error wrapping multiple
// validation errors returned by RetrieveQuizTestV2Response.ValidateAll() if
// the designated constraints aren't met.
type RetrieveQuizTestV2ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetrieveQuizTestV2ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetrieveQuizTestV2ResponseMultiError) AllErrors() []error { return m }

// RetrieveQuizTestV2ResponseValidationError is the validation error returned
// by RetrieveQuizTestV2Response.Validate if the designated constraints aren't met.
type RetrieveQuizTestV2ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveQuizTestV2ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveQuizTestV2ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveQuizTestV2ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveQuizTestV2ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveQuizTestV2ResponseValidationError) ErrorName() string {
	return "RetrieveQuizTestV2ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveQuizTestV2ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveQuizTestV2Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveQuizTestV2ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveQuizTestV2ResponseValidationError{}

// Validate checks the field values on UpsertFlashcardContentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertFlashcardContentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertFlashcardContentRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpsertFlashcardContentRequestMultiError, or nil if none found.
func (m *UpsertFlashcardContentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertFlashcardContentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FlashcardId

	for idx, item := range m.GetQuizzes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpsertFlashcardContentRequestValidationError{
						field:  fmt.Sprintf("Quizzes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpsertFlashcardContentRequestValidationError{
						field:  fmt.Sprintf("Quizzes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertFlashcardContentRequestValidationError{
					field:  fmt.Sprintf("Quizzes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Kind

	if len(errors) > 0 {
		return UpsertFlashcardContentRequestMultiError(errors)
	}

	return nil
}

// UpsertFlashcardContentRequestMultiError is an error wrapping multiple
// validation errors returned by UpsertFlashcardContentRequest.ValidateAll()
// if the designated constraints aren't met.
type UpsertFlashcardContentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertFlashcardContentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertFlashcardContentRequestMultiError) AllErrors() []error { return m }

// UpsertFlashcardContentRequestValidationError is the validation error
// returned by UpsertFlashcardContentRequest.Validate if the designated
// constraints aren't met.
type UpsertFlashcardContentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertFlashcardContentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertFlashcardContentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertFlashcardContentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertFlashcardContentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertFlashcardContentRequestValidationError) ErrorName() string {
	return "UpsertFlashcardContentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertFlashcardContentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertFlashcardContentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertFlashcardContentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertFlashcardContentRequestValidationError{}

// Validate checks the field values on UpsertFlashcardContentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertFlashcardContentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertFlashcardContentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpsertFlashcardContentResponseMultiError, or nil if none found.
func (m *UpsertFlashcardContentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertFlashcardContentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetQuizzes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpsertFlashcardContentResponseValidationError{
						field:  fmt.Sprintf("Quizzes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpsertFlashcardContentResponseValidationError{
						field:  fmt.Sprintf("Quizzes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertFlashcardContentResponseValidationError{
					field:  fmt.Sprintf("Quizzes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpsertFlashcardContentResponseMultiError(errors)
	}

	return nil
}

// UpsertFlashcardContentResponseMultiError is an error wrapping multiple
// validation errors returned by UpsertFlashcardContentResponse.ValidateAll()
// if the designated constraints aren't met.
type UpsertFlashcardContentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertFlashcardContentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertFlashcardContentResponseMultiError) AllErrors() []error { return m }

// UpsertFlashcardContentResponseValidationError is the validation error
// returned by UpsertFlashcardContentResponse.Validate if the designated
// constraints aren't met.
type UpsertFlashcardContentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertFlashcardContentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertFlashcardContentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertFlashcardContentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertFlashcardContentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertFlashcardContentResponseValidationError) ErrorName() string {
	return "UpsertFlashcardContentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertFlashcardContentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertFlashcardContentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertFlashcardContentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertFlashcardContentResponseValidationError{}

// Validate checks the field values on Answer with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Answer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Answer with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AnswerMultiError, or nil if none found.
func (m *Answer) ValidateAll() error {
	return m.validate(true)
}

func (m *Answer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Format.(type) {
	case *Answer_SelectedIndex:
		if v == nil {
			err := AnswerValidationError{
				field:  "Format",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for SelectedIndex
	case *Answer_FilledText:
		if v == nil {
			err := AnswerValidationError{
				field:  "Format",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for FilledText
	case *Answer_SubmittedKey:
		if v == nil {
			err := AnswerValidationError{
				field:  "Format",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for SubmittedKey
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return AnswerMultiError(errors)
	}

	return nil
}

// AnswerMultiError is an error wrapping multiple validation errors returned by
// Answer.ValidateAll() if the designated constraints aren't met.
type AnswerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnswerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnswerMultiError) AllErrors() []error { return m }

// AnswerValidationError is the validation error returned by Answer.Validate if
// the designated constraints aren't met.
type AnswerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnswerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnswerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnswerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnswerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnswerValidationError) ErrorName() string { return "AnswerValidationError" }

// Error satisfies the builtin error interface
func (e AnswerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnswer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnswerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnswerValidationError{}

// Validate checks the field values on CheckQuizCorrectnessRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckQuizCorrectnessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckQuizCorrectnessRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckQuizCorrectnessRequestMultiError, or nil if none found.
func (m *CheckQuizCorrectnessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckQuizCorrectnessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShuffledQuizSetId

	// no validation rules for QuizId

	for idx, item := range m.GetAnswer() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CheckQuizCorrectnessRequestValidationError{
						field:  fmt.Sprintf("Answer[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CheckQuizCorrectnessRequestValidationError{
						field:  fmt.Sprintf("Answer[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CheckQuizCorrectnessRequestValidationError{
					field:  fmt.Sprintf("Answer[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for LmType

	if len(errors) > 0 {
		return CheckQuizCorrectnessRequestMultiError(errors)
	}

	return nil
}

// CheckQuizCorrectnessRequestMultiError is an error wrapping multiple
// validation errors returned by CheckQuizCorrectnessRequest.ValidateAll() if
// the designated constraints aren't met.
type CheckQuizCorrectnessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckQuizCorrectnessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckQuizCorrectnessRequestMultiError) AllErrors() []error { return m }

// CheckQuizCorrectnessRequestValidationError is the validation error returned
// by CheckQuizCorrectnessRequest.Validate if the designated constraints
// aren't met.
type CheckQuizCorrectnessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckQuizCorrectnessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckQuizCorrectnessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckQuizCorrectnessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckQuizCorrectnessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckQuizCorrectnessRequestValidationError) ErrorName() string {
	return "CheckQuizCorrectnessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckQuizCorrectnessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckQuizCorrectnessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckQuizCorrectnessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckQuizCorrectnessRequestValidationError{}

// Validate checks the field values on CheckQuizCorrectnessResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckQuizCorrectnessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckQuizCorrectnessResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckQuizCorrectnessResponseMultiError, or nil if none found.
func (m *CheckQuizCorrectnessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckQuizCorrectnessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsCorrectAll

	switch v := m.Result.(type) {
	case *CheckQuizCorrectnessResponse_OrderingResult:
		if v == nil {
			err := CheckQuizCorrectnessResponseValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOrderingResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CheckQuizCorrectnessResponseValidationError{
						field:  "OrderingResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CheckQuizCorrectnessResponseValidationError{
						field:  "OrderingResult",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOrderingResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CheckQuizCorrectnessResponseValidationError{
					field:  "OrderingResult",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return CheckQuizCorrectnessResponseMultiError(errors)
	}

	return nil
}

// CheckQuizCorrectnessResponseMultiError is an error wrapping multiple
// validation errors returned by CheckQuizCorrectnessResponse.ValidateAll() if
// the designated constraints aren't met.
type CheckQuizCorrectnessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckQuizCorrectnessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckQuizCorrectnessResponseMultiError) AllErrors() []error { return m }

// CheckQuizCorrectnessResponseValidationError is the validation error returned
// by CheckQuizCorrectnessResponse.Validate if the designated constraints
// aren't met.
type CheckQuizCorrectnessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckQuizCorrectnessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckQuizCorrectnessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckQuizCorrectnessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckQuizCorrectnessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckQuizCorrectnessResponseValidationError) ErrorName() string {
	return "CheckQuizCorrectnessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckQuizCorrectnessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckQuizCorrectnessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckQuizCorrectnessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckQuizCorrectnessResponseValidationError{}

// Validate checks the field values on RetrieveQuizTestV2ResponseItem with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RetrieveQuizTestV2ResponseItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetrieveQuizTestV2ResponseItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RetrieveQuizTestV2ResponseItemMultiError, or nil if none found.
func (m *RetrieveQuizTestV2ResponseItem) ValidateAll() error {
	return m.validate(true)
}

func (m *RetrieveQuizTestV2ResponseItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStudyPlanItemIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RetrieveQuizTestV2ResponseItemValidationError{
					field:  "StudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RetrieveQuizTestV2ResponseItemValidationError{
					field:  "StudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStudyPlanItemIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetrieveQuizTestV2ResponseItemValidationError{
				field:  "StudyPlanItemIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetQuizTest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RetrieveQuizTestV2ResponseItemValidationError{
					field:  "QuizTest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RetrieveQuizTestV2ResponseItemValidationError{
					field:  "QuizTest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuizTest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetrieveQuizTestV2ResponseItemValidationError{
				field:  "QuizTest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RetrieveQuizTestV2ResponseItemMultiError(errors)
	}

	return nil
}

// RetrieveQuizTestV2ResponseItemMultiError is an error wrapping multiple
// validation errors returned by RetrieveQuizTestV2ResponseItem.ValidateAll()
// if the designated constraints aren't met.
type RetrieveQuizTestV2ResponseItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetrieveQuizTestV2ResponseItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetrieveQuizTestV2ResponseItemMultiError) AllErrors() []error { return m }

// RetrieveQuizTestV2ResponseItemValidationError is the validation error
// returned by RetrieveQuizTestV2ResponseItem.Validate if the designated
// constraints aren't met.
type RetrieveQuizTestV2ResponseItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveQuizTestV2ResponseItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveQuizTestV2ResponseItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveQuizTestV2ResponseItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveQuizTestV2ResponseItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveQuizTestV2ResponseItemValidationError) ErrorName() string {
	return "RetrieveQuizTestV2ResponseItemValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveQuizTestV2ResponseItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveQuizTestV2ResponseItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveQuizTestV2ResponseItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveQuizTestV2ResponseItemValidationError{}
