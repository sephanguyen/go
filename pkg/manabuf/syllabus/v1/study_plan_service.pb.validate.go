// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: syllabus/v1/study_plan_service.proto

package sspb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UpsertMasterInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertMasterInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertMasterInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertMasterInfoRequestMultiError, or nil if none found.
func (m *UpsertMasterInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertMasterInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMasterItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpsertMasterInfoRequestValidationError{
						field:  fmt.Sprintf("MasterItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpsertMasterInfoRequestValidationError{
						field:  fmt.Sprintf("MasterItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertMasterInfoRequestValidationError{
					field:  fmt.Sprintf("MasterItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpsertMasterInfoRequestMultiError(errors)
	}

	return nil
}

// UpsertMasterInfoRequestMultiError is an error wrapping multiple validation
// errors returned by UpsertMasterInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type UpsertMasterInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertMasterInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertMasterInfoRequestMultiError) AllErrors() []error { return m }

// UpsertMasterInfoRequestValidationError is the validation error returned by
// UpsertMasterInfoRequest.Validate if the designated constraints aren't met.
type UpsertMasterInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertMasterInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertMasterInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertMasterInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertMasterInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertMasterInfoRequestValidationError) ErrorName() string {
	return "UpsertMasterInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertMasterInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertMasterInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertMasterInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertMasterInfoRequestValidationError{}

// Validate checks the field values on UpsertMasterInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertMasterInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertMasterInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertMasterInfoResponseMultiError, or nil if none found.
func (m *UpsertMasterInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertMasterInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpsertMasterInfoResponseMultiError(errors)
	}

	return nil
}

// UpsertMasterInfoResponseMultiError is an error wrapping multiple validation
// errors returned by UpsertMasterInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type UpsertMasterInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertMasterInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertMasterInfoResponseMultiError) AllErrors() []error { return m }

// UpsertMasterInfoResponseValidationError is the validation error returned by
// UpsertMasterInfoResponse.Validate if the designated constraints aren't met.
type UpsertMasterInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertMasterInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertMasterInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertMasterInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertMasterInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertMasterInfoResponseValidationError) ErrorName() string {
	return "UpsertMasterInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertMasterInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertMasterInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertMasterInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertMasterInfoResponseValidationError{}

// Validate checks the field values on UpsertIndividualInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertIndividualInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertIndividualInfoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertIndividualInfoRequestMultiError, or nil if none found.
func (m *UpsertIndividualInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertIndividualInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetIndividualItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpsertIndividualInfoRequestValidationError{
						field:  fmt.Sprintf("IndividualItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpsertIndividualInfoRequestValidationError{
						field:  fmt.Sprintf("IndividualItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertIndividualInfoRequestValidationError{
					field:  fmt.Sprintf("IndividualItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpsertIndividualInfoRequestMultiError(errors)
	}

	return nil
}

// UpsertIndividualInfoRequestMultiError is an error wrapping multiple
// validation errors returned by UpsertIndividualInfoRequest.ValidateAll() if
// the designated constraints aren't met.
type UpsertIndividualInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertIndividualInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertIndividualInfoRequestMultiError) AllErrors() []error { return m }

// UpsertIndividualInfoRequestValidationError is the validation error returned
// by UpsertIndividualInfoRequest.Validate if the designated constraints
// aren't met.
type UpsertIndividualInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertIndividualInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertIndividualInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertIndividualInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertIndividualInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertIndividualInfoRequestValidationError) ErrorName() string {
	return "UpsertIndividualInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertIndividualInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertIndividualInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertIndividualInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertIndividualInfoRequestValidationError{}

// Validate checks the field values on UpsertIndividualInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertIndividualInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertIndividualInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertIndividualInfoResponseMultiError, or nil if none found.
func (m *UpsertIndividualInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertIndividualInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpsertIndividualInfoResponseMultiError(errors)
	}

	return nil
}

// UpsertIndividualInfoResponseMultiError is an error wrapping multiple
// validation errors returned by UpsertIndividualInfoResponse.ValidateAll() if
// the designated constraints aren't met.
type UpsertIndividualInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertIndividualInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertIndividualInfoResponseMultiError) AllErrors() []error { return m }

// UpsertIndividualInfoResponseValidationError is the validation error returned
// by UpsertIndividualInfoResponse.Validate if the designated constraints
// aren't met.
type UpsertIndividualInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertIndividualInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertIndividualInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertIndividualInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertIndividualInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertIndividualInfoResponseValidationError) ErrorName() string {
	return "UpsertIndividualInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertIndividualInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertIndividualInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertIndividualInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertIndividualInfoResponseValidationError{}

// Validate checks the field values on UpsertAllocateMarkerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertAllocateMarkerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertAllocateMarkerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertAllocateMarkerRequestMultiError, or nil if none found.
func (m *UpsertAllocateMarkerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertAllocateMarkerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSubmissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpsertAllocateMarkerRequestValidationError{
						field:  fmt.Sprintf("Submissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpsertAllocateMarkerRequestValidationError{
						field:  fmt.Sprintf("Submissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertAllocateMarkerRequestValidationError{
					field:  fmt.Sprintf("Submissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAllocateMarkers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpsertAllocateMarkerRequestValidationError{
						field:  fmt.Sprintf("AllocateMarkers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpsertAllocateMarkerRequestValidationError{
						field:  fmt.Sprintf("AllocateMarkers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertAllocateMarkerRequestValidationError{
					field:  fmt.Sprintf("AllocateMarkers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CreatedBy

	if len(errors) > 0 {
		return UpsertAllocateMarkerRequestMultiError(errors)
	}

	return nil
}

// UpsertAllocateMarkerRequestMultiError is an error wrapping multiple
// validation errors returned by UpsertAllocateMarkerRequest.ValidateAll() if
// the designated constraints aren't met.
type UpsertAllocateMarkerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertAllocateMarkerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertAllocateMarkerRequestMultiError) AllErrors() []error { return m }

// UpsertAllocateMarkerRequestValidationError is the validation error returned
// by UpsertAllocateMarkerRequest.Validate if the designated constraints
// aren't met.
type UpsertAllocateMarkerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertAllocateMarkerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertAllocateMarkerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertAllocateMarkerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertAllocateMarkerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertAllocateMarkerRequestValidationError) ErrorName() string {
	return "UpsertAllocateMarkerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertAllocateMarkerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertAllocateMarkerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertAllocateMarkerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertAllocateMarkerRequestValidationError{}

// Validate checks the field values on UpsertAllocateMarkerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertAllocateMarkerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertAllocateMarkerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertAllocateMarkerResponseMultiError, or nil if none found.
func (m *UpsertAllocateMarkerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertAllocateMarkerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpsertAllocateMarkerResponseMultiError(errors)
	}

	return nil
}

// UpsertAllocateMarkerResponseMultiError is an error wrapping multiple
// validation errors returned by UpsertAllocateMarkerResponse.ValidateAll() if
// the designated constraints aren't met.
type UpsertAllocateMarkerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertAllocateMarkerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertAllocateMarkerResponseMultiError) AllErrors() []error { return m }

// UpsertAllocateMarkerResponseValidationError is the validation error returned
// by UpsertAllocateMarkerResponse.Validate if the designated constraints
// aren't met.
type UpsertAllocateMarkerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertAllocateMarkerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertAllocateMarkerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertAllocateMarkerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertAllocateMarkerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertAllocateMarkerResponseValidationError) ErrorName() string {
	return "UpsertAllocateMarkerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertAllocateMarkerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertAllocateMarkerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertAllocateMarkerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertAllocateMarkerResponseValidationError{}

// Validate checks the field values on UpdateStudentLearningItemTimeRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateStudentLearningItemTimeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStudentLearningItemTimeRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateStudentLearningItemTimeRequestMultiError, or nil if none found.
func (m *UpdateStudentLearningItemTimeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStudentLearningItemTimeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMasterItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateStudentLearningItemTimeRequestValidationError{
						field:  fmt.Sprintf("MasterItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateStudentLearningItemTimeRequestValidationError{
						field:  fmt.Sprintf("MasterItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateStudentLearningItemTimeRequestValidationError{
					field:  fmt.Sprintf("MasterItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for StudentId

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateStudentLearningItemTimeRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateStudentLearningItemTimeRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStudentLearningItemTimeRequestValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateStudentLearningItemTimeRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateStudentLearningItemTimeRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStudentLearningItemTimeRequestValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateStudentLearningItemTimeRequestMultiError(errors)
	}

	return nil
}

// UpdateStudentLearningItemTimeRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateStudentLearningItemTimeRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateStudentLearningItemTimeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStudentLearningItemTimeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStudentLearningItemTimeRequestMultiError) AllErrors() []error { return m }

// UpdateStudentLearningItemTimeRequestValidationError is the validation error
// returned by UpdateStudentLearningItemTimeRequest.Validate if the designated
// constraints aren't met.
type UpdateStudentLearningItemTimeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStudentLearningItemTimeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStudentLearningItemTimeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStudentLearningItemTimeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStudentLearningItemTimeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStudentLearningItemTimeRequestValidationError) ErrorName() string {
	return "UpdateStudentLearningItemTimeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStudentLearningItemTimeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStudentLearningItemTimeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStudentLearningItemTimeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStudentLearningItemTimeRequestValidationError{}

// Validate checks the field values on UpdateStudentLearningItemTimeResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateStudentLearningItemTimeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStudentLearningItemTimeResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateStudentLearningItemTimeResponseMultiError, or nil if none found.
func (m *UpdateStudentLearningItemTimeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStudentLearningItemTimeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateStudentLearningItemTimeResponseMultiError(errors)
	}

	return nil
}

// UpdateStudentLearningItemTimeResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateStudentLearningItemTimeResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateStudentLearningItemTimeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStudentLearningItemTimeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStudentLearningItemTimeResponseMultiError) AllErrors() []error { return m }

// UpdateStudentLearningItemTimeResponseValidationError is the validation error
// returned by UpdateStudentLearningItemTimeResponse.Validate if the
// designated constraints aren't met.
type UpdateStudentLearningItemTimeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStudentLearningItemTimeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStudentLearningItemTimeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStudentLearningItemTimeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStudentLearningItemTimeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStudentLearningItemTimeResponseValidationError) ErrorName() string {
	return "UpdateStudentLearningItemTimeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStudentLearningItemTimeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStudentLearningItemTimeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStudentLearningItemTimeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStudentLearningItemTimeResponseValidationError{}

// Validate checks the field values on DeleteRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteRequestMultiError, or
// nil if none found.
func (m *DeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StudyPlanId

	if len(errors) > 0 {
		return DeleteRequestMultiError(errors)
	}

	return nil
}

// DeleteRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRequestMultiError) AllErrors() []error { return m }

// DeleteRequestValidationError is the validation error returned by
// DeleteRequest.Validate if the designated constraints aren't met.
type DeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRequestValidationError) ErrorName() string { return "DeleteRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRequestValidationError{}

// Validate checks the field values on DeleteResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteResponseMultiError,
// or nil if none found.
func (m *DeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteResponseMultiError(errors)
	}

	return nil
}

// DeleteResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteResponseMultiError) AllErrors() []error { return m }

// DeleteResponseValidationError is the validation error returned by
// DeleteResponse.Validate if the designated constraints aren't met.
type DeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteResponseValidationError) ErrorName() string { return "DeleteResponseValidationError" }

// Error satisfies the builtin error interface
func (e DeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteResponseValidationError{}

// Validate checks the field values on BulkUpdateStudyPlanItemSchoolDateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *BulkUpdateStudyPlanItemSchoolDateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// BulkUpdateStudyPlanItemSchoolDateRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// BulkUpdateStudyPlanItemSchoolDateRequestMultiError, or nil if none found.
func (m *BulkUpdateStudyPlanItemSchoolDateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BulkUpdateStudyPlanItemSchoolDateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStudyPlanItemIdentities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BulkUpdateStudyPlanItemSchoolDateRequestValidationError{
						field:  fmt.Sprintf("StudyPlanItemIdentities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BulkUpdateStudyPlanItemSchoolDateRequestValidationError{
						field:  fmt.Sprintf("StudyPlanItemIdentities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BulkUpdateStudyPlanItemSchoolDateRequestValidationError{
					field:  fmt.Sprintf("StudyPlanItemIdentities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetSchoolDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BulkUpdateStudyPlanItemSchoolDateRequestValidationError{
					field:  "SchoolDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BulkUpdateStudyPlanItemSchoolDateRequestValidationError{
					field:  "SchoolDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchoolDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BulkUpdateStudyPlanItemSchoolDateRequestValidationError{
				field:  "SchoolDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BulkUpdateStudyPlanItemSchoolDateRequestMultiError(errors)
	}

	return nil
}

// BulkUpdateStudyPlanItemSchoolDateRequestMultiError is an error wrapping
// multiple validation errors returned by
// BulkUpdateStudyPlanItemSchoolDateRequest.ValidateAll() if the designated
// constraints aren't met.
type BulkUpdateStudyPlanItemSchoolDateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BulkUpdateStudyPlanItemSchoolDateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BulkUpdateStudyPlanItemSchoolDateRequestMultiError) AllErrors() []error { return m }

// BulkUpdateStudyPlanItemSchoolDateRequestValidationError is the validation
// error returned by BulkUpdateStudyPlanItemSchoolDateRequest.Validate if the
// designated constraints aren't met.
type BulkUpdateStudyPlanItemSchoolDateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkUpdateStudyPlanItemSchoolDateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkUpdateStudyPlanItemSchoolDateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkUpdateStudyPlanItemSchoolDateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkUpdateStudyPlanItemSchoolDateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkUpdateStudyPlanItemSchoolDateRequestValidationError) ErrorName() string {
	return "BulkUpdateStudyPlanItemSchoolDateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BulkUpdateStudyPlanItemSchoolDateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkUpdateStudyPlanItemSchoolDateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkUpdateStudyPlanItemSchoolDateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkUpdateStudyPlanItemSchoolDateRequestValidationError{}

// Validate checks the field values on
// BulkUpdateStudyPlanItemSchoolDateResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BulkUpdateStudyPlanItemSchoolDateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// BulkUpdateStudyPlanItemSchoolDateResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// BulkUpdateStudyPlanItemSchoolDateResponseMultiError, or nil if none found.
func (m *BulkUpdateStudyPlanItemSchoolDateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BulkUpdateStudyPlanItemSchoolDateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BulkUpdateStudyPlanItemSchoolDateResponseMultiError(errors)
	}

	return nil
}

// BulkUpdateStudyPlanItemSchoolDateResponseMultiError is an error wrapping
// multiple validation errors returned by
// BulkUpdateStudyPlanItemSchoolDateResponse.ValidateAll() if the designated
// constraints aren't met.
type BulkUpdateStudyPlanItemSchoolDateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BulkUpdateStudyPlanItemSchoolDateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BulkUpdateStudyPlanItemSchoolDateResponseMultiError) AllErrors() []error { return m }

// BulkUpdateStudyPlanItemSchoolDateResponseValidationError is the validation
// error returned by BulkUpdateStudyPlanItemSchoolDateResponse.Validate if the
// designated constraints aren't met.
type BulkUpdateStudyPlanItemSchoolDateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkUpdateStudyPlanItemSchoolDateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkUpdateStudyPlanItemSchoolDateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkUpdateStudyPlanItemSchoolDateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkUpdateStudyPlanItemSchoolDateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkUpdateStudyPlanItemSchoolDateResponseValidationError) ErrorName() string {
	return "BulkUpdateStudyPlanItemSchoolDateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BulkUpdateStudyPlanItemSchoolDateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkUpdateStudyPlanItemSchoolDateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkUpdateStudyPlanItemSchoolDateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkUpdateStudyPlanItemSchoolDateResponseValidationError{}

// Validate checks the field values on BulkUpdateStudyPlanItemStatusRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *BulkUpdateStudyPlanItemStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BulkUpdateStudyPlanItemStatusRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BulkUpdateStudyPlanItemStatusRequestMultiError, or nil if none found.
func (m *BulkUpdateStudyPlanItemStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BulkUpdateStudyPlanItemStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStudyPlanItemIdentities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BulkUpdateStudyPlanItemStatusRequestValidationError{
						field:  fmt.Sprintf("StudyPlanItemIdentities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BulkUpdateStudyPlanItemStatusRequestValidationError{
						field:  fmt.Sprintf("StudyPlanItemIdentities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BulkUpdateStudyPlanItemStatusRequestValidationError{
					field:  fmt.Sprintf("StudyPlanItemIdentities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for StudyPlanItemStatus

	if len(errors) > 0 {
		return BulkUpdateStudyPlanItemStatusRequestMultiError(errors)
	}

	return nil
}

// BulkUpdateStudyPlanItemStatusRequestMultiError is an error wrapping multiple
// validation errors returned by
// BulkUpdateStudyPlanItemStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type BulkUpdateStudyPlanItemStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BulkUpdateStudyPlanItemStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BulkUpdateStudyPlanItemStatusRequestMultiError) AllErrors() []error { return m }

// BulkUpdateStudyPlanItemStatusRequestValidationError is the validation error
// returned by BulkUpdateStudyPlanItemStatusRequest.Validate if the designated
// constraints aren't met.
type BulkUpdateStudyPlanItemStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkUpdateStudyPlanItemStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkUpdateStudyPlanItemStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkUpdateStudyPlanItemStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkUpdateStudyPlanItemStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkUpdateStudyPlanItemStatusRequestValidationError) ErrorName() string {
	return "BulkUpdateStudyPlanItemStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BulkUpdateStudyPlanItemStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkUpdateStudyPlanItemStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkUpdateStudyPlanItemStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkUpdateStudyPlanItemStatusRequestValidationError{}

// Validate checks the field values on BulkUpdateStudyPlanItemStatusResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *BulkUpdateStudyPlanItemStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BulkUpdateStudyPlanItemStatusResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// BulkUpdateStudyPlanItemStatusResponseMultiError, or nil if none found.
func (m *BulkUpdateStudyPlanItemStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BulkUpdateStudyPlanItemStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return BulkUpdateStudyPlanItemStatusResponseMultiError(errors)
	}

	return nil
}

// BulkUpdateStudyPlanItemStatusResponseMultiError is an error wrapping
// multiple validation errors returned by
// BulkUpdateStudyPlanItemStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type BulkUpdateStudyPlanItemStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BulkUpdateStudyPlanItemStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BulkUpdateStudyPlanItemStatusResponseMultiError) AllErrors() []error { return m }

// BulkUpdateStudyPlanItemStatusResponseValidationError is the validation error
// returned by BulkUpdateStudyPlanItemStatusResponse.Validate if the
// designated constraints aren't met.
type BulkUpdateStudyPlanItemStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkUpdateStudyPlanItemStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkUpdateStudyPlanItemStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkUpdateStudyPlanItemStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkUpdateStudyPlanItemStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkUpdateStudyPlanItemStatusResponseValidationError) ErrorName() string {
	return "BulkUpdateStudyPlanItemStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BulkUpdateStudyPlanItemStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkUpdateStudyPlanItemStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkUpdateStudyPlanItemStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkUpdateStudyPlanItemStatusResponseValidationError{}

// Validate checks the field values on InsertStudyPlanRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InsertStudyPlanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InsertStudyPlanRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InsertStudyPlanRequestMultiError, or nil if none found.
func (m *InsertStudyPlanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InsertStudyPlanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StudyPlanId

	// no validation rules for SchoolId

	// no validation rules for Name

	// no validation rules for CourseId

	// no validation rules for BookId

	// no validation rules for Status

	// no validation rules for TrackSchoolProgress

	if len(errors) > 0 {
		return InsertStudyPlanRequestMultiError(errors)
	}

	return nil
}

// InsertStudyPlanRequestMultiError is an error wrapping multiple validation
// errors returned by InsertStudyPlanRequest.ValidateAll() if the designated
// constraints aren't met.
type InsertStudyPlanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InsertStudyPlanRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InsertStudyPlanRequestMultiError) AllErrors() []error { return m }

// InsertStudyPlanRequestValidationError is the validation error returned by
// InsertStudyPlanRequest.Validate if the designated constraints aren't met.
type InsertStudyPlanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InsertStudyPlanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InsertStudyPlanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InsertStudyPlanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InsertStudyPlanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InsertStudyPlanRequestValidationError) ErrorName() string {
	return "InsertStudyPlanRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InsertStudyPlanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInsertStudyPlanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InsertStudyPlanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InsertStudyPlanRequestValidationError{}

// Validate checks the field values on InsertStudyPlanResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InsertStudyPlanResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InsertStudyPlanResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InsertStudyPlanResponseMultiError, or nil if none found.
func (m *InsertStudyPlanResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InsertStudyPlanResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StudyPlanId

	if len(errors) > 0 {
		return InsertStudyPlanResponseMultiError(errors)
	}

	return nil
}

// InsertStudyPlanResponseMultiError is an error wrapping multiple validation
// errors returned by InsertStudyPlanResponse.ValidateAll() if the designated
// constraints aren't met.
type InsertStudyPlanResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InsertStudyPlanResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InsertStudyPlanResponseMultiError) AllErrors() []error { return m }

// InsertStudyPlanResponseValidationError is the validation error returned by
// InsertStudyPlanResponse.Validate if the designated constraints aren't met.
type InsertStudyPlanResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InsertStudyPlanResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InsertStudyPlanResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InsertStudyPlanResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InsertStudyPlanResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InsertStudyPlanResponseValidationError) ErrorName() string {
	return "InsertStudyPlanResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InsertStudyPlanResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInsertStudyPlanResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InsertStudyPlanResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InsertStudyPlanResponseValidationError{}

// Validate checks the field values on UpdateStudyPlanRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStudyPlanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStudyPlanRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStudyPlanRequestMultiError, or nil if none found.
func (m *UpdateStudyPlanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStudyPlanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StudyPlanId

	// no validation rules for SchoolId

	// no validation rules for Name

	// no validation rules for Status

	// no validation rules for TrackSchoolProgress

	if len(errors) > 0 {
		return UpdateStudyPlanRequestMultiError(errors)
	}

	return nil
}

// UpdateStudyPlanRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateStudyPlanRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateStudyPlanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStudyPlanRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStudyPlanRequestMultiError) AllErrors() []error { return m }

// UpdateStudyPlanRequestValidationError is the validation error returned by
// UpdateStudyPlanRequest.Validate if the designated constraints aren't met.
type UpdateStudyPlanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStudyPlanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStudyPlanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStudyPlanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStudyPlanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStudyPlanRequestValidationError) ErrorName() string {
	return "UpdateStudyPlanRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStudyPlanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStudyPlanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStudyPlanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStudyPlanRequestValidationError{}

// Validate checks the field values on UpdateStudyPlanResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateStudyPlanResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStudyPlanResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStudyPlanResponseMultiError, or nil if none found.
func (m *UpdateStudyPlanResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStudyPlanResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateStudyPlanResponseMultiError(errors)
	}

	return nil
}

// UpdateStudyPlanResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateStudyPlanResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateStudyPlanResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStudyPlanResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStudyPlanResponseMultiError) AllErrors() []error { return m }

// UpdateStudyPlanResponseValidationError is the validation error returned by
// UpdateStudyPlanResponse.Validate if the designated constraints aren't met.
type UpdateStudyPlanResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStudyPlanResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStudyPlanResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStudyPlanResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStudyPlanResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStudyPlanResponseValidationError) ErrorName() string {
	return "UpdateStudyPlanResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStudyPlanResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStudyPlanResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStudyPlanResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStudyPlanResponseValidationError{}

// Validate checks the field values on UpdateStudyPlanItemsStartEndDateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateStudyPlanItemsStartEndDateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateStudyPlanItemsStartEndDateRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// UpdateStudyPlanItemsStartEndDateRequestMultiError, or nil if none found.
func (m *UpdateStudyPlanItemsStartEndDateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStudyPlanItemsStartEndDateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStudyPlanItemIdentities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateStudyPlanItemsStartEndDateRequestValidationError{
						field:  fmt.Sprintf("StudyPlanItemIdentities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateStudyPlanItemsStartEndDateRequestValidationError{
						field:  fmt.Sprintf("StudyPlanItemIdentities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateStudyPlanItemsStartEndDateRequestValidationError{
					field:  fmt.Sprintf("StudyPlanItemIdentities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Fields

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateStudyPlanItemsStartEndDateRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateStudyPlanItemsStartEndDateRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStudyPlanItemsStartEndDateRequestValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateStudyPlanItemsStartEndDateRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateStudyPlanItemsStartEndDateRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateStudyPlanItemsStartEndDateRequestValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateStudyPlanItemsStartEndDateRequestMultiError(errors)
	}

	return nil
}

// UpdateStudyPlanItemsStartEndDateRequestMultiError is an error wrapping
// multiple validation errors returned by
// UpdateStudyPlanItemsStartEndDateRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateStudyPlanItemsStartEndDateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStudyPlanItemsStartEndDateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStudyPlanItemsStartEndDateRequestMultiError) AllErrors() []error { return m }

// UpdateStudyPlanItemsStartEndDateRequestValidationError is the validation
// error returned by UpdateStudyPlanItemsStartEndDateRequest.Validate if the
// designated constraints aren't met.
type UpdateStudyPlanItemsStartEndDateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStudyPlanItemsStartEndDateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStudyPlanItemsStartEndDateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStudyPlanItemsStartEndDateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStudyPlanItemsStartEndDateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStudyPlanItemsStartEndDateRequestValidationError) ErrorName() string {
	return "UpdateStudyPlanItemsStartEndDateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStudyPlanItemsStartEndDateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStudyPlanItemsStartEndDateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStudyPlanItemsStartEndDateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStudyPlanItemsStartEndDateRequestValidationError{}

// Validate checks the field values on UpdateStudyPlanItemsStartEndDateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateStudyPlanItemsStartEndDateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateStudyPlanItemsStartEndDateResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpdateStudyPlanItemsStartEndDateResponseMultiError, or nil if none found.
func (m *UpdateStudyPlanItemsStartEndDateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStudyPlanItemsStartEndDateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateStudyPlanItemsStartEndDateResponseMultiError(errors)
	}

	return nil
}

// UpdateStudyPlanItemsStartEndDateResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateStudyPlanItemsStartEndDateResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateStudyPlanItemsStartEndDateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStudyPlanItemsStartEndDateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStudyPlanItemsStartEndDateResponseMultiError) AllErrors() []error { return m }

// UpdateStudyPlanItemsStartEndDateResponseValidationError is the validation
// error returned by UpdateStudyPlanItemsStartEndDateResponse.Validate if the
// designated constraints aren't met.
type UpdateStudyPlanItemsStartEndDateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStudyPlanItemsStartEndDateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStudyPlanItemsStartEndDateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStudyPlanItemsStartEndDateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStudyPlanItemsStartEndDateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStudyPlanItemsStartEndDateResponseValidationError) ErrorName() string {
	return "UpdateStudyPlanItemsStartEndDateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStudyPlanItemsStartEndDateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStudyPlanItemsStartEndDateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStudyPlanItemsStartEndDateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStudyPlanItemsStartEndDateResponseValidationError{}

// Validate checks the field values on UpsertSchoolDateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertSchoolDateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertSchoolDateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertSchoolDateRequestMultiError, or nil if none found.
func (m *UpsertSchoolDateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertSchoolDateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStudyPlanItemIdentities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpsertSchoolDateRequestValidationError{
						field:  fmt.Sprintf("StudyPlanItemIdentities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpsertSchoolDateRequestValidationError{
						field:  fmt.Sprintf("StudyPlanItemIdentities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertSchoolDateRequestValidationError{
					field:  fmt.Sprintf("StudyPlanItemIdentities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetSchoolDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertSchoolDateRequestValidationError{
					field:  "SchoolDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertSchoolDateRequestValidationError{
					field:  "SchoolDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchoolDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertSchoolDateRequestValidationError{
				field:  "SchoolDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpsertSchoolDateRequestMultiError(errors)
	}

	return nil
}

// UpsertSchoolDateRequestMultiError is an error wrapping multiple validation
// errors returned by UpsertSchoolDateRequest.ValidateAll() if the designated
// constraints aren't met.
type UpsertSchoolDateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertSchoolDateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertSchoolDateRequestMultiError) AllErrors() []error { return m }

// UpsertSchoolDateRequestValidationError is the validation error returned by
// UpsertSchoolDateRequest.Validate if the designated constraints aren't met.
type UpsertSchoolDateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertSchoolDateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertSchoolDateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertSchoolDateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertSchoolDateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertSchoolDateRequestValidationError) ErrorName() string {
	return "UpsertSchoolDateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertSchoolDateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertSchoolDateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertSchoolDateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertSchoolDateRequestValidationError{}

// Validate checks the field values on UpsertSchoolDateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertSchoolDateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertSchoolDateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertSchoolDateResponseMultiError, or nil if none found.
func (m *UpsertSchoolDateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertSchoolDateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpsertSchoolDateResponseMultiError(errors)
	}

	return nil
}

// UpsertSchoolDateResponseMultiError is an error wrapping multiple validation
// errors returned by UpsertSchoolDateResponse.ValidateAll() if the designated
// constraints aren't met.
type UpsertSchoolDateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertSchoolDateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertSchoolDateResponseMultiError) AllErrors() []error { return m }

// UpsertSchoolDateResponseValidationError is the validation error returned by
// UpsertSchoolDateResponse.Validate if the designated constraints aren't met.
type UpsertSchoolDateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertSchoolDateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertSchoolDateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertSchoolDateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertSchoolDateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertSchoolDateResponseValidationError) ErrorName() string {
	return "UpsertSchoolDateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertSchoolDateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertSchoolDateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertSchoolDateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertSchoolDateResponseValidationError{}

// Validate checks the field values on ListStudentStudyPlansRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStudentStudyPlansRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStudentStudyPlansRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListStudentStudyPlansRequestMultiError, or nil if none found.
func (m *ListStudentStudyPlansRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStudentStudyPlansRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaging()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListStudentStudyPlansRequestValidationError{
					field:  "Paging",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListStudentStudyPlansRequestValidationError{
					field:  "Paging",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListStudentStudyPlansRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CourseId

	// no validation rules for Search

	// no validation rules for Status

	if len(errors) > 0 {
		return ListStudentStudyPlansRequestMultiError(errors)
	}

	return nil
}

// ListStudentStudyPlansRequestMultiError is an error wrapping multiple
// validation errors returned by ListStudentStudyPlansRequest.ValidateAll() if
// the designated constraints aren't met.
type ListStudentStudyPlansRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStudentStudyPlansRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStudentStudyPlansRequestMultiError) AllErrors() []error { return m }

// ListStudentStudyPlansRequestValidationError is the validation error returned
// by ListStudentStudyPlansRequest.Validate if the designated constraints
// aren't met.
type ListStudentStudyPlansRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStudentStudyPlansRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStudentStudyPlansRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStudentStudyPlansRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStudentStudyPlansRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStudentStudyPlansRequestValidationError) ErrorName() string {
	return "ListStudentStudyPlansRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListStudentStudyPlansRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStudentStudyPlansRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStudentStudyPlansRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStudentStudyPlansRequestValidationError{}

// Validate checks the field values on ListStudentStudyPlansResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStudentStudyPlansResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStudentStudyPlansResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListStudentStudyPlansResponseMultiError, or nil if none found.
func (m *ListStudentStudyPlansResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStudentStudyPlansResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNextPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListStudentStudyPlansResponseValidationError{
					field:  "NextPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListStudentStudyPlansResponseValidationError{
					field:  "NextPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNextPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListStudentStudyPlansResponseValidationError{
				field:  "NextPage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetStudyPlans() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListStudentStudyPlansResponseValidationError{
						field:  fmt.Sprintf("StudyPlans[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListStudentStudyPlansResponseValidationError{
						field:  fmt.Sprintf("StudyPlans[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListStudentStudyPlansResponseValidationError{
					field:  fmt.Sprintf("StudyPlans[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListStudentStudyPlansResponseMultiError(errors)
	}

	return nil
}

// ListStudentStudyPlansResponseMultiError is an error wrapping multiple
// validation errors returned by ListStudentStudyPlansResponse.ValidateAll()
// if the designated constraints aren't met.
type ListStudentStudyPlansResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStudentStudyPlansResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStudentStudyPlansResponseMultiError) AllErrors() []error { return m }

// ListStudentStudyPlansResponseValidationError is the validation error
// returned by ListStudentStudyPlansResponse.Validate if the designated
// constraints aren't met.
type ListStudentStudyPlansResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStudentStudyPlansResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStudentStudyPlansResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStudentStudyPlansResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStudentStudyPlansResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStudentStudyPlansResponseValidationError) ErrorName() string {
	return "ListStudentStudyPlansResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListStudentStudyPlansResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStudentStudyPlansResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStudentStudyPlansResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStudentStudyPlansResponseValidationError{}

// Validate checks the field values on ListToDoItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListToDoItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListToDoItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListToDoItemRequestMultiError, or nil if none found.
func (m *ListToDoItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListToDoItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListToDoItemRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListToDoItemRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListToDoItemRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StudentId

	// no validation rules for Status

	if len(errors) > 0 {
		return ListToDoItemRequestMultiError(errors)
	}

	return nil
}

// ListToDoItemRequestMultiError is an error wrapping multiple validation
// errors returned by ListToDoItemRequest.ValidateAll() if the designated
// constraints aren't met.
type ListToDoItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListToDoItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListToDoItemRequestMultiError) AllErrors() []error { return m }

// ListToDoItemRequestValidationError is the validation error returned by
// ListToDoItemRequest.Validate if the designated constraints aren't met.
type ListToDoItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListToDoItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListToDoItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListToDoItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListToDoItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListToDoItemRequestValidationError) ErrorName() string {
	return "ListToDoItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListToDoItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListToDoItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListToDoItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListToDoItemRequestValidationError{}

// Validate checks the field values on ListToDoItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListToDoItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListToDoItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListToDoItemResponseMultiError, or nil if none found.
func (m *ListToDoItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListToDoItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNextPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListToDoItemResponseValidationError{
					field:  "NextPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListToDoItemResponseValidationError{
					field:  "NextPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNextPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListToDoItemResponseValidationError{
				field:  "NextPage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTodoItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListToDoItemResponseValidationError{
						field:  fmt.Sprintf("TodoItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListToDoItemResponseValidationError{
						field:  fmt.Sprintf("TodoItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListToDoItemResponseValidationError{
					field:  fmt.Sprintf("TodoItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListToDoItemResponseMultiError(errors)
	}

	return nil
}

// ListToDoItemResponseMultiError is an error wrapping multiple validation
// errors returned by ListToDoItemResponse.ValidateAll() if the designated
// constraints aren't met.
type ListToDoItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListToDoItemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListToDoItemResponseMultiError) AllErrors() []error { return m }

// ListToDoItemResponseValidationError is the validation error returned by
// ListToDoItemResponse.Validate if the designated constraints aren't met.
type ListToDoItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListToDoItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListToDoItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListToDoItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListToDoItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListToDoItemResponseValidationError) ErrorName() string {
	return "ListToDoItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListToDoItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListToDoItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListToDoItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListToDoItemResponseValidationError{}

// Validate checks the field values on ListStudentStudyPlanItemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListStudentStudyPlanItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStudentStudyPlanItemRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListStudentStudyPlanItemRequestMultiError, or nil if none found.
func (m *ListStudentStudyPlanItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStudentStudyPlanItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMasterStudyPlanItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListStudentStudyPlanItemRequestValidationError{
					field:  "MasterStudyPlanItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListStudentStudyPlanItemRequestValidationError{
					field:  "MasterStudyPlanItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMasterStudyPlanItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListStudentStudyPlanItemRequestValidationError{
				field:  "MasterStudyPlanItem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListStudentStudyPlanItemRequestMultiError(errors)
	}

	return nil
}

// ListStudentStudyPlanItemRequestMultiError is an error wrapping multiple
// validation errors returned by ListStudentStudyPlanItemRequest.ValidateAll()
// if the designated constraints aren't met.
type ListStudentStudyPlanItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStudentStudyPlanItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStudentStudyPlanItemRequestMultiError) AllErrors() []error { return m }

// ListStudentStudyPlanItemRequestValidationError is the validation error
// returned by ListStudentStudyPlanItemRequest.Validate if the designated
// constraints aren't met.
type ListStudentStudyPlanItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStudentStudyPlanItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStudentStudyPlanItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStudentStudyPlanItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStudentStudyPlanItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStudentStudyPlanItemRequestValidationError) ErrorName() string {
	return "ListStudentStudyPlanItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListStudentStudyPlanItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStudentStudyPlanItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStudentStudyPlanItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStudentStudyPlanItemRequestValidationError{}

// Validate checks the field values on ListStudentStudyPlanItemResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListStudentStudyPlanItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStudentStudyPlanItemResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListStudentStudyPlanItemResponseMultiError, or nil if none found.
func (m *ListStudentStudyPlanItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStudentStudyPlanItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetIndividualItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListStudentStudyPlanItemResponseValidationError{
						field:  fmt.Sprintf("IndividualItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListStudentStudyPlanItemResponseValidationError{
						field:  fmt.Sprintf("IndividualItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListStudentStudyPlanItemResponseValidationError{
					field:  fmt.Sprintf("IndividualItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListStudentStudyPlanItemResponseMultiError(errors)
	}

	return nil
}

// ListStudentStudyPlanItemResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListStudentStudyPlanItemResponse.ValidateAll() if the designated
// constraints aren't met.
type ListStudentStudyPlanItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStudentStudyPlanItemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStudentStudyPlanItemResponseMultiError) AllErrors() []error { return m }

// ListStudentStudyPlanItemResponseValidationError is the validation error
// returned by ListStudentStudyPlanItemResponse.Validate if the designated
// constraints aren't met.
type ListStudentStudyPlanItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStudentStudyPlanItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStudentStudyPlanItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStudentStudyPlanItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStudentStudyPlanItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStudentStudyPlanItemResponseValidationError) ErrorName() string {
	return "ListStudentStudyPlanItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListStudentStudyPlanItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStudentStudyPlanItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStudentStudyPlanItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStudentStudyPlanItemResponseValidationError{}

// Validate checks the field values on ListByCourseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListByCourseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListByCourseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListByCourseRequestMultiError, or nil if none found.
func (m *ListByCourseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListByCourseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaging()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListByCourseRequestValidationError{
					field:  "Paging",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListByCourseRequestValidationError{
					field:  "Paging",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListByCourseRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CourseId

	if len(errors) > 0 {
		return ListByCourseRequestMultiError(errors)
	}

	return nil
}

// ListByCourseRequestMultiError is an error wrapping multiple validation
// errors returned by ListByCourseRequest.ValidateAll() if the designated
// constraints aren't met.
type ListByCourseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListByCourseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListByCourseRequestMultiError) AllErrors() []error { return m }

// ListByCourseRequestValidationError is the validation error returned by
// ListByCourseRequest.Validate if the designated constraints aren't met.
type ListByCourseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListByCourseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListByCourseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListByCourseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListByCourseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListByCourseRequestValidationError) ErrorName() string {
	return "ListByCourseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListByCourseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListByCourseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListByCourseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListByCourseRequestValidationError{}

// Validate checks the field values on ListByCourseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListByCourseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListByCourseResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListByCourseResponseMultiError, or nil if none found.
func (m *ListByCourseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListByCourseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNextPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListByCourseResponseValidationError{
					field:  "NextPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListByCourseResponseValidationError{
					field:  "NextPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNextPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListByCourseResponseValidationError{
				field:  "NextPage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetStudyPlans() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListByCourseResponseValidationError{
						field:  fmt.Sprintf("StudyPlans[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListByCourseResponseValidationError{
						field:  fmt.Sprintf("StudyPlans[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListByCourseResponseValidationError{
					field:  fmt.Sprintf("StudyPlans[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListByCourseResponseMultiError(errors)
	}

	return nil
}

// ListByCourseResponseMultiError is an error wrapping multiple validation
// errors returned by ListByCourseResponse.ValidateAll() if the designated
// constraints aren't met.
type ListByCourseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListByCourseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListByCourseResponseMultiError) AllErrors() []error { return m }

// ListByCourseResponseValidationError is the validation error returned by
// ListByCourseResponse.Validate if the designated constraints aren't met.
type ListByCourseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListByCourseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListByCourseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListByCourseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListByCourseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListByCourseResponseValidationError) ErrorName() string {
	return "ListByCourseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListByCourseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListByCourseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListByCourseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListByCourseResponseValidationError{}

// Validate checks the field values on StudyPlanItemImport with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StudyPlanItemImport) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StudyPlanItemImport with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StudyPlanItemImportMultiError, or nil if none found.
func (m *StudyPlanItemImport) ValidateAll() error {
	return m.validate(true)
}

func (m *StudyPlanItemImport) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StudyPlanId

	// no validation rules for LearningMaterialId

	if all {
		switch v := interface{}(m.GetAvailableFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudyPlanItemImportValidationError{
					field:  "AvailableFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudyPlanItemImportValidationError{
					field:  "AvailableFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAvailableFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudyPlanItemImportValidationError{
				field:  "AvailableFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAvailableTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudyPlanItemImportValidationError{
					field:  "AvailableTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudyPlanItemImportValidationError{
					field:  "AvailableTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAvailableTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudyPlanItemImportValidationError{
				field:  "AvailableTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudyPlanItemImportValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudyPlanItemImportValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudyPlanItemImportValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudyPlanItemImportValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudyPlanItemImportValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudyPlanItemImportValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StudyPlanItemImportMultiError(errors)
	}

	return nil
}

// StudyPlanItemImportMultiError is an error wrapping multiple validation
// errors returned by StudyPlanItemImport.ValidateAll() if the designated
// constraints aren't met.
type StudyPlanItemImportMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StudyPlanItemImportMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StudyPlanItemImportMultiError) AllErrors() []error { return m }

// StudyPlanItemImportValidationError is the validation error returned by
// StudyPlanItemImport.Validate if the designated constraints aren't met.
type StudyPlanItemImportValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StudyPlanItemImportValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StudyPlanItemImportValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StudyPlanItemImportValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StudyPlanItemImportValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StudyPlanItemImportValidationError) ErrorName() string {
	return "StudyPlanItemImportValidationError"
}

// Error satisfies the builtin error interface
func (e StudyPlanItemImportValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStudyPlanItemImport.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StudyPlanItemImportValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StudyPlanItemImportValidationError{}

// Validate checks the field values on ImportStudyPlanRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportStudyPlanRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportStudyPlanRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportStudyPlanRequestMultiError, or nil if none found.
func (m *ImportStudyPlanRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportStudyPlanRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStudyPlanItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportStudyPlanRequestValidationError{
						field:  fmt.Sprintf("StudyPlanItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportStudyPlanRequestValidationError{
						field:  fmt.Sprintf("StudyPlanItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportStudyPlanRequestValidationError{
					field:  fmt.Sprintf("StudyPlanItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ImportStudyPlanRequestMultiError(errors)
	}

	return nil
}

// ImportStudyPlanRequestMultiError is an error wrapping multiple validation
// errors returned by ImportStudyPlanRequest.ValidateAll() if the designated
// constraints aren't met.
type ImportStudyPlanRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportStudyPlanRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportStudyPlanRequestMultiError) AllErrors() []error { return m }

// ImportStudyPlanRequestValidationError is the validation error returned by
// ImportStudyPlanRequest.Validate if the designated constraints aren't met.
type ImportStudyPlanRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportStudyPlanRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportStudyPlanRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportStudyPlanRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportStudyPlanRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportStudyPlanRequestValidationError) ErrorName() string {
	return "ImportStudyPlanRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportStudyPlanRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportStudyPlanRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportStudyPlanRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportStudyPlanRequestValidationError{}

// Validate checks the field values on RowError with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RowError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RowError with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RowErrorMultiError, or nil
// if none found.
func (m *RowError) ValidateAll() error {
	return m.validate(true)
}

func (m *RowError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RowNumber

	// no validation rules for Err

	if len(errors) > 0 {
		return RowErrorMultiError(errors)
	}

	return nil
}

// RowErrorMultiError is an error wrapping multiple validation errors returned
// by RowError.ValidateAll() if the designated constraints aren't met.
type RowErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RowErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RowErrorMultiError) AllErrors() []error { return m }

// RowErrorValidationError is the validation error returned by
// RowError.Validate if the designated constraints aren't met.
type RowErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RowErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RowErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RowErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RowErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RowErrorValidationError) ErrorName() string { return "RowErrorValidationError" }

// Error satisfies the builtin error interface
func (e RowErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRowError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RowErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RowErrorValidationError{}

// Validate checks the field values on ImportStudyPlanResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportStudyPlanResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportStudyPlanResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportStudyPlanResponseMultiError, or nil if none found.
func (m *ImportStudyPlanResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportStudyPlanResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	for idx, item := range m.GetRowErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportStudyPlanResponseValidationError{
						field:  fmt.Sprintf("RowErrors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportStudyPlanResponseValidationError{
						field:  fmt.Sprintf("RowErrors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportStudyPlanResponseValidationError{
					field:  fmt.Sprintf("RowErrors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ImportStudyPlanResponseMultiError(errors)
	}

	return nil
}

// ImportStudyPlanResponseMultiError is an error wrapping multiple validation
// errors returned by ImportStudyPlanResponse.ValidateAll() if the designated
// constraints aren't met.
type ImportStudyPlanResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportStudyPlanResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportStudyPlanResponseMultiError) AllErrors() []error { return m }

// ImportStudyPlanResponseValidationError is the validation error returned by
// ImportStudyPlanResponse.Validate if the designated constraints aren't met.
type ImportStudyPlanResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportStudyPlanResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportStudyPlanResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportStudyPlanResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportStudyPlanResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportStudyPlanResponseValidationError) ErrorName() string {
	return "ImportStudyPlanResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ImportStudyPlanResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportStudyPlanResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportStudyPlanResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportStudyPlanResponseValidationError{}

// Validate checks the field values on RetrieveStudyPlanIdentityRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RetrieveStudyPlanIdentityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetrieveStudyPlanIdentityRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RetrieveStudyPlanIdentityRequestMultiError, or nil if none found.
func (m *RetrieveStudyPlanIdentityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RetrieveStudyPlanIdentityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RetrieveStudyPlanIdentityRequestMultiError(errors)
	}

	return nil
}

// RetrieveStudyPlanIdentityRequestMultiError is an error wrapping multiple
// validation errors returned by
// RetrieveStudyPlanIdentityRequest.ValidateAll() if the designated
// constraints aren't met.
type RetrieveStudyPlanIdentityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetrieveStudyPlanIdentityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetrieveStudyPlanIdentityRequestMultiError) AllErrors() []error { return m }

// RetrieveStudyPlanIdentityRequestValidationError is the validation error
// returned by RetrieveStudyPlanIdentityRequest.Validate if the designated
// constraints aren't met.
type RetrieveStudyPlanIdentityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveStudyPlanIdentityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveStudyPlanIdentityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveStudyPlanIdentityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveStudyPlanIdentityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveStudyPlanIdentityRequestValidationError) ErrorName() string {
	return "RetrieveStudyPlanIdentityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveStudyPlanIdentityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveStudyPlanIdentityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveStudyPlanIdentityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveStudyPlanIdentityRequestValidationError{}

// Validate checks the field values on RetrieveStudyPlanIdentityResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RetrieveStudyPlanIdentityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetrieveStudyPlanIdentityResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RetrieveStudyPlanIdentityResponseMultiError, or nil if none found.
func (m *RetrieveStudyPlanIdentityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RetrieveStudyPlanIdentityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStudyPlanIdentities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RetrieveStudyPlanIdentityResponseValidationError{
						field:  fmt.Sprintf("StudyPlanIdentities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RetrieveStudyPlanIdentityResponseValidationError{
						field:  fmt.Sprintf("StudyPlanIdentities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RetrieveStudyPlanIdentityResponseValidationError{
					field:  fmt.Sprintf("StudyPlanIdentities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RetrieveStudyPlanIdentityResponseMultiError(errors)
	}

	return nil
}

// RetrieveStudyPlanIdentityResponseMultiError is an error wrapping multiple
// validation errors returned by
// RetrieveStudyPlanIdentityResponse.ValidateAll() if the designated
// constraints aren't met.
type RetrieveStudyPlanIdentityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetrieveStudyPlanIdentityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetrieveStudyPlanIdentityResponseMultiError) AllErrors() []error { return m }

// RetrieveStudyPlanIdentityResponseValidationError is the validation error
// returned by RetrieveStudyPlanIdentityResponse.Validate if the designated
// constraints aren't met.
type RetrieveStudyPlanIdentityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveStudyPlanIdentityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveStudyPlanIdentityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveStudyPlanIdentityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveStudyPlanIdentityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveStudyPlanIdentityResponseValidationError) ErrorName() string {
	return "RetrieveStudyPlanIdentityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveStudyPlanIdentityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveStudyPlanIdentityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveStudyPlanIdentityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveStudyPlanIdentityResponseValidationError{}

// Validate checks the field values on ListAllocateTeacherRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAllocateTeacherRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAllocateTeacherRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAllocateTeacherRequestMultiError, or nil if none found.
func (m *ListAllocateTeacherRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAllocateTeacherRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListAllocateTeacherRequestMultiError(errors)
	}

	return nil
}

// ListAllocateTeacherRequestMultiError is an error wrapping multiple
// validation errors returned by ListAllocateTeacherRequest.ValidateAll() if
// the designated constraints aren't met.
type ListAllocateTeacherRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAllocateTeacherRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAllocateTeacherRequestMultiError) AllErrors() []error { return m }

// ListAllocateTeacherRequestValidationError is the validation error returned
// by ListAllocateTeacherRequest.Validate if the designated constraints aren't met.
type ListAllocateTeacherRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAllocateTeacherRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAllocateTeacherRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAllocateTeacherRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAllocateTeacherRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAllocateTeacherRequestValidationError) ErrorName() string {
	return "ListAllocateTeacherRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAllocateTeacherRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAllocateTeacherRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAllocateTeacherRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAllocateTeacherRequestValidationError{}

// Validate checks the field values on ListAllocateTeacherResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAllocateTeacherResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAllocateTeacherResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAllocateTeacherResponseMultiError, or nil if none found.
func (m *ListAllocateTeacherResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAllocateTeacherResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAllocateTeachers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAllocateTeacherResponseValidationError{
						field:  fmt.Sprintf("AllocateTeachers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAllocateTeacherResponseValidationError{
						field:  fmt.Sprintf("AllocateTeachers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAllocateTeacherResponseValidationError{
					field:  fmt.Sprintf("AllocateTeachers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAllocateTeacherResponseMultiError(errors)
	}

	return nil
}

// ListAllocateTeacherResponseMultiError is an error wrapping multiple
// validation errors returned by ListAllocateTeacherResponse.ValidateAll() if
// the designated constraints aren't met.
type ListAllocateTeacherResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAllocateTeacherResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAllocateTeacherResponseMultiError) AllErrors() []error { return m }

// ListAllocateTeacherResponseValidationError is the validation error returned
// by ListAllocateTeacherResponse.Validate if the designated constraints
// aren't met.
type ListAllocateTeacherResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAllocateTeacherResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAllocateTeacherResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAllocateTeacherResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAllocateTeacherResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAllocateTeacherResponseValidationError) ErrorName() string {
	return "ListAllocateTeacherResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAllocateTeacherResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAllocateTeacherResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAllocateTeacherResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAllocateTeacherResponseValidationError{}

// Validate checks the field values on ListToDoItemStructuredBookTreeRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListToDoItemStructuredBookTreeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListToDoItemStructuredBookTreeRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListToDoItemStructuredBookTreeRequestMultiError, or nil if none found.
func (m *ListToDoItemStructuredBookTreeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListToDoItemStructuredBookTreeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListToDoItemStructuredBookTreeRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListToDoItemStructuredBookTreeRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListToDoItemStructuredBookTreeRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStudyPlanIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListToDoItemStructuredBookTreeRequestValidationError{
					field:  "StudyPlanIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListToDoItemStructuredBookTreeRequestValidationError{
					field:  "StudyPlanIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStudyPlanIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListToDoItemStructuredBookTreeRequestValidationError{
				field:  "StudyPlanIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListToDoItemStructuredBookTreeRequestMultiError(errors)
	}

	return nil
}

// ListToDoItemStructuredBookTreeRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListToDoItemStructuredBookTreeRequest.ValidateAll() if the designated
// constraints aren't met.
type ListToDoItemStructuredBookTreeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListToDoItemStructuredBookTreeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListToDoItemStructuredBookTreeRequestMultiError) AllErrors() []error { return m }

// ListToDoItemStructuredBookTreeRequestValidationError is the validation error
// returned by ListToDoItemStructuredBookTreeRequest.Validate if the
// designated constraints aren't met.
type ListToDoItemStructuredBookTreeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListToDoItemStructuredBookTreeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListToDoItemStructuredBookTreeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListToDoItemStructuredBookTreeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListToDoItemStructuredBookTreeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListToDoItemStructuredBookTreeRequestValidationError) ErrorName() string {
	return "ListToDoItemStructuredBookTreeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListToDoItemStructuredBookTreeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListToDoItemStructuredBookTreeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListToDoItemStructuredBookTreeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListToDoItemStructuredBookTreeRequestValidationError{}

// Validate checks the field values on StudentStudyPlanItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StudentStudyPlanItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StudentStudyPlanItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StudentStudyPlanItemMultiError, or nil if none found.
func (m *StudentStudyPlanItem) ValidateAll() error {
	return m.validate(true)
}

func (m *StudentStudyPlanItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLearningMaterial()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudentStudyPlanItemValidationError{
					field:  "LearningMaterial",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudentStudyPlanItemValidationError{
					field:  "LearningMaterial",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLearningMaterial()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudentStudyPlanItemValidationError{
				field:  "LearningMaterial",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudentStudyPlanItemValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudentStudyPlanItemValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudentStudyPlanItemValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudentStudyPlanItemValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudentStudyPlanItemValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudentStudyPlanItemValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCompletedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudentStudyPlanItemValidationError{
					field:  "CompletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudentStudyPlanItemValidationError{
					field:  "CompletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudentStudyPlanItemValidationError{
				field:  "CompletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSchoolDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudentStudyPlanItemValidationError{
					field:  "SchoolDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudentStudyPlanItemValidationError{
					field:  "SchoolDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchoolDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudentStudyPlanItemValidationError{
				field:  "SchoolDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StudyPlanItemStatus

	if all {
		switch v := interface{}(m.GetAvailableFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudentStudyPlanItemValidationError{
					field:  "AvailableFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudentStudyPlanItemValidationError{
					field:  "AvailableFrom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAvailableFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudentStudyPlanItemValidationError{
				field:  "AvailableFrom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAvailableTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudentStudyPlanItemValidationError{
					field:  "AvailableTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudentStudyPlanItemValidationError{
					field:  "AvailableTo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAvailableTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudentStudyPlanItemValidationError{
				field:  "AvailableTo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BookId

	if len(errors) > 0 {
		return StudentStudyPlanItemMultiError(errors)
	}

	return nil
}

// StudentStudyPlanItemMultiError is an error wrapping multiple validation
// errors returned by StudentStudyPlanItem.ValidateAll() if the designated
// constraints aren't met.
type StudentStudyPlanItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StudentStudyPlanItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StudentStudyPlanItemMultiError) AllErrors() []error { return m }

// StudentStudyPlanItemValidationError is the validation error returned by
// StudentStudyPlanItem.Validate if the designated constraints aren't met.
type StudentStudyPlanItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StudentStudyPlanItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StudentStudyPlanItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StudentStudyPlanItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StudentStudyPlanItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StudentStudyPlanItemValidationError) ErrorName() string {
	return "StudentStudyPlanItemValidationError"
}

// Error satisfies the builtin error interface
func (e StudentStudyPlanItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStudentStudyPlanItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StudentStudyPlanItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StudentStudyPlanItemValidationError{}

// Validate checks the field values on ListToDoItemStructuredBookTreeResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListToDoItemStructuredBookTreeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListToDoItemStructuredBookTreeResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListToDoItemStructuredBookTreeResponseMultiError, or nil if none found.
func (m *ListToDoItemStructuredBookTreeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListToDoItemStructuredBookTreeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNextPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListToDoItemStructuredBookTreeResponseValidationError{
					field:  "NextPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListToDoItemStructuredBookTreeResponseValidationError{
					field:  "NextPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNextPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListToDoItemStructuredBookTreeResponseValidationError{
				field:  "NextPage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetTodoItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListToDoItemStructuredBookTreeResponseValidationError{
						field:  fmt.Sprintf("TodoItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListToDoItemStructuredBookTreeResponseValidationError{
						field:  fmt.Sprintf("TodoItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListToDoItemStructuredBookTreeResponseValidationError{
					field:  fmt.Sprintf("TodoItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTopicProgresses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListToDoItemStructuredBookTreeResponseValidationError{
						field:  fmt.Sprintf("TopicProgresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListToDoItemStructuredBookTreeResponseValidationError{
						field:  fmt.Sprintf("TopicProgresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListToDoItemStructuredBookTreeResponseValidationError{
					field:  fmt.Sprintf("TopicProgresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListToDoItemStructuredBookTreeResponseMultiError(errors)
	}

	return nil
}

// ListToDoItemStructuredBookTreeResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListToDoItemStructuredBookTreeResponse.ValidateAll() if the designated
// constraints aren't met.
type ListToDoItemStructuredBookTreeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListToDoItemStructuredBookTreeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListToDoItemStructuredBookTreeResponseMultiError) AllErrors() []error { return m }

// ListToDoItemStructuredBookTreeResponseValidationError is the validation
// error returned by ListToDoItemStructuredBookTreeResponse.Validate if the
// designated constraints aren't met.
type ListToDoItemStructuredBookTreeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListToDoItemStructuredBookTreeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListToDoItemStructuredBookTreeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListToDoItemStructuredBookTreeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListToDoItemStructuredBookTreeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListToDoItemStructuredBookTreeResponseValidationError) ErrorName() string {
	return "ListToDoItemStructuredBookTreeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListToDoItemStructuredBookTreeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListToDoItemStructuredBookTreeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListToDoItemStructuredBookTreeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListToDoItemStructuredBookTreeResponseValidationError{}

// Validate checks the field values on RetrieveAllocateMarkerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RetrieveAllocateMarkerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetrieveAllocateMarkerRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RetrieveAllocateMarkerRequestMultiError, or nil if none found.
func (m *RetrieveAllocateMarkerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RetrieveAllocateMarkerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStudyPlanItemIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RetrieveAllocateMarkerRequestValidationError{
					field:  "StudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RetrieveAllocateMarkerRequestValidationError{
					field:  "StudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStudyPlanItemIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetrieveAllocateMarkerRequestValidationError{
				field:  "StudyPlanItemIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RetrieveAllocateMarkerRequestMultiError(errors)
	}

	return nil
}

// RetrieveAllocateMarkerRequestMultiError is an error wrapping multiple
// validation errors returned by RetrieveAllocateMarkerRequest.ValidateAll()
// if the designated constraints aren't met.
type RetrieveAllocateMarkerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetrieveAllocateMarkerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetrieveAllocateMarkerRequestMultiError) AllErrors() []error { return m }

// RetrieveAllocateMarkerRequestValidationError is the validation error
// returned by RetrieveAllocateMarkerRequest.Validate if the designated
// constraints aren't met.
type RetrieveAllocateMarkerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveAllocateMarkerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveAllocateMarkerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveAllocateMarkerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveAllocateMarkerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveAllocateMarkerRequestValidationError) ErrorName() string {
	return "RetrieveAllocateMarkerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveAllocateMarkerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveAllocateMarkerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveAllocateMarkerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveAllocateMarkerRequestValidationError{}

// Validate checks the field values on RetrieveAllocateMarkerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RetrieveAllocateMarkerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetrieveAllocateMarkerResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RetrieveAllocateMarkerResponseMultiError, or nil if none found.
func (m *RetrieveAllocateMarkerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RetrieveAllocateMarkerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MarkerId

	if len(errors) > 0 {
		return RetrieveAllocateMarkerResponseMultiError(errors)
	}

	return nil
}

// RetrieveAllocateMarkerResponseMultiError is an error wrapping multiple
// validation errors returned by RetrieveAllocateMarkerResponse.ValidateAll()
// if the designated constraints aren't met.
type RetrieveAllocateMarkerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetrieveAllocateMarkerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetrieveAllocateMarkerResponseMultiError) AllErrors() []error { return m }

// RetrieveAllocateMarkerResponseValidationError is the validation error
// returned by RetrieveAllocateMarkerResponse.Validate if the designated
// constraints aren't met.
type RetrieveAllocateMarkerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveAllocateMarkerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveAllocateMarkerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveAllocateMarkerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveAllocateMarkerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveAllocateMarkerResponseValidationError) ErrorName() string {
	return "RetrieveAllocateMarkerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveAllocateMarkerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveAllocateMarkerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveAllocateMarkerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveAllocateMarkerResponseValidationError{}

// Validate checks the field values on
// UpsertAllocateMarkerRequest_AllocateMarkerItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpsertAllocateMarkerRequest_AllocateMarkerItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpsertAllocateMarkerRequest_AllocateMarkerItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// UpsertAllocateMarkerRequest_AllocateMarkerItemMultiError, or nil if none found.
func (m *UpsertAllocateMarkerRequest_AllocateMarkerItem) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertAllocateMarkerRequest_AllocateMarkerItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TeacherId

	// no validation rules for NumberAllocated

	if len(errors) > 0 {
		return UpsertAllocateMarkerRequest_AllocateMarkerItemMultiError(errors)
	}

	return nil
}

// UpsertAllocateMarkerRequest_AllocateMarkerItemMultiError is an error
// wrapping multiple validation errors returned by
// UpsertAllocateMarkerRequest_AllocateMarkerItem.ValidateAll() if the
// designated constraints aren't met.
type UpsertAllocateMarkerRequest_AllocateMarkerItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertAllocateMarkerRequest_AllocateMarkerItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertAllocateMarkerRequest_AllocateMarkerItemMultiError) AllErrors() []error { return m }

// UpsertAllocateMarkerRequest_AllocateMarkerItemValidationError is the
// validation error returned by
// UpsertAllocateMarkerRequest_AllocateMarkerItem.Validate if the designated
// constraints aren't met.
type UpsertAllocateMarkerRequest_AllocateMarkerItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertAllocateMarkerRequest_AllocateMarkerItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertAllocateMarkerRequest_AllocateMarkerItemValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UpsertAllocateMarkerRequest_AllocateMarkerItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertAllocateMarkerRequest_AllocateMarkerItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertAllocateMarkerRequest_AllocateMarkerItemValidationError) ErrorName() string {
	return "UpsertAllocateMarkerRequest_AllocateMarkerItemValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertAllocateMarkerRequest_AllocateMarkerItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertAllocateMarkerRequest_AllocateMarkerItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertAllocateMarkerRequest_AllocateMarkerItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertAllocateMarkerRequest_AllocateMarkerItemValidationError{}

// Validate checks the field values on
// UpsertAllocateMarkerRequest_SubmissionItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpsertAllocateMarkerRequest_SubmissionItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpsertAllocateMarkerRequest_SubmissionItem with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// UpsertAllocateMarkerRequest_SubmissionItemMultiError, or nil if none found.
func (m *UpsertAllocateMarkerRequest_SubmissionItem) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertAllocateMarkerRequest_SubmissionItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubmissionId

	if all {
		switch v := interface{}(m.GetStudyPlanItemIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertAllocateMarkerRequest_SubmissionItemValidationError{
					field:  "StudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertAllocateMarkerRequest_SubmissionItemValidationError{
					field:  "StudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStudyPlanItemIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertAllocateMarkerRequest_SubmissionItemValidationError{
				field:  "StudyPlanItemIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpsertAllocateMarkerRequest_SubmissionItemMultiError(errors)
	}

	return nil
}

// UpsertAllocateMarkerRequest_SubmissionItemMultiError is an error wrapping
// multiple validation errors returned by
// UpsertAllocateMarkerRequest_SubmissionItem.ValidateAll() if the designated
// constraints aren't met.
type UpsertAllocateMarkerRequest_SubmissionItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertAllocateMarkerRequest_SubmissionItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertAllocateMarkerRequest_SubmissionItemMultiError) AllErrors() []error { return m }

// UpsertAllocateMarkerRequest_SubmissionItemValidationError is the validation
// error returned by UpsertAllocateMarkerRequest_SubmissionItem.Validate if
// the designated constraints aren't met.
type UpsertAllocateMarkerRequest_SubmissionItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertAllocateMarkerRequest_SubmissionItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertAllocateMarkerRequest_SubmissionItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertAllocateMarkerRequest_SubmissionItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertAllocateMarkerRequest_SubmissionItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertAllocateMarkerRequest_SubmissionItemValidationError) ErrorName() string {
	return "UpsertAllocateMarkerRequest_SubmissionItemValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertAllocateMarkerRequest_SubmissionItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertAllocateMarkerRequest_SubmissionItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertAllocateMarkerRequest_SubmissionItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertAllocateMarkerRequest_SubmissionItemValidationError{}

// Validate checks the field values on
// ListAllocateTeacherResponse_AllocateTeacherItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListAllocateTeacherResponse_AllocateTeacherItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListAllocateTeacherResponse_AllocateTeacherItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ListAllocateTeacherResponse_AllocateTeacherItemMultiError, or nil if none found.
func (m *ListAllocateTeacherResponse_AllocateTeacherItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAllocateTeacherResponse_AllocateTeacherItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TeacherId

	// no validation rules for TeacherName

	// no validation rules for NumberAssignedSubmission

	if len(errors) > 0 {
		return ListAllocateTeacherResponse_AllocateTeacherItemMultiError(errors)
	}

	return nil
}

// ListAllocateTeacherResponse_AllocateTeacherItemMultiError is an error
// wrapping multiple validation errors returned by
// ListAllocateTeacherResponse_AllocateTeacherItem.ValidateAll() if the
// designated constraints aren't met.
type ListAllocateTeacherResponse_AllocateTeacherItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAllocateTeacherResponse_AllocateTeacherItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAllocateTeacherResponse_AllocateTeacherItemMultiError) AllErrors() []error { return m }

// ListAllocateTeacherResponse_AllocateTeacherItemValidationError is the
// validation error returned by
// ListAllocateTeacherResponse_AllocateTeacherItem.Validate if the designated
// constraints aren't met.
type ListAllocateTeacherResponse_AllocateTeacherItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAllocateTeacherResponse_AllocateTeacherItemValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListAllocateTeacherResponse_AllocateTeacherItemValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListAllocateTeacherResponse_AllocateTeacherItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAllocateTeacherResponse_AllocateTeacherItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAllocateTeacherResponse_AllocateTeacherItemValidationError) ErrorName() string {
	return "ListAllocateTeacherResponse_AllocateTeacherItemValidationError"
}

// Error satisfies the builtin error interface
func (e ListAllocateTeacherResponse_AllocateTeacherItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAllocateTeacherResponse_AllocateTeacherItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAllocateTeacherResponse_AllocateTeacherItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAllocateTeacherResponse_AllocateTeacherItemValidationError{}
