// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: syllabus/v1/student_submission_service.proto

package sspb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListSubmissionsV3Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSubmissionsV3Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSubmissionsV3Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSubmissionsV3RequestMultiError, or nil if none found.
func (m *ListSubmissionsV3Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSubmissionsV3Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaging()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSubmissionsV3RequestValidationError{
					field:  "Paging",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSubmissionsV3RequestValidationError{
					field:  "Paging",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSubmissionsV3RequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCourseId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSubmissionsV3RequestValidationError{
					field:  "CourseId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSubmissionsV3RequestValidationError{
					field:  "CourseId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCourseId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSubmissionsV3RequestValidationError{
				field:  "CourseId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSubmissionsV3RequestValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSubmissionsV3RequestValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSubmissionsV3RequestValidationError{
				field:  "Start",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEnd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSubmissionsV3RequestValidationError{
					field:  "End",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSubmissionsV3RequestValidationError{
					field:  "End",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSubmissionsV3RequestValidationError{
				field:  "End",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSearchText()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSubmissionsV3RequestValidationError{
					field:  "SearchText",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSubmissionsV3RequestValidationError{
					field:  "SearchText",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSearchText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSubmissionsV3RequestValidationError{
				field:  "SearchText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SearchType

	if len(errors) > 0 {
		return ListSubmissionsV3RequestMultiError(errors)
	}

	return nil
}

// ListSubmissionsV3RequestMultiError is an error wrapping multiple validation
// errors returned by ListSubmissionsV3Request.ValidateAll() if the designated
// constraints aren't met.
type ListSubmissionsV3RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSubmissionsV3RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSubmissionsV3RequestMultiError) AllErrors() []error { return m }

// ListSubmissionsV3RequestValidationError is the validation error returned by
// ListSubmissionsV3Request.Validate if the designated constraints aren't met.
type ListSubmissionsV3RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSubmissionsV3RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSubmissionsV3RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSubmissionsV3RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSubmissionsV3RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSubmissionsV3RequestValidationError) ErrorName() string {
	return "ListSubmissionsV3RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSubmissionsV3RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSubmissionsV3Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSubmissionsV3RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSubmissionsV3RequestValidationError{}

// Validate checks the field values on ListSubmissionsV3Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSubmissionsV3Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSubmissionsV3Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSubmissionsV3ResponseMultiError, or nil if none found.
func (m *ListSubmissionsV3Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSubmissionsV3Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNextPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSubmissionsV3ResponseValidationError{
					field:  "NextPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSubmissionsV3ResponseValidationError{
					field:  "NextPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNextPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSubmissionsV3ResponseValidationError{
				field:  "NextPage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSubmissionsV3ResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSubmissionsV3ResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSubmissionsV3ResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSubmissionsV3ResponseMultiError(errors)
	}

	return nil
}

// ListSubmissionsV3ResponseMultiError is an error wrapping multiple validation
// errors returned by ListSubmissionsV3Response.ValidateAll() if the
// designated constraints aren't met.
type ListSubmissionsV3ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSubmissionsV3ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSubmissionsV3ResponseMultiError) AllErrors() []error { return m }

// ListSubmissionsV3ResponseValidationError is the validation error returned by
// ListSubmissionsV3Response.Validate if the designated constraints aren't met.
type ListSubmissionsV3ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSubmissionsV3ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSubmissionsV3ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSubmissionsV3ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSubmissionsV3ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSubmissionsV3ResponseValidationError) ErrorName() string {
	return "ListSubmissionsV3ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSubmissionsV3ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSubmissionsV3Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSubmissionsV3ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSubmissionsV3ResponseValidationError{}

// Validate checks the field values on ListSubmissionsV4Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSubmissionsV4Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSubmissionsV4Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSubmissionsV4RequestMultiError, or nil if none found.
func (m *ListSubmissionsV4Request) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSubmissionsV4Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaging()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSubmissionsV4RequestValidationError{
					field:  "Paging",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSubmissionsV4RequestValidationError{
					field:  "Paging",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSubmissionsV4RequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCourseId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSubmissionsV4RequestValidationError{
					field:  "CourseId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSubmissionsV4RequestValidationError{
					field:  "CourseId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCourseId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSubmissionsV4RequestValidationError{
				field:  "CourseId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSubmissionsV4RequestValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSubmissionsV4RequestValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSubmissionsV4RequestValidationError{
				field:  "Start",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEnd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSubmissionsV4RequestValidationError{
					field:  "End",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSubmissionsV4RequestValidationError{
					field:  "End",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSubmissionsV4RequestValidationError{
				field:  "End",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSearchText()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSubmissionsV4RequestValidationError{
					field:  "SearchText",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSubmissionsV4RequestValidationError{
					field:  "SearchText",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSearchText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSubmissionsV4RequestValidationError{
				field:  "SearchText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SearchType

	if all {
		switch v := interface{}(m.GetStudentName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSubmissionsV4RequestValidationError{
					field:  "StudentName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSubmissionsV4RequestValidationError{
					field:  "StudentName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStudentName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSubmissionsV4RequestValidationError{
				field:  "StudentName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListSubmissionsV4RequestMultiError(errors)
	}

	return nil
}

// ListSubmissionsV4RequestMultiError is an error wrapping multiple validation
// errors returned by ListSubmissionsV4Request.ValidateAll() if the designated
// constraints aren't met.
type ListSubmissionsV4RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSubmissionsV4RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSubmissionsV4RequestMultiError) AllErrors() []error { return m }

// ListSubmissionsV4RequestValidationError is the validation error returned by
// ListSubmissionsV4Request.Validate if the designated constraints aren't met.
type ListSubmissionsV4RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSubmissionsV4RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSubmissionsV4RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSubmissionsV4RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSubmissionsV4RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSubmissionsV4RequestValidationError) ErrorName() string {
	return "ListSubmissionsV4RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSubmissionsV4RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSubmissionsV4Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSubmissionsV4RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSubmissionsV4RequestValidationError{}

// Validate checks the field values on ListSubmissionsV4Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSubmissionsV4Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSubmissionsV4Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSubmissionsV4ResponseMultiError, or nil if none found.
func (m *ListSubmissionsV4Response) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSubmissionsV4Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNextPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSubmissionsV4ResponseValidationError{
					field:  "NextPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSubmissionsV4ResponseValidationError{
					field:  "NextPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNextPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSubmissionsV4ResponseValidationError{
				field:  "NextPage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSubmissionsV4ResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSubmissionsV4ResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSubmissionsV4ResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSubmissionsV4ResponseMultiError(errors)
	}

	return nil
}

// ListSubmissionsV4ResponseMultiError is an error wrapping multiple validation
// errors returned by ListSubmissionsV4Response.ValidateAll() if the
// designated constraints aren't met.
type ListSubmissionsV4ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSubmissionsV4ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSubmissionsV4ResponseMultiError) AllErrors() []error { return m }

// ListSubmissionsV4ResponseValidationError is the validation error returned by
// ListSubmissionsV4Response.Validate if the designated constraints aren't met.
type ListSubmissionsV4ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSubmissionsV4ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSubmissionsV4ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSubmissionsV4ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSubmissionsV4ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSubmissionsV4ResponseValidationError) ErrorName() string {
	return "ListSubmissionsV4ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSubmissionsV4ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSubmissionsV4Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSubmissionsV4ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSubmissionsV4ResponseValidationError{}

// Validate checks the field values on RetrieveSubmissionHistoryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RetrieveSubmissionHistoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetrieveSubmissionHistoryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RetrieveSubmissionHistoryRequestMultiError, or nil if none found.
func (m *RetrieveSubmissionHistoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RetrieveSubmissionHistoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SetId

	if all {
		switch v := interface{}(m.GetPaging()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RetrieveSubmissionHistoryRequestValidationError{
					field:  "Paging",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RetrieveSubmissionHistoryRequestValidationError{
					field:  "Paging",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetrieveSubmissionHistoryRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RetrieveSubmissionHistoryRequestMultiError(errors)
	}

	return nil
}

// RetrieveSubmissionHistoryRequestMultiError is an error wrapping multiple
// validation errors returned by
// RetrieveSubmissionHistoryRequest.ValidateAll() if the designated
// constraints aren't met.
type RetrieveSubmissionHistoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetrieveSubmissionHistoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetrieveSubmissionHistoryRequestMultiError) AllErrors() []error { return m }

// RetrieveSubmissionHistoryRequestValidationError is the validation error
// returned by RetrieveSubmissionHistoryRequest.Validate if the designated
// constraints aren't met.
type RetrieveSubmissionHistoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveSubmissionHistoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveSubmissionHistoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveSubmissionHistoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveSubmissionHistoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveSubmissionHistoryRequestValidationError) ErrorName() string {
	return "RetrieveSubmissionHistoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveSubmissionHistoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveSubmissionHistoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveSubmissionHistoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveSubmissionHistoryRequestValidationError{}

// Validate checks the field values on RetrieveSubmissionHistoryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RetrieveSubmissionHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetrieveSubmissionHistoryResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// RetrieveSubmissionHistoryResponseMultiError, or nil if none found.
func (m *RetrieveSubmissionHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RetrieveSubmissionHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RetrieveSubmissionHistoryResponseValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RetrieveSubmissionHistoryResponseValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RetrieveSubmissionHistoryResponseValidationError{
					field:  fmt.Sprintf("Logs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetNextPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RetrieveSubmissionHistoryResponseValidationError{
					field:  "NextPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RetrieveSubmissionHistoryResponseValidationError{
					field:  "NextPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNextPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetrieveSubmissionHistoryResponseValidationError{
				field:  "NextPage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetQuestionGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RetrieveSubmissionHistoryResponseValidationError{
						field:  fmt.Sprintf("QuestionGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RetrieveSubmissionHistoryResponseValidationError{
						field:  fmt.Sprintf("QuestionGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RetrieveSubmissionHistoryResponseValidationError{
					field:  fmt.Sprintf("QuestionGroups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RetrieveSubmissionHistoryResponseMultiError(errors)
	}

	return nil
}

// RetrieveSubmissionHistoryResponseMultiError is an error wrapping multiple
// validation errors returned by
// RetrieveSubmissionHistoryResponse.ValidateAll() if the designated
// constraints aren't met.
type RetrieveSubmissionHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetrieveSubmissionHistoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetrieveSubmissionHistoryResponseMultiError) AllErrors() []error { return m }

// RetrieveSubmissionHistoryResponseValidationError is the validation error
// returned by RetrieveSubmissionHistoryResponse.Validate if the designated
// constraints aren't met.
type RetrieveSubmissionHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveSubmissionHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveSubmissionHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveSubmissionHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveSubmissionHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveSubmissionHistoryResponseValidationError) ErrorName() string {
	return "RetrieveSubmissionHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveSubmissionHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveSubmissionHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveSubmissionHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveSubmissionHistoryResponseValidationError{}
