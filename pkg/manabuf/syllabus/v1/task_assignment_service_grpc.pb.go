// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TaskAssignmentClient is the client API for TaskAssignment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskAssignmentClient interface {
	// InsertTaskAssignment insert a task assignment
	InsertTaskAssignment(ctx context.Context, in *InsertTaskAssignmentRequest, opts ...grpc.CallOption) (*InsertTaskAssignmentResponse, error)
	// InsertTaskAssignment update a task assignment
	UpdateTaskAssignment(ctx context.Context, in *UpdateTaskAssignmentRequest, opts ...grpc.CallOption) (*UpdateTaskAssignmentResponse, error)
	ListTaskAssignment(ctx context.Context, in *ListTaskAssignmentRequest, opts ...grpc.CallOption) (*ListTaskAssignmentResponse, error)
	// UpsertAdhocTaskAssignment create or update an adhoc task assignment
	UpsertAdhocTaskAssignment(ctx context.Context, in *UpsertAdhocTaskAssignmentRequest, opts ...grpc.CallOption) (*UpsertAdhocTaskAssignmentResponse, error)
}

type taskAssignmentClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskAssignmentClient(cc grpc.ClientConnInterface) TaskAssignmentClient {
	return &taskAssignmentClient{cc}
}

func (c *taskAssignmentClient) InsertTaskAssignment(ctx context.Context, in *InsertTaskAssignmentRequest, opts ...grpc.CallOption) (*InsertTaskAssignmentResponse, error) {
	out := new(InsertTaskAssignmentResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.TaskAssignment/InsertTaskAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskAssignmentClient) UpdateTaskAssignment(ctx context.Context, in *UpdateTaskAssignmentRequest, opts ...grpc.CallOption) (*UpdateTaskAssignmentResponse, error) {
	out := new(UpdateTaskAssignmentResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.TaskAssignment/UpdateTaskAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskAssignmentClient) ListTaskAssignment(ctx context.Context, in *ListTaskAssignmentRequest, opts ...grpc.CallOption) (*ListTaskAssignmentResponse, error) {
	out := new(ListTaskAssignmentResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.TaskAssignment/ListTaskAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskAssignmentClient) UpsertAdhocTaskAssignment(ctx context.Context, in *UpsertAdhocTaskAssignmentRequest, opts ...grpc.CallOption) (*UpsertAdhocTaskAssignmentResponse, error) {
	out := new(UpsertAdhocTaskAssignmentResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.TaskAssignment/UpsertAdhocTaskAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskAssignmentServer is the server API for TaskAssignment service.
// All implementations should embed UnimplementedTaskAssignmentServer
// for forward compatibility
type TaskAssignmentServer interface {
	// InsertTaskAssignment insert a task assignment
	InsertTaskAssignment(context.Context, *InsertTaskAssignmentRequest) (*InsertTaskAssignmentResponse, error)
	// InsertTaskAssignment update a task assignment
	UpdateTaskAssignment(context.Context, *UpdateTaskAssignmentRequest) (*UpdateTaskAssignmentResponse, error)
	ListTaskAssignment(context.Context, *ListTaskAssignmentRequest) (*ListTaskAssignmentResponse, error)
	// UpsertAdhocTaskAssignment create or update an adhoc task assignment
	UpsertAdhocTaskAssignment(context.Context, *UpsertAdhocTaskAssignmentRequest) (*UpsertAdhocTaskAssignmentResponse, error)
}

// UnimplementedTaskAssignmentServer should be embedded to have forward compatible implementations.
type UnimplementedTaskAssignmentServer struct {
}

func (UnimplementedTaskAssignmentServer) InsertTaskAssignment(context.Context, *InsertTaskAssignmentRequest) (*InsertTaskAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertTaskAssignment not implemented")
}
func (UnimplementedTaskAssignmentServer) UpdateTaskAssignment(context.Context, *UpdateTaskAssignmentRequest) (*UpdateTaskAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskAssignment not implemented")
}
func (UnimplementedTaskAssignmentServer) ListTaskAssignment(context.Context, *ListTaskAssignmentRequest) (*ListTaskAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaskAssignment not implemented")
}
func (UnimplementedTaskAssignmentServer) UpsertAdhocTaskAssignment(context.Context, *UpsertAdhocTaskAssignmentRequest) (*UpsertAdhocTaskAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertAdhocTaskAssignment not implemented")
}

// UnsafeTaskAssignmentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskAssignmentServer will
// result in compilation errors.
type UnsafeTaskAssignmentServer interface {
	mustEmbedUnimplementedTaskAssignmentServer()
}

func RegisterTaskAssignmentServer(s grpc.ServiceRegistrar, srv TaskAssignmentServer) {
	s.RegisterService(&_TaskAssignment_serviceDesc, srv)
}

func _TaskAssignment_InsertTaskAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertTaskAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskAssignmentServer).InsertTaskAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.TaskAssignment/InsertTaskAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskAssignmentServer).InsertTaskAssignment(ctx, req.(*InsertTaskAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskAssignment_UpdateTaskAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskAssignmentServer).UpdateTaskAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.TaskAssignment/UpdateTaskAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskAssignmentServer).UpdateTaskAssignment(ctx, req.(*UpdateTaskAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskAssignment_ListTaskAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskAssignmentServer).ListTaskAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.TaskAssignment/ListTaskAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskAssignmentServer).ListTaskAssignment(ctx, req.(*ListTaskAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskAssignment_UpsertAdhocTaskAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertAdhocTaskAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskAssignmentServer).UpsertAdhocTaskAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.TaskAssignment/UpsertAdhocTaskAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskAssignmentServer).UpsertAdhocTaskAssignment(ctx, req.(*UpsertAdhocTaskAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskAssignment_serviceDesc = grpc.ServiceDesc{
	ServiceName: "syllabus.v1.TaskAssignment",
	HandlerType: (*TaskAssignmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertTaskAssignment",
			Handler:    _TaskAssignment_InsertTaskAssignment_Handler,
		},
		{
			MethodName: "UpdateTaskAssignment",
			Handler:    _TaskAssignment_UpdateTaskAssignment_Handler,
		},
		{
			MethodName: "ListTaskAssignment",
			Handler:    _TaskAssignment_ListTaskAssignment_Handler,
		},
		{
			MethodName: "UpsertAdhocTaskAssignment",
			Handler:    _TaskAssignment_UpsertAdhocTaskAssignment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "syllabus/v1/task_assignment_service.proto",
}
