// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: syllabus/v1/learning_objective_service.proto

package sspb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LearningObjectiveBase with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LearningObjectiveBase) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LearningObjectiveBase with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LearningObjectiveBaseMultiError, or nil if none found.
func (m *LearningObjectiveBase) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningObjectiveBase) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LearningObjectiveBaseValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LearningObjectiveBaseValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LearningObjectiveBaseValidationError{
				field:  "Base",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for VideoId

	// no validation rules for VideoScript

	// no validation rules for StudyGuide

	// no validation rules for TotalQuestion

	// no validation rules for ManualGrading

	if len(errors) > 0 {
		return LearningObjectiveBaseMultiError(errors)
	}

	return nil
}

// LearningObjectiveBaseMultiError is an error wrapping multiple validation
// errors returned by LearningObjectiveBase.ValidateAll() if the designated
// constraints aren't met.
type LearningObjectiveBaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningObjectiveBaseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningObjectiveBaseMultiError) AllErrors() []error { return m }

// LearningObjectiveBaseValidationError is the validation error returned by
// LearningObjectiveBase.Validate if the designated constraints aren't met.
type LearningObjectiveBaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningObjectiveBaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningObjectiveBaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningObjectiveBaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningObjectiveBaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningObjectiveBaseValidationError) ErrorName() string {
	return "LearningObjectiveBaseValidationError"
}

// Error satisfies the builtin error interface
func (e LearningObjectiveBaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningObjectiveBase.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningObjectiveBaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningObjectiveBaseValidationError{}

// Validate checks the field values on InsertLearningObjectiveRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InsertLearningObjectiveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InsertLearningObjectiveRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// InsertLearningObjectiveRequestMultiError, or nil if none found.
func (m *InsertLearningObjectiveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InsertLearningObjectiveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLearningObjective()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InsertLearningObjectiveRequestValidationError{
					field:  "LearningObjective",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InsertLearningObjectiveRequestValidationError{
					field:  "LearningObjective",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLearningObjective()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InsertLearningObjectiveRequestValidationError{
				field:  "LearningObjective",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InsertLearningObjectiveRequestMultiError(errors)
	}

	return nil
}

// InsertLearningObjectiveRequestMultiError is an error wrapping multiple
// validation errors returned by InsertLearningObjectiveRequest.ValidateAll()
// if the designated constraints aren't met.
type InsertLearningObjectiveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InsertLearningObjectiveRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InsertLearningObjectiveRequestMultiError) AllErrors() []error { return m }

// InsertLearningObjectiveRequestValidationError is the validation error
// returned by InsertLearningObjectiveRequest.Validate if the designated
// constraints aren't met.
type InsertLearningObjectiveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InsertLearningObjectiveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InsertLearningObjectiveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InsertLearningObjectiveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InsertLearningObjectiveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InsertLearningObjectiveRequestValidationError) ErrorName() string {
	return "InsertLearningObjectiveRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InsertLearningObjectiveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInsertLearningObjectiveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InsertLearningObjectiveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InsertLearningObjectiveRequestValidationError{}

// Validate checks the field values on InsertLearningObjectiveResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InsertLearningObjectiveResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InsertLearningObjectiveResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// InsertLearningObjectiveResponseMultiError, or nil if none found.
func (m *InsertLearningObjectiveResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InsertLearningObjectiveResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LearningMaterialId

	if len(errors) > 0 {
		return InsertLearningObjectiveResponseMultiError(errors)
	}

	return nil
}

// InsertLearningObjectiveResponseMultiError is an error wrapping multiple
// validation errors returned by InsertLearningObjectiveResponse.ValidateAll()
// if the designated constraints aren't met.
type InsertLearningObjectiveResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InsertLearningObjectiveResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InsertLearningObjectiveResponseMultiError) AllErrors() []error { return m }

// InsertLearningObjectiveResponseValidationError is the validation error
// returned by InsertLearningObjectiveResponse.Validate if the designated
// constraints aren't met.
type InsertLearningObjectiveResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InsertLearningObjectiveResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InsertLearningObjectiveResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InsertLearningObjectiveResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InsertLearningObjectiveResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InsertLearningObjectiveResponseValidationError) ErrorName() string {
	return "InsertLearningObjectiveResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InsertLearningObjectiveResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInsertLearningObjectiveResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InsertLearningObjectiveResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InsertLearningObjectiveResponseValidationError{}

// Validate checks the field values on UpdateLearningObjectiveRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateLearningObjectiveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLearningObjectiveRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateLearningObjectiveRequestMultiError, or nil if none found.
func (m *UpdateLearningObjectiveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLearningObjectiveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLearningObjective()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateLearningObjectiveRequestValidationError{
					field:  "LearningObjective",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateLearningObjectiveRequestValidationError{
					field:  "LearningObjective",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLearningObjective()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLearningObjectiveRequestValidationError{
				field:  "LearningObjective",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateLearningObjectiveRequestMultiError(errors)
	}

	return nil
}

// UpdateLearningObjectiveRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateLearningObjectiveRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateLearningObjectiveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLearningObjectiveRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLearningObjectiveRequestMultiError) AllErrors() []error { return m }

// UpdateLearningObjectiveRequestValidationError is the validation error
// returned by UpdateLearningObjectiveRequest.Validate if the designated
// constraints aren't met.
type UpdateLearningObjectiveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLearningObjectiveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLearningObjectiveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLearningObjectiveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLearningObjectiveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLearningObjectiveRequestValidationError) ErrorName() string {
	return "UpdateLearningObjectiveRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLearningObjectiveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLearningObjectiveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLearningObjectiveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLearningObjectiveRequestValidationError{}

// Validate checks the field values on UpdateLearningObjectiveResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateLearningObjectiveResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateLearningObjectiveResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateLearningObjectiveResponseMultiError, or nil if none found.
func (m *UpdateLearningObjectiveResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateLearningObjectiveResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateLearningObjectiveResponseMultiError(errors)
	}

	return nil
}

// UpdateLearningObjectiveResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateLearningObjectiveResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateLearningObjectiveResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateLearningObjectiveResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateLearningObjectiveResponseMultiError) AllErrors() []error { return m }

// UpdateLearningObjectiveResponseValidationError is the validation error
// returned by UpdateLearningObjectiveResponse.Validate if the designated
// constraints aren't met.
type UpdateLearningObjectiveResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLearningObjectiveResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLearningObjectiveResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLearningObjectiveResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLearningObjectiveResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLearningObjectiveResponseValidationError) ErrorName() string {
	return "UpdateLearningObjectiveResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLearningObjectiveResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLearningObjectiveResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLearningObjectiveResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLearningObjectiveResponseValidationError{}

// Validate checks the field values on ListLearningObjectiveRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLearningObjectiveRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLearningObjectiveRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLearningObjectiveRequestMultiError, or nil if none found.
func (m *ListLearningObjectiveRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLearningObjectiveRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListLearningObjectiveRequestMultiError(errors)
	}

	return nil
}

// ListLearningObjectiveRequestMultiError is an error wrapping multiple
// validation errors returned by ListLearningObjectiveRequest.ValidateAll() if
// the designated constraints aren't met.
type ListLearningObjectiveRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLearningObjectiveRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLearningObjectiveRequestMultiError) AllErrors() []error { return m }

// ListLearningObjectiveRequestValidationError is the validation error returned
// by ListLearningObjectiveRequest.Validate if the designated constraints
// aren't met.
type ListLearningObjectiveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLearningObjectiveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLearningObjectiveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLearningObjectiveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLearningObjectiveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLearningObjectiveRequestValidationError) ErrorName() string {
	return "ListLearningObjectiveRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLearningObjectiveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLearningObjectiveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLearningObjectiveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLearningObjectiveRequestValidationError{}

// Validate checks the field values on ListLearningObjectiveResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLearningObjectiveResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLearningObjectiveResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListLearningObjectiveResponseMultiError, or nil if none found.
func (m *ListLearningObjectiveResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLearningObjectiveResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLearningObjectives() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLearningObjectiveResponseValidationError{
						field:  fmt.Sprintf("LearningObjectives[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLearningObjectiveResponseValidationError{
						field:  fmt.Sprintf("LearningObjectives[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLearningObjectiveResponseValidationError{
					field:  fmt.Sprintf("LearningObjectives[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListLearningObjectiveResponseMultiError(errors)
	}

	return nil
}

// ListLearningObjectiveResponseMultiError is an error wrapping multiple
// validation errors returned by ListLearningObjectiveResponse.ValidateAll()
// if the designated constraints aren't met.
type ListLearningObjectiveResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLearningObjectiveResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLearningObjectiveResponseMultiError) AllErrors() []error { return m }

// ListLearningObjectiveResponseValidationError is the validation error
// returned by ListLearningObjectiveResponse.Validate if the designated
// constraints aren't met.
type ListLearningObjectiveResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLearningObjectiveResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLearningObjectiveResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLearningObjectiveResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLearningObjectiveResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLearningObjectiveResponseValidationError) ErrorName() string {
	return "ListLearningObjectiveResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLearningObjectiveResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLearningObjectiveResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLearningObjectiveResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLearningObjectiveResponseValidationError{}

// Validate checks the field values on UpsertLOProgressionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertLOProgressionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertLOProgressionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertLOProgressionRequestMultiError, or nil if none found.
func (m *UpsertLOProgressionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertLOProgressionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStudyPlanItemIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertLOProgressionRequestValidationError{
					field:  "StudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertLOProgressionRequestValidationError{
					field:  "StudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStudyPlanItemIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertLOProgressionRequestValidationError{
				field:  "StudyPlanItemIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetQuizAnswer() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpsertLOProgressionRequestValidationError{
						field:  fmt.Sprintf("QuizAnswer[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpsertLOProgressionRequestValidationError{
						field:  fmt.Sprintf("QuizAnswer[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpsertLOProgressionRequestValidationError{
					field:  fmt.Sprintf("QuizAnswer[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for ShuffledQuizSetId

	// no validation rules for LastIndex

	// no validation rules for SessionId

	if len(errors) > 0 {
		return UpsertLOProgressionRequestMultiError(errors)
	}

	return nil
}

// UpsertLOProgressionRequestMultiError is an error wrapping multiple
// validation errors returned by UpsertLOProgressionRequest.ValidateAll() if
// the designated constraints aren't met.
type UpsertLOProgressionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertLOProgressionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertLOProgressionRequestMultiError) AllErrors() []error { return m }

// UpsertLOProgressionRequestValidationError is the validation error returned
// by UpsertLOProgressionRequest.Validate if the designated constraints aren't met.
type UpsertLOProgressionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertLOProgressionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertLOProgressionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertLOProgressionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertLOProgressionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertLOProgressionRequestValidationError) ErrorName() string {
	return "UpsertLOProgressionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertLOProgressionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertLOProgressionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertLOProgressionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertLOProgressionRequestValidationError{}

// Validate checks the field values on UpsertLOProgressionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertLOProgressionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertLOProgressionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertLOProgressionResponseMultiError, or nil if none found.
func (m *UpsertLOProgressionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertLOProgressionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProgressionId

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertLOProgressionResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertLOProgressionResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertLOProgressionResponseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpsertLOProgressionResponseMultiError(errors)
	}

	return nil
}

// UpsertLOProgressionResponseMultiError is an error wrapping multiple
// validation errors returned by UpsertLOProgressionResponse.ValidateAll() if
// the designated constraints aren't met.
type UpsertLOProgressionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertLOProgressionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertLOProgressionResponseMultiError) AllErrors() []error { return m }

// UpsertLOProgressionResponseValidationError is the validation error returned
// by UpsertLOProgressionResponse.Validate if the designated constraints
// aren't met.
type UpsertLOProgressionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertLOProgressionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertLOProgressionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertLOProgressionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertLOProgressionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertLOProgressionResponseValidationError) ErrorName() string {
	return "UpsertLOProgressionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertLOProgressionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertLOProgressionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertLOProgressionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertLOProgressionResponseValidationError{}

// Validate checks the field values on QuizAnswer with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QuizAnswer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuizAnswer with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QuizAnswerMultiError, or
// nil if none found.
func (m *QuizAnswer) ValidateAll() error {
	return m.validate(true)
}

func (m *QuizAnswer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for QuizId

	for idx, item := range m.GetAnswer() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QuizAnswerValidationError{
						field:  fmt.Sprintf("Answer[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QuizAnswerValidationError{
						field:  fmt.Sprintf("Answer[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QuizAnswerValidationError{
					field:  fmt.Sprintf("Answer[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QuizAnswerMultiError(errors)
	}

	return nil
}

// QuizAnswerMultiError is an error wrapping multiple validation errors
// returned by QuizAnswer.ValidateAll() if the designated constraints aren't met.
type QuizAnswerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuizAnswerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuizAnswerMultiError) AllErrors() []error { return m }

// QuizAnswerValidationError is the validation error returned by
// QuizAnswer.Validate if the designated constraints aren't met.
type QuizAnswerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuizAnswerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuizAnswerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuizAnswerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuizAnswerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuizAnswerValidationError) ErrorName() string { return "QuizAnswerValidationError" }

// Error satisfies the builtin error interface
func (e QuizAnswerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuizAnswer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuizAnswerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuizAnswerValidationError{}

// Validate checks the field values on QuizAnswerInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QuizAnswerInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuizAnswerInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QuizAnswerInfoMultiError,
// or nil if none found.
func (m *QuizAnswerInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *QuizAnswerInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetQuiz()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuizAnswerInfoValidationError{
					field:  "Quiz",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuizAnswerInfoValidationError{
					field:  "Quiz",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuiz()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuizAnswerInfoValidationError{
				field:  "Quiz",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetQuizAnswer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuizAnswerInfoValidationError{
					field:  "QuizAnswer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuizAnswerInfoValidationError{
					field:  "QuizAnswer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuizAnswer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuizAnswerInfoValidationError{
				field:  "QuizAnswer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QuizAnswerInfoMultiError(errors)
	}

	return nil
}

// QuizAnswerInfoMultiError is an error wrapping multiple validation errors
// returned by QuizAnswerInfo.ValidateAll() if the designated constraints
// aren't met.
type QuizAnswerInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuizAnswerInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuizAnswerInfoMultiError) AllErrors() []error { return m }

// QuizAnswerInfoValidationError is the validation error returned by
// QuizAnswerInfo.Validate if the designated constraints aren't met.
type QuizAnswerInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuizAnswerInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuizAnswerInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuizAnswerInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuizAnswerInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuizAnswerInfoValidationError) ErrorName() string { return "QuizAnswerInfoValidationError" }

// Error satisfies the builtin error interface
func (e QuizAnswerInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuizAnswerInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuizAnswerInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuizAnswerInfoValidationError{}

// Validate checks the field values on RetrieveLOProgressionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RetrieveLOProgressionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetrieveLOProgressionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RetrieveLOProgressionRequestMultiError, or nil if none found.
func (m *RetrieveLOProgressionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RetrieveLOProgressionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStudyPlanItemIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RetrieveLOProgressionRequestValidationError{
					field:  "StudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RetrieveLOProgressionRequestValidationError{
					field:  "StudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStudyPlanItemIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetrieveLOProgressionRequestValidationError{
				field:  "StudyPlanItemIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPaging()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RetrieveLOProgressionRequestValidationError{
					field:  "Paging",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RetrieveLOProgressionRequestValidationError{
					field:  "Paging",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetrieveLOProgressionRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RetrieveLOProgressionRequestMultiError(errors)
	}

	return nil
}

// RetrieveLOProgressionRequestMultiError is an error wrapping multiple
// validation errors returned by RetrieveLOProgressionRequest.ValidateAll() if
// the designated constraints aren't met.
type RetrieveLOProgressionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetrieveLOProgressionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetrieveLOProgressionRequestMultiError) AllErrors() []error { return m }

// RetrieveLOProgressionRequestValidationError is the validation error returned
// by RetrieveLOProgressionRequest.Validate if the designated constraints
// aren't met.
type RetrieveLOProgressionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveLOProgressionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveLOProgressionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveLOProgressionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveLOProgressionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveLOProgressionRequestValidationError) ErrorName() string {
	return "RetrieveLOProgressionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveLOProgressionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveLOProgressionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveLOProgressionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveLOProgressionRequestValidationError{}

// Validate checks the field values on RetrieveLOProgressionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RetrieveLOProgressionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetrieveLOProgressionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RetrieveLOProgressionResponseMultiError, or nil if none found.
func (m *RetrieveLOProgressionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RetrieveLOProgressionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OriginalShuffledQuizSetId

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RetrieveLOProgressionResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RetrieveLOProgressionResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RetrieveLOProgressionResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetQuestionGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RetrieveLOProgressionResponseValidationError{
						field:  fmt.Sprintf("QuestionGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RetrieveLOProgressionResponseValidationError{
						field:  fmt.Sprintf("QuestionGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RetrieveLOProgressionResponseValidationError{
					field:  fmt.Sprintf("QuestionGroups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for LastIndex

	if all {
		switch v := interface{}(m.GetNextPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RetrieveLOProgressionResponseValidationError{
					field:  "NextPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RetrieveLOProgressionResponseValidationError{
					field:  "NextPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNextPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetrieveLOProgressionResponseValidationError{
				field:  "NextPage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RetrieveLOProgressionResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RetrieveLOProgressionResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetrieveLOProgressionResponseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SessionId

	if len(errors) > 0 {
		return RetrieveLOProgressionResponseMultiError(errors)
	}

	return nil
}

// RetrieveLOProgressionResponseMultiError is an error wrapping multiple
// validation errors returned by RetrieveLOProgressionResponse.ValidateAll()
// if the designated constraints aren't met.
type RetrieveLOProgressionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetrieveLOProgressionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetrieveLOProgressionResponseMultiError) AllErrors() []error { return m }

// RetrieveLOProgressionResponseValidationError is the validation error
// returned by RetrieveLOProgressionResponse.Validate if the designated
// constraints aren't met.
type RetrieveLOProgressionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveLOProgressionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveLOProgressionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveLOProgressionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveLOProgressionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveLOProgressionResponseValidationError) ErrorName() string {
	return "RetrieveLOProgressionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveLOProgressionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveLOProgressionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveLOProgressionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveLOProgressionResponseValidationError{}
