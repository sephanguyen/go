// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LearningHistoryDataSyncServiceClient is the client API for LearningHistoryDataSyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LearningHistoryDataSyncServiceClient interface {
	DownloadMappingFile(ctx context.Context, in *DownloadMappingFileRequest, opts ...grpc.CallOption) (*DownloadMappingFileResponse, error)
	UploadMappingFile(ctx context.Context, in *UploadMappingFileRequest, opts ...grpc.CallOption) (*UploadMappingFileResponse, error)
}

type learningHistoryDataSyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLearningHistoryDataSyncServiceClient(cc grpc.ClientConnInterface) LearningHistoryDataSyncServiceClient {
	return &learningHistoryDataSyncServiceClient{cc}
}

func (c *learningHistoryDataSyncServiceClient) DownloadMappingFile(ctx context.Context, in *DownloadMappingFileRequest, opts ...grpc.CallOption) (*DownloadMappingFileResponse, error) {
	out := new(DownloadMappingFileResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.LearningHistoryDataSyncService/DownloadMappingFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningHistoryDataSyncServiceClient) UploadMappingFile(ctx context.Context, in *UploadMappingFileRequest, opts ...grpc.CallOption) (*UploadMappingFileResponse, error) {
	out := new(UploadMappingFileResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.LearningHistoryDataSyncService/UploadMappingFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LearningHistoryDataSyncServiceServer is the server API for LearningHistoryDataSyncService service.
// All implementations should embed UnimplementedLearningHistoryDataSyncServiceServer
// for forward compatibility
type LearningHistoryDataSyncServiceServer interface {
	DownloadMappingFile(context.Context, *DownloadMappingFileRequest) (*DownloadMappingFileResponse, error)
	UploadMappingFile(context.Context, *UploadMappingFileRequest) (*UploadMappingFileResponse, error)
}

// UnimplementedLearningHistoryDataSyncServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLearningHistoryDataSyncServiceServer struct {
}

func (UnimplementedLearningHistoryDataSyncServiceServer) DownloadMappingFile(context.Context, *DownloadMappingFileRequest) (*DownloadMappingFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadMappingFile not implemented")
}
func (UnimplementedLearningHistoryDataSyncServiceServer) UploadMappingFile(context.Context, *UploadMappingFileRequest) (*UploadMappingFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadMappingFile not implemented")
}

// UnsafeLearningHistoryDataSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LearningHistoryDataSyncServiceServer will
// result in compilation errors.
type UnsafeLearningHistoryDataSyncServiceServer interface {
	mustEmbedUnimplementedLearningHistoryDataSyncServiceServer()
}

func RegisterLearningHistoryDataSyncServiceServer(s grpc.ServiceRegistrar, srv LearningHistoryDataSyncServiceServer) {
	s.RegisterService(&_LearningHistoryDataSyncService_serviceDesc, srv)
}

func _LearningHistoryDataSyncService_DownloadMappingFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadMappingFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningHistoryDataSyncServiceServer).DownloadMappingFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.LearningHistoryDataSyncService/DownloadMappingFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningHistoryDataSyncServiceServer).DownloadMappingFile(ctx, req.(*DownloadMappingFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningHistoryDataSyncService_UploadMappingFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadMappingFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningHistoryDataSyncServiceServer).UploadMappingFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.LearningHistoryDataSyncService/UploadMappingFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningHistoryDataSyncServiceServer).UploadMappingFile(ctx, req.(*UploadMappingFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LearningHistoryDataSyncService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "syllabus.v1.LearningHistoryDataSyncService",
	HandlerType: (*LearningHistoryDataSyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DownloadMappingFile",
			Handler:    _LearningHistoryDataSyncService_DownloadMappingFile_Handler,
		},
		{
			MethodName: "UploadMappingFile",
			Handler:    _LearningHistoryDataSyncService_UploadMappingFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "syllabus/v1/learning_history_data_sync.proto",
}
