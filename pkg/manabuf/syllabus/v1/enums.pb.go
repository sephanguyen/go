// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: syllabus/v1/enums.proto

package sspb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// LearningMaterialType describe all learning material types
type LearningMaterialType int32

const (
	LearningMaterialType_LEARNING_MATERIAL_LEARNING_OBJECTIVE LearningMaterialType = 0
	LearningMaterialType_LEARNING_MATERIAL_EXAM_LO            LearningMaterialType = 1
	LearningMaterialType_LEARNING_MATERIAL_FLASH_CARD         LearningMaterialType = 2
	LearningMaterialType_LEARNING_MATERIAL_GENERAL_ASSIGNMENT LearningMaterialType = 3
	LearningMaterialType_LEARNING_MATERIAL_TASK_ASSIGNMENT    LearningMaterialType = 5
)

// Enum value maps for LearningMaterialType.
var (
	LearningMaterialType_name = map[int32]string{
		0: "LEARNING_MATERIAL_LEARNING_OBJECTIVE",
		1: "LEARNING_MATERIAL_EXAM_LO",
		2: "LEARNING_MATERIAL_FLASH_CARD",
		3: "LEARNING_MATERIAL_GENERAL_ASSIGNMENT",
		5: "LEARNING_MATERIAL_TASK_ASSIGNMENT",
	}
	LearningMaterialType_value = map[string]int32{
		"LEARNING_MATERIAL_LEARNING_OBJECTIVE": 0,
		"LEARNING_MATERIAL_EXAM_LO":            1,
		"LEARNING_MATERIAL_FLASH_CARD":         2,
		"LEARNING_MATERIAL_GENERAL_ASSIGNMENT": 3,
		"LEARNING_MATERIAL_TASK_ASSIGNMENT":    5,
	}
)

func (x LearningMaterialType) Enum() *LearningMaterialType {
	p := new(LearningMaterialType)
	*p = x
	return p
}

func (x LearningMaterialType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LearningMaterialType) Descriptor() protoreflect.EnumDescriptor {
	return file_syllabus_v1_enums_proto_enumTypes[0].Descriptor()
}

func (LearningMaterialType) Type() protoreflect.EnumType {
	return &file_syllabus_v1_enums_proto_enumTypes[0]
}

func (x LearningMaterialType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LearningMaterialType.Descriptor instead.
func (LearningMaterialType) EnumDescriptor() ([]byte, []int) {
	return file_syllabus_v1_enums_proto_rawDescGZIP(), []int{0}
}

type AchievementCrown int32

const (
	AchievementCrown_ACHIEVEMENT_CROWN_NONE   AchievementCrown = 0
	AchievementCrown_ACHIEVEMENT_CROWN_BRONZE AchievementCrown = 1
	AchievementCrown_ACHIEVEMENT_CROWN_SILVER AchievementCrown = 2
	AchievementCrown_ACHIEVEMENT_CROWN_GOLD   AchievementCrown = 3
)

// Enum value maps for AchievementCrown.
var (
	AchievementCrown_name = map[int32]string{
		0: "ACHIEVEMENT_CROWN_NONE",
		1: "ACHIEVEMENT_CROWN_BRONZE",
		2: "ACHIEVEMENT_CROWN_SILVER",
		3: "ACHIEVEMENT_CROWN_GOLD",
	}
	AchievementCrown_value = map[string]int32{
		"ACHIEVEMENT_CROWN_NONE":   0,
		"ACHIEVEMENT_CROWN_BRONZE": 1,
		"ACHIEVEMENT_CROWN_SILVER": 2,
		"ACHIEVEMENT_CROWN_GOLD":   3,
	}
)

func (x AchievementCrown) Enum() *AchievementCrown {
	p := new(AchievementCrown)
	*p = x
	return p
}

func (x AchievementCrown) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AchievementCrown) Descriptor() protoreflect.EnumDescriptor {
	return file_syllabus_v1_enums_proto_enumTypes[1].Descriptor()
}

func (AchievementCrown) Type() protoreflect.EnumType {
	return &file_syllabus_v1_enums_proto_enumTypes[1]
}

func (x AchievementCrown) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AchievementCrown.Descriptor instead.
func (AchievementCrown) EnumDescriptor() ([]byte, []int) {
	return file_syllabus_v1_enums_proto_rawDescGZIP(), []int{1}
}

type SubmissionStatus int32

const (
	SubmissionStatus_SUBMISSION_STATUS_NONE           SubmissionStatus = 0
	SubmissionStatus_SUBMISSION_STATUS_NOT_MARKED     SubmissionStatus = 1
	SubmissionStatus_SUBMISSION_STATUS_IN_PROGRESS    SubmissionStatus = 2
	SubmissionStatus_SUBMISSION_STATUS_MARKED         SubmissionStatus = 3
	SubmissionStatus_SUBMISSION_STATUS_RETURNED       SubmissionStatus = 4
	SubmissionStatus_SUBMISSION_STATUS_PENDING_RETURN SubmissionStatus = 5
	SubmissionStatus_SUBMISSION_STATUS_REJECTED       SubmissionStatus = 6
)

// Enum value maps for SubmissionStatus.
var (
	SubmissionStatus_name = map[int32]string{
		0: "SUBMISSION_STATUS_NONE",
		1: "SUBMISSION_STATUS_NOT_MARKED",
		2: "SUBMISSION_STATUS_IN_PROGRESS",
		3: "SUBMISSION_STATUS_MARKED",
		4: "SUBMISSION_STATUS_RETURNED",
		5: "SUBMISSION_STATUS_PENDING_RETURN",
		6: "SUBMISSION_STATUS_REJECTED",
	}
	SubmissionStatus_value = map[string]int32{
		"SUBMISSION_STATUS_NONE":           0,
		"SUBMISSION_STATUS_NOT_MARKED":     1,
		"SUBMISSION_STATUS_IN_PROGRESS":    2,
		"SUBMISSION_STATUS_MARKED":         3,
		"SUBMISSION_STATUS_RETURNED":       4,
		"SUBMISSION_STATUS_PENDING_RETURN": 5,
		"SUBMISSION_STATUS_REJECTED":       6,
	}
)

func (x SubmissionStatus) Enum() *SubmissionStatus {
	p := new(SubmissionStatus)
	*p = x
	return p
}

func (x SubmissionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubmissionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_syllabus_v1_enums_proto_enumTypes[2].Descriptor()
}

func (SubmissionStatus) Type() protoreflect.EnumType {
	return &file_syllabus_v1_enums_proto_enumTypes[2]
}

func (x SubmissionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubmissionStatus.Descriptor instead.
func (SubmissionStatus) EnumDescriptor() ([]byte, []int) {
	return file_syllabus_v1_enums_proto_rawDescGZIP(), []int{2}
}

type SubmissionUnderstandingLevel int32

const (
	SubmissionUnderstandingLevel_SUBMISSION_UNDERSTANDING_LEVEL_NONE    SubmissionUnderstandingLevel = 0
	SubmissionUnderstandingLevel_SUBMISSION_UNDERSTANDING_LEVEL_SAD     SubmissionUnderstandingLevel = 1
	SubmissionUnderstandingLevel_SUBMISSION_UNDERSTANDING_LEVEL_NEUTRAL SubmissionUnderstandingLevel = 2
	SubmissionUnderstandingLevel_SUBMISSION_UNDERSTANDING_LEVEL_HAPPY   SubmissionUnderstandingLevel = 3
)

// Enum value maps for SubmissionUnderstandingLevel.
var (
	SubmissionUnderstandingLevel_name = map[int32]string{
		0: "SUBMISSION_UNDERSTANDING_LEVEL_NONE",
		1: "SUBMISSION_UNDERSTANDING_LEVEL_SAD",
		2: "SUBMISSION_UNDERSTANDING_LEVEL_NEUTRAL",
		3: "SUBMISSION_UNDERSTANDING_LEVEL_HAPPY",
	}
	SubmissionUnderstandingLevel_value = map[string]int32{
		"SUBMISSION_UNDERSTANDING_LEVEL_NONE":    0,
		"SUBMISSION_UNDERSTANDING_LEVEL_SAD":     1,
		"SUBMISSION_UNDERSTANDING_LEVEL_NEUTRAL": 2,
		"SUBMISSION_UNDERSTANDING_LEVEL_HAPPY":   3,
	}
)

func (x SubmissionUnderstandingLevel) Enum() *SubmissionUnderstandingLevel {
	p := new(SubmissionUnderstandingLevel)
	*p = x
	return p
}

func (x SubmissionUnderstandingLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubmissionUnderstandingLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_syllabus_v1_enums_proto_enumTypes[3].Descriptor()
}

func (SubmissionUnderstandingLevel) Type() protoreflect.EnumType {
	return &file_syllabus_v1_enums_proto_enumTypes[3]
}

func (x SubmissionUnderstandingLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubmissionUnderstandingLevel.Descriptor instead.
func (SubmissionUnderstandingLevel) EnumDescriptor() ([]byte, []int) {
	return file_syllabus_v1_enums_proto_rawDescGZIP(), []int{3}
}

type StudyPlanStatus int32

const (
	StudyPlanStatus_STUDY_PLAN_STATUS_NONE     StudyPlanStatus = 0
	StudyPlanStatus_STUDY_PLAN_STATUS_ACTIVE   StudyPlanStatus = 1
	StudyPlanStatus_STUDY_PLAN_STATUS_ARCHIVED StudyPlanStatus = 2
)

// Enum value maps for StudyPlanStatus.
var (
	StudyPlanStatus_name = map[int32]string{
		0: "STUDY_PLAN_STATUS_NONE",
		1: "STUDY_PLAN_STATUS_ACTIVE",
		2: "STUDY_PLAN_STATUS_ARCHIVED",
	}
	StudyPlanStatus_value = map[string]int32{
		"STUDY_PLAN_STATUS_NONE":     0,
		"STUDY_PLAN_STATUS_ACTIVE":   1,
		"STUDY_PLAN_STATUS_ARCHIVED": 2,
	}
)

func (x StudyPlanStatus) Enum() *StudyPlanStatus {
	p := new(StudyPlanStatus)
	*p = x
	return p
}

func (x StudyPlanStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StudyPlanStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_syllabus_v1_enums_proto_enumTypes[4].Descriptor()
}

func (StudyPlanStatus) Type() protoreflect.EnumType {
	return &file_syllabus_v1_enums_proto_enumTypes[4]
}

func (x StudyPlanStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StudyPlanStatus.Descriptor instead.
func (StudyPlanStatus) EnumDescriptor() ([]byte, []int) {
	return file_syllabus_v1_enums_proto_rawDescGZIP(), []int{4}
}

type StudyPlanItemToDoStatus int32

const (
	StudyPlanItemToDoStatus_STUDY_PLAN_ITEM_TO_DO_STATUS_NONE      StudyPlanItemToDoStatus = 0
	StudyPlanItemToDoStatus_STUDY_PLAN_ITEM_TO_DO_STATUS_ACTIVE    StudyPlanItemToDoStatus = 1
	StudyPlanItemToDoStatus_STUDY_PLAN_ITEM_TO_DO_STATUS_OVERDUE   StudyPlanItemToDoStatus = 2
	StudyPlanItemToDoStatus_STUDY_PLAN_ITEM_TO_DO_STATUS_COMPLETED StudyPlanItemToDoStatus = 3
	StudyPlanItemToDoStatus_STUDY_PLAN_ITEM_TO_DO_STATUS_UPCOMING  StudyPlanItemToDoStatus = 4
)

// Enum value maps for StudyPlanItemToDoStatus.
var (
	StudyPlanItemToDoStatus_name = map[int32]string{
		0: "STUDY_PLAN_ITEM_TO_DO_STATUS_NONE",
		1: "STUDY_PLAN_ITEM_TO_DO_STATUS_ACTIVE",
		2: "STUDY_PLAN_ITEM_TO_DO_STATUS_OVERDUE",
		3: "STUDY_PLAN_ITEM_TO_DO_STATUS_COMPLETED",
		4: "STUDY_PLAN_ITEM_TO_DO_STATUS_UPCOMING",
	}
	StudyPlanItemToDoStatus_value = map[string]int32{
		"STUDY_PLAN_ITEM_TO_DO_STATUS_NONE":      0,
		"STUDY_PLAN_ITEM_TO_DO_STATUS_ACTIVE":    1,
		"STUDY_PLAN_ITEM_TO_DO_STATUS_OVERDUE":   2,
		"STUDY_PLAN_ITEM_TO_DO_STATUS_COMPLETED": 3,
		"STUDY_PLAN_ITEM_TO_DO_STATUS_UPCOMING":  4,
	}
)

func (x StudyPlanItemToDoStatus) Enum() *StudyPlanItemToDoStatus {
	p := new(StudyPlanItemToDoStatus)
	*p = x
	return p
}

func (x StudyPlanItemToDoStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StudyPlanItemToDoStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_syllabus_v1_enums_proto_enumTypes[5].Descriptor()
}

func (StudyPlanItemToDoStatus) Type() protoreflect.EnumType {
	return &file_syllabus_v1_enums_proto_enumTypes[5]
}

func (x StudyPlanItemToDoStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StudyPlanItemToDoStatus.Descriptor instead.
func (StudyPlanItemToDoStatus) EnumDescriptor() ([]byte, []int) {
	return file_syllabus_v1_enums_proto_rawDescGZIP(), []int{5}
}

type StudyPlanItemStatus int32

const (
	StudyPlanItemStatus_STUDY_PLAN_ITEM_STATUS_NONE     StudyPlanItemStatus = 0
	StudyPlanItemStatus_STUDY_PLAN_ITEM_STATUS_ACTIVE   StudyPlanItemStatus = 1
	StudyPlanItemStatus_STUDY_PLAN_ITEM_STATUS_ARCHIVED StudyPlanItemStatus = 2
)

// Enum value maps for StudyPlanItemStatus.
var (
	StudyPlanItemStatus_name = map[int32]string{
		0: "STUDY_PLAN_ITEM_STATUS_NONE",
		1: "STUDY_PLAN_ITEM_STATUS_ACTIVE",
		2: "STUDY_PLAN_ITEM_STATUS_ARCHIVED",
	}
	StudyPlanItemStatus_value = map[string]int32{
		"STUDY_PLAN_ITEM_STATUS_NONE":     0,
		"STUDY_PLAN_ITEM_STATUS_ACTIVE":   1,
		"STUDY_PLAN_ITEM_STATUS_ARCHIVED": 2,
	}
)

func (x StudyPlanItemStatus) Enum() *StudyPlanItemStatus {
	p := new(StudyPlanItemStatus)
	*p = x
	return p
}

func (x StudyPlanItemStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StudyPlanItemStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_syllabus_v1_enums_proto_enumTypes[6].Descriptor()
}

func (StudyPlanItemStatus) Type() protoreflect.EnumType {
	return &file_syllabus_v1_enums_proto_enumTypes[6]
}

func (x StudyPlanItemStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StudyPlanItemStatus.Descriptor instead.
func (StudyPlanItemStatus) EnumDescriptor() ([]byte, []int) {
	return file_syllabus_v1_enums_proto_rawDescGZIP(), []int{6}
}

type ExamLOSubmissionResult int32

const (
	ExamLOSubmissionResult_EXAM_LO_SUBMISSION_WAITING_FOR_GRADE ExamLOSubmissionResult = 0
	ExamLOSubmissionResult_EXAM_LO_SUBMISSION_PASSED            ExamLOSubmissionResult = 1
	ExamLOSubmissionResult_EXAM_LO_SUBMISSION_FAILED            ExamLOSubmissionResult = 2
	ExamLOSubmissionResult_EXAM_LO_SUBMISSION_COMPLETED         ExamLOSubmissionResult = 3
)

// Enum value maps for ExamLOSubmissionResult.
var (
	ExamLOSubmissionResult_name = map[int32]string{
		0: "EXAM_LO_SUBMISSION_WAITING_FOR_GRADE",
		1: "EXAM_LO_SUBMISSION_PASSED",
		2: "EXAM_LO_SUBMISSION_FAILED",
		3: "EXAM_LO_SUBMISSION_COMPLETED",
	}
	ExamLOSubmissionResult_value = map[string]int32{
		"EXAM_LO_SUBMISSION_WAITING_FOR_GRADE": 0,
		"EXAM_LO_SUBMISSION_PASSED":            1,
		"EXAM_LO_SUBMISSION_FAILED":            2,
		"EXAM_LO_SUBMISSION_COMPLETED":         3,
	}
)

func (x ExamLOSubmissionResult) Enum() *ExamLOSubmissionResult {
	p := new(ExamLOSubmissionResult)
	*p = x
	return p
}

func (x ExamLOSubmissionResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExamLOSubmissionResult) Descriptor() protoreflect.EnumDescriptor {
	return file_syllabus_v1_enums_proto_enumTypes[7].Descriptor()
}

func (ExamLOSubmissionResult) Type() protoreflect.EnumType {
	return &file_syllabus_v1_enums_proto_enumTypes[7]
}

func (x ExamLOSubmissionResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExamLOSubmissionResult.Descriptor instead.
func (ExamLOSubmissionResult) EnumDescriptor() ([]byte, []int) {
	return file_syllabus_v1_enums_proto_rawDescGZIP(), []int{7}
}

type ApproveGradingAction int32

const (
	ApproveGradingAction_APPROVE_ACTION_NONE     ApproveGradingAction = 0
	ApproveGradingAction_APPROVE_ACTION_APPROVED ApproveGradingAction = 1
	ApproveGradingAction_APPROVE_ACTION_REJECTED ApproveGradingAction = 2
)

// Enum value maps for ApproveGradingAction.
var (
	ApproveGradingAction_name = map[int32]string{
		0: "APPROVE_ACTION_NONE",
		1: "APPROVE_ACTION_APPROVED",
		2: "APPROVE_ACTION_REJECTED",
	}
	ApproveGradingAction_value = map[string]int32{
		"APPROVE_ACTION_NONE":     0,
		"APPROVE_ACTION_APPROVED": 1,
		"APPROVE_ACTION_REJECTED": 2,
	}
)

func (x ApproveGradingAction) Enum() *ApproveGradingAction {
	p := new(ApproveGradingAction)
	*p = x
	return p
}

func (x ApproveGradingAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApproveGradingAction) Descriptor() protoreflect.EnumDescriptor {
	return file_syllabus_v1_enums_proto_enumTypes[8].Descriptor()
}

func (ApproveGradingAction) Type() protoreflect.EnumType {
	return &file_syllabus_v1_enums_proto_enumTypes[8]
}

func (x ApproveGradingAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApproveGradingAction.Descriptor instead.
func (ApproveGradingAction) EnumDescriptor() ([]byte, []int) {
	return file_syllabus_v1_enums_proto_rawDescGZIP(), []int{8}
}

type SearchType int32

const (
	SearchType_SEARCH_TYPE_NONE            SearchType = 0
	SearchType_SEARCH_TYPE_ASSIGNMENT_NAME SearchType = 1
	SearchType_SEARCH_TYPE_STUDENT_NAME    SearchType = 2
)

// Enum value maps for SearchType.
var (
	SearchType_name = map[int32]string{
		0: "SEARCH_TYPE_NONE",
		1: "SEARCH_TYPE_ASSIGNMENT_NAME",
		2: "SEARCH_TYPE_STUDENT_NAME",
	}
	SearchType_value = map[string]int32{
		"SEARCH_TYPE_NONE":            0,
		"SEARCH_TYPE_ASSIGNMENT_NAME": 1,
		"SEARCH_TYPE_STUDENT_NAME":    2,
	}
)

func (x SearchType) Enum() *SearchType {
	p := new(SearchType)
	*p = x
	return p
}

func (x SearchType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchType) Descriptor() protoreflect.EnumDescriptor {
	return file_syllabus_v1_enums_proto_enumTypes[9].Descriptor()
}

func (SearchType) Type() protoreflect.EnumType {
	return &file_syllabus_v1_enums_proto_enumTypes[9]
}

func (x SearchType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchType.Descriptor instead.
func (SearchType) EnumDescriptor() ([]byte, []int) {
	return file_syllabus_v1_enums_proto_rawDescGZIP(), []int{9}
}

// FlashcardQuizStudyStatus describe all flashcard quiz study Status
type FlashcardQuizStudyStatus int32

const (
	FlashcardQuizStudyStatus_FLASHCARD_QUIZ_STUDY_STATUS_NONE       FlashcardQuizStudyStatus = 0
	FlashcardQuizStudyStatus_FLASHCARD_QUIZ_STUDY_STATUS_SKIPPED    FlashcardQuizStudyStatus = 1
	FlashcardQuizStudyStatus_FLASHCARD_QUIZ_STUDY_STATUS_REMEMBERED FlashcardQuizStudyStatus = 2
)

// Enum value maps for FlashcardQuizStudyStatus.
var (
	FlashcardQuizStudyStatus_name = map[int32]string{
		0: "FLASHCARD_QUIZ_STUDY_STATUS_NONE",
		1: "FLASHCARD_QUIZ_STUDY_STATUS_SKIPPED",
		2: "FLASHCARD_QUIZ_STUDY_STATUS_REMEMBERED",
	}
	FlashcardQuizStudyStatus_value = map[string]int32{
		"FLASHCARD_QUIZ_STUDY_STATUS_NONE":       0,
		"FLASHCARD_QUIZ_STUDY_STATUS_SKIPPED":    1,
		"FLASHCARD_QUIZ_STUDY_STATUS_REMEMBERED": 2,
	}
)

func (x FlashcardQuizStudyStatus) Enum() *FlashcardQuizStudyStatus {
	p := new(FlashcardQuizStudyStatus)
	*p = x
	return p
}

func (x FlashcardQuizStudyStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlashcardQuizStudyStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_syllabus_v1_enums_proto_enumTypes[10].Descriptor()
}

func (FlashcardQuizStudyStatus) Type() protoreflect.EnumType {
	return &file_syllabus_v1_enums_proto_enumTypes[10]
}

func (x FlashcardQuizStudyStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlashcardQuizStudyStatus.Descriptor instead.
func (FlashcardQuizStudyStatus) EnumDescriptor() ([]byte, []int) {
	return file_syllabus_v1_enums_proto_rawDescGZIP(), []int{10}
}

type ExamLOReviewOption int32

const (
	ExamLOReviewOption_EXAM_LO_REVIEW_OPTION_IMMEDIATELY    ExamLOReviewOption = 0
	ExamLOReviewOption_EXAM_LO_REVIEW_OPTION_AFTER_DUE_DATE ExamLOReviewOption = 1
)

// Enum value maps for ExamLOReviewOption.
var (
	ExamLOReviewOption_name = map[int32]string{
		0: "EXAM_LO_REVIEW_OPTION_IMMEDIATELY",
		1: "EXAM_LO_REVIEW_OPTION_AFTER_DUE_DATE",
	}
	ExamLOReviewOption_value = map[string]int32{
		"EXAM_LO_REVIEW_OPTION_IMMEDIATELY":    0,
		"EXAM_LO_REVIEW_OPTION_AFTER_DUE_DATE": 1,
	}
)

func (x ExamLOReviewOption) Enum() *ExamLOReviewOption {
	p := new(ExamLOReviewOption)
	*p = x
	return p
}

func (x ExamLOReviewOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExamLOReviewOption) Descriptor() protoreflect.EnumDescriptor {
	return file_syllabus_v1_enums_proto_enumTypes[11].Descriptor()
}

func (ExamLOReviewOption) Type() protoreflect.EnumType {
	return &file_syllabus_v1_enums_proto_enumTypes[11]
}

func (x ExamLOReviewOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExamLOReviewOption.Descriptor instead.
func (ExamLOReviewOption) EnumDescriptor() ([]byte, []int) {
	return file_syllabus_v1_enums_proto_rawDescGZIP(), []int{11}
}

type LearningMaterialVendorType int32

const (
	LearningMaterialVendorType_LM_VENDOR_TYPE_MANABIE    LearningMaterialVendorType = 0
	LearningMaterialVendorType_LM_VENDOR_TYPE_LEARNOSITY LearningMaterialVendorType = 1
)

// Enum value maps for LearningMaterialVendorType.
var (
	LearningMaterialVendorType_name = map[int32]string{
		0: "LM_VENDOR_TYPE_MANABIE",
		1: "LM_VENDOR_TYPE_LEARNOSITY",
	}
	LearningMaterialVendorType_value = map[string]int32{
		"LM_VENDOR_TYPE_MANABIE":    0,
		"LM_VENDOR_TYPE_LEARNOSITY": 1,
	}
)

func (x LearningMaterialVendorType) Enum() *LearningMaterialVendorType {
	p := new(LearningMaterialVendorType)
	*p = x
	return p
}

func (x LearningMaterialVendorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LearningMaterialVendorType) Descriptor() protoreflect.EnumDescriptor {
	return file_syllabus_v1_enums_proto_enumTypes[12].Descriptor()
}

func (LearningMaterialVendorType) Type() protoreflect.EnumType {
	return &file_syllabus_v1_enums_proto_enumTypes[12]
}

func (x LearningMaterialVendorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LearningMaterialVendorType.Descriptor instead.
func (LearningMaterialVendorType) EnumDescriptor() ([]byte, []int) {
	return file_syllabus_v1_enums_proto_rawDescGZIP(), []int{12}
}

type AssessmentSessionStatus int32

const (
	AssessmentSessionStatus_ASSESSMENT_SESSION_STATUS_NONE       AssessmentSessionStatus = 0
	AssessmentSessionStatus_ASSESSMENT_SESSION_STATUS_INCOMPLETE AssessmentSessionStatus = 1
	AssessmentSessionStatus_ASSESSMENT_SESSION_STATUS_COMPLETED  AssessmentSessionStatus = 2
)

// Enum value maps for AssessmentSessionStatus.
var (
	AssessmentSessionStatus_name = map[int32]string{
		0: "ASSESSMENT_SESSION_STATUS_NONE",
		1: "ASSESSMENT_SESSION_STATUS_INCOMPLETE",
		2: "ASSESSMENT_SESSION_STATUS_COMPLETED",
	}
	AssessmentSessionStatus_value = map[string]int32{
		"ASSESSMENT_SESSION_STATUS_NONE":       0,
		"ASSESSMENT_SESSION_STATUS_INCOMPLETE": 1,
		"ASSESSMENT_SESSION_STATUS_COMPLETED":  2,
	}
)

func (x AssessmentSessionStatus) Enum() *AssessmentSessionStatus {
	p := new(AssessmentSessionStatus)
	*p = x
	return p
}

func (x AssessmentSessionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssessmentSessionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_syllabus_v1_enums_proto_enumTypes[13].Descriptor()
}

func (AssessmentSessionStatus) Type() protoreflect.EnumType {
	return &file_syllabus_v1_enums_proto_enumTypes[13]
}

func (x AssessmentSessionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssessmentSessionStatus.Descriptor instead.
func (AssessmentSessionStatus) EnumDescriptor() ([]byte, []int) {
	return file_syllabus_v1_enums_proto_rawDescGZIP(), []int{13}
}

type ItemsBankErrorCode int32

const (
	ItemsBankErrorCode_ERR_UNKNOWN                     ItemsBankErrorCode = 0
	ItemsBankErrorCode_ERR_CORRECT_OPTION_MISSING      ItemsBankErrorCode = 1
	ItemsBankErrorCode_ERR_ITEM_DESCRIPTION_INVALID    ItemsBankErrorCode = 2
	ItemsBankErrorCode_ERR_QUESTION_LIMIT_EXCEEDED     ItemsBankErrorCode = 3
	ItemsBankErrorCode_ERR_DATA_TYPE_INVALID           ItemsBankErrorCode = 4
	ItemsBankErrorCode_ERR_REQUIRED_VALUE_MISSING      ItemsBankErrorCode = 5
	ItemsBankErrorCode_ERR_LO_ID_INVALID               ItemsBankErrorCode = 6
	ItemsBankErrorCode_ERR_QUESTION_TYPE_INVALID       ItemsBankErrorCode = 7
	ItemsBankErrorCode_ERR_OPTIONS_MISSING             ItemsBankErrorCode = 8
	ItemsBankErrorCode_ERR_NO_OPTION_SELECTED          ItemsBankErrorCode = 9
	ItemsBankErrorCode_ERR_FIB_OPTIONS_INVALID         ItemsBankErrorCode = 10
	ItemsBankErrorCode_ERR_VALUE_OUT_OF_RANGE          ItemsBankErrorCode = 11
	ItemsBankErrorCode_ERR_ITEM_ID_ALREADY_EXISTS      ItemsBankErrorCode = 12
	ItemsBankErrorCode_ERR_MCQ_CORRECT_OPTIONS_INVALID ItemsBankErrorCode = 13
	ItemsBankErrorCode_ERR_IMAGE_INVALID               ItemsBankErrorCode = 14
	ItemsBankErrorCode_ERR_MIQ_EXPLANATION_MISSING     ItemsBankErrorCode = 15
	ItemsBankErrorCode_ERR_ITEM_ID_INVALID             ItemsBankErrorCode = 16
)

// Enum value maps for ItemsBankErrorCode.
var (
	ItemsBankErrorCode_name = map[int32]string{
		0:  "ERR_UNKNOWN",
		1:  "ERR_CORRECT_OPTION_MISSING",
		2:  "ERR_ITEM_DESCRIPTION_INVALID",
		3:  "ERR_QUESTION_LIMIT_EXCEEDED",
		4:  "ERR_DATA_TYPE_INVALID",
		5:  "ERR_REQUIRED_VALUE_MISSING",
		6:  "ERR_LO_ID_INVALID",
		7:  "ERR_QUESTION_TYPE_INVALID",
		8:  "ERR_OPTIONS_MISSING",
		9:  "ERR_NO_OPTION_SELECTED",
		10: "ERR_FIB_OPTIONS_INVALID",
		11: "ERR_VALUE_OUT_OF_RANGE",
		12: "ERR_ITEM_ID_ALREADY_EXISTS",
		13: "ERR_MCQ_CORRECT_OPTIONS_INVALID",
		14: "ERR_IMAGE_INVALID",
		15: "ERR_MIQ_EXPLANATION_MISSING",
		16: "ERR_ITEM_ID_INVALID",
	}
	ItemsBankErrorCode_value = map[string]int32{
		"ERR_UNKNOWN":                     0,
		"ERR_CORRECT_OPTION_MISSING":      1,
		"ERR_ITEM_DESCRIPTION_INVALID":    2,
		"ERR_QUESTION_LIMIT_EXCEEDED":     3,
		"ERR_DATA_TYPE_INVALID":           4,
		"ERR_REQUIRED_VALUE_MISSING":      5,
		"ERR_LO_ID_INVALID":               6,
		"ERR_QUESTION_TYPE_INVALID":       7,
		"ERR_OPTIONS_MISSING":             8,
		"ERR_NO_OPTION_SELECTED":          9,
		"ERR_FIB_OPTIONS_INVALID":         10,
		"ERR_VALUE_OUT_OF_RANGE":          11,
		"ERR_ITEM_ID_ALREADY_EXISTS":      12,
		"ERR_MCQ_CORRECT_OPTIONS_INVALID": 13,
		"ERR_IMAGE_INVALID":               14,
		"ERR_MIQ_EXPLANATION_MISSING":     15,
		"ERR_ITEM_ID_INVALID":             16,
	}
)

func (x ItemsBankErrorCode) Enum() *ItemsBankErrorCode {
	p := new(ItemsBankErrorCode)
	*p = x
	return p
}

func (x ItemsBankErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemsBankErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_syllabus_v1_enums_proto_enumTypes[14].Descriptor()
}

func (ItemsBankErrorCode) Type() protoreflect.EnumType {
	return &file_syllabus_v1_enums_proto_enumTypes[14]
}

func (x ItemsBankErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ItemsBankErrorCode.Descriptor instead.
func (ItemsBankErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_syllabus_v1_enums_proto_rawDescGZIP(), []int{14}
}

type MediaType int32

const (
	MediaType_MEDIA_TYPE_NONE  MediaType = 0
	MediaType_MEDIA_TYPE_IMAGE MediaType = 1
)

// Enum value maps for MediaType.
var (
	MediaType_name = map[int32]string{
		0: "MEDIA_TYPE_NONE",
		1: "MEDIA_TYPE_IMAGE",
	}
	MediaType_value = map[string]int32{
		"MEDIA_TYPE_NONE":  0,
		"MEDIA_TYPE_IMAGE": 1,
	}
)

func (x MediaType) Enum() *MediaType {
	p := new(MediaType)
	*p = x
	return p
}

func (x MediaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MediaType) Descriptor() protoreflect.EnumDescriptor {
	return file_syllabus_v1_enums_proto_enumTypes[15].Descriptor()
}

func (MediaType) Type() protoreflect.EnumType {
	return &file_syllabus_v1_enums_proto_enumTypes[15]
}

func (x MediaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MediaType.Descriptor instead.
func (MediaType) EnumDescriptor() ([]byte, []int) {
	return file_syllabus_v1_enums_proto_rawDescGZIP(), []int{15}
}

var File_syllabus_v1_enums_proto protoreflect.FileDescriptor

var file_syllabus_v1_enums_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73, 0x79, 0x6c, 0x6c, 0x61,
	0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2a, 0xfc, 0x01, 0x0a, 0x14, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x28, 0x0a, 0x24, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x54, 0x45,
	0x52, 0x49, 0x41, 0x4c, 0x5f, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x45, 0x41,
	0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x45,
	0x58, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x4c, 0x45, 0x41, 0x52,
	0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x46, 0x4c,
	0x41, 0x53, 0x48, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x4c, 0x45,
	0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f,
	0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x03, 0x12, 0x25, 0x0a, 0x21, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47,
	0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x41,
	0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x22, 0x04, 0x08, 0x04, 0x10,
	0x04, 0x2a, 0x22, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x54, 0x45,
	0x52, 0x49, 0x41, 0x4c, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x4c, 0x45, 0x41,
	0x52, 0x4e, 0x49, 0x4e, 0x47, 0x2a, 0x86, 0x01, 0x0a, 0x10, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x6f, 0x77, 0x6e, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43,
	0x48, 0x49, 0x45, 0x56, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x4f, 0x57, 0x4e, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x4f, 0x57, 0x4e, 0x5f, 0x42, 0x52, 0x4f, 0x4e,
	0x5a, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x49, 0x4c, 0x56, 0x45, 0x52,
	0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43, 0x48, 0x49, 0x45, 0x56, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x43, 0x52, 0x4f, 0x57, 0x4e, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x10, 0x03, 0x2a, 0xf7,
	0x01, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x20, 0x0a, 0x1c, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x55, 0x42, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45,
	0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x06, 0x2a, 0xc5, 0x01, 0x0a, 0x1c, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x55, 0x42,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x53, 0x54, 0x41,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x53, 0x41, 0x44, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x55,
	0x42, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x53, 0x54,
	0x41, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4e, 0x45, 0x55,
	0x54, 0x52, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x48, 0x41, 0x50, 0x50, 0x59, 0x10, 0x03,
	0x2a, 0x6b, 0x0a, 0x0f, 0x53, 0x74, 0x75, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x55, 0x44, 0x59, 0x5f, 0x50, 0x4c, 0x41,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x1c, 0x0a, 0x18, 0x53, 0x54, 0x55, 0x44, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x1e, 0x0a,
	0x1a, 0x53, 0x54, 0x55, 0x44, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x44, 0x10, 0x02, 0x2a, 0xea, 0x01,
	0x0a, 0x17, 0x53, 0x74, 0x75, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x54,
	0x6f, 0x44, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x55,
	0x44, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x4f, 0x5f,
	0x44, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x55, 0x44, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x49,
	0x54, 0x45, 0x4d, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x54, 0x55,
	0x44, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x4f, 0x5f,
	0x44, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x44, 0x55,
	0x45, 0x10, 0x02, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x54, 0x55, 0x44, 0x59, 0x5f, 0x50, 0x4c, 0x41,
	0x4e, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x4f, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x29, 0x0a, 0x25, 0x53, 0x54, 0x55, 0x44, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x50, 0x43, 0x4f, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x2a, 0x7e, 0x0a, 0x13, 0x53, 0x74,
	0x75, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x55, 0x44, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f,
	0x49, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x55, 0x44, 0x59, 0x5f, 0x50, 0x4c, 0x41, 0x4e,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x54, 0x55, 0x44, 0x59, 0x5f, 0x50,
	0x4c, 0x41, 0x4e, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x44, 0x10, 0x02, 0x2a, 0xa2, 0x01, 0x0a, 0x16, 0x45,
	0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x58, 0x41, 0x4d, 0x5f, 0x4c, 0x4f,
	0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x41, 0x49, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x47, 0x52, 0x41, 0x44, 0x45, 0x10, 0x00, 0x12,
	0x1d, 0x0a, 0x19, 0x45, 0x58, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1d,
	0x0a, 0x19, 0x45, 0x58, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x20, 0x0a,
	0x1c, 0x45, 0x58, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a,
	0x69, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x47, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x50, 0x50, 0x52, 0x4f,
	0x56, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x1b, 0x0a, 0x17, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a,
	0x17, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x61, 0x0a, 0x0a, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x41, 0x52,
	0x43, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1f,
	0x0a, 0x1b, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53,
	0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12,
	0x1c, 0x0a, 0x18, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x55, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x2a, 0x95, 0x01,
	0x0a, 0x18, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x63, 0x61, 0x72, 0x64, 0x51, 0x75, 0x69, 0x7a, 0x53,
	0x74, 0x75, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x20, 0x46, 0x4c,
	0x41, 0x53, 0x48, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x51, 0x55, 0x49, 0x5a, 0x5f, 0x53, 0x54, 0x55,
	0x44, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x27, 0x0a, 0x23, 0x46, 0x4c, 0x41, 0x53, 0x48, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x51, 0x55,
	0x49, 0x5a, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x46, 0x4c, 0x41,
	0x53, 0x48, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x51, 0x55, 0x49, 0x5a, 0x5f, 0x53, 0x54, 0x55, 0x44,
	0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x65, 0x0a, 0x12, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x21, 0x45,
	0x58, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x4f, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x4c, 0x59,
	0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x58, 0x41, 0x4d, 0x5f, 0x4c, 0x4f, 0x5f, 0x52, 0x45,
	0x56, 0x49, 0x45, 0x57, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x46, 0x54, 0x45,
	0x52, 0x5f, 0x44, 0x55, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x2a, 0x57, 0x0a, 0x1a,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x4d,
	0x5f, 0x56, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e,
	0x41, 0x42, 0x49, 0x45, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x4d, 0x5f, 0x56, 0x45, 0x4e,
	0x44, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x4f, 0x53,
	0x49, 0x54, 0x59, 0x10, 0x01, 0x2a, 0x90, 0x01, 0x0a, 0x17, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x12,
	0x27, 0x0a, 0x23, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0xfd, 0x03, 0x0a, 0x12, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x42, 0x61, 0x6e, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x0f, 0x0a, 0x0b, 0x45, 0x52, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x52, 0x52, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f,
	0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x20, 0x0a, 0x1c, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x45, 0x53,
	0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x52, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x04, 0x12, 0x1e,
	0x0a, 0x1a, 0x45, 0x52, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x15,
	0x0a, 0x11, 0x45, 0x52, 0x52, 0x5f, 0x4c, 0x4f, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52, 0x52, 0x5f, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x5f, 0x4f, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x1a, 0x0a,
	0x16, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x45, 0x4c, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52,
	0x5f, 0x46, 0x49, 0x42, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45,
	0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x49,
	0x44, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53,
	0x10, 0x0c, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x52, 0x52, 0x5f, 0x4d, 0x43, 0x51, 0x5f, 0x43, 0x4f,
	0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x5f, 0x49,
	0x4d, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x0e, 0x12, 0x1f,
	0x0a, 0x1b, 0x45, 0x52, 0x52, 0x5f, 0x4d, 0x49, 0x51, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x41, 0x4e,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x0f, 0x12,
	0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x49, 0x44, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x10, 0x2a, 0x36, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x01,
	0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d,
	0x61, 0x6e, 0x61, 0x62, 0x69, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x73, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_syllabus_v1_enums_proto_rawDescOnce sync.Once
	file_syllabus_v1_enums_proto_rawDescData = file_syllabus_v1_enums_proto_rawDesc
)

func file_syllabus_v1_enums_proto_rawDescGZIP() []byte {
	file_syllabus_v1_enums_proto_rawDescOnce.Do(func() {
		file_syllabus_v1_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_syllabus_v1_enums_proto_rawDescData)
	})
	return file_syllabus_v1_enums_proto_rawDescData
}

var file_syllabus_v1_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 16)
var file_syllabus_v1_enums_proto_goTypes = []interface{}{
	(LearningMaterialType)(0),         // 0: syllabus.v1.LearningMaterialType
	(AchievementCrown)(0),             // 1: syllabus.v1.AchievementCrown
	(SubmissionStatus)(0),             // 2: syllabus.v1.SubmissionStatus
	(SubmissionUnderstandingLevel)(0), // 3: syllabus.v1.SubmissionUnderstandingLevel
	(StudyPlanStatus)(0),              // 4: syllabus.v1.StudyPlanStatus
	(StudyPlanItemToDoStatus)(0),      // 5: syllabus.v1.StudyPlanItemToDoStatus
	(StudyPlanItemStatus)(0),          // 6: syllabus.v1.StudyPlanItemStatus
	(ExamLOSubmissionResult)(0),       // 7: syllabus.v1.ExamLOSubmissionResult
	(ApproveGradingAction)(0),         // 8: syllabus.v1.ApproveGradingAction
	(SearchType)(0),                   // 9: syllabus.v1.SearchType
	(FlashcardQuizStudyStatus)(0),     // 10: syllabus.v1.FlashcardQuizStudyStatus
	(ExamLOReviewOption)(0),           // 11: syllabus.v1.ExamLOReviewOption
	(LearningMaterialVendorType)(0),   // 12: syllabus.v1.LearningMaterialVendorType
	(AssessmentSessionStatus)(0),      // 13: syllabus.v1.AssessmentSessionStatus
	(ItemsBankErrorCode)(0),           // 14: syllabus.v1.ItemsBankErrorCode
	(MediaType)(0),                    // 15: syllabus.v1.MediaType
}
var file_syllabus_v1_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_syllabus_v1_enums_proto_init() }
func file_syllabus_v1_enums_proto_init() {
	if File_syllabus_v1_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_syllabus_v1_enums_proto_rawDesc,
			NumEnums:      16,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_syllabus_v1_enums_proto_goTypes,
		DependencyIndexes: file_syllabus_v1_enums_proto_depIdxs,
		EnumInfos:         file_syllabus_v1_enums_proto_enumTypes,
	}.Build()
	File_syllabus_v1_enums_proto = out.File
	file_syllabus_v1_enums_proto_rawDesc = nil
	file_syllabus_v1_enums_proto_goTypes = nil
	file_syllabus_v1_enums_proto_depIdxs = nil
}
