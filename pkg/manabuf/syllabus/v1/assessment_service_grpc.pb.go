// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AssessmentClient is the client API for Assessment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssessmentClient interface {
	GetSignedRequest(ctx context.Context, in *GetSignedRequestRequest, opts ...grpc.CallOption) (*GetSignedRequestResponse, error)
}

type assessmentClient struct {
	cc grpc.ClientConnInterface
}

func NewAssessmentClient(cc grpc.ClientConnInterface) AssessmentClient {
	return &assessmentClient{cc}
}

func (c *assessmentClient) GetSignedRequest(ctx context.Context, in *GetSignedRequestRequest, opts ...grpc.CallOption) (*GetSignedRequestResponse, error) {
	out := new(GetSignedRequestResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.Assessment/GetSignedRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssessmentServer is the server API for Assessment service.
// All implementations should embed UnimplementedAssessmentServer
// for forward compatibility
type AssessmentServer interface {
	GetSignedRequest(context.Context, *GetSignedRequestRequest) (*GetSignedRequestResponse, error)
}

// UnimplementedAssessmentServer should be embedded to have forward compatible implementations.
type UnimplementedAssessmentServer struct {
}

func (UnimplementedAssessmentServer) GetSignedRequest(context.Context, *GetSignedRequestRequest) (*GetSignedRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignedRequest not implemented")
}

// UnsafeAssessmentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssessmentServer will
// result in compilation errors.
type UnsafeAssessmentServer interface {
	mustEmbedUnimplementedAssessmentServer()
}

func RegisterAssessmentServer(s grpc.ServiceRegistrar, srv AssessmentServer) {
	s.RegisterService(&_Assessment_serviceDesc, srv)
}

func _Assessment_GetSignedRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSignedRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssessmentServer).GetSignedRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.Assessment/GetSignedRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssessmentServer).GetSignedRequest(ctx, req.(*GetSignedRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Assessment_serviceDesc = grpc.ServiceDesc{
	ServiceName: "syllabus.v1.Assessment",
	HandlerType: (*AssessmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSignedRequest",
			Handler:    _Assessment_GetSignedRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "syllabus/v1/assessment_service.proto",
}
