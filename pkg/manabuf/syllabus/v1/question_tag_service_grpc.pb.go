// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// QuestionTagClient is the client API for QuestionTag service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionTagClient interface {
	ImportQuestionTag(ctx context.Context, in *ImportQuestionTagRequest, opts ...grpc.CallOption) (*ImportQuestionTagResponse, error)
}

type questionTagClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionTagClient(cc grpc.ClientConnInterface) QuestionTagClient {
	return &questionTagClient{cc}
}

func (c *questionTagClient) ImportQuestionTag(ctx context.Context, in *ImportQuestionTagRequest, opts ...grpc.CallOption) (*ImportQuestionTagResponse, error) {
	out := new(ImportQuestionTagResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.QuestionTag/ImportQuestionTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionTagServer is the server API for QuestionTag service.
// All implementations should embed UnimplementedQuestionTagServer
// for forward compatibility
type QuestionTagServer interface {
	ImportQuestionTag(context.Context, *ImportQuestionTagRequest) (*ImportQuestionTagResponse, error)
}

// UnimplementedQuestionTagServer should be embedded to have forward compatible implementations.
type UnimplementedQuestionTagServer struct {
}

func (UnimplementedQuestionTagServer) ImportQuestionTag(context.Context, *ImportQuestionTagRequest) (*ImportQuestionTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportQuestionTag not implemented")
}

// UnsafeQuestionTagServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionTagServer will
// result in compilation errors.
type UnsafeQuestionTagServer interface {
	mustEmbedUnimplementedQuestionTagServer()
}

func RegisterQuestionTagServer(s grpc.ServiceRegistrar, srv QuestionTagServer) {
	s.RegisterService(&_QuestionTag_serviceDesc, srv)
}

func _QuestionTag_ImportQuestionTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportQuestionTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionTagServer).ImportQuestionTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.QuestionTag/ImportQuestionTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionTagServer).ImportQuestionTag(ctx, req.(*ImportQuestionTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QuestionTag_serviceDesc = grpc.ServiceDesc{
	ServiceName: "syllabus.v1.QuestionTag",
	HandlerType: (*QuestionTagServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportQuestionTag",
			Handler:    _QuestionTag_ImportQuestionTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "syllabus/v1/question_tag_service.proto",
}
