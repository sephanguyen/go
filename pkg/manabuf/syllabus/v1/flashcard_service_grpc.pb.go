// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// FlashcardClient is the client API for Flashcard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlashcardClient interface {
	// InsertFlashcard insert a flash card
	InsertFlashcard(ctx context.Context, in *InsertFlashcardRequest, opts ...grpc.CallOption) (*InsertFlashcardResponse, error)
	// UpdateFlashcard update a flash card
	UpdateFlashcard(ctx context.Context, in *UpdateFlashcardRequest, opts ...grpc.CallOption) (*UpdateFlashcardResponse, error)
	// CreateFlashCardStudy create a flashcard study
	CreateFlashCardStudy(ctx context.Context, in *CreateFlashCardStudyRequest, opts ...grpc.CallOption) (*CreateFlashCardStudyResponse, error)
	// FinishFlashCardStudy finish the flashcard study progress
	FinishFlashCardStudy(ctx context.Context, in *FinishFlashCardStudyRequest, opts ...grpc.CallOption) (*FinishFlashCardStudyResponse, error)
	ListFlashcard(ctx context.Context, in *ListFlashcardRequest, opts ...grpc.CallOption) (*ListFlashcardResponse, error)
	GetLastestProgress(ctx context.Context, in *GetLastestProgressRequest, opts ...grpc.CallOption) (*GetLastestProgressResponse, error)
}

type flashcardClient struct {
	cc grpc.ClientConnInterface
}

func NewFlashcardClient(cc grpc.ClientConnInterface) FlashcardClient {
	return &flashcardClient{cc}
}

func (c *flashcardClient) InsertFlashcard(ctx context.Context, in *InsertFlashcardRequest, opts ...grpc.CallOption) (*InsertFlashcardResponse, error) {
	out := new(InsertFlashcardResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.Flashcard/InsertFlashcard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashcardClient) UpdateFlashcard(ctx context.Context, in *UpdateFlashcardRequest, opts ...grpc.CallOption) (*UpdateFlashcardResponse, error) {
	out := new(UpdateFlashcardResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.Flashcard/UpdateFlashcard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashcardClient) CreateFlashCardStudy(ctx context.Context, in *CreateFlashCardStudyRequest, opts ...grpc.CallOption) (*CreateFlashCardStudyResponse, error) {
	out := new(CreateFlashCardStudyResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.Flashcard/CreateFlashCardStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashcardClient) FinishFlashCardStudy(ctx context.Context, in *FinishFlashCardStudyRequest, opts ...grpc.CallOption) (*FinishFlashCardStudyResponse, error) {
	out := new(FinishFlashCardStudyResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.Flashcard/FinishFlashCardStudy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashcardClient) ListFlashcard(ctx context.Context, in *ListFlashcardRequest, opts ...grpc.CallOption) (*ListFlashcardResponse, error) {
	out := new(ListFlashcardResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.Flashcard/ListFlashcard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flashcardClient) GetLastestProgress(ctx context.Context, in *GetLastestProgressRequest, opts ...grpc.CallOption) (*GetLastestProgressResponse, error) {
	out := new(GetLastestProgressResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.Flashcard/GetLastestProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlashcardServer is the server API for Flashcard service.
// All implementations should embed UnimplementedFlashcardServer
// for forward compatibility
type FlashcardServer interface {
	// InsertFlashcard insert a flash card
	InsertFlashcard(context.Context, *InsertFlashcardRequest) (*InsertFlashcardResponse, error)
	// UpdateFlashcard update a flash card
	UpdateFlashcard(context.Context, *UpdateFlashcardRequest) (*UpdateFlashcardResponse, error)
	// CreateFlashCardStudy create a flashcard study
	CreateFlashCardStudy(context.Context, *CreateFlashCardStudyRequest) (*CreateFlashCardStudyResponse, error)
	// FinishFlashCardStudy finish the flashcard study progress
	FinishFlashCardStudy(context.Context, *FinishFlashCardStudyRequest) (*FinishFlashCardStudyResponse, error)
	ListFlashcard(context.Context, *ListFlashcardRequest) (*ListFlashcardResponse, error)
	GetLastestProgress(context.Context, *GetLastestProgressRequest) (*GetLastestProgressResponse, error)
}

// UnimplementedFlashcardServer should be embedded to have forward compatible implementations.
type UnimplementedFlashcardServer struct {
}

func (UnimplementedFlashcardServer) InsertFlashcard(context.Context, *InsertFlashcardRequest) (*InsertFlashcardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertFlashcard not implemented")
}
func (UnimplementedFlashcardServer) UpdateFlashcard(context.Context, *UpdateFlashcardRequest) (*UpdateFlashcardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFlashcard not implemented")
}
func (UnimplementedFlashcardServer) CreateFlashCardStudy(context.Context, *CreateFlashCardStudyRequest) (*CreateFlashCardStudyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFlashCardStudy not implemented")
}
func (UnimplementedFlashcardServer) FinishFlashCardStudy(context.Context, *FinishFlashCardStudyRequest) (*FinishFlashCardStudyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishFlashCardStudy not implemented")
}
func (UnimplementedFlashcardServer) ListFlashcard(context.Context, *ListFlashcardRequest) (*ListFlashcardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFlashcard not implemented")
}
func (UnimplementedFlashcardServer) GetLastestProgress(context.Context, *GetLastestProgressRequest) (*GetLastestProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastestProgress not implemented")
}

// UnsafeFlashcardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlashcardServer will
// result in compilation errors.
type UnsafeFlashcardServer interface {
	mustEmbedUnimplementedFlashcardServer()
}

func RegisterFlashcardServer(s grpc.ServiceRegistrar, srv FlashcardServer) {
	s.RegisterService(&_Flashcard_serviceDesc, srv)
}

func _Flashcard_InsertFlashcard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertFlashcardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashcardServer).InsertFlashcard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.Flashcard/InsertFlashcard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashcardServer).InsertFlashcard(ctx, req.(*InsertFlashcardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flashcard_UpdateFlashcard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFlashcardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashcardServer).UpdateFlashcard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.Flashcard/UpdateFlashcard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashcardServer).UpdateFlashcard(ctx, req.(*UpdateFlashcardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flashcard_CreateFlashCardStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFlashCardStudyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashcardServer).CreateFlashCardStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.Flashcard/CreateFlashCardStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashcardServer).CreateFlashCardStudy(ctx, req.(*CreateFlashCardStudyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flashcard_FinishFlashCardStudy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishFlashCardStudyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashcardServer).FinishFlashCardStudy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.Flashcard/FinishFlashCardStudy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashcardServer).FinishFlashCardStudy(ctx, req.(*FinishFlashCardStudyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flashcard_ListFlashcard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFlashcardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashcardServer).ListFlashcard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.Flashcard/ListFlashcard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashcardServer).ListFlashcard(ctx, req.(*ListFlashcardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Flashcard_GetLastestProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastestProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlashcardServer).GetLastestProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.Flashcard/GetLastestProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlashcardServer).GetLastestProgress(ctx, req.(*GetLastestProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Flashcard_serviceDesc = grpc.ServiceDesc{
	ServiceName: "syllabus.v1.Flashcard",
	HandlerType: (*FlashcardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertFlashcard",
			Handler:    _Flashcard_InsertFlashcard_Handler,
		},
		{
			MethodName: "UpdateFlashcard",
			Handler:    _Flashcard_UpdateFlashcard_Handler,
		},
		{
			MethodName: "CreateFlashCardStudy",
			Handler:    _Flashcard_CreateFlashCardStudy_Handler,
		},
		{
			MethodName: "FinishFlashCardStudy",
			Handler:    _Flashcard_FinishFlashCardStudy_Handler,
		},
		{
			MethodName: "ListFlashcard",
			Handler:    _Flashcard_ListFlashcard_Handler,
		},
		{
			MethodName: "GetLastestProgress",
			Handler:    _Flashcard_GetLastestProgress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "syllabus/v1/flashcard_service.proto",
}
