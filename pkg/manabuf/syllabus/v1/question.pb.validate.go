// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: syllabus/v1/question.proto

package sspb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UpsertQuestionGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertQuestionGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertQuestionGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertQuestionGroupRequestMultiError, or nil if none found.
func (m *UpsertQuestionGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertQuestionGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for QuestionGroupId

	// no validation rules for LearningMaterialId

	// no validation rules for Name

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetRichDescription()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertQuestionGroupRequestValidationError{
					field:  "RichDescription",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertQuestionGroupRequestValidationError{
					field:  "RichDescription",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRichDescription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertQuestionGroupRequestValidationError{
				field:  "RichDescription",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpsertQuestionGroupRequestMultiError(errors)
	}

	return nil
}

// UpsertQuestionGroupRequestMultiError is an error wrapping multiple
// validation errors returned by UpsertQuestionGroupRequest.ValidateAll() if
// the designated constraints aren't met.
type UpsertQuestionGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertQuestionGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertQuestionGroupRequestMultiError) AllErrors() []error { return m }

// UpsertQuestionGroupRequestValidationError is the validation error returned
// by UpsertQuestionGroupRequest.Validate if the designated constraints aren't met.
type UpsertQuestionGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertQuestionGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertQuestionGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertQuestionGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertQuestionGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertQuestionGroupRequestValidationError) ErrorName() string {
	return "UpsertQuestionGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertQuestionGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertQuestionGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertQuestionGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertQuestionGroupRequestValidationError{}

// Validate checks the field values on UpsertQuestionGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertQuestionGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertQuestionGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertQuestionGroupResponseMultiError, or nil if none found.
func (m *UpsertQuestionGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertQuestionGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for QuestionGroupId

	if len(errors) > 0 {
		return UpsertQuestionGroupResponseMultiError(errors)
	}

	return nil
}

// UpsertQuestionGroupResponseMultiError is an error wrapping multiple
// validation errors returned by UpsertQuestionGroupResponse.ValidateAll() if
// the designated constraints aren't met.
type UpsertQuestionGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertQuestionGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertQuestionGroupResponseMultiError) AllErrors() []error { return m }

// UpsertQuestionGroupResponseValidationError is the validation error returned
// by UpsertQuestionGroupResponse.Validate if the designated constraints
// aren't met.
type UpsertQuestionGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertQuestionGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertQuestionGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertQuestionGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertQuestionGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertQuestionGroupResponseValidationError) ErrorName() string {
	return "UpsertQuestionGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertQuestionGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertQuestionGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertQuestionGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertQuestionGroupResponseValidationError{}

// Validate checks the field values on DeleteQuestionGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteQuestionGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteQuestionGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteQuestionGroupRequestMultiError, or nil if none found.
func (m *DeleteQuestionGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteQuestionGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for QuestionGroupId

	if len(errors) > 0 {
		return DeleteQuestionGroupRequestMultiError(errors)
	}

	return nil
}

// DeleteQuestionGroupRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteQuestionGroupRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteQuestionGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteQuestionGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteQuestionGroupRequestMultiError) AllErrors() []error { return m }

// DeleteQuestionGroupRequestValidationError is the validation error returned
// by DeleteQuestionGroupRequest.Validate if the designated constraints aren't met.
type DeleteQuestionGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteQuestionGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteQuestionGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteQuestionGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteQuestionGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteQuestionGroupRequestValidationError) ErrorName() string {
	return "DeleteQuestionGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteQuestionGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteQuestionGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteQuestionGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteQuestionGroupRequestValidationError{}

// Validate checks the field values on DeleteQuestionGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteQuestionGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteQuestionGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteQuestionGroupResponseMultiError, or nil if none found.
func (m *DeleteQuestionGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteQuestionGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteQuestionGroupResponseMultiError(errors)
	}

	return nil
}

// DeleteQuestionGroupResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteQuestionGroupResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteQuestionGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteQuestionGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteQuestionGroupResponseMultiError) AllErrors() []error { return m }

// DeleteQuestionGroupResponseValidationError is the validation error returned
// by DeleteQuestionGroupResponse.Validate if the designated constraints
// aren't met.
type DeleteQuestionGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteQuestionGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteQuestionGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteQuestionGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteQuestionGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteQuestionGroupResponseValidationError) ErrorName() string {
	return "DeleteQuestionGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteQuestionGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteQuestionGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteQuestionGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteQuestionGroupResponseValidationError{}

// Validate checks the field values on QuestionHierarchy with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QuestionHierarchy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuestionHierarchy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuestionHierarchyMultiError, or nil if none found.
func (m *QuestionHierarchy) ValidateAll() error {
	return m.validate(true)
}

func (m *QuestionHierarchy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	if len(errors) > 0 {
		return QuestionHierarchyMultiError(errors)
	}

	return nil
}

// QuestionHierarchyMultiError is an error wrapping multiple validation errors
// returned by QuestionHierarchy.ValidateAll() if the designated constraints
// aren't met.
type QuestionHierarchyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuestionHierarchyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuestionHierarchyMultiError) AllErrors() []error { return m }

// QuestionHierarchyValidationError is the validation error returned by
// QuestionHierarchy.Validate if the designated constraints aren't met.
type QuestionHierarchyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionHierarchyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionHierarchyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionHierarchyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionHierarchyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionHierarchyValidationError) ErrorName() string {
	return "QuestionHierarchyValidationError"
}

// Error satisfies the builtin error interface
func (e QuestionHierarchyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestionHierarchy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionHierarchyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionHierarchyValidationError{}

// Validate checks the field values on UpdateDisplayOrderOfQuizSetV2Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateDisplayOrderOfQuizSetV2Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDisplayOrderOfQuizSetV2Request
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateDisplayOrderOfQuizSetV2RequestMultiError, or nil if none found.
func (m *UpdateDisplayOrderOfQuizSetV2Request) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDisplayOrderOfQuizSetV2Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LearningMaterialId

	for idx, item := range m.GetQuestionHierarchy() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateDisplayOrderOfQuizSetV2RequestValidationError{
						field:  fmt.Sprintf("QuestionHierarchy[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateDisplayOrderOfQuizSetV2RequestValidationError{
						field:  fmt.Sprintf("QuestionHierarchy[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateDisplayOrderOfQuizSetV2RequestValidationError{
					field:  fmt.Sprintf("QuestionHierarchy[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateDisplayOrderOfQuizSetV2RequestMultiError(errors)
	}

	return nil
}

// UpdateDisplayOrderOfQuizSetV2RequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateDisplayOrderOfQuizSetV2Request.ValidateAll() if the designated
// constraints aren't met.
type UpdateDisplayOrderOfQuizSetV2RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDisplayOrderOfQuizSetV2RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDisplayOrderOfQuizSetV2RequestMultiError) AllErrors() []error { return m }

// UpdateDisplayOrderOfQuizSetV2RequestValidationError is the validation error
// returned by UpdateDisplayOrderOfQuizSetV2Request.Validate if the designated
// constraints aren't met.
type UpdateDisplayOrderOfQuizSetV2RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDisplayOrderOfQuizSetV2RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDisplayOrderOfQuizSetV2RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDisplayOrderOfQuizSetV2RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDisplayOrderOfQuizSetV2RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDisplayOrderOfQuizSetV2RequestValidationError) ErrorName() string {
	return "UpdateDisplayOrderOfQuizSetV2RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDisplayOrderOfQuizSetV2RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDisplayOrderOfQuizSetV2Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDisplayOrderOfQuizSetV2RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDisplayOrderOfQuizSetV2RequestValidationError{}

// Validate checks the field values on UpdateDisplayOrderOfQuizSetV2Response
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateDisplayOrderOfQuizSetV2Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDisplayOrderOfQuizSetV2Response
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateDisplayOrderOfQuizSetV2ResponseMultiError, or nil if none found.
func (m *UpdateDisplayOrderOfQuizSetV2Response) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDisplayOrderOfQuizSetV2Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateDisplayOrderOfQuizSetV2ResponseMultiError(errors)
	}

	return nil
}

// UpdateDisplayOrderOfQuizSetV2ResponseMultiError is an error wrapping
// multiple validation errors returned by
// UpdateDisplayOrderOfQuizSetV2Response.ValidateAll() if the designated
// constraints aren't met.
type UpdateDisplayOrderOfQuizSetV2ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDisplayOrderOfQuizSetV2ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDisplayOrderOfQuizSetV2ResponseMultiError) AllErrors() []error { return m }

// UpdateDisplayOrderOfQuizSetV2ResponseValidationError is the validation error
// returned by UpdateDisplayOrderOfQuizSetV2Response.Validate if the
// designated constraints aren't met.
type UpdateDisplayOrderOfQuizSetV2ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDisplayOrderOfQuizSetV2ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDisplayOrderOfQuizSetV2ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDisplayOrderOfQuizSetV2ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDisplayOrderOfQuizSetV2ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDisplayOrderOfQuizSetV2ResponseValidationError) ErrorName() string {
	return "UpdateDisplayOrderOfQuizSetV2ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDisplayOrderOfQuizSetV2ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDisplayOrderOfQuizSetV2Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDisplayOrderOfQuizSetV2ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDisplayOrderOfQuizSetV2ResponseValidationError{}
