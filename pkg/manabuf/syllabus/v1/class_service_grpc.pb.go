// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ClassClient is the client API for Class service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClassClient interface {
	RetrieveClassMembersWithFilters(ctx context.Context, in *RetrieveClassMembersWithFiltersRequest, opts ...grpc.CallOption) (*RetrieveClassMembersWithFiltersResponse, error)
}

type classClient struct {
	cc grpc.ClientConnInterface
}

func NewClassClient(cc grpc.ClientConnInterface) ClassClient {
	return &classClient{cc}
}

func (c *classClient) RetrieveClassMembersWithFilters(ctx context.Context, in *RetrieveClassMembersWithFiltersRequest, opts ...grpc.CallOption) (*RetrieveClassMembersWithFiltersResponse, error) {
	out := new(RetrieveClassMembersWithFiltersResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.Class/RetrieveClassMembersWithFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClassServer is the server API for Class service.
// All implementations should embed UnimplementedClassServer
// for forward compatibility
type ClassServer interface {
	RetrieveClassMembersWithFilters(context.Context, *RetrieveClassMembersWithFiltersRequest) (*RetrieveClassMembersWithFiltersResponse, error)
}

// UnimplementedClassServer should be embedded to have forward compatible implementations.
type UnimplementedClassServer struct {
}

func (UnimplementedClassServer) RetrieveClassMembersWithFilters(context.Context, *RetrieveClassMembersWithFiltersRequest) (*RetrieveClassMembersWithFiltersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveClassMembersWithFilters not implemented")
}

// UnsafeClassServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClassServer will
// result in compilation errors.
type UnsafeClassServer interface {
	mustEmbedUnimplementedClassServer()
}

func RegisterClassServer(s grpc.ServiceRegistrar, srv ClassServer) {
	s.RegisterService(&_Class_serviceDesc, srv)
}

func _Class_RetrieveClassMembersWithFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveClassMembersWithFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServer).RetrieveClassMembersWithFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.Class/RetrieveClassMembersWithFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServer).RetrieveClassMembersWithFilters(ctx, req.(*RetrieveClassMembersWithFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Class_serviceDesc = grpc.ServiceDesc{
	ServiceName: "syllabus.v1.Class",
	HandlerType: (*ClassServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveClassMembersWithFilters",
			Handler:    _Class_RetrieveClassMembersWithFilters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "syllabus/v1/class_service.proto",
}
