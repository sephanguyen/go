// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LearningMaterialClient is the client API for LearningMaterial service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LearningMaterialClient interface {
	// InsertLearningMaterial insert a learning material type
	InsertLearningMaterial(ctx context.Context, in *InsertLearningMaterialRequest, opts ...grpc.CallOption) (*InsertLearningMaterialResponse, error)
	// UpdateLearningMaterial update a learning material type
	UpdateLearningMaterial(ctx context.Context, in *UpdateLearningMaterialRequest, opts ...grpc.CallOption) (*UpdateLearningMaterialResponse, error)
	// DeleteLearningMaterial delete a learning material type
	DeleteLearningMaterial(ctx context.Context, in *DeleteLearningMaterialRequest, opts ...grpc.CallOption) (*DeleteLearningMaterialResponse, error)
	// SwapDisplayOrder swaps display order of two learning materials
	SwapDisplayOrder(ctx context.Context, in *SwapDisplayOrderRequest, opts ...grpc.CallOption) (*SwapDisplayOrderResponse, error)
	DuplicateBook(ctx context.Context, in *DuplicateBookRequest, opts ...grpc.CallOption) (*DuplicateBookResponse, error)
	ListLearningMaterial(ctx context.Context, in *ListLearningMaterialRequest, opts ...grpc.CallOption) (*ListLearningMaterialResponse, error)
	UpdateLearningMaterialName(ctx context.Context, in *UpdateLearningMaterialNameRequest, opts ...grpc.CallOption) (*UpdateLearningMaterialNameResponse, error)
}

type learningMaterialClient struct {
	cc grpc.ClientConnInterface
}

func NewLearningMaterialClient(cc grpc.ClientConnInterface) LearningMaterialClient {
	return &learningMaterialClient{cc}
}

func (c *learningMaterialClient) InsertLearningMaterial(ctx context.Context, in *InsertLearningMaterialRequest, opts ...grpc.CallOption) (*InsertLearningMaterialResponse, error) {
	out := new(InsertLearningMaterialResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.LearningMaterial/InsertLearningMaterial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningMaterialClient) UpdateLearningMaterial(ctx context.Context, in *UpdateLearningMaterialRequest, opts ...grpc.CallOption) (*UpdateLearningMaterialResponse, error) {
	out := new(UpdateLearningMaterialResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.LearningMaterial/UpdateLearningMaterial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningMaterialClient) DeleteLearningMaterial(ctx context.Context, in *DeleteLearningMaterialRequest, opts ...grpc.CallOption) (*DeleteLearningMaterialResponse, error) {
	out := new(DeleteLearningMaterialResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.LearningMaterial/DeleteLearningMaterial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningMaterialClient) SwapDisplayOrder(ctx context.Context, in *SwapDisplayOrderRequest, opts ...grpc.CallOption) (*SwapDisplayOrderResponse, error) {
	out := new(SwapDisplayOrderResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.LearningMaterial/SwapDisplayOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningMaterialClient) DuplicateBook(ctx context.Context, in *DuplicateBookRequest, opts ...grpc.CallOption) (*DuplicateBookResponse, error) {
	out := new(DuplicateBookResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.LearningMaterial/DuplicateBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningMaterialClient) ListLearningMaterial(ctx context.Context, in *ListLearningMaterialRequest, opts ...grpc.CallOption) (*ListLearningMaterialResponse, error) {
	out := new(ListLearningMaterialResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.LearningMaterial/ListLearningMaterial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningMaterialClient) UpdateLearningMaterialName(ctx context.Context, in *UpdateLearningMaterialNameRequest, opts ...grpc.CallOption) (*UpdateLearningMaterialNameResponse, error) {
	out := new(UpdateLearningMaterialNameResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.LearningMaterial/UpdateLearningMaterialName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LearningMaterialServer is the server API for LearningMaterial service.
// All implementations should embed UnimplementedLearningMaterialServer
// for forward compatibility
type LearningMaterialServer interface {
	// InsertLearningMaterial insert a learning material type
	InsertLearningMaterial(context.Context, *InsertLearningMaterialRequest) (*InsertLearningMaterialResponse, error)
	// UpdateLearningMaterial update a learning material type
	UpdateLearningMaterial(context.Context, *UpdateLearningMaterialRequest) (*UpdateLearningMaterialResponse, error)
	// DeleteLearningMaterial delete a learning material type
	DeleteLearningMaterial(context.Context, *DeleteLearningMaterialRequest) (*DeleteLearningMaterialResponse, error)
	// SwapDisplayOrder swaps display order of two learning materials
	SwapDisplayOrder(context.Context, *SwapDisplayOrderRequest) (*SwapDisplayOrderResponse, error)
	DuplicateBook(context.Context, *DuplicateBookRequest) (*DuplicateBookResponse, error)
	ListLearningMaterial(context.Context, *ListLearningMaterialRequest) (*ListLearningMaterialResponse, error)
	UpdateLearningMaterialName(context.Context, *UpdateLearningMaterialNameRequest) (*UpdateLearningMaterialNameResponse, error)
}

// UnimplementedLearningMaterialServer should be embedded to have forward compatible implementations.
type UnimplementedLearningMaterialServer struct {
}

func (UnimplementedLearningMaterialServer) InsertLearningMaterial(context.Context, *InsertLearningMaterialRequest) (*InsertLearningMaterialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertLearningMaterial not implemented")
}
func (UnimplementedLearningMaterialServer) UpdateLearningMaterial(context.Context, *UpdateLearningMaterialRequest) (*UpdateLearningMaterialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLearningMaterial not implemented")
}
func (UnimplementedLearningMaterialServer) DeleteLearningMaterial(context.Context, *DeleteLearningMaterialRequest) (*DeleteLearningMaterialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLearningMaterial not implemented")
}
func (UnimplementedLearningMaterialServer) SwapDisplayOrder(context.Context, *SwapDisplayOrderRequest) (*SwapDisplayOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapDisplayOrder not implemented")
}
func (UnimplementedLearningMaterialServer) DuplicateBook(context.Context, *DuplicateBookRequest) (*DuplicateBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DuplicateBook not implemented")
}
func (UnimplementedLearningMaterialServer) ListLearningMaterial(context.Context, *ListLearningMaterialRequest) (*ListLearningMaterialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLearningMaterial not implemented")
}
func (UnimplementedLearningMaterialServer) UpdateLearningMaterialName(context.Context, *UpdateLearningMaterialNameRequest) (*UpdateLearningMaterialNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLearningMaterialName not implemented")
}

// UnsafeLearningMaterialServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LearningMaterialServer will
// result in compilation errors.
type UnsafeLearningMaterialServer interface {
	mustEmbedUnimplementedLearningMaterialServer()
}

func RegisterLearningMaterialServer(s grpc.ServiceRegistrar, srv LearningMaterialServer) {
	s.RegisterService(&_LearningMaterial_serviceDesc, srv)
}

func _LearningMaterial_InsertLearningMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertLearningMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningMaterialServer).InsertLearningMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.LearningMaterial/InsertLearningMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningMaterialServer).InsertLearningMaterial(ctx, req.(*InsertLearningMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningMaterial_UpdateLearningMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLearningMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningMaterialServer).UpdateLearningMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.LearningMaterial/UpdateLearningMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningMaterialServer).UpdateLearningMaterial(ctx, req.(*UpdateLearningMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningMaterial_DeleteLearningMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLearningMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningMaterialServer).DeleteLearningMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.LearningMaterial/DeleteLearningMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningMaterialServer).DeleteLearningMaterial(ctx, req.(*DeleteLearningMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningMaterial_SwapDisplayOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwapDisplayOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningMaterialServer).SwapDisplayOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.LearningMaterial/SwapDisplayOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningMaterialServer).SwapDisplayOrder(ctx, req.(*SwapDisplayOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningMaterial_DuplicateBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DuplicateBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningMaterialServer).DuplicateBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.LearningMaterial/DuplicateBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningMaterialServer).DuplicateBook(ctx, req.(*DuplicateBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningMaterial_ListLearningMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLearningMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningMaterialServer).ListLearningMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.LearningMaterial/ListLearningMaterial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningMaterialServer).ListLearningMaterial(ctx, req.(*ListLearningMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningMaterial_UpdateLearningMaterialName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLearningMaterialNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningMaterialServer).UpdateLearningMaterialName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.LearningMaterial/UpdateLearningMaterialName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningMaterialServer).UpdateLearningMaterialName(ctx, req.(*UpdateLearningMaterialNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LearningMaterial_serviceDesc = grpc.ServiceDesc{
	ServiceName: "syllabus.v1.LearningMaterial",
	HandlerType: (*LearningMaterialServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertLearningMaterial",
			Handler:    _LearningMaterial_InsertLearningMaterial_Handler,
		},
		{
			MethodName: "UpdateLearningMaterial",
			Handler:    _LearningMaterial_UpdateLearningMaterial_Handler,
		},
		{
			MethodName: "DeleteLearningMaterial",
			Handler:    _LearningMaterial_DeleteLearningMaterial_Handler,
		},
		{
			MethodName: "SwapDisplayOrder",
			Handler:    _LearningMaterial_SwapDisplayOrder_Handler,
		},
		{
			MethodName: "DuplicateBook",
			Handler:    _LearningMaterial_DuplicateBook_Handler,
		},
		{
			MethodName: "ListLearningMaterial",
			Handler:    _LearningMaterial_ListLearningMaterial_Handler,
		},
		{
			MethodName: "UpdateLearningMaterialName",
			Handler:    _LearningMaterial_UpdateLearningMaterialName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "syllabus/v1/learning_material_service.proto",
}
