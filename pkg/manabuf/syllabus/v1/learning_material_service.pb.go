// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: syllabus/v1/learning_material_service.proto

package sspb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// InsertLearningMaterialRequest is central inserted request for all learning material types
type InsertLearningMaterialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choose one of learning material types
	//
	// Types that are assignable to Message:
	//
	//	*InsertLearningMaterialRequest_Assignment
	//	*InsertLearningMaterialRequest_ExamLo
	//	*InsertLearningMaterialRequest_Flashcard
	//	*InsertLearningMaterialRequest_LearningObjective
	//	*InsertLearningMaterialRequest_TaskAssignment
	Message isInsertLearningMaterialRequest_Message `protobuf_oneof:"message"`
}

func (x *InsertLearningMaterialRequest) Reset() {
	*x = InsertLearningMaterialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_learning_material_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertLearningMaterialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertLearningMaterialRequest) ProtoMessage() {}

func (x *InsertLearningMaterialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_learning_material_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertLearningMaterialRequest.ProtoReflect.Descriptor instead.
func (*InsertLearningMaterialRequest) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_learning_material_service_proto_rawDescGZIP(), []int{0}
}

func (m *InsertLearningMaterialRequest) GetMessage() isInsertLearningMaterialRequest_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *InsertLearningMaterialRequest) GetAssignment() *InsertAssignmentRequest {
	if x, ok := x.GetMessage().(*InsertLearningMaterialRequest_Assignment); ok {
		return x.Assignment
	}
	return nil
}

func (x *InsertLearningMaterialRequest) GetExamLo() *InsertExamLORequest {
	if x, ok := x.GetMessage().(*InsertLearningMaterialRequest_ExamLo); ok {
		return x.ExamLo
	}
	return nil
}

func (x *InsertLearningMaterialRequest) GetFlashcard() *InsertFlashcardRequest {
	if x, ok := x.GetMessage().(*InsertLearningMaterialRequest_Flashcard); ok {
		return x.Flashcard
	}
	return nil
}

func (x *InsertLearningMaterialRequest) GetLearningObjective() *InsertLearningObjectiveRequest {
	if x, ok := x.GetMessage().(*InsertLearningMaterialRequest_LearningObjective); ok {
		return x.LearningObjective
	}
	return nil
}

func (x *InsertLearningMaterialRequest) GetTaskAssignment() *InsertTaskAssignmentRequest {
	if x, ok := x.GetMessage().(*InsertLearningMaterialRequest_TaskAssignment); ok {
		return x.TaskAssignment
	}
	return nil
}

type isInsertLearningMaterialRequest_Message interface {
	isInsertLearningMaterialRequest_Message()
}

type InsertLearningMaterialRequest_Assignment struct {
	Assignment *InsertAssignmentRequest `protobuf:"bytes,1,opt,name=assignment,proto3,oneof"`
}

type InsertLearningMaterialRequest_ExamLo struct {
	ExamLo *InsertExamLORequest `protobuf:"bytes,2,opt,name=exam_lo,json=examLo,proto3,oneof"`
}

type InsertLearningMaterialRequest_Flashcard struct {
	Flashcard *InsertFlashcardRequest `protobuf:"bytes,3,opt,name=flashcard,proto3,oneof"`
}

type InsertLearningMaterialRequest_LearningObjective struct {
	LearningObjective *InsertLearningObjectiveRequest `protobuf:"bytes,4,opt,name=learning_objective,json=learningObjective,proto3,oneof"`
}

type InsertLearningMaterialRequest_TaskAssignment struct {
	TaskAssignment *InsertTaskAssignmentRequest `protobuf:"bytes,6,opt,name=task_assignment,json=taskAssignment,proto3,oneof"`
}

func (*InsertLearningMaterialRequest_Assignment) isInsertLearningMaterialRequest_Message() {}

func (*InsertLearningMaterialRequest_ExamLo) isInsertLearningMaterialRequest_Message() {}

func (*InsertLearningMaterialRequest_Flashcard) isInsertLearningMaterialRequest_Message() {}

func (*InsertLearningMaterialRequest_LearningObjective) isInsertLearningMaterialRequest_Message() {}

func (*InsertLearningMaterialRequest_TaskAssignment) isInsertLearningMaterialRequest_Message() {}

// InsertLearningMaterialResponse is central insert response for all learning material types
type InsertLearningMaterialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choose one of learning material types
	//
	// Types that are assignable to Message:
	//
	//	*InsertLearningMaterialResponse_Assignment
	//	*InsertLearningMaterialResponse_ExamLo
	//	*InsertLearningMaterialResponse_Flashcard
	//	*InsertLearningMaterialResponse_LearningObjective
	//	*InsertLearningMaterialResponse_TaskAssignment
	Message isInsertLearningMaterialResponse_Message `protobuf_oneof:"message"`
}

func (x *InsertLearningMaterialResponse) Reset() {
	*x = InsertLearningMaterialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_learning_material_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertLearningMaterialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertLearningMaterialResponse) ProtoMessage() {}

func (x *InsertLearningMaterialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_learning_material_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertLearningMaterialResponse.ProtoReflect.Descriptor instead.
func (*InsertLearningMaterialResponse) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_learning_material_service_proto_rawDescGZIP(), []int{1}
}

func (m *InsertLearningMaterialResponse) GetMessage() isInsertLearningMaterialResponse_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *InsertLearningMaterialResponse) GetAssignment() *InsertAssignmentResponse {
	if x, ok := x.GetMessage().(*InsertLearningMaterialResponse_Assignment); ok {
		return x.Assignment
	}
	return nil
}

func (x *InsertLearningMaterialResponse) GetExamLo() *InsertExamLOResponse {
	if x, ok := x.GetMessage().(*InsertLearningMaterialResponse_ExamLo); ok {
		return x.ExamLo
	}
	return nil
}

func (x *InsertLearningMaterialResponse) GetFlashcard() *InsertFlashcardResponse {
	if x, ok := x.GetMessage().(*InsertLearningMaterialResponse_Flashcard); ok {
		return x.Flashcard
	}
	return nil
}

func (x *InsertLearningMaterialResponse) GetLearningObjective() *InsertLearningObjectiveResponse {
	if x, ok := x.GetMessage().(*InsertLearningMaterialResponse_LearningObjective); ok {
		return x.LearningObjective
	}
	return nil
}

func (x *InsertLearningMaterialResponse) GetTaskAssignment() *InsertTaskAssignmentResponse {
	if x, ok := x.GetMessage().(*InsertLearningMaterialResponse_TaskAssignment); ok {
		return x.TaskAssignment
	}
	return nil
}

type isInsertLearningMaterialResponse_Message interface {
	isInsertLearningMaterialResponse_Message()
}

type InsertLearningMaterialResponse_Assignment struct {
	Assignment *InsertAssignmentResponse `protobuf:"bytes,1,opt,name=assignment,proto3,oneof"`
}

type InsertLearningMaterialResponse_ExamLo struct {
	ExamLo *InsertExamLOResponse `protobuf:"bytes,2,opt,name=exam_lo,json=examLo,proto3,oneof"`
}

type InsertLearningMaterialResponse_Flashcard struct {
	Flashcard *InsertFlashcardResponse `protobuf:"bytes,3,opt,name=flashcard,proto3,oneof"`
}

type InsertLearningMaterialResponse_LearningObjective struct {
	LearningObjective *InsertLearningObjectiveResponse `protobuf:"bytes,4,opt,name=learning_objective,json=learningObjective,proto3,oneof"`
}

type InsertLearningMaterialResponse_TaskAssignment struct {
	TaskAssignment *InsertTaskAssignmentResponse `protobuf:"bytes,6,opt,name=task_assignment,json=taskAssignment,proto3,oneof"`
}

func (*InsertLearningMaterialResponse_Assignment) isInsertLearningMaterialResponse_Message() {}

func (*InsertLearningMaterialResponse_ExamLo) isInsertLearningMaterialResponse_Message() {}

func (*InsertLearningMaterialResponse_Flashcard) isInsertLearningMaterialResponse_Message() {}

func (*InsertLearningMaterialResponse_LearningObjective) isInsertLearningMaterialResponse_Message() {}

func (*InsertLearningMaterialResponse_TaskAssignment) isInsertLearningMaterialResponse_Message() {}

// UpdateLearningMaterialRequest is central update request for all learning material types
type UpdateLearningMaterialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*UpdateLearningMaterialRequest_Assignment
	//	*UpdateLearningMaterialRequest_ExamLo
	//	*UpdateLearningMaterialRequest_Flashcard
	//	*UpdateLearningMaterialRequest_LearningObjective
	//	*UpdateLearningMaterialRequest_TaskAssignment
	Message isUpdateLearningMaterialRequest_Message `protobuf_oneof:"message"`
}

func (x *UpdateLearningMaterialRequest) Reset() {
	*x = UpdateLearningMaterialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_learning_material_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLearningMaterialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLearningMaterialRequest) ProtoMessage() {}

func (x *UpdateLearningMaterialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_learning_material_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLearningMaterialRequest.ProtoReflect.Descriptor instead.
func (*UpdateLearningMaterialRequest) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_learning_material_service_proto_rawDescGZIP(), []int{2}
}

func (m *UpdateLearningMaterialRequest) GetMessage() isUpdateLearningMaterialRequest_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *UpdateLearningMaterialRequest) GetAssignment() *UpdateAssignmentRequest {
	if x, ok := x.GetMessage().(*UpdateLearningMaterialRequest_Assignment); ok {
		return x.Assignment
	}
	return nil
}

func (x *UpdateLearningMaterialRequest) GetExamLo() *UpdateExamLORequest {
	if x, ok := x.GetMessage().(*UpdateLearningMaterialRequest_ExamLo); ok {
		return x.ExamLo
	}
	return nil
}

func (x *UpdateLearningMaterialRequest) GetFlashcard() *UpdateFlashcardRequest {
	if x, ok := x.GetMessage().(*UpdateLearningMaterialRequest_Flashcard); ok {
		return x.Flashcard
	}
	return nil
}

func (x *UpdateLearningMaterialRequest) GetLearningObjective() *UpdateLearningObjectiveRequest {
	if x, ok := x.GetMessage().(*UpdateLearningMaterialRequest_LearningObjective); ok {
		return x.LearningObjective
	}
	return nil
}

func (x *UpdateLearningMaterialRequest) GetTaskAssignment() *UpdateTaskAssignmentRequest {
	if x, ok := x.GetMessage().(*UpdateLearningMaterialRequest_TaskAssignment); ok {
		return x.TaskAssignment
	}
	return nil
}

type isUpdateLearningMaterialRequest_Message interface {
	isUpdateLearningMaterialRequest_Message()
}

type UpdateLearningMaterialRequest_Assignment struct {
	// choose one of learning material types
	Assignment *UpdateAssignmentRequest `protobuf:"bytes,1,opt,name=assignment,proto3,oneof"`
}

type UpdateLearningMaterialRequest_ExamLo struct {
	ExamLo *UpdateExamLORequest `protobuf:"bytes,2,opt,name=exam_lo,json=examLo,proto3,oneof"`
}

type UpdateLearningMaterialRequest_Flashcard struct {
	Flashcard *UpdateFlashcardRequest `protobuf:"bytes,3,opt,name=flashcard,proto3,oneof"`
}

type UpdateLearningMaterialRequest_LearningObjective struct {
	LearningObjective *UpdateLearningObjectiveRequest `protobuf:"bytes,4,opt,name=learning_objective,json=learningObjective,proto3,oneof"`
}

type UpdateLearningMaterialRequest_TaskAssignment struct {
	TaskAssignment *UpdateTaskAssignmentRequest `protobuf:"bytes,6,opt,name=task_assignment,json=taskAssignment,proto3,oneof"`
}

func (*UpdateLearningMaterialRequest_Assignment) isUpdateLearningMaterialRequest_Message() {}

func (*UpdateLearningMaterialRequest_ExamLo) isUpdateLearningMaterialRequest_Message() {}

func (*UpdateLearningMaterialRequest_Flashcard) isUpdateLearningMaterialRequest_Message() {}

func (*UpdateLearningMaterialRequest_LearningObjective) isUpdateLearningMaterialRequest_Message() {}

func (*UpdateLearningMaterialRequest_TaskAssignment) isUpdateLearningMaterialRequest_Message() {}

// UpdateLearningMaterialResponse is central update response for all learning material types
type UpdateLearningMaterialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*UpdateLearningMaterialResponse_Assignment
	//	*UpdateLearningMaterialResponse_ExamLo
	//	*UpdateLearningMaterialResponse_Flashcard
	//	*UpdateLearningMaterialResponse_LearningObjective
	//	*UpdateLearningMaterialResponse_TaskAssignment
	Message isUpdateLearningMaterialResponse_Message `protobuf_oneof:"message"`
}

func (x *UpdateLearningMaterialResponse) Reset() {
	*x = UpdateLearningMaterialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_learning_material_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLearningMaterialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLearningMaterialResponse) ProtoMessage() {}

func (x *UpdateLearningMaterialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_learning_material_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLearningMaterialResponse.ProtoReflect.Descriptor instead.
func (*UpdateLearningMaterialResponse) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_learning_material_service_proto_rawDescGZIP(), []int{3}
}

func (m *UpdateLearningMaterialResponse) GetMessage() isUpdateLearningMaterialResponse_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *UpdateLearningMaterialResponse) GetAssignment() *UpdateAssignmentResponse {
	if x, ok := x.GetMessage().(*UpdateLearningMaterialResponse_Assignment); ok {
		return x.Assignment
	}
	return nil
}

func (x *UpdateLearningMaterialResponse) GetExamLo() *UpdateExamLOResponse {
	if x, ok := x.GetMessage().(*UpdateLearningMaterialResponse_ExamLo); ok {
		return x.ExamLo
	}
	return nil
}

func (x *UpdateLearningMaterialResponse) GetFlashcard() *UpdateFlashcardResponse {
	if x, ok := x.GetMessage().(*UpdateLearningMaterialResponse_Flashcard); ok {
		return x.Flashcard
	}
	return nil
}

func (x *UpdateLearningMaterialResponse) GetLearningObjective() *UpdateLearningObjectiveResponse {
	if x, ok := x.GetMessage().(*UpdateLearningMaterialResponse_LearningObjective); ok {
		return x.LearningObjective
	}
	return nil
}

func (x *UpdateLearningMaterialResponse) GetTaskAssignment() *UpdateTaskAssignmentRequest {
	if x, ok := x.GetMessage().(*UpdateLearningMaterialResponse_TaskAssignment); ok {
		return x.TaskAssignment
	}
	return nil
}

type isUpdateLearningMaterialResponse_Message interface {
	isUpdateLearningMaterialResponse_Message()
}

type UpdateLearningMaterialResponse_Assignment struct {
	Assignment *UpdateAssignmentResponse `protobuf:"bytes,1,opt,name=assignment,proto3,oneof"`
}

type UpdateLearningMaterialResponse_ExamLo struct {
	ExamLo *UpdateExamLOResponse `protobuf:"bytes,2,opt,name=exam_lo,json=examLo,proto3,oneof"`
}

type UpdateLearningMaterialResponse_Flashcard struct {
	Flashcard *UpdateFlashcardResponse `protobuf:"bytes,3,opt,name=flashcard,proto3,oneof"`
}

type UpdateLearningMaterialResponse_LearningObjective struct {
	LearningObjective *UpdateLearningObjectiveResponse `protobuf:"bytes,4,opt,name=learning_objective,json=learningObjective,proto3,oneof"`
}

type UpdateLearningMaterialResponse_TaskAssignment struct {
	TaskAssignment *UpdateTaskAssignmentRequest `protobuf:"bytes,6,opt,name=task_assignment,json=taskAssignment,proto3,oneof"`
}

func (*UpdateLearningMaterialResponse_Assignment) isUpdateLearningMaterialResponse_Message() {}

func (*UpdateLearningMaterialResponse_ExamLo) isUpdateLearningMaterialResponse_Message() {}

func (*UpdateLearningMaterialResponse_Flashcard) isUpdateLearningMaterialResponse_Message() {}

func (*UpdateLearningMaterialResponse_LearningObjective) isUpdateLearningMaterialResponse_Message() {}

func (*UpdateLearningMaterialResponse_TaskAssignment) isUpdateLearningMaterialResponse_Message() {}

// DeleteLearningMaterialRequest is delete a learning material request
type DeleteLearningMaterialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LearningMaterialId string `protobuf:"bytes,1,opt,name=learning_material_id,json=learningMaterialId,proto3" json:"learning_material_id,omitempty"`
}

func (x *DeleteLearningMaterialRequest) Reset() {
	*x = DeleteLearningMaterialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_learning_material_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLearningMaterialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLearningMaterialRequest) ProtoMessage() {}

func (x *DeleteLearningMaterialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_learning_material_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLearningMaterialRequest.ProtoReflect.Descriptor instead.
func (*DeleteLearningMaterialRequest) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_learning_material_service_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteLearningMaterialRequest) GetLearningMaterialId() string {
	if x != nil {
		return x.LearningMaterialId
	}
	return ""
}

// DeleteLearningMaterialResponse is empty message
type DeleteLearningMaterialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteLearningMaterialResponse) Reset() {
	*x = DeleteLearningMaterialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_learning_material_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLearningMaterialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLearningMaterialResponse) ProtoMessage() {}

func (x *DeleteLearningMaterialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_learning_material_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLearningMaterialResponse.ProtoReflect.Descriptor instead.
func (*DeleteLearningMaterialResponse) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_learning_material_service_proto_rawDescGZIP(), []int{5}
}

// SwapDisplayOrderRequest is two learning material types to swap these display order
type SwapDisplayOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstLearningMaterialId  string `protobuf:"bytes,1,opt,name=first_learning_material_id,json=firstLearningMaterialId,proto3" json:"first_learning_material_id,omitempty"`
	SecondLearningMaterialId string `protobuf:"bytes,2,opt,name=second_learning_material_id,json=secondLearningMaterialId,proto3" json:"second_learning_material_id,omitempty"`
}

func (x *SwapDisplayOrderRequest) Reset() {
	*x = SwapDisplayOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_learning_material_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapDisplayOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapDisplayOrderRequest) ProtoMessage() {}

func (x *SwapDisplayOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_learning_material_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapDisplayOrderRequest.ProtoReflect.Descriptor instead.
func (*SwapDisplayOrderRequest) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_learning_material_service_proto_rawDescGZIP(), []int{6}
}

func (x *SwapDisplayOrderRequest) GetFirstLearningMaterialId() string {
	if x != nil {
		return x.FirstLearningMaterialId
	}
	return ""
}

func (x *SwapDisplayOrderRequest) GetSecondLearningMaterialId() string {
	if x != nil {
		return x.SecondLearningMaterialId
	}
	return ""
}

// SwapDisplayOrderResponse is empty response
type SwapDisplayOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SwapDisplayOrderResponse) Reset() {
	*x = SwapDisplayOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_learning_material_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapDisplayOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapDisplayOrderResponse) ProtoMessage() {}

func (x *SwapDisplayOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_learning_material_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapDisplayOrderResponse.ProtoReflect.Descriptor instead.
func (*SwapDisplayOrderResponse) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_learning_material_service_proto_rawDescGZIP(), []int{7}
}

//	message InsertQuizSetTestResponse {
//	    common.v1.Paging next_page = 1;
//	    repeated Quiz quizzes = 2;
//	    string shuffle_quiz_set_id = 3;
//	}
type DuplicateBookRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookId   string `protobuf:"bytes,1,opt,name=book_id,json=bookId,proto3" json:"book_id,omitempty"`
	BookName string `protobuf:"bytes,2,opt,name=book_name,json=bookName,proto3" json:"book_name,omitempty"`
}

func (x *DuplicateBookRequest) Reset() {
	*x = DuplicateBookRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_learning_material_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DuplicateBookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DuplicateBookRequest) ProtoMessage() {}

func (x *DuplicateBookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_learning_material_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DuplicateBookRequest.ProtoReflect.Descriptor instead.
func (*DuplicateBookRequest) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_learning_material_service_proto_rawDescGZIP(), []int{8}
}

func (x *DuplicateBookRequest) GetBookId() string {
	if x != nil {
		return x.BookId
	}
	return ""
}

func (x *DuplicateBookRequest) GetBookName() string {
	if x != nil {
		return x.BookName
	}
	return ""
}

type DuplicateBookResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewBookID  string   `protobuf:"bytes,1,opt,name=newBookID,proto3" json:"newBookID,omitempty"`
	NewTopicId []string `protobuf:"bytes,2,rep,name=new_topic_id,json=newTopicId,proto3" json:"new_topic_id,omitempty"`
	OldTopicId []string `protobuf:"bytes,3,rep,name=old_topic_id,json=oldTopicId,proto3" json:"old_topic_id,omitempty"`
}

func (x *DuplicateBookResponse) Reset() {
	*x = DuplicateBookResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_learning_material_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DuplicateBookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DuplicateBookResponse) ProtoMessage() {}

func (x *DuplicateBookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_learning_material_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DuplicateBookResponse.ProtoReflect.Descriptor instead.
func (*DuplicateBookResponse) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_learning_material_service_proto_rawDescGZIP(), []int{9}
}

func (x *DuplicateBookResponse) GetNewBookID() string {
	if x != nil {
		return x.NewBookID
	}
	return ""
}

func (x *DuplicateBookResponse) GetNewTopicId() []string {
	if x != nil {
		return x.NewTopicId
	}
	return nil
}

func (x *DuplicateBookResponse) GetOldTopicId() []string {
	if x != nil {
		return x.OldTopicId
	}
	return nil
}

// ListLearningMaterial is central insert response for all learning material types
type ListLearningMaterialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*ListLearningMaterialRequest_Assignment
	//	*ListLearningMaterialRequest_ExamLo
	//	*ListLearningMaterialRequest_Flashcard
	//	*ListLearningMaterialRequest_LearningObjective
	//	*ListLearningMaterialRequest_TaskAssignment
	Message isListLearningMaterialRequest_Message `protobuf_oneof:"message"`
}

func (x *ListLearningMaterialRequest) Reset() {
	*x = ListLearningMaterialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_learning_material_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLearningMaterialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLearningMaterialRequest) ProtoMessage() {}

func (x *ListLearningMaterialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_learning_material_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLearningMaterialRequest.ProtoReflect.Descriptor instead.
func (*ListLearningMaterialRequest) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_learning_material_service_proto_rawDescGZIP(), []int{10}
}

func (m *ListLearningMaterialRequest) GetMessage() isListLearningMaterialRequest_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *ListLearningMaterialRequest) GetAssignment() *ListAssignmentRequest {
	if x, ok := x.GetMessage().(*ListLearningMaterialRequest_Assignment); ok {
		return x.Assignment
	}
	return nil
}

func (x *ListLearningMaterialRequest) GetExamLo() *ListExamLORequest {
	if x, ok := x.GetMessage().(*ListLearningMaterialRequest_ExamLo); ok {
		return x.ExamLo
	}
	return nil
}

func (x *ListLearningMaterialRequest) GetFlashcard() *ListFlashcardRequest {
	if x, ok := x.GetMessage().(*ListLearningMaterialRequest_Flashcard); ok {
		return x.Flashcard
	}
	return nil
}

func (x *ListLearningMaterialRequest) GetLearningObjective() *ListLearningObjectiveRequest {
	if x, ok := x.GetMessage().(*ListLearningMaterialRequest_LearningObjective); ok {
		return x.LearningObjective
	}
	return nil
}

func (x *ListLearningMaterialRequest) GetTaskAssignment() *ListTaskAssignmentRequest {
	if x, ok := x.GetMessage().(*ListLearningMaterialRequest_TaskAssignment); ok {
		return x.TaskAssignment
	}
	return nil
}

type isListLearningMaterialRequest_Message interface {
	isListLearningMaterialRequest_Message()
}

type ListLearningMaterialRequest_Assignment struct {
	Assignment *ListAssignmentRequest `protobuf:"bytes,1,opt,name=assignment,proto3,oneof"`
}

type ListLearningMaterialRequest_ExamLo struct {
	ExamLo *ListExamLORequest `protobuf:"bytes,2,opt,name=exam_lo,json=examLo,proto3,oneof"`
}

type ListLearningMaterialRequest_Flashcard struct {
	Flashcard *ListFlashcardRequest `protobuf:"bytes,3,opt,name=flashcard,proto3,oneof"`
}

type ListLearningMaterialRequest_LearningObjective struct {
	LearningObjective *ListLearningObjectiveRequest `protobuf:"bytes,4,opt,name=learning_objective,json=learningObjective,proto3,oneof"`
}

type ListLearningMaterialRequest_TaskAssignment struct {
	TaskAssignment *ListTaskAssignmentRequest `protobuf:"bytes,6,opt,name=task_assignment,json=taskAssignment,proto3,oneof"`
}

func (*ListLearningMaterialRequest_Assignment) isListLearningMaterialRequest_Message() {}

func (*ListLearningMaterialRequest_ExamLo) isListLearningMaterialRequest_Message() {}

func (*ListLearningMaterialRequest_Flashcard) isListLearningMaterialRequest_Message() {}

func (*ListLearningMaterialRequest_LearningObjective) isListLearningMaterialRequest_Message() {}

func (*ListLearningMaterialRequest_TaskAssignment) isListLearningMaterialRequest_Message() {}

type ListLearningMaterialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//
	//	*ListLearningMaterialResponse_Assignment
	//	*ListLearningMaterialResponse_ExamLo
	//	*ListLearningMaterialResponse_Flashcard
	//	*ListLearningMaterialResponse_LearningObjective
	//	*ListLearningMaterialResponse_TaskAssignment
	Message isListLearningMaterialResponse_Message `protobuf_oneof:"message"`
}

func (x *ListLearningMaterialResponse) Reset() {
	*x = ListLearningMaterialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_learning_material_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLearningMaterialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLearningMaterialResponse) ProtoMessage() {}

func (x *ListLearningMaterialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_learning_material_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLearningMaterialResponse.ProtoReflect.Descriptor instead.
func (*ListLearningMaterialResponse) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_learning_material_service_proto_rawDescGZIP(), []int{11}
}

func (m *ListLearningMaterialResponse) GetMessage() isListLearningMaterialResponse_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *ListLearningMaterialResponse) GetAssignment() *ListAssignmentResponse {
	if x, ok := x.GetMessage().(*ListLearningMaterialResponse_Assignment); ok {
		return x.Assignment
	}
	return nil
}

func (x *ListLearningMaterialResponse) GetExamLo() *ListExamLOResponse {
	if x, ok := x.GetMessage().(*ListLearningMaterialResponse_ExamLo); ok {
		return x.ExamLo
	}
	return nil
}

func (x *ListLearningMaterialResponse) GetFlashcard() *ListFlashcardResponse {
	if x, ok := x.GetMessage().(*ListLearningMaterialResponse_Flashcard); ok {
		return x.Flashcard
	}
	return nil
}

func (x *ListLearningMaterialResponse) GetLearningObjective() *ListLearningObjectiveResponse {
	if x, ok := x.GetMessage().(*ListLearningMaterialResponse_LearningObjective); ok {
		return x.LearningObjective
	}
	return nil
}

func (x *ListLearningMaterialResponse) GetTaskAssignment() *ListTaskAssignmentResponse {
	if x, ok := x.GetMessage().(*ListLearningMaterialResponse_TaskAssignment); ok {
		return x.TaskAssignment
	}
	return nil
}

type isListLearningMaterialResponse_Message interface {
	isListLearningMaterialResponse_Message()
}

type ListLearningMaterialResponse_Assignment struct {
	Assignment *ListAssignmentResponse `protobuf:"bytes,1,opt,name=assignment,proto3,oneof"`
}

type ListLearningMaterialResponse_ExamLo struct {
	ExamLo *ListExamLOResponse `protobuf:"bytes,2,opt,name=exam_lo,json=examLo,proto3,oneof"`
}

type ListLearningMaterialResponse_Flashcard struct {
	Flashcard *ListFlashcardResponse `protobuf:"bytes,3,opt,name=flashcard,proto3,oneof"`
}

type ListLearningMaterialResponse_LearningObjective struct {
	LearningObjective *ListLearningObjectiveResponse `protobuf:"bytes,4,opt,name=learning_objective,json=learningObjective,proto3,oneof"`
}

type ListLearningMaterialResponse_TaskAssignment struct {
	TaskAssignment *ListTaskAssignmentResponse `protobuf:"bytes,6,opt,name=task_assignment,json=taskAssignment,proto3,oneof"`
}

func (*ListLearningMaterialResponse_Assignment) isListLearningMaterialResponse_Message() {}

func (*ListLearningMaterialResponse_ExamLo) isListLearningMaterialResponse_Message() {}

func (*ListLearningMaterialResponse_Flashcard) isListLearningMaterialResponse_Message() {}

func (*ListLearningMaterialResponse_LearningObjective) isListLearningMaterialResponse_Message() {}

func (*ListLearningMaterialResponse_TaskAssignment) isListLearningMaterialResponse_Message() {}

type UpdateLearningMaterialNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LearningMaterialId      string `protobuf:"bytes,1,opt,name=learning_material_id,json=learningMaterialId,proto3" json:"learning_material_id,omitempty"`
	NewLearningMaterialName string `protobuf:"bytes,2,opt,name=new_learning_material_name,json=newLearningMaterialName,proto3" json:"new_learning_material_name,omitempty"`
}

func (x *UpdateLearningMaterialNameRequest) Reset() {
	*x = UpdateLearningMaterialNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_learning_material_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLearningMaterialNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLearningMaterialNameRequest) ProtoMessage() {}

func (x *UpdateLearningMaterialNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_learning_material_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLearningMaterialNameRequest.ProtoReflect.Descriptor instead.
func (*UpdateLearningMaterialNameRequest) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_learning_material_service_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateLearningMaterialNameRequest) GetLearningMaterialId() string {
	if x != nil {
		return x.LearningMaterialId
	}
	return ""
}

func (x *UpdateLearningMaterialNameRequest) GetNewLearningMaterialName() string {
	if x != nil {
		return x.NewLearningMaterialName
	}
	return ""
}

type UpdateLearningMaterialNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateLearningMaterialNameResponse) Reset() {
	*x = UpdateLearningMaterialNameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_learning_material_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLearningMaterialNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLearningMaterialNameResponse) ProtoMessage() {}

func (x *UpdateLearningMaterialNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_learning_material_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLearningMaterialNameResponse.ProtoReflect.Descriptor instead.
func (*UpdateLearningMaterialNameResponse) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_learning_material_service_proto_rawDescGZIP(), []int{13}
}

var File_syllabus_v1_learning_material_service_proto protoreflect.FileDescriptor

var file_syllabus_v1_learning_material_service_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73,
	0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x24, 0x73, 0x79, 0x6c, 0x6c,
	0x61, 0x62, 0x75, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x21, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78,
	0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62,
	0x75, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xa7, 0x03, 0x0a, 0x1d, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62,
	0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x65,
	0x78, 0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73,
	0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x4c, 0x6f, 0x12, 0x43, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x73,
	0x68, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x79,
	0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x46, 0x6c, 0x61, 0x73, 0x68, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x09, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x63, 0x61, 0x72, 0x64, 0x12, 0x5c, 0x0a,
	0x12, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x79, 0x6c, 0x6c,
	0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x53, 0x0a, 0x0f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xad, 0x03, 0x0a, 0x1e,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47,
	0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f,
	0x6c, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61,
	0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x45, 0x78, 0x61,
	0x6d, 0x4c, 0x4f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x06, 0x65,
	0x78, 0x61, 0x6d, 0x4c, 0x6f, 0x12, 0x44, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x63, 0x61,
	0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61,
	0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x46, 0x6c, 0x61,
	0x73, 0x68, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x63, 0x61, 0x72, 0x64, 0x12, 0x5d, 0x0a, 0x12, 0x6c,
	0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62,
	0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x54, 0x0a, 0x0f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa7, 0x03, 0x0a, 0x1d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a,
	0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x6c, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x4c,
	0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d,
	0x4c, 0x6f, 0x12, 0x43, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x63, 0x61, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x63,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x66, 0x6c,
	0x61, 0x73, 0x68, 0x63, 0x61, 0x72, 0x64, 0x12, 0x5c, 0x0a, 0x12, 0x6c, 0x65, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x11, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x53, 0x0a, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x61, 0x73, 0x6b,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xac, 0x03, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73,
	0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x3c, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x4c, 0x6f, 0x12,
	0x44, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x63, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x09, 0x66, 0x6c, 0x61, 0x73,
	0x68, 0x63, 0x61, 0x72, 0x64, 0x12, 0x5d, 0x0a, 0x12, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x11, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x53, 0x0a, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x51, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x20, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x17, 0x53, 0x77,
	0x61, 0x70, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6c,
	0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x49, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x6c, 0x65, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49,
	0x64, 0x22, 0x1a, 0x0a, 0x18, 0x53, 0x77, 0x61, 0x70, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c, 0x0a,
	0x14, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x79, 0x0a, 0x15, 0x44,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x42, 0x6f, 0x6f, 0x6b, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x42, 0x6f, 0x6f, 0x6b,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x6c, 0x64, 0x5f, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x6c, 0x64, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x22, 0x9b, 0x03, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x79, 0x6c,
	0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x07,
	0x65, 0x78, 0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x06, 0x65, 0x78, 0x61, 0x6d, 0x4c, 0x6f, 0x12, 0x41, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x73, 0x68,
	0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x79, 0x6c,
	0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61,
	0x73, 0x68, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x09, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x63, 0x61, 0x72, 0x64, 0x12, 0x5a, 0x0a, 0x12, 0x6c, 0x65,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x11, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x51, 0x0a, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xa1, 0x03, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x79, 0x6c, 0x6c,
	0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x07,
	0x65, 0x78, 0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x06, 0x65, 0x78, 0x61, 0x6d, 0x4c, 0x6f, 0x12, 0x42, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x73,
	0x68, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x79,
	0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c,
	0x61, 0x73, 0x68, 0x63, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x63, 0x61, 0x72, 0x64, 0x12, 0x5b, 0x0a, 0x12,
	0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61,
	0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x74,
	0x61, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30,
	0x0a, 0x14, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x65,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x3b, 0x0a, 0x1a, 0x6e, 0x65, 0x77, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x6e, 0x65, 0x77, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x24, 0x0a,
	0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0x90, 0x06, 0x0a, 0x10, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x71, 0x0a, 0x16, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x12, 0x2a, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d,
	0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x16, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x2a, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x2a, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61,
	0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5f, 0x0a, 0x10, 0x53, 0x77, 0x61, 0x70, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x79,
	0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42,
	0x6f, 0x6f, 0x6b, 0x12, 0x21, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x6f,
	0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x14, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x12, 0x28, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73,
	0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x62, 0x69, 0x65, 0x2d, 0x63, 0x6f, 0x6d,
	0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x61, 0x6e,
	0x61, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2f, 0x76, 0x31,
	0x3b, 0x73, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_syllabus_v1_learning_material_service_proto_rawDescOnce sync.Once
	file_syllabus_v1_learning_material_service_proto_rawDescData = file_syllabus_v1_learning_material_service_proto_rawDesc
)

func file_syllabus_v1_learning_material_service_proto_rawDescGZIP() []byte {
	file_syllabus_v1_learning_material_service_proto_rawDescOnce.Do(func() {
		file_syllabus_v1_learning_material_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_syllabus_v1_learning_material_service_proto_rawDescData)
	})
	return file_syllabus_v1_learning_material_service_proto_rawDescData
}

var file_syllabus_v1_learning_material_service_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_syllabus_v1_learning_material_service_proto_goTypes = []interface{}{
	(*InsertLearningMaterialRequest)(nil),      // 0: syllabus.v1.InsertLearningMaterialRequest
	(*InsertLearningMaterialResponse)(nil),     // 1: syllabus.v1.InsertLearningMaterialResponse
	(*UpdateLearningMaterialRequest)(nil),      // 2: syllabus.v1.UpdateLearningMaterialRequest
	(*UpdateLearningMaterialResponse)(nil),     // 3: syllabus.v1.UpdateLearningMaterialResponse
	(*DeleteLearningMaterialRequest)(nil),      // 4: syllabus.v1.DeleteLearningMaterialRequest
	(*DeleteLearningMaterialResponse)(nil),     // 5: syllabus.v1.DeleteLearningMaterialResponse
	(*SwapDisplayOrderRequest)(nil),            // 6: syllabus.v1.SwapDisplayOrderRequest
	(*SwapDisplayOrderResponse)(nil),           // 7: syllabus.v1.SwapDisplayOrderResponse
	(*DuplicateBookRequest)(nil),               // 8: syllabus.v1.DuplicateBookRequest
	(*DuplicateBookResponse)(nil),              // 9: syllabus.v1.DuplicateBookResponse
	(*ListLearningMaterialRequest)(nil),        // 10: syllabus.v1.ListLearningMaterialRequest
	(*ListLearningMaterialResponse)(nil),       // 11: syllabus.v1.ListLearningMaterialResponse
	(*UpdateLearningMaterialNameRequest)(nil),  // 12: syllabus.v1.UpdateLearningMaterialNameRequest
	(*UpdateLearningMaterialNameResponse)(nil), // 13: syllabus.v1.UpdateLearningMaterialNameResponse
	(*InsertAssignmentRequest)(nil),            // 14: syllabus.v1.InsertAssignmentRequest
	(*InsertExamLORequest)(nil),                // 15: syllabus.v1.InsertExamLORequest
	(*InsertFlashcardRequest)(nil),             // 16: syllabus.v1.InsertFlashcardRequest
	(*InsertLearningObjectiveRequest)(nil),     // 17: syllabus.v1.InsertLearningObjectiveRequest
	(*InsertTaskAssignmentRequest)(nil),        // 18: syllabus.v1.InsertTaskAssignmentRequest
	(*InsertAssignmentResponse)(nil),           // 19: syllabus.v1.InsertAssignmentResponse
	(*InsertExamLOResponse)(nil),               // 20: syllabus.v1.InsertExamLOResponse
	(*InsertFlashcardResponse)(nil),            // 21: syllabus.v1.InsertFlashcardResponse
	(*InsertLearningObjectiveResponse)(nil),    // 22: syllabus.v1.InsertLearningObjectiveResponse
	(*InsertTaskAssignmentResponse)(nil),       // 23: syllabus.v1.InsertTaskAssignmentResponse
	(*UpdateAssignmentRequest)(nil),            // 24: syllabus.v1.UpdateAssignmentRequest
	(*UpdateExamLORequest)(nil),                // 25: syllabus.v1.UpdateExamLORequest
	(*UpdateFlashcardRequest)(nil),             // 26: syllabus.v1.UpdateFlashcardRequest
	(*UpdateLearningObjectiveRequest)(nil),     // 27: syllabus.v1.UpdateLearningObjectiveRequest
	(*UpdateTaskAssignmentRequest)(nil),        // 28: syllabus.v1.UpdateTaskAssignmentRequest
	(*UpdateAssignmentResponse)(nil),           // 29: syllabus.v1.UpdateAssignmentResponse
	(*UpdateExamLOResponse)(nil),               // 30: syllabus.v1.UpdateExamLOResponse
	(*UpdateFlashcardResponse)(nil),            // 31: syllabus.v1.UpdateFlashcardResponse
	(*UpdateLearningObjectiveResponse)(nil),    // 32: syllabus.v1.UpdateLearningObjectiveResponse
	(*ListAssignmentRequest)(nil),              // 33: syllabus.v1.ListAssignmentRequest
	(*ListExamLORequest)(nil),                  // 34: syllabus.v1.ListExamLORequest
	(*ListFlashcardRequest)(nil),               // 35: syllabus.v1.ListFlashcardRequest
	(*ListLearningObjectiveRequest)(nil),       // 36: syllabus.v1.ListLearningObjectiveRequest
	(*ListTaskAssignmentRequest)(nil),          // 37: syllabus.v1.ListTaskAssignmentRequest
	(*ListAssignmentResponse)(nil),             // 38: syllabus.v1.ListAssignmentResponse
	(*ListExamLOResponse)(nil),                 // 39: syllabus.v1.ListExamLOResponse
	(*ListFlashcardResponse)(nil),              // 40: syllabus.v1.ListFlashcardResponse
	(*ListLearningObjectiveResponse)(nil),      // 41: syllabus.v1.ListLearningObjectiveResponse
	(*ListTaskAssignmentResponse)(nil),         // 42: syllabus.v1.ListTaskAssignmentResponse
}
var file_syllabus_v1_learning_material_service_proto_depIdxs = []int32{
	14, // 0: syllabus.v1.InsertLearningMaterialRequest.assignment:type_name -> syllabus.v1.InsertAssignmentRequest
	15, // 1: syllabus.v1.InsertLearningMaterialRequest.exam_lo:type_name -> syllabus.v1.InsertExamLORequest
	16, // 2: syllabus.v1.InsertLearningMaterialRequest.flashcard:type_name -> syllabus.v1.InsertFlashcardRequest
	17, // 3: syllabus.v1.InsertLearningMaterialRequest.learning_objective:type_name -> syllabus.v1.InsertLearningObjectiveRequest
	18, // 4: syllabus.v1.InsertLearningMaterialRequest.task_assignment:type_name -> syllabus.v1.InsertTaskAssignmentRequest
	19, // 5: syllabus.v1.InsertLearningMaterialResponse.assignment:type_name -> syllabus.v1.InsertAssignmentResponse
	20, // 6: syllabus.v1.InsertLearningMaterialResponse.exam_lo:type_name -> syllabus.v1.InsertExamLOResponse
	21, // 7: syllabus.v1.InsertLearningMaterialResponse.flashcard:type_name -> syllabus.v1.InsertFlashcardResponse
	22, // 8: syllabus.v1.InsertLearningMaterialResponse.learning_objective:type_name -> syllabus.v1.InsertLearningObjectiveResponse
	23, // 9: syllabus.v1.InsertLearningMaterialResponse.task_assignment:type_name -> syllabus.v1.InsertTaskAssignmentResponse
	24, // 10: syllabus.v1.UpdateLearningMaterialRequest.assignment:type_name -> syllabus.v1.UpdateAssignmentRequest
	25, // 11: syllabus.v1.UpdateLearningMaterialRequest.exam_lo:type_name -> syllabus.v1.UpdateExamLORequest
	26, // 12: syllabus.v1.UpdateLearningMaterialRequest.flashcard:type_name -> syllabus.v1.UpdateFlashcardRequest
	27, // 13: syllabus.v1.UpdateLearningMaterialRequest.learning_objective:type_name -> syllabus.v1.UpdateLearningObjectiveRequest
	28, // 14: syllabus.v1.UpdateLearningMaterialRequest.task_assignment:type_name -> syllabus.v1.UpdateTaskAssignmentRequest
	29, // 15: syllabus.v1.UpdateLearningMaterialResponse.assignment:type_name -> syllabus.v1.UpdateAssignmentResponse
	30, // 16: syllabus.v1.UpdateLearningMaterialResponse.exam_lo:type_name -> syllabus.v1.UpdateExamLOResponse
	31, // 17: syllabus.v1.UpdateLearningMaterialResponse.flashcard:type_name -> syllabus.v1.UpdateFlashcardResponse
	32, // 18: syllabus.v1.UpdateLearningMaterialResponse.learning_objective:type_name -> syllabus.v1.UpdateLearningObjectiveResponse
	28, // 19: syllabus.v1.UpdateLearningMaterialResponse.task_assignment:type_name -> syllabus.v1.UpdateTaskAssignmentRequest
	33, // 20: syllabus.v1.ListLearningMaterialRequest.assignment:type_name -> syllabus.v1.ListAssignmentRequest
	34, // 21: syllabus.v1.ListLearningMaterialRequest.exam_lo:type_name -> syllabus.v1.ListExamLORequest
	35, // 22: syllabus.v1.ListLearningMaterialRequest.flashcard:type_name -> syllabus.v1.ListFlashcardRequest
	36, // 23: syllabus.v1.ListLearningMaterialRequest.learning_objective:type_name -> syllabus.v1.ListLearningObjectiveRequest
	37, // 24: syllabus.v1.ListLearningMaterialRequest.task_assignment:type_name -> syllabus.v1.ListTaskAssignmentRequest
	38, // 25: syllabus.v1.ListLearningMaterialResponse.assignment:type_name -> syllabus.v1.ListAssignmentResponse
	39, // 26: syllabus.v1.ListLearningMaterialResponse.exam_lo:type_name -> syllabus.v1.ListExamLOResponse
	40, // 27: syllabus.v1.ListLearningMaterialResponse.flashcard:type_name -> syllabus.v1.ListFlashcardResponse
	41, // 28: syllabus.v1.ListLearningMaterialResponse.learning_objective:type_name -> syllabus.v1.ListLearningObjectiveResponse
	42, // 29: syllabus.v1.ListLearningMaterialResponse.task_assignment:type_name -> syllabus.v1.ListTaskAssignmentResponse
	0,  // 30: syllabus.v1.LearningMaterial.InsertLearningMaterial:input_type -> syllabus.v1.InsertLearningMaterialRequest
	2,  // 31: syllabus.v1.LearningMaterial.UpdateLearningMaterial:input_type -> syllabus.v1.UpdateLearningMaterialRequest
	4,  // 32: syllabus.v1.LearningMaterial.DeleteLearningMaterial:input_type -> syllabus.v1.DeleteLearningMaterialRequest
	6,  // 33: syllabus.v1.LearningMaterial.SwapDisplayOrder:input_type -> syllabus.v1.SwapDisplayOrderRequest
	8,  // 34: syllabus.v1.LearningMaterial.DuplicateBook:input_type -> syllabus.v1.DuplicateBookRequest
	10, // 35: syllabus.v1.LearningMaterial.ListLearningMaterial:input_type -> syllabus.v1.ListLearningMaterialRequest
	12, // 36: syllabus.v1.LearningMaterial.UpdateLearningMaterialName:input_type -> syllabus.v1.UpdateLearningMaterialNameRequest
	1,  // 37: syllabus.v1.LearningMaterial.InsertLearningMaterial:output_type -> syllabus.v1.InsertLearningMaterialResponse
	3,  // 38: syllabus.v1.LearningMaterial.UpdateLearningMaterial:output_type -> syllabus.v1.UpdateLearningMaterialResponse
	5,  // 39: syllabus.v1.LearningMaterial.DeleteLearningMaterial:output_type -> syllabus.v1.DeleteLearningMaterialResponse
	7,  // 40: syllabus.v1.LearningMaterial.SwapDisplayOrder:output_type -> syllabus.v1.SwapDisplayOrderResponse
	9,  // 41: syllabus.v1.LearningMaterial.DuplicateBook:output_type -> syllabus.v1.DuplicateBookResponse
	11, // 42: syllabus.v1.LearningMaterial.ListLearningMaterial:output_type -> syllabus.v1.ListLearningMaterialResponse
	13, // 43: syllabus.v1.LearningMaterial.UpdateLearningMaterialName:output_type -> syllabus.v1.UpdateLearningMaterialNameResponse
	37, // [37:44] is the sub-list for method output_type
	30, // [30:37] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_syllabus_v1_learning_material_service_proto_init() }
func file_syllabus_v1_learning_material_service_proto_init() {
	if File_syllabus_v1_learning_material_service_proto != nil {
		return
	}
	file_syllabus_v1_assignment_service_proto_init()
	file_syllabus_v1_exam_lo_service_proto_init()
	file_syllabus_v1_flashcard_service_proto_init()
	file_syllabus_v1_learning_objective_service_proto_init()
	file_syllabus_v1_task_assignment_service_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_syllabus_v1_learning_material_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertLearningMaterialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_learning_material_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertLearningMaterialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_learning_material_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLearningMaterialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_learning_material_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLearningMaterialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_learning_material_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLearningMaterialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_learning_material_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLearningMaterialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_learning_material_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapDisplayOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_learning_material_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapDisplayOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_learning_material_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DuplicateBookRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_learning_material_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DuplicateBookResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_learning_material_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLearningMaterialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_learning_material_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLearningMaterialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_learning_material_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLearningMaterialNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_learning_material_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLearningMaterialNameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_syllabus_v1_learning_material_service_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*InsertLearningMaterialRequest_Assignment)(nil),
		(*InsertLearningMaterialRequest_ExamLo)(nil),
		(*InsertLearningMaterialRequest_Flashcard)(nil),
		(*InsertLearningMaterialRequest_LearningObjective)(nil),
		(*InsertLearningMaterialRequest_TaskAssignment)(nil),
	}
	file_syllabus_v1_learning_material_service_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*InsertLearningMaterialResponse_Assignment)(nil),
		(*InsertLearningMaterialResponse_ExamLo)(nil),
		(*InsertLearningMaterialResponse_Flashcard)(nil),
		(*InsertLearningMaterialResponse_LearningObjective)(nil),
		(*InsertLearningMaterialResponse_TaskAssignment)(nil),
	}
	file_syllabus_v1_learning_material_service_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*UpdateLearningMaterialRequest_Assignment)(nil),
		(*UpdateLearningMaterialRequest_ExamLo)(nil),
		(*UpdateLearningMaterialRequest_Flashcard)(nil),
		(*UpdateLearningMaterialRequest_LearningObjective)(nil),
		(*UpdateLearningMaterialRequest_TaskAssignment)(nil),
	}
	file_syllabus_v1_learning_material_service_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*UpdateLearningMaterialResponse_Assignment)(nil),
		(*UpdateLearningMaterialResponse_ExamLo)(nil),
		(*UpdateLearningMaterialResponse_Flashcard)(nil),
		(*UpdateLearningMaterialResponse_LearningObjective)(nil),
		(*UpdateLearningMaterialResponse_TaskAssignment)(nil),
	}
	file_syllabus_v1_learning_material_service_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*ListLearningMaterialRequest_Assignment)(nil),
		(*ListLearningMaterialRequest_ExamLo)(nil),
		(*ListLearningMaterialRequest_Flashcard)(nil),
		(*ListLearningMaterialRequest_LearningObjective)(nil),
		(*ListLearningMaterialRequest_TaskAssignment)(nil),
	}
	file_syllabus_v1_learning_material_service_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*ListLearningMaterialResponse_Assignment)(nil),
		(*ListLearningMaterialResponse_ExamLo)(nil),
		(*ListLearningMaterialResponse_Flashcard)(nil),
		(*ListLearningMaterialResponse_LearningObjective)(nil),
		(*ListLearningMaterialResponse_TaskAssignment)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_syllabus_v1_learning_material_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_syllabus_v1_learning_material_service_proto_goTypes,
		DependencyIndexes: file_syllabus_v1_learning_material_service_proto_depIdxs,
		MessageInfos:      file_syllabus_v1_learning_material_service_proto_msgTypes,
	}.Build()
	File_syllabus_v1_learning_material_service_proto = out.File
	file_syllabus_v1_learning_material_service_proto_rawDesc = nil
	file_syllabus_v1_learning_material_service_proto_goTypes = nil
	file_syllabus_v1_learning_material_service_proto_depIdxs = nil
}
