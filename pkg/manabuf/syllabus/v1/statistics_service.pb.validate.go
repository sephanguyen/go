// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: syllabus/v1/statistics_service.proto

package sspb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetStudentAssignmentProgressRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetStudentAssignmentProgressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStudentAssignmentProgressRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetStudentAssignmentProgressRequestMultiError, or nil if none found.
func (m *GetStudentAssignmentProgressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStudentAssignmentProgressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MasterStudyPlanId

	// no validation rules for StudentId

	if len(errors) > 0 {
		return GetStudentAssignmentProgressRequestMultiError(errors)
	}

	return nil
}

// GetStudentAssignmentProgressRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetStudentAssignmentProgressRequest.ValidateAll() if the designated
// constraints aren't met.
type GetStudentAssignmentProgressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStudentAssignmentProgressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStudentAssignmentProgressRequestMultiError) AllErrors() []error { return m }

// GetStudentAssignmentProgressRequestValidationError is the validation error
// returned by GetStudentAssignmentProgressRequest.Validate if the designated
// constraints aren't met.
type GetStudentAssignmentProgressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStudentAssignmentProgressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStudentAssignmentProgressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStudentAssignmentProgressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStudentAssignmentProgressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStudentAssignmentProgressRequestValidationError) ErrorName() string {
	return "GetStudentAssignmentProgressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStudentAssignmentProgressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStudentAssignmentProgressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStudentAssignmentProgressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStudentAssignmentProgressRequestValidationError{}

// Validate checks the field values on GetStudentAssignmentProgressResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetStudentAssignmentProgressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStudentAssignmentProgressResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetStudentAssignmentProgressResponseMultiError, or nil if none found.
func (m *GetStudentAssignmentProgressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStudentAssignmentProgressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CompletedAssignments

	// no validation rules for TotalAssignments

	if len(errors) > 0 {
		return GetStudentAssignmentProgressResponseMultiError(errors)
	}

	return nil
}

// GetStudentAssignmentProgressResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetStudentAssignmentProgressResponse.ValidateAll() if the designated
// constraints aren't met.
type GetStudentAssignmentProgressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStudentAssignmentProgressResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStudentAssignmentProgressResponseMultiError) AllErrors() []error { return m }

// GetStudentAssignmentProgressResponseValidationError is the validation error
// returned by GetStudentAssignmentProgressResponse.Validate if the designated
// constraints aren't met.
type GetStudentAssignmentProgressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStudentAssignmentProgressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStudentAssignmentProgressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStudentAssignmentProgressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStudentAssignmentProgressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStudentAssignmentProgressResponseValidationError) ErrorName() string {
	return "GetStudentAssignmentProgressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStudentAssignmentProgressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStudentAssignmentProgressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStudentAssignmentProgressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStudentAssignmentProgressResponseValidationError{}

// Validate checks the field values on StatisticsTodoItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StatisticsTodoItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatisticsTodoItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StatisticsTodoItemMultiError, or nil if none found.
func (m *StatisticsTodoItem) ValidateAll() error {
	return m.validate(true)
}

func (m *StatisticsTodoItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTodoItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StatisticsTodoItemValidationError{
					field:  "TodoItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StatisticsTodoItemValidationError{
					field:  "TodoItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTodoItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StatisticsTodoItemValidationError{
				field:  "TodoItem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CompletedStudent

	// no validation rules for TotalAssignedStudent

	if len(errors) > 0 {
		return StatisticsTodoItemMultiError(errors)
	}

	return nil
}

// StatisticsTodoItemMultiError is an error wrapping multiple validation errors
// returned by StatisticsTodoItem.ValidateAll() if the designated constraints
// aren't met.
type StatisticsTodoItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatisticsTodoItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatisticsTodoItemMultiError) AllErrors() []error { return m }

// StatisticsTodoItemValidationError is the validation error returned by
// StatisticsTodoItem.Validate if the designated constraints aren't met.
type StatisticsTodoItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatisticsTodoItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatisticsTodoItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatisticsTodoItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatisticsTodoItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatisticsTodoItemValidationError) ErrorName() string {
	return "StatisticsTodoItemValidationError"
}

// Error satisfies the builtin error interface
func (e StatisticsTodoItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatisticsTodoItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatisticsTodoItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatisticsTodoItemValidationError{}

// Validate checks the field values on GetCourseProgressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCourseProgressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCourseProgressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCourseProgressRequestMultiError, or nil if none found.
func (m *GetCourseProgressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCourseProgressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MasterStudyPlanId

	if len(errors) > 0 {
		return GetCourseProgressRequestMultiError(errors)
	}

	return nil
}

// GetCourseProgressRequestMultiError is an error wrapping multiple validation
// errors returned by GetCourseProgressRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCourseProgressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCourseProgressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCourseProgressRequestMultiError) AllErrors() []error { return m }

// GetCourseProgressRequestValidationError is the validation error returned by
// GetCourseProgressRequest.Validate if the designated constraints aren't met.
type GetCourseProgressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourseProgressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourseProgressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourseProgressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourseProgressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourseProgressRequestValidationError) ErrorName() string {
	return "GetCourseProgressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCourseProgressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourseProgressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourseProgressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourseProgressRequestValidationError{}

// Validate checks the field values on GetCourseProgressResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCourseProgressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCourseProgressResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCourseProgressResponseMultiError, or nil if none found.
func (m *GetCourseProgressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCourseProgressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStatisticsItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCourseProgressResponseValidationError{
						field:  fmt.Sprintf("StatisticsItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCourseProgressResponseValidationError{
						field:  fmt.Sprintf("StatisticsItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCourseProgressResponseValidationError{
					field:  fmt.Sprintf("StatisticsItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCourseProgressResponseMultiError(errors)
	}

	return nil
}

// GetCourseProgressResponseMultiError is an error wrapping multiple validation
// errors returned by GetCourseProgressResponse.ValidateAll() if the
// designated constraints aren't met.
type GetCourseProgressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCourseProgressResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCourseProgressResponseMultiError) AllErrors() []error { return m }

// GetCourseProgressResponseValidationError is the validation error returned by
// GetCourseProgressResponse.Validate if the designated constraints aren't met.
type GetCourseProgressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCourseProgressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCourseProgressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCourseProgressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCourseProgressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCourseProgressResponseValidationError) ErrorName() string {
	return "GetCourseProgressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCourseProgressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCourseProgressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCourseProgressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCourseProgressResponseValidationError{}

// Validate checks the field values on
// GetLearningMaterialProgressInClassRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetLearningMaterialProgressInClassRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetLearningMaterialProgressInClassRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetLearningMaterialProgressInClassRequestMultiError, or nil if none found.
func (m *GetLearningMaterialProgressInClassRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLearningMaterialProgressInClassRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClassId

	if all {
		switch v := interface{}(m.GetMasterStudyPlanItemIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLearningMaterialProgressInClassRequestValidationError{
					field:  "MasterStudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLearningMaterialProgressInClassRequestValidationError{
					field:  "MasterStudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMasterStudyPlanItemIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLearningMaterialProgressInClassRequestValidationError{
				field:  "MasterStudyPlanItemIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetLearningMaterialProgressInClassRequestMultiError(errors)
	}

	return nil
}

// GetLearningMaterialProgressInClassRequestMultiError is an error wrapping
// multiple validation errors returned by
// GetLearningMaterialProgressInClassRequest.ValidateAll() if the designated
// constraints aren't met.
type GetLearningMaterialProgressInClassRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLearningMaterialProgressInClassRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLearningMaterialProgressInClassRequestMultiError) AllErrors() []error { return m }

// GetLearningMaterialProgressInClassRequestValidationError is the validation
// error returned by GetLearningMaterialProgressInClassRequest.Validate if the
// designated constraints aren't met.
type GetLearningMaterialProgressInClassRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLearningMaterialProgressInClassRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLearningMaterialProgressInClassRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLearningMaterialProgressInClassRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLearningMaterialProgressInClassRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLearningMaterialProgressInClassRequestValidationError) ErrorName() string {
	return "GetLearningMaterialProgressInClassRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLearningMaterialProgressInClassRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLearningMaterialProgressInClassRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLearningMaterialProgressInClassRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLearningMaterialProgressInClassRequestValidationError{}

// Validate checks the field values on
// GetLearningMaterialProgressInClassResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetLearningMaterialProgressInClassResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetLearningMaterialProgressInClassResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// GetLearningMaterialProgressInClassResponseMultiError, or nil if none found.
func (m *GetLearningMaterialProgressInClassResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLearningMaterialProgressInClassResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatisticsItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLearningMaterialProgressInClassResponseValidationError{
					field:  "StatisticsItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLearningMaterialProgressInClassResponseValidationError{
					field:  "StatisticsItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatisticsItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLearningMaterialProgressInClassResponseValidationError{
				field:  "StatisticsItem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetLearningMaterialProgressInClassResponseMultiError(errors)
	}

	return nil
}

// GetLearningMaterialProgressInClassResponseMultiError is an error wrapping
// multiple validation errors returned by
// GetLearningMaterialProgressInClassResponse.ValidateAll() if the designated
// constraints aren't met.
type GetLearningMaterialProgressInClassResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLearningMaterialProgressInClassResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLearningMaterialProgressInClassResponseMultiError) AllErrors() []error { return m }

// GetLearningMaterialProgressInClassResponseValidationError is the validation
// error returned by GetLearningMaterialProgressInClassResponse.Validate if
// the designated constraints aren't met.
type GetLearningMaterialProgressInClassResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLearningMaterialProgressInClassResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLearningMaterialProgressInClassResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLearningMaterialProgressInClassResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLearningMaterialProgressInClassResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLearningMaterialProgressInClassResponseValidationError) ErrorName() string {
	return "GetLearningMaterialProgressInClassResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLearningMaterialProgressInClassResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLearningMaterialProgressInClassResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLearningMaterialProgressInClassResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLearningMaterialProgressInClassResponseValidationError{}

// Validate checks the field values on LearningMaterialResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LearningMaterialResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LearningMaterialResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LearningMaterialResultMultiError, or nil if none found.
func (m *LearningMaterialResult) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningMaterialResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLearningMaterial()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LearningMaterialResultValidationError{
					field:  "LearningMaterial",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LearningMaterialResultValidationError{
					field:  "LearningMaterial",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLearningMaterial()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LearningMaterialResultValidationError{
				field:  "LearningMaterial",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsCompleted

	// no validation rules for Crown

	if len(errors) > 0 {
		return LearningMaterialResultMultiError(errors)
	}

	return nil
}

// LearningMaterialResultMultiError is an error wrapping multiple validation
// errors returned by LearningMaterialResult.ValidateAll() if the designated
// constraints aren't met.
type LearningMaterialResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningMaterialResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningMaterialResultMultiError) AllErrors() []error { return m }

// LearningMaterialResultValidationError is the validation error returned by
// LearningMaterialResult.Validate if the designated constraints aren't met.
type LearningMaterialResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningMaterialResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningMaterialResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningMaterialResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningMaterialResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningMaterialResultValidationError) ErrorName() string {
	return "LearningMaterialResultValidationError"
}

// Error satisfies the builtin error interface
func (e LearningMaterialResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningMaterialResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningMaterialResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningMaterialResultValidationError{}

// Validate checks the field values on StudentTopicStudyProgress with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StudentTopicStudyProgress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StudentTopicStudyProgress with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StudentTopicStudyProgressMultiError, or nil if none found.
func (m *StudentTopicStudyProgress) ValidateAll() error {
	return m.validate(true)
}

func (m *StudentTopicStudyProgress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TopicId

	if all {
		switch v := interface{}(m.GetCompletedStudyPlanItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudentTopicStudyProgressValidationError{
					field:  "CompletedStudyPlanItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudentTopicStudyProgressValidationError{
					field:  "CompletedStudyPlanItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompletedStudyPlanItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudentTopicStudyProgressValidationError{
				field:  "CompletedStudyPlanItem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTotalStudyPlanItem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudentTopicStudyProgressValidationError{
					field:  "TotalStudyPlanItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudentTopicStudyProgressValidationError{
					field:  "TotalStudyPlanItem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTotalStudyPlanItem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudentTopicStudyProgressValidationError{
				field:  "TotalStudyPlanItem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAverageScore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudentTopicStudyProgressValidationError{
					field:  "AverageScore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudentTopicStudyProgressValidationError{
					field:  "AverageScore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAverageScore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudentTopicStudyProgressValidationError{
				field:  "AverageScore",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TopicName

	// no validation rules for DisplayOrder

	// no validation rules for IconUrl

	if len(errors) > 0 {
		return StudentTopicStudyProgressMultiError(errors)
	}

	return nil
}

// StudentTopicStudyProgressMultiError is an error wrapping multiple validation
// errors returned by StudentTopicStudyProgress.ValidateAll() if the
// designated constraints aren't met.
type StudentTopicStudyProgressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StudentTopicStudyProgressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StudentTopicStudyProgressMultiError) AllErrors() []error { return m }

// StudentTopicStudyProgressValidationError is the validation error returned by
// StudentTopicStudyProgress.Validate if the designated constraints aren't met.
type StudentTopicStudyProgressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StudentTopicStudyProgressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StudentTopicStudyProgressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StudentTopicStudyProgressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StudentTopicStudyProgressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StudentTopicStudyProgressValidationError) ErrorName() string {
	return "StudentTopicStudyProgressValidationError"
}

// Error satisfies the builtin error interface
func (e StudentTopicStudyProgressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStudentTopicStudyProgress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StudentTopicStudyProgressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StudentTopicStudyProgressValidationError{}

// Validate checks the field values on StudentChapterStudyProgress with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StudentChapterStudyProgress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StudentChapterStudyProgress with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StudentChapterStudyProgressMultiError, or nil if none found.
func (m *StudentChapterStudyProgress) ValidateAll() error {
	return m.validate(true)
}

func (m *StudentChapterStudyProgress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChapterId

	if all {
		switch v := interface{}(m.GetAverageScore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudentChapterStudyProgressValidationError{
					field:  "AverageScore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudentChapterStudyProgressValidationError{
					field:  "AverageScore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAverageScore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudentChapterStudyProgressValidationError{
				field:  "AverageScore",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StudentChapterStudyProgressMultiError(errors)
	}

	return nil
}

// StudentChapterStudyProgressMultiError is an error wrapping multiple
// validation errors returned by StudentChapterStudyProgress.ValidateAll() if
// the designated constraints aren't met.
type StudentChapterStudyProgressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StudentChapterStudyProgressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StudentChapterStudyProgressMultiError) AllErrors() []error { return m }

// StudentChapterStudyProgressValidationError is the validation error returned
// by StudentChapterStudyProgress.Validate if the designated constraints
// aren't met.
type StudentChapterStudyProgressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StudentChapterStudyProgressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StudentChapterStudyProgressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StudentChapterStudyProgressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StudentChapterStudyProgressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StudentChapterStudyProgressValidationError) ErrorName() string {
	return "StudentChapterStudyProgressValidationError"
}

// Error satisfies the builtin error interface
func (e StudentChapterStudyProgressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStudentChapterStudyProgress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StudentChapterStudyProgressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StudentChapterStudyProgressValidationError{}

// Validate checks the field values on GetStudentProgressRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStudentProgressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStudentProgressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStudentProgressRequestMultiError, or nil if none found.
func (m *GetStudentProgressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStudentProgressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStudyPlanItemIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStudentProgressRequestValidationError{
					field:  "StudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStudentProgressRequestValidationError{
					field:  "StudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStudyPlanItemIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStudentProgressRequestValidationError{
				field:  "StudyPlanItemIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CourseId

	if len(errors) > 0 {
		return GetStudentProgressRequestMultiError(errors)
	}

	return nil
}

// GetStudentProgressRequestMultiError is an error wrapping multiple validation
// errors returned by GetStudentProgressRequest.ValidateAll() if the
// designated constraints aren't met.
type GetStudentProgressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStudentProgressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStudentProgressRequestMultiError) AllErrors() []error { return m }

// GetStudentProgressRequestValidationError is the validation error returned by
// GetStudentProgressRequest.Validate if the designated constraints aren't met.
type GetStudentProgressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStudentProgressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStudentProgressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStudentProgressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStudentProgressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStudentProgressRequestValidationError) ErrorName() string {
	return "GetStudentProgressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStudentProgressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStudentProgressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStudentProgressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStudentProgressRequestValidationError{}

// Validate checks the field values on GetStudentProgressResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStudentProgressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStudentProgressResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStudentProgressResponseMultiError, or nil if none found.
func (m *GetStudentProgressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStudentProgressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStudentStudyPlanProgresses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStudentProgressResponseValidationError{
						field:  fmt.Sprintf("StudentStudyPlanProgresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStudentProgressResponseValidationError{
						field:  fmt.Sprintf("StudentStudyPlanProgresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStudentProgressResponseValidationError{
					field:  fmt.Sprintf("StudentStudyPlanProgresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetStudentProgressResponseMultiError(errors)
	}

	return nil
}

// GetStudentProgressResponseMultiError is an error wrapping multiple
// validation errors returned by GetStudentProgressResponse.ValidateAll() if
// the designated constraints aren't met.
type GetStudentProgressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStudentProgressResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStudentProgressResponseMultiError) AllErrors() []error { return m }

// GetStudentProgressResponseValidationError is the validation error returned
// by GetStudentProgressResponse.Validate if the designated constraints aren't met.
type GetStudentProgressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStudentProgressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStudentProgressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStudentProgressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStudentProgressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStudentProgressResponseValidationError) ErrorName() string {
	return "GetStudentProgressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStudentProgressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStudentProgressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStudentProgressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStudentProgressResponseValidationError{}

// Validate checks the field values on GetStudyPlanItemEventLogsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetStudyPlanItemEventLogsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStudyPlanItemEventLogsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetStudyPlanItemEventLogsRequestMultiError, or nil if none found.
func (m *GetStudyPlanItemEventLogsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStudyPlanItemEventLogsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStudyPlanItemIdentity() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStudyPlanItemEventLogsRequestValidationError{
						field:  fmt.Sprintf("StudyPlanItemIdentity[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStudyPlanItemEventLogsRequestValidationError{
						field:  fmt.Sprintf("StudyPlanItemIdentity[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStudyPlanItemEventLogsRequestValidationError{
					field:  fmt.Sprintf("StudyPlanItemIdentity[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetStudyPlanItemEventLogsRequestMultiError(errors)
	}

	return nil
}

// GetStudyPlanItemEventLogsRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetStudyPlanItemEventLogsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetStudyPlanItemEventLogsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStudyPlanItemEventLogsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStudyPlanItemEventLogsRequestMultiError) AllErrors() []error { return m }

// GetStudyPlanItemEventLogsRequestValidationError is the validation error
// returned by GetStudyPlanItemEventLogsRequest.Validate if the designated
// constraints aren't met.
type GetStudyPlanItemEventLogsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStudyPlanItemEventLogsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStudyPlanItemEventLogsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStudyPlanItemEventLogsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStudyPlanItemEventLogsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStudyPlanItemEventLogsRequestValidationError) ErrorName() string {
	return "GetStudyPlanItemEventLogsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStudyPlanItemEventLogsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStudyPlanItemEventLogsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStudyPlanItemEventLogsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStudyPlanItemEventLogsRequestValidationError{}

// Validate checks the field values on GetStudyPlanItemEventLogsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetStudyPlanItemEventLogsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStudyPlanItemEventLogsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetStudyPlanItemEventLogsResponseMultiError, or nil if none found.
func (m *GetStudyPlanItemEventLogsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStudyPlanItemEventLogsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStudyPlanItemEventLogsResponseValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStudyPlanItemEventLogsResponseValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStudyPlanItemEventLogsResponseValidationError{
					field:  fmt.Sprintf("Logs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetStudyPlanItemEventLogsResponseMultiError(errors)
	}

	return nil
}

// GetStudyPlanItemEventLogsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetStudyPlanItemEventLogsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetStudyPlanItemEventLogsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStudyPlanItemEventLogsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStudyPlanItemEventLogsResponseMultiError) AllErrors() []error { return m }

// GetStudyPlanItemEventLogsResponseValidationError is the validation error
// returned by GetStudyPlanItemEventLogsResponse.Validate if the designated
// constraints aren't met.
type GetStudyPlanItemEventLogsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStudyPlanItemEventLogsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStudyPlanItemEventLogsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStudyPlanItemEventLogsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStudyPlanItemEventLogsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStudyPlanItemEventLogsResponseValidationError) ErrorName() string {
	return "GetStudyPlanItemEventLogsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStudyPlanItemEventLogsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStudyPlanItemEventLogsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStudyPlanItemEventLogsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStudyPlanItemEventLogsResponseValidationError{}

// Validate checks the field values on
// ListLOHighestScoresByStudyPlanItemIDsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListLOHighestScoresByStudyPlanItemIDsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListLOHighestScoresByStudyPlanItemIDsRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListLOHighestScoresByStudyPlanItemIDsRequestMultiError, or nil if none found.
func (m *ListLOHighestScoresByStudyPlanItemIDsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLOHighestScoresByStudyPlanItemIDsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStudyPlanItemIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListLOHighestScoresByStudyPlanItemIDsRequestValidationError{
					field:  "StudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListLOHighestScoresByStudyPlanItemIDsRequestValidationError{
					field:  "StudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStudyPlanItemIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListLOHighestScoresByStudyPlanItemIDsRequestValidationError{
				field:  "StudyPlanItemIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListLOHighestScoresByStudyPlanItemIDsRequestMultiError(errors)
	}

	return nil
}

// ListLOHighestScoresByStudyPlanItemIDsRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListLOHighestScoresByStudyPlanItemIDsRequest.ValidateAll() if the
// designated constraints aren't met.
type ListLOHighestScoresByStudyPlanItemIDsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLOHighestScoresByStudyPlanItemIDsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLOHighestScoresByStudyPlanItemIDsRequestMultiError) AllErrors() []error { return m }

// ListLOHighestScoresByStudyPlanItemIDsRequestValidationError is the
// validation error returned by
// ListLOHighestScoresByStudyPlanItemIDsRequest.Validate if the designated
// constraints aren't met.
type ListLOHighestScoresByStudyPlanItemIDsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLOHighestScoresByStudyPlanItemIDsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLOHighestScoresByStudyPlanItemIDsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLOHighestScoresByStudyPlanItemIDsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLOHighestScoresByStudyPlanItemIDsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLOHighestScoresByStudyPlanItemIDsRequestValidationError) ErrorName() string {
	return "ListLOHighestScoresByStudyPlanItemIDsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLOHighestScoresByStudyPlanItemIDsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLOHighestScoresByStudyPlanItemIDsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLOHighestScoresByStudyPlanItemIDsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLOHighestScoresByStudyPlanItemIDsRequestValidationError{}

// Validate checks the field values on
// ListLOHighestScoresByStudyPlanItemIDsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListLOHighestScoresByStudyPlanItemIDsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListLOHighestScoresByStudyPlanItemIDsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListLOHighestScoresByStudyPlanItemIDsResponseMultiError, or nil if none found.
func (m *ListLOHighestScoresByStudyPlanItemIDsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLOHighestScoresByStudyPlanItemIDsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLoHighestScores() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLOHighestScoresByStudyPlanItemIDsResponseValidationError{
						field:  fmt.Sprintf("LoHighestScores[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLOHighestScoresByStudyPlanItemIDsResponseValidationError{
						field:  fmt.Sprintf("LoHighestScores[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLOHighestScoresByStudyPlanItemIDsResponseValidationError{
					field:  fmt.Sprintf("LoHighestScores[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListLOHighestScoresByStudyPlanItemIDsResponseMultiError(errors)
	}

	return nil
}

// ListLOHighestScoresByStudyPlanItemIDsResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListLOHighestScoresByStudyPlanItemIDsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListLOHighestScoresByStudyPlanItemIDsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLOHighestScoresByStudyPlanItemIDsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLOHighestScoresByStudyPlanItemIDsResponseMultiError) AllErrors() []error { return m }

// ListLOHighestScoresByStudyPlanItemIDsResponseValidationError is the
// validation error returned by
// ListLOHighestScoresByStudyPlanItemIDsResponse.Validate if the designated
// constraints aren't met.
type ListLOHighestScoresByStudyPlanItemIDsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLOHighestScoresByStudyPlanItemIDsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLOHighestScoresByStudyPlanItemIDsResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListLOHighestScoresByStudyPlanItemIDsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLOHighestScoresByStudyPlanItemIDsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLOHighestScoresByStudyPlanItemIDsResponseValidationError) ErrorName() string {
	return "ListLOHighestScoresByStudyPlanItemIDsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLOHighestScoresByStudyPlanItemIDsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLOHighestScoresByStudyPlanItemIDsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLOHighestScoresByStudyPlanItemIDsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLOHighestScoresByStudyPlanItemIDsResponseValidationError{}

// Validate checks the field values on GetStudentStatRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStudentStatRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStudentStatRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStudentStatRequestMultiError, or nil if none found.
func (m *GetStudentStatRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStudentStatRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StudentId

	if len(errors) > 0 {
		return GetStudentStatRequestMultiError(errors)
	}

	return nil
}

// GetStudentStatRequestMultiError is an error wrapping multiple validation
// errors returned by GetStudentStatRequest.ValidateAll() if the designated
// constraints aren't met.
type GetStudentStatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStudentStatRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStudentStatRequestMultiError) AllErrors() []error { return m }

// GetStudentStatRequestValidationError is the validation error returned by
// GetStudentStatRequest.Validate if the designated constraints aren't met.
type GetStudentStatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStudentStatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStudentStatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStudentStatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStudentStatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStudentStatRequestValidationError) ErrorName() string {
	return "GetStudentStatRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStudentStatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStudentStatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStudentStatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStudentStatRequestValidationError{}

// Validate checks the field values on StudentStatCrown with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StudentStatCrown) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StudentStatCrown with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StudentStatCrownMultiError, or nil if none found.
func (m *StudentStatCrown) ValidateAll() error {
	return m.validate(true)
}

func (m *StudentStatCrown) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AchievementCrown

	// no validation rules for Total

	if len(errors) > 0 {
		return StudentStatCrownMultiError(errors)
	}

	return nil
}

// StudentStatCrownMultiError is an error wrapping multiple validation errors
// returned by StudentStatCrown.ValidateAll() if the designated constraints
// aren't met.
type StudentStatCrownMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StudentStatCrownMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StudentStatCrownMultiError) AllErrors() []error { return m }

// StudentStatCrownValidationError is the validation error returned by
// StudentStatCrown.Validate if the designated constraints aren't met.
type StudentStatCrownValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StudentStatCrownValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StudentStatCrownValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StudentStatCrownValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StudentStatCrownValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StudentStatCrownValidationError) ErrorName() string { return "StudentStatCrownValidationError" }

// Error satisfies the builtin error interface
func (e StudentStatCrownValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStudentStatCrown.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StudentStatCrownValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StudentStatCrownValidationError{}

// Validate checks the field values on StudentStat with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StudentStat) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StudentStat with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StudentStatMultiError, or
// nil if none found.
func (m *StudentStat) ValidateAll() error {
	return m.validate(true)
}

func (m *StudentStat) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalLearningTime

	// no validation rules for TotalLearningMaterialFinished

	for idx, item := range m.GetCrowns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StudentStatValidationError{
						field:  fmt.Sprintf("Crowns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StudentStatValidationError{
						field:  fmt.Sprintf("Crowns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StudentStatValidationError{
					field:  fmt.Sprintf("Crowns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StudentStatMultiError(errors)
	}

	return nil
}

// StudentStatMultiError is an error wrapping multiple validation errors
// returned by StudentStat.ValidateAll() if the designated constraints aren't met.
type StudentStatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StudentStatMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StudentStatMultiError) AllErrors() []error { return m }

// StudentStatValidationError is the validation error returned by
// StudentStat.Validate if the designated constraints aren't met.
type StudentStatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StudentStatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StudentStatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StudentStatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StudentStatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StudentStatValidationError) ErrorName() string { return "StudentStatValidationError" }

// Error satisfies the builtin error interface
func (e StudentStatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStudentStat.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StudentStatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StudentStatValidationError{}

// Validate checks the field values on GetStudentStatResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetStudentStatResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStudentStatResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStudentStatResponseMultiError, or nil if none found.
func (m *GetStudentStatResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStudentStatResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStudentStatistics()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStudentStatResponseValidationError{
					field:  "StudentStatistics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStudentStatResponseValidationError{
					field:  "StudentStatistics",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStudentStatistics()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStudentStatResponseValidationError{
				field:  "StudentStatistics",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetStudentStatResponseMultiError(errors)
	}

	return nil
}

// GetStudentStatResponseMultiError is an error wrapping multiple validation
// errors returned by GetStudentStatResponse.ValidateAll() if the designated
// constraints aren't met.
type GetStudentStatResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStudentStatResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStudentStatResponseMultiError) AllErrors() []error { return m }

// GetStudentStatResponseValidationError is the validation error returned by
// GetStudentStatResponse.Validate if the designated constraints aren't met.
type GetStudentStatResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStudentStatResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStudentStatResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStudentStatResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStudentStatResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStudentStatResponseValidationError) ErrorName() string {
	return "GetStudentStatResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStudentStatResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStudentStatResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStudentStatResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStudentStatResponseValidationError{}

// Validate checks the field values on GetStudentQuestionSetTestsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetStudentQuestionSetTestsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStudentQuestionSetTestsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetStudentQuestionSetTestsRequestMultiError, or nil if none found.
func (m *GetStudentQuestionSetTestsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStudentQuestionSetTestsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStudyPlanItemIdentities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStudentQuestionSetTestsRequestValidationError{
						field:  fmt.Sprintf("StudyPlanItemIdentities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStudentQuestionSetTestsRequestValidationError{
						field:  fmt.Sprintf("StudyPlanItemIdentities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStudentQuestionSetTestsRequestValidationError{
					field:  fmt.Sprintf("StudyPlanItemIdentities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IsCompleted

	if len(errors) > 0 {
		return GetStudentQuestionSetTestsRequestMultiError(errors)
	}

	return nil
}

// GetStudentQuestionSetTestsRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetStudentQuestionSetTestsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetStudentQuestionSetTestsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStudentQuestionSetTestsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStudentQuestionSetTestsRequestMultiError) AllErrors() []error { return m }

// GetStudentQuestionSetTestsRequestValidationError is the validation error
// returned by GetStudentQuestionSetTestsRequest.Validate if the designated
// constraints aren't met.
type GetStudentQuestionSetTestsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStudentQuestionSetTestsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStudentQuestionSetTestsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStudentQuestionSetTestsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStudentQuestionSetTestsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStudentQuestionSetTestsRequestValidationError) ErrorName() string {
	return "GetStudentQuestionSetTestsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetStudentQuestionSetTestsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStudentQuestionSetTestsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStudentQuestionSetTestsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStudentQuestionSetTestsRequestValidationError{}

// Validate checks the field values on HighestQuestionScore with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HighestQuestionScore) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HighestQuestionScore with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HighestQuestionScoreMultiError, or nil if none found.
func (m *HighestQuestionScore) ValidateAll() error {
	return m.validate(true)
}

func (m *HighestQuestionScore) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCorrectQuestion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HighestQuestionScoreValidationError{
					field:  "CorrectQuestion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HighestQuestionScoreValidationError{
					field:  "CorrectQuestion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCorrectQuestion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HighestQuestionScoreValidationError{
				field:  "CorrectQuestion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TotalQuestion

	if len(errors) > 0 {
		return HighestQuestionScoreMultiError(errors)
	}

	return nil
}

// HighestQuestionScoreMultiError is an error wrapping multiple validation
// errors returned by HighestQuestionScore.ValidateAll() if the designated
// constraints aren't met.
type HighestQuestionScoreMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HighestQuestionScoreMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HighestQuestionScoreMultiError) AllErrors() []error { return m }

// HighestQuestionScoreValidationError is the validation error returned by
// HighestQuestionScore.Validate if the designated constraints aren't met.
type HighestQuestionScoreValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HighestQuestionScoreValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HighestQuestionScoreValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HighestQuestionScoreValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HighestQuestionScoreValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HighestQuestionScoreValidationError) ErrorName() string {
	return "HighestQuestionScoreValidationError"
}

// Error satisfies the builtin error interface
func (e HighestQuestionScoreValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHighestQuestionScore.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HighestQuestionScoreValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HighestQuestionScoreValidationError{}

// Validate checks the field values on QuestionSetTest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *QuestionSetTest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuestionSetTest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuestionSetTestMultiError, or nil if none found.
func (m *QuestionSetTest) ValidateAll() error {
	return m.validate(true)
}

func (m *QuestionSetTest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShuffleQuestionSetId

	if all {
		switch v := interface{}(m.GetTotalCorrectness()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuestionSetTestValidationError{
					field:  "TotalCorrectness",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuestionSetTestValidationError{
					field:  "TotalCorrectness",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTotalCorrectness()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuestionSetTestValidationError{
				field:  "TotalCorrectness",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TotalQuestion

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuestionSetTestValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuestionSetTestValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuestionSetTestValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCompletedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuestionSetTestValidationError{
					field:  "CompletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuestionSetTestValidationError{
					field:  "CompletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuestionSetTestValidationError{
				field:  "CompletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TotalLearningTime

	// no validation rules for IsRetry

	if len(errors) > 0 {
		return QuestionSetTestMultiError(errors)
	}

	return nil
}

// QuestionSetTestMultiError is an error wrapping multiple validation errors
// returned by QuestionSetTest.ValidateAll() if the designated constraints
// aren't met.
type QuestionSetTestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuestionSetTestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuestionSetTestMultiError) AllErrors() []error { return m }

// QuestionSetTestValidationError is the validation error returned by
// QuestionSetTest.Validate if the designated constraints aren't met.
type QuestionSetTestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionSetTestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionSetTestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionSetTestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionSetTestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionSetTestValidationError) ErrorName() string { return "QuestionSetTestValidationError" }

// Error satisfies the builtin error interface
func (e QuestionSetTestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestionSetTest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionSetTestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionSetTestValidationError{}

// Validate checks the field values on StudyPlanItemQuestionSet with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StudyPlanItemQuestionSet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StudyPlanItemQuestionSet with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StudyPlanItemQuestionSetMultiError, or nil if none found.
func (m *StudyPlanItemQuestionSet) ValidateAll() error {
	return m.validate(true)
}

func (m *StudyPlanItemQuestionSet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStudyPlanItemIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudyPlanItemQuestionSetValidationError{
					field:  "StudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudyPlanItemQuestionSetValidationError{
					field:  "StudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStudyPlanItemIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudyPlanItemQuestionSetValidationError{
				field:  "StudyPlanItemIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetQuestionSetTest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudyPlanItemQuestionSetValidationError{
					field:  "QuestionSetTest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudyPlanItemQuestionSetValidationError{
					field:  "QuestionSetTest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuestionSetTest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudyPlanItemQuestionSetValidationError{
				field:  "QuestionSetTest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StudyPlanItemQuestionSetMultiError(errors)
	}

	return nil
}

// StudyPlanItemQuestionSetMultiError is an error wrapping multiple validation
// errors returned by StudyPlanItemQuestionSet.ValidateAll() if the designated
// constraints aren't met.
type StudyPlanItemQuestionSetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StudyPlanItemQuestionSetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StudyPlanItemQuestionSetMultiError) AllErrors() []error { return m }

// StudyPlanItemQuestionSetValidationError is the validation error returned by
// StudyPlanItemQuestionSet.Validate if the designated constraints aren't met.
type StudyPlanItemQuestionSetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StudyPlanItemQuestionSetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StudyPlanItemQuestionSetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StudyPlanItemQuestionSetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StudyPlanItemQuestionSetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StudyPlanItemQuestionSetValidationError) ErrorName() string {
	return "StudyPlanItemQuestionSetValidationError"
}

// Error satisfies the builtin error interface
func (e StudyPlanItemQuestionSetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStudyPlanItemQuestionSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StudyPlanItemQuestionSetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StudyPlanItemQuestionSetValidationError{}

// Validate checks the field values on GetStudentQuestionSetTestsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetStudentQuestionSetTestsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStudentQuestionSetTestsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetStudentQuestionSetTestsResponseMultiError, or nil if none found.
func (m *GetStudentQuestionSetTestsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStudentQuestionSetTestsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetListStudyPlanItemQuestionSet() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStudentQuestionSetTestsResponseValidationError{
						field:  fmt.Sprintf("ListStudyPlanItemQuestionSet[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStudentQuestionSetTestsResponseValidationError{
						field:  fmt.Sprintf("ListStudyPlanItemQuestionSet[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStudentQuestionSetTestsResponseValidationError{
					field:  fmt.Sprintf("ListStudyPlanItemQuestionSet[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for HighestCrown

	// no validation rules for TotalAttempt

	if all {
		switch v := interface{}(m.GetHighestScore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStudentQuestionSetTestsResponseValidationError{
					field:  "HighestScore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStudentQuestionSetTestsResponseValidationError{
					field:  "HighestScore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHighestScore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStudentQuestionSetTestsResponseValidationError{
				field:  "HighestScore",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetStudentQuestionSetTestsResponseMultiError(errors)
	}

	return nil
}

// GetStudentQuestionSetTestsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetStudentQuestionSetTestsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetStudentQuestionSetTestsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStudentQuestionSetTestsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStudentQuestionSetTestsResponseMultiError) AllErrors() []error { return m }

// GetStudentQuestionSetTestsResponseValidationError is the validation error
// returned by GetStudentQuestionSetTestsResponse.Validate if the designated
// constraints aren't met.
type GetStudentQuestionSetTestsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStudentQuestionSetTestsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStudentQuestionSetTestsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStudentQuestionSetTestsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStudentQuestionSetTestsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStudentQuestionSetTestsResponseValidationError) ErrorName() string {
	return "GetStudentQuestionSetTestsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStudentQuestionSetTestsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStudentQuestionSetTestsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStudentQuestionSetTestsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStudentQuestionSetTestsResponseValidationError{}

// Validate checks the field values on ListSubmissionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSubmissionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSubmissionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSubmissionsRequestMultiError, or nil if none found.
func (m *ListSubmissionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSubmissionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStudyPlanItemIdentities() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSubmissionsRequestValidationError{
						field:  fmt.Sprintf("StudyPlanItemIdentities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSubmissionsRequestValidationError{
						field:  fmt.Sprintf("StudyPlanItemIdentities[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSubmissionsRequestValidationError{
					field:  fmt.Sprintf("StudyPlanItemIdentities[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSubmissionsRequestMultiError(errors)
	}

	return nil
}

// ListSubmissionsRequestMultiError is an error wrapping multiple validation
// errors returned by ListSubmissionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListSubmissionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSubmissionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSubmissionsRequestMultiError) AllErrors() []error { return m }

// ListSubmissionsRequestValidationError is the validation error returned by
// ListSubmissionsRequest.Validate if the designated constraints aren't met.
type ListSubmissionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSubmissionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSubmissionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSubmissionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSubmissionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSubmissionsRequestValidationError) ErrorName() string {
	return "ListSubmissionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSubmissionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSubmissionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSubmissionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSubmissionsRequestValidationError{}

// Validate checks the field values on Submission with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Submission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Submission with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SubmissionMultiError, or
// nil if none found.
func (m *Submission) ValidateAll() error {
	return m.validate(true)
}

func (m *Submission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubmissionId

	if all {
		switch v := interface{}(m.GetStudyPlanItemIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubmissionValidationError{
					field:  "StudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubmissionValidationError{
					field:  "StudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStudyPlanItemIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmissionValidationError{
				field:  "StudyPlanItemIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Note

	for idx, item := range m.GetSubmissionContent() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubmissionValidationError{
						field:  fmt.Sprintf("SubmissionContent[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubmissionValidationError{
						field:  fmt.Sprintf("SubmissionContent[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubmissionValidationError{
					field:  fmt.Sprintf("SubmissionContent[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubmissionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubmissionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmissionValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubmissionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubmissionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmissionValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetSubmissionGradeId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubmissionValidationError{
					field:  "SubmissionGradeId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubmissionValidationError{
					field:  "SubmissionGradeId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubmissionGradeId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmissionValidationError{
				field:  "SubmissionGradeId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CourseId

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubmissionValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubmissionValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmissionValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubmissionValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubmissionValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmissionValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCompleteDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubmissionValidationError{
					field:  "CompleteDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubmissionValidationError{
					field:  "CompleteDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompleteDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmissionValidationError{
				field:  "CompleteDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Duration

	if all {
		switch v := interface{}(m.GetCorrectScore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubmissionValidationError{
					field:  "CorrectScore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubmissionValidationError{
					field:  "CorrectScore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCorrectScore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmissionValidationError{
				field:  "CorrectScore",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTotalScore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubmissionValidationError{
					field:  "TotalScore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubmissionValidationError{
					field:  "TotalScore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTotalScore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmissionValidationError{
				field:  "TotalScore",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UnderstandingLevel

	if len(errors) > 0 {
		return SubmissionMultiError(errors)
	}

	return nil
}

// SubmissionMultiError is an error wrapping multiple validation errors
// returned by Submission.ValidateAll() if the designated constraints aren't met.
type SubmissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmissionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmissionMultiError) AllErrors() []error { return m }

// SubmissionValidationError is the validation error returned by
// Submission.Validate if the designated constraints aren't met.
type SubmissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmissionValidationError) ErrorName() string { return "SubmissionValidationError" }

// Error satisfies the builtin error interface
func (e SubmissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmissionValidationError{}

// Validate checks the field values on ListSubmissionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSubmissionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSubmissionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSubmissionsResponseMultiError, or nil if none found.
func (m *ListSubmissionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSubmissionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSubmissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSubmissionsResponseValidationError{
						field:  fmt.Sprintf("Submissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSubmissionsResponseValidationError{
						field:  fmt.Sprintf("Submissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSubmissionsResponseValidationError{
					field:  fmt.Sprintf("Submissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSubmissionsResponseMultiError(errors)
	}

	return nil
}

// ListSubmissionsResponseMultiError is an error wrapping multiple validation
// errors returned by ListSubmissionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListSubmissionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSubmissionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSubmissionsResponseMultiError) AllErrors() []error { return m }

// ListSubmissionsResponseValidationError is the validation error returned by
// ListSubmissionsResponse.Validate if the designated constraints aren't met.
type ListSubmissionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSubmissionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSubmissionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSubmissionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSubmissionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSubmissionsResponseValidationError) ErrorName() string {
	return "ListSubmissionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSubmissionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSubmissionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSubmissionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSubmissionsResponseValidationError{}

// Validate checks the field values on SearchSubmissionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchSubmissionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchSubmissionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchSubmissionsRequestMultiError, or nil if none found.
func (m *SearchSubmissionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchSubmissionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaging()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchSubmissionsRequestValidationError{
					field:  "Paging",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchSubmissionsRequestValidationError{
					field:  "Paging",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchSubmissionsRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCourseId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchSubmissionsRequestValidationError{
					field:  "CourseId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchSubmissionsRequestValidationError{
					field:  "CourseId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCourseId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchSubmissionsRequestValidationError{
				field:  "CourseId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchSubmissionsRequestValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchSubmissionsRequestValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchSubmissionsRequestValidationError{
				field:  "Start",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEnd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchSubmissionsRequestValidationError{
					field:  "End",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchSubmissionsRequestValidationError{
					field:  "End",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchSubmissionsRequestValidationError{
				field:  "End",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLearningMaterialName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchSubmissionsRequestValidationError{
					field:  "LearningMaterialName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchSubmissionsRequestValidationError{
					field:  "LearningMaterialName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLearningMaterialName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchSubmissionsRequestValidationError{
				field:  "LearningMaterialName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SearchSubmissionsRequestMultiError(errors)
	}

	return nil
}

// SearchSubmissionsRequestMultiError is an error wrapping multiple validation
// errors returned by SearchSubmissionsRequest.ValidateAll() if the designated
// constraints aren't met.
type SearchSubmissionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchSubmissionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchSubmissionsRequestMultiError) AllErrors() []error { return m }

// SearchSubmissionsRequestValidationError is the validation error returned by
// SearchSubmissionsRequest.Validate if the designated constraints aren't met.
type SearchSubmissionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchSubmissionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchSubmissionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchSubmissionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchSubmissionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchSubmissionsRequestValidationError) ErrorName() string {
	return "SearchSubmissionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchSubmissionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchSubmissionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchSubmissionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchSubmissionsRequestValidationError{}

// Validate checks the field values on SearchSubmissionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchSubmissionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchSubmissionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchSubmissionsResponseMultiError, or nil if none found.
func (m *SearchSubmissionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchSubmissionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNextPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchSubmissionsResponseValidationError{
					field:  "NextPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchSubmissionsResponseValidationError{
					field:  "NextPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNextPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchSubmissionsResponseValidationError{
				field:  "NextPage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSubmissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchSubmissionsResponseValidationError{
						field:  fmt.Sprintf("Submissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchSubmissionsResponseValidationError{
						field:  fmt.Sprintf("Submissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchSubmissionsResponseValidationError{
					field:  fmt.Sprintf("Submissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchSubmissionsResponseMultiError(errors)
	}

	return nil
}

// SearchSubmissionsResponseMultiError is an error wrapping multiple validation
// errors returned by SearchSubmissionsResponse.ValidateAll() if the
// designated constraints aren't met.
type SearchSubmissionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchSubmissionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchSubmissionsResponseMultiError) AllErrors() []error { return m }

// SearchSubmissionsResponseValidationError is the validation error returned by
// SearchSubmissionsResponse.Validate if the designated constraints aren't met.
type SearchSubmissionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchSubmissionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchSubmissionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchSubmissionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchSubmissionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchSubmissionsResponseValidationError) ErrorName() string {
	return "SearchSubmissionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchSubmissionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchSubmissionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchSubmissionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchSubmissionsResponseValidationError{}

// Validate checks the field values on SearchSubmissionsV2Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchSubmissionsV2Request) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchSubmissionsV2Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchSubmissionsV2RequestMultiError, or nil if none found.
func (m *SearchSubmissionsV2Request) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchSubmissionsV2Request) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaging()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchSubmissionsV2RequestValidationError{
					field:  "Paging",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchSubmissionsV2RequestValidationError{
					field:  "Paging",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchSubmissionsV2RequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCourseId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchSubmissionsV2RequestValidationError{
					field:  "CourseId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchSubmissionsV2RequestValidationError{
					field:  "CourseId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCourseId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchSubmissionsV2RequestValidationError{
				field:  "CourseId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchSubmissionsV2RequestValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchSubmissionsV2RequestValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchSubmissionsV2RequestValidationError{
				field:  "Start",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEnd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchSubmissionsV2RequestValidationError{
					field:  "End",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchSubmissionsV2RequestValidationError{
					field:  "End",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchSubmissionsV2RequestValidationError{
				field:  "End",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLearningMaterialName()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchSubmissionsV2RequestValidationError{
					field:  "LearningMaterialName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchSubmissionsV2RequestValidationError{
					field:  "LearningMaterialName",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLearningMaterialName()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchSubmissionsV2RequestValidationError{
				field:  "LearningMaterialName",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SearchSubmissionsV2RequestMultiError(errors)
	}

	return nil
}

// SearchSubmissionsV2RequestMultiError is an error wrapping multiple
// validation errors returned by SearchSubmissionsV2Request.ValidateAll() if
// the designated constraints aren't met.
type SearchSubmissionsV2RequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchSubmissionsV2RequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchSubmissionsV2RequestMultiError) AllErrors() []error { return m }

// SearchSubmissionsV2RequestValidationError is the validation error returned
// by SearchSubmissionsV2Request.Validate if the designated constraints aren't met.
type SearchSubmissionsV2RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchSubmissionsV2RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchSubmissionsV2RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchSubmissionsV2RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchSubmissionsV2RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchSubmissionsV2RequestValidationError) ErrorName() string {
	return "SearchSubmissionsV2RequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchSubmissionsV2RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchSubmissionsV2Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchSubmissionsV2RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchSubmissionsV2RequestValidationError{}

// Validate checks the field values on SearchSubmissionsV2Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchSubmissionsV2Response) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchSubmissionsV2Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchSubmissionsV2ResponseMultiError, or nil if none found.
func (m *SearchSubmissionsV2Response) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchSubmissionsV2Response) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNextPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SearchSubmissionsV2ResponseValidationError{
					field:  "NextPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SearchSubmissionsV2ResponseValidationError{
					field:  "NextPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNextPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SearchSubmissionsV2ResponseValidationError{
				field:  "NextPage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSubmissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchSubmissionsV2ResponseValidationError{
						field:  fmt.Sprintf("Submissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchSubmissionsV2ResponseValidationError{
						field:  fmt.Sprintf("Submissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchSubmissionsV2ResponseValidationError{
					field:  fmt.Sprintf("Submissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchSubmissionsV2ResponseMultiError(errors)
	}

	return nil
}

// SearchSubmissionsV2ResponseMultiError is an error wrapping multiple
// validation errors returned by SearchSubmissionsV2Response.ValidateAll() if
// the designated constraints aren't met.
type SearchSubmissionsV2ResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchSubmissionsV2ResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchSubmissionsV2ResponseMultiError) AllErrors() []error { return m }

// SearchSubmissionsV2ResponseValidationError is the validation error returned
// by SearchSubmissionsV2Response.Validate if the designated constraints
// aren't met.
type SearchSubmissionsV2ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchSubmissionsV2ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchSubmissionsV2ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchSubmissionsV2ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchSubmissionsV2ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchSubmissionsV2ResponseValidationError) ErrorName() string {
	return "SearchSubmissionsV2ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchSubmissionsV2ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchSubmissionsV2Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchSubmissionsV2ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchSubmissionsV2ResponseValidationError{}

// Validate checks the field values on GradeBookRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GradeBookRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GradeBookRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GradeBookRequestMultiError, or nil if none found.
func (m *GradeBookRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GradeBookRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaging()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GradeBookRequestValidationError{
					field:  "Paging",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GradeBookRequestValidationError{
					field:  "Paging",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GradeBookRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Setting

	// no validation rules for StudentName

	if len(errors) > 0 {
		return GradeBookRequestMultiError(errors)
	}

	return nil
}

// GradeBookRequestMultiError is an error wrapping multiple validation errors
// returned by GradeBookRequest.ValidateAll() if the designated constraints
// aren't met.
type GradeBookRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GradeBookRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GradeBookRequestMultiError) AllErrors() []error { return m }

// GradeBookRequestValidationError is the validation error returned by
// GradeBookRequest.Validate if the designated constraints aren't met.
type GradeBookRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GradeBookRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GradeBookRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GradeBookRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GradeBookRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GradeBookRequestValidationError) ErrorName() string { return "GradeBookRequestValidationError" }

// Error satisfies the builtin error interface
func (e GradeBookRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGradeBookRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GradeBookRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GradeBookRequestValidationError{}

// Validate checks the field values on GradeBookResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GradeBookResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GradeBookResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GradeBookResponseMultiError, or nil if none found.
func (m *GradeBookResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GradeBookResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStudentGradeItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GradeBookResponseValidationError{
						field:  fmt.Sprintf("StudentGradeItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GradeBookResponseValidationError{
						field:  fmt.Sprintf("StudentGradeItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GradeBookResponseValidationError{
					field:  fmt.Sprintf("StudentGradeItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetNextPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GradeBookResponseValidationError{
					field:  "NextPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GradeBookResponseValidationError{
					field:  "NextPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNextPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GradeBookResponseValidationError{
				field:  "NextPage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GradeBookResponseMultiError(errors)
	}

	return nil
}

// GradeBookResponseMultiError is an error wrapping multiple validation errors
// returned by GradeBookResponse.ValidateAll() if the designated constraints
// aren't met.
type GradeBookResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GradeBookResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GradeBookResponseMultiError) AllErrors() []error { return m }

// GradeBookResponseValidationError is the validation error returned by
// GradeBookResponse.Validate if the designated constraints aren't met.
type GradeBookResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GradeBookResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GradeBookResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GradeBookResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GradeBookResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GradeBookResponseValidationError) ErrorName() string {
	return "GradeBookResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GradeBookResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGradeBookResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GradeBookResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GradeBookResponseValidationError{}

// Validate checks the field values on CourseStatisticRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CourseStatisticRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CourseStatisticRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CourseStatisticRequestMultiError, or nil if none found.
func (m *CourseStatisticRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseStatisticRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CourseId

	// no validation rules for StudyPlanId

	switch v := m.School.(type) {
	case *CourseStatisticRequest_AllSchool:
		if v == nil {
			err := CourseStatisticRequestValidationError{
				field:  "School",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for AllSchool
	case *CourseStatisticRequest_Unassigned:
		if v == nil {
			err := CourseStatisticRequestValidationError{
				field:  "School",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Unassigned
	case *CourseStatisticRequest_SchoolId:
		if v == nil {
			err := CourseStatisticRequestValidationError{
				field:  "School",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for SchoolId
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return CourseStatisticRequestMultiError(errors)
	}

	return nil
}

// CourseStatisticRequestMultiError is an error wrapping multiple validation
// errors returned by CourseStatisticRequest.ValidateAll() if the designated
// constraints aren't met.
type CourseStatisticRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseStatisticRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseStatisticRequestMultiError) AllErrors() []error { return m }

// CourseStatisticRequestValidationError is the validation error returned by
// CourseStatisticRequest.Validate if the designated constraints aren't met.
type CourseStatisticRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseStatisticRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseStatisticRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseStatisticRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseStatisticRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseStatisticRequestValidationError) ErrorName() string {
	return "CourseStatisticRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CourseStatisticRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseStatisticRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseStatisticRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseStatisticRequestValidationError{}

// Validate checks the field values on CourseStatisticResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CourseStatisticResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CourseStatisticResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CourseStatisticResponseMultiError, or nil if none found.
func (m *CourseStatisticResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseStatisticResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTopicStatistic() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CourseStatisticResponseValidationError{
						field:  fmt.Sprintf("TopicStatistic[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CourseStatisticResponseValidationError{
						field:  fmt.Sprintf("TopicStatistic[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CourseStatisticResponseValidationError{
					field:  fmt.Sprintf("TopicStatistic[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CourseStatisticResponseMultiError(errors)
	}

	return nil
}

// CourseStatisticResponseMultiError is an error wrapping multiple validation
// errors returned by CourseStatisticResponse.ValidateAll() if the designated
// constraints aren't met.
type CourseStatisticResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseStatisticResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseStatisticResponseMultiError) AllErrors() []error { return m }

// CourseStatisticResponseValidationError is the validation error returned by
// CourseStatisticResponse.Validate if the designated constraints aren't met.
type CourseStatisticResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseStatisticResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseStatisticResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseStatisticResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseStatisticResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseStatisticResponseValidationError) ErrorName() string {
	return "CourseStatisticResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CourseStatisticResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseStatisticResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseStatisticResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseStatisticResponseValidationError{}

// Validate checks the field values on RetrieveLearningProgressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RetrieveLearningProgressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetrieveLearningProgressRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RetrieveLearningProgressRequestMultiError, or nil if none found.
func (m *RetrieveLearningProgressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RetrieveLearningProgressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StudentId

	// no validation rules for SessionId

	if all {
		switch v := interface{}(m.GetFrom()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RetrieveLearningProgressRequestValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RetrieveLearningProgressRequestValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetrieveLearningProgressRequestValidationError{
				field:  "From",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RetrieveLearningProgressRequestValidationError{
					field:  "To",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RetrieveLearningProgressRequestValidationError{
					field:  "To",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetrieveLearningProgressRequestValidationError{
				field:  "To",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RetrieveLearningProgressRequestMultiError(errors)
	}

	return nil
}

// RetrieveLearningProgressRequestMultiError is an error wrapping multiple
// validation errors returned by RetrieveLearningProgressRequest.ValidateAll()
// if the designated constraints aren't met.
type RetrieveLearningProgressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetrieveLearningProgressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetrieveLearningProgressRequestMultiError) AllErrors() []error { return m }

// RetrieveLearningProgressRequestValidationError is the validation error
// returned by RetrieveLearningProgressRequest.Validate if the designated
// constraints aren't met.
type RetrieveLearningProgressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveLearningProgressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveLearningProgressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveLearningProgressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveLearningProgressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveLearningProgressRequestValidationError) ErrorName() string {
	return "RetrieveLearningProgressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveLearningProgressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveLearningProgressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveLearningProgressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveLearningProgressRequestValidationError{}

// Validate checks the field values on RetrieveLearningProgressResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RetrieveLearningProgressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RetrieveLearningProgressResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RetrieveLearningProgressResponseMultiError, or nil if none found.
func (m *RetrieveLearningProgressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RetrieveLearningProgressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDailies() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RetrieveLearningProgressResponseValidationError{
						field:  fmt.Sprintf("Dailies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RetrieveLearningProgressResponseValidationError{
						field:  fmt.Sprintf("Dailies[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RetrieveLearningProgressResponseValidationError{
					field:  fmt.Sprintf("Dailies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RetrieveLearningProgressResponseMultiError(errors)
	}

	return nil
}

// RetrieveLearningProgressResponseMultiError is an error wrapping multiple
// validation errors returned by
// RetrieveLearningProgressResponse.ValidateAll() if the designated
// constraints aren't met.
type RetrieveLearningProgressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetrieveLearningProgressResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetrieveLearningProgressResponseMultiError) AllErrors() []error { return m }

// RetrieveLearningProgressResponseValidationError is the validation error
// returned by RetrieveLearningProgressResponse.Validate if the designated
// constraints aren't met.
type RetrieveLearningProgressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveLearningProgressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveLearningProgressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RetrieveLearningProgressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveLearningProgressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveLearningProgressResponseValidationError) ErrorName() string {
	return "RetrieveLearningProgressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveLearningProgressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveLearningProgressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveLearningProgressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveLearningProgressResponseValidationError{}

// Validate checks the field values on
// RetrieveSchoolHistoryByStudentInCourseRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RetrieveSchoolHistoryByStudentInCourseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RetrieveSchoolHistoryByStudentInCourseRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// RetrieveSchoolHistoryByStudentInCourseRequestMultiError, or nil if none found.
func (m *RetrieveSchoolHistoryByStudentInCourseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RetrieveSchoolHistoryByStudentInCourseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CourseId

	if len(errors) > 0 {
		return RetrieveSchoolHistoryByStudentInCourseRequestMultiError(errors)
	}

	return nil
}

// RetrieveSchoolHistoryByStudentInCourseRequestMultiError is an error wrapping
// multiple validation errors returned by
// RetrieveSchoolHistoryByStudentInCourseRequest.ValidateAll() if the
// designated constraints aren't met.
type RetrieveSchoolHistoryByStudentInCourseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetrieveSchoolHistoryByStudentInCourseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetrieveSchoolHistoryByStudentInCourseRequestMultiError) AllErrors() []error { return m }

// RetrieveSchoolHistoryByStudentInCourseRequestValidationError is the
// validation error returned by
// RetrieveSchoolHistoryByStudentInCourseRequest.Validate if the designated
// constraints aren't met.
type RetrieveSchoolHistoryByStudentInCourseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveSchoolHistoryByStudentInCourseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveSchoolHistoryByStudentInCourseRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RetrieveSchoolHistoryByStudentInCourseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveSchoolHistoryByStudentInCourseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveSchoolHistoryByStudentInCourseRequestValidationError) ErrorName() string {
	return "RetrieveSchoolHistoryByStudentInCourseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveSchoolHistoryByStudentInCourseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveSchoolHistoryByStudentInCourseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveSchoolHistoryByStudentInCourseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveSchoolHistoryByStudentInCourseRequestValidationError{}

// Validate checks the field values on
// RetrieveSchoolHistoryByStudentInCourseResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RetrieveSchoolHistoryByStudentInCourseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RetrieveSchoolHistoryByStudentInCourseResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// RetrieveSchoolHistoryByStudentInCourseResponseMultiError, or nil if none found.
func (m *RetrieveSchoolHistoryByStudentInCourseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RetrieveSchoolHistoryByStudentInCourseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetSchools()))
		i := 0
		for key := range m.GetSchools() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetSchools()[key]
			_ = val

			// no validation rules for Schools[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, RetrieveSchoolHistoryByStudentInCourseResponseValidationError{
							field:  fmt.Sprintf("Schools[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, RetrieveSchoolHistoryByStudentInCourseResponseValidationError{
							field:  fmt.Sprintf("Schools[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return RetrieveSchoolHistoryByStudentInCourseResponseValidationError{
						field:  fmt.Sprintf("Schools[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return RetrieveSchoolHistoryByStudentInCourseResponseMultiError(errors)
	}

	return nil
}

// RetrieveSchoolHistoryByStudentInCourseResponseMultiError is an error
// wrapping multiple validation errors returned by
// RetrieveSchoolHistoryByStudentInCourseResponse.ValidateAll() if the
// designated constraints aren't met.
type RetrieveSchoolHistoryByStudentInCourseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetrieveSchoolHistoryByStudentInCourseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetrieveSchoolHistoryByStudentInCourseResponseMultiError) AllErrors() []error { return m }

// RetrieveSchoolHistoryByStudentInCourseResponseValidationError is the
// validation error returned by
// RetrieveSchoolHistoryByStudentInCourseResponse.Validate if the designated
// constraints aren't met.
type RetrieveSchoolHistoryByStudentInCourseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveSchoolHistoryByStudentInCourseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RetrieveSchoolHistoryByStudentInCourseResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RetrieveSchoolHistoryByStudentInCourseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RetrieveSchoolHistoryByStudentInCourseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveSchoolHistoryByStudentInCourseResponseValidationError) ErrorName() string {
	return "RetrieveSchoolHistoryByStudentInCourseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveSchoolHistoryByStudentInCourseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveSchoolHistoryByStudentInCourseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveSchoolHistoryByStudentInCourseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveSchoolHistoryByStudentInCourseResponseValidationError{}

// Validate checks the field values on ListTagByStudentInCourseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTagByStudentInCourseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTagByStudentInCourseRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListTagByStudentInCourseRequestMultiError, or nil if none found.
func (m *ListTagByStudentInCourseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTagByStudentInCourseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CourseId

	if len(errors) > 0 {
		return ListTagByStudentInCourseRequestMultiError(errors)
	}

	return nil
}

// ListTagByStudentInCourseRequestMultiError is an error wrapping multiple
// validation errors returned by ListTagByStudentInCourseRequest.ValidateAll()
// if the designated constraints aren't met.
type ListTagByStudentInCourseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTagByStudentInCourseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTagByStudentInCourseRequestMultiError) AllErrors() []error { return m }

// ListTagByStudentInCourseRequestValidationError is the validation error
// returned by ListTagByStudentInCourseRequest.Validate if the designated
// constraints aren't met.
type ListTagByStudentInCourseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTagByStudentInCourseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTagByStudentInCourseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTagByStudentInCourseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTagByStudentInCourseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTagByStudentInCourseRequestValidationError) ErrorName() string {
	return "ListTagByStudentInCourseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTagByStudentInCourseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTagByStudentInCourseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTagByStudentInCourseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTagByStudentInCourseRequestValidationError{}

// Validate checks the field values on ListTagByStudentInCourseResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListTagByStudentInCourseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTagByStudentInCourseResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListTagByStudentInCourseResponseMultiError, or nil if none found.
func (m *ListTagByStudentInCourseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTagByStudentInCourseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStudentTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTagByStudentInCourseResponseValidationError{
						field:  fmt.Sprintf("StudentTags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTagByStudentInCourseResponseValidationError{
						field:  fmt.Sprintf("StudentTags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTagByStudentInCourseResponseValidationError{
					field:  fmt.Sprintf("StudentTags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTagByStudentInCourseResponseMultiError(errors)
	}

	return nil
}

// ListTagByStudentInCourseResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListTagByStudentInCourseResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTagByStudentInCourseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTagByStudentInCourseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTagByStudentInCourseResponseMultiError) AllErrors() []error { return m }

// ListTagByStudentInCourseResponseValidationError is the validation error
// returned by ListTagByStudentInCourseResponse.Validate if the designated
// constraints aren't met.
type ListTagByStudentInCourseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTagByStudentInCourseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTagByStudentInCourseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTagByStudentInCourseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTagByStudentInCourseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTagByStudentInCourseResponseValidationError) ErrorName() string {
	return "ListTagByStudentInCourseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTagByStudentInCourseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTagByStudentInCourseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTagByStudentInCourseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTagByStudentInCourseResponseValidationError{}

// Validate checks the field values on
// GetStudentProgressResponse_StudentStudyPlanProgress with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStudentProgressResponse_StudentStudyPlanProgress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetStudentProgressResponse_StudentStudyPlanProgress with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetStudentProgressResponse_StudentStudyPlanProgressMultiError, or nil if
// none found.
func (m *GetStudentProgressResponse_StudentStudyPlanProgress) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStudentProgressResponse_StudentStudyPlanProgress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StudyPlanId

	for idx, item := range m.GetChapterProgress() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStudentProgressResponse_StudentStudyPlanProgressValidationError{
						field:  fmt.Sprintf("ChapterProgress[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStudentProgressResponse_StudentStudyPlanProgressValidationError{
						field:  fmt.Sprintf("ChapterProgress[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStudentProgressResponse_StudentStudyPlanProgressValidationError{
					field:  fmt.Sprintf("ChapterProgress[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTopicProgress() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStudentProgressResponse_StudentStudyPlanProgressValidationError{
						field:  fmt.Sprintf("TopicProgress[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStudentProgressResponse_StudentStudyPlanProgressValidationError{
						field:  fmt.Sprintf("TopicProgress[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStudentProgressResponse_StudentStudyPlanProgressValidationError{
					field:  fmt.Sprintf("TopicProgress[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetLearningMaterialResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStudentProgressResponse_StudentStudyPlanProgressValidationError{
						field:  fmt.Sprintf("LearningMaterialResults[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStudentProgressResponse_StudentStudyPlanProgressValidationError{
						field:  fmt.Sprintf("LearningMaterialResults[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStudentProgressResponse_StudentStudyPlanProgressValidationError{
					field:  fmt.Sprintf("LearningMaterialResults[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetStudyPlanTrees() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetStudentProgressResponse_StudentStudyPlanProgressValidationError{
						field:  fmt.Sprintf("StudyPlanTrees[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetStudentProgressResponse_StudentStudyPlanProgressValidationError{
						field:  fmt.Sprintf("StudyPlanTrees[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStudentProgressResponse_StudentStudyPlanProgressValidationError{
					field:  fmt.Sprintf("StudyPlanTrees[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetStudentProgressResponse_StudentStudyPlanProgressMultiError(errors)
	}

	return nil
}

// GetStudentProgressResponse_StudentStudyPlanProgressMultiError is an error
// wrapping multiple validation errors returned by
// GetStudentProgressResponse_StudentStudyPlanProgress.ValidateAll() if the
// designated constraints aren't met.
type GetStudentProgressResponse_StudentStudyPlanProgressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStudentProgressResponse_StudentStudyPlanProgressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStudentProgressResponse_StudentStudyPlanProgressMultiError) AllErrors() []error { return m }

// GetStudentProgressResponse_StudentStudyPlanProgressValidationError is the
// validation error returned by
// GetStudentProgressResponse_StudentStudyPlanProgress.Validate if the
// designated constraints aren't met.
type GetStudentProgressResponse_StudentStudyPlanProgressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStudentProgressResponse_StudentStudyPlanProgressValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetStudentProgressResponse_StudentStudyPlanProgressValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetStudentProgressResponse_StudentStudyPlanProgressValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetStudentProgressResponse_StudentStudyPlanProgressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStudentProgressResponse_StudentStudyPlanProgressValidationError) ErrorName() string {
	return "GetStudentProgressResponse_StudentStudyPlanProgressValidationError"
}

// Error satisfies the builtin error interface
func (e GetStudentProgressResponse_StudentStudyPlanProgressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStudentProgressResponse_StudentStudyPlanProgress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStudentProgressResponse_StudentStudyPlanProgressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStudentProgressResponse_StudentStudyPlanProgressValidationError{}

// Validate checks the field values on
// GetStudyPlanItemEventLogsResponse_StudyPlanItemLog with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStudyPlanItemEventLogsResponse_StudyPlanItemLog) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GetStudyPlanItemEventLogsResponse_StudyPlanItemLog with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// GetStudyPlanItemEventLogsResponse_StudyPlanItemLogMultiError, or nil if
// none found.
func (m *GetStudyPlanItemEventLogsResponse_StudyPlanItemLog) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStudyPlanItemEventLogsResponse_StudyPlanItemLog) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStudyPlanItemIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStudyPlanItemEventLogsResponse_StudyPlanItemLogValidationError{
					field:  "StudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStudyPlanItemEventLogsResponse_StudyPlanItemLogValidationError{
					field:  "StudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStudyPlanItemIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStudyPlanItemEventLogsResponse_StudyPlanItemLogValidationError{
				field:  "StudyPlanItemIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SessionId

	// no validation rules for LearningTime

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStudyPlanItemEventLogsResponse_StudyPlanItemLogValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStudyPlanItemEventLogsResponse_StudyPlanItemLogValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStudyPlanItemEventLogsResponse_StudyPlanItemLogValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCompletedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStudyPlanItemEventLogsResponse_StudyPlanItemLogValidationError{
					field:  "CompletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStudyPlanItemEventLogsResponse_StudyPlanItemLogValidationError{
					field:  "CompletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStudyPlanItemEventLogsResponse_StudyPlanItemLogValidationError{
				field:  "CompletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetStudyPlanItemEventLogsResponse_StudyPlanItemLogMultiError(errors)
	}

	return nil
}

// GetStudyPlanItemEventLogsResponse_StudyPlanItemLogMultiError is an error
// wrapping multiple validation errors returned by
// GetStudyPlanItemEventLogsResponse_StudyPlanItemLog.ValidateAll() if the
// designated constraints aren't met.
type GetStudyPlanItemEventLogsResponse_StudyPlanItemLogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStudyPlanItemEventLogsResponse_StudyPlanItemLogMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStudyPlanItemEventLogsResponse_StudyPlanItemLogMultiError) AllErrors() []error { return m }

// GetStudyPlanItemEventLogsResponse_StudyPlanItemLogValidationError is the
// validation error returned by
// GetStudyPlanItemEventLogsResponse_StudyPlanItemLog.Validate if the
// designated constraints aren't met.
type GetStudyPlanItemEventLogsResponse_StudyPlanItemLogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStudyPlanItemEventLogsResponse_StudyPlanItemLogValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetStudyPlanItemEventLogsResponse_StudyPlanItemLogValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetStudyPlanItemEventLogsResponse_StudyPlanItemLogValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetStudyPlanItemEventLogsResponse_StudyPlanItemLogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStudyPlanItemEventLogsResponse_StudyPlanItemLogValidationError) ErrorName() string {
	return "GetStudyPlanItemEventLogsResponse_StudyPlanItemLogValidationError"
}

// Error satisfies the builtin error interface
func (e GetStudyPlanItemEventLogsResponse_StudyPlanItemLogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStudyPlanItemEventLogsResponse_StudyPlanItemLog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStudyPlanItemEventLogsResponse_StudyPlanItemLogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStudyPlanItemEventLogsResponse_StudyPlanItemLogValidationError{}

// Validate checks the field values on
// ListLOHighestScoresByStudyPlanItemIDsResponse_LOHighestScore with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLOHighestScoresByStudyPlanItemIDsResponse_LOHighestScore) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListLOHighestScoresByStudyPlanItemIDsResponse_LOHighestScore with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLOHighestScoresByStudyPlanItemIDsResponse_LOHighestScoreMultiError, or
// nil if none found.
func (m *ListLOHighestScoresByStudyPlanItemIDsResponse_LOHighestScore) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLOHighestScoresByStudyPlanItemIDsResponse_LOHighestScore) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStudyPlanItemIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListLOHighestScoresByStudyPlanItemIDsResponse_LOHighestScoreValidationError{
					field:  "StudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListLOHighestScoresByStudyPlanItemIDsResponse_LOHighestScoreValidationError{
					field:  "StudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStudyPlanItemIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListLOHighestScoresByStudyPlanItemIDsResponse_LOHighestScoreValidationError{
				field:  "StudyPlanItemIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPercentage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListLOHighestScoresByStudyPlanItemIDsResponse_LOHighestScoreValidationError{
					field:  "Percentage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListLOHighestScoresByStudyPlanItemIDsResponse_LOHighestScoreValidationError{
					field:  "Percentage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPercentage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListLOHighestScoresByStudyPlanItemIDsResponse_LOHighestScoreValidationError{
				field:  "Percentage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListLOHighestScoresByStudyPlanItemIDsResponse_LOHighestScoreMultiError(errors)
	}

	return nil
}

// ListLOHighestScoresByStudyPlanItemIDsResponse_LOHighestScoreMultiError is an
// error wrapping multiple validation errors returned by
// ListLOHighestScoresByStudyPlanItemIDsResponse_LOHighestScore.ValidateAll()
// if the designated constraints aren't met.
type ListLOHighestScoresByStudyPlanItemIDsResponse_LOHighestScoreMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLOHighestScoresByStudyPlanItemIDsResponse_LOHighestScoreMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLOHighestScoresByStudyPlanItemIDsResponse_LOHighestScoreMultiError) AllErrors() []error {
	return m
}

// ListLOHighestScoresByStudyPlanItemIDsResponse_LOHighestScoreValidationError
// is the validation error returned by
// ListLOHighestScoresByStudyPlanItemIDsResponse_LOHighestScore.Validate if
// the designated constraints aren't met.
type ListLOHighestScoresByStudyPlanItemIDsResponse_LOHighestScoreValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLOHighestScoresByStudyPlanItemIDsResponse_LOHighestScoreValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListLOHighestScoresByStudyPlanItemIDsResponse_LOHighestScoreValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListLOHighestScoresByStudyPlanItemIDsResponse_LOHighestScoreValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ListLOHighestScoresByStudyPlanItemIDsResponse_LOHighestScoreValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e ListLOHighestScoresByStudyPlanItemIDsResponse_LOHighestScoreValidationError) ErrorName() string {
	return "ListLOHighestScoresByStudyPlanItemIDsResponse_LOHighestScoreValidationError"
}

// Error satisfies the builtin error interface
func (e ListLOHighestScoresByStudyPlanItemIDsResponse_LOHighestScoreValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLOHighestScoresByStudyPlanItemIDsResponse_LOHighestScore.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLOHighestScoresByStudyPlanItemIDsResponse_LOHighestScoreValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLOHighestScoresByStudyPlanItemIDsResponse_LOHighestScoreValidationError{}

// Validate checks the field values on GradeBookResponse_ExamResult with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GradeBookResponse_ExamResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GradeBookResponse_ExamResult with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GradeBookResponse_ExamResultMultiError, or nil if none found.
func (m *GradeBookResponse_ExamResult) ValidateAll() error {
	return m.validate(true)
}

func (m *GradeBookResponse_ExamResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LmId

	// no validation rules for LmName

	if all {
		switch v := interface{}(m.GetTotalPoint()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GradeBookResponse_ExamResultValidationError{
					field:  "TotalPoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GradeBookResponse_ExamResultValidationError{
					field:  "TotalPoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTotalPoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GradeBookResponse_ExamResultValidationError{
				field:  "TotalPoint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGradePoint()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GradeBookResponse_ExamResultValidationError{
					field:  "GradePoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GradeBookResponse_ExamResultValidationError{
					field:  "GradePoint",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGradePoint()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GradeBookResponse_ExamResultValidationError{
				field:  "GradePoint",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TotalAttempts

	// no validation rules for Failed

	// no validation rules for Status

	// no validation rules for IsGradeToPass

	// no validation rules for ReviewOption

	if all {
		switch v := interface{}(m.GetDueDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GradeBookResponse_ExamResultValidationError{
					field:  "DueDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GradeBookResponse_ExamResultValidationError{
					field:  "DueDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDueDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GradeBookResponse_ExamResultValidationError{
				field:  "DueDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ChapterDisplayOrder

	// no validation rules for TopicDisplayOrder

	// no validation rules for LmDisplayOrder

	if len(errors) > 0 {
		return GradeBookResponse_ExamResultMultiError(errors)
	}

	return nil
}

// GradeBookResponse_ExamResultMultiError is an error wrapping multiple
// validation errors returned by GradeBookResponse_ExamResult.ValidateAll() if
// the designated constraints aren't met.
type GradeBookResponse_ExamResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GradeBookResponse_ExamResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GradeBookResponse_ExamResultMultiError) AllErrors() []error { return m }

// GradeBookResponse_ExamResultValidationError is the validation error returned
// by GradeBookResponse_ExamResult.Validate if the designated constraints
// aren't met.
type GradeBookResponse_ExamResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GradeBookResponse_ExamResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GradeBookResponse_ExamResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GradeBookResponse_ExamResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GradeBookResponse_ExamResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GradeBookResponse_ExamResultValidationError) ErrorName() string {
	return "GradeBookResponse_ExamResultValidationError"
}

// Error satisfies the builtin error interface
func (e GradeBookResponse_ExamResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGradeBookResponse_ExamResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GradeBookResponse_ExamResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GradeBookResponse_ExamResultValidationError{}

// Validate checks the field values on GradeBookResponse_StudentGradeItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GradeBookResponse_StudentGradeItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GradeBookResponse_StudentGradeItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GradeBookResponse_StudentGradeItemMultiError, or nil if none found.
func (m *GradeBookResponse_StudentGradeItem) ValidateAll() error {
	return m.validate(true)
}

func (m *GradeBookResponse_StudentGradeItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StudentId

	// no validation rules for StudentName

	if all {
		switch v := interface{}(m.GetGrade()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GradeBookResponse_StudentGradeItemValidationError{
					field:  "Grade",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GradeBookResponse_StudentGradeItemValidationError{
					field:  "Grade",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGrade()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GradeBookResponse_StudentGradeItemValidationError{
				field:  "Grade",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StudyPlanId

	// no validation rules for StudyPlanName

	// no validation rules for CourseId

	// no validation rules for CourseName

	if all {
		switch v := interface{}(m.GetTotalExamLos()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GradeBookResponse_StudentGradeItemValidationError{
					field:  "TotalExamLos",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GradeBookResponse_StudentGradeItemValidationError{
					field:  "TotalExamLos",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTotalExamLos()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GradeBookResponse_StudentGradeItemValidationError{
				field:  "TotalExamLos",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTotalCompletedExamLos()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GradeBookResponse_StudentGradeItemValidationError{
					field:  "TotalCompletedExamLos",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GradeBookResponse_StudentGradeItemValidationError{
					field:  "TotalCompletedExamLos",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTotalCompletedExamLos()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GradeBookResponse_StudentGradeItemValidationError{
				field:  "TotalCompletedExamLos",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTotalGradeToPass()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GradeBookResponse_StudentGradeItemValidationError{
					field:  "TotalGradeToPass",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GradeBookResponse_StudentGradeItemValidationError{
					field:  "TotalGradeToPass",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTotalGradeToPass()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GradeBookResponse_StudentGradeItemValidationError{
				field:  "TotalGradeToPass",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTotalPassed()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GradeBookResponse_StudentGradeItemValidationError{
					field:  "TotalPassed",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GradeBookResponse_StudentGradeItemValidationError{
					field:  "TotalPassed",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTotalPassed()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GradeBookResponse_StudentGradeItemValidationError{
				field:  "TotalPassed",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GradeBookResponse_StudentGradeItemValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GradeBookResponse_StudentGradeItemValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GradeBookResponse_StudentGradeItemValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for GradeId

	if len(errors) > 0 {
		return GradeBookResponse_StudentGradeItemMultiError(errors)
	}

	return nil
}

// GradeBookResponse_StudentGradeItemMultiError is an error wrapping multiple
// validation errors returned by
// GradeBookResponse_StudentGradeItem.ValidateAll() if the designated
// constraints aren't met.
type GradeBookResponse_StudentGradeItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GradeBookResponse_StudentGradeItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GradeBookResponse_StudentGradeItemMultiError) AllErrors() []error { return m }

// GradeBookResponse_StudentGradeItemValidationError is the validation error
// returned by GradeBookResponse_StudentGradeItem.Validate if the designated
// constraints aren't met.
type GradeBookResponse_StudentGradeItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GradeBookResponse_StudentGradeItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GradeBookResponse_StudentGradeItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GradeBookResponse_StudentGradeItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GradeBookResponse_StudentGradeItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GradeBookResponse_StudentGradeItemValidationError) ErrorName() string {
	return "GradeBookResponse_StudentGradeItemValidationError"
}

// Error satisfies the builtin error interface
func (e GradeBookResponse_StudentGradeItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGradeBookResponse_StudentGradeItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GradeBookResponse_StudentGradeItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GradeBookResponse_StudentGradeItemValidationError{}

// Validate checks the field values on CourseStatisticResponse_TopicStatistic
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CourseStatisticResponse_TopicStatistic) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CourseStatisticResponse_TopicStatistic with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// CourseStatisticResponse_TopicStatisticMultiError, or nil if none found.
func (m *CourseStatisticResponse_TopicStatistic) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseStatisticResponse_TopicStatistic) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TopicId

	// no validation rules for CompletedStudent

	// no validation rules for TotalAssignedStudent

	// no validation rules for AverageScore

	for idx, item := range m.GetLearningMaterialStatistic() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CourseStatisticResponse_TopicStatisticValidationError{
						field:  fmt.Sprintf("LearningMaterialStatistic[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CourseStatisticResponse_TopicStatisticValidationError{
						field:  fmt.Sprintf("LearningMaterialStatistic[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CourseStatisticResponse_TopicStatisticValidationError{
					field:  fmt.Sprintf("LearningMaterialStatistic[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CourseStatisticResponse_TopicStatisticMultiError(errors)
	}

	return nil
}

// CourseStatisticResponse_TopicStatisticMultiError is an error wrapping
// multiple validation errors returned by
// CourseStatisticResponse_TopicStatistic.ValidateAll() if the designated
// constraints aren't met.
type CourseStatisticResponse_TopicStatisticMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseStatisticResponse_TopicStatisticMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseStatisticResponse_TopicStatisticMultiError) AllErrors() []error { return m }

// CourseStatisticResponse_TopicStatisticValidationError is the validation
// error returned by CourseStatisticResponse_TopicStatistic.Validate if the
// designated constraints aren't met.
type CourseStatisticResponse_TopicStatisticValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseStatisticResponse_TopicStatisticValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseStatisticResponse_TopicStatisticValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseStatisticResponse_TopicStatisticValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseStatisticResponse_TopicStatisticValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseStatisticResponse_TopicStatisticValidationError) ErrorName() string {
	return "CourseStatisticResponse_TopicStatisticValidationError"
}

// Error satisfies the builtin error interface
func (e CourseStatisticResponse_TopicStatisticValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseStatisticResponse_TopicStatistic.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseStatisticResponse_TopicStatisticValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseStatisticResponse_TopicStatisticValidationError{}

// Validate checks the field values on
// CourseStatisticResponse_TopicStatistic_LearningMaterialStatistic with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CourseStatisticResponse_TopicStatistic_LearningMaterialStatistic) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CourseStatisticResponse_TopicStatistic_LearningMaterialStatistic with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CourseStatisticResponse_TopicStatistic_LearningMaterialStatisticMultiError,
// or nil if none found.
func (m *CourseStatisticResponse_TopicStatistic_LearningMaterialStatistic) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseStatisticResponse_TopicStatistic_LearningMaterialStatistic) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LearningMaterialId

	// no validation rules for CompletedStudent

	// no validation rules for TotalAssignedStudent

	// no validation rules for AverageScore

	if len(errors) > 0 {
		return CourseStatisticResponse_TopicStatistic_LearningMaterialStatisticMultiError(errors)
	}

	return nil
}

// CourseStatisticResponse_TopicStatistic_LearningMaterialStatisticMultiError
// is an error wrapping multiple validation errors returned by
// CourseStatisticResponse_TopicStatistic_LearningMaterialStatistic.ValidateAll()
// if the designated constraints aren't met.
type CourseStatisticResponse_TopicStatistic_LearningMaterialStatisticMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseStatisticResponse_TopicStatistic_LearningMaterialStatisticMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseStatisticResponse_TopicStatistic_LearningMaterialStatisticMultiError) AllErrors() []error {
	return m
}

// CourseStatisticResponse_TopicStatistic_LearningMaterialStatisticValidationError
// is the validation error returned by
// CourseStatisticResponse_TopicStatistic_LearningMaterialStatistic.Validate
// if the designated constraints aren't met.
type CourseStatisticResponse_TopicStatistic_LearningMaterialStatisticValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseStatisticResponse_TopicStatistic_LearningMaterialStatisticValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e CourseStatisticResponse_TopicStatistic_LearningMaterialStatisticValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CourseStatisticResponse_TopicStatistic_LearningMaterialStatisticValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e CourseStatisticResponse_TopicStatistic_LearningMaterialStatisticValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e CourseStatisticResponse_TopicStatistic_LearningMaterialStatisticValidationError) ErrorName() string {
	return "CourseStatisticResponse_TopicStatistic_LearningMaterialStatisticValidationError"
}

// Error satisfies the builtin error interface
func (e CourseStatisticResponse_TopicStatistic_LearningMaterialStatisticValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseStatisticResponse_TopicStatistic_LearningMaterialStatistic.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseStatisticResponse_TopicStatistic_LearningMaterialStatisticValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseStatisticResponse_TopicStatistic_LearningMaterialStatisticValidationError{}

// Validate checks the field values on
// RetrieveLearningProgressResponse_DailyLearningTime with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RetrieveLearningProgressResponse_DailyLearningTime) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RetrieveLearningProgressResponse_DailyLearningTime with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// RetrieveLearningProgressResponse_DailyLearningTimeMultiError, or nil if
// none found.
func (m *RetrieveLearningProgressResponse_DailyLearningTime) ValidateAll() error {
	return m.validate(true)
}

func (m *RetrieveLearningProgressResponse_DailyLearningTime) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalTimeSpentInDay

	if all {
		switch v := interface{}(m.GetDay()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RetrieveLearningProgressResponse_DailyLearningTimeValidationError{
					field:  "Day",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RetrieveLearningProgressResponse_DailyLearningTimeValidationError{
					field:  "Day",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDay()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RetrieveLearningProgressResponse_DailyLearningTimeValidationError{
				field:  "Day",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RetrieveLearningProgressResponse_DailyLearningTimeMultiError(errors)
	}

	return nil
}

// RetrieveLearningProgressResponse_DailyLearningTimeMultiError is an error
// wrapping multiple validation errors returned by
// RetrieveLearningProgressResponse_DailyLearningTime.ValidateAll() if the
// designated constraints aren't met.
type RetrieveLearningProgressResponse_DailyLearningTimeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetrieveLearningProgressResponse_DailyLearningTimeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetrieveLearningProgressResponse_DailyLearningTimeMultiError) AllErrors() []error { return m }

// RetrieveLearningProgressResponse_DailyLearningTimeValidationError is the
// validation error returned by
// RetrieveLearningProgressResponse_DailyLearningTime.Validate if the
// designated constraints aren't met.
type RetrieveLearningProgressResponse_DailyLearningTimeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveLearningProgressResponse_DailyLearningTimeValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RetrieveLearningProgressResponse_DailyLearningTimeValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RetrieveLearningProgressResponse_DailyLearningTimeValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RetrieveLearningProgressResponse_DailyLearningTimeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RetrieveLearningProgressResponse_DailyLearningTimeValidationError) ErrorName() string {
	return "RetrieveLearningProgressResponse_DailyLearningTimeValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveLearningProgressResponse_DailyLearningTimeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveLearningProgressResponse_DailyLearningTime.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveLearningProgressResponse_DailyLearningTimeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveLearningProgressResponse_DailyLearningTimeValidationError{}

// Validate checks the field values on
// RetrieveSchoolHistoryByStudentInCourseResponse_School with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RetrieveSchoolHistoryByStudentInCourseResponse_School) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// RetrieveSchoolHistoryByStudentInCourseResponse_School with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RetrieveSchoolHistoryByStudentInCourseResponse_SchoolMultiError, or nil if
// none found.
func (m *RetrieveSchoolHistoryByStudentInCourseResponse_School) ValidateAll() error {
	return m.validate(true)
}

func (m *RetrieveSchoolHistoryByStudentInCourseResponse_School) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SchoolId

	// no validation rules for SchoolName

	if len(errors) > 0 {
		return RetrieveSchoolHistoryByStudentInCourseResponse_SchoolMultiError(errors)
	}

	return nil
}

// RetrieveSchoolHistoryByStudentInCourseResponse_SchoolMultiError is an error
// wrapping multiple validation errors returned by
// RetrieveSchoolHistoryByStudentInCourseResponse_School.ValidateAll() if the
// designated constraints aren't met.
type RetrieveSchoolHistoryByStudentInCourseResponse_SchoolMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RetrieveSchoolHistoryByStudentInCourseResponse_SchoolMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RetrieveSchoolHistoryByStudentInCourseResponse_SchoolMultiError) AllErrors() []error {
	return m
}

// RetrieveSchoolHistoryByStudentInCourseResponse_SchoolValidationError is the
// validation error returned by
// RetrieveSchoolHistoryByStudentInCourseResponse_School.Validate if the
// designated constraints aren't met.
type RetrieveSchoolHistoryByStudentInCourseResponse_SchoolValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RetrieveSchoolHistoryByStudentInCourseResponse_SchoolValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e RetrieveSchoolHistoryByStudentInCourseResponse_SchoolValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e RetrieveSchoolHistoryByStudentInCourseResponse_SchoolValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e RetrieveSchoolHistoryByStudentInCourseResponse_SchoolValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e RetrieveSchoolHistoryByStudentInCourseResponse_SchoolValidationError) ErrorName() string {
	return "RetrieveSchoolHistoryByStudentInCourseResponse_SchoolValidationError"
}

// Error satisfies the builtin error interface
func (e RetrieveSchoolHistoryByStudentInCourseResponse_SchoolValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRetrieveSchoolHistoryByStudentInCourseResponse_School.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RetrieveSchoolHistoryByStudentInCourseResponse_SchoolValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RetrieveSchoolHistoryByStudentInCourseResponse_SchoolValidationError{}

// Validate checks the field values on
// ListTagByStudentInCourseResponse_StudentTag with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListTagByStudentInCourseResponse_StudentTag) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListTagByStudentInCourseResponse_StudentTag with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// ListTagByStudentInCourseResponse_StudentTagMultiError, or nil if none found.
func (m *ListTagByStudentInCourseResponse_StudentTag) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTagByStudentInCourseResponse_StudentTag) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TagId

	// no validation rules for TagName

	if len(errors) > 0 {
		return ListTagByStudentInCourseResponse_StudentTagMultiError(errors)
	}

	return nil
}

// ListTagByStudentInCourseResponse_StudentTagMultiError is an error wrapping
// multiple validation errors returned by
// ListTagByStudentInCourseResponse_StudentTag.ValidateAll() if the designated
// constraints aren't met.
type ListTagByStudentInCourseResponse_StudentTagMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTagByStudentInCourseResponse_StudentTagMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTagByStudentInCourseResponse_StudentTagMultiError) AllErrors() []error { return m }

// ListTagByStudentInCourseResponse_StudentTagValidationError is the validation
// error returned by ListTagByStudentInCourseResponse_StudentTag.Validate if
// the designated constraints aren't met.
type ListTagByStudentInCourseResponse_StudentTagValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTagByStudentInCourseResponse_StudentTagValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTagByStudentInCourseResponse_StudentTagValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTagByStudentInCourseResponse_StudentTagValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTagByStudentInCourseResponse_StudentTagValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTagByStudentInCourseResponse_StudentTagValidationError) ErrorName() string {
	return "ListTagByStudentInCourseResponse_StudentTagValidationError"
}

// Error satisfies the builtin error interface
func (e ListTagByStudentInCourseResponse_StudentTagValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTagByStudentInCourseResponse_StudentTag.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTagByStudentInCourseResponse_StudentTagValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTagByStudentInCourseResponse_StudentTagValidationError{}
