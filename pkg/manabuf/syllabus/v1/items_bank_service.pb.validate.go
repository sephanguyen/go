// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: syllabus/v1/items_bank_service.proto

package sspb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ImportItemsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportItemsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportItemsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportItemsRequestMultiError, or nil if none found.
func (m *ImportItemsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportItemsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Payload

	if len(errors) > 0 {
		return ImportItemsRequestMultiError(errors)
	}

	return nil
}

// ImportItemsRequestMultiError is an error wrapping multiple validation errors
// returned by ImportItemsRequest.ValidateAll() if the designated constraints
// aren't met.
type ImportItemsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportItemsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportItemsRequestMultiError) AllErrors() []error { return m }

// ImportItemsRequestValidationError is the validation error returned by
// ImportItemsRequest.Validate if the designated constraints aren't met.
type ImportItemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportItemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportItemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportItemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportItemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportItemsRequestValidationError) ErrorName() string {
	return "ImportItemsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportItemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportItemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportItemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportItemsRequestValidationError{}

// Validate checks the field values on ImportItemsResponseError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportItemsResponseError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportItemsResponseError with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportItemsResponseErrorMultiError, or nil if none found.
func (m *ImportItemsResponseError) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportItemsResponseError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RowNumber

	// no validation rules for ErrorCode

	// no validation rules for ErrorDescription

	if len(errors) > 0 {
		return ImportItemsResponseErrorMultiError(errors)
	}

	return nil
}

// ImportItemsResponseErrorMultiError is an error wrapping multiple validation
// errors returned by ImportItemsResponseError.ValidateAll() if the designated
// constraints aren't met.
type ImportItemsResponseErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportItemsResponseErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportItemsResponseErrorMultiError) AllErrors() []error { return m }

// ImportItemsResponseErrorValidationError is the validation error returned by
// ImportItemsResponseError.Validate if the designated constraints aren't met.
type ImportItemsResponseErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportItemsResponseErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportItemsResponseErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportItemsResponseErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportItemsResponseErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportItemsResponseErrorValidationError) ErrorName() string {
	return "ImportItemsResponseErrorValidationError"
}

// Error satisfies the builtin error interface
func (e ImportItemsResponseErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportItemsResponseError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportItemsResponseErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportItemsResponseErrorValidationError{}

// Validate checks the field values on ImportItemsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ImportItemsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImportItemsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ImportItemsResponseMultiError, or nil if none found.
func (m *ImportItemsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ImportItemsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ImportItemsResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ImportItemsResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportItemsResponseValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ImportItemsResponseMultiError(errors)
	}

	return nil
}

// ImportItemsResponseMultiError is an error wrapping multiple validation
// errors returned by ImportItemsResponse.ValidateAll() if the designated
// constraints aren't met.
type ImportItemsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImportItemsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImportItemsResponseMultiError) AllErrors() []error { return m }

// ImportItemsResponseValidationError is the validation error returned by
// ImportItemsResponse.Validate if the designated constraints aren't met.
type ImportItemsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportItemsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportItemsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportItemsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportItemsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportItemsResponseValidationError) ErrorName() string {
	return "ImportItemsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ImportItemsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportItemsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportItemsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportItemsResponseValidationError{}

// Validate checks the field values on ItemBankResumableUploadURLRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ItemBankResumableUploadURLRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ItemBankResumableUploadURLRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ItemBankResumableUploadURLRequestMultiError, or nil if none found.
func (m *ItemBankResumableUploadURLRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ItemBankResumableUploadURLRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileName

	if all {
		switch v := interface{}(m.GetExpiry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ItemBankResumableUploadURLRequestValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ItemBankResumableUploadURLRequestValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ItemBankResumableUploadURLRequestValidationError{
				field:  "Expiry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AllowOrigin

	if len(errors) > 0 {
		return ItemBankResumableUploadURLRequestMultiError(errors)
	}

	return nil
}

// ItemBankResumableUploadURLRequestMultiError is an error wrapping multiple
// validation errors returned by
// ItemBankResumableUploadURLRequest.ValidateAll() if the designated
// constraints aren't met.
type ItemBankResumableUploadURLRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemBankResumableUploadURLRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemBankResumableUploadURLRequestMultiError) AllErrors() []error { return m }

// ItemBankResumableUploadURLRequestValidationError is the validation error
// returned by ItemBankResumableUploadURLRequest.Validate if the designated
// constraints aren't met.
type ItemBankResumableUploadURLRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemBankResumableUploadURLRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemBankResumableUploadURLRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemBankResumableUploadURLRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemBankResumableUploadURLRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemBankResumableUploadURLRequestValidationError) ErrorName() string {
	return "ItemBankResumableUploadURLRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ItemBankResumableUploadURLRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemBankResumableUploadURLRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemBankResumableUploadURLRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemBankResumableUploadURLRequestValidationError{}

// Validate checks the field values on ItemBankResumableUploadURLResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ItemBankResumableUploadURLResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ItemBankResumableUploadURLResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ItemBankResumableUploadURLResponseMultiError, or nil if none found.
func (m *ItemBankResumableUploadURLResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ItemBankResumableUploadURLResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFileStoreUrl()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ItemBankResumableUploadURLResponseValidationError{
					field:  "FileStoreUrl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ItemBankResumableUploadURLResponseValidationError{
					field:  "FileStoreUrl",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFileStoreUrl()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ItemBankResumableUploadURLResponseValidationError{
				field:  "FileStoreUrl",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpiry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ItemBankResumableUploadURLResponseValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ItemBankResumableUploadURLResponseValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ItemBankResumableUploadURLResponseValidationError{
				field:  "Expiry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ItemBankResumableUploadURLResponseMultiError(errors)
	}

	return nil
}

// ItemBankResumableUploadURLResponseMultiError is an error wrapping multiple
// validation errors returned by
// ItemBankResumableUploadURLResponse.ValidateAll() if the designated
// constraints aren't met.
type ItemBankResumableUploadURLResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemBankResumableUploadURLResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemBankResumableUploadURLResponseMultiError) AllErrors() []error { return m }

// ItemBankResumableUploadURLResponseValidationError is the validation error
// returned by ItemBankResumableUploadURLResponse.Validate if the designated
// constraints aren't met.
type ItemBankResumableUploadURLResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemBankResumableUploadURLResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ItemBankResumableUploadURLResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ItemBankResumableUploadURLResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemBankResumableUploadURLResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemBankResumableUploadURLResponseValidationError) ErrorName() string {
	return "ItemBankResumableUploadURLResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ItemBankResumableUploadURLResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemBankResumableUploadURLResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemBankResumableUploadURLResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemBankResumableUploadURLResponseValidationError{}

// Validate checks the field values on FileStoreURLError with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FileStoreURLError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileStoreURLError with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FileStoreURLErrorMultiError, or nil if none found.
func (m *FileStoreURLError) ValidateAll() error {
	return m.validate(true)
}

func (m *FileStoreURLError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FileName

	// no validation rules for ErrorCode

	// no validation rules for ErrorDescription

	if len(errors) > 0 {
		return FileStoreURLErrorMultiError(errors)
	}

	return nil
}

// FileStoreURLErrorMultiError is an error wrapping multiple validation errors
// returned by FileStoreURLError.ValidateAll() if the designated constraints
// aren't met.
type FileStoreURLErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileStoreURLErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileStoreURLErrorMultiError) AllErrors() []error { return m }

// FileStoreURLErrorValidationError is the validation error returned by
// FileStoreURLError.Validate if the designated constraints aren't met.
type FileStoreURLErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileStoreURLErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileStoreURLErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileStoreURLErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileStoreURLErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileStoreURLErrorValidationError) ErrorName() string {
	return "FileStoreURLErrorValidationError"
}

// Error satisfies the builtin error interface
func (e FileStoreURLErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileStoreURLError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileStoreURLErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileStoreURLErrorValidationError{}

// Validate checks the field values on FileStoreURL with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileStoreURL) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileStoreURL with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileStoreURLMultiError, or
// nil if none found.
func (m *FileStoreURL) ValidateAll() error {
	return m.validate(true)
}

func (m *FileStoreURL) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResumableUploadUrl

	// no validation rules for PublicUrl

	if all {
		switch v := interface{}(m.GetExpiry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileStoreURLValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileStoreURLValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileStoreURLValidationError{
				field:  "Expiry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileStoreURLValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileStoreURLValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileStoreURLValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FileStoreURLMultiError(errors)
	}

	return nil
}

// FileStoreURLMultiError is an error wrapping multiple validation errors
// returned by FileStoreURL.ValidateAll() if the designated constraints aren't met.
type FileStoreURLMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileStoreURLMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileStoreURLMultiError) AllErrors() []error { return m }

// FileStoreURLValidationError is the validation error returned by
// FileStoreURL.Validate if the designated constraints aren't met.
type FileStoreURLValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileStoreURLValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileStoreURLValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileStoreURLValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileStoreURLValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileStoreURLValidationError) ErrorName() string { return "FileStoreURLValidationError" }

// Error satisfies the builtin error interface
func (e FileStoreURLValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileStoreURL.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileStoreURLValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileStoreURLValidationError{}

// Validate checks the field values on ListItemBankResumableUploadURLRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListItemBankResumableUploadURLRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListItemBankResumableUploadURLRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListItemBankResumableUploadURLRequestMultiError, or nil if none found.
func (m *ListItemBankResumableUploadURLRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListItemBankResumableUploadURLRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExpiry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListItemBankResumableUploadURLRequestValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListItemBankResumableUploadURLRequestValidationError{
					field:  "Expiry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpiry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListItemBankResumableUploadURLRequestValidationError{
				field:  "Expiry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AllowOrigin

	if len(errors) > 0 {
		return ListItemBankResumableUploadURLRequestMultiError(errors)
	}

	return nil
}

// ListItemBankResumableUploadURLRequestMultiError is an error wrapping
// multiple validation errors returned by
// ListItemBankResumableUploadURLRequest.ValidateAll() if the designated
// constraints aren't met.
type ListItemBankResumableUploadURLRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListItemBankResumableUploadURLRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListItemBankResumableUploadURLRequestMultiError) AllErrors() []error { return m }

// ListItemBankResumableUploadURLRequestValidationError is the validation error
// returned by ListItemBankResumableUploadURLRequest.Validate if the
// designated constraints aren't met.
type ListItemBankResumableUploadURLRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListItemBankResumableUploadURLRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListItemBankResumableUploadURLRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListItemBankResumableUploadURLRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListItemBankResumableUploadURLRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListItemBankResumableUploadURLRequestValidationError) ErrorName() string {
	return "ListItemBankResumableUploadURLRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListItemBankResumableUploadURLRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListItemBankResumableUploadURLRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListItemBankResumableUploadURLRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListItemBankResumableUploadURLRequestValidationError{}

// Validate checks the field values on ListItemBankResumableUploadURLResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListItemBankResumableUploadURLResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListItemBankResumableUploadURLResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// ListItemBankResumableUploadURLResponseMultiError, or nil if none found.
func (m *ListItemBankResumableUploadURLResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListItemBankResumableUploadURLResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFileStoreUrls() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListItemBankResumableUploadURLResponseValidationError{
						field:  fmt.Sprintf("FileStoreUrls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListItemBankResumableUploadURLResponseValidationError{
						field:  fmt.Sprintf("FileStoreUrls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListItemBankResumableUploadURLResponseValidationError{
					field:  fmt.Sprintf("FileStoreUrls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListItemBankResumableUploadURLResponseMultiError(errors)
	}

	return nil
}

// ListItemBankResumableUploadURLResponseMultiError is an error wrapping
// multiple validation errors returned by
// ListItemBankResumableUploadURLResponse.ValidateAll() if the designated
// constraints aren't met.
type ListItemBankResumableUploadURLResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListItemBankResumableUploadURLResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListItemBankResumableUploadURLResponseMultiError) AllErrors() []error { return m }

// ListItemBankResumableUploadURLResponseValidationError is the validation
// error returned by ListItemBankResumableUploadURLResponse.Validate if the
// designated constraints aren't met.
type ListItemBankResumableUploadURLResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListItemBankResumableUploadURLResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListItemBankResumableUploadURLResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListItemBankResumableUploadURLResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListItemBankResumableUploadURLResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListItemBankResumableUploadURLResponseValidationError) ErrorName() string {
	return "ListItemBankResumableUploadURLResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListItemBankResumableUploadURLResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListItemBankResumableUploadURLResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListItemBankResumableUploadURLResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListItemBankResumableUploadURLResponseValidationError{}

// Validate checks the field values on Media with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Media) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Media with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MediaMultiError, or nil if none found.
func (m *Media) ValidateAll() error {
	return m.validate(true)
}

func (m *Media) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Resource

	// no validation rules for Type

	// no validation rules for FileSize

	if len(errors) > 0 {
		return MediaMultiError(errors)
	}

	return nil
}

// MediaMultiError is an error wrapping multiple validation errors returned by
// Media.ValidateAll() if the designated constraints aren't met.
type MediaMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MediaMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MediaMultiError) AllErrors() []error { return m }

// MediaValidationError is the validation error returned by Media.Validate if
// the designated constraints aren't met.
type MediaValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MediaValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MediaValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MediaValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MediaValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MediaValidationError) ErrorName() string { return "MediaValidationError" }

// Error satisfies the builtin error interface
func (e MediaValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMedia.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MediaValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MediaValidationError{}

// Validate checks the field values on UpsertMediaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertMediaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertMediaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertMediaRequestMultiError, or nil if none found.
func (m *UpsertMediaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertMediaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMedia()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertMediaRequestValidationError{
					field:  "Media",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertMediaRequestValidationError{
					field:  "Media",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMedia()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertMediaRequestValidationError{
				field:  "Media",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpsertMediaRequestMultiError(errors)
	}

	return nil
}

// UpsertMediaRequestMultiError is an error wrapping multiple validation errors
// returned by UpsertMediaRequest.ValidateAll() if the designated constraints
// aren't met.
type UpsertMediaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertMediaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertMediaRequestMultiError) AllErrors() []error { return m }

// UpsertMediaRequestValidationError is the validation error returned by
// UpsertMediaRequest.Validate if the designated constraints aren't met.
type UpsertMediaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertMediaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertMediaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertMediaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertMediaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertMediaRequestValidationError) ErrorName() string {
	return "UpsertMediaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertMediaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertMediaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertMediaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertMediaRequestValidationError{}

// Validate checks the field values on UpsertMediaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpsertMediaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertMediaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpsertMediaResponseMultiError, or nil if none found.
func (m *UpsertMediaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertMediaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MediaId

	if len(errors) > 0 {
		return UpsertMediaResponseMultiError(errors)
	}

	return nil
}

// UpsertMediaResponseMultiError is an error wrapping multiple validation
// errors returned by UpsertMediaResponse.ValidateAll() if the designated
// constraints aren't met.
type UpsertMediaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertMediaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertMediaResponseMultiError) AllErrors() []error { return m }

// UpsertMediaResponseValidationError is the validation error returned by
// UpsertMediaResponse.Validate if the designated constraints aren't met.
type UpsertMediaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertMediaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertMediaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertMediaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertMediaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertMediaResponseValidationError) ErrorName() string {
	return "UpsertMediaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertMediaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertMediaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertMediaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertMediaResponseValidationError{}

// Validate checks the field values on DeleteMediaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMediaRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMediaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMediaRequestMultiError, or nil if none found.
func (m *DeleteMediaRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMediaRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MediaId

	if len(errors) > 0 {
		return DeleteMediaRequestMultiError(errors)
	}

	return nil
}

// DeleteMediaRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteMediaRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteMediaRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMediaRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMediaRequestMultiError) AllErrors() []error { return m }

// DeleteMediaRequestValidationError is the validation error returned by
// DeleteMediaRequest.Validate if the designated constraints aren't met.
type DeleteMediaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMediaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMediaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMediaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMediaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMediaRequestValidationError) ErrorName() string {
	return "DeleteMediaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMediaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMediaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMediaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMediaRequestValidationError{}

// Validate checks the field values on DeleteMediaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMediaResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMediaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMediaResponseMultiError, or nil if none found.
func (m *DeleteMediaResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMediaResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteMediaResponseMultiError(errors)
	}

	return nil
}

// DeleteMediaResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteMediaResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteMediaResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMediaResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMediaResponseMultiError) AllErrors() []error { return m }

// DeleteMediaResponseValidationError is the validation error returned by
// DeleteMediaResponse.Validate if the designated constraints aren't met.
type DeleteMediaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMediaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMediaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMediaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMediaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMediaResponseValidationError) ErrorName() string {
	return "DeleteMediaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMediaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMediaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMediaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMediaResponseValidationError{}

// Validate checks the field values on GetItemsByLMRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetItemsByLMRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetItemsByLMRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetItemsByLMRequestMultiError, or nil if none found.
func (m *GetItemsByLMRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetItemsByLMRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPaging()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetItemsByLMRequestValidationError{
					field:  "Paging",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetItemsByLMRequestValidationError{
					field:  "Paging",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPaging()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetItemsByLMRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetItemsByLMRequestMultiError(errors)
	}

	return nil
}

// GetItemsByLMRequestMultiError is an error wrapping multiple validation
// errors returned by GetItemsByLMRequest.ValidateAll() if the designated
// constraints aren't met.
type GetItemsByLMRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetItemsByLMRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetItemsByLMRequestMultiError) AllErrors() []error { return m }

// GetItemsByLMRequestValidationError is the validation error returned by
// GetItemsByLMRequest.Validate if the designated constraints aren't met.
type GetItemsByLMRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetItemsByLMRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetItemsByLMRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetItemsByLMRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetItemsByLMRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetItemsByLMRequestValidationError) ErrorName() string {
	return "GetItemsByLMRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetItemsByLMRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetItemsByLMRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetItemsByLMRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetItemsByLMRequestValidationError{}

// Validate checks the field values on GetItemsByLMResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetItemsByLMResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetItemsByLMResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetItemsByLMResponseMultiError, or nil if none found.
func (m *GetItemsByLMResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetItemsByLMResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetItemsByLMResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetItemsByLMResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetItemsByLMResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetNextPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetItemsByLMResponseValidationError{
					field:  "NextPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetItemsByLMResponseValidationError{
					field:  "NextPage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNextPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetItemsByLMResponseValidationError{
				field:  "NextPage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetItemsByLMResponseMultiError(errors)
	}

	return nil
}

// GetItemsByLMResponseMultiError is an error wrapping multiple validation
// errors returned by GetItemsByLMResponse.ValidateAll() if the designated
// constraints aren't met.
type GetItemsByLMResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetItemsByLMResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetItemsByLMResponseMultiError) AllErrors() []error { return m }

// GetItemsByLMResponseValidationError is the validation error returned by
// GetItemsByLMResponse.Validate if the designated constraints aren't met.
type GetItemsByLMResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetItemsByLMResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetItemsByLMResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetItemsByLMResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetItemsByLMResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetItemsByLMResponseValidationError) ErrorName() string {
	return "GetItemsByLMResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetItemsByLMResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetItemsByLMResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetItemsByLMResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetItemsByLMResponseValidationError{}

// Validate checks the field values on
// ItemBankResumableUploadURLResponse_FileStoreURL with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ItemBankResumableUploadURLResponse_FileStoreURL) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ItemBankResumableUploadURLResponse_FileStoreURL with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// ItemBankResumableUploadURLResponse_FileStoreURLMultiError, or nil if none found.
func (m *ItemBankResumableUploadURLResponse_FileStoreURL) ValidateAll() error {
	return m.validate(true)
}

func (m *ItemBankResumableUploadURLResponse_FileStoreURL) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResumableUploadUrl

	// no validation rules for PublicUrl

	if len(errors) > 0 {
		return ItemBankResumableUploadURLResponse_FileStoreURLMultiError(errors)
	}

	return nil
}

// ItemBankResumableUploadURLResponse_FileStoreURLMultiError is an error
// wrapping multiple validation errors returned by
// ItemBankResumableUploadURLResponse_FileStoreURL.ValidateAll() if the
// designated constraints aren't met.
type ItemBankResumableUploadURLResponse_FileStoreURLMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ItemBankResumableUploadURLResponse_FileStoreURLMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ItemBankResumableUploadURLResponse_FileStoreURLMultiError) AllErrors() []error { return m }

// ItemBankResumableUploadURLResponse_FileStoreURLValidationError is the
// validation error returned by
// ItemBankResumableUploadURLResponse_FileStoreURL.Validate if the designated
// constraints aren't met.
type ItemBankResumableUploadURLResponse_FileStoreURLValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ItemBankResumableUploadURLResponse_FileStoreURLValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ItemBankResumableUploadURLResponse_FileStoreURLValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ItemBankResumableUploadURLResponse_FileStoreURLValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ItemBankResumableUploadURLResponse_FileStoreURLValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ItemBankResumableUploadURLResponse_FileStoreURLValidationError) ErrorName() string {
	return "ItemBankResumableUploadURLResponse_FileStoreURLValidationError"
}

// Error satisfies the builtin error interface
func (e ItemBankResumableUploadURLResponse_FileStoreURLValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sItemBankResumableUploadURLResponse_FileStoreURL.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ItemBankResumableUploadURLResponse_FileStoreURLValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ItemBankResumableUploadURLResponse_FileStoreURLValidationError{}

// Validate checks the field values on GetItemsByLMResponse_Items with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetItemsByLMResponse_Items) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetItemsByLMResponse_Items with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetItemsByLMResponse_ItemsMultiError, or nil if none found.
func (m *GetItemsByLMResponse_Items) ValidateAll() error {
	return m.validate(true)
}

func (m *GetItemsByLMResponse_Items) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Reference

	// no validation rules for Title

	if len(errors) > 0 {
		return GetItemsByLMResponse_ItemsMultiError(errors)
	}

	return nil
}

// GetItemsByLMResponse_ItemsMultiError is an error wrapping multiple
// validation errors returned by GetItemsByLMResponse_Items.ValidateAll() if
// the designated constraints aren't met.
type GetItemsByLMResponse_ItemsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetItemsByLMResponse_ItemsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetItemsByLMResponse_ItemsMultiError) AllErrors() []error { return m }

// GetItemsByLMResponse_ItemsValidationError is the validation error returned
// by GetItemsByLMResponse_Items.Validate if the designated constraints aren't met.
type GetItemsByLMResponse_ItemsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetItemsByLMResponse_ItemsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetItemsByLMResponse_ItemsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetItemsByLMResponse_ItemsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetItemsByLMResponse_ItemsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetItemsByLMResponse_ItemsValidationError) ErrorName() string {
	return "GetItemsByLMResponse_ItemsValidationError"
}

// Error satisfies the builtin error interface
func (e GetItemsByLMResponse_ItemsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetItemsByLMResponse_Items.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetItemsByLMResponse_ItemsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetItemsByLMResponse_ItemsValidationError{}
