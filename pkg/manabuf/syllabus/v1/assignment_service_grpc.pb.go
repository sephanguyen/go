// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AssignmentClient is the client API for Assignment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssignmentClient interface {
	// InsertAssignment insert an assignment
	InsertAssignment(ctx context.Context, in *InsertAssignmentRequest, opts ...grpc.CallOption) (*InsertAssignmentResponse, error)
	// UpdateAssignment update metadata of an assignment
	UpdateAssignment(ctx context.Context, in *UpdateAssignmentRequest, opts ...grpc.CallOption) (*UpdateAssignmentResponse, error)
	InsertAdhocAssignment(ctx context.Context, in *InsertAdhocAssignmentRequest, opts ...grpc.CallOption) (*InsertAdhocAssignmentResponse, error)
	UpdateAdhocAssignment(ctx context.Context, in *UpdateAdhocAssignmentRequest, opts ...grpc.CallOption) (*UpdateAdhocAssignmentResponse, error)
	ListAssignment(ctx context.Context, in *ListAssignmentRequest, opts ...grpc.CallOption) (*ListAssignmentResponse, error)
	SubmitAssignment(ctx context.Context, in *SubmitAssignmentRequest, opts ...grpc.CallOption) (*SubmitAssignmentResponse, error)
}

type assignmentClient struct {
	cc grpc.ClientConnInterface
}

func NewAssignmentClient(cc grpc.ClientConnInterface) AssignmentClient {
	return &assignmentClient{cc}
}

func (c *assignmentClient) InsertAssignment(ctx context.Context, in *InsertAssignmentRequest, opts ...grpc.CallOption) (*InsertAssignmentResponse, error) {
	out := new(InsertAssignmentResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.Assignment/InsertAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentClient) UpdateAssignment(ctx context.Context, in *UpdateAssignmentRequest, opts ...grpc.CallOption) (*UpdateAssignmentResponse, error) {
	out := new(UpdateAssignmentResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.Assignment/UpdateAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentClient) InsertAdhocAssignment(ctx context.Context, in *InsertAdhocAssignmentRequest, opts ...grpc.CallOption) (*InsertAdhocAssignmentResponse, error) {
	out := new(InsertAdhocAssignmentResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.Assignment/InsertAdhocAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentClient) UpdateAdhocAssignment(ctx context.Context, in *UpdateAdhocAssignmentRequest, opts ...grpc.CallOption) (*UpdateAdhocAssignmentResponse, error) {
	out := new(UpdateAdhocAssignmentResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.Assignment/UpdateAdhocAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentClient) ListAssignment(ctx context.Context, in *ListAssignmentRequest, opts ...grpc.CallOption) (*ListAssignmentResponse, error) {
	out := new(ListAssignmentResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.Assignment/ListAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assignmentClient) SubmitAssignment(ctx context.Context, in *SubmitAssignmentRequest, opts ...grpc.CallOption) (*SubmitAssignmentResponse, error) {
	out := new(SubmitAssignmentResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.Assignment/SubmitAssignment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssignmentServer is the server API for Assignment service.
// All implementations should embed UnimplementedAssignmentServer
// for forward compatibility
type AssignmentServer interface {
	// InsertAssignment insert an assignment
	InsertAssignment(context.Context, *InsertAssignmentRequest) (*InsertAssignmentResponse, error)
	// UpdateAssignment update metadata of an assignment
	UpdateAssignment(context.Context, *UpdateAssignmentRequest) (*UpdateAssignmentResponse, error)
	InsertAdhocAssignment(context.Context, *InsertAdhocAssignmentRequest) (*InsertAdhocAssignmentResponse, error)
	UpdateAdhocAssignment(context.Context, *UpdateAdhocAssignmentRequest) (*UpdateAdhocAssignmentResponse, error)
	ListAssignment(context.Context, *ListAssignmentRequest) (*ListAssignmentResponse, error)
	SubmitAssignment(context.Context, *SubmitAssignmentRequest) (*SubmitAssignmentResponse, error)
}

// UnimplementedAssignmentServer should be embedded to have forward compatible implementations.
type UnimplementedAssignmentServer struct {
}

func (UnimplementedAssignmentServer) InsertAssignment(context.Context, *InsertAssignmentRequest) (*InsertAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertAssignment not implemented")
}
func (UnimplementedAssignmentServer) UpdateAssignment(context.Context, *UpdateAssignmentRequest) (*UpdateAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssignment not implemented")
}
func (UnimplementedAssignmentServer) InsertAdhocAssignment(context.Context, *InsertAdhocAssignmentRequest) (*InsertAdhocAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertAdhocAssignment not implemented")
}
func (UnimplementedAssignmentServer) UpdateAdhocAssignment(context.Context, *UpdateAdhocAssignmentRequest) (*UpdateAdhocAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdhocAssignment not implemented")
}
func (UnimplementedAssignmentServer) ListAssignment(context.Context, *ListAssignmentRequest) (*ListAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssignment not implemented")
}
func (UnimplementedAssignmentServer) SubmitAssignment(context.Context, *SubmitAssignmentRequest) (*SubmitAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitAssignment not implemented")
}

// UnsafeAssignmentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssignmentServer will
// result in compilation errors.
type UnsafeAssignmentServer interface {
	mustEmbedUnimplementedAssignmentServer()
}

func RegisterAssignmentServer(s grpc.ServiceRegistrar, srv AssignmentServer) {
	s.RegisterService(&_Assignment_serviceDesc, srv)
}

func _Assignment_InsertAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentServer).InsertAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.Assignment/InsertAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentServer).InsertAssignment(ctx, req.(*InsertAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assignment_UpdateAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentServer).UpdateAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.Assignment/UpdateAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentServer).UpdateAssignment(ctx, req.(*UpdateAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assignment_InsertAdhocAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertAdhocAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentServer).InsertAdhocAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.Assignment/InsertAdhocAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentServer).InsertAdhocAssignment(ctx, req.(*InsertAdhocAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assignment_UpdateAdhocAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdhocAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentServer).UpdateAdhocAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.Assignment/UpdateAdhocAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentServer).UpdateAdhocAssignment(ctx, req.(*UpdateAdhocAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assignment_ListAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentServer).ListAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.Assignment/ListAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentServer).ListAssignment(ctx, req.(*ListAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Assignment_SubmitAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssignmentServer).SubmitAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.Assignment/SubmitAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssignmentServer).SubmitAssignment(ctx, req.(*SubmitAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Assignment_serviceDesc = grpc.ServiceDesc{
	ServiceName: "syllabus.v1.Assignment",
	HandlerType: (*AssignmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertAssignment",
			Handler:    _Assignment_InsertAssignment_Handler,
		},
		{
			MethodName: "UpdateAssignment",
			Handler:    _Assignment_UpdateAssignment_Handler,
		},
		{
			MethodName: "InsertAdhocAssignment",
			Handler:    _Assignment_InsertAdhocAssignment_Handler,
		},
		{
			MethodName: "UpdateAdhocAssignment",
			Handler:    _Assignment_UpdateAdhocAssignment_Handler,
		},
		{
			MethodName: "ListAssignment",
			Handler:    _Assignment_ListAssignment_Handler,
		},
		{
			MethodName: "SubmitAssignment",
			Handler:    _Assignment_SubmitAssignment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "syllabus/v1/assignment_service.proto",
}
