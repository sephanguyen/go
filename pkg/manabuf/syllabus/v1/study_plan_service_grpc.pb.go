// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// StudyPlanClient is the client API for StudyPlan service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudyPlanClient interface {
	// ** BEGIN MODIFIER ** //
	UpsertMasterInfo(ctx context.Context, in *UpsertMasterInfoRequest, opts ...grpc.CallOption) (*UpsertMasterInfoResponse, error)
	UpsertIndividual(ctx context.Context, in *UpsertIndividualInfoRequest, opts ...grpc.CallOption) (*UpsertIndividualInfoResponse, error)
	UpdateStudentLearningItemTime(ctx context.Context, in *UpdateStudentLearningItemTimeRequest, opts ...grpc.CallOption) (*UpdateStudentLearningItemTimeResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	BulkUpdateStudyPlanItemSchoolDate(ctx context.Context, in *BulkUpdateStudyPlanItemSchoolDateRequest, opts ...grpc.CallOption) (*BulkUpdateStudyPlanItemSchoolDateResponse, error)
	BulkUpdateStudyPlanItemStatus(ctx context.Context, in *BulkUpdateStudyPlanItemStatusRequest, opts ...grpc.CallOption) (*BulkUpdateStudyPlanItemStatusResponse, error)
	InsertStudyPlan(ctx context.Context, in *InsertStudyPlanRequest, opts ...grpc.CallOption) (*InsertStudyPlanResponse, error)
	UpdateStudyPlan(ctx context.Context, in *UpdateStudyPlanRequest, opts ...grpc.CallOption) (*UpdateStudyPlanResponse, error)
	UpdateStudyPlanItemsStartEndDate(ctx context.Context, in *UpdateStudyPlanItemsStartEndDateRequest, opts ...grpc.CallOption) (*UpdateStudyPlanItemsStartEndDateResponse, error)
	UpsertSchoolDate(ctx context.Context, in *UpsertSchoolDateRequest, opts ...grpc.CallOption) (*UpsertSchoolDateResponse, error)
	UpsertAllocateMarker(ctx context.Context, in *UpsertAllocateMarkerRequest, opts ...grpc.CallOption) (*UpsertAllocateMarkerResponse, error)
	ImportStudyPlan(ctx context.Context, in *ImportStudyPlanRequest, opts ...grpc.CallOption) (*ImportStudyPlanResponse, error)
	// ** BEGIN READER **//
	ListStudentStudyPlan(ctx context.Context, in *ListStudentStudyPlansRequest, opts ...grpc.CallOption) (*ListStudentStudyPlansResponse, error)
	ListToDoItem(ctx context.Context, in *ListToDoItemRequest, opts ...grpc.CallOption) (*ListToDoItemResponse, error)
	ListStudentStudyPlanItem(ctx context.Context, in *ListStudentStudyPlanItemRequest, opts ...grpc.CallOption) (*ListStudentStudyPlanItemResponse, error)
	ListByCourse(ctx context.Context, in *ListByCourseRequest, opts ...grpc.CallOption) (*ListByCourseResponse, error)
	RetrieveStudyPlanIdentity(ctx context.Context, in *RetrieveStudyPlanIdentityRequest, opts ...grpc.CallOption) (*RetrieveStudyPlanIdentityResponse, error)
	ListToDoItemStructuredBookTree(ctx context.Context, in *ListToDoItemStructuredBookTreeRequest, opts ...grpc.CallOption) (*ListToDoItemStructuredBookTreeResponse, error)
	ListAllocateTeacher(ctx context.Context, in *ListAllocateTeacherRequest, opts ...grpc.CallOption) (*ListAllocateTeacherResponse, error)
	RetrieveAllocateMarker(ctx context.Context, in *RetrieveAllocateMarkerRequest, opts ...grpc.CallOption) (*RetrieveAllocateMarkerResponse, error)
}

type studyPlanClient struct {
	cc grpc.ClientConnInterface
}

func NewStudyPlanClient(cc grpc.ClientConnInterface) StudyPlanClient {
	return &studyPlanClient{cc}
}

func (c *studyPlanClient) UpsertMasterInfo(ctx context.Context, in *UpsertMasterInfoRequest, opts ...grpc.CallOption) (*UpsertMasterInfoResponse, error) {
	out := new(UpsertMasterInfoResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.StudyPlan/UpsertMasterInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyPlanClient) UpsertIndividual(ctx context.Context, in *UpsertIndividualInfoRequest, opts ...grpc.CallOption) (*UpsertIndividualInfoResponse, error) {
	out := new(UpsertIndividualInfoResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.StudyPlan/UpsertIndividual", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyPlanClient) UpdateStudentLearningItemTime(ctx context.Context, in *UpdateStudentLearningItemTimeRequest, opts ...grpc.CallOption) (*UpdateStudentLearningItemTimeResponse, error) {
	out := new(UpdateStudentLearningItemTimeResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.StudyPlan/UpdateStudentLearningItemTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyPlanClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.StudyPlan/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyPlanClient) BulkUpdateStudyPlanItemSchoolDate(ctx context.Context, in *BulkUpdateStudyPlanItemSchoolDateRequest, opts ...grpc.CallOption) (*BulkUpdateStudyPlanItemSchoolDateResponse, error) {
	out := new(BulkUpdateStudyPlanItemSchoolDateResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.StudyPlan/BulkUpdateStudyPlanItemSchoolDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyPlanClient) BulkUpdateStudyPlanItemStatus(ctx context.Context, in *BulkUpdateStudyPlanItemStatusRequest, opts ...grpc.CallOption) (*BulkUpdateStudyPlanItemStatusResponse, error) {
	out := new(BulkUpdateStudyPlanItemStatusResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.StudyPlan/BulkUpdateStudyPlanItemStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyPlanClient) InsertStudyPlan(ctx context.Context, in *InsertStudyPlanRequest, opts ...grpc.CallOption) (*InsertStudyPlanResponse, error) {
	out := new(InsertStudyPlanResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.StudyPlan/InsertStudyPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyPlanClient) UpdateStudyPlan(ctx context.Context, in *UpdateStudyPlanRequest, opts ...grpc.CallOption) (*UpdateStudyPlanResponse, error) {
	out := new(UpdateStudyPlanResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.StudyPlan/UpdateStudyPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyPlanClient) UpdateStudyPlanItemsStartEndDate(ctx context.Context, in *UpdateStudyPlanItemsStartEndDateRequest, opts ...grpc.CallOption) (*UpdateStudyPlanItemsStartEndDateResponse, error) {
	out := new(UpdateStudyPlanItemsStartEndDateResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.StudyPlan/UpdateStudyPlanItemsStartEndDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyPlanClient) UpsertSchoolDate(ctx context.Context, in *UpsertSchoolDateRequest, opts ...grpc.CallOption) (*UpsertSchoolDateResponse, error) {
	out := new(UpsertSchoolDateResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.StudyPlan/UpsertSchoolDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyPlanClient) UpsertAllocateMarker(ctx context.Context, in *UpsertAllocateMarkerRequest, opts ...grpc.CallOption) (*UpsertAllocateMarkerResponse, error) {
	out := new(UpsertAllocateMarkerResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.StudyPlan/UpsertAllocateMarker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyPlanClient) ImportStudyPlan(ctx context.Context, in *ImportStudyPlanRequest, opts ...grpc.CallOption) (*ImportStudyPlanResponse, error) {
	out := new(ImportStudyPlanResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.StudyPlan/ImportStudyPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyPlanClient) ListStudentStudyPlan(ctx context.Context, in *ListStudentStudyPlansRequest, opts ...grpc.CallOption) (*ListStudentStudyPlansResponse, error) {
	out := new(ListStudentStudyPlansResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.StudyPlan/ListStudentStudyPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyPlanClient) ListToDoItem(ctx context.Context, in *ListToDoItemRequest, opts ...grpc.CallOption) (*ListToDoItemResponse, error) {
	out := new(ListToDoItemResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.StudyPlan/ListToDoItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyPlanClient) ListStudentStudyPlanItem(ctx context.Context, in *ListStudentStudyPlanItemRequest, opts ...grpc.CallOption) (*ListStudentStudyPlanItemResponse, error) {
	out := new(ListStudentStudyPlanItemResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.StudyPlan/ListStudentStudyPlanItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyPlanClient) ListByCourse(ctx context.Context, in *ListByCourseRequest, opts ...grpc.CallOption) (*ListByCourseResponse, error) {
	out := new(ListByCourseResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.StudyPlan/ListByCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyPlanClient) RetrieveStudyPlanIdentity(ctx context.Context, in *RetrieveStudyPlanIdentityRequest, opts ...grpc.CallOption) (*RetrieveStudyPlanIdentityResponse, error) {
	out := new(RetrieveStudyPlanIdentityResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.StudyPlan/RetrieveStudyPlanIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyPlanClient) ListToDoItemStructuredBookTree(ctx context.Context, in *ListToDoItemStructuredBookTreeRequest, opts ...grpc.CallOption) (*ListToDoItemStructuredBookTreeResponse, error) {
	out := new(ListToDoItemStructuredBookTreeResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.StudyPlan/ListToDoItemStructuredBookTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyPlanClient) ListAllocateTeacher(ctx context.Context, in *ListAllocateTeacherRequest, opts ...grpc.CallOption) (*ListAllocateTeacherResponse, error) {
	out := new(ListAllocateTeacherResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.StudyPlan/ListAllocateTeacher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studyPlanClient) RetrieveAllocateMarker(ctx context.Context, in *RetrieveAllocateMarkerRequest, opts ...grpc.CallOption) (*RetrieveAllocateMarkerResponse, error) {
	out := new(RetrieveAllocateMarkerResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.StudyPlan/RetrieveAllocateMarker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudyPlanServer is the server API for StudyPlan service.
// All implementations should embed UnimplementedStudyPlanServer
// for forward compatibility
type StudyPlanServer interface {
	// ** BEGIN MODIFIER ** //
	UpsertMasterInfo(context.Context, *UpsertMasterInfoRequest) (*UpsertMasterInfoResponse, error)
	UpsertIndividual(context.Context, *UpsertIndividualInfoRequest) (*UpsertIndividualInfoResponse, error)
	UpdateStudentLearningItemTime(context.Context, *UpdateStudentLearningItemTimeRequest) (*UpdateStudentLearningItemTimeResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	BulkUpdateStudyPlanItemSchoolDate(context.Context, *BulkUpdateStudyPlanItemSchoolDateRequest) (*BulkUpdateStudyPlanItemSchoolDateResponse, error)
	BulkUpdateStudyPlanItemStatus(context.Context, *BulkUpdateStudyPlanItemStatusRequest) (*BulkUpdateStudyPlanItemStatusResponse, error)
	InsertStudyPlan(context.Context, *InsertStudyPlanRequest) (*InsertStudyPlanResponse, error)
	UpdateStudyPlan(context.Context, *UpdateStudyPlanRequest) (*UpdateStudyPlanResponse, error)
	UpdateStudyPlanItemsStartEndDate(context.Context, *UpdateStudyPlanItemsStartEndDateRequest) (*UpdateStudyPlanItemsStartEndDateResponse, error)
	UpsertSchoolDate(context.Context, *UpsertSchoolDateRequest) (*UpsertSchoolDateResponse, error)
	UpsertAllocateMarker(context.Context, *UpsertAllocateMarkerRequest) (*UpsertAllocateMarkerResponse, error)
	ImportStudyPlan(context.Context, *ImportStudyPlanRequest) (*ImportStudyPlanResponse, error)
	// ** BEGIN READER **//
	ListStudentStudyPlan(context.Context, *ListStudentStudyPlansRequest) (*ListStudentStudyPlansResponse, error)
	ListToDoItem(context.Context, *ListToDoItemRequest) (*ListToDoItemResponse, error)
	ListStudentStudyPlanItem(context.Context, *ListStudentStudyPlanItemRequest) (*ListStudentStudyPlanItemResponse, error)
	ListByCourse(context.Context, *ListByCourseRequest) (*ListByCourseResponse, error)
	RetrieveStudyPlanIdentity(context.Context, *RetrieveStudyPlanIdentityRequest) (*RetrieveStudyPlanIdentityResponse, error)
	ListToDoItemStructuredBookTree(context.Context, *ListToDoItemStructuredBookTreeRequest) (*ListToDoItemStructuredBookTreeResponse, error)
	ListAllocateTeacher(context.Context, *ListAllocateTeacherRequest) (*ListAllocateTeacherResponse, error)
	RetrieveAllocateMarker(context.Context, *RetrieveAllocateMarkerRequest) (*RetrieveAllocateMarkerResponse, error)
}

// UnimplementedStudyPlanServer should be embedded to have forward compatible implementations.
type UnimplementedStudyPlanServer struct {
}

func (UnimplementedStudyPlanServer) UpsertMasterInfo(context.Context, *UpsertMasterInfoRequest) (*UpsertMasterInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertMasterInfo not implemented")
}
func (UnimplementedStudyPlanServer) UpsertIndividual(context.Context, *UpsertIndividualInfoRequest) (*UpsertIndividualInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertIndividual not implemented")
}
func (UnimplementedStudyPlanServer) UpdateStudentLearningItemTime(context.Context, *UpdateStudentLearningItemTimeRequest) (*UpdateStudentLearningItemTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudentLearningItemTime not implemented")
}
func (UnimplementedStudyPlanServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedStudyPlanServer) BulkUpdateStudyPlanItemSchoolDate(context.Context, *BulkUpdateStudyPlanItemSchoolDateRequest) (*BulkUpdateStudyPlanItemSchoolDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkUpdateStudyPlanItemSchoolDate not implemented")
}
func (UnimplementedStudyPlanServer) BulkUpdateStudyPlanItemStatus(context.Context, *BulkUpdateStudyPlanItemStatusRequest) (*BulkUpdateStudyPlanItemStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkUpdateStudyPlanItemStatus not implemented")
}
func (UnimplementedStudyPlanServer) InsertStudyPlan(context.Context, *InsertStudyPlanRequest) (*InsertStudyPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertStudyPlan not implemented")
}
func (UnimplementedStudyPlanServer) UpdateStudyPlan(context.Context, *UpdateStudyPlanRequest) (*UpdateStudyPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudyPlan not implemented")
}
func (UnimplementedStudyPlanServer) UpdateStudyPlanItemsStartEndDate(context.Context, *UpdateStudyPlanItemsStartEndDateRequest) (*UpdateStudyPlanItemsStartEndDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudyPlanItemsStartEndDate not implemented")
}
func (UnimplementedStudyPlanServer) UpsertSchoolDate(context.Context, *UpsertSchoolDateRequest) (*UpsertSchoolDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertSchoolDate not implemented")
}
func (UnimplementedStudyPlanServer) UpsertAllocateMarker(context.Context, *UpsertAllocateMarkerRequest) (*UpsertAllocateMarkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertAllocateMarker not implemented")
}
func (UnimplementedStudyPlanServer) ImportStudyPlan(context.Context, *ImportStudyPlanRequest) (*ImportStudyPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportStudyPlan not implemented")
}
func (UnimplementedStudyPlanServer) ListStudentStudyPlan(context.Context, *ListStudentStudyPlansRequest) (*ListStudentStudyPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStudentStudyPlan not implemented")
}
func (UnimplementedStudyPlanServer) ListToDoItem(context.Context, *ListToDoItemRequest) (*ListToDoItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListToDoItem not implemented")
}
func (UnimplementedStudyPlanServer) ListStudentStudyPlanItem(context.Context, *ListStudentStudyPlanItemRequest) (*ListStudentStudyPlanItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStudentStudyPlanItem not implemented")
}
func (UnimplementedStudyPlanServer) ListByCourse(context.Context, *ListByCourseRequest) (*ListByCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByCourse not implemented")
}
func (UnimplementedStudyPlanServer) RetrieveStudyPlanIdentity(context.Context, *RetrieveStudyPlanIdentityRequest) (*RetrieveStudyPlanIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveStudyPlanIdentity not implemented")
}
func (UnimplementedStudyPlanServer) ListToDoItemStructuredBookTree(context.Context, *ListToDoItemStructuredBookTreeRequest) (*ListToDoItemStructuredBookTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListToDoItemStructuredBookTree not implemented")
}
func (UnimplementedStudyPlanServer) ListAllocateTeacher(context.Context, *ListAllocateTeacherRequest) (*ListAllocateTeacherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllocateTeacher not implemented")
}
func (UnimplementedStudyPlanServer) RetrieveAllocateMarker(context.Context, *RetrieveAllocateMarkerRequest) (*RetrieveAllocateMarkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveAllocateMarker not implemented")
}

// UnsafeStudyPlanServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudyPlanServer will
// result in compilation errors.
type UnsafeStudyPlanServer interface {
	mustEmbedUnimplementedStudyPlanServer()
}

func RegisterStudyPlanServer(s grpc.ServiceRegistrar, srv StudyPlanServer) {
	s.RegisterService(&_StudyPlan_serviceDesc, srv)
}

func _StudyPlan_UpsertMasterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertMasterInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanServer).UpsertMasterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.StudyPlan/UpsertMasterInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanServer).UpsertMasterInfo(ctx, req.(*UpsertMasterInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyPlan_UpsertIndividual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertIndividualInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanServer).UpsertIndividual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.StudyPlan/UpsertIndividual",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanServer).UpsertIndividual(ctx, req.(*UpsertIndividualInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyPlan_UpdateStudentLearningItemTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudentLearningItemTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanServer).UpdateStudentLearningItemTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.StudyPlan/UpdateStudentLearningItemTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanServer).UpdateStudentLearningItemTime(ctx, req.(*UpdateStudentLearningItemTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyPlan_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.StudyPlan/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyPlan_BulkUpdateStudyPlanItemSchoolDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkUpdateStudyPlanItemSchoolDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanServer).BulkUpdateStudyPlanItemSchoolDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.StudyPlan/BulkUpdateStudyPlanItemSchoolDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanServer).BulkUpdateStudyPlanItemSchoolDate(ctx, req.(*BulkUpdateStudyPlanItemSchoolDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyPlan_BulkUpdateStudyPlanItemStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkUpdateStudyPlanItemStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanServer).BulkUpdateStudyPlanItemStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.StudyPlan/BulkUpdateStudyPlanItemStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanServer).BulkUpdateStudyPlanItemStatus(ctx, req.(*BulkUpdateStudyPlanItemStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyPlan_InsertStudyPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertStudyPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanServer).InsertStudyPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.StudyPlan/InsertStudyPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanServer).InsertStudyPlan(ctx, req.(*InsertStudyPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyPlan_UpdateStudyPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudyPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanServer).UpdateStudyPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.StudyPlan/UpdateStudyPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanServer).UpdateStudyPlan(ctx, req.(*UpdateStudyPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyPlan_UpdateStudyPlanItemsStartEndDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudyPlanItemsStartEndDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanServer).UpdateStudyPlanItemsStartEndDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.StudyPlan/UpdateStudyPlanItemsStartEndDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanServer).UpdateStudyPlanItemsStartEndDate(ctx, req.(*UpdateStudyPlanItemsStartEndDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyPlan_UpsertSchoolDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertSchoolDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanServer).UpsertSchoolDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.StudyPlan/UpsertSchoolDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanServer).UpsertSchoolDate(ctx, req.(*UpsertSchoolDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyPlan_UpsertAllocateMarker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertAllocateMarkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanServer).UpsertAllocateMarker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.StudyPlan/UpsertAllocateMarker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanServer).UpsertAllocateMarker(ctx, req.(*UpsertAllocateMarkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyPlan_ImportStudyPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportStudyPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanServer).ImportStudyPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.StudyPlan/ImportStudyPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanServer).ImportStudyPlan(ctx, req.(*ImportStudyPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyPlan_ListStudentStudyPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStudentStudyPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanServer).ListStudentStudyPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.StudyPlan/ListStudentStudyPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanServer).ListStudentStudyPlan(ctx, req.(*ListStudentStudyPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyPlan_ListToDoItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListToDoItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanServer).ListToDoItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.StudyPlan/ListToDoItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanServer).ListToDoItem(ctx, req.(*ListToDoItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyPlan_ListStudentStudyPlanItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStudentStudyPlanItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanServer).ListStudentStudyPlanItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.StudyPlan/ListStudentStudyPlanItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanServer).ListStudentStudyPlanItem(ctx, req.(*ListStudentStudyPlanItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyPlan_ListByCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListByCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanServer).ListByCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.StudyPlan/ListByCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanServer).ListByCourse(ctx, req.(*ListByCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyPlan_RetrieveStudyPlanIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveStudyPlanIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanServer).RetrieveStudyPlanIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.StudyPlan/RetrieveStudyPlanIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanServer).RetrieveStudyPlanIdentity(ctx, req.(*RetrieveStudyPlanIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyPlan_ListToDoItemStructuredBookTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListToDoItemStructuredBookTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanServer).ListToDoItemStructuredBookTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.StudyPlan/ListToDoItemStructuredBookTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanServer).ListToDoItemStructuredBookTree(ctx, req.(*ListToDoItemStructuredBookTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyPlan_ListAllocateTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllocateTeacherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanServer).ListAllocateTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.StudyPlan/ListAllocateTeacher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanServer).ListAllocateTeacher(ctx, req.(*ListAllocateTeacherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudyPlan_RetrieveAllocateMarker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveAllocateMarkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudyPlanServer).RetrieveAllocateMarker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.StudyPlan/RetrieveAllocateMarker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudyPlanServer).RetrieveAllocateMarker(ctx, req.(*RetrieveAllocateMarkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StudyPlan_serviceDesc = grpc.ServiceDesc{
	ServiceName: "syllabus.v1.StudyPlan",
	HandlerType: (*StudyPlanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertMasterInfo",
			Handler:    _StudyPlan_UpsertMasterInfo_Handler,
		},
		{
			MethodName: "UpsertIndividual",
			Handler:    _StudyPlan_UpsertIndividual_Handler,
		},
		{
			MethodName: "UpdateStudentLearningItemTime",
			Handler:    _StudyPlan_UpdateStudentLearningItemTime_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _StudyPlan_Delete_Handler,
		},
		{
			MethodName: "BulkUpdateStudyPlanItemSchoolDate",
			Handler:    _StudyPlan_BulkUpdateStudyPlanItemSchoolDate_Handler,
		},
		{
			MethodName: "BulkUpdateStudyPlanItemStatus",
			Handler:    _StudyPlan_BulkUpdateStudyPlanItemStatus_Handler,
		},
		{
			MethodName: "InsertStudyPlan",
			Handler:    _StudyPlan_InsertStudyPlan_Handler,
		},
		{
			MethodName: "UpdateStudyPlan",
			Handler:    _StudyPlan_UpdateStudyPlan_Handler,
		},
		{
			MethodName: "UpdateStudyPlanItemsStartEndDate",
			Handler:    _StudyPlan_UpdateStudyPlanItemsStartEndDate_Handler,
		},
		{
			MethodName: "UpsertSchoolDate",
			Handler:    _StudyPlan_UpsertSchoolDate_Handler,
		},
		{
			MethodName: "UpsertAllocateMarker",
			Handler:    _StudyPlan_UpsertAllocateMarker_Handler,
		},
		{
			MethodName: "ImportStudyPlan",
			Handler:    _StudyPlan_ImportStudyPlan_Handler,
		},
		{
			MethodName: "ListStudentStudyPlan",
			Handler:    _StudyPlan_ListStudentStudyPlan_Handler,
		},
		{
			MethodName: "ListToDoItem",
			Handler:    _StudyPlan_ListToDoItem_Handler,
		},
		{
			MethodName: "ListStudentStudyPlanItem",
			Handler:    _StudyPlan_ListStudentStudyPlanItem_Handler,
		},
		{
			MethodName: "ListByCourse",
			Handler:    _StudyPlan_ListByCourse_Handler,
		},
		{
			MethodName: "RetrieveStudyPlanIdentity",
			Handler:    _StudyPlan_RetrieveStudyPlanIdentity_Handler,
		},
		{
			MethodName: "ListToDoItemStructuredBookTree",
			Handler:    _StudyPlan_ListToDoItemStructuredBookTree_Handler,
		},
		{
			MethodName: "ListAllocateTeacher",
			Handler:    _StudyPlan_ListAllocateTeacher_Handler,
		},
		{
			MethodName: "RetrieveAllocateMarker",
			Handler:    _StudyPlan_RetrieveAllocateMarker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "syllabus/v1/study_plan_service.proto",
}
