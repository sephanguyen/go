// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ExamLOClient is the client API for ExamLO service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExamLOClient interface {
	// InsertExamLO insert an examlo
	InsertExamLO(ctx context.Context, in *InsertExamLORequest, opts ...grpc.CallOption) (*InsertExamLOResponse, error)
	// UpdateExamLO update metadata of an examlo
	UpdateExamLO(ctx context.Context, in *UpdateExamLORequest, opts ...grpc.CallOption) (*UpdateExamLOResponse, error)
	ListExamLO(ctx context.Context, in *ListExamLORequest, opts ...grpc.CallOption) (*ListExamLOResponse, error)
	ListHighestResultExamLOSubmission(ctx context.Context, in *ListHighestResultExamLOSubmissionRequest, opts ...grpc.CallOption) (*ListHighestResultExamLOSubmissionResponse, error)
	ListExamLOSubmission(ctx context.Context, in *ListExamLOSubmissionRequest, opts ...grpc.CallOption) (*ListExamLOSubmissionResponse, error)
	ListExamLOSubmissionScore(ctx context.Context, in *ListExamLOSubmissionScoreRequest, opts ...grpc.CallOption) (*ListExamLOSubmissionScoreResponse, error)
	ListExamLOSubmissionResult(ctx context.Context, in *ListExamLOSubmissionResultRequest, opts ...grpc.CallOption) (*ListExamLOSubmissionResultResponse, error)
	GradeAManualGradingExamSubmission(ctx context.Context, in *GradeAManualGradingExamSubmissionRequest, opts ...grpc.CallOption) (*GradeAManualGradingExamSubmissionResponse, error)
	DeleteExamLOSubmission(ctx context.Context, in *DeleteExamLOSubmissionRequest, opts ...grpc.CallOption) (*DeleteExamLOSubmissionResponse, error)
	UpsertGradeBookSetting(ctx context.Context, in *UpsertGradeBookSettingRequest, opts ...grpc.CallOption) (*UpsertGradeBookSettingResponse, error)
	BulkApproveRejectSubmission(ctx context.Context, in *BulkApproveRejectSubmissionRequest, opts ...grpc.CallOption) (*BulkApproveRejectSubmissionResponse, error)
	RetrieveMetadataTaggingResult(ctx context.Context, in *RetrieveMetadataTaggingResultRequest, opts ...grpc.CallOption) (*RetrieveMetadataTaggingResultResponse, error)
}

type examLOClient struct {
	cc grpc.ClientConnInterface
}

func NewExamLOClient(cc grpc.ClientConnInterface) ExamLOClient {
	return &examLOClient{cc}
}

func (c *examLOClient) InsertExamLO(ctx context.Context, in *InsertExamLORequest, opts ...grpc.CallOption) (*InsertExamLOResponse, error) {
	out := new(InsertExamLOResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.ExamLO/InsertExamLO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examLOClient) UpdateExamLO(ctx context.Context, in *UpdateExamLORequest, opts ...grpc.CallOption) (*UpdateExamLOResponse, error) {
	out := new(UpdateExamLOResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.ExamLO/UpdateExamLO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examLOClient) ListExamLO(ctx context.Context, in *ListExamLORequest, opts ...grpc.CallOption) (*ListExamLOResponse, error) {
	out := new(ListExamLOResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.ExamLO/ListExamLO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examLOClient) ListHighestResultExamLOSubmission(ctx context.Context, in *ListHighestResultExamLOSubmissionRequest, opts ...grpc.CallOption) (*ListHighestResultExamLOSubmissionResponse, error) {
	out := new(ListHighestResultExamLOSubmissionResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.ExamLO/ListHighestResultExamLOSubmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examLOClient) ListExamLOSubmission(ctx context.Context, in *ListExamLOSubmissionRequest, opts ...grpc.CallOption) (*ListExamLOSubmissionResponse, error) {
	out := new(ListExamLOSubmissionResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.ExamLO/ListExamLOSubmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examLOClient) ListExamLOSubmissionScore(ctx context.Context, in *ListExamLOSubmissionScoreRequest, opts ...grpc.CallOption) (*ListExamLOSubmissionScoreResponse, error) {
	out := new(ListExamLOSubmissionScoreResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.ExamLO/ListExamLOSubmissionScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examLOClient) ListExamLOSubmissionResult(ctx context.Context, in *ListExamLOSubmissionResultRequest, opts ...grpc.CallOption) (*ListExamLOSubmissionResultResponse, error) {
	out := new(ListExamLOSubmissionResultResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.ExamLO/ListExamLOSubmissionResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examLOClient) GradeAManualGradingExamSubmission(ctx context.Context, in *GradeAManualGradingExamSubmissionRequest, opts ...grpc.CallOption) (*GradeAManualGradingExamSubmissionResponse, error) {
	out := new(GradeAManualGradingExamSubmissionResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.ExamLO/GradeAManualGradingExamSubmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examLOClient) DeleteExamLOSubmission(ctx context.Context, in *DeleteExamLOSubmissionRequest, opts ...grpc.CallOption) (*DeleteExamLOSubmissionResponse, error) {
	out := new(DeleteExamLOSubmissionResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.ExamLO/DeleteExamLOSubmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examLOClient) UpsertGradeBookSetting(ctx context.Context, in *UpsertGradeBookSettingRequest, opts ...grpc.CallOption) (*UpsertGradeBookSettingResponse, error) {
	out := new(UpsertGradeBookSettingResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.ExamLO/UpsertGradeBookSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examLOClient) BulkApproveRejectSubmission(ctx context.Context, in *BulkApproveRejectSubmissionRequest, opts ...grpc.CallOption) (*BulkApproveRejectSubmissionResponse, error) {
	out := new(BulkApproveRejectSubmissionResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.ExamLO/BulkApproveRejectSubmission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *examLOClient) RetrieveMetadataTaggingResult(ctx context.Context, in *RetrieveMetadataTaggingResultRequest, opts ...grpc.CallOption) (*RetrieveMetadataTaggingResultResponse, error) {
	out := new(RetrieveMetadataTaggingResultResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.ExamLO/RetrieveMetadataTaggingResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExamLOServer is the server API for ExamLO service.
// All implementations should embed UnimplementedExamLOServer
// for forward compatibility
type ExamLOServer interface {
	// InsertExamLO insert an examlo
	InsertExamLO(context.Context, *InsertExamLORequest) (*InsertExamLOResponse, error)
	// UpdateExamLO update metadata of an examlo
	UpdateExamLO(context.Context, *UpdateExamLORequest) (*UpdateExamLOResponse, error)
	ListExamLO(context.Context, *ListExamLORequest) (*ListExamLOResponse, error)
	ListHighestResultExamLOSubmission(context.Context, *ListHighestResultExamLOSubmissionRequest) (*ListHighestResultExamLOSubmissionResponse, error)
	ListExamLOSubmission(context.Context, *ListExamLOSubmissionRequest) (*ListExamLOSubmissionResponse, error)
	ListExamLOSubmissionScore(context.Context, *ListExamLOSubmissionScoreRequest) (*ListExamLOSubmissionScoreResponse, error)
	ListExamLOSubmissionResult(context.Context, *ListExamLOSubmissionResultRequest) (*ListExamLOSubmissionResultResponse, error)
	GradeAManualGradingExamSubmission(context.Context, *GradeAManualGradingExamSubmissionRequest) (*GradeAManualGradingExamSubmissionResponse, error)
	DeleteExamLOSubmission(context.Context, *DeleteExamLOSubmissionRequest) (*DeleteExamLOSubmissionResponse, error)
	UpsertGradeBookSetting(context.Context, *UpsertGradeBookSettingRequest) (*UpsertGradeBookSettingResponse, error)
	BulkApproveRejectSubmission(context.Context, *BulkApproveRejectSubmissionRequest) (*BulkApproveRejectSubmissionResponse, error)
	RetrieveMetadataTaggingResult(context.Context, *RetrieveMetadataTaggingResultRequest) (*RetrieveMetadataTaggingResultResponse, error)
}

// UnimplementedExamLOServer should be embedded to have forward compatible implementations.
type UnimplementedExamLOServer struct {
}

func (UnimplementedExamLOServer) InsertExamLO(context.Context, *InsertExamLORequest) (*InsertExamLOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertExamLO not implemented")
}
func (UnimplementedExamLOServer) UpdateExamLO(context.Context, *UpdateExamLORequest) (*UpdateExamLOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExamLO not implemented")
}
func (UnimplementedExamLOServer) ListExamLO(context.Context, *ListExamLORequest) (*ListExamLOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExamLO not implemented")
}
func (UnimplementedExamLOServer) ListHighestResultExamLOSubmission(context.Context, *ListHighestResultExamLOSubmissionRequest) (*ListHighestResultExamLOSubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHighestResultExamLOSubmission not implemented")
}
func (UnimplementedExamLOServer) ListExamLOSubmission(context.Context, *ListExamLOSubmissionRequest) (*ListExamLOSubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExamLOSubmission not implemented")
}
func (UnimplementedExamLOServer) ListExamLOSubmissionScore(context.Context, *ListExamLOSubmissionScoreRequest) (*ListExamLOSubmissionScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExamLOSubmissionScore not implemented")
}
func (UnimplementedExamLOServer) ListExamLOSubmissionResult(context.Context, *ListExamLOSubmissionResultRequest) (*ListExamLOSubmissionResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExamLOSubmissionResult not implemented")
}
func (UnimplementedExamLOServer) GradeAManualGradingExamSubmission(context.Context, *GradeAManualGradingExamSubmissionRequest) (*GradeAManualGradingExamSubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GradeAManualGradingExamSubmission not implemented")
}
func (UnimplementedExamLOServer) DeleteExamLOSubmission(context.Context, *DeleteExamLOSubmissionRequest) (*DeleteExamLOSubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExamLOSubmission not implemented")
}
func (UnimplementedExamLOServer) UpsertGradeBookSetting(context.Context, *UpsertGradeBookSettingRequest) (*UpsertGradeBookSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertGradeBookSetting not implemented")
}
func (UnimplementedExamLOServer) BulkApproveRejectSubmission(context.Context, *BulkApproveRejectSubmissionRequest) (*BulkApproveRejectSubmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkApproveRejectSubmission not implemented")
}
func (UnimplementedExamLOServer) RetrieveMetadataTaggingResult(context.Context, *RetrieveMetadataTaggingResultRequest) (*RetrieveMetadataTaggingResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveMetadataTaggingResult not implemented")
}

// UnsafeExamLOServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExamLOServer will
// result in compilation errors.
type UnsafeExamLOServer interface {
	mustEmbedUnimplementedExamLOServer()
}

func RegisterExamLOServer(s grpc.ServiceRegistrar, srv ExamLOServer) {
	s.RegisterService(&_ExamLO_serviceDesc, srv)
}

func _ExamLO_InsertExamLO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertExamLORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamLOServer).InsertExamLO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.ExamLO/InsertExamLO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamLOServer).InsertExamLO(ctx, req.(*InsertExamLORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamLO_UpdateExamLO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExamLORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamLOServer).UpdateExamLO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.ExamLO/UpdateExamLO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamLOServer).UpdateExamLO(ctx, req.(*UpdateExamLORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamLO_ListExamLO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExamLORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamLOServer).ListExamLO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.ExamLO/ListExamLO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamLOServer).ListExamLO(ctx, req.(*ListExamLORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamLO_ListHighestResultExamLOSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHighestResultExamLOSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamLOServer).ListHighestResultExamLOSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.ExamLO/ListHighestResultExamLOSubmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamLOServer).ListHighestResultExamLOSubmission(ctx, req.(*ListHighestResultExamLOSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamLO_ListExamLOSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExamLOSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamLOServer).ListExamLOSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.ExamLO/ListExamLOSubmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamLOServer).ListExamLOSubmission(ctx, req.(*ListExamLOSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamLO_ListExamLOSubmissionScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExamLOSubmissionScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamLOServer).ListExamLOSubmissionScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.ExamLO/ListExamLOSubmissionScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamLOServer).ListExamLOSubmissionScore(ctx, req.(*ListExamLOSubmissionScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamLO_ListExamLOSubmissionResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExamLOSubmissionResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamLOServer).ListExamLOSubmissionResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.ExamLO/ListExamLOSubmissionResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamLOServer).ListExamLOSubmissionResult(ctx, req.(*ListExamLOSubmissionResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamLO_GradeAManualGradingExamSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GradeAManualGradingExamSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamLOServer).GradeAManualGradingExamSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.ExamLO/GradeAManualGradingExamSubmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamLOServer).GradeAManualGradingExamSubmission(ctx, req.(*GradeAManualGradingExamSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamLO_DeleteExamLOSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExamLOSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamLOServer).DeleteExamLOSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.ExamLO/DeleteExamLOSubmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamLOServer).DeleteExamLOSubmission(ctx, req.(*DeleteExamLOSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamLO_UpsertGradeBookSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertGradeBookSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamLOServer).UpsertGradeBookSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.ExamLO/UpsertGradeBookSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamLOServer).UpsertGradeBookSetting(ctx, req.(*UpsertGradeBookSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamLO_BulkApproveRejectSubmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkApproveRejectSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamLOServer).BulkApproveRejectSubmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.ExamLO/BulkApproveRejectSubmission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamLOServer).BulkApproveRejectSubmission(ctx, req.(*BulkApproveRejectSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExamLO_RetrieveMetadataTaggingResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveMetadataTaggingResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExamLOServer).RetrieveMetadataTaggingResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.ExamLO/RetrieveMetadataTaggingResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExamLOServer).RetrieveMetadataTaggingResult(ctx, req.(*RetrieveMetadataTaggingResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExamLO_serviceDesc = grpc.ServiceDesc{
	ServiceName: "syllabus.v1.ExamLO",
	HandlerType: (*ExamLOServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertExamLO",
			Handler:    _ExamLO_InsertExamLO_Handler,
		},
		{
			MethodName: "UpdateExamLO",
			Handler:    _ExamLO_UpdateExamLO_Handler,
		},
		{
			MethodName: "ListExamLO",
			Handler:    _ExamLO_ListExamLO_Handler,
		},
		{
			MethodName: "ListHighestResultExamLOSubmission",
			Handler:    _ExamLO_ListHighestResultExamLOSubmission_Handler,
		},
		{
			MethodName: "ListExamLOSubmission",
			Handler:    _ExamLO_ListExamLOSubmission_Handler,
		},
		{
			MethodName: "ListExamLOSubmissionScore",
			Handler:    _ExamLO_ListExamLOSubmissionScore_Handler,
		},
		{
			MethodName: "ListExamLOSubmissionResult",
			Handler:    _ExamLO_ListExamLOSubmissionResult_Handler,
		},
		{
			MethodName: "GradeAManualGradingExamSubmission",
			Handler:    _ExamLO_GradeAManualGradingExamSubmission_Handler,
		},
		{
			MethodName: "DeleteExamLOSubmission",
			Handler:    _ExamLO_DeleteExamLOSubmission_Handler,
		},
		{
			MethodName: "UpsertGradeBookSetting",
			Handler:    _ExamLO_UpsertGradeBookSetting_Handler,
		},
		{
			MethodName: "BulkApproveRejectSubmission",
			Handler:    _ExamLO_BulkApproveRejectSubmission_Handler,
		},
		{
			MethodName: "RetrieveMetadataTaggingResult",
			Handler:    _ExamLO_RetrieveMetadataTaggingResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "syllabus/v1/exam_lo_service.proto",
}
