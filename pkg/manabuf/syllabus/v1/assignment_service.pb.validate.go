// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: syllabus/v1/assignment_service.proto

package sspb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AssignmentBase with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AssignmentBase) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignmentBase with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AssignmentBaseMultiError,
// or nil if none found.
func (m *AssignmentBase) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignmentBase) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssignmentBaseValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssignmentBaseValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssignmentBaseValidationError{
				field:  "Base",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	// no validation rules for Instruction

	// no validation rules for MaxGrade

	// no validation rules for IsRequiredGrade

	// no validation rules for AllowResubmission

	// no validation rules for RequireAttachment

	// no validation rules for AllowLateSubmission

	// no validation rules for RequireAssignmentNote

	// no validation rules for RequireVideoSubmission

	if len(errors) > 0 {
		return AssignmentBaseMultiError(errors)
	}

	return nil
}

// AssignmentBaseMultiError is an error wrapping multiple validation errors
// returned by AssignmentBase.ValidateAll() if the designated constraints
// aren't met.
type AssignmentBaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignmentBaseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignmentBaseMultiError) AllErrors() []error { return m }

// AssignmentBaseValidationError is the validation error returned by
// AssignmentBase.Validate if the designated constraints aren't met.
type AssignmentBaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignmentBaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignmentBaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignmentBaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignmentBaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignmentBaseValidationError) ErrorName() string { return "AssignmentBaseValidationError" }

// Error satisfies the builtin error interface
func (e AssignmentBaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignmentBase.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignmentBaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignmentBaseValidationError{}

// Validate checks the field values on InsertAssignmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InsertAssignmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InsertAssignmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InsertAssignmentRequestMultiError, or nil if none found.
func (m *InsertAssignmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InsertAssignmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAssignment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InsertAssignmentRequestValidationError{
					field:  "Assignment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InsertAssignmentRequestValidationError{
					field:  "Assignment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAssignment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InsertAssignmentRequestValidationError{
				field:  "Assignment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InsertAssignmentRequestMultiError(errors)
	}

	return nil
}

// InsertAssignmentRequestMultiError is an error wrapping multiple validation
// errors returned by InsertAssignmentRequest.ValidateAll() if the designated
// constraints aren't met.
type InsertAssignmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InsertAssignmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InsertAssignmentRequestMultiError) AllErrors() []error { return m }

// InsertAssignmentRequestValidationError is the validation error returned by
// InsertAssignmentRequest.Validate if the designated constraints aren't met.
type InsertAssignmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InsertAssignmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InsertAssignmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InsertAssignmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InsertAssignmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InsertAssignmentRequestValidationError) ErrorName() string {
	return "InsertAssignmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InsertAssignmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInsertAssignmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InsertAssignmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InsertAssignmentRequestValidationError{}

// Validate checks the field values on InsertAssignmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InsertAssignmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InsertAssignmentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InsertAssignmentResponseMultiError, or nil if none found.
func (m *InsertAssignmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InsertAssignmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LearningMaterialId

	if len(errors) > 0 {
		return InsertAssignmentResponseMultiError(errors)
	}

	return nil
}

// InsertAssignmentResponseMultiError is an error wrapping multiple validation
// errors returned by InsertAssignmentResponse.ValidateAll() if the designated
// constraints aren't met.
type InsertAssignmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InsertAssignmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InsertAssignmentResponseMultiError) AllErrors() []error { return m }

// InsertAssignmentResponseValidationError is the validation error returned by
// InsertAssignmentResponse.Validate if the designated constraints aren't met.
type InsertAssignmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InsertAssignmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InsertAssignmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InsertAssignmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InsertAssignmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InsertAssignmentResponseValidationError) ErrorName() string {
	return "InsertAssignmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InsertAssignmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInsertAssignmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InsertAssignmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InsertAssignmentResponseValidationError{}

// Validate checks the field values on UpdateAssignmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAssignmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAssignmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAssignmentRequestMultiError, or nil if none found.
func (m *UpdateAssignmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAssignmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAssignment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAssignmentRequestValidationError{
					field:  "Assignment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAssignmentRequestValidationError{
					field:  "Assignment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAssignment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAssignmentRequestValidationError{
				field:  "Assignment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAssignmentRequestMultiError(errors)
	}

	return nil
}

// UpdateAssignmentRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateAssignmentRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateAssignmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAssignmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAssignmentRequestMultiError) AllErrors() []error { return m }

// UpdateAssignmentRequestValidationError is the validation error returned by
// UpdateAssignmentRequest.Validate if the designated constraints aren't met.
type UpdateAssignmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAssignmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAssignmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAssignmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAssignmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAssignmentRequestValidationError) ErrorName() string {
	return "UpdateAssignmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAssignmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAssignmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAssignmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAssignmentRequestValidationError{}

// Validate checks the field values on UpdateAssignmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAssignmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAssignmentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAssignmentResponseMultiError, or nil if none found.
func (m *UpdateAssignmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAssignmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAssignmentResponseMultiError(errors)
	}

	return nil
}

// UpdateAssignmentResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateAssignmentResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateAssignmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAssignmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAssignmentResponseMultiError) AllErrors() []error { return m }

// UpdateAssignmentResponseValidationError is the validation error returned by
// UpdateAssignmentResponse.Validate if the designated constraints aren't met.
type UpdateAssignmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAssignmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAssignmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAssignmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAssignmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAssignmentResponseValidationError) ErrorName() string {
	return "UpdateAssignmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAssignmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAssignmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAssignmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAssignmentResponseValidationError{}

// Validate checks the field values on InsertAdhocAssignmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InsertAdhocAssignmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InsertAdhocAssignmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InsertAdhocAssignmentRequestMultiError, or nil if none found.
func (m *InsertAdhocAssignmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InsertAdhocAssignmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StudentId

	// no validation rules for CourseId

	// no validation rules for ChapterName

	// no validation rules for TopicName

	// no validation rules for BookName

	// no validation rules for StudyPlanName

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InsertAdhocAssignmentRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InsertAdhocAssignmentRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InsertAdhocAssignmentRequestValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InsertAdhocAssignmentRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InsertAdhocAssignmentRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InsertAdhocAssignmentRequestValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAssignment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InsertAdhocAssignmentRequestValidationError{
					field:  "Assignment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InsertAdhocAssignmentRequestValidationError{
					field:  "Assignment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAssignment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InsertAdhocAssignmentRequestValidationError{
				field:  "Assignment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InsertAdhocAssignmentRequestMultiError(errors)
	}

	return nil
}

// InsertAdhocAssignmentRequestMultiError is an error wrapping multiple
// validation errors returned by InsertAdhocAssignmentRequest.ValidateAll() if
// the designated constraints aren't met.
type InsertAdhocAssignmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InsertAdhocAssignmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InsertAdhocAssignmentRequestMultiError) AllErrors() []error { return m }

// InsertAdhocAssignmentRequestValidationError is the validation error returned
// by InsertAdhocAssignmentRequest.Validate if the designated constraints
// aren't met.
type InsertAdhocAssignmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InsertAdhocAssignmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InsertAdhocAssignmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InsertAdhocAssignmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InsertAdhocAssignmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InsertAdhocAssignmentRequestValidationError) ErrorName() string {
	return "InsertAdhocAssignmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InsertAdhocAssignmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInsertAdhocAssignmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InsertAdhocAssignmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InsertAdhocAssignmentRequestValidationError{}

// Validate checks the field values on InsertAdhocAssignmentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InsertAdhocAssignmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InsertAdhocAssignmentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// InsertAdhocAssignmentResponseMultiError, or nil if none found.
func (m *InsertAdhocAssignmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InsertAdhocAssignmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LearningMaterialId

	if len(errors) > 0 {
		return InsertAdhocAssignmentResponseMultiError(errors)
	}

	return nil
}

// InsertAdhocAssignmentResponseMultiError is an error wrapping multiple
// validation errors returned by InsertAdhocAssignmentResponse.ValidateAll()
// if the designated constraints aren't met.
type InsertAdhocAssignmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InsertAdhocAssignmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InsertAdhocAssignmentResponseMultiError) AllErrors() []error { return m }

// InsertAdhocAssignmentResponseValidationError is the validation error
// returned by InsertAdhocAssignmentResponse.Validate if the designated
// constraints aren't met.
type InsertAdhocAssignmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InsertAdhocAssignmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InsertAdhocAssignmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InsertAdhocAssignmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InsertAdhocAssignmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InsertAdhocAssignmentResponseValidationError) ErrorName() string {
	return "InsertAdhocAssignmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InsertAdhocAssignmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInsertAdhocAssignmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InsertAdhocAssignmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InsertAdhocAssignmentResponseValidationError{}

// Validate checks the field values on UpdateAdhocAssignmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAdhocAssignmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAdhocAssignmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAdhocAssignmentRequestMultiError, or nil if none found.
func (m *UpdateAdhocAssignmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAdhocAssignmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StudentId

	// no validation rules for CourseId

	// no validation rules for ChapterName

	// no validation rules for TopicName

	// no validation rules for BookName

	// no validation rules for StudyPlanName

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAdhocAssignmentRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAdhocAssignmentRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAdhocAssignmentRequestValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAdhocAssignmentRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAdhocAssignmentRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAdhocAssignmentRequestValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAssignment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAdhocAssignmentRequestValidationError{
					field:  "Assignment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAdhocAssignmentRequestValidationError{
					field:  "Assignment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAssignment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAdhocAssignmentRequestValidationError{
				field:  "Assignment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAdhocAssignmentRequestMultiError(errors)
	}

	return nil
}

// UpdateAdhocAssignmentRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateAdhocAssignmentRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateAdhocAssignmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAdhocAssignmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAdhocAssignmentRequestMultiError) AllErrors() []error { return m }

// UpdateAdhocAssignmentRequestValidationError is the validation error returned
// by UpdateAdhocAssignmentRequest.Validate if the designated constraints
// aren't met.
type UpdateAdhocAssignmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAdhocAssignmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAdhocAssignmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAdhocAssignmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAdhocAssignmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAdhocAssignmentRequestValidationError) ErrorName() string {
	return "UpdateAdhocAssignmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAdhocAssignmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAdhocAssignmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAdhocAssignmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAdhocAssignmentRequestValidationError{}

// Validate checks the field values on UpdateAdhocAssignmentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAdhocAssignmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAdhocAssignmentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateAdhocAssignmentResponseMultiError, or nil if none found.
func (m *UpdateAdhocAssignmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAdhocAssignmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAdhocAssignmentResponseMultiError(errors)
	}

	return nil
}

// UpdateAdhocAssignmentResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateAdhocAssignmentResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateAdhocAssignmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAdhocAssignmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAdhocAssignmentResponseMultiError) AllErrors() []error { return m }

// UpdateAdhocAssignmentResponseValidationError is the validation error
// returned by UpdateAdhocAssignmentResponse.Validate if the designated
// constraints aren't met.
type UpdateAdhocAssignmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAdhocAssignmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAdhocAssignmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAdhocAssignmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAdhocAssignmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAdhocAssignmentResponseValidationError) ErrorName() string {
	return "UpdateAdhocAssignmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAdhocAssignmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAdhocAssignmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAdhocAssignmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAdhocAssignmentResponseValidationError{}

// Validate checks the field values on ListAssignmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAssignmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAssignmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAssignmentRequestMultiError, or nil if none found.
func (m *ListAssignmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAssignmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListAssignmentRequestMultiError(errors)
	}

	return nil
}

// ListAssignmentRequestMultiError is an error wrapping multiple validation
// errors returned by ListAssignmentRequest.ValidateAll() if the designated
// constraints aren't met.
type ListAssignmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAssignmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAssignmentRequestMultiError) AllErrors() []error { return m }

// ListAssignmentRequestValidationError is the validation error returned by
// ListAssignmentRequest.Validate if the designated constraints aren't met.
type ListAssignmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAssignmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAssignmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAssignmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAssignmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAssignmentRequestValidationError) ErrorName() string {
	return "ListAssignmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAssignmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAssignmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAssignmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAssignmentRequestValidationError{}

// Validate checks the field values on ListAssignmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAssignmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAssignmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAssignmentResponseMultiError, or nil if none found.
func (m *ListAssignmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAssignmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAssignments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAssignmentResponseValidationError{
						field:  fmt.Sprintf("Assignments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAssignmentResponseValidationError{
						field:  fmt.Sprintf("Assignments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAssignmentResponseValidationError{
					field:  fmt.Sprintf("Assignments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAssignmentResponseMultiError(errors)
	}

	return nil
}

// ListAssignmentResponseMultiError is an error wrapping multiple validation
// errors returned by ListAssignmentResponse.ValidateAll() if the designated
// constraints aren't met.
type ListAssignmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAssignmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAssignmentResponseMultiError) AllErrors() []error { return m }

// ListAssignmentResponseValidationError is the validation error returned by
// ListAssignmentResponse.Validate if the designated constraints aren't met.
type ListAssignmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAssignmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAssignmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAssignmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAssignmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAssignmentResponseValidationError) ErrorName() string {
	return "ListAssignmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAssignmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAssignmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAssignmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAssignmentResponseValidationError{}

// Validate checks the field values on SubmitAssignmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubmitAssignmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmitAssignmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubmitAssignmentRequestMultiError, or nil if none found.
func (m *SubmitAssignmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitAssignmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSubmission()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubmitAssignmentRequestValidationError{
					field:  "Submission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubmitAssignmentRequestValidationError{
					field:  "Submission",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubmission()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubmitAssignmentRequestValidationError{
				field:  "Submission",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubmitAssignmentRequestMultiError(errors)
	}

	return nil
}

// SubmitAssignmentRequestMultiError is an error wrapping multiple validation
// errors returned by SubmitAssignmentRequest.ValidateAll() if the designated
// constraints aren't met.
type SubmitAssignmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitAssignmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitAssignmentRequestMultiError) AllErrors() []error { return m }

// SubmitAssignmentRequestValidationError is the validation error returned by
// SubmitAssignmentRequest.Validate if the designated constraints aren't met.
type SubmitAssignmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitAssignmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitAssignmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitAssignmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitAssignmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitAssignmentRequestValidationError) ErrorName() string {
	return "SubmitAssignmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitAssignmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitAssignmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitAssignmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitAssignmentRequestValidationError{}

// Validate checks the field values on SubmitAssignmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubmitAssignmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmitAssignmentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubmitAssignmentResponseMultiError, or nil if none found.
func (m *SubmitAssignmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitAssignmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubmissionId

	if len(errors) > 0 {
		return SubmitAssignmentResponseMultiError(errors)
	}

	return nil
}

// SubmitAssignmentResponseMultiError is an error wrapping multiple validation
// errors returned by SubmitAssignmentResponse.ValidateAll() if the designated
// constraints aren't met.
type SubmitAssignmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitAssignmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitAssignmentResponseMultiError) AllErrors() []error { return m }

// SubmitAssignmentResponseValidationError is the validation error returned by
// SubmitAssignmentResponse.Validate if the designated constraints aren't met.
type SubmitAssignmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitAssignmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitAssignmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitAssignmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitAssignmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitAssignmentResponseValidationError) ErrorName() string {
	return "SubmitAssignmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitAssignmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitAssignmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitAssignmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitAssignmentResponseValidationError{}
