// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// QuizClient is the client API for Quiz service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuizClient interface {
	CreateQuizTestV2(ctx context.Context, in *CreateQuizTestV2Request, opts ...grpc.CallOption) (*CreateQuizTestV2Response, error)
	CreateRetryQuizTestV2(ctx context.Context, in *CreateRetryQuizTestV2Request, opts ...grpc.CallOption) (*CreateRetryQuizTestV2Response, error)
	RetrieveQuizTestsV2(ctx context.Context, in *RetrieveQuizTestV2Request, opts ...grpc.CallOption) (*RetrieveQuizTestV2Response, error)
	UpsertFlashcardContent(ctx context.Context, in *UpsertFlashcardContentRequest, opts ...grpc.CallOption) (*UpsertFlashcardContentResponse, error)
	CheckQuizCorrectness(ctx context.Context, in *CheckQuizCorrectnessRequest, opts ...grpc.CallOption) (*CheckQuizCorrectnessResponse, error)
}

type quizClient struct {
	cc grpc.ClientConnInterface
}

func NewQuizClient(cc grpc.ClientConnInterface) QuizClient {
	return &quizClient{cc}
}

func (c *quizClient) CreateQuizTestV2(ctx context.Context, in *CreateQuizTestV2Request, opts ...grpc.CallOption) (*CreateQuizTestV2Response, error) {
	out := new(CreateQuizTestV2Response)
	err := c.cc.Invoke(ctx, "/syllabus.v1.Quiz/CreateQuizTestV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizClient) CreateRetryQuizTestV2(ctx context.Context, in *CreateRetryQuizTestV2Request, opts ...grpc.CallOption) (*CreateRetryQuizTestV2Response, error) {
	out := new(CreateRetryQuizTestV2Response)
	err := c.cc.Invoke(ctx, "/syllabus.v1.Quiz/CreateRetryQuizTestV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizClient) RetrieveQuizTestsV2(ctx context.Context, in *RetrieveQuizTestV2Request, opts ...grpc.CallOption) (*RetrieveQuizTestV2Response, error) {
	out := new(RetrieveQuizTestV2Response)
	err := c.cc.Invoke(ctx, "/syllabus.v1.Quiz/RetrieveQuizTestsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizClient) UpsertFlashcardContent(ctx context.Context, in *UpsertFlashcardContentRequest, opts ...grpc.CallOption) (*UpsertFlashcardContentResponse, error) {
	out := new(UpsertFlashcardContentResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.Quiz/UpsertFlashcardContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quizClient) CheckQuizCorrectness(ctx context.Context, in *CheckQuizCorrectnessRequest, opts ...grpc.CallOption) (*CheckQuizCorrectnessResponse, error) {
	out := new(CheckQuizCorrectnessResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.Quiz/CheckQuizCorrectness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuizServer is the server API for Quiz service.
// All implementations should embed UnimplementedQuizServer
// for forward compatibility
type QuizServer interface {
	CreateQuizTestV2(context.Context, *CreateQuizTestV2Request) (*CreateQuizTestV2Response, error)
	CreateRetryQuizTestV2(context.Context, *CreateRetryQuizTestV2Request) (*CreateRetryQuizTestV2Response, error)
	RetrieveQuizTestsV2(context.Context, *RetrieveQuizTestV2Request) (*RetrieveQuizTestV2Response, error)
	UpsertFlashcardContent(context.Context, *UpsertFlashcardContentRequest) (*UpsertFlashcardContentResponse, error)
	CheckQuizCorrectness(context.Context, *CheckQuizCorrectnessRequest) (*CheckQuizCorrectnessResponse, error)
}

// UnimplementedQuizServer should be embedded to have forward compatible implementations.
type UnimplementedQuizServer struct {
}

func (UnimplementedQuizServer) CreateQuizTestV2(context.Context, *CreateQuizTestV2Request) (*CreateQuizTestV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuizTestV2 not implemented")
}
func (UnimplementedQuizServer) CreateRetryQuizTestV2(context.Context, *CreateRetryQuizTestV2Request) (*CreateRetryQuizTestV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRetryQuizTestV2 not implemented")
}
func (UnimplementedQuizServer) RetrieveQuizTestsV2(context.Context, *RetrieveQuizTestV2Request) (*RetrieveQuizTestV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveQuizTestsV2 not implemented")
}
func (UnimplementedQuizServer) UpsertFlashcardContent(context.Context, *UpsertFlashcardContentRequest) (*UpsertFlashcardContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertFlashcardContent not implemented")
}
func (UnimplementedQuizServer) CheckQuizCorrectness(context.Context, *CheckQuizCorrectnessRequest) (*CheckQuizCorrectnessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckQuizCorrectness not implemented")
}

// UnsafeQuizServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuizServer will
// result in compilation errors.
type UnsafeQuizServer interface {
	mustEmbedUnimplementedQuizServer()
}

func RegisterQuizServer(s grpc.ServiceRegistrar, srv QuizServer) {
	s.RegisterService(&_Quiz_serviceDesc, srv)
}

func _Quiz_CreateQuizTestV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuizTestV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServer).CreateQuizTestV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.Quiz/CreateQuizTestV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServer).CreateQuizTestV2(ctx, req.(*CreateQuizTestV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quiz_CreateRetryQuizTestV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRetryQuizTestV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServer).CreateRetryQuizTestV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.Quiz/CreateRetryQuizTestV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServer).CreateRetryQuizTestV2(ctx, req.(*CreateRetryQuizTestV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quiz_RetrieveQuizTestsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveQuizTestV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServer).RetrieveQuizTestsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.Quiz/RetrieveQuizTestsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServer).RetrieveQuizTestsV2(ctx, req.(*RetrieveQuizTestV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quiz_UpsertFlashcardContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertFlashcardContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServer).UpsertFlashcardContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.Quiz/UpsertFlashcardContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServer).UpsertFlashcardContent(ctx, req.(*UpsertFlashcardContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Quiz_CheckQuizCorrectness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckQuizCorrectnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuizServer).CheckQuizCorrectness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.Quiz/CheckQuizCorrectness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuizServer).CheckQuizCorrectness(ctx, req.(*CheckQuizCorrectnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Quiz_serviceDesc = grpc.ServiceDesc{
	ServiceName: "syllabus.v1.Quiz",
	HandlerType: (*QuizServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQuizTestV2",
			Handler:    _Quiz_CreateQuizTestV2_Handler,
		},
		{
			MethodName: "CreateRetryQuizTestV2",
			Handler:    _Quiz_CreateRetryQuizTestV2_Handler,
		},
		{
			MethodName: "RetrieveQuizTestsV2",
			Handler:    _Quiz_RetrieveQuizTestsV2_Handler,
		},
		{
			MethodName: "UpsertFlashcardContent",
			Handler:    _Quiz_UpsertFlashcardContent_Handler,
		},
		{
			MethodName: "CheckQuizCorrectness",
			Handler:    _Quiz_CheckQuizCorrectness_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "syllabus/v1/quiz_service.proto",
}
