// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: syllabus/v1/learning_history_data_sync.proto

package sspb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DownloadMappingFileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DownloadMappingFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DownloadMappingFileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DownloadMappingFileRequestMultiError, or nil if none found.
func (m *DownloadMappingFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadMappingFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DownloadMappingFileRequestMultiError(errors)
	}

	return nil
}

// DownloadMappingFileRequestMultiError is an error wrapping multiple
// validation errors returned by DownloadMappingFileRequest.ValidateAll() if
// the designated constraints aren't met.
type DownloadMappingFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadMappingFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadMappingFileRequestMultiError) AllErrors() []error { return m }

// DownloadMappingFileRequestValidationError is the validation error returned
// by DownloadMappingFileRequest.Validate if the designated constraints aren't met.
type DownloadMappingFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadMappingFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadMappingFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadMappingFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadMappingFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadMappingFileRequestValidationError) ErrorName() string {
	return "DownloadMappingFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadMappingFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadMappingFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadMappingFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadMappingFileRequestValidationError{}

// Validate checks the field values on DownloadMappingFileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DownloadMappingFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DownloadMappingFileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DownloadMappingFileResponseMultiError, or nil if none found.
func (m *DownloadMappingFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DownloadMappingFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MappingCourseIdUrl

	// no validation rules for MappingExamLoIdUrl

	// no validation rules for MappingQuestionTagUrl

	// no validation rules for FailedSyncEmailRecipientsUrl

	if len(errors) > 0 {
		return DownloadMappingFileResponseMultiError(errors)
	}

	return nil
}

// DownloadMappingFileResponseMultiError is an error wrapping multiple
// validation errors returned by DownloadMappingFileResponse.ValidateAll() if
// the designated constraints aren't met.
type DownloadMappingFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DownloadMappingFileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DownloadMappingFileResponseMultiError) AllErrors() []error { return m }

// DownloadMappingFileResponseValidationError is the validation error returned
// by DownloadMappingFileResponse.Validate if the designated constraints
// aren't met.
type DownloadMappingFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DownloadMappingFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DownloadMappingFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DownloadMappingFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DownloadMappingFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DownloadMappingFileResponseValidationError) ErrorName() string {
	return "DownloadMappingFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DownloadMappingFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDownloadMappingFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DownloadMappingFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DownloadMappingFileResponseValidationError{}

// Validate checks the field values on UploadMappingFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadMappingFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadMappingFileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadMappingFileRequestMultiError, or nil if none found.
func (m *UploadMappingFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadMappingFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MappingCourseId

	// no validation rules for MappingExamLoId

	// no validation rules for MappingQuestionTag

	// no validation rules for FailedSyncEmailRecipients

	if len(errors) > 0 {
		return UploadMappingFileRequestMultiError(errors)
	}

	return nil
}

// UploadMappingFileRequestMultiError is an error wrapping multiple validation
// errors returned by UploadMappingFileRequest.ValidateAll() if the designated
// constraints aren't met.
type UploadMappingFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadMappingFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadMappingFileRequestMultiError) AllErrors() []error { return m }

// UploadMappingFileRequestValidationError is the validation error returned by
// UploadMappingFileRequest.Validate if the designated constraints aren't met.
type UploadMappingFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadMappingFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadMappingFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadMappingFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadMappingFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadMappingFileRequestValidationError) ErrorName() string {
	return "UploadMappingFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UploadMappingFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadMappingFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadMappingFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadMappingFileRequestValidationError{}

// Validate checks the field values on UploadMappingFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UploadMappingFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UploadMappingFileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UploadMappingFileResponseMultiError, or nil if none found.
func (m *UploadMappingFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UploadMappingFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UploadMappingFileResponseMultiError(errors)
	}

	return nil
}

// UploadMappingFileResponseMultiError is an error wrapping multiple validation
// errors returned by UploadMappingFileResponse.ValidateAll() if the
// designated constraints aren't met.
type UploadMappingFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UploadMappingFileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UploadMappingFileResponseMultiError) AllErrors() []error { return m }

// UploadMappingFileResponseValidationError is the validation error returned by
// UploadMappingFileResponse.Validate if the designated constraints aren't met.
type UploadMappingFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UploadMappingFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UploadMappingFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UploadMappingFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UploadMappingFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UploadMappingFileResponseValidationError) ErrorName() string {
	return "UploadMappingFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UploadMappingFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUploadMappingFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UploadMappingFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UploadMappingFileResponseValidationError{}
