// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ItemsBankServiceClient is the client API for ItemsBankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemsBankServiceClient interface {
	ImportItems(ctx context.Context, in *ImportItemsRequest, opts ...grpc.CallOption) (*ImportItemsResponse, error)
	GenerateItemBankResumableUploadURL(ctx context.Context, in *ItemBankResumableUploadURLRequest, opts ...grpc.CallOption) (*ItemBankResumableUploadURLResponse, error)
	GenerateListItemBankResumableUploadURL(ctx context.Context, in *ListItemBankResumableUploadURLRequest, opts ...grpc.CallOption) (*ListItemBankResumableUploadURLResponse, error)
	UpsertMedia(ctx context.Context, in *UpsertMediaRequest, opts ...grpc.CallOption) (*UpsertMediaResponse, error)
	DeleteMedia(ctx context.Context, in *DeleteMediaRequest, opts ...grpc.CallOption) (*DeleteMediaResponse, error)
	GetItemsByLM(ctx context.Context, in *GetItemsByLMRequest, opts ...grpc.CallOption) (*GetItemsByLMResponse, error)
}

type itemsBankServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewItemsBankServiceClient(cc grpc.ClientConnInterface) ItemsBankServiceClient {
	return &itemsBankServiceClient{cc}
}

func (c *itemsBankServiceClient) ImportItems(ctx context.Context, in *ImportItemsRequest, opts ...grpc.CallOption) (*ImportItemsResponse, error) {
	out := new(ImportItemsResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.ItemsBankService/ImportItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsBankServiceClient) GenerateItemBankResumableUploadURL(ctx context.Context, in *ItemBankResumableUploadURLRequest, opts ...grpc.CallOption) (*ItemBankResumableUploadURLResponse, error) {
	out := new(ItemBankResumableUploadURLResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.ItemsBankService/GenerateItemBankResumableUploadURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsBankServiceClient) GenerateListItemBankResumableUploadURL(ctx context.Context, in *ListItemBankResumableUploadURLRequest, opts ...grpc.CallOption) (*ListItemBankResumableUploadURLResponse, error) {
	out := new(ListItemBankResumableUploadURLResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.ItemsBankService/GenerateListItemBankResumableUploadURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsBankServiceClient) UpsertMedia(ctx context.Context, in *UpsertMediaRequest, opts ...grpc.CallOption) (*UpsertMediaResponse, error) {
	out := new(UpsertMediaResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.ItemsBankService/UpsertMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsBankServiceClient) DeleteMedia(ctx context.Context, in *DeleteMediaRequest, opts ...grpc.CallOption) (*DeleteMediaResponse, error) {
	out := new(DeleteMediaResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.ItemsBankService/DeleteMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemsBankServiceClient) GetItemsByLM(ctx context.Context, in *GetItemsByLMRequest, opts ...grpc.CallOption) (*GetItemsByLMResponse, error) {
	out := new(GetItemsByLMResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.ItemsBankService/GetItemsByLM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemsBankServiceServer is the server API for ItemsBankService service.
// All implementations should embed UnimplementedItemsBankServiceServer
// for forward compatibility
type ItemsBankServiceServer interface {
	ImportItems(context.Context, *ImportItemsRequest) (*ImportItemsResponse, error)
	GenerateItemBankResumableUploadURL(context.Context, *ItemBankResumableUploadURLRequest) (*ItemBankResumableUploadURLResponse, error)
	GenerateListItemBankResumableUploadURL(context.Context, *ListItemBankResumableUploadURLRequest) (*ListItemBankResumableUploadURLResponse, error)
	UpsertMedia(context.Context, *UpsertMediaRequest) (*UpsertMediaResponse, error)
	DeleteMedia(context.Context, *DeleteMediaRequest) (*DeleteMediaResponse, error)
	GetItemsByLM(context.Context, *GetItemsByLMRequest) (*GetItemsByLMResponse, error)
}

// UnimplementedItemsBankServiceServer should be embedded to have forward compatible implementations.
type UnimplementedItemsBankServiceServer struct {
}

func (UnimplementedItemsBankServiceServer) ImportItems(context.Context, *ImportItemsRequest) (*ImportItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportItems not implemented")
}
func (UnimplementedItemsBankServiceServer) GenerateItemBankResumableUploadURL(context.Context, *ItemBankResumableUploadURLRequest) (*ItemBankResumableUploadURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateItemBankResumableUploadURL not implemented")
}
func (UnimplementedItemsBankServiceServer) GenerateListItemBankResumableUploadURL(context.Context, *ListItemBankResumableUploadURLRequest) (*ListItemBankResumableUploadURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateListItemBankResumableUploadURL not implemented")
}
func (UnimplementedItemsBankServiceServer) UpsertMedia(context.Context, *UpsertMediaRequest) (*UpsertMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertMedia not implemented")
}
func (UnimplementedItemsBankServiceServer) DeleteMedia(context.Context, *DeleteMediaRequest) (*DeleteMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMedia not implemented")
}
func (UnimplementedItemsBankServiceServer) GetItemsByLM(context.Context, *GetItemsByLMRequest) (*GetItemsByLMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemsByLM not implemented")
}

// UnsafeItemsBankServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemsBankServiceServer will
// result in compilation errors.
type UnsafeItemsBankServiceServer interface {
	mustEmbedUnimplementedItemsBankServiceServer()
}

func RegisterItemsBankServiceServer(s grpc.ServiceRegistrar, srv ItemsBankServiceServer) {
	s.RegisterService(&_ItemsBankService_serviceDesc, srv)
}

func _ItemsBankService_ImportItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsBankServiceServer).ImportItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.ItemsBankService/ImportItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsBankServiceServer).ImportItems(ctx, req.(*ImportItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsBankService_GenerateItemBankResumableUploadURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemBankResumableUploadURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsBankServiceServer).GenerateItemBankResumableUploadURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.ItemsBankService/GenerateItemBankResumableUploadURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsBankServiceServer).GenerateItemBankResumableUploadURL(ctx, req.(*ItemBankResumableUploadURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsBankService_GenerateListItemBankResumableUploadURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListItemBankResumableUploadURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsBankServiceServer).GenerateListItemBankResumableUploadURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.ItemsBankService/GenerateListItemBankResumableUploadURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsBankServiceServer).GenerateListItemBankResumableUploadURL(ctx, req.(*ListItemBankResumableUploadURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsBankService_UpsertMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsBankServiceServer).UpsertMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.ItemsBankService/UpsertMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsBankServiceServer).UpsertMedia(ctx, req.(*UpsertMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsBankService_DeleteMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsBankServiceServer).DeleteMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.ItemsBankService/DeleteMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsBankServiceServer).DeleteMedia(ctx, req.(*DeleteMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemsBankService_GetItemsByLM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemsByLMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemsBankServiceServer).GetItemsByLM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.ItemsBankService/GetItemsByLM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemsBankServiceServer).GetItemsByLM(ctx, req.(*GetItemsByLMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ItemsBankService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "syllabus.v1.ItemsBankService",
	HandlerType: (*ItemsBankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportItems",
			Handler:    _ItemsBankService_ImportItems_Handler,
		},
		{
			MethodName: "GenerateItemBankResumableUploadURL",
			Handler:    _ItemsBankService_GenerateItemBankResumableUploadURL_Handler,
		},
		{
			MethodName: "GenerateListItemBankResumableUploadURL",
			Handler:    _ItemsBankService_GenerateListItemBankResumableUploadURL_Handler,
		},
		{
			MethodName: "UpsertMedia",
			Handler:    _ItemsBankService_UpsertMedia_Handler,
		},
		{
			MethodName: "DeleteMedia",
			Handler:    _ItemsBankService_DeleteMedia_Handler,
		},
		{
			MethodName: "GetItemsByLM",
			Handler:    _ItemsBankService_GetItemsByLM_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "syllabus/v1/items_bank_service.proto",
}
