// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: syllabus/v1/common.proto

package sspb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SubmissionContent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubmissionContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubmissionContent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubmissionContentMultiError, or nil if none found.
func (m *SubmissionContent) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmissionContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubmitMediaId

	// no validation rules for AttachmentMediaId

	if len(errors) > 0 {
		return SubmissionContentMultiError(errors)
	}

	return nil
}

// SubmissionContentMultiError is an error wrapping multiple validation errors
// returned by SubmissionContent.ValidateAll() if the designated constraints
// aren't met.
type SubmissionContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmissionContentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmissionContentMultiError) AllErrors() []error { return m }

// SubmissionContentValidationError is the validation error returned by
// SubmissionContent.Validate if the designated constraints aren't met.
type SubmissionContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmissionContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmissionContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmissionContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmissionContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmissionContentValidationError) ErrorName() string {
	return "SubmissionContentValidationError"
}

// Error satisfies the builtin error interface
func (e SubmissionContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmissionContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmissionContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmissionContentValidationError{}

// Validate checks the field values on StudentSubmission with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StudentSubmission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StudentSubmission with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StudentSubmissionMultiError, or nil if none found.
func (m *StudentSubmission) ValidateAll() error {
	return m.validate(true)
}

func (m *StudentSubmission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SubmissionId

	if all {
		switch v := interface{}(m.GetStudyPlanItemIdentity()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudentSubmissionValidationError{
					field:  "StudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudentSubmissionValidationError{
					field:  "StudyPlanItemIdentity",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStudyPlanItemIdentity()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudentSubmissionValidationError{
				field:  "StudyPlanItemIdentity",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Note

	for idx, item := range m.GetSubmissionContent() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StudentSubmissionValidationError{
						field:  fmt.Sprintf("SubmissionContent[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StudentSubmissionValidationError{
						field:  fmt.Sprintf("SubmissionContent[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StudentSubmissionValidationError{
					field:  fmt.Sprintf("SubmissionContent[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudentSubmissionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudentSubmissionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudentSubmissionValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudentSubmissionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudentSubmissionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudentSubmissionValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetSubmissionGradeId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudentSubmissionValidationError{
					field:  "SubmissionGradeId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudentSubmissionValidationError{
					field:  "SubmissionGradeId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubmissionGradeId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudentSubmissionValidationError{
				field:  "SubmissionGradeId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CourseId

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudentSubmissionValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudentSubmissionValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudentSubmissionValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudentSubmissionValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudentSubmissionValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudentSubmissionValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCompleteDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudentSubmissionValidationError{
					field:  "CompleteDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudentSubmissionValidationError{
					field:  "CompleteDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCompleteDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudentSubmissionValidationError{
				field:  "CompleteDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Duration

	if all {
		switch v := interface{}(m.GetCorrectScore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudentSubmissionValidationError{
					field:  "CorrectScore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudentSubmissionValidationError{
					field:  "CorrectScore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCorrectScore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudentSubmissionValidationError{
				field:  "CorrectScore",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTotalScore()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StudentSubmissionValidationError{
					field:  "TotalScore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StudentSubmissionValidationError{
					field:  "TotalScore",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTotalScore()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StudentSubmissionValidationError{
				field:  "TotalScore",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UnderstandingLevel

	if len(errors) > 0 {
		return StudentSubmissionMultiError(errors)
	}

	return nil
}

// StudentSubmissionMultiError is an error wrapping multiple validation errors
// returned by StudentSubmission.ValidateAll() if the designated constraints
// aren't met.
type StudentSubmissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StudentSubmissionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StudentSubmissionMultiError) AllErrors() []error { return m }

// StudentSubmissionValidationError is the validation error returned by
// StudentSubmission.Validate if the designated constraints aren't met.
type StudentSubmissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StudentSubmissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StudentSubmissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StudentSubmissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StudentSubmissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StudentSubmissionValidationError) ErrorName() string {
	return "StudentSubmissionValidationError"
}

// Error satisfies the builtin error interface
func (e StudentSubmissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStudentSubmission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StudentSubmissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StudentSubmissionValidationError{}
