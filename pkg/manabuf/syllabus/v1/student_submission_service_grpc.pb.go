// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// StudentSubmissionServiceClient is the client API for StudentSubmissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentSubmissionServiceClient interface {
	ListSubmissionsV3(ctx context.Context, in *ListSubmissionsV3Request, opts ...grpc.CallOption) (*ListSubmissionsV3Response, error)
	ListSubmissionsV4(ctx context.Context, in *ListSubmissionsV4Request, opts ...grpc.CallOption) (*ListSubmissionsV4Response, error)
	RetrieveSubmissionHistory(ctx context.Context, in *RetrieveSubmissionHistoryRequest, opts ...grpc.CallOption) (*RetrieveSubmissionHistoryResponse, error)
}

type studentSubmissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentSubmissionServiceClient(cc grpc.ClientConnInterface) StudentSubmissionServiceClient {
	return &studentSubmissionServiceClient{cc}
}

func (c *studentSubmissionServiceClient) ListSubmissionsV3(ctx context.Context, in *ListSubmissionsV3Request, opts ...grpc.CallOption) (*ListSubmissionsV3Response, error) {
	out := new(ListSubmissionsV3Response)
	err := c.cc.Invoke(ctx, "/syllabus.v1.StudentSubmissionService/ListSubmissionsV3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentSubmissionServiceClient) ListSubmissionsV4(ctx context.Context, in *ListSubmissionsV4Request, opts ...grpc.CallOption) (*ListSubmissionsV4Response, error) {
	out := new(ListSubmissionsV4Response)
	err := c.cc.Invoke(ctx, "/syllabus.v1.StudentSubmissionService/ListSubmissionsV4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentSubmissionServiceClient) RetrieveSubmissionHistory(ctx context.Context, in *RetrieveSubmissionHistoryRequest, opts ...grpc.CallOption) (*RetrieveSubmissionHistoryResponse, error) {
	out := new(RetrieveSubmissionHistoryResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.StudentSubmissionService/RetrieveSubmissionHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentSubmissionServiceServer is the server API for StudentSubmissionService service.
// All implementations should embed UnimplementedStudentSubmissionServiceServer
// for forward compatibility
type StudentSubmissionServiceServer interface {
	ListSubmissionsV3(context.Context, *ListSubmissionsV3Request) (*ListSubmissionsV3Response, error)
	ListSubmissionsV4(context.Context, *ListSubmissionsV4Request) (*ListSubmissionsV4Response, error)
	RetrieveSubmissionHistory(context.Context, *RetrieveSubmissionHistoryRequest) (*RetrieveSubmissionHistoryResponse, error)
}

// UnimplementedStudentSubmissionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStudentSubmissionServiceServer struct {
}

func (UnimplementedStudentSubmissionServiceServer) ListSubmissionsV3(context.Context, *ListSubmissionsV3Request) (*ListSubmissionsV3Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubmissionsV3 not implemented")
}
func (UnimplementedStudentSubmissionServiceServer) ListSubmissionsV4(context.Context, *ListSubmissionsV4Request) (*ListSubmissionsV4Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubmissionsV4 not implemented")
}
func (UnimplementedStudentSubmissionServiceServer) RetrieveSubmissionHistory(context.Context, *RetrieveSubmissionHistoryRequest) (*RetrieveSubmissionHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveSubmissionHistory not implemented")
}

// UnsafeStudentSubmissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentSubmissionServiceServer will
// result in compilation errors.
type UnsafeStudentSubmissionServiceServer interface {
	mustEmbedUnimplementedStudentSubmissionServiceServer()
}

func RegisterStudentSubmissionServiceServer(s grpc.ServiceRegistrar, srv StudentSubmissionServiceServer) {
	s.RegisterService(&_StudentSubmissionService_serviceDesc, srv)
}

func _StudentSubmissionService_ListSubmissionsV3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubmissionsV3Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentSubmissionServiceServer).ListSubmissionsV3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.StudentSubmissionService/ListSubmissionsV3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentSubmissionServiceServer).ListSubmissionsV3(ctx, req.(*ListSubmissionsV3Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentSubmissionService_ListSubmissionsV4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubmissionsV4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentSubmissionServiceServer).ListSubmissionsV4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.StudentSubmissionService/ListSubmissionsV4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentSubmissionServiceServer).ListSubmissionsV4(ctx, req.(*ListSubmissionsV4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentSubmissionService_RetrieveSubmissionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveSubmissionHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentSubmissionServiceServer).RetrieveSubmissionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.StudentSubmissionService/RetrieveSubmissionHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentSubmissionServiceServer).RetrieveSubmissionHistory(ctx, req.(*RetrieveSubmissionHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StudentSubmissionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "syllabus.v1.StudentSubmissionService",
	HandlerType: (*StudentSubmissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSubmissionsV3",
			Handler:    _StudentSubmissionService_ListSubmissionsV3_Handler,
		},
		{
			MethodName: "ListSubmissionsV4",
			Handler:    _StudentSubmissionService_ListSubmissionsV4_Handler,
		},
		{
			MethodName: "RetrieveSubmissionHistory",
			Handler:    _StudentSubmissionService_RetrieveSubmissionHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "syllabus/v1/student_submission_service.proto",
}
