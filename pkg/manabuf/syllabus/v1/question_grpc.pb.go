// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// QuestionServiceClient is the client API for QuestionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionServiceClient interface {
	UpsertQuestionGroup(ctx context.Context, in *UpsertQuestionGroupRequest, opts ...grpc.CallOption) (*UpsertQuestionGroupResponse, error)
	UpdateDisplayOrderOfQuizSetV2(ctx context.Context, in *UpdateDisplayOrderOfQuizSetV2Request, opts ...grpc.CallOption) (*UpdateDisplayOrderOfQuizSetV2Response, error)
	DeleteQuestionGroup(ctx context.Context, in *DeleteQuestionGroupRequest, opts ...grpc.CallOption) (*DeleteQuestionGroupResponse, error)
}

type questionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionServiceClient(cc grpc.ClientConnInterface) QuestionServiceClient {
	return &questionServiceClient{cc}
}

func (c *questionServiceClient) UpsertQuestionGroup(ctx context.Context, in *UpsertQuestionGroupRequest, opts ...grpc.CallOption) (*UpsertQuestionGroupResponse, error) {
	out := new(UpsertQuestionGroupResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.QuestionService/UpsertQuestionGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) UpdateDisplayOrderOfQuizSetV2(ctx context.Context, in *UpdateDisplayOrderOfQuizSetV2Request, opts ...grpc.CallOption) (*UpdateDisplayOrderOfQuizSetV2Response, error) {
	out := new(UpdateDisplayOrderOfQuizSetV2Response)
	err := c.cc.Invoke(ctx, "/syllabus.v1.QuestionService/UpdateDisplayOrderOfQuizSetV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionServiceClient) DeleteQuestionGroup(ctx context.Context, in *DeleteQuestionGroupRequest, opts ...grpc.CallOption) (*DeleteQuestionGroupResponse, error) {
	out := new(DeleteQuestionGroupResponse)
	err := c.cc.Invoke(ctx, "/syllabus.v1.QuestionService/DeleteQuestionGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionServiceServer is the server API for QuestionService service.
// All implementations should embed UnimplementedQuestionServiceServer
// for forward compatibility
type QuestionServiceServer interface {
	UpsertQuestionGroup(context.Context, *UpsertQuestionGroupRequest) (*UpsertQuestionGroupResponse, error)
	UpdateDisplayOrderOfQuizSetV2(context.Context, *UpdateDisplayOrderOfQuizSetV2Request) (*UpdateDisplayOrderOfQuizSetV2Response, error)
	DeleteQuestionGroup(context.Context, *DeleteQuestionGroupRequest) (*DeleteQuestionGroupResponse, error)
}

// UnimplementedQuestionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedQuestionServiceServer struct {
}

func (UnimplementedQuestionServiceServer) UpsertQuestionGroup(context.Context, *UpsertQuestionGroupRequest) (*UpsertQuestionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertQuestionGroup not implemented")
}
func (UnimplementedQuestionServiceServer) UpdateDisplayOrderOfQuizSetV2(context.Context, *UpdateDisplayOrderOfQuizSetV2Request) (*UpdateDisplayOrderOfQuizSetV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDisplayOrderOfQuizSetV2 not implemented")
}
func (UnimplementedQuestionServiceServer) DeleteQuestionGroup(context.Context, *DeleteQuestionGroupRequest) (*DeleteQuestionGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuestionGroup not implemented")
}

// UnsafeQuestionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionServiceServer will
// result in compilation errors.
type UnsafeQuestionServiceServer interface {
	mustEmbedUnimplementedQuestionServiceServer()
}

func RegisterQuestionServiceServer(s grpc.ServiceRegistrar, srv QuestionServiceServer) {
	s.RegisterService(&_QuestionService_serviceDesc, srv)
}

func _QuestionService_UpsertQuestionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertQuestionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).UpsertQuestionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.QuestionService/UpsertQuestionGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).UpsertQuestionGroup(ctx, req.(*UpsertQuestionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_UpdateDisplayOrderOfQuizSetV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDisplayOrderOfQuizSetV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).UpdateDisplayOrderOfQuizSetV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.QuestionService/UpdateDisplayOrderOfQuizSetV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).UpdateDisplayOrderOfQuizSetV2(ctx, req.(*UpdateDisplayOrderOfQuizSetV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuestionService_DeleteQuestionGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuestionGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServiceServer).DeleteQuestionGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syllabus.v1.QuestionService/DeleteQuestionGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServiceServer).DeleteQuestionGroup(ctx, req.(*DeleteQuestionGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QuestionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "syllabus.v1.QuestionService",
	HandlerType: (*QuestionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertQuestionGroup",
			Handler:    _QuestionService_UpsertQuestionGroup_Handler,
		},
		{
			MethodName: "UpdateDisplayOrderOfQuizSetV2",
			Handler:    _QuestionService_UpdateDisplayOrderOfQuizSetV2_Handler,
		},
		{
			MethodName: "DeleteQuestionGroup",
			Handler:    _QuestionService_DeleteQuestionGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "syllabus/v1/question.proto",
}
