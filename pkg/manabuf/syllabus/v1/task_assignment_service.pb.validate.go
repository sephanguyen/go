// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: syllabus/v1/task_assignment_service.proto

package sspb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TaskAssignmentBase with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TaskAssignmentBase) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskAssignmentBase with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TaskAssignmentBaseMultiError, or nil if none found.
func (m *TaskAssignmentBase) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskAssignmentBase) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBase()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TaskAssignmentBaseValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TaskAssignmentBaseValidationError{
					field:  "Base",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBase()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TaskAssignmentBaseValidationError{
				field:  "Base",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Instruction

	// no validation rules for RequireDuration

	// no validation rules for RequireCompleteDate

	// no validation rules for RequireUnderstandingLevel

	// no validation rules for RequireCorrectness

	// no validation rules for RequireAttachment

	// no validation rules for RequireAssignmentNote

	if len(errors) > 0 {
		return TaskAssignmentBaseMultiError(errors)
	}

	return nil
}

// TaskAssignmentBaseMultiError is an error wrapping multiple validation errors
// returned by TaskAssignmentBase.ValidateAll() if the designated constraints
// aren't met.
type TaskAssignmentBaseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskAssignmentBaseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskAssignmentBaseMultiError) AllErrors() []error { return m }

// TaskAssignmentBaseValidationError is the validation error returned by
// TaskAssignmentBase.Validate if the designated constraints aren't met.
type TaskAssignmentBaseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskAssignmentBaseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskAssignmentBaseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskAssignmentBaseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskAssignmentBaseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskAssignmentBaseValidationError) ErrorName() string {
	return "TaskAssignmentBaseValidationError"
}

// Error satisfies the builtin error interface
func (e TaskAssignmentBaseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskAssignmentBase.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskAssignmentBaseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskAssignmentBaseValidationError{}

// Validate checks the field values on InsertTaskAssignmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InsertTaskAssignmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InsertTaskAssignmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InsertTaskAssignmentRequestMultiError, or nil if none found.
func (m *InsertTaskAssignmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InsertTaskAssignmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTaskAssignment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InsertTaskAssignmentRequestValidationError{
					field:  "TaskAssignment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InsertTaskAssignmentRequestValidationError{
					field:  "TaskAssignment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskAssignment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InsertTaskAssignmentRequestValidationError{
				field:  "TaskAssignment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InsertTaskAssignmentRequestMultiError(errors)
	}

	return nil
}

// InsertTaskAssignmentRequestMultiError is an error wrapping multiple
// validation errors returned by InsertTaskAssignmentRequest.ValidateAll() if
// the designated constraints aren't met.
type InsertTaskAssignmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InsertTaskAssignmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InsertTaskAssignmentRequestMultiError) AllErrors() []error { return m }

// InsertTaskAssignmentRequestValidationError is the validation error returned
// by InsertTaskAssignmentRequest.Validate if the designated constraints
// aren't met.
type InsertTaskAssignmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InsertTaskAssignmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InsertTaskAssignmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InsertTaskAssignmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InsertTaskAssignmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InsertTaskAssignmentRequestValidationError) ErrorName() string {
	return "InsertTaskAssignmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InsertTaskAssignmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInsertTaskAssignmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InsertTaskAssignmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InsertTaskAssignmentRequestValidationError{}

// Validate checks the field values on InsertTaskAssignmentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InsertTaskAssignmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InsertTaskAssignmentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InsertTaskAssignmentResponseMultiError, or nil if none found.
func (m *InsertTaskAssignmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InsertTaskAssignmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LearningMaterialId

	if len(errors) > 0 {
		return InsertTaskAssignmentResponseMultiError(errors)
	}

	return nil
}

// InsertTaskAssignmentResponseMultiError is an error wrapping multiple
// validation errors returned by InsertTaskAssignmentResponse.ValidateAll() if
// the designated constraints aren't met.
type InsertTaskAssignmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InsertTaskAssignmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InsertTaskAssignmentResponseMultiError) AllErrors() []error { return m }

// InsertTaskAssignmentResponseValidationError is the validation error returned
// by InsertTaskAssignmentResponse.Validate if the designated constraints
// aren't met.
type InsertTaskAssignmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InsertTaskAssignmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InsertTaskAssignmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InsertTaskAssignmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InsertTaskAssignmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InsertTaskAssignmentResponseValidationError) ErrorName() string {
	return "InsertTaskAssignmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InsertTaskAssignmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInsertTaskAssignmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InsertTaskAssignmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InsertTaskAssignmentResponseValidationError{}

// Validate checks the field values on UpdateTaskAssignmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTaskAssignmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTaskAssignmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTaskAssignmentRequestMultiError, or nil if none found.
func (m *UpdateTaskAssignmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTaskAssignmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTaskAssignment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTaskAssignmentRequestValidationError{
					field:  "TaskAssignment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTaskAssignmentRequestValidationError{
					field:  "TaskAssignment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskAssignment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTaskAssignmentRequestValidationError{
				field:  "TaskAssignment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTaskAssignmentRequestMultiError(errors)
	}

	return nil
}

// UpdateTaskAssignmentRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateTaskAssignmentRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateTaskAssignmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTaskAssignmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTaskAssignmentRequestMultiError) AllErrors() []error { return m }

// UpdateTaskAssignmentRequestValidationError is the validation error returned
// by UpdateTaskAssignmentRequest.Validate if the designated constraints
// aren't met.
type UpdateTaskAssignmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTaskAssignmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTaskAssignmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTaskAssignmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTaskAssignmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTaskAssignmentRequestValidationError) ErrorName() string {
	return "UpdateTaskAssignmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTaskAssignmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTaskAssignmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTaskAssignmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTaskAssignmentRequestValidationError{}

// Validate checks the field values on UpdateTaskAssignmentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTaskAssignmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTaskAssignmentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTaskAssignmentResponseMultiError, or nil if none found.
func (m *UpdateTaskAssignmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTaskAssignmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateTaskAssignmentResponseMultiError(errors)
	}

	return nil
}

// UpdateTaskAssignmentResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateTaskAssignmentResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateTaskAssignmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTaskAssignmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTaskAssignmentResponseMultiError) AllErrors() []error { return m }

// UpdateTaskAssignmentResponseValidationError is the validation error returned
// by UpdateTaskAssignmentResponse.Validate if the designated constraints
// aren't met.
type UpdateTaskAssignmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTaskAssignmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTaskAssignmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTaskAssignmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTaskAssignmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTaskAssignmentResponseValidationError) ErrorName() string {
	return "UpdateTaskAssignmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTaskAssignmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTaskAssignmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTaskAssignmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTaskAssignmentResponseValidationError{}

// Validate checks the field values on ListTaskAssignmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTaskAssignmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTaskAssignmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTaskAssignmentRequestMultiError, or nil if none found.
func (m *ListTaskAssignmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTaskAssignmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListTaskAssignmentRequestMultiError(errors)
	}

	return nil
}

// ListTaskAssignmentRequestMultiError is an error wrapping multiple validation
// errors returned by ListTaskAssignmentRequest.ValidateAll() if the
// designated constraints aren't met.
type ListTaskAssignmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTaskAssignmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTaskAssignmentRequestMultiError) AllErrors() []error { return m }

// ListTaskAssignmentRequestValidationError is the validation error returned by
// ListTaskAssignmentRequest.Validate if the designated constraints aren't met.
type ListTaskAssignmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTaskAssignmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTaskAssignmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTaskAssignmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTaskAssignmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTaskAssignmentRequestValidationError) ErrorName() string {
	return "ListTaskAssignmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTaskAssignmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTaskAssignmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTaskAssignmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTaskAssignmentRequestValidationError{}

// Validate checks the field values on ListTaskAssignmentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTaskAssignmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTaskAssignmentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTaskAssignmentResponseMultiError, or nil if none found.
func (m *ListTaskAssignmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTaskAssignmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTaskAssignments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTaskAssignmentResponseValidationError{
						field:  fmt.Sprintf("TaskAssignments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTaskAssignmentResponseValidationError{
						field:  fmt.Sprintf("TaskAssignments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTaskAssignmentResponseValidationError{
					field:  fmt.Sprintf("TaskAssignments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTaskAssignmentResponseMultiError(errors)
	}

	return nil
}

// ListTaskAssignmentResponseMultiError is an error wrapping multiple
// validation errors returned by ListTaskAssignmentResponse.ValidateAll() if
// the designated constraints aren't met.
type ListTaskAssignmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTaskAssignmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTaskAssignmentResponseMultiError) AllErrors() []error { return m }

// ListTaskAssignmentResponseValidationError is the validation error returned
// by ListTaskAssignmentResponse.Validate if the designated constraints aren't met.
type ListTaskAssignmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTaskAssignmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTaskAssignmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTaskAssignmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTaskAssignmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTaskAssignmentResponseValidationError) ErrorName() string {
	return "ListTaskAssignmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTaskAssignmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTaskAssignmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTaskAssignmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTaskAssignmentResponseValidationError{}

// Validate checks the field values on UpsertAdhocTaskAssignmentRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpsertAdhocTaskAssignmentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertAdhocTaskAssignmentRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpsertAdhocTaskAssignmentRequestMultiError, or nil if none found.
func (m *UpsertAdhocTaskAssignmentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertAdhocTaskAssignmentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StudentId

	// no validation rules for CourseId

	// no validation rules for ChapterName

	// no validation rules for TopicName

	// no validation rules for BookName

	// no validation rules for StudyPlanName

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertAdhocTaskAssignmentRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertAdhocTaskAssignmentRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertAdhocTaskAssignmentRequestValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertAdhocTaskAssignmentRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertAdhocTaskAssignmentRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertAdhocTaskAssignmentRequestValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTaskAssignment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpsertAdhocTaskAssignmentRequestValidationError{
					field:  "TaskAssignment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpsertAdhocTaskAssignmentRequestValidationError{
					field:  "TaskAssignment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTaskAssignment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpsertAdhocTaskAssignmentRequestValidationError{
				field:  "TaskAssignment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpsertAdhocTaskAssignmentRequestMultiError(errors)
	}

	return nil
}

// UpsertAdhocTaskAssignmentRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpsertAdhocTaskAssignmentRequest.ValidateAll() if the designated
// constraints aren't met.
type UpsertAdhocTaskAssignmentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertAdhocTaskAssignmentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertAdhocTaskAssignmentRequestMultiError) AllErrors() []error { return m }

// UpsertAdhocTaskAssignmentRequestValidationError is the validation error
// returned by UpsertAdhocTaskAssignmentRequest.Validate if the designated
// constraints aren't met.
type UpsertAdhocTaskAssignmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertAdhocTaskAssignmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertAdhocTaskAssignmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertAdhocTaskAssignmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertAdhocTaskAssignmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertAdhocTaskAssignmentRequestValidationError) ErrorName() string {
	return "UpsertAdhocTaskAssignmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertAdhocTaskAssignmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertAdhocTaskAssignmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertAdhocTaskAssignmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertAdhocTaskAssignmentRequestValidationError{}

// Validate checks the field values on UpsertAdhocTaskAssignmentResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpsertAdhocTaskAssignmentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpsertAdhocTaskAssignmentResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpsertAdhocTaskAssignmentResponseMultiError, or nil if none found.
func (m *UpsertAdhocTaskAssignmentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpsertAdhocTaskAssignmentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LearningMaterialId

	if len(errors) > 0 {
		return UpsertAdhocTaskAssignmentResponseMultiError(errors)
	}

	return nil
}

// UpsertAdhocTaskAssignmentResponseMultiError is an error wrapping multiple
// validation errors returned by
// UpsertAdhocTaskAssignmentResponse.ValidateAll() if the designated
// constraints aren't met.
type UpsertAdhocTaskAssignmentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpsertAdhocTaskAssignmentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpsertAdhocTaskAssignmentResponseMultiError) AllErrors() []error { return m }

// UpsertAdhocTaskAssignmentResponseValidationError is the validation error
// returned by UpsertAdhocTaskAssignmentResponse.Validate if the designated
// constraints aren't met.
type UpsertAdhocTaskAssignmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpsertAdhocTaskAssignmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpsertAdhocTaskAssignmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpsertAdhocTaskAssignmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpsertAdhocTaskAssignmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpsertAdhocTaskAssignmentResponseValidationError) ErrorName() string {
	return "UpsertAdhocTaskAssignmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpsertAdhocTaskAssignmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpsertAdhocTaskAssignmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpsertAdhocTaskAssignmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpsertAdhocTaskAssignmentResponseValidationError{}
