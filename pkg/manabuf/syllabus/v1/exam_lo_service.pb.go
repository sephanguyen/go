// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: syllabus/v1/exam_lo_service.proto

package sspb

import (
	proto "github.com/golang/protobuf/proto"
	v1 "github.com/manabie-com/backend/pkg/manabuf/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// ExamLOBase is exam lo learning type metadata
type ExamLOBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Learning Material metadata
	Base           *LearningMaterialBase  `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Instruction    string                 `protobuf:"bytes,2,opt,name=instruction,proto3" json:"instruction,omitempty"`
	GradeToPass    *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=grade_to_pass,json=gradeToPass,proto3" json:"grade_to_pass,omitempty"`
	ManualGrading  bool                   `protobuf:"varint,4,opt,name=manual_grading,json=manualGrading,proto3" json:"manual_grading,omitempty"`
	TimeLimit      *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=time_limit,json=timeLimit,proto3" json:"time_limit,omitempty"`
	TotalQuestion  int32                  `protobuf:"varint,6,opt,name=total_question,json=totalQuestion,proto3" json:"total_question,omitempty"`
	ApproveGrading bool                   `protobuf:"varint,7,opt,name=approve_grading,json=approveGrading,proto3" json:"approve_grading,omitempty"`
	GradeCapping   bool                   `protobuf:"varint,8,opt,name=grade_capping,json=gradeCapping,proto3" json:"grade_capping,omitempty"`
	MaximumAttempt *wrapperspb.Int32Value `protobuf:"bytes,9,opt,name=maximum_attempt,json=maximumAttempt,proto3" json:"maximum_attempt,omitempty"`
	ReviewOption   ExamLOReviewOption     `protobuf:"varint,10,opt,name=review_option,json=reviewOption,proto3,enum=syllabus.v1.ExamLOReviewOption" json:"review_option,omitempty"`
}

func (x *ExamLOBase) Reset() {
	*x = ExamLOBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExamLOBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamLOBase) ProtoMessage() {}

func (x *ExamLOBase) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamLOBase.ProtoReflect.Descriptor instead.
func (*ExamLOBase) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{0}
}

func (x *ExamLOBase) GetBase() *LearningMaterialBase {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ExamLOBase) GetInstruction() string {
	if x != nil {
		return x.Instruction
	}
	return ""
}

func (x *ExamLOBase) GetGradeToPass() *wrapperspb.Int32Value {
	if x != nil {
		return x.GradeToPass
	}
	return nil
}

func (x *ExamLOBase) GetManualGrading() bool {
	if x != nil {
		return x.ManualGrading
	}
	return false
}

func (x *ExamLOBase) GetTimeLimit() *wrapperspb.Int32Value {
	if x != nil {
		return x.TimeLimit
	}
	return nil
}

func (x *ExamLOBase) GetTotalQuestion() int32 {
	if x != nil {
		return x.TotalQuestion
	}
	return 0
}

func (x *ExamLOBase) GetApproveGrading() bool {
	if x != nil {
		return x.ApproveGrading
	}
	return false
}

func (x *ExamLOBase) GetGradeCapping() bool {
	if x != nil {
		return x.GradeCapping
	}
	return false
}

func (x *ExamLOBase) GetMaximumAttempt() *wrapperspb.Int32Value {
	if x != nil {
		return x.MaximumAttempt
	}
	return nil
}

func (x *ExamLOBase) GetReviewOption() ExamLOReviewOption {
	if x != nil {
		return x.ReviewOption
	}
	return ExamLOReviewOption_EXAM_LO_REVIEW_OPTION_IMMEDIATELY
}

type InsertExamLORequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// We only need send some fields bellow
	// 1. LearningMaterialBase
	// 1. name
	// 2. topic_id
	// 3. No learning_material_id
	// 4. No type
	// 5. No display_order
	// 2. Instruction
	// 3. grade_to_pass
	// 4. manual_grading
	ExamLo *ExamLOBase `protobuf:"bytes,1,opt,name=exam_lo,json=examLo,proto3" json:"exam_lo,omitempty"`
}

func (x *InsertExamLORequest) Reset() {
	*x = InsertExamLORequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertExamLORequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertExamLORequest) ProtoMessage() {}

func (x *InsertExamLORequest) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertExamLORequest.ProtoReflect.Descriptor instead.
func (*InsertExamLORequest) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{1}
}

func (x *InsertExamLORequest) GetExamLo() *ExamLOBase {
	if x != nil {
		return x.ExamLo
	}
	return nil
}

type UpsertGradeBookSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Setting GradeBookSetting `protobuf:"varint,1,opt,name=setting,proto3,enum=syllabus.v1.GradeBookSetting" json:"setting,omitempty"`
}

func (x *UpsertGradeBookSettingRequest) Reset() {
	*x = UpsertGradeBookSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertGradeBookSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertGradeBookSettingRequest) ProtoMessage() {}

func (x *UpsertGradeBookSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertGradeBookSettingRequest.ProtoReflect.Descriptor instead.
func (*UpsertGradeBookSettingRequest) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{2}
}

func (x *UpsertGradeBookSettingRequest) GetSetting() GradeBookSetting {
	if x != nil {
		return x.Setting
	}
	return GradeBookSetting_LATEST_SCORE
}

type UpsertGradeBookSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpsertGradeBookSettingResponse) Reset() {
	*x = UpsertGradeBookSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertGradeBookSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertGradeBookSettingResponse) ProtoMessage() {}

func (x *UpsertGradeBookSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertGradeBookSettingResponse.ProtoReflect.Descriptor instead.
func (*UpsertGradeBookSettingResponse) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{3}
}

type InsertExamLOResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// return generated Learning Material ULID
	LearningMaterialId string `protobuf:"bytes,1,opt,name=learning_material_id,json=learningMaterialId,proto3" json:"learning_material_id,omitempty"`
}

func (x *InsertExamLOResponse) Reset() {
	*x = InsertExamLOResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertExamLOResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertExamLOResponse) ProtoMessage() {}

func (x *InsertExamLOResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertExamLOResponse.ProtoReflect.Descriptor instead.
func (*InsertExamLOResponse) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{4}
}

func (x *InsertExamLOResponse) GetLearningMaterialId() string {
	if x != nil {
		return x.LearningMaterialId
	}
	return ""
}

type UpdateExamLORequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// We only need send some fields bellow
	// 1. LearningMaterialBase
	// 1. learning_material_id
	// 2. name
	// 3. No topic_id
	// 4. No type
	// 5. No display_order
	// 2. Instruction
	// 3. grade_to_pass
	// 4. manual_grading
	ExamLo *ExamLOBase `protobuf:"bytes,1,opt,name=exam_lo,json=examLo,proto3" json:"exam_lo,omitempty"`
}

func (x *UpdateExamLORequest) Reset() {
	*x = UpdateExamLORequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateExamLORequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExamLORequest) ProtoMessage() {}

func (x *UpdateExamLORequest) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExamLORequest.ProtoReflect.Descriptor instead.
func (*UpdateExamLORequest) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateExamLORequest) GetExamLo() *ExamLOBase {
	if x != nil {
		return x.ExamLo
	}
	return nil
}

// UpdateExamLOResponse is empty message
type UpdateExamLOResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateExamLOResponse) Reset() {
	*x = UpdateExamLOResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateExamLOResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExamLOResponse) ProtoMessage() {}

func (x *UpdateExamLOResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExamLOResponse.ProtoReflect.Descriptor instead.
func (*UpdateExamLOResponse) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{6}
}

type ListExamLORequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LearningMaterialIds []string `protobuf:"bytes,1,rep,name=learning_material_ids,json=learningMaterialIds,proto3" json:"learning_material_ids,omitempty"`
}

func (x *ListExamLORequest) Reset() {
	*x = ListExamLORequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExamLORequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExamLORequest) ProtoMessage() {}

func (x *ListExamLORequest) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExamLORequest.ProtoReflect.Descriptor instead.
func (*ListExamLORequest) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{7}
}

func (x *ListExamLORequest) GetLearningMaterialIds() []string {
	if x != nil {
		return x.LearningMaterialIds
	}
	return nil
}

type ListExamLOResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExamLos []*ExamLOBase `protobuf:"bytes,1,rep,name=exam_los,json=examLos,proto3" json:"exam_los,omitempty"`
}

func (x *ListExamLOResponse) Reset() {
	*x = ListExamLOResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExamLOResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExamLOResponse) ProtoMessage() {}

func (x *ListExamLOResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExamLOResponse.ProtoReflect.Descriptor instead.
func (*ListExamLOResponse) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{8}
}

func (x *ListExamLOResponse) GetExamLos() []*ExamLOBase {
	if x != nil {
		return x.ExamLos
	}
	return nil
}

type ListHighestResultExamLOSubmissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudyPlanItemIdentities []*StudyPlanItemIdentity `protobuf:"bytes,1,rep,name=study_plan_item_identities,json=studyPlanItemIdentities,proto3" json:"study_plan_item_identities,omitempty"`
}

func (x *ListHighestResultExamLOSubmissionRequest) Reset() {
	*x = ListHighestResultExamLOSubmissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHighestResultExamLOSubmissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHighestResultExamLOSubmissionRequest) ProtoMessage() {}

func (x *ListHighestResultExamLOSubmissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHighestResultExamLOSubmissionRequest.ProtoReflect.Descriptor instead.
func (*ListHighestResultExamLOSubmissionRequest) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{9}
}

func (x *ListHighestResultExamLOSubmissionRequest) GetStudyPlanItemIdentities() []*StudyPlanItemIdentity {
	if x != nil {
		return x.StudyPlanItemIdentities
	}
	return nil
}

type ListHighestResultExamLOSubmissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudyPlanItemResults []*ListHighestResultExamLOSubmissionResponse_StudyPlanItemResult `protobuf:"bytes,1,rep,name=study_plan_item_results,json=studyPlanItemResults,proto3" json:"study_plan_item_results,omitempty"`
}

func (x *ListHighestResultExamLOSubmissionResponse) Reset() {
	*x = ListHighestResultExamLOSubmissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHighestResultExamLOSubmissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHighestResultExamLOSubmissionResponse) ProtoMessage() {}

func (x *ListHighestResultExamLOSubmissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHighestResultExamLOSubmissionResponse.ProtoReflect.Descriptor instead.
func (*ListHighestResultExamLOSubmissionResponse) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{10}
}

func (x *ListHighestResultExamLOSubmissionResponse) GetStudyPlanItemResults() []*ListHighestResultExamLOSubmissionResponse_StudyPlanItemResult {
	if x != nil {
		return x.StudyPlanItemResults
	}
	return nil
}

type ListExamLOSubmissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paging          *v1.Paging                                   `protobuf:"bytes,1,opt,name=paging,proto3" json:"paging,omitempty"`
	CourseId        *wrapperspb.StringValue                      `protobuf:"bytes,2,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	ClassIds        []string                                     `protobuf:"bytes,3,rep,name=class_ids,json=classIds,proto3" json:"class_ids,omitempty"`
	Statuses        []SubmissionStatus                           `protobuf:"varint,4,rep,packed,name=statuses,proto3,enum=syllabus.v1.SubmissionStatus" json:"statuses,omitempty"`
	Start           *timestamppb.Timestamp                       `protobuf:"bytes,5,opt,name=start,proto3" json:"start,omitempty"`
	End             *timestamppb.Timestamp                       `protobuf:"bytes,6,opt,name=end,proto3" json:"end,omitempty"`
	LocationIds     []string                                     `protobuf:"bytes,7,rep,name=location_ids,json=locationIds,proto3" json:"location_ids,omitempty"`
	StudentName     *wrapperspb.StringValue                      `protobuf:"bytes,8,opt,name=student_name,json=studentName,proto3" json:"student_name,omitempty"`
	ExamName        *wrapperspb.StringValue                      `protobuf:"bytes,9,opt,name=exam_name,json=examName,proto3" json:"exam_name,omitempty"`
	CorrectorId     *wrapperspb.StringValue                      `protobuf:"bytes,10,opt,name=corrector_id,json=correctorId,proto3" json:"corrector_id,omitempty"`
	SubmittedDate   *ListExamLOSubmissionRequest_SubmittedDate   `protobuf:"bytes,11,opt,name=submitted_date,json=submittedDate,proto3" json:"submitted_date,omitempty"`
	LastUpdatedDate *ListExamLOSubmissionRequest_LastUpdatedDate `protobuf:"bytes,12,opt,name=last_updated_date,json=lastUpdatedDate,proto3" json:"last_updated_date,omitempty"`
	SubmissionId    *wrapperspb.StringValue                      `protobuf:"bytes,13,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"`
}

func (x *ListExamLOSubmissionRequest) Reset() {
	*x = ListExamLOSubmissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExamLOSubmissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExamLOSubmissionRequest) ProtoMessage() {}

func (x *ListExamLOSubmissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExamLOSubmissionRequest.ProtoReflect.Descriptor instead.
func (*ListExamLOSubmissionRequest) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{11}
}

func (x *ListExamLOSubmissionRequest) GetPaging() *v1.Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

func (x *ListExamLOSubmissionRequest) GetCourseId() *wrapperspb.StringValue {
	if x != nil {
		return x.CourseId
	}
	return nil
}

func (x *ListExamLOSubmissionRequest) GetClassIds() []string {
	if x != nil {
		return x.ClassIds
	}
	return nil
}

func (x *ListExamLOSubmissionRequest) GetStatuses() []SubmissionStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *ListExamLOSubmissionRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ListExamLOSubmissionRequest) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *ListExamLOSubmissionRequest) GetLocationIds() []string {
	if x != nil {
		return x.LocationIds
	}
	return nil
}

func (x *ListExamLOSubmissionRequest) GetStudentName() *wrapperspb.StringValue {
	if x != nil {
		return x.StudentName
	}
	return nil
}

func (x *ListExamLOSubmissionRequest) GetExamName() *wrapperspb.StringValue {
	if x != nil {
		return x.ExamName
	}
	return nil
}

func (x *ListExamLOSubmissionRequest) GetCorrectorId() *wrapperspb.StringValue {
	if x != nil {
		return x.CorrectorId
	}
	return nil
}

func (x *ListExamLOSubmissionRequest) GetSubmittedDate() *ListExamLOSubmissionRequest_SubmittedDate {
	if x != nil {
		return x.SubmittedDate
	}
	return nil
}

func (x *ListExamLOSubmissionRequest) GetLastUpdatedDate() *ListExamLOSubmissionRequest_LastUpdatedDate {
	if x != nil {
		return x.LastUpdatedDate
	}
	return nil
}

func (x *ListExamLOSubmissionRequest) GetSubmissionId() *wrapperspb.StringValue {
	if x != nil {
		return x.SubmissionId
	}
	return nil
}

type ListExamLOSubmissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextPage *v1.Paging          `protobuf:"bytes,1,opt,name=next_page,json=nextPage,proto3" json:"next_page,omitempty"`
	Items    []*ExamLOSubmission `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ListExamLOSubmissionResponse) Reset() {
	*x = ListExamLOSubmissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExamLOSubmissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExamLOSubmissionResponse) ProtoMessage() {}

func (x *ListExamLOSubmissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExamLOSubmissionResponse.ProtoReflect.Descriptor instead.
func (*ListExamLOSubmissionResponse) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{12}
}

func (x *ListExamLOSubmissionResponse) GetNextPage() *v1.Paging {
	if x != nil {
		return x.NextPage
	}
	return nil
}

func (x *ListExamLOSubmissionResponse) GetItems() []*ExamLOSubmission {
	if x != nil {
		return x.Items
	}
	return nil
}

type ExamLOSubmission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubmissionId          string                  `protobuf:"bytes,1,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"`
	StudyPlanItemIdentity *StudyPlanItemIdentity  `protobuf:"bytes,2,opt,name=study_plan_item_identity,json=studyPlanItemIdentity,proto3" json:"study_plan_item_identity,omitempty"`
	ShuffledQuizSetId     string                  `protobuf:"bytes,3,opt,name=shuffled_quiz_set_id,json=shuffledQuizSetId,proto3" json:"shuffled_quiz_set_id,omitempty"`
	SubmissionStatus      SubmissionStatus        `protobuf:"varint,4,opt,name=submission_status,json=submissionStatus,proto3,enum=syllabus.v1.SubmissionStatus" json:"submission_status,omitempty"`
	SubmissionResult      ExamLOSubmissionResult  `protobuf:"varint,5,opt,name=submission_result,json=submissionResult,proto3,enum=syllabus.v1.ExamLOSubmissionResult" json:"submission_result,omitempty"`
	SubmittedAt           *timestamppb.Timestamp  `protobuf:"bytes,6,opt,name=submitted_at,json=submittedAt,proto3" json:"submitted_at,omitempty"`
	UpdatedAt             *timestamppb.Timestamp  `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CourseId              string                  `protobuf:"bytes,8,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	StartDate             *timestamppb.Timestamp  `protobuf:"bytes,9,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate               *timestamppb.Timestamp  `protobuf:"bytes,10,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	LastAction            ApproveGradingAction    `protobuf:"varint,11,opt,name=last_action,json=lastAction,proto3,enum=syllabus.v1.ApproveGradingAction" json:"last_action,omitempty"`
	LastActionAt          *timestamppb.Timestamp  `protobuf:"bytes,12,opt,name=last_action_at,json=lastActionAt,proto3" json:"last_action_at,omitempty"`
	LastActionBy          *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=last_action_by,json=lastActionBy,proto3" json:"last_action_by,omitempty"`
	CorrectorId           *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=corrector_id,json=correctorId,proto3" json:"corrector_id,omitempty"`
	MarkDate              *timestamppb.Timestamp  `protobuf:"bytes,15,opt,name=mark_date,json=markDate,proto3" json:"mark_date,omitempty"`
}

func (x *ExamLOSubmission) Reset() {
	*x = ExamLOSubmission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExamLOSubmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamLOSubmission) ProtoMessage() {}

func (x *ExamLOSubmission) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamLOSubmission.ProtoReflect.Descriptor instead.
func (*ExamLOSubmission) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{13}
}

func (x *ExamLOSubmission) GetSubmissionId() string {
	if x != nil {
		return x.SubmissionId
	}
	return ""
}

func (x *ExamLOSubmission) GetStudyPlanItemIdentity() *StudyPlanItemIdentity {
	if x != nil {
		return x.StudyPlanItemIdentity
	}
	return nil
}

func (x *ExamLOSubmission) GetShuffledQuizSetId() string {
	if x != nil {
		return x.ShuffledQuizSetId
	}
	return ""
}

func (x *ExamLOSubmission) GetSubmissionStatus() SubmissionStatus {
	if x != nil {
		return x.SubmissionStatus
	}
	return SubmissionStatus_SUBMISSION_STATUS_NONE
}

func (x *ExamLOSubmission) GetSubmissionResult() ExamLOSubmissionResult {
	if x != nil {
		return x.SubmissionResult
	}
	return ExamLOSubmissionResult_EXAM_LO_SUBMISSION_WAITING_FOR_GRADE
}

func (x *ExamLOSubmission) GetSubmittedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SubmittedAt
	}
	return nil
}

func (x *ExamLOSubmission) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ExamLOSubmission) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

func (x *ExamLOSubmission) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ExamLOSubmission) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ExamLOSubmission) GetLastAction() ApproveGradingAction {
	if x != nil {
		return x.LastAction
	}
	return ApproveGradingAction_APPROVE_ACTION_NONE
}

func (x *ExamLOSubmission) GetLastActionAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastActionAt
	}
	return nil
}

func (x *ExamLOSubmission) GetLastActionBy() *wrapperspb.StringValue {
	if x != nil {
		return x.LastActionBy
	}
	return nil
}

func (x *ExamLOSubmission) GetCorrectorId() *wrapperspb.StringValue {
	if x != nil {
		return x.CorrectorId
	}
	return nil
}

func (x *ExamLOSubmission) GetMarkDate() *timestamppb.Timestamp {
	if x != nil {
		return x.MarkDate
	}
	return nil
}

type ListExamLOSubmissionScoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubmissionId      string `protobuf:"bytes,1,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"`
	ShuffledQuizSetId string `protobuf:"bytes,2,opt,name=shuffled_quiz_set_id,json=shuffledQuizSetId,proto3" json:"shuffled_quiz_set_id,omitempty"`
}

func (x *ListExamLOSubmissionScoreRequest) Reset() {
	*x = ListExamLOSubmissionScoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExamLOSubmissionScoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExamLOSubmissionScoreRequest) ProtoMessage() {}

func (x *ListExamLOSubmissionScoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExamLOSubmissionScoreRequest.ProtoReflect.Descriptor instead.
func (*ListExamLOSubmissionScoreRequest) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{14}
}

func (x *ListExamLOSubmissionScoreRequest) GetSubmissionId() string {
	if x != nil {
		return x.SubmissionId
	}
	return ""
}

func (x *ListExamLOSubmissionScoreRequest) GetShuffledQuizSetId() string {
	if x != nil {
		return x.ShuffledQuizSetId
	}
	return ""
}

type ListExamLOSubmissionScoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubmissionScores []*ExamLOSubmissionScore `protobuf:"bytes,1,rep,name=submission_scores,json=submissionScores,proto3" json:"submission_scores,omitempty"`
	TeacherFeedback  string                   `protobuf:"bytes,2,opt,name=teacher_feedback,json=teacherFeedback,proto3" json:"teacher_feedback,omitempty"`
	SubmissionStatus SubmissionStatus         `protobuf:"varint,3,opt,name=submission_status,json=submissionStatus,proto3,enum=syllabus.v1.SubmissionStatus" json:"submission_status,omitempty"`
	SubmissionResult ExamLOSubmissionResult   `protobuf:"varint,4,opt,name=submission_result,json=submissionResult,proto3,enum=syllabus.v1.ExamLOSubmissionResult" json:"submission_result,omitempty"`
	TotalGradedPoint *wrapperspb.UInt32Value  `protobuf:"bytes,5,opt,name=total_graded_point,json=totalGradedPoint,proto3" json:"total_graded_point,omitempty"` // (sum from point fields union from 2 table answer & score)
	TotalPoint       *wrapperspb.UInt32Value  `protobuf:"bytes,6,opt,name=total_point,json=totalPoint,proto3" json:"total_point,omitempty"`                     // (total_point in exam_lo_submission table)
	QuestionGroups   []*v1.QuestionGroup      `protobuf:"bytes,7,rep,name=question_groups,json=questionGroups,proto3" json:"question_groups,omitempty"`
}

func (x *ListExamLOSubmissionScoreResponse) Reset() {
	*x = ListExamLOSubmissionScoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExamLOSubmissionScoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExamLOSubmissionScoreResponse) ProtoMessage() {}

func (x *ListExamLOSubmissionScoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExamLOSubmissionScoreResponse.ProtoReflect.Descriptor instead.
func (*ListExamLOSubmissionScoreResponse) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{15}
}

func (x *ListExamLOSubmissionScoreResponse) GetSubmissionScores() []*ExamLOSubmissionScore {
	if x != nil {
		return x.SubmissionScores
	}
	return nil
}

func (x *ListExamLOSubmissionScoreResponse) GetTeacherFeedback() string {
	if x != nil {
		return x.TeacherFeedback
	}
	return ""
}

func (x *ListExamLOSubmissionScoreResponse) GetSubmissionStatus() SubmissionStatus {
	if x != nil {
		return x.SubmissionStatus
	}
	return SubmissionStatus_SUBMISSION_STATUS_NONE
}

func (x *ListExamLOSubmissionScoreResponse) GetSubmissionResult() ExamLOSubmissionResult {
	if x != nil {
		return x.SubmissionResult
	}
	return ExamLOSubmissionResult_EXAM_LO_SUBMISSION_WAITING_FOR_GRADE
}

func (x *ListExamLOSubmissionScoreResponse) GetTotalGradedPoint() *wrapperspb.UInt32Value {
	if x != nil {
		return x.TotalGradedPoint
	}
	return nil
}

func (x *ListExamLOSubmissionScoreResponse) GetTotalPoint() *wrapperspb.UInt32Value {
	if x != nil {
		return x.TotalPoint
	}
	return nil
}

func (x *ListExamLOSubmissionScoreResponse) GetQuestionGroups() []*v1.QuestionGroup {
	if x != nil {
		return x.QuestionGroups
	}
	return nil
}

type ExamLOSubmissionScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShuffleQuizSetId string                  `protobuf:"bytes,1,opt,name=shuffle_quiz_set_id,json=shuffleQuizSetId,proto3" json:"shuffle_quiz_set_id,omitempty"`
	QuizType         v1.QuizType             `protobuf:"varint,2,opt,name=quiz_type,json=quizType,proto3,enum=common.v1.QuizType" json:"quiz_type,omitempty"`
	SelectedIndex    []uint32                `protobuf:"varint,3,rep,packed,name=selected_index,json=selectedIndex,proto3" json:"selected_index,omitempty"`
	CorrectIndex     []uint32                `protobuf:"varint,4,rep,packed,name=correct_index,json=correctIndex,proto3" json:"correct_index,omitempty"`
	FilledText       []string                `protobuf:"bytes,5,rep,name=filled_text,json=filledText,proto3" json:"filled_text,omitempty"`
	CorrectText      []string                `protobuf:"bytes,6,rep,name=correct_text,json=correctText,proto3" json:"correct_text,omitempty"`
	Correctness      []bool                  `protobuf:"varint,7,rep,packed,name=correctness,proto3" json:"correctness,omitempty"`
	IsAccepted       bool                    `protobuf:"varint,8,opt,name=is_accepted,json=isAccepted,proto3" json:"is_accepted,omitempty"`
	Core             *v1.QuizCore            `protobuf:"bytes,9,opt,name=core,proto3" json:"core,omitempty"`
	TeacherComment   string                  `protobuf:"bytes,10,opt,name=teacher_comment,json=teacherComment,proto3" json:"teacher_comment,omitempty"` // (question level)
	GradedPoint      *wrapperspb.UInt32Value `protobuf:"bytes,11,opt,name=graded_point,json=gradedPoint,proto3" json:"graded_point,omitempty"`          // (point student gained for that question, if there is no record in score table -> get from answer table)
	Point            *wrapperspb.UInt32Value `protobuf:"bytes,12,opt,name=point,proto3" json:"point,omitempty"`                                         // (point from answer table)
	// Types that are assignable to Result:
	//
	//	*ExamLOSubmissionScore_OrderingResult
	Result isExamLOSubmissionScore_Result `protobuf_oneof:"result"`
}

func (x *ExamLOSubmissionScore) Reset() {
	*x = ExamLOSubmissionScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExamLOSubmissionScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamLOSubmissionScore) ProtoMessage() {}

func (x *ExamLOSubmissionScore) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamLOSubmissionScore.ProtoReflect.Descriptor instead.
func (*ExamLOSubmissionScore) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{16}
}

func (x *ExamLOSubmissionScore) GetShuffleQuizSetId() string {
	if x != nil {
		return x.ShuffleQuizSetId
	}
	return ""
}

func (x *ExamLOSubmissionScore) GetQuizType() v1.QuizType {
	if x != nil {
		return x.QuizType
	}
	return v1.QuizType_QUIZ_TYPE_MCQ
}

func (x *ExamLOSubmissionScore) GetSelectedIndex() []uint32 {
	if x != nil {
		return x.SelectedIndex
	}
	return nil
}

func (x *ExamLOSubmissionScore) GetCorrectIndex() []uint32 {
	if x != nil {
		return x.CorrectIndex
	}
	return nil
}

func (x *ExamLOSubmissionScore) GetFilledText() []string {
	if x != nil {
		return x.FilledText
	}
	return nil
}

func (x *ExamLOSubmissionScore) GetCorrectText() []string {
	if x != nil {
		return x.CorrectText
	}
	return nil
}

func (x *ExamLOSubmissionScore) GetCorrectness() []bool {
	if x != nil {
		return x.Correctness
	}
	return nil
}

func (x *ExamLOSubmissionScore) GetIsAccepted() bool {
	if x != nil {
		return x.IsAccepted
	}
	return false
}

func (x *ExamLOSubmissionScore) GetCore() *v1.QuizCore {
	if x != nil {
		return x.Core
	}
	return nil
}

func (x *ExamLOSubmissionScore) GetTeacherComment() string {
	if x != nil {
		return x.TeacherComment
	}
	return ""
}

func (x *ExamLOSubmissionScore) GetGradedPoint() *wrapperspb.UInt32Value {
	if x != nil {
		return x.GradedPoint
	}
	return nil
}

func (x *ExamLOSubmissionScore) GetPoint() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Point
	}
	return nil
}

func (m *ExamLOSubmissionScore) GetResult() isExamLOSubmissionScore_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *ExamLOSubmissionScore) GetOrderingResult() *v1.OrderingResult {
	if x, ok := x.GetResult().(*ExamLOSubmissionScore_OrderingResult); ok {
		return x.OrderingResult
	}
	return nil
}

type isExamLOSubmissionScore_Result interface {
	isExamLOSubmissionScore_Result()
}

type ExamLOSubmissionScore_OrderingResult struct {
	OrderingResult *v1.OrderingResult `protobuf:"bytes,13,opt,name=ordering_result,json=orderingResult,proto3,oneof"`
}

func (*ExamLOSubmissionScore_OrderingResult) isExamLOSubmissionScore_Result() {}

type ListExamLOSubmissionResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudyPlanItemIdentities []*StudyPlanItemIdentity `protobuf:"bytes,1,rep,name=study_plan_item_identities,json=studyPlanItemIdentities,proto3" json:"study_plan_item_identities,omitempty"`
}

func (x *ListExamLOSubmissionResultRequest) Reset() {
	*x = ListExamLOSubmissionResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExamLOSubmissionResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExamLOSubmissionResultRequest) ProtoMessage() {}

func (x *ListExamLOSubmissionResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExamLOSubmissionResultRequest.ProtoReflect.Descriptor instead.
func (*ListExamLOSubmissionResultRequest) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{17}
}

func (x *ListExamLOSubmissionResultRequest) GetStudyPlanItemIdentities() []*StudyPlanItemIdentity {
	if x != nil {
		return x.StudyPlanItemIdentities
	}
	return nil
}

type ListExamLOSubmissionResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items         []*ListExamLOSubmissionResultResponseItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	HighestCrown  v1.AchievementCrown                       `protobuf:"varint,2,opt,name=highest_crown,json=highestCrown,proto3,enum=common.v1.AchievementCrown" json:"highest_crown,omitempty"`
	TotalAttempts int32                                     `protobuf:"varint,3,opt,name=total_attempts,json=totalAttempts,proto3" json:"total_attempts,omitempty"`
	HighestScore  *HighestQuestionScore                     `protobuf:"bytes,4,opt,name=highest_score,json=highestScore,proto3" json:"highest_score,omitempty"`
}

func (x *ListExamLOSubmissionResultResponse) Reset() {
	*x = ListExamLOSubmissionResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExamLOSubmissionResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExamLOSubmissionResultResponse) ProtoMessage() {}

func (x *ListExamLOSubmissionResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExamLOSubmissionResultResponse.ProtoReflect.Descriptor instead.
func (*ListExamLOSubmissionResultResponse) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{18}
}

func (x *ListExamLOSubmissionResultResponse) GetItems() []*ListExamLOSubmissionResultResponseItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListExamLOSubmissionResultResponse) GetHighestCrown() v1.AchievementCrown {
	if x != nil {
		return x.HighestCrown
	}
	return v1.AchievementCrown_ACHIEVEMENT_CROWN_NONE
}

func (x *ListExamLOSubmissionResultResponse) GetTotalAttempts() int32 {
	if x != nil {
		return x.TotalAttempts
	}
	return 0
}

func (x *ListExamLOSubmissionResultResponse) GetHighestScore() *HighestQuestionScore {
	if x != nil {
		return x.HighestScore
	}
	return nil
}

type ExamLOSubmissions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ExamLOSubmissionInfo `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ExamLOSubmissions) Reset() {
	*x = ExamLOSubmissions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExamLOSubmissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamLOSubmissions) ProtoMessage() {}

func (x *ExamLOSubmissions) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamLOSubmissions.ProtoReflect.Descriptor instead.
func (*ExamLOSubmissions) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{19}
}

func (x *ExamLOSubmissions) GetItems() []*ExamLOSubmissionInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

type ExamLOSubmissionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShuffledQuizSetId string                  `protobuf:"bytes,1,opt,name=shuffled_quiz_set_id,json=shuffledQuizSetId,proto3" json:"shuffled_quiz_set_id,omitempty"`
	TotalGradedPoint  *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=total_graded_point,json=totalGradedPoint,proto3" json:"total_graded_point,omitempty"`
	TotalPoint        *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=total_point,json=totalPoint,proto3" json:"total_point,omitempty"`
	SubmissionResult  ExamLOSubmissionResult  `protobuf:"varint,4,opt,name=submission_result,json=submissionResult,proto3,enum=syllabus.v1.ExamLOSubmissionResult" json:"submission_result,omitempty"`
	SubmissionStatus  SubmissionStatus        `protobuf:"varint,5,opt,name=submission_status,json=submissionStatus,proto3,enum=syllabus.v1.SubmissionStatus" json:"submission_status,omitempty"`
	CreatedAt         *timestamppb.Timestamp  `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CompletedAt       *timestamppb.Timestamp  `protobuf:"bytes,7,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	TotalLearningTime int64                   `protobuf:"varint,8,opt,name=total_learning_time,json=totalLearningTime,proto3" json:"total_learning_time,omitempty"`
	SubmissionId      string                  `protobuf:"bytes,9,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"`
}

func (x *ExamLOSubmissionInfo) Reset() {
	*x = ExamLOSubmissionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExamLOSubmissionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExamLOSubmissionInfo) ProtoMessage() {}

func (x *ExamLOSubmissionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExamLOSubmissionInfo.ProtoReflect.Descriptor instead.
func (*ExamLOSubmissionInfo) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{20}
}

func (x *ExamLOSubmissionInfo) GetShuffledQuizSetId() string {
	if x != nil {
		return x.ShuffledQuizSetId
	}
	return ""
}

func (x *ExamLOSubmissionInfo) GetTotalGradedPoint() *wrapperspb.UInt32Value {
	if x != nil {
		return x.TotalGradedPoint
	}
	return nil
}

func (x *ExamLOSubmissionInfo) GetTotalPoint() *wrapperspb.UInt32Value {
	if x != nil {
		return x.TotalPoint
	}
	return nil
}

func (x *ExamLOSubmissionInfo) GetSubmissionResult() ExamLOSubmissionResult {
	if x != nil {
		return x.SubmissionResult
	}
	return ExamLOSubmissionResult_EXAM_LO_SUBMISSION_WAITING_FOR_GRADE
}

func (x *ExamLOSubmissionInfo) GetSubmissionStatus() SubmissionStatus {
	if x != nil {
		return x.SubmissionStatus
	}
	return SubmissionStatus_SUBMISSION_STATUS_NONE
}

func (x *ExamLOSubmissionInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ExamLOSubmissionInfo) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

func (x *ExamLOSubmissionInfo) GetTotalLearningTime() int64 {
	if x != nil {
		return x.TotalLearningTime
	}
	return 0
}

func (x *ExamLOSubmissionInfo) GetSubmissionId() string {
	if x != nil {
		return x.SubmissionId
	}
	return ""
}

type GradeAManualGradingExamSubmissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubmissionId      string              `protobuf:"bytes,1,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"`
	ShuffledQuizSetId string              `protobuf:"bytes,2,opt,name=shuffled_quiz_set_id,json=shuffledQuizSetId,proto3" json:"shuffled_quiz_set_id,omitempty"`
	TeacherFeedback   string              `protobuf:"bytes,3,opt,name=teacher_feedback,json=teacherFeedback,proto3" json:"teacher_feedback,omitempty"`
	SubmissionStatus  SubmissionStatus    `protobuf:"varint,4,opt,name=submission_status,json=submissionStatus,proto3,enum=syllabus.v1.SubmissionStatus" json:"submission_status,omitempty"`
	TeacherExamGrades []*TeacherExamGrade `protobuf:"bytes,5,rep,name=teacher_exam_grades,json=teacherExamGrades,proto3" json:"teacher_exam_grades,omitempty"`
}

func (x *GradeAManualGradingExamSubmissionRequest) Reset() {
	*x = GradeAManualGradingExamSubmissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradeAManualGradingExamSubmissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradeAManualGradingExamSubmissionRequest) ProtoMessage() {}

func (x *GradeAManualGradingExamSubmissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradeAManualGradingExamSubmissionRequest.ProtoReflect.Descriptor instead.
func (*GradeAManualGradingExamSubmissionRequest) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{21}
}

func (x *GradeAManualGradingExamSubmissionRequest) GetSubmissionId() string {
	if x != nil {
		return x.SubmissionId
	}
	return ""
}

func (x *GradeAManualGradingExamSubmissionRequest) GetShuffledQuizSetId() string {
	if x != nil {
		return x.ShuffledQuizSetId
	}
	return ""
}

func (x *GradeAManualGradingExamSubmissionRequest) GetTeacherFeedback() string {
	if x != nil {
		return x.TeacherFeedback
	}
	return ""
}

func (x *GradeAManualGradingExamSubmissionRequest) GetSubmissionStatus() SubmissionStatus {
	if x != nil {
		return x.SubmissionStatus
	}
	return SubmissionStatus_SUBMISSION_STATUS_NONE
}

func (x *GradeAManualGradingExamSubmissionRequest) GetTeacherExamGrades() []*TeacherExamGrade {
	if x != nil {
		return x.TeacherExamGrades
	}
	return nil
}

type TeacherExamGrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuizId            string                  `protobuf:"bytes,1,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	TeacherPointGiven *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=teacher_point_given,json=teacherPointGiven,proto3" json:"teacher_point_given,omitempty"`
	TeacherComment    string                  `protobuf:"bytes,3,opt,name=teacher_comment,json=teacherComment,proto3" json:"teacher_comment,omitempty"`
	Correctness       []bool                  `protobuf:"varint,4,rep,packed,name=correctness,proto3" json:"correctness,omitempty"`
	IsAccepted        bool                    `protobuf:"varint,5,opt,name=is_accepted,json=isAccepted,proto3" json:"is_accepted,omitempty"`
}

func (x *TeacherExamGrade) Reset() {
	*x = TeacherExamGrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeacherExamGrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeacherExamGrade) ProtoMessage() {}

func (x *TeacherExamGrade) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeacherExamGrade.ProtoReflect.Descriptor instead.
func (*TeacherExamGrade) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{22}
}

func (x *TeacherExamGrade) GetQuizId() string {
	if x != nil {
		return x.QuizId
	}
	return ""
}

func (x *TeacherExamGrade) GetTeacherPointGiven() *wrapperspb.UInt32Value {
	if x != nil {
		return x.TeacherPointGiven
	}
	return nil
}

func (x *TeacherExamGrade) GetTeacherComment() string {
	if x != nil {
		return x.TeacherComment
	}
	return ""
}

func (x *TeacherExamGrade) GetCorrectness() []bool {
	if x != nil {
		return x.Correctness
	}
	return nil
}

func (x *TeacherExamGrade) GetIsAccepted() bool {
	if x != nil {
		return x.IsAccepted
	}
	return false
}

type GradeAManualGradingExamSubmissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalGradedPoint *wrapperspb.UInt32Value `protobuf:"bytes,1,opt,name=total_graded_point,json=totalGradedPoint,proto3" json:"total_graded_point,omitempty"`
}

func (x *GradeAManualGradingExamSubmissionResponse) Reset() {
	*x = GradeAManualGradingExamSubmissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GradeAManualGradingExamSubmissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GradeAManualGradingExamSubmissionResponse) ProtoMessage() {}

func (x *GradeAManualGradingExamSubmissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GradeAManualGradingExamSubmissionResponse.ProtoReflect.Descriptor instead.
func (*GradeAManualGradingExamSubmissionResponse) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{23}
}

func (x *GradeAManualGradingExamSubmissionResponse) GetTotalGradedPoint() *wrapperspb.UInt32Value {
	if x != nil {
		return x.TotalGradedPoint
	}
	return nil
}

type DeleteExamLOSubmissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubmissionId string `protobuf:"bytes,1,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"`
}

func (x *DeleteExamLOSubmissionRequest) Reset() {
	*x = DeleteExamLOSubmissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExamLOSubmissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExamLOSubmissionRequest) ProtoMessage() {}

func (x *DeleteExamLOSubmissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExamLOSubmissionRequest.ProtoReflect.Descriptor instead.
func (*DeleteExamLOSubmissionRequest) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteExamLOSubmissionRequest) GetSubmissionId() string {
	if x != nil {
		return x.SubmissionId
	}
	return ""
}

type DeleteExamLOSubmissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteExamLOSubmissionResponse) Reset() {
	*x = DeleteExamLOSubmissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExamLOSubmissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExamLOSubmissionResponse) ProtoMessage() {}

func (x *DeleteExamLOSubmissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExamLOSubmissionResponse.ProtoReflect.Descriptor instead.
func (*DeleteExamLOSubmissionResponse) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{25}
}

type BulkApproveRejectSubmissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApproveGradingAction ApproveGradingAction `protobuf:"varint,1,opt,name=approveGradingAction,proto3,enum=syllabus.v1.ApproveGradingAction" json:"approveGradingAction,omitempty"`
	SubmissionIds        []string             `protobuf:"bytes,2,rep,name=submission_ids,json=submissionIds,proto3" json:"submission_ids,omitempty"`
}

func (x *BulkApproveRejectSubmissionRequest) Reset() {
	*x = BulkApproveRejectSubmissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkApproveRejectSubmissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkApproveRejectSubmissionRequest) ProtoMessage() {}

func (x *BulkApproveRejectSubmissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkApproveRejectSubmissionRequest.ProtoReflect.Descriptor instead.
func (*BulkApproveRejectSubmissionRequest) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{26}
}

func (x *BulkApproveRejectSubmissionRequest) GetApproveGradingAction() ApproveGradingAction {
	if x != nil {
		return x.ApproveGradingAction
	}
	return ApproveGradingAction_APPROVE_ACTION_NONE
}

func (x *BulkApproveRejectSubmissionRequest) GetSubmissionIds() []string {
	if x != nil {
		return x.SubmissionIds
	}
	return nil
}

type BulkApproveRejectSubmissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvalidSubmissionIds []string `protobuf:"bytes,1,rep,name=invalid_submission_ids,json=invalidSubmissionIds,proto3" json:"invalid_submission_ids,omitempty"`
}

func (x *BulkApproveRejectSubmissionResponse) Reset() {
	*x = BulkApproveRejectSubmissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkApproveRejectSubmissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkApproveRejectSubmissionResponse) ProtoMessage() {}

func (x *BulkApproveRejectSubmissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkApproveRejectSubmissionResponse.ProtoReflect.Descriptor instead.
func (*BulkApproveRejectSubmissionResponse) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{27}
}

func (x *BulkApproveRejectSubmissionResponse) GetInvalidSubmissionIds() []string {
	if x != nil {
		return x.InvalidSubmissionIds
	}
	return nil
}

type RetrieveMetadataTaggingResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubmissionId string `protobuf:"bytes,1,opt,name=submission_id,json=submissionId,proto3" json:"submission_id,omitempty"`
}

func (x *RetrieveMetadataTaggingResultRequest) Reset() {
	*x = RetrieveMetadataTaggingResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveMetadataTaggingResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveMetadataTaggingResultRequest) ProtoMessage() {}

func (x *RetrieveMetadataTaggingResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveMetadataTaggingResultRequest.ProtoReflect.Descriptor instead.
func (*RetrieveMetadataTaggingResultRequest) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{28}
}

func (x *RetrieveMetadataTaggingResultRequest) GetSubmissionId() string {
	if x != nil {
		return x.SubmissionId
	}
	return ""
}

type RetrieveMetadataTaggingResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaggingResults []*TaggingResult `protobuf:"bytes,1,rep,name=tagging_results,json=taggingResults,proto3" json:"tagging_results,omitempty"`
}

func (x *RetrieveMetadataTaggingResultResponse) Reset() {
	*x = RetrieveMetadataTaggingResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveMetadataTaggingResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveMetadataTaggingResultResponse) ProtoMessage() {}

func (x *RetrieveMetadataTaggingResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveMetadataTaggingResultResponse.ProtoReflect.Descriptor instead.
func (*RetrieveMetadataTaggingResultResponse) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{29}
}

func (x *RetrieveMetadataTaggingResultResponse) GetTaggingResults() []*TaggingResult {
	if x != nil {
		return x.TaggingResults
	}
	return nil
}

type TaggingResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TagId       string `protobuf:"bytes,1,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	TagName     string `protobuf:"bytes,2,opt,name=tag_name,json=tagName,proto3" json:"tag_name,omitempty"`
	GradedPoint uint32 `protobuf:"varint,3,opt,name=graded_point,json=gradedPoint,proto3" json:"graded_point,omitempty"`
	TotalPoint  uint32 `protobuf:"varint,4,opt,name=total_point,json=totalPoint,proto3" json:"total_point,omitempty"`
}

func (x *TaggingResult) Reset() {
	*x = TaggingResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaggingResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaggingResult) ProtoMessage() {}

func (x *TaggingResult) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaggingResult.ProtoReflect.Descriptor instead.
func (*TaggingResult) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{30}
}

func (x *TaggingResult) GetTagId() string {
	if x != nil {
		return x.TagId
	}
	return ""
}

func (x *TaggingResult) GetTagName() string {
	if x != nil {
		return x.TagName
	}
	return ""
}

func (x *TaggingResult) GetGradedPoint() uint32 {
	if x != nil {
		return x.GradedPoint
	}
	return 0
}

func (x *TaggingResult) GetTotalPoint() uint32 {
	if x != nil {
		return x.TotalPoint
	}
	return 0
}

type ListHighestResultExamLOSubmissionResponse_StudyPlanItemResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudyPlanItemIdentity        *StudyPlanItemIdentity `protobuf:"bytes,1,opt,name=study_plan_item_identity,json=studyPlanItemIdentity,proto3" json:"study_plan_item_identity,omitempty"`
	LatestExamLoSubmissionResult ExamLOSubmissionResult `protobuf:"varint,2,opt,name=latest_exam_lo_submission_result,json=latestExamLoSubmissionResult,proto3,enum=syllabus.v1.ExamLOSubmissionResult" json:"latest_exam_lo_submission_result,omitempty"`
}

func (x *ListHighestResultExamLOSubmissionResponse_StudyPlanItemResult) Reset() {
	*x = ListHighestResultExamLOSubmissionResponse_StudyPlanItemResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListHighestResultExamLOSubmissionResponse_StudyPlanItemResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListHighestResultExamLOSubmissionResponse_StudyPlanItemResult) ProtoMessage() {}

func (x *ListHighestResultExamLOSubmissionResponse_StudyPlanItemResult) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListHighestResultExamLOSubmissionResponse_StudyPlanItemResult.ProtoReflect.Descriptor instead.
func (*ListHighestResultExamLOSubmissionResponse_StudyPlanItemResult) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{10, 0}
}

func (x *ListHighestResultExamLOSubmissionResponse_StudyPlanItemResult) GetStudyPlanItemIdentity() *StudyPlanItemIdentity {
	if x != nil {
		return x.StudyPlanItemIdentity
	}
	return nil
}

func (x *ListHighestResultExamLOSubmissionResponse_StudyPlanItemResult) GetLatestExamLoSubmissionResult() ExamLOSubmissionResult {
	if x != nil {
		return x.LatestExamLoSubmissionResult
	}
	return ExamLOSubmissionResult_EXAM_LO_SUBMISSION_WAITING_FOR_GRADE
}

type ListExamLOSubmissionRequest_SubmittedDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *ListExamLOSubmissionRequest_SubmittedDate) Reset() {
	*x = ListExamLOSubmissionRequest_SubmittedDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExamLOSubmissionRequest_SubmittedDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExamLOSubmissionRequest_SubmittedDate) ProtoMessage() {}

func (x *ListExamLOSubmissionRequest_SubmittedDate) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExamLOSubmissionRequest_SubmittedDate.ProtoReflect.Descriptor instead.
func (*ListExamLOSubmissionRequest_SubmittedDate) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{11, 0}
}

func (x *ListExamLOSubmissionRequest_SubmittedDate) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ListExamLOSubmissionRequest_SubmittedDate) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

type ListExamLOSubmissionRequest_LastUpdatedDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *ListExamLOSubmissionRequest_LastUpdatedDate) Reset() {
	*x = ListExamLOSubmissionRequest_LastUpdatedDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExamLOSubmissionRequest_LastUpdatedDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExamLOSubmissionRequest_LastUpdatedDate) ProtoMessage() {}

func (x *ListExamLOSubmissionRequest_LastUpdatedDate) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExamLOSubmissionRequest_LastUpdatedDate.ProtoReflect.Descriptor instead.
func (*ListExamLOSubmissionRequest_LastUpdatedDate) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{11, 1}
}

func (x *ListExamLOSubmissionRequest_LastUpdatedDate) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ListExamLOSubmissionRequest_LastUpdatedDate) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

type ListExamLOSubmissionResultResponseItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudyPlanItemIdentity *StudyPlanItemIdentity `protobuf:"bytes,1,opt,name=study_plan_item_identity,json=studyPlanItemIdentity,proto3" json:"study_plan_item_identity,omitempty"`
	ExamLoSubmissions     *ExamLOSubmissions     `protobuf:"bytes,2,opt,name=exam_lo_submissions,json=examLoSubmissions,proto3" json:"exam_lo_submissions,omitempty"`
}

func (x *ListExamLOSubmissionResultResponseItem) Reset() {
	*x = ListExamLOSubmissionResultResponseItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListExamLOSubmissionResultResponseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListExamLOSubmissionResultResponseItem) ProtoMessage() {}

func (x *ListExamLOSubmissionResultResponseItem) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_exam_lo_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListExamLOSubmissionResultResponseItem.ProtoReflect.Descriptor instead.
func (*ListExamLOSubmissionResultResponseItem) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_exam_lo_service_proto_rawDescGZIP(), []int{18, 0}
}

func (x *ListExamLOSubmissionResultResponseItem) GetStudyPlanItemIdentity() *StudyPlanItemIdentity {
	if x != nil {
		return x.StudyPlanItemIdentity
	}
	return nil
}

func (x *ListExamLOSubmissionResultResponseItem) GetExamLoSubmissions() *ExamLOSubmissions {
	if x != nil {
		return x.ExamLoSubmissions
	}
	return nil
}

var File_syllabus_v1_exam_lo_service_proto protoreflect.FileDescriptor

var file_syllabus_v1_exam_lo_service_proto_rawDesc = []byte{
	0x0a, 0x21, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78,
	0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31,
	0x1a, 0x23, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76,
	0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a,
	0x04, 0x0a, 0x0a, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x42, 0x61, 0x73, 0x65, 0x12, 0x35, 0x0a,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x79,
	0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x52, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x74, 0x6f, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x54, 0x6f, 0x50, 0x61, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x47, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3a,
	0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f, 0x67, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x47, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12,
	0x44, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x41, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x12, 0x44, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x73,
	0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x4c,
	0x4f, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a, 0x13, 0x49,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x42, 0x61, 0x73, 0x65, 0x52, 0x06, 0x65, 0x78,
	0x61, 0x6d, 0x4c, 0x6f, 0x22, 0x58, 0x0a, 0x1d, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x20,
	0x0a, 0x1e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65, 0x42, 0x6f, 0x6f,
	0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x48, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x65, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x13, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x30, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x42, 0x61, 0x73, 0x65, 0x52, 0x06, 0x65, 0x78, 0x61,
	0x6d, 0x4c, 0x6f, 0x22, 0x16, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61,
	0x6d, 0x4c, 0x4f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x0a, 0x11, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x15, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x13, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x49, 0x64, 0x73, 0x22, 0x48, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d,
	0x4c, 0x4f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x65, 0x78,
	0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x4c,
	0x4f, 0x42, 0x61, 0x73, 0x65, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x4c, 0x6f, 0x73, 0x22, 0x8b,
	0x01, 0x0a, 0x28, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x1a, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x75, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x17, 0x73, 0x74, 0x75, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x91, 0x03, 0x0a,
	0x29, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x17, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x73,
	0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x78, 0x61, 0x6d,
	0x4c, 0x4f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x14, 0x73, 0x74, 0x75, 0x64, 0x79, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xdf,
	0x01, 0x0a, 0x13, 0x53, 0x74, 0x75, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5b, 0x0a, 0x18, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61,
	0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x6e,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x15, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x6b, 0x0a, 0x20, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x78,
	0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d,
	0x4c, 0x4f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x1c, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x6f,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x87, 0x08, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x09, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x49, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x30,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a,
	0x0c, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x5d,
	0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0d,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x64, 0x0a,
	0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61,
	0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x4c,
	0x4f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x6f, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x1a, 0x71, 0x0a, 0x0f, 0x4c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03,
	0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x1c, 0x4c,
	0x69, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x79, 0x6c,
	0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0xb0, 0x07, 0x0a, 0x10, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x18, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73,
	0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79,
	0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x15, 0x73, 0x74, 0x75, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x68, 0x75, 0x66, 0x66,
	0x6c, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x64, 0x51,
	0x75, 0x69, 0x7a, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x10, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x61, 0x6d, 0x4c, 0x4f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x10, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x42, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x47, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x6d, 0x61,
	0x72, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x44,
	0x61, 0x74, 0x65, 0x22, 0x78, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x4c,
	0x4f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14,
	0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x68, 0x75, 0x66,
	0x66, 0x6c, 0x65, 0x64, 0x51, 0x75, 0x69, 0x7a, 0x53, 0x65, 0x74, 0x49, 0x64, 0x22, 0x8b, 0x04,
	0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61,
	0x6d, 0x4c, 0x4f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x52, 0x10, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x5f,
	0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12,
	0x4a, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x79, 0x6c,
	0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x11, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x10, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4a, 0x0a,
	0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0e, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0xe2, 0x04, 0x0a, 0x15,
	0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65,
	0x5f, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x53,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x71, 0x75,
	0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x65, 0x61,
	0x63, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x05,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x44, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x84, 0x01, 0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x1a, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f,
	0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x79, 0x6c,
	0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x50, 0x6c,
	0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x17,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0xd7, 0x03, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x69,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x68, 0x69,
	0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x72, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x6f, 0x77, 0x6e, 0x52, 0x0c,
	0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x77, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x0d, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x79, 0x6c,
	0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x0c, 0x68,
	0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0xb3, 0x01, 0x0a, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x12, 0x5b, 0x0a, 0x18, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x15, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x4e, 0x0a, 0x13, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x6c, 0x6f, 0x5f, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61,
	0x6d, 0x4c, 0x4f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x11,
	0x65, 0x78, 0x61, 0x6d, 0x4c, 0x6f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x4c, 0x0a, 0x11, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0xbf, 0x04, 0x0a, 0x14, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x68, 0x75, 0x66,
	0x66, 0x6c, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x64,
	0x51, 0x75, 0x69, 0x7a, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x12, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x72, 0x61, 0x64, 0x65, 0x64,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x61, 0x6d, 0x4c, 0x4f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x10, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4a, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x10, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2e, 0x0a, 0x13,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0xc6, 0x02, 0x0a, 0x28, 0x47, 0x72, 0x61, 0x64, 0x65, 0x41, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x47, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x64, 0x5f,
	0x71, 0x75, 0x69, 0x7a, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x64, 0x51, 0x75, 0x69, 0x7a, 0x53,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x5f,
	0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12,
	0x4a, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x79, 0x6c,
	0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x13, 0x74,
	0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61,
	0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x45, 0x78,
	0x61, 0x6d, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x11, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72,
	0x45, 0x78, 0x61, 0x6d, 0x47, 0x72, 0x61, 0x64, 0x65, 0x73, 0x22, 0xe5, 0x01, 0x0a, 0x10, 0x54,
	0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x45, 0x78, 0x61, 0x6d, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x71, 0x75, 0x69, 0x7a, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x13, 0x74, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x11, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x47, 0x69, 0x76, 0x65, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x22, 0x77, 0x0a, 0x29, 0x47, 0x72, 0x61, 0x64, 0x65, 0x41, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x47, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4a, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x47, 0x72, 0x61, 0x64, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x44, 0x0a, 0x1d, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x20, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x4c,
	0x4f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x22, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x14, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x47, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61,
	0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x47, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x47, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x5b, 0x0a, 0x23, 0x42, 0x75, 0x6c, 0x6b,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x16, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x14, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x4b, 0x0a, 0x24, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x54, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x6c, 0x0a, 0x25, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x54, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x74,
	0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x0e, 0x74, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x22, 0x85, 0x01, 0x0a, 0x0d, 0x54, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x67,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x32, 0x85, 0x0b, 0x0a, 0x06, 0x45, 0x78, 0x61,
	0x6d, 0x4c, 0x4f, 0x12, 0x53, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x45, 0x78, 0x61,
	0x6d, 0x4c, 0x4f, 0x12, 0x20, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x12, 0x20, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61,
	0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x61,
	0x6d, 0x4c, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x79, 0x6c,
	0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a,
	0x0a, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x12, 0x1e, 0x2e, 0x73, 0x79,
	0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78,
	0x61, 0x6d, 0x4c, 0x4f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x79,
	0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78,
	0x61, 0x6d, 0x4c, 0x4f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x92, 0x01, 0x0a,
	0x21, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x35, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x73, 0x79, 0x6c, 0x6c,
	0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x69, 0x67, 0x68,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6b, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x73, 0x79, 0x6c, 0x6c,
	0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d,
	0x4c, 0x4f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a,
	0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x2d, 0x2e, 0x73, 0x79,
	0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78,
	0x61, 0x6d, 0x4c, 0x4f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x79, 0x6c,
	0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x61,
	0x6d, 0x4c, 0x4f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2e, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61,
	0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x4c,
	0x4f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61,
	0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x4c,
	0x4f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x21, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x41, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x47, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x35, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x41, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x47, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x61, 0x64, 0x65, 0x41, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x47, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x61, 0x6d, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61,
	0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x61,
	0x6d, 0x4c, 0x4f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x71, 0x0a, 0x16, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x2e, 0x73, 0x79,
	0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x47, 0x72, 0x61, 0x64, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62,
	0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x47, 0x72, 0x61, 0x64,
	0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x1b, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x54, 0x61, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x31, 0x2e, 0x73, 0x79, 0x6c, 0x6c,
	0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x54, 0x61, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x73,
	0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x54, 0x61, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d,
	0x61, 0x6e, 0x61, 0x62, 0x69, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x73, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_syllabus_v1_exam_lo_service_proto_rawDescOnce sync.Once
	file_syllabus_v1_exam_lo_service_proto_rawDescData = file_syllabus_v1_exam_lo_service_proto_rawDesc
)

func file_syllabus_v1_exam_lo_service_proto_rawDescGZIP() []byte {
	file_syllabus_v1_exam_lo_service_proto_rawDescOnce.Do(func() {
		file_syllabus_v1_exam_lo_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_syllabus_v1_exam_lo_service_proto_rawDescData)
	})
	return file_syllabus_v1_exam_lo_service_proto_rawDescData
}

var file_syllabus_v1_exam_lo_service_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_syllabus_v1_exam_lo_service_proto_goTypes = []interface{}{
	(*ExamLOBase)(nil),                                                    // 0: syllabus.v1.ExamLOBase
	(*InsertExamLORequest)(nil),                                           // 1: syllabus.v1.InsertExamLORequest
	(*UpsertGradeBookSettingRequest)(nil),                                 // 2: syllabus.v1.UpsertGradeBookSettingRequest
	(*UpsertGradeBookSettingResponse)(nil),                                // 3: syllabus.v1.UpsertGradeBookSettingResponse
	(*InsertExamLOResponse)(nil),                                          // 4: syllabus.v1.InsertExamLOResponse
	(*UpdateExamLORequest)(nil),                                           // 5: syllabus.v1.UpdateExamLORequest
	(*UpdateExamLOResponse)(nil),                                          // 6: syllabus.v1.UpdateExamLOResponse
	(*ListExamLORequest)(nil),                                             // 7: syllabus.v1.ListExamLORequest
	(*ListExamLOResponse)(nil),                                            // 8: syllabus.v1.ListExamLOResponse
	(*ListHighestResultExamLOSubmissionRequest)(nil),                      // 9: syllabus.v1.ListHighestResultExamLOSubmissionRequest
	(*ListHighestResultExamLOSubmissionResponse)(nil),                     // 10: syllabus.v1.ListHighestResultExamLOSubmissionResponse
	(*ListExamLOSubmissionRequest)(nil),                                   // 11: syllabus.v1.ListExamLOSubmissionRequest
	(*ListExamLOSubmissionResponse)(nil),                                  // 12: syllabus.v1.ListExamLOSubmissionResponse
	(*ExamLOSubmission)(nil),                                              // 13: syllabus.v1.ExamLOSubmission
	(*ListExamLOSubmissionScoreRequest)(nil),                              // 14: syllabus.v1.ListExamLOSubmissionScoreRequest
	(*ListExamLOSubmissionScoreResponse)(nil),                             // 15: syllabus.v1.ListExamLOSubmissionScoreResponse
	(*ExamLOSubmissionScore)(nil),                                         // 16: syllabus.v1.ExamLOSubmissionScore
	(*ListExamLOSubmissionResultRequest)(nil),                             // 17: syllabus.v1.ListExamLOSubmissionResultRequest
	(*ListExamLOSubmissionResultResponse)(nil),                            // 18: syllabus.v1.ListExamLOSubmissionResultResponse
	(*ExamLOSubmissions)(nil),                                             // 19: syllabus.v1.ExamLOSubmissions
	(*ExamLOSubmissionInfo)(nil),                                          // 20: syllabus.v1.ExamLOSubmissionInfo
	(*GradeAManualGradingExamSubmissionRequest)(nil),                      // 21: syllabus.v1.GradeAManualGradingExamSubmissionRequest
	(*TeacherExamGrade)(nil),                                              // 22: syllabus.v1.TeacherExamGrade
	(*GradeAManualGradingExamSubmissionResponse)(nil),                     // 23: syllabus.v1.GradeAManualGradingExamSubmissionResponse
	(*DeleteExamLOSubmissionRequest)(nil),                                 // 24: syllabus.v1.DeleteExamLOSubmissionRequest
	(*DeleteExamLOSubmissionResponse)(nil),                                // 25: syllabus.v1.DeleteExamLOSubmissionResponse
	(*BulkApproveRejectSubmissionRequest)(nil),                            // 26: syllabus.v1.BulkApproveRejectSubmissionRequest
	(*BulkApproveRejectSubmissionResponse)(nil),                           // 27: syllabus.v1.BulkApproveRejectSubmissionResponse
	(*RetrieveMetadataTaggingResultRequest)(nil),                          // 28: syllabus.v1.RetrieveMetadataTaggingResultRequest
	(*RetrieveMetadataTaggingResultResponse)(nil),                         // 29: syllabus.v1.RetrieveMetadataTaggingResultResponse
	(*TaggingResult)(nil),                                                 // 30: syllabus.v1.TaggingResult
	(*ListHighestResultExamLOSubmissionResponse_StudyPlanItemResult)(nil), // 31: syllabus.v1.ListHighestResultExamLOSubmissionResponse.StudyPlanItemResult
	(*ListExamLOSubmissionRequest_SubmittedDate)(nil),                     // 32: syllabus.v1.ListExamLOSubmissionRequest.SubmittedDate
	(*ListExamLOSubmissionRequest_LastUpdatedDate)(nil),                   // 33: syllabus.v1.ListExamLOSubmissionRequest.LastUpdatedDate
	(*ListExamLOSubmissionResultResponseItem)(nil),                        // 34: syllabus.v1.ListExamLOSubmissionResultResponse.item
	(*LearningMaterialBase)(nil),                                          // 35: syllabus.v1.LearningMaterialBase
	(*wrapperspb.Int32Value)(nil),                                         // 36: google.protobuf.Int32Value
	(ExamLOReviewOption)(0),                                               // 37: syllabus.v1.ExamLOReviewOption
	(GradeBookSetting)(0),                                                 // 38: syllabus.v1.GradeBookSetting
	(*StudyPlanItemIdentity)(nil),                                         // 39: syllabus.v1.StudyPlanItemIdentity
	(*v1.Paging)(nil),                                                     // 40: common.v1.Paging
	(*wrapperspb.StringValue)(nil),                                        // 41: google.protobuf.StringValue
	(SubmissionStatus)(0),                                                 // 42: syllabus.v1.SubmissionStatus
	(*timestamppb.Timestamp)(nil),                                         // 43: google.protobuf.Timestamp
	(ExamLOSubmissionResult)(0),                                           // 44: syllabus.v1.ExamLOSubmissionResult
	(ApproveGradingAction)(0),                                             // 45: syllabus.v1.ApproveGradingAction
	(*wrapperspb.UInt32Value)(nil),                                        // 46: google.protobuf.UInt32Value
	(*v1.QuestionGroup)(nil),                                              // 47: common.v1.QuestionGroup
	(v1.QuizType)(0),                                                      // 48: common.v1.QuizType
	(*v1.QuizCore)(nil),                                                   // 49: common.v1.QuizCore
	(*v1.OrderingResult)(nil),                                             // 50: common.v1.OrderingResult
	(v1.AchievementCrown)(0),                                              // 51: common.v1.AchievementCrown
	(*HighestQuestionScore)(nil),                                          // 52: syllabus.v1.HighestQuestionScore
}
var file_syllabus_v1_exam_lo_service_proto_depIdxs = []int32{
	35, // 0: syllabus.v1.ExamLOBase.base:type_name -> syllabus.v1.LearningMaterialBase
	36, // 1: syllabus.v1.ExamLOBase.grade_to_pass:type_name -> google.protobuf.Int32Value
	36, // 2: syllabus.v1.ExamLOBase.time_limit:type_name -> google.protobuf.Int32Value
	36, // 3: syllabus.v1.ExamLOBase.maximum_attempt:type_name -> google.protobuf.Int32Value
	37, // 4: syllabus.v1.ExamLOBase.review_option:type_name -> syllabus.v1.ExamLOReviewOption
	0,  // 5: syllabus.v1.InsertExamLORequest.exam_lo:type_name -> syllabus.v1.ExamLOBase
	38, // 6: syllabus.v1.UpsertGradeBookSettingRequest.setting:type_name -> syllabus.v1.GradeBookSetting
	0,  // 7: syllabus.v1.UpdateExamLORequest.exam_lo:type_name -> syllabus.v1.ExamLOBase
	0,  // 8: syllabus.v1.ListExamLOResponse.exam_los:type_name -> syllabus.v1.ExamLOBase
	39, // 9: syllabus.v1.ListHighestResultExamLOSubmissionRequest.study_plan_item_identities:type_name -> syllabus.v1.StudyPlanItemIdentity
	31, // 10: syllabus.v1.ListHighestResultExamLOSubmissionResponse.study_plan_item_results:type_name -> syllabus.v1.ListHighestResultExamLOSubmissionResponse.StudyPlanItemResult
	40, // 11: syllabus.v1.ListExamLOSubmissionRequest.paging:type_name -> common.v1.Paging
	41, // 12: syllabus.v1.ListExamLOSubmissionRequest.course_id:type_name -> google.protobuf.StringValue
	42, // 13: syllabus.v1.ListExamLOSubmissionRequest.statuses:type_name -> syllabus.v1.SubmissionStatus
	43, // 14: syllabus.v1.ListExamLOSubmissionRequest.start:type_name -> google.protobuf.Timestamp
	43, // 15: syllabus.v1.ListExamLOSubmissionRequest.end:type_name -> google.protobuf.Timestamp
	41, // 16: syllabus.v1.ListExamLOSubmissionRequest.student_name:type_name -> google.protobuf.StringValue
	41, // 17: syllabus.v1.ListExamLOSubmissionRequest.exam_name:type_name -> google.protobuf.StringValue
	41, // 18: syllabus.v1.ListExamLOSubmissionRequest.corrector_id:type_name -> google.protobuf.StringValue
	32, // 19: syllabus.v1.ListExamLOSubmissionRequest.submitted_date:type_name -> syllabus.v1.ListExamLOSubmissionRequest.SubmittedDate
	33, // 20: syllabus.v1.ListExamLOSubmissionRequest.last_updated_date:type_name -> syllabus.v1.ListExamLOSubmissionRequest.LastUpdatedDate
	41, // 21: syllabus.v1.ListExamLOSubmissionRequest.submission_id:type_name -> google.protobuf.StringValue
	40, // 22: syllabus.v1.ListExamLOSubmissionResponse.next_page:type_name -> common.v1.Paging
	13, // 23: syllabus.v1.ListExamLOSubmissionResponse.items:type_name -> syllabus.v1.ExamLOSubmission
	39, // 24: syllabus.v1.ExamLOSubmission.study_plan_item_identity:type_name -> syllabus.v1.StudyPlanItemIdentity
	42, // 25: syllabus.v1.ExamLOSubmission.submission_status:type_name -> syllabus.v1.SubmissionStatus
	44, // 26: syllabus.v1.ExamLOSubmission.submission_result:type_name -> syllabus.v1.ExamLOSubmissionResult
	43, // 27: syllabus.v1.ExamLOSubmission.submitted_at:type_name -> google.protobuf.Timestamp
	43, // 28: syllabus.v1.ExamLOSubmission.updated_at:type_name -> google.protobuf.Timestamp
	43, // 29: syllabus.v1.ExamLOSubmission.start_date:type_name -> google.protobuf.Timestamp
	43, // 30: syllabus.v1.ExamLOSubmission.end_date:type_name -> google.protobuf.Timestamp
	45, // 31: syllabus.v1.ExamLOSubmission.last_action:type_name -> syllabus.v1.ApproveGradingAction
	43, // 32: syllabus.v1.ExamLOSubmission.last_action_at:type_name -> google.protobuf.Timestamp
	41, // 33: syllabus.v1.ExamLOSubmission.last_action_by:type_name -> google.protobuf.StringValue
	41, // 34: syllabus.v1.ExamLOSubmission.corrector_id:type_name -> google.protobuf.StringValue
	43, // 35: syllabus.v1.ExamLOSubmission.mark_date:type_name -> google.protobuf.Timestamp
	16, // 36: syllabus.v1.ListExamLOSubmissionScoreResponse.submission_scores:type_name -> syllabus.v1.ExamLOSubmissionScore
	42, // 37: syllabus.v1.ListExamLOSubmissionScoreResponse.submission_status:type_name -> syllabus.v1.SubmissionStatus
	44, // 38: syllabus.v1.ListExamLOSubmissionScoreResponse.submission_result:type_name -> syllabus.v1.ExamLOSubmissionResult
	46, // 39: syllabus.v1.ListExamLOSubmissionScoreResponse.total_graded_point:type_name -> google.protobuf.UInt32Value
	46, // 40: syllabus.v1.ListExamLOSubmissionScoreResponse.total_point:type_name -> google.protobuf.UInt32Value
	47, // 41: syllabus.v1.ListExamLOSubmissionScoreResponse.question_groups:type_name -> common.v1.QuestionGroup
	48, // 42: syllabus.v1.ExamLOSubmissionScore.quiz_type:type_name -> common.v1.QuizType
	49, // 43: syllabus.v1.ExamLOSubmissionScore.core:type_name -> common.v1.QuizCore
	46, // 44: syllabus.v1.ExamLOSubmissionScore.graded_point:type_name -> google.protobuf.UInt32Value
	46, // 45: syllabus.v1.ExamLOSubmissionScore.point:type_name -> google.protobuf.UInt32Value
	50, // 46: syllabus.v1.ExamLOSubmissionScore.ordering_result:type_name -> common.v1.OrderingResult
	39, // 47: syllabus.v1.ListExamLOSubmissionResultRequest.study_plan_item_identities:type_name -> syllabus.v1.StudyPlanItemIdentity
	34, // 48: syllabus.v1.ListExamLOSubmissionResultResponse.items:type_name -> syllabus.v1.ListExamLOSubmissionResultResponse.item
	51, // 49: syllabus.v1.ListExamLOSubmissionResultResponse.highest_crown:type_name -> common.v1.AchievementCrown
	52, // 50: syllabus.v1.ListExamLOSubmissionResultResponse.highest_score:type_name -> syllabus.v1.HighestQuestionScore
	20, // 51: syllabus.v1.ExamLOSubmissions.items:type_name -> syllabus.v1.ExamLOSubmissionInfo
	46, // 52: syllabus.v1.ExamLOSubmissionInfo.total_graded_point:type_name -> google.protobuf.UInt32Value
	46, // 53: syllabus.v1.ExamLOSubmissionInfo.total_point:type_name -> google.protobuf.UInt32Value
	44, // 54: syllabus.v1.ExamLOSubmissionInfo.submission_result:type_name -> syllabus.v1.ExamLOSubmissionResult
	42, // 55: syllabus.v1.ExamLOSubmissionInfo.submission_status:type_name -> syllabus.v1.SubmissionStatus
	43, // 56: syllabus.v1.ExamLOSubmissionInfo.created_at:type_name -> google.protobuf.Timestamp
	43, // 57: syllabus.v1.ExamLOSubmissionInfo.completed_at:type_name -> google.protobuf.Timestamp
	42, // 58: syllabus.v1.GradeAManualGradingExamSubmissionRequest.submission_status:type_name -> syllabus.v1.SubmissionStatus
	22, // 59: syllabus.v1.GradeAManualGradingExamSubmissionRequest.teacher_exam_grades:type_name -> syllabus.v1.TeacherExamGrade
	46, // 60: syllabus.v1.TeacherExamGrade.teacher_point_given:type_name -> google.protobuf.UInt32Value
	46, // 61: syllabus.v1.GradeAManualGradingExamSubmissionResponse.total_graded_point:type_name -> google.protobuf.UInt32Value
	45, // 62: syllabus.v1.BulkApproveRejectSubmissionRequest.approveGradingAction:type_name -> syllabus.v1.ApproveGradingAction
	30, // 63: syllabus.v1.RetrieveMetadataTaggingResultResponse.tagging_results:type_name -> syllabus.v1.TaggingResult
	39, // 64: syllabus.v1.ListHighestResultExamLOSubmissionResponse.StudyPlanItemResult.study_plan_item_identity:type_name -> syllabus.v1.StudyPlanItemIdentity
	44, // 65: syllabus.v1.ListHighestResultExamLOSubmissionResponse.StudyPlanItemResult.latest_exam_lo_submission_result:type_name -> syllabus.v1.ExamLOSubmissionResult
	43, // 66: syllabus.v1.ListExamLOSubmissionRequest.SubmittedDate.start:type_name -> google.protobuf.Timestamp
	43, // 67: syllabus.v1.ListExamLOSubmissionRequest.SubmittedDate.end:type_name -> google.protobuf.Timestamp
	43, // 68: syllabus.v1.ListExamLOSubmissionRequest.LastUpdatedDate.start:type_name -> google.protobuf.Timestamp
	43, // 69: syllabus.v1.ListExamLOSubmissionRequest.LastUpdatedDate.end:type_name -> google.protobuf.Timestamp
	39, // 70: syllabus.v1.ListExamLOSubmissionResultResponse.item.study_plan_item_identity:type_name -> syllabus.v1.StudyPlanItemIdentity
	19, // 71: syllabus.v1.ListExamLOSubmissionResultResponse.item.exam_lo_submissions:type_name -> syllabus.v1.ExamLOSubmissions
	1,  // 72: syllabus.v1.ExamLO.InsertExamLO:input_type -> syllabus.v1.InsertExamLORequest
	5,  // 73: syllabus.v1.ExamLO.UpdateExamLO:input_type -> syllabus.v1.UpdateExamLORequest
	7,  // 74: syllabus.v1.ExamLO.ListExamLO:input_type -> syllabus.v1.ListExamLORequest
	9,  // 75: syllabus.v1.ExamLO.ListHighestResultExamLOSubmission:input_type -> syllabus.v1.ListHighestResultExamLOSubmissionRequest
	11, // 76: syllabus.v1.ExamLO.ListExamLOSubmission:input_type -> syllabus.v1.ListExamLOSubmissionRequest
	14, // 77: syllabus.v1.ExamLO.ListExamLOSubmissionScore:input_type -> syllabus.v1.ListExamLOSubmissionScoreRequest
	17, // 78: syllabus.v1.ExamLO.ListExamLOSubmissionResult:input_type -> syllabus.v1.ListExamLOSubmissionResultRequest
	21, // 79: syllabus.v1.ExamLO.GradeAManualGradingExamSubmission:input_type -> syllabus.v1.GradeAManualGradingExamSubmissionRequest
	24, // 80: syllabus.v1.ExamLO.DeleteExamLOSubmission:input_type -> syllabus.v1.DeleteExamLOSubmissionRequest
	2,  // 81: syllabus.v1.ExamLO.UpsertGradeBookSetting:input_type -> syllabus.v1.UpsertGradeBookSettingRequest
	26, // 82: syllabus.v1.ExamLO.BulkApproveRejectSubmission:input_type -> syllabus.v1.BulkApproveRejectSubmissionRequest
	28, // 83: syllabus.v1.ExamLO.RetrieveMetadataTaggingResult:input_type -> syllabus.v1.RetrieveMetadataTaggingResultRequest
	4,  // 84: syllabus.v1.ExamLO.InsertExamLO:output_type -> syllabus.v1.InsertExamLOResponse
	6,  // 85: syllabus.v1.ExamLO.UpdateExamLO:output_type -> syllabus.v1.UpdateExamLOResponse
	8,  // 86: syllabus.v1.ExamLO.ListExamLO:output_type -> syllabus.v1.ListExamLOResponse
	10, // 87: syllabus.v1.ExamLO.ListHighestResultExamLOSubmission:output_type -> syllabus.v1.ListHighestResultExamLOSubmissionResponse
	12, // 88: syllabus.v1.ExamLO.ListExamLOSubmission:output_type -> syllabus.v1.ListExamLOSubmissionResponse
	15, // 89: syllabus.v1.ExamLO.ListExamLOSubmissionScore:output_type -> syllabus.v1.ListExamLOSubmissionScoreResponse
	18, // 90: syllabus.v1.ExamLO.ListExamLOSubmissionResult:output_type -> syllabus.v1.ListExamLOSubmissionResultResponse
	23, // 91: syllabus.v1.ExamLO.GradeAManualGradingExamSubmission:output_type -> syllabus.v1.GradeAManualGradingExamSubmissionResponse
	25, // 92: syllabus.v1.ExamLO.DeleteExamLOSubmission:output_type -> syllabus.v1.DeleteExamLOSubmissionResponse
	3,  // 93: syllabus.v1.ExamLO.UpsertGradeBookSetting:output_type -> syllabus.v1.UpsertGradeBookSettingResponse
	27, // 94: syllabus.v1.ExamLO.BulkApproveRejectSubmission:output_type -> syllabus.v1.BulkApproveRejectSubmissionResponse
	29, // 95: syllabus.v1.ExamLO.RetrieveMetadataTaggingResult:output_type -> syllabus.v1.RetrieveMetadataTaggingResultResponse
	84, // [84:96] is the sub-list for method output_type
	72, // [72:84] is the sub-list for method input_type
	72, // [72:72] is the sub-list for extension type_name
	72, // [72:72] is the sub-list for extension extendee
	0,  // [0:72] is the sub-list for field type_name
}

func init() { file_syllabus_v1_exam_lo_service_proto_init() }
func file_syllabus_v1_exam_lo_service_proto_init() {
	if File_syllabus_v1_exam_lo_service_proto != nil {
		return
	}
	file_syllabus_v1_learning_material_proto_init()
	file_syllabus_v1_study_plan_proto_init()
	file_syllabus_v1_enums_proto_init()
	file_syllabus_v1_statistics_service_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_syllabus_v1_exam_lo_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExamLOBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_exam_lo_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertExamLORequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_exam_lo_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertGradeBookSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_exam_lo_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertGradeBookSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_exam_lo_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertExamLOResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_exam_lo_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateExamLORequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_exam_lo_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateExamLOResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_exam_lo_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExamLORequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_exam_lo_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExamLOResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_exam_lo_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHighestResultExamLOSubmissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_exam_lo_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHighestResultExamLOSubmissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_exam_lo_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExamLOSubmissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_exam_lo_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExamLOSubmissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_exam_lo_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExamLOSubmission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_exam_lo_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExamLOSubmissionScoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_exam_lo_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExamLOSubmissionScoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_exam_lo_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExamLOSubmissionScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_exam_lo_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExamLOSubmissionResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_exam_lo_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExamLOSubmissionResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_exam_lo_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExamLOSubmissions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_exam_lo_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExamLOSubmissionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_exam_lo_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradeAManualGradingExamSubmissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_exam_lo_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeacherExamGrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_exam_lo_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GradeAManualGradingExamSubmissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_exam_lo_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExamLOSubmissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_exam_lo_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExamLOSubmissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_exam_lo_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkApproveRejectSubmissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_exam_lo_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkApproveRejectSubmissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_exam_lo_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveMetadataTaggingResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_exam_lo_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveMetadataTaggingResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_exam_lo_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaggingResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_exam_lo_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListHighestResultExamLOSubmissionResponse_StudyPlanItemResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_exam_lo_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExamLOSubmissionRequest_SubmittedDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_exam_lo_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExamLOSubmissionRequest_LastUpdatedDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_exam_lo_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListExamLOSubmissionResultResponseItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_syllabus_v1_exam_lo_service_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*ExamLOSubmissionScore_OrderingResult)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_syllabus_v1_exam_lo_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_syllabus_v1_exam_lo_service_proto_goTypes,
		DependencyIndexes: file_syllabus_v1_exam_lo_service_proto_depIdxs,
		MessageInfos:      file_syllabus_v1_exam_lo_service_proto_msgTypes,
	}.Build()
	File_syllabus_v1_exam_lo_service_proto = out.File
	file_syllabus_v1_exam_lo_service_proto_rawDesc = nil
	file_syllabus_v1_exam_lo_service_proto_goTypes = nil
	file_syllabus_v1_exam_lo_service_proto_depIdxs = nil
}
