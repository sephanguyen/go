// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: syllabus/v1/quiz_service.proto

package sspb

import (
	proto "github.com/golang/protobuf/proto"
	v1 "github.com/manabie-com/backend/pkg/manabuf/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CreateQuizTestV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudyPlanItemIdentity *StudyPlanItemIdentity  `protobuf:"bytes,1,opt,name=study_plan_item_identity,json=studyPlanItemIdentity,proto3" json:"study_plan_item_identity,omitempty"`
	ShuffleQuizSetId      *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=shuffle_quiz_set_id,json=shuffleQuizSetId,proto3" json:"shuffle_quiz_set_id,omitempty"` // old is set_id
	Paging                *v1.Paging              `protobuf:"bytes,3,opt,name=paging,proto3" json:"paging,omitempty"`
	SessionId             string                  `protobuf:"bytes,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	KeepOrder             bool                    `protobuf:"varint,5,opt,name=keep_order,json=keepOrder,proto3" json:"keep_order,omitempty"`
}

func (x *CreateQuizTestV2Request) Reset() {
	*x = CreateQuizTestV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_quiz_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQuizTestV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuizTestV2Request) ProtoMessage() {}

func (x *CreateQuizTestV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_quiz_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuizTestV2Request.ProtoReflect.Descriptor instead.
func (*CreateQuizTestV2Request) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_quiz_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateQuizTestV2Request) GetStudyPlanItemIdentity() *StudyPlanItemIdentity {
	if x != nil {
		return x.StudyPlanItemIdentity
	}
	return nil
}

func (x *CreateQuizTestV2Request) GetShuffleQuizSetId() *wrapperspb.StringValue {
	if x != nil {
		return x.ShuffleQuizSetId
	}
	return nil
}

func (x *CreateQuizTestV2Request) GetPaging() *v1.Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

func (x *CreateQuizTestV2Request) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CreateQuizTestV2Request) GetKeepOrder() bool {
	if x != nil {
		return x.KeepOrder
	}
	return false
}

type CreateQuizTestV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextPage         *v1.Paging          `protobuf:"bytes,1,opt,name=next_page,json=nextPage,proto3" json:"next_page,omitempty"`
	Quizzes          []*v1.Quiz          `protobuf:"bytes,2,rep,name=quizzes,proto3" json:"quizzes,omitempty"`                                               // old is items
	ShuffleQuizSetId string              `protobuf:"bytes,3,opt,name=shuffle_quiz_set_id,json=shuffleQuizSetId,proto3" json:"shuffle_quiz_set_id,omitempty"` // old is set_id
	QuestionGroups   []*v1.QuestionGroup `protobuf:"bytes,4,rep,name=question_groups,json=questionGroups,proto3" json:"question_groups,omitempty"`
}

func (x *CreateQuizTestV2Response) Reset() {
	*x = CreateQuizTestV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_quiz_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateQuizTestV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQuizTestV2Response) ProtoMessage() {}

func (x *CreateQuizTestV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_quiz_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQuizTestV2Response.ProtoReflect.Descriptor instead.
func (*CreateQuizTestV2Response) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_quiz_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateQuizTestV2Response) GetNextPage() *v1.Paging {
	if x != nil {
		return x.NextPage
	}
	return nil
}

func (x *CreateQuizTestV2Response) GetQuizzes() []*v1.Quiz {
	if x != nil {
		return x.Quizzes
	}
	return nil
}

func (x *CreateQuizTestV2Response) GetShuffleQuizSetId() string {
	if x != nil {
		return x.ShuffleQuizSetId
	}
	return ""
}

func (x *CreateQuizTestV2Response) GetQuestionGroups() []*v1.QuestionGroup {
	if x != nil {
		return x.QuestionGroups
	}
	return nil
}

type CreateRetryQuizTestV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudyPlanItemIdentity *StudyPlanItemIdentity  `protobuf:"bytes,1,opt,name=study_plan_item_identity,json=studyPlanItemIdentity,proto3" json:"study_plan_item_identity,omitempty"`
	ShuffleQuizSetId      *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=shuffle_quiz_set_id,json=shuffleQuizSetId,proto3" json:"shuffle_quiz_set_id,omitempty"` // old is set_id
	Paging                *v1.Paging              `protobuf:"bytes,3,opt,name=paging,proto3" json:"paging,omitempty"`
	SessionId             string                  `protobuf:"bytes,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	KeepOrder             bool                    `protobuf:"varint,5,opt,name=keep_order,json=keepOrder,proto3" json:"keep_order,omitempty"`
	RetryShuffleQuizId    *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=retry_shuffle_quiz_id,json=retryShuffleQuizId,proto3" json:"retry_shuffle_quiz_id,omitempty"`
}

func (x *CreateRetryQuizTestV2Request) Reset() {
	*x = CreateRetryQuizTestV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_quiz_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRetryQuizTestV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRetryQuizTestV2Request) ProtoMessage() {}

func (x *CreateRetryQuizTestV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_quiz_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRetryQuizTestV2Request.ProtoReflect.Descriptor instead.
func (*CreateRetryQuizTestV2Request) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_quiz_service_proto_rawDescGZIP(), []int{2}
}

func (x *CreateRetryQuizTestV2Request) GetStudyPlanItemIdentity() *StudyPlanItemIdentity {
	if x != nil {
		return x.StudyPlanItemIdentity
	}
	return nil
}

func (x *CreateRetryQuizTestV2Request) GetShuffleQuizSetId() *wrapperspb.StringValue {
	if x != nil {
		return x.ShuffleQuizSetId
	}
	return nil
}

func (x *CreateRetryQuizTestV2Request) GetPaging() *v1.Paging {
	if x != nil {
		return x.Paging
	}
	return nil
}

func (x *CreateRetryQuizTestV2Request) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CreateRetryQuizTestV2Request) GetKeepOrder() bool {
	if x != nil {
		return x.KeepOrder
	}
	return false
}

func (x *CreateRetryQuizTestV2Request) GetRetryShuffleQuizId() *wrapperspb.StringValue {
	if x != nil {
		return x.RetryShuffleQuizId
	}
	return nil
}

type CreateRetryQuizTestV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextPage         *v1.Paging          `protobuf:"bytes,1,opt,name=next_page,json=nextPage,proto3" json:"next_page,omitempty"`
	Quizzes          []*v1.Quiz          `protobuf:"bytes,2,rep,name=quizzes,proto3" json:"quizzes,omitempty"`                                               // old is items
	ShuffleQuizSetId string              `protobuf:"bytes,3,opt,name=shuffle_quiz_set_id,json=shuffleQuizSetId,proto3" json:"shuffle_quiz_set_id,omitempty"` // old is quizzes_id
	QuestionGroups   []*v1.QuestionGroup `protobuf:"bytes,4,rep,name=question_groups,json=questionGroups,proto3" json:"question_groups,omitempty"`
}

func (x *CreateRetryQuizTestV2Response) Reset() {
	*x = CreateRetryQuizTestV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_quiz_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRetryQuizTestV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRetryQuizTestV2Response) ProtoMessage() {}

func (x *CreateRetryQuizTestV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_quiz_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRetryQuizTestV2Response.ProtoReflect.Descriptor instead.
func (*CreateRetryQuizTestV2Response) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_quiz_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateRetryQuizTestV2Response) GetNextPage() *v1.Paging {
	if x != nil {
		return x.NextPage
	}
	return nil
}

func (x *CreateRetryQuizTestV2Response) GetQuizzes() []*v1.Quiz {
	if x != nil {
		return x.Quizzes
	}
	return nil
}

func (x *CreateRetryQuizTestV2Response) GetShuffleQuizSetId() string {
	if x != nil {
		return x.ShuffleQuizSetId
	}
	return ""
}

func (x *CreateRetryQuizTestV2Response) GetQuestionGroups() []*v1.QuestionGroup {
	if x != nil {
		return x.QuestionGroups
	}
	return nil
}

type RetrieveQuizTestV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudyPlanItemIdentities []*StudyPlanItemIdentity `protobuf:"bytes,1,rep,name=study_plan_item_identities,json=studyPlanItemIdentities,proto3" json:"study_plan_item_identities,omitempty"`
	IsCompleted             bool                     `protobuf:"varint,2,opt,name=is_completed,json=isCompleted,proto3" json:"is_completed,omitempty"`
}

func (x *RetrieveQuizTestV2Request) Reset() {
	*x = RetrieveQuizTestV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_quiz_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveQuizTestV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveQuizTestV2Request) ProtoMessage() {}

func (x *RetrieveQuizTestV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_quiz_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveQuizTestV2Request.ProtoReflect.Descriptor instead.
func (*RetrieveQuizTestV2Request) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_quiz_service_proto_rawDescGZIP(), []int{4}
}

func (x *RetrieveQuizTestV2Request) GetStudyPlanItemIdentities() []*StudyPlanItemIdentity {
	if x != nil {
		return x.StudyPlanItemIdentities
	}
	return nil
}

func (x *RetrieveQuizTestV2Request) GetIsCompleted() bool {
	if x != nil {
		return x.IsCompleted
	}
	return false
}

type RetrieveQuizTestV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items         []*RetrieveQuizTestV2ResponseItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	HighestCrown  AchievementCrown                  `protobuf:"varint,2,opt,name=highest_crown,json=highestCrown,proto3,enum=syllabus.v1.AchievementCrown" json:"highest_crown,omitempty"`
	TotalAttempts int32                             `protobuf:"varint,3,opt,name=total_attempts,json=totalAttempts,proto3" json:"total_attempts,omitempty"` //only count for the origin attempts, not retry attempts
	HighestScore  *v1.HighestQuizScore              `protobuf:"bytes,4,opt,name=highest_score,json=highestScore,proto3" json:"highest_score,omitempty"`
}

func (x *RetrieveQuizTestV2Response) Reset() {
	*x = RetrieveQuizTestV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_quiz_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveQuizTestV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveQuizTestV2Response) ProtoMessage() {}

func (x *RetrieveQuizTestV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_quiz_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveQuizTestV2Response.ProtoReflect.Descriptor instead.
func (*RetrieveQuizTestV2Response) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_quiz_service_proto_rawDescGZIP(), []int{5}
}

func (x *RetrieveQuizTestV2Response) GetItems() []*RetrieveQuizTestV2ResponseItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *RetrieveQuizTestV2Response) GetHighestCrown() AchievementCrown {
	if x != nil {
		return x.HighestCrown
	}
	return AchievementCrown_ACHIEVEMENT_CROWN_NONE
}

func (x *RetrieveQuizTestV2Response) GetTotalAttempts() int32 {
	if x != nil {
		return x.TotalAttempts
	}
	return 0
}

func (x *RetrieveQuizTestV2Response) GetHighestScore() *v1.HighestQuizScore {
	if x != nil {
		return x.HighestScore
	}
	return nil
}

type UpsertFlashcardContentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlashcardId string         `protobuf:"bytes,1,opt,name=flashcard_id,json=flashcardId,proto3" json:"flashcard_id,omitempty"`
	Quizzes     []*v1.QuizCore `protobuf:"bytes,2,rep,name=quizzes,proto3" json:"quizzes,omitempty"`
	Kind        v1.QuizType    `protobuf:"varint,3,opt,name=kind,proto3,enum=common.v1.QuizType" json:"kind,omitempty"`
}

func (x *UpsertFlashcardContentRequest) Reset() {
	*x = UpsertFlashcardContentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_quiz_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertFlashcardContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertFlashcardContentRequest) ProtoMessage() {}

func (x *UpsertFlashcardContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_quiz_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertFlashcardContentRequest.ProtoReflect.Descriptor instead.
func (*UpsertFlashcardContentRequest) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_quiz_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpsertFlashcardContentRequest) GetFlashcardId() string {
	if x != nil {
		return x.FlashcardId
	}
	return ""
}

func (x *UpsertFlashcardContentRequest) GetQuizzes() []*v1.QuizCore {
	if x != nil {
		return x.Quizzes
	}
	return nil
}

func (x *UpsertFlashcardContentRequest) GetKind() v1.QuizType {
	if x != nil {
		return x.Kind
	}
	return v1.QuizType_QUIZ_TYPE_MCQ
}

type UpsertFlashcardContentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quizzes []*v1.QuizCore `protobuf:"bytes,1,rep,name=quizzes,proto3" json:"quizzes,omitempty"`
}

func (x *UpsertFlashcardContentResponse) Reset() {
	*x = UpsertFlashcardContentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_quiz_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertFlashcardContentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertFlashcardContentResponse) ProtoMessage() {}

func (x *UpsertFlashcardContentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_quiz_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertFlashcardContentResponse.ProtoReflect.Descriptor instead.
func (*UpsertFlashcardContentResponse) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_quiz_service_proto_rawDescGZIP(), []int{7}
}

func (x *UpsertFlashcardContentResponse) GetQuizzes() []*v1.QuizCore {
	if x != nil {
		return x.Quizzes
	}
	return nil
}

type Answer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Format:
	//
	//	*Answer_SelectedIndex
	//	*Answer_FilledText
	//	*Answer_SubmittedKey
	Format isAnswer_Format `protobuf_oneof:"format"`
}

func (x *Answer) Reset() {
	*x = Answer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_quiz_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Answer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Answer) ProtoMessage() {}

func (x *Answer) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_quiz_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Answer.ProtoReflect.Descriptor instead.
func (*Answer) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_quiz_service_proto_rawDescGZIP(), []int{8}
}

func (m *Answer) GetFormat() isAnswer_Format {
	if m != nil {
		return m.Format
	}
	return nil
}

func (x *Answer) GetSelectedIndex() uint32 {
	if x, ok := x.GetFormat().(*Answer_SelectedIndex); ok {
		return x.SelectedIndex
	}
	return 0
}

func (x *Answer) GetFilledText() string {
	if x, ok := x.GetFormat().(*Answer_FilledText); ok {
		return x.FilledText
	}
	return ""
}

func (x *Answer) GetSubmittedKey() string {
	if x, ok := x.GetFormat().(*Answer_SubmittedKey); ok {
		return x.SubmittedKey
	}
	return ""
}

type isAnswer_Format interface {
	isAnswer_Format()
}

type Answer_SelectedIndex struct {
	SelectedIndex uint32 `protobuf:"varint,1,opt,name=selected_index,json=selectedIndex,proto3,oneof"`
}

type Answer_FilledText struct {
	FilledText string `protobuf:"bytes,2,opt,name=filled_text,json=filledText,proto3,oneof"`
}

type Answer_SubmittedKey struct {
	SubmittedKey string `protobuf:"bytes,3,opt,name=submitted_key,json=submittedKey,proto3,oneof"`
}

func (*Answer_SelectedIndex) isAnswer_Format() {}

func (*Answer_FilledText) isAnswer_Format() {}

func (*Answer_SubmittedKey) isAnswer_Format() {}

type CheckQuizCorrectnessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShuffledQuizSetId string               `protobuf:"bytes,1,opt,name=shuffled_quiz_set_id,json=shuffledQuizSetId,proto3" json:"shuffled_quiz_set_id,omitempty"`
	QuizId            string               `protobuf:"bytes,2,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	Answer            []*Answer            `protobuf:"bytes,3,rep,name=answer,proto3" json:"answer,omitempty"`
	LmType            LearningMaterialType `protobuf:"varint,4,opt,name=lm_type,json=lmType,proto3,enum=syllabus.v1.LearningMaterialType" json:"lm_type,omitempty"`
}

func (x *CheckQuizCorrectnessRequest) Reset() {
	*x = CheckQuizCorrectnessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_quiz_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckQuizCorrectnessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckQuizCorrectnessRequest) ProtoMessage() {}

func (x *CheckQuizCorrectnessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_quiz_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckQuizCorrectnessRequest.ProtoReflect.Descriptor instead.
func (*CheckQuizCorrectnessRequest) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_quiz_service_proto_rawDescGZIP(), []int{9}
}

func (x *CheckQuizCorrectnessRequest) GetShuffledQuizSetId() string {
	if x != nil {
		return x.ShuffledQuizSetId
	}
	return ""
}

func (x *CheckQuizCorrectnessRequest) GetQuizId() string {
	if x != nil {
		return x.QuizId
	}
	return ""
}

func (x *CheckQuizCorrectnessRequest) GetAnswer() []*Answer {
	if x != nil {
		return x.Answer
	}
	return nil
}

func (x *CheckQuizCorrectnessRequest) GetLmType() LearningMaterialType {
	if x != nil {
		return x.LmType
	}
	return LearningMaterialType_LEARNING_MATERIAL_LEARNING_OBJECTIVE
}

type CheckQuizCorrectnessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Correctness  []bool   `protobuf:"varint,1,rep,packed,name=correctness,proto3" json:"correctness,omitempty"`
	IsCorrectAll bool     `protobuf:"varint,2,opt,name=is_correct_all,json=isCorrectAll,proto3" json:"is_correct_all,omitempty"`
	FilledTexts  []string `protobuf:"bytes,3,rep,name=filled_texts,json=filledTexts,proto3" json:"filled_texts,omitempty"`
	CorrectTexts []string `protobuf:"bytes,4,rep,name=correct_texts,json=correctTexts,proto3" json:"correct_texts,omitempty"`
	// Types that are assignable to Result:
	//
	//	*CheckQuizCorrectnessResponse_OrderingResult
	Result isCheckQuizCorrectnessResponse_Result `protobuf_oneof:"result"`
}

func (x *CheckQuizCorrectnessResponse) Reset() {
	*x = CheckQuizCorrectnessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_quiz_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckQuizCorrectnessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckQuizCorrectnessResponse) ProtoMessage() {}

func (x *CheckQuizCorrectnessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_quiz_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckQuizCorrectnessResponse.ProtoReflect.Descriptor instead.
func (*CheckQuizCorrectnessResponse) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_quiz_service_proto_rawDescGZIP(), []int{10}
}

func (x *CheckQuizCorrectnessResponse) GetCorrectness() []bool {
	if x != nil {
		return x.Correctness
	}
	return nil
}

func (x *CheckQuizCorrectnessResponse) GetIsCorrectAll() bool {
	if x != nil {
		return x.IsCorrectAll
	}
	return false
}

func (x *CheckQuizCorrectnessResponse) GetFilledTexts() []string {
	if x != nil {
		return x.FilledTexts
	}
	return nil
}

func (x *CheckQuizCorrectnessResponse) GetCorrectTexts() []string {
	if x != nil {
		return x.CorrectTexts
	}
	return nil
}

func (m *CheckQuizCorrectnessResponse) GetResult() isCheckQuizCorrectnessResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *CheckQuizCorrectnessResponse) GetOrderingResult() *v1.OrderingResult {
	if x, ok := x.GetResult().(*CheckQuizCorrectnessResponse_OrderingResult); ok {
		return x.OrderingResult
	}
	return nil
}

type isCheckQuizCorrectnessResponse_Result interface {
	isCheckQuizCorrectnessResponse_Result()
}

type CheckQuizCorrectnessResponse_OrderingResult struct {
	OrderingResult *v1.OrderingResult `protobuf:"bytes,5,opt,name=ordering_result,json=orderingResult,proto3,oneof"`
}

func (*CheckQuizCorrectnessResponse_OrderingResult) isCheckQuizCorrectnessResponse_Result() {}

type RetrieveQuizTestV2ResponseItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StudyPlanItemIdentity *StudyPlanItemIdentity `protobuf:"bytes,1,opt,name=study_plan_item_identity,json=studyPlanItemIdentity,proto3" json:"study_plan_item_identity,omitempty"`
	QuizTest              *v1.QuizTests          `protobuf:"bytes,2,opt,name=quiz_test,json=quizTest,proto3" json:"quiz_test,omitempty"`
}

func (x *RetrieveQuizTestV2ResponseItem) Reset() {
	*x = RetrieveQuizTestV2ResponseItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_syllabus_v1_quiz_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveQuizTestV2ResponseItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveQuizTestV2ResponseItem) ProtoMessage() {}

func (x *RetrieveQuizTestV2ResponseItem) ProtoReflect() protoreflect.Message {
	mi := &file_syllabus_v1_quiz_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveQuizTestV2ResponseItem.ProtoReflect.Descriptor instead.
func (*RetrieveQuizTestV2ResponseItem) Descriptor() ([]byte, []int) {
	return file_syllabus_v1_quiz_service_proto_rawDescGZIP(), []int{5, 0}
}

func (x *RetrieveQuizTestV2ResponseItem) GetStudyPlanItemIdentity() *StudyPlanItemIdentity {
	if x != nil {
		return x.StudyPlanItemIdentity
	}
	return nil
}

func (x *RetrieveQuizTestV2ResponseItem) GetQuizTest() *v1.QuizTests {
	if x != nil {
		return x.QuizTest
	}
	return nil
}

var File_syllabus_v1_quiz_service_proto protoreflect.FileDescriptor

var file_syllabus_v1_quiz_service_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75,
	0x69, 0x7a, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0b, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x18, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xac, 0x02, 0x0a, 0x17, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x54, 0x65, 0x73, 0x74, 0x56, 0x32, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x18, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x6c,
	0x61, 0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x15, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x4b, 0x0a, 0x13, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x71, 0x75, 0x69,
	0x7a, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x73, 0x68,
	0x75, 0x66, 0x66, 0x6c, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x29,
	0x0a, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x52, 0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x65, 0x70,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6b, 0x65,
	0x65, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xe7, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x54, 0x65, 0x73, 0x74, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x07, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x12,
	0x2d, 0x0a, 0x13, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x68,
	0x75, 0x66, 0x66, 0x6c, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x41,
	0x0a, 0x0f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x0e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x22, 0x82, 0x03, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x51, 0x75, 0x69, 0x7a, 0x54, 0x65, 0x73, 0x74, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x5b, 0x0a, 0x18, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x15, 0x73, 0x74, 0x75, 0x64, 0x79, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x4b, 0x0a, 0x13, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x73, 0x68, 0x75, 0x66,
	0x66, 0x6c, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x06,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52,
	0x06, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x15, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x73,
	0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x12, 0x72, 0x65, 0x74, 0x72, 0x79, 0x53, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65,
	0x51, 0x75, 0x69, 0x7a, 0x49, 0x64, 0x22, 0xec, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x74, 0x72, 0x79, 0x51, 0x75, 0x69, 0x7a, 0x54, 0x65, 0x73, 0x74, 0x56, 0x32,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x08,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x7a,
	0x7a, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x52, 0x07, 0x71, 0x75, 0x69, 0x7a,
	0x7a, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x5f, 0x71,
	0x75, 0x69, 0x7a, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x53, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x41, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x54, 0x65, 0x73, 0x74, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x1a, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x6c, 0x61,
	0x6e, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62,
	0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x17, 0x73, 0x74, 0x75,
	0x64, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0xa6, 0x03, 0x0a, 0x1a, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x54, 0x65, 0x73, 0x74, 0x56, 0x32, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x51, 0x75, 0x69, 0x7a,
	0x54, 0x65, 0x73, 0x74, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x69,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x68, 0x69,
	0x67, 0x68, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x72, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x6f, 0x77, 0x6e,
	0x52, 0x0c, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x43, 0x72, 0x6f, 0x77, 0x6e, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x68, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74,
	0x51, 0x75, 0x69, 0x7a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x0c, 0x68, 0x69, 0x67, 0x68, 0x65,
	0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x96, 0x01, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x12, 0x5b, 0x0a, 0x18, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x75, 0x64, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x15, 0x73, 0x74, 0x75, 0x64, 0x79, 0x50, 0x6c, 0x61,
	0x6e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x31, 0x0a,
	0x09, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x69,
	0x7a, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x08, 0x71, 0x75, 0x69, 0x7a, 0x54, 0x65, 0x73, 0x74,
	0x22, 0x9a, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x6c, 0x61, 0x73, 0x68,
	0x63, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x63,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x07, 0x71, 0x75, 0x69,
	0x7a, 0x7a, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x75, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x4f, 0x0a,
	0x1e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x63, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2d, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x69,
	0x7a, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x07, 0x71, 0x75, 0x69, 0x7a, 0x7a, 0x65, 0x73, 0x22, 0x85,
	0x01, 0x0a, 0x06, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0e, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x21, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x6c, 0x65,
	0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x42, 0x08, 0x0a, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0xd0, 0x01, 0x0a, 0x1b, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x51, 0x75, 0x69, 0x7a, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c,
	0x65, 0x64, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x68, 0x75, 0x66, 0x66, 0x6c, 0x65, 0x64, 0x51, 0x75,
	0x69, 0x7a, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x7a, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x75, 0x69, 0x7a, 0x49, 0x64,
	0x12, 0x2b, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x3a, 0x0a,
	0x07, 0x6c, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x6c, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x22, 0xfe, 0x01, 0x0a, 0x1c, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x51, 0x75, 0x69, 0x7a, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x08, 0x52,
	0x0b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x0e,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x41,
	0x6c, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x54, 0x65, 0x78, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x0f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00,
	0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x32, 0x9f, 0x04, 0x0a, 0x04, 0x51,
	0x75, 0x69, 0x7a, 0x12, 0x5f, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69,
	0x7a, 0x54, 0x65, 0x73, 0x74, 0x56, 0x32, 0x12, 0x24, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62,
	0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x69, 0x7a,
	0x54, 0x65, 0x73, 0x74, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x54, 0x65, 0x73, 0x74, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x51, 0x75, 0x69, 0x7a, 0x54, 0x65, 0x73, 0x74, 0x56, 0x32, 0x12, 0x29, 0x2e,
	0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x74, 0x72, 0x79, 0x51, 0x75, 0x69, 0x7a, 0x54, 0x65, 0x73, 0x74, 0x56,
	0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61,
	0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x51, 0x75, 0x69, 0x7a, 0x54, 0x65, 0x73, 0x74, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x13, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65,
	0x51, 0x75, 0x69, 0x7a, 0x54, 0x65, 0x73, 0x74, 0x73, 0x56, 0x32, 0x12, 0x26, 0x2e, 0x73, 0x79,
	0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x54, 0x65, 0x73, 0x74, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x51, 0x75, 0x69, 0x7a, 0x54, 0x65,
	0x73, 0x74, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x16,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x63, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x6c, 0x61, 0x73, 0x68,
	0x63, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x63, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6b, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x75, 0x69, 0x7a, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x28, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62,
	0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x75, 0x69, 0x7a, 0x43,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x73, 0x79, 0x6c, 0x6c, 0x61, 0x62, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x51, 0x75, 0x69, 0x7a, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3d, 0x5a, 0x3b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x62,
	0x69, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x79, 0x6c, 0x6c, 0x61,
	0x62, 0x75, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_syllabus_v1_quiz_service_proto_rawDescOnce sync.Once
	file_syllabus_v1_quiz_service_proto_rawDescData = file_syllabus_v1_quiz_service_proto_rawDesc
)

func file_syllabus_v1_quiz_service_proto_rawDescGZIP() []byte {
	file_syllabus_v1_quiz_service_proto_rawDescOnce.Do(func() {
		file_syllabus_v1_quiz_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_syllabus_v1_quiz_service_proto_rawDescData)
	})
	return file_syllabus_v1_quiz_service_proto_rawDescData
}

var file_syllabus_v1_quiz_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_syllabus_v1_quiz_service_proto_goTypes = []interface{}{
	(*CreateQuizTestV2Request)(nil),        // 0: syllabus.v1.CreateQuizTestV2Request
	(*CreateQuizTestV2Response)(nil),       // 1: syllabus.v1.CreateQuizTestV2Response
	(*CreateRetryQuizTestV2Request)(nil),   // 2: syllabus.v1.CreateRetryQuizTestV2Request
	(*CreateRetryQuizTestV2Response)(nil),  // 3: syllabus.v1.CreateRetryQuizTestV2Response
	(*RetrieveQuizTestV2Request)(nil),      // 4: syllabus.v1.RetrieveQuizTestV2Request
	(*RetrieveQuizTestV2Response)(nil),     // 5: syllabus.v1.RetrieveQuizTestV2Response
	(*UpsertFlashcardContentRequest)(nil),  // 6: syllabus.v1.UpsertFlashcardContentRequest
	(*UpsertFlashcardContentResponse)(nil), // 7: syllabus.v1.UpsertFlashcardContentResponse
	(*Answer)(nil),                         // 8: syllabus.v1.Answer
	(*CheckQuizCorrectnessRequest)(nil),    // 9: syllabus.v1.CheckQuizCorrectnessRequest
	(*CheckQuizCorrectnessResponse)(nil),   // 10: syllabus.v1.CheckQuizCorrectnessResponse
	(*RetrieveQuizTestV2ResponseItem)(nil), // 11: syllabus.v1.RetrieveQuizTestV2Response.item
	(*StudyPlanItemIdentity)(nil),          // 12: syllabus.v1.StudyPlanItemIdentity
	(*wrapperspb.StringValue)(nil),         // 13: google.protobuf.StringValue
	(*v1.Paging)(nil),                      // 14: common.v1.Paging
	(*v1.Quiz)(nil),                        // 15: common.v1.Quiz
	(*v1.QuestionGroup)(nil),               // 16: common.v1.QuestionGroup
	(AchievementCrown)(0),                  // 17: syllabus.v1.AchievementCrown
	(*v1.HighestQuizScore)(nil),            // 18: common.v1.HighestQuizScore
	(*v1.QuizCore)(nil),                    // 19: common.v1.QuizCore
	(v1.QuizType)(0),                       // 20: common.v1.QuizType
	(LearningMaterialType)(0),              // 21: syllabus.v1.LearningMaterialType
	(*v1.OrderingResult)(nil),              // 22: common.v1.OrderingResult
	(*v1.QuizTests)(nil),                   // 23: common.v1.QuizTests
}
var file_syllabus_v1_quiz_service_proto_depIdxs = []int32{
	12, // 0: syllabus.v1.CreateQuizTestV2Request.study_plan_item_identity:type_name -> syllabus.v1.StudyPlanItemIdentity
	13, // 1: syllabus.v1.CreateQuizTestV2Request.shuffle_quiz_set_id:type_name -> google.protobuf.StringValue
	14, // 2: syllabus.v1.CreateQuizTestV2Request.paging:type_name -> common.v1.Paging
	14, // 3: syllabus.v1.CreateQuizTestV2Response.next_page:type_name -> common.v1.Paging
	15, // 4: syllabus.v1.CreateQuizTestV2Response.quizzes:type_name -> common.v1.Quiz
	16, // 5: syllabus.v1.CreateQuizTestV2Response.question_groups:type_name -> common.v1.QuestionGroup
	12, // 6: syllabus.v1.CreateRetryQuizTestV2Request.study_plan_item_identity:type_name -> syllabus.v1.StudyPlanItemIdentity
	13, // 7: syllabus.v1.CreateRetryQuizTestV2Request.shuffle_quiz_set_id:type_name -> google.protobuf.StringValue
	14, // 8: syllabus.v1.CreateRetryQuizTestV2Request.paging:type_name -> common.v1.Paging
	13, // 9: syllabus.v1.CreateRetryQuizTestV2Request.retry_shuffle_quiz_id:type_name -> google.protobuf.StringValue
	14, // 10: syllabus.v1.CreateRetryQuizTestV2Response.next_page:type_name -> common.v1.Paging
	15, // 11: syllabus.v1.CreateRetryQuizTestV2Response.quizzes:type_name -> common.v1.Quiz
	16, // 12: syllabus.v1.CreateRetryQuizTestV2Response.question_groups:type_name -> common.v1.QuestionGroup
	12, // 13: syllabus.v1.RetrieveQuizTestV2Request.study_plan_item_identities:type_name -> syllabus.v1.StudyPlanItemIdentity
	11, // 14: syllabus.v1.RetrieveQuizTestV2Response.items:type_name -> syllabus.v1.RetrieveQuizTestV2Response.item
	17, // 15: syllabus.v1.RetrieveQuizTestV2Response.highest_crown:type_name -> syllabus.v1.AchievementCrown
	18, // 16: syllabus.v1.RetrieveQuizTestV2Response.highest_score:type_name -> common.v1.HighestQuizScore
	19, // 17: syllabus.v1.UpsertFlashcardContentRequest.quizzes:type_name -> common.v1.QuizCore
	20, // 18: syllabus.v1.UpsertFlashcardContentRequest.kind:type_name -> common.v1.QuizType
	19, // 19: syllabus.v1.UpsertFlashcardContentResponse.quizzes:type_name -> common.v1.QuizCore
	8,  // 20: syllabus.v1.CheckQuizCorrectnessRequest.answer:type_name -> syllabus.v1.Answer
	21, // 21: syllabus.v1.CheckQuizCorrectnessRequest.lm_type:type_name -> syllabus.v1.LearningMaterialType
	22, // 22: syllabus.v1.CheckQuizCorrectnessResponse.ordering_result:type_name -> common.v1.OrderingResult
	12, // 23: syllabus.v1.RetrieveQuizTestV2Response.item.study_plan_item_identity:type_name -> syllabus.v1.StudyPlanItemIdentity
	23, // 24: syllabus.v1.RetrieveQuizTestV2Response.item.quiz_test:type_name -> common.v1.QuizTests
	0,  // 25: syllabus.v1.Quiz.CreateQuizTestV2:input_type -> syllabus.v1.CreateQuizTestV2Request
	2,  // 26: syllabus.v1.Quiz.CreateRetryQuizTestV2:input_type -> syllabus.v1.CreateRetryQuizTestV2Request
	4,  // 27: syllabus.v1.Quiz.RetrieveQuizTestsV2:input_type -> syllabus.v1.RetrieveQuizTestV2Request
	6,  // 28: syllabus.v1.Quiz.UpsertFlashcardContent:input_type -> syllabus.v1.UpsertFlashcardContentRequest
	9,  // 29: syllabus.v1.Quiz.CheckQuizCorrectness:input_type -> syllabus.v1.CheckQuizCorrectnessRequest
	1,  // 30: syllabus.v1.Quiz.CreateQuizTestV2:output_type -> syllabus.v1.CreateQuizTestV2Response
	3,  // 31: syllabus.v1.Quiz.CreateRetryQuizTestV2:output_type -> syllabus.v1.CreateRetryQuizTestV2Response
	5,  // 32: syllabus.v1.Quiz.RetrieveQuizTestsV2:output_type -> syllabus.v1.RetrieveQuizTestV2Response
	7,  // 33: syllabus.v1.Quiz.UpsertFlashcardContent:output_type -> syllabus.v1.UpsertFlashcardContentResponse
	10, // 34: syllabus.v1.Quiz.CheckQuizCorrectness:output_type -> syllabus.v1.CheckQuizCorrectnessResponse
	30, // [30:35] is the sub-list for method output_type
	25, // [25:30] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_syllabus_v1_quiz_service_proto_init() }
func file_syllabus_v1_quiz_service_proto_init() {
	if File_syllabus_v1_quiz_service_proto != nil {
		return
	}
	file_syllabus_v1_study_plan_proto_init()
	file_syllabus_v1_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_syllabus_v1_quiz_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQuizTestV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_quiz_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateQuizTestV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_quiz_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRetryQuizTestV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_quiz_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRetryQuizTestV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_quiz_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveQuizTestV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_quiz_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveQuizTestV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_quiz_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertFlashcardContentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_quiz_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertFlashcardContentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_quiz_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Answer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_quiz_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckQuizCorrectnessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_quiz_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckQuizCorrectnessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_syllabus_v1_quiz_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveQuizTestV2ResponseItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_syllabus_v1_quiz_service_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*Answer_SelectedIndex)(nil),
		(*Answer_FilledText)(nil),
		(*Answer_SubmittedKey)(nil),
	}
	file_syllabus_v1_quiz_service_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*CheckQuizCorrectnessResponse_OrderingResult)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_syllabus_v1_quiz_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_syllabus_v1_quiz_service_proto_goTypes,
		DependencyIndexes: file_syllabus_v1_quiz_service_proto_depIdxs,
		MessageInfos:      file_syllabus_v1_quiz_service_proto_msgTypes,
	}.Build()
	File_syllabus_v1_quiz_service_proto = out.File
	file_syllabus_v1_quiz_service_proto_rawDesc = nil
	file_syllabus_v1_quiz_service_proto_goTypes = nil
	file_syllabus_v1_quiz_service_proto_depIdxs = nil
}
