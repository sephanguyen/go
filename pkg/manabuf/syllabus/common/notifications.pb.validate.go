// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: syllabus/common/notifications.proto

package scpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on NotificationTargetGroup with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotificationTargetGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotificationTargetGroup with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotificationTargetGroupMultiError, or nil if none found.
func (m *NotificationTargetGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationTargetGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCourseFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationTargetGroupValidationError{
					field:  "CourseFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationTargetGroupValidationError{
					field:  "CourseFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCourseFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationTargetGroupValidationError{
				field:  "CourseFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGradeFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationTargetGroupValidationError{
					field:  "GradeFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationTargetGroupValidationError{
					field:  "GradeFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGradeFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationTargetGroupValidationError{
				field:  "GradeFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUserGroupFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationTargetGroupValidationError{
					field:  "UserGroupFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationTargetGroupValidationError{
					field:  "UserGroupFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserGroupFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationTargetGroupValidationError{
				field:  "UserGroupFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLocationFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationTargetGroupValidationError{
					field:  "LocationFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationTargetGroupValidationError{
					field:  "LocationFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocationFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationTargetGroupValidationError{
				field:  "LocationFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetClassFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationTargetGroupValidationError{
					field:  "ClassFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationTargetGroupValidationError{
					field:  "ClassFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClassFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationTargetGroupValidationError{
				field:  "ClassFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSchoolFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationTargetGroupValidationError{
					field:  "SchoolFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationTargetGroupValidationError{
					field:  "SchoolFilter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSchoolFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationTargetGroupValidationError{
				field:  "SchoolFilter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NotificationTargetGroupMultiError(errors)
	}

	return nil
}

// NotificationTargetGroupMultiError is an error wrapping multiple validation
// errors returned by NotificationTargetGroup.ValidateAll() if the designated
// constraints aren't met.
type NotificationTargetGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationTargetGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationTargetGroupMultiError) AllErrors() []error { return m }

// NotificationTargetGroupValidationError is the validation error returned by
// NotificationTargetGroup.Validate if the designated constraints aren't met.
type NotificationTargetGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationTargetGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationTargetGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationTargetGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationTargetGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationTargetGroupValidationError) ErrorName() string {
	return "NotificationTargetGroupValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationTargetGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationTargetGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationTargetGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationTargetGroupValidationError{}

// Validate checks the field values on NotificationMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotificationMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotificationMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotificationMessageMultiError, or nil if none found.
func (m *NotificationMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NotificationMsgId

	// no validation rules for Title

	if all {
		switch v := interface{}(m.GetContent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationMessageValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationMessageValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationMessageValidationError{
				field:  "Content",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationMessageValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationMessageValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationMessageValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationMessageValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationMessageValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationMessageValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Description

	if len(errors) > 0 {
		return NotificationMessageMultiError(errors)
	}

	return nil
}

// NotificationMessageMultiError is an error wrapping multiple validation
// errors returned by NotificationMessage.ValidateAll() if the designated
// constraints aren't met.
type NotificationMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationMessageMultiError) AllErrors() []error { return m }

// NotificationMessageValidationError is the validation error returned by
// NotificationMessage.Validate if the designated constraints aren't met.
type NotificationMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationMessageValidationError) ErrorName() string {
	return "NotificationMessageValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationMessageValidationError{}

// Validate checks the field values on Notification with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Notification) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Notification with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotificationMultiError, or
// nil if none found.
func (m *Notification) ValidateAll() error {
	return m.validate(true)
}

func (m *Notification) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NotificationId

	// no validation rules for Data

	// no validation rules for EditorId

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	// no validation rules for Event

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetTargetGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationValidationError{
					field:  "TargetGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationValidationError{
					field:  "TargetGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationValidationError{
				field:  "TargetGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetScheduledAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationValidationError{
					field:  "ScheduledAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationValidationError{
					field:  "ScheduledAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScheduledAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationValidationError{
				field:  "ScheduledAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SchoolId

	if all {
		switch v := interface{}(m.GetSentAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationValidationError{
					field:  "SentAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationValidationError{
					field:  "SentAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSentAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationValidationError{
				field:  "SentAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsImportant

	// no validation rules for CreatedUserId

	if len(errors) > 0 {
		return NotificationMultiError(errors)
	}

	return nil
}

// NotificationMultiError is an error wrapping multiple validation errors
// returned by Notification.ValidateAll() if the designated constraints aren't met.
type NotificationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationMultiError) AllErrors() []error { return m }

// NotificationValidationError is the validation error returned by
// Notification.Validate if the designated constraints aren't met.
type NotificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationValidationError) ErrorName() string { return "NotificationValidationError" }

// Error satisfies the builtin error interface
func (e NotificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationValidationError{}

// Validate checks the field values on UserNotification with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserNotification) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserNotification with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserNotificationMultiError, or nil if none found.
func (m *UserNotification) ValidateAll() error {
	return m.validate(true)
}

func (m *UserNotification) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Grade

	// no validation rules for NotificationId

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserNotificationValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserNotificationValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserNotificationValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserNotificationValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserNotificationValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserNotificationValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Type

	// no validation rules for Data

	// no validation rules for UserNotificationId

	if len(errors) > 0 {
		return UserNotificationMultiError(errors)
	}

	return nil
}

// UserNotificationMultiError is an error wrapping multiple validation errors
// returned by UserNotification.ValidateAll() if the designated constraints
// aren't met.
type UserNotificationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserNotificationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserNotificationMultiError) AllErrors() []error { return m }

// UserNotificationValidationError is the validation error returned by
// UserNotification.Validate if the designated constraints aren't met.
type UserNotificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserNotificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserNotificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserNotificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserNotificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserNotificationValidationError) ErrorName() string { return "UserNotificationValidationError" }

// Error satisfies the builtin error interface
func (e UserNotificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserNotification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserNotificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserNotificationValidationError{}

// Validate checks the field values on Question with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Question) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Question with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QuestionMultiError, or nil
// if none found.
func (m *Question) ValidateAll() error {
	return m.validate(true)
}

func (m *Question) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for QuestionnaireQuestionId

	// no validation rules for Title

	// no validation rules for Type

	// no validation rules for OrderIndex

	// no validation rules for Required

	if len(errors) > 0 {
		return QuestionMultiError(errors)
	}

	return nil
}

// QuestionMultiError is an error wrapping multiple validation errors returned
// by Question.ValidateAll() if the designated constraints aren't met.
type QuestionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuestionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuestionMultiError) AllErrors() []error { return m }

// QuestionValidationError is the validation error returned by
// Question.Validate if the designated constraints aren't met.
type QuestionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionValidationError) ErrorName() string { return "QuestionValidationError" }

// Error satisfies the builtin error interface
func (e QuestionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionValidationError{}

// Validate checks the field values on Questionnaire with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Questionnaire) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Questionnaire with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QuestionnaireMultiError, or
// nil if none found.
func (m *Questionnaire) ValidateAll() error {
	return m.validate(true)
}

func (m *Questionnaire) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for QuestionnaireId

	// no validation rules for ResubmitAllowed

	for idx, item := range m.GetQuestions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QuestionnaireValidationError{
						field:  fmt.Sprintf("Questions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QuestionnaireValidationError{
						field:  fmt.Sprintf("Questions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QuestionnaireValidationError{
					field:  fmt.Sprintf("Questions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetExpirationDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuestionnaireValidationError{
					field:  "ExpirationDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuestionnaireValidationError{
					field:  "ExpirationDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpirationDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuestionnaireValidationError{
				field:  "ExpirationDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QuestionnaireMultiError(errors)
	}

	return nil
}

// QuestionnaireMultiError is an error wrapping multiple validation errors
// returned by Questionnaire.ValidateAll() if the designated constraints
// aren't met.
type QuestionnaireMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuestionnaireMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuestionnaireMultiError) AllErrors() []error { return m }

// QuestionnaireValidationError is the validation error returned by
// Questionnaire.Validate if the designated constraints aren't met.
type QuestionnaireValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionnaireValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionnaireValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionnaireValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionnaireValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionnaireValidationError) ErrorName() string { return "QuestionnaireValidationError" }

// Error satisfies the builtin error interface
func (e QuestionnaireValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestionnaire.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionnaireValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionnaireValidationError{}

// Validate checks the field values on Answer with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Answer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Answer with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AnswerMultiError, or nil if none found.
func (m *Answer) ValidateAll() error {
	return m.validate(true)
}

func (m *Answer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for QuestionnaireQuestionId

	// no validation rules for Answer

	if len(errors) > 0 {
		return AnswerMultiError(errors)
	}

	return nil
}

// AnswerMultiError is an error wrapping multiple validation errors returned by
// Answer.ValidateAll() if the designated constraints aren't met.
type AnswerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnswerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnswerMultiError) AllErrors() []error { return m }

// AnswerValidationError is the validation error returned by Answer.Validate if
// the designated constraints aren't met.
type AnswerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnswerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnswerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnswerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnswerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnswerValidationError) ErrorName() string { return "AnswerValidationError" }

// Error satisfies the builtin error interface
func (e AnswerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnswer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnswerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnswerValidationError{}

// Validate checks the field values on UserQuestionnaire with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserQuestionnaire) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserQuestionnaire with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserQuestionnaireMultiError, or nil if none found.
func (m *UserQuestionnaire) ValidateAll() error {
	return m.validate(true)
}

func (m *UserQuestionnaire) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetQuestionnaire()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserQuestionnaireValidationError{
					field:  "Questionnaire",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserQuestionnaireValidationError{
					field:  "Questionnaire",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuestionnaire()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserQuestionnaireValidationError{
				field:  "Questionnaire",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAnswers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserQuestionnaireValidationError{
						field:  fmt.Sprintf("Answers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserQuestionnaireValidationError{
						field:  fmt.Sprintf("Answers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserQuestionnaireValidationError{
					field:  fmt.Sprintf("Answers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IsSubmitted

	if len(errors) > 0 {
		return UserQuestionnaireMultiError(errors)
	}

	return nil
}

// UserQuestionnaireMultiError is an error wrapping multiple validation errors
// returned by UserQuestionnaire.ValidateAll() if the designated constraints
// aren't met.
type UserQuestionnaireMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserQuestionnaireMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserQuestionnaireMultiError) AllErrors() []error { return m }

// UserQuestionnaireValidationError is the validation error returned by
// UserQuestionnaire.Validate if the designated constraints aren't met.
type UserQuestionnaireValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserQuestionnaireValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserQuestionnaireValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserQuestionnaireValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserQuestionnaireValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserQuestionnaireValidationError) ErrorName() string {
	return "UserQuestionnaireValidationError"
}

// Error satisfies the builtin error interface
func (e UserQuestionnaireValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserQuestionnaire.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserQuestionnaireValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserQuestionnaireValidationError{}

// Validate checks the field values on NotificationTargetGroup_CourseFilter
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *NotificationTargetGroup_CourseFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotificationTargetGroup_CourseFilter
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// NotificationTargetGroup_CourseFilterMultiError, or nil if none found.
func (m *NotificationTargetGroup_CourseFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationTargetGroup_CourseFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	for idx, item := range m.GetCourses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotificationTargetGroup_CourseFilterValidationError{
						field:  fmt.Sprintf("Courses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotificationTargetGroup_CourseFilterValidationError{
						field:  fmt.Sprintf("Courses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotificationTargetGroup_CourseFilterValidationError{
					field:  fmt.Sprintf("Courses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NotificationTargetGroup_CourseFilterMultiError(errors)
	}

	return nil
}

// NotificationTargetGroup_CourseFilterMultiError is an error wrapping multiple
// validation errors returned by
// NotificationTargetGroup_CourseFilter.ValidateAll() if the designated
// constraints aren't met.
type NotificationTargetGroup_CourseFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationTargetGroup_CourseFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationTargetGroup_CourseFilterMultiError) AllErrors() []error { return m }

// NotificationTargetGroup_CourseFilterValidationError is the validation error
// returned by NotificationTargetGroup_CourseFilter.Validate if the designated
// constraints aren't met.
type NotificationTargetGroup_CourseFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationTargetGroup_CourseFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationTargetGroup_CourseFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationTargetGroup_CourseFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationTargetGroup_CourseFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationTargetGroup_CourseFilterValidationError) ErrorName() string {
	return "NotificationTargetGroup_CourseFilterValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationTargetGroup_CourseFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationTargetGroup_CourseFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationTargetGroup_CourseFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationTargetGroup_CourseFilterValidationError{}

// Validate checks the field values on NotificationTargetGroup_GradeFilter with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *NotificationTargetGroup_GradeFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotificationTargetGroup_GradeFilter
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// NotificationTargetGroup_GradeFilterMultiError, or nil if none found.
func (m *NotificationTargetGroup_GradeFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationTargetGroup_GradeFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if len(errors) > 0 {
		return NotificationTargetGroup_GradeFilterMultiError(errors)
	}

	return nil
}

// NotificationTargetGroup_GradeFilterMultiError is an error wrapping multiple
// validation errors returned by
// NotificationTargetGroup_GradeFilter.ValidateAll() if the designated
// constraints aren't met.
type NotificationTargetGroup_GradeFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationTargetGroup_GradeFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationTargetGroup_GradeFilterMultiError) AllErrors() []error { return m }

// NotificationTargetGroup_GradeFilterValidationError is the validation error
// returned by NotificationTargetGroup_GradeFilter.Validate if the designated
// constraints aren't met.
type NotificationTargetGroup_GradeFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationTargetGroup_GradeFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationTargetGroup_GradeFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationTargetGroup_GradeFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationTargetGroup_GradeFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationTargetGroup_GradeFilterValidationError) ErrorName() string {
	return "NotificationTargetGroup_GradeFilterValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationTargetGroup_GradeFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationTargetGroup_GradeFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationTargetGroup_GradeFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationTargetGroup_GradeFilterValidationError{}

// Validate checks the field values on NotificationTargetGroup_LocationFilter
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *NotificationTargetGroup_LocationFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NotificationTargetGroup_LocationFilter with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// NotificationTargetGroup_LocationFilterMultiError, or nil if none found.
func (m *NotificationTargetGroup_LocationFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationTargetGroup_LocationFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	for idx, item := range m.GetLocations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotificationTargetGroup_LocationFilterValidationError{
						field:  fmt.Sprintf("Locations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotificationTargetGroup_LocationFilterValidationError{
						field:  fmt.Sprintf("Locations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotificationTargetGroup_LocationFilterValidationError{
					field:  fmt.Sprintf("Locations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NotificationTargetGroup_LocationFilterMultiError(errors)
	}

	return nil
}

// NotificationTargetGroup_LocationFilterMultiError is an error wrapping
// multiple validation errors returned by
// NotificationTargetGroup_LocationFilter.ValidateAll() if the designated
// constraints aren't met.
type NotificationTargetGroup_LocationFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationTargetGroup_LocationFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationTargetGroup_LocationFilterMultiError) AllErrors() []error { return m }

// NotificationTargetGroup_LocationFilterValidationError is the validation
// error returned by NotificationTargetGroup_LocationFilter.Validate if the
// designated constraints aren't met.
type NotificationTargetGroup_LocationFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationTargetGroup_LocationFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationTargetGroup_LocationFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationTargetGroup_LocationFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationTargetGroup_LocationFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationTargetGroup_LocationFilterValidationError) ErrorName() string {
	return "NotificationTargetGroup_LocationFilterValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationTargetGroup_LocationFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationTargetGroup_LocationFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationTargetGroup_LocationFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationTargetGroup_LocationFilterValidationError{}

// Validate checks the field values on NotificationTargetGroup_ClassFilter with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *NotificationTargetGroup_ClassFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotificationTargetGroup_ClassFilter
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// NotificationTargetGroup_ClassFilterMultiError, or nil if none found.
func (m *NotificationTargetGroup_ClassFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationTargetGroup_ClassFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	for idx, item := range m.GetClasses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotificationTargetGroup_ClassFilterValidationError{
						field:  fmt.Sprintf("Classes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotificationTargetGroup_ClassFilterValidationError{
						field:  fmt.Sprintf("Classes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotificationTargetGroup_ClassFilterValidationError{
					field:  fmt.Sprintf("Classes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NotificationTargetGroup_ClassFilterMultiError(errors)
	}

	return nil
}

// NotificationTargetGroup_ClassFilterMultiError is an error wrapping multiple
// validation errors returned by
// NotificationTargetGroup_ClassFilter.ValidateAll() if the designated
// constraints aren't met.
type NotificationTargetGroup_ClassFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationTargetGroup_ClassFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationTargetGroup_ClassFilterMultiError) AllErrors() []error { return m }

// NotificationTargetGroup_ClassFilterValidationError is the validation error
// returned by NotificationTargetGroup_ClassFilter.Validate if the designated
// constraints aren't met.
type NotificationTargetGroup_ClassFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationTargetGroup_ClassFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationTargetGroup_ClassFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationTargetGroup_ClassFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationTargetGroup_ClassFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationTargetGroup_ClassFilterValidationError) ErrorName() string {
	return "NotificationTargetGroup_ClassFilterValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationTargetGroup_ClassFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationTargetGroup_ClassFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationTargetGroup_ClassFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationTargetGroup_ClassFilterValidationError{}

// Validate checks the field values on NotificationTargetGroup_UserGroupFilter
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *NotificationTargetGroup_UserGroupFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NotificationTargetGroup_UserGroupFilter with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// NotificationTargetGroup_UserGroupFilterMultiError, or nil if none found.
func (m *NotificationTargetGroup_UserGroupFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationTargetGroup_UserGroupFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return NotificationTargetGroup_UserGroupFilterMultiError(errors)
	}

	return nil
}

// NotificationTargetGroup_UserGroupFilterMultiError is an error wrapping
// multiple validation errors returned by
// NotificationTargetGroup_UserGroupFilter.ValidateAll() if the designated
// constraints aren't met.
type NotificationTargetGroup_UserGroupFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationTargetGroup_UserGroupFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationTargetGroup_UserGroupFilterMultiError) AllErrors() []error { return m }

// NotificationTargetGroup_UserGroupFilterValidationError is the validation
// error returned by NotificationTargetGroup_UserGroupFilter.Validate if the
// designated constraints aren't met.
type NotificationTargetGroup_UserGroupFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationTargetGroup_UserGroupFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationTargetGroup_UserGroupFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationTargetGroup_UserGroupFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationTargetGroup_UserGroupFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationTargetGroup_UserGroupFilterValidationError) ErrorName() string {
	return "NotificationTargetGroup_UserGroupFilterValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationTargetGroup_UserGroupFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationTargetGroup_UserGroupFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationTargetGroup_UserGroupFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationTargetGroup_UserGroupFilterValidationError{}

// Validate checks the field values on NotificationTargetGroup_SchoolFilter
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *NotificationTargetGroup_SchoolFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotificationTargetGroup_SchoolFilter
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// NotificationTargetGroup_SchoolFilterMultiError, or nil if none found.
func (m *NotificationTargetGroup_SchoolFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationTargetGroup_SchoolFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	for idx, item := range m.GetSchools() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NotificationTargetGroup_SchoolFilterValidationError{
						field:  fmt.Sprintf("Schools[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NotificationTargetGroup_SchoolFilterValidationError{
						field:  fmt.Sprintf("Schools[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NotificationTargetGroup_SchoolFilterValidationError{
					field:  fmt.Sprintf("Schools[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NotificationTargetGroup_SchoolFilterMultiError(errors)
	}

	return nil
}

// NotificationTargetGroup_SchoolFilterMultiError is an error wrapping multiple
// validation errors returned by
// NotificationTargetGroup_SchoolFilter.ValidateAll() if the designated
// constraints aren't met.
type NotificationTargetGroup_SchoolFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationTargetGroup_SchoolFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationTargetGroup_SchoolFilterMultiError) AllErrors() []error { return m }

// NotificationTargetGroup_SchoolFilterValidationError is the validation error
// returned by NotificationTargetGroup_SchoolFilter.Validate if the designated
// constraints aren't met.
type NotificationTargetGroup_SchoolFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationTargetGroup_SchoolFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationTargetGroup_SchoolFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationTargetGroup_SchoolFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationTargetGroup_SchoolFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationTargetGroup_SchoolFilterValidationError) ErrorName() string {
	return "NotificationTargetGroup_SchoolFilterValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationTargetGroup_SchoolFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationTargetGroup_SchoolFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationTargetGroup_SchoolFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationTargetGroup_SchoolFilterValidationError{}

// Validate checks the field values on
// NotificationTargetGroup_CourseFilter_Course with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NotificationTargetGroup_CourseFilter_Course) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NotificationTargetGroup_CourseFilter_Course with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// NotificationTargetGroup_CourseFilter_CourseMultiError, or nil if none found.
func (m *NotificationTargetGroup_CourseFilter_Course) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationTargetGroup_CourseFilter_Course) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CourseId

	// no validation rules for CourseName

	if len(errors) > 0 {
		return NotificationTargetGroup_CourseFilter_CourseMultiError(errors)
	}

	return nil
}

// NotificationTargetGroup_CourseFilter_CourseMultiError is an error wrapping
// multiple validation errors returned by
// NotificationTargetGroup_CourseFilter_Course.ValidateAll() if the designated
// constraints aren't met.
type NotificationTargetGroup_CourseFilter_CourseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationTargetGroup_CourseFilter_CourseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationTargetGroup_CourseFilter_CourseMultiError) AllErrors() []error { return m }

// NotificationTargetGroup_CourseFilter_CourseValidationError is the validation
// error returned by NotificationTargetGroup_CourseFilter_Course.Validate if
// the designated constraints aren't met.
type NotificationTargetGroup_CourseFilter_CourseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationTargetGroup_CourseFilter_CourseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationTargetGroup_CourseFilter_CourseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationTargetGroup_CourseFilter_CourseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationTargetGroup_CourseFilter_CourseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationTargetGroup_CourseFilter_CourseValidationError) ErrorName() string {
	return "NotificationTargetGroup_CourseFilter_CourseValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationTargetGroup_CourseFilter_CourseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationTargetGroup_CourseFilter_Course.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationTargetGroup_CourseFilter_CourseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationTargetGroup_CourseFilter_CourseValidationError{}

// Validate checks the field values on
// NotificationTargetGroup_LocationFilter_Location with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NotificationTargetGroup_LocationFilter_Location) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NotificationTargetGroup_LocationFilter_Location with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// NotificationTargetGroup_LocationFilter_LocationMultiError, or nil if none found.
func (m *NotificationTargetGroup_LocationFilter_Location) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationTargetGroup_LocationFilter_Location) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LocationId

	// no validation rules for LocationName

	if len(errors) > 0 {
		return NotificationTargetGroup_LocationFilter_LocationMultiError(errors)
	}

	return nil
}

// NotificationTargetGroup_LocationFilter_LocationMultiError is an error
// wrapping multiple validation errors returned by
// NotificationTargetGroup_LocationFilter_Location.ValidateAll() if the
// designated constraints aren't met.
type NotificationTargetGroup_LocationFilter_LocationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationTargetGroup_LocationFilter_LocationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationTargetGroup_LocationFilter_LocationMultiError) AllErrors() []error { return m }

// NotificationTargetGroup_LocationFilter_LocationValidationError is the
// validation error returned by
// NotificationTargetGroup_LocationFilter_Location.Validate if the designated
// constraints aren't met.
type NotificationTargetGroup_LocationFilter_LocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationTargetGroup_LocationFilter_LocationValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e NotificationTargetGroup_LocationFilter_LocationValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e NotificationTargetGroup_LocationFilter_LocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationTargetGroup_LocationFilter_LocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationTargetGroup_LocationFilter_LocationValidationError) ErrorName() string {
	return "NotificationTargetGroup_LocationFilter_LocationValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationTargetGroup_LocationFilter_LocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationTargetGroup_LocationFilter_Location.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationTargetGroup_LocationFilter_LocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationTargetGroup_LocationFilter_LocationValidationError{}

// Validate checks the field values on
// NotificationTargetGroup_ClassFilter_Class with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NotificationTargetGroup_ClassFilter_Class) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NotificationTargetGroup_ClassFilter_Class with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// NotificationTargetGroup_ClassFilter_ClassMultiError, or nil if none found.
func (m *NotificationTargetGroup_ClassFilter_Class) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationTargetGroup_ClassFilter_Class) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClassId

	// no validation rules for ClassName

	if len(errors) > 0 {
		return NotificationTargetGroup_ClassFilter_ClassMultiError(errors)
	}

	return nil
}

// NotificationTargetGroup_ClassFilter_ClassMultiError is an error wrapping
// multiple validation errors returned by
// NotificationTargetGroup_ClassFilter_Class.ValidateAll() if the designated
// constraints aren't met.
type NotificationTargetGroup_ClassFilter_ClassMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationTargetGroup_ClassFilter_ClassMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationTargetGroup_ClassFilter_ClassMultiError) AllErrors() []error { return m }

// NotificationTargetGroup_ClassFilter_ClassValidationError is the validation
// error returned by NotificationTargetGroup_ClassFilter_Class.Validate if the
// designated constraints aren't met.
type NotificationTargetGroup_ClassFilter_ClassValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationTargetGroup_ClassFilter_ClassValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationTargetGroup_ClassFilter_ClassValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationTargetGroup_ClassFilter_ClassValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationTargetGroup_ClassFilter_ClassValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationTargetGroup_ClassFilter_ClassValidationError) ErrorName() string {
	return "NotificationTargetGroup_ClassFilter_ClassValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationTargetGroup_ClassFilter_ClassValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationTargetGroup_ClassFilter_Class.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationTargetGroup_ClassFilter_ClassValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationTargetGroup_ClassFilter_ClassValidationError{}

// Validate checks the field values on
// NotificationTargetGroup_SchoolFilter_School with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NotificationTargetGroup_SchoolFilter_School) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// NotificationTargetGroup_SchoolFilter_School with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// NotificationTargetGroup_SchoolFilter_SchoolMultiError, or nil if none found.
func (m *NotificationTargetGroup_SchoolFilter_School) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationTargetGroup_SchoolFilter_School) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SchoolId

	// no validation rules for SchoolName

	if len(errors) > 0 {
		return NotificationTargetGroup_SchoolFilter_SchoolMultiError(errors)
	}

	return nil
}

// NotificationTargetGroup_SchoolFilter_SchoolMultiError is an error wrapping
// multiple validation errors returned by
// NotificationTargetGroup_SchoolFilter_School.ValidateAll() if the designated
// constraints aren't met.
type NotificationTargetGroup_SchoolFilter_SchoolMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationTargetGroup_SchoolFilter_SchoolMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationTargetGroup_SchoolFilter_SchoolMultiError) AllErrors() []error { return m }

// NotificationTargetGroup_SchoolFilter_SchoolValidationError is the validation
// error returned by NotificationTargetGroup_SchoolFilter_School.Validate if
// the designated constraints aren't met.
type NotificationTargetGroup_SchoolFilter_SchoolValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationTargetGroup_SchoolFilter_SchoolValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationTargetGroup_SchoolFilter_SchoolValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationTargetGroup_SchoolFilter_SchoolValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationTargetGroup_SchoolFilter_SchoolValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationTargetGroup_SchoolFilter_SchoolValidationError) ErrorName() string {
	return "NotificationTargetGroup_SchoolFilter_SchoolValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationTargetGroup_SchoolFilter_SchoolValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationTargetGroup_SchoolFilter_School.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationTargetGroup_SchoolFilter_SchoolValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationTargetGroup_SchoolFilter_SchoolValidationError{}
