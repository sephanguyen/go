// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: syllabus/common/requests.proto

package scpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Paging with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Paging) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Paging with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PagingMultiError, or nil if none found.
func (m *Paging) ValidateAll() error {
	return m.validate(true)
}

func (m *Paging) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Limit

	switch v := m.Offset.(type) {
	case *Paging_OffsetInteger:
		if v == nil {
			err := PagingValidationError{
				field:  "Offset",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for OffsetInteger
	case *Paging_OffsetString:
		if v == nil {
			err := PagingValidationError{
				field:  "Offset",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for OffsetString
	case *Paging_OffsetTime:
		if v == nil {
			err := PagingValidationError{
				field:  "Offset",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOffsetTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PagingValidationError{
						field:  "OffsetTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PagingValidationError{
						field:  "OffsetTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOffsetTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PagingValidationError{
					field:  "OffsetTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Paging_OffsetCombined:
		if v == nil {
			err := PagingValidationError{
				field:  "Offset",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOffsetCombined()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PagingValidationError{
						field:  "OffsetCombined",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PagingValidationError{
						field:  "OffsetCombined",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOffsetCombined()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PagingValidationError{
					field:  "OffsetCombined",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Paging_OffsetMultipleCombined:
		if v == nil {
			err := PagingValidationError{
				field:  "Offset",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOffsetMultipleCombined()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PagingValidationError{
						field:  "OffsetMultipleCombined",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PagingValidationError{
						field:  "OffsetMultipleCombined",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOffsetMultipleCombined()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PagingValidationError{
					field:  "OffsetMultipleCombined",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return PagingMultiError(errors)
	}

	return nil
}

// PagingMultiError is an error wrapping multiple validation errors returned by
// Paging.ValidateAll() if the designated constraints aren't met.
type PagingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PagingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PagingMultiError) AllErrors() []error { return m }

// PagingValidationError is the validation error returned by Paging.Validate if
// the designated constraints aren't met.
type PagingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PagingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PagingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PagingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PagingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PagingValidationError) ErrorName() string { return "PagingValidationError" }

// Error satisfies the builtin error interface
func (e PagingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaging.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PagingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PagingValidationError{}

// Validate checks the field values on CommonFilter with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommonFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommonFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommonFilterMultiError, or
// nil if none found.
func (m *CommonFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *CommonFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Country

	// no validation rules for Subject

	// no validation rules for Grade

	// no validation rules for SchoolId

	if len(errors) > 0 {
		return CommonFilterMultiError(errors)
	}

	return nil
}

// CommonFilterMultiError is an error wrapping multiple validation errors
// returned by CommonFilter.ValidateAll() if the designated constraints aren't met.
type CommonFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommonFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommonFilterMultiError) AllErrors() []error { return m }

// CommonFilterValidationError is the validation error returned by
// CommonFilter.Validate if the designated constraints aren't met.
type CommonFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommonFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommonFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommonFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommonFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommonFilterValidationError) ErrorName() string { return "CommonFilterValidationError" }

// Error satisfies the builtin error interface
func (e CommonFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommonFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommonFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommonFilterValidationError{}

// Validate checks the field values on Paging_Combined with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Paging_Combined) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Paging_Combined with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Paging_CombinedMultiError, or nil if none found.
func (m *Paging_Combined) ValidateAll() error {
	return m.validate(true)
}

func (m *Paging_Combined) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OffsetString

	if all {
		switch v := interface{}(m.GetOffsetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Paging_CombinedValidationError{
					field:  "OffsetTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Paging_CombinedValidationError{
					field:  "OffsetTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOffsetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Paging_CombinedValidationError{
				field:  "OffsetTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OffsetInteger

	if len(errors) > 0 {
		return Paging_CombinedMultiError(errors)
	}

	return nil
}

// Paging_CombinedMultiError is an error wrapping multiple validation errors
// returned by Paging_Combined.ValidateAll() if the designated constraints
// aren't met.
type Paging_CombinedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Paging_CombinedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Paging_CombinedMultiError) AllErrors() []error { return m }

// Paging_CombinedValidationError is the validation error returned by
// Paging_Combined.Validate if the designated constraints aren't met.
type Paging_CombinedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Paging_CombinedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Paging_CombinedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Paging_CombinedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Paging_CombinedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Paging_CombinedValidationError) ErrorName() string { return "Paging_CombinedValidationError" }

// Error satisfies the builtin error interface
func (e Paging_CombinedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaging_Combined.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Paging_CombinedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Paging_CombinedValidationError{}

// Validate checks the field values on Paging_MultipleCombined with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Paging_MultipleCombined) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Paging_MultipleCombined with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Paging_MultipleCombinedMultiError, or nil if none found.
func (m *Paging_MultipleCombined) ValidateAll() error {
	return m.validate(true)
}

func (m *Paging_MultipleCombined) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCombined() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Paging_MultipleCombinedValidationError{
						field:  fmt.Sprintf("Combined[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Paging_MultipleCombinedValidationError{
						field:  fmt.Sprintf("Combined[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Paging_MultipleCombinedValidationError{
					field:  fmt.Sprintf("Combined[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Paging_MultipleCombinedMultiError(errors)
	}

	return nil
}

// Paging_MultipleCombinedMultiError is an error wrapping multiple validation
// errors returned by Paging_MultipleCombined.ValidateAll() if the designated
// constraints aren't met.
type Paging_MultipleCombinedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Paging_MultipleCombinedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Paging_MultipleCombinedMultiError) AllErrors() []error { return m }

// Paging_MultipleCombinedValidationError is the validation error returned by
// Paging_MultipleCombined.Validate if the designated constraints aren't met.
type Paging_MultipleCombinedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Paging_MultipleCombinedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Paging_MultipleCombinedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Paging_MultipleCombinedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Paging_MultipleCombinedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Paging_MultipleCombinedValidationError) ErrorName() string {
	return "Paging_MultipleCombinedValidationError"
}

// Error satisfies the builtin error interface
func (e Paging_MultipleCombinedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaging_MultipleCombined.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Paging_MultipleCombinedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Paging_MultipleCombinedValidationError{}
