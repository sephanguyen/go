// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pmpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DiscountServiceClient is the client API for DiscountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscountServiceClient interface {
	RetrieveActiveStudentDiscountTag(ctx context.Context, in *RetrieveActiveStudentDiscountTagRequest, opts ...grpc.CallOption) (*RetrieveActiveStudentDiscountTagResponse, error)
	UpsertStudentDiscountTag(ctx context.Context, in *UpsertStudentDiscountTagRequest, opts ...grpc.CallOption) (*UpsertStudentDiscountTagResponse, error)
}

type discountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscountServiceClient(cc grpc.ClientConnInterface) DiscountServiceClient {
	return &discountServiceClient{cc}
}

func (c *discountServiceClient) RetrieveActiveStudentDiscountTag(ctx context.Context, in *RetrieveActiveStudentDiscountTagRequest, opts ...grpc.CallOption) (*RetrieveActiveStudentDiscountTagResponse, error) {
	out := new(RetrieveActiveStudentDiscountTagResponse)
	err := c.cc.Invoke(ctx, "/discount.v1.DiscountService/RetrieveActiveStudentDiscountTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discountServiceClient) UpsertStudentDiscountTag(ctx context.Context, in *UpsertStudentDiscountTagRequest, opts ...grpc.CallOption) (*UpsertStudentDiscountTagResponse, error) {
	out := new(UpsertStudentDiscountTagResponse)
	err := c.cc.Invoke(ctx, "/discount.v1.DiscountService/UpsertStudentDiscountTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscountServiceServer is the server API for DiscountService service.
// All implementations should embed UnimplementedDiscountServiceServer
// for forward compatibility
type DiscountServiceServer interface {
	RetrieveActiveStudentDiscountTag(context.Context, *RetrieveActiveStudentDiscountTagRequest) (*RetrieveActiveStudentDiscountTagResponse, error)
	UpsertStudentDiscountTag(context.Context, *UpsertStudentDiscountTagRequest) (*UpsertStudentDiscountTagResponse, error)
}

// UnimplementedDiscountServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDiscountServiceServer struct {
}

func (UnimplementedDiscountServiceServer) RetrieveActiveStudentDiscountTag(context.Context, *RetrieveActiveStudentDiscountTagRequest) (*RetrieveActiveStudentDiscountTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveActiveStudentDiscountTag not implemented")
}
func (UnimplementedDiscountServiceServer) UpsertStudentDiscountTag(context.Context, *UpsertStudentDiscountTagRequest) (*UpsertStudentDiscountTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertStudentDiscountTag not implemented")
}

// UnsafeDiscountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscountServiceServer will
// result in compilation errors.
type UnsafeDiscountServiceServer interface {
	mustEmbedUnimplementedDiscountServiceServer()
}

func RegisterDiscountServiceServer(s grpc.ServiceRegistrar, srv DiscountServiceServer) {
	s.RegisterService(&_DiscountService_serviceDesc, srv)
}

func _DiscountService_RetrieveActiveStudentDiscountTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveActiveStudentDiscountTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscountServiceServer).RetrieveActiveStudentDiscountTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discount.v1.DiscountService/RetrieveActiveStudentDiscountTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscountServiceServer).RetrieveActiveStudentDiscountTag(ctx, req.(*RetrieveActiveStudentDiscountTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiscountService_UpsertStudentDiscountTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertStudentDiscountTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscountServiceServer).UpsertStudentDiscountTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discount.v1.DiscountService/UpsertStudentDiscountTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscountServiceServer).UpsertStudentDiscountTag(ctx, req.(*UpsertStudentDiscountTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DiscountService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "discount.v1.DiscountService",
	HandlerType: (*DiscountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveActiveStudentDiscountTag",
			Handler:    _DiscountService_RetrieveActiveStudentDiscountTag_Handler,
		},
		{
			MethodName: "UpsertStudentDiscountTag",
			Handler:    _DiscountService_UpsertStudentDiscountTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "discount/v1/discount.proto",
}
