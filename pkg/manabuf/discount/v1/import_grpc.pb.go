// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pmpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ImportMasterDataServiceClient is the client API for ImportMasterDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImportMasterDataServiceClient interface {
	ImportDiscountTag(ctx context.Context, in *ImportDiscountTagRequest, opts ...grpc.CallOption) (*ImportDiscountTagResponse, error)
	ImportProductGroup(ctx context.Context, in *ImportProductGroupRequest, opts ...grpc.CallOption) (*ImportProductGroupResponse, error)
	ImportProductGroupMapping(ctx context.Context, in *ImportProductGroupMappingRequest, opts ...grpc.CallOption) (*ImportProductGroupMappingResponse, error)
	ImportPackageDiscountSetting(ctx context.Context, in *ImportPackageDiscountSettingRequest, opts ...grpc.CallOption) (*ImportPackageDiscountSettingResponse, error)
	ImportPackageDiscountCourseMapping(ctx context.Context, in *ImportPackageDiscountCourseMappingRequest, opts ...grpc.CallOption) (*ImportPackageDiscountCourseMappingResponse, error)
}

type importMasterDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImportMasterDataServiceClient(cc grpc.ClientConnInterface) ImportMasterDataServiceClient {
	return &importMasterDataServiceClient{cc}
}

func (c *importMasterDataServiceClient) ImportDiscountTag(ctx context.Context, in *ImportDiscountTagRequest, opts ...grpc.CallOption) (*ImportDiscountTagResponse, error) {
	out := new(ImportDiscountTagResponse)
	err := c.cc.Invoke(ctx, "/discount.v1.ImportMasterDataService/ImportDiscountTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importMasterDataServiceClient) ImportProductGroup(ctx context.Context, in *ImportProductGroupRequest, opts ...grpc.CallOption) (*ImportProductGroupResponse, error) {
	out := new(ImportProductGroupResponse)
	err := c.cc.Invoke(ctx, "/discount.v1.ImportMasterDataService/ImportProductGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importMasterDataServiceClient) ImportProductGroupMapping(ctx context.Context, in *ImportProductGroupMappingRequest, opts ...grpc.CallOption) (*ImportProductGroupMappingResponse, error) {
	out := new(ImportProductGroupMappingResponse)
	err := c.cc.Invoke(ctx, "/discount.v1.ImportMasterDataService/ImportProductGroupMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importMasterDataServiceClient) ImportPackageDiscountSetting(ctx context.Context, in *ImportPackageDiscountSettingRequest, opts ...grpc.CallOption) (*ImportPackageDiscountSettingResponse, error) {
	out := new(ImportPackageDiscountSettingResponse)
	err := c.cc.Invoke(ctx, "/discount.v1.ImportMasterDataService/ImportPackageDiscountSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importMasterDataServiceClient) ImportPackageDiscountCourseMapping(ctx context.Context, in *ImportPackageDiscountCourseMappingRequest, opts ...grpc.CallOption) (*ImportPackageDiscountCourseMappingResponse, error) {
	out := new(ImportPackageDiscountCourseMappingResponse)
	err := c.cc.Invoke(ctx, "/discount.v1.ImportMasterDataService/ImportPackageDiscountCourseMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImportMasterDataServiceServer is the server API for ImportMasterDataService service.
// All implementations should embed UnimplementedImportMasterDataServiceServer
// for forward compatibility
type ImportMasterDataServiceServer interface {
	ImportDiscountTag(context.Context, *ImportDiscountTagRequest) (*ImportDiscountTagResponse, error)
	ImportProductGroup(context.Context, *ImportProductGroupRequest) (*ImportProductGroupResponse, error)
	ImportProductGroupMapping(context.Context, *ImportProductGroupMappingRequest) (*ImportProductGroupMappingResponse, error)
	ImportPackageDiscountSetting(context.Context, *ImportPackageDiscountSettingRequest) (*ImportPackageDiscountSettingResponse, error)
	ImportPackageDiscountCourseMapping(context.Context, *ImportPackageDiscountCourseMappingRequest) (*ImportPackageDiscountCourseMappingResponse, error)
}

// UnimplementedImportMasterDataServiceServer should be embedded to have forward compatible implementations.
type UnimplementedImportMasterDataServiceServer struct {
}

func (UnimplementedImportMasterDataServiceServer) ImportDiscountTag(context.Context, *ImportDiscountTagRequest) (*ImportDiscountTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportDiscountTag not implemented")
}
func (UnimplementedImportMasterDataServiceServer) ImportProductGroup(context.Context, *ImportProductGroupRequest) (*ImportProductGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportProductGroup not implemented")
}
func (UnimplementedImportMasterDataServiceServer) ImportProductGroupMapping(context.Context, *ImportProductGroupMappingRequest) (*ImportProductGroupMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportProductGroupMapping not implemented")
}
func (UnimplementedImportMasterDataServiceServer) ImportPackageDiscountSetting(context.Context, *ImportPackageDiscountSettingRequest) (*ImportPackageDiscountSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportPackageDiscountSetting not implemented")
}
func (UnimplementedImportMasterDataServiceServer) ImportPackageDiscountCourseMapping(context.Context, *ImportPackageDiscountCourseMappingRequest) (*ImportPackageDiscountCourseMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportPackageDiscountCourseMapping not implemented")
}

// UnsafeImportMasterDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImportMasterDataServiceServer will
// result in compilation errors.
type UnsafeImportMasterDataServiceServer interface {
	mustEmbedUnimplementedImportMasterDataServiceServer()
}

func RegisterImportMasterDataServiceServer(s grpc.ServiceRegistrar, srv ImportMasterDataServiceServer) {
	s.RegisterService(&_ImportMasterDataService_serviceDesc, srv)
}

func _ImportMasterDataService_ImportDiscountTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportDiscountTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportMasterDataServiceServer).ImportDiscountTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discount.v1.ImportMasterDataService/ImportDiscountTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportMasterDataServiceServer).ImportDiscountTag(ctx, req.(*ImportDiscountTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportMasterDataService_ImportProductGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportProductGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportMasterDataServiceServer).ImportProductGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discount.v1.ImportMasterDataService/ImportProductGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportMasterDataServiceServer).ImportProductGroup(ctx, req.(*ImportProductGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportMasterDataService_ImportProductGroupMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportProductGroupMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportMasterDataServiceServer).ImportProductGroupMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discount.v1.ImportMasterDataService/ImportProductGroupMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportMasterDataServiceServer).ImportProductGroupMapping(ctx, req.(*ImportProductGroupMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportMasterDataService_ImportPackageDiscountSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportPackageDiscountSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportMasterDataServiceServer).ImportPackageDiscountSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discount.v1.ImportMasterDataService/ImportPackageDiscountSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportMasterDataServiceServer).ImportPackageDiscountSetting(ctx, req.(*ImportPackageDiscountSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportMasterDataService_ImportPackageDiscountCourseMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportPackageDiscountCourseMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportMasterDataServiceServer).ImportPackageDiscountCourseMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discount.v1.ImportMasterDataService/ImportPackageDiscountCourseMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportMasterDataServiceServer).ImportPackageDiscountCourseMapping(ctx, req.(*ImportPackageDiscountCourseMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImportMasterDataService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "discount.v1.ImportMasterDataService",
	HandlerType: (*ImportMasterDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportDiscountTag",
			Handler:    _ImportMasterDataService_ImportDiscountTag_Handler,
		},
		{
			MethodName: "ImportProductGroup",
			Handler:    _ImportMasterDataService_ImportProductGroup_Handler,
		},
		{
			MethodName: "ImportProductGroupMapping",
			Handler:    _ImportMasterDataService_ImportProductGroupMapping_Handler,
		},
		{
			MethodName: "ImportPackageDiscountSetting",
			Handler:    _ImportMasterDataService_ImportPackageDiscountSetting_Handler,
		},
		{
			MethodName: "ImportPackageDiscountCourseMapping",
			Handler:    _ImportMasterDataService_ImportPackageDiscountCourseMapping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "discount/v1/import.proto",
}
