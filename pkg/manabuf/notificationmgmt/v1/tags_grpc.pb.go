// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package npb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TagMgmtModifierServiceClient is the client API for TagMgmtModifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagMgmtModifierServiceClient interface {
	UpsertTag(ctx context.Context, in *UpsertTagRequest, opts ...grpc.CallOption) (*UpsertTagResponse, error)
	// Deprecated
	DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*DeleteTagResponse, error)
	ImportTags(ctx context.Context, in *ImportTagsRequest, opts ...grpc.CallOption) (*ImportTagsResponse, error)
}

type tagMgmtModifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTagMgmtModifierServiceClient(cc grpc.ClientConnInterface) TagMgmtModifierServiceClient {
	return &tagMgmtModifierServiceClient{cc}
}

func (c *tagMgmtModifierServiceClient) UpsertTag(ctx context.Context, in *UpsertTagRequest, opts ...grpc.CallOption) (*UpsertTagResponse, error) {
	out := new(UpsertTagResponse)
	err := c.cc.Invoke(ctx, "/notificationmgmt.v1.TagMgmtModifierService/UpsertTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagMgmtModifierServiceClient) DeleteTag(ctx context.Context, in *DeleteTagRequest, opts ...grpc.CallOption) (*DeleteTagResponse, error) {
	out := new(DeleteTagResponse)
	err := c.cc.Invoke(ctx, "/notificationmgmt.v1.TagMgmtModifierService/DeleteTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagMgmtModifierServiceClient) ImportTags(ctx context.Context, in *ImportTagsRequest, opts ...grpc.CallOption) (*ImportTagsResponse, error) {
	out := new(ImportTagsResponse)
	err := c.cc.Invoke(ctx, "/notificationmgmt.v1.TagMgmtModifierService/ImportTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagMgmtModifierServiceServer is the server API for TagMgmtModifierService service.
// All implementations should embed UnimplementedTagMgmtModifierServiceServer
// for forward compatibility
type TagMgmtModifierServiceServer interface {
	UpsertTag(context.Context, *UpsertTagRequest) (*UpsertTagResponse, error)
	// Deprecated
	DeleteTag(context.Context, *DeleteTagRequest) (*DeleteTagResponse, error)
	ImportTags(context.Context, *ImportTagsRequest) (*ImportTagsResponse, error)
}

// UnimplementedTagMgmtModifierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTagMgmtModifierServiceServer struct {
}

func (UnimplementedTagMgmtModifierServiceServer) UpsertTag(context.Context, *UpsertTagRequest) (*UpsertTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertTag not implemented")
}
func (UnimplementedTagMgmtModifierServiceServer) DeleteTag(context.Context, *DeleteTagRequest) (*DeleteTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (UnimplementedTagMgmtModifierServiceServer) ImportTags(context.Context, *ImportTagsRequest) (*ImportTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportTags not implemented")
}

// UnsafeTagMgmtModifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagMgmtModifierServiceServer will
// result in compilation errors.
type UnsafeTagMgmtModifierServiceServer interface {
	mustEmbedUnimplementedTagMgmtModifierServiceServer()
}

func RegisterTagMgmtModifierServiceServer(s grpc.ServiceRegistrar, srv TagMgmtModifierServiceServer) {
	s.RegisterService(&_TagMgmtModifierService_serviceDesc, srv)
}

func _TagMgmtModifierService_UpsertTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagMgmtModifierServiceServer).UpsertTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmgmt.v1.TagMgmtModifierService/UpsertTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagMgmtModifierServiceServer).UpsertTag(ctx, req.(*UpsertTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagMgmtModifierService_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagMgmtModifierServiceServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmgmt.v1.TagMgmtModifierService/DeleteTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagMgmtModifierServiceServer).DeleteTag(ctx, req.(*DeleteTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagMgmtModifierService_ImportTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagMgmtModifierServiceServer).ImportTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmgmt.v1.TagMgmtModifierService/ImportTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagMgmtModifierServiceServer).ImportTags(ctx, req.(*ImportTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TagMgmtModifierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "notificationmgmt.v1.TagMgmtModifierService",
	HandlerType: (*TagMgmtModifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertTag",
			Handler:    _TagMgmtModifierService_UpsertTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _TagMgmtModifierService_DeleteTag_Handler,
		},
		{
			MethodName: "ImportTags",
			Handler:    _TagMgmtModifierService_ImportTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notificationmgmt/v1/tags.proto",
}

// TagMgmtReaderServiceClient is the client API for TagMgmtReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagMgmtReaderServiceClient interface {
	CheckExistTagName(ctx context.Context, in *CheckExistTagNameRequest, opts ...grpc.CallOption) (*CheckExistTagNameResponse, error)
	// Deprecated
	GetTagsByFilter(ctx context.Context, in *GetTagsByFilterRequest, opts ...grpc.CallOption) (*GetTagsByFilterResponse, error)
	ExportTags(ctx context.Context, in *ExportTagsRequest, opts ...grpc.CallOption) (*ExportTagsResponse, error)
}

type tagMgmtReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTagMgmtReaderServiceClient(cc grpc.ClientConnInterface) TagMgmtReaderServiceClient {
	return &tagMgmtReaderServiceClient{cc}
}

func (c *tagMgmtReaderServiceClient) CheckExistTagName(ctx context.Context, in *CheckExistTagNameRequest, opts ...grpc.CallOption) (*CheckExistTagNameResponse, error) {
	out := new(CheckExistTagNameResponse)
	err := c.cc.Invoke(ctx, "/notificationmgmt.v1.TagMgmtReaderService/CheckExistTagName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagMgmtReaderServiceClient) GetTagsByFilter(ctx context.Context, in *GetTagsByFilterRequest, opts ...grpc.CallOption) (*GetTagsByFilterResponse, error) {
	out := new(GetTagsByFilterResponse)
	err := c.cc.Invoke(ctx, "/notificationmgmt.v1.TagMgmtReaderService/GetTagsByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagMgmtReaderServiceClient) ExportTags(ctx context.Context, in *ExportTagsRequest, opts ...grpc.CallOption) (*ExportTagsResponse, error) {
	out := new(ExportTagsResponse)
	err := c.cc.Invoke(ctx, "/notificationmgmt.v1.TagMgmtReaderService/ExportTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagMgmtReaderServiceServer is the server API for TagMgmtReaderService service.
// All implementations should embed UnimplementedTagMgmtReaderServiceServer
// for forward compatibility
type TagMgmtReaderServiceServer interface {
	CheckExistTagName(context.Context, *CheckExistTagNameRequest) (*CheckExistTagNameResponse, error)
	// Deprecated
	GetTagsByFilter(context.Context, *GetTagsByFilterRequest) (*GetTagsByFilterResponse, error)
	ExportTags(context.Context, *ExportTagsRequest) (*ExportTagsResponse, error)
}

// UnimplementedTagMgmtReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTagMgmtReaderServiceServer struct {
}

func (UnimplementedTagMgmtReaderServiceServer) CheckExistTagName(context.Context, *CheckExistTagNameRequest) (*CheckExistTagNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckExistTagName not implemented")
}
func (UnimplementedTagMgmtReaderServiceServer) GetTagsByFilter(context.Context, *GetTagsByFilterRequest) (*GetTagsByFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagsByFilter not implemented")
}
func (UnimplementedTagMgmtReaderServiceServer) ExportTags(context.Context, *ExportTagsRequest) (*ExportTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportTags not implemented")
}

// UnsafeTagMgmtReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagMgmtReaderServiceServer will
// result in compilation errors.
type UnsafeTagMgmtReaderServiceServer interface {
	mustEmbedUnimplementedTagMgmtReaderServiceServer()
}

func RegisterTagMgmtReaderServiceServer(s grpc.ServiceRegistrar, srv TagMgmtReaderServiceServer) {
	s.RegisterService(&_TagMgmtReaderService_serviceDesc, srv)
}

func _TagMgmtReaderService_CheckExistTagName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckExistTagNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagMgmtReaderServiceServer).CheckExistTagName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmgmt.v1.TagMgmtReaderService/CheckExistTagName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagMgmtReaderServiceServer).CheckExistTagName(ctx, req.(*CheckExistTagNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagMgmtReaderService_GetTagsByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagsByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagMgmtReaderServiceServer).GetTagsByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmgmt.v1.TagMgmtReaderService/GetTagsByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagMgmtReaderServiceServer).GetTagsByFilter(ctx, req.(*GetTagsByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagMgmtReaderService_ExportTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagMgmtReaderServiceServer).ExportTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmgmt.v1.TagMgmtReaderService/ExportTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagMgmtReaderServiceServer).ExportTags(ctx, req.(*ExportTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TagMgmtReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "notificationmgmt.v1.TagMgmtReaderService",
	HandlerType: (*TagMgmtReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckExistTagName",
			Handler:    _TagMgmtReaderService_CheckExistTagName_Handler,
		},
		{
			MethodName: "GetTagsByFilter",
			Handler:    _TagMgmtReaderService_GetTagsByFilter_Handler,
		},
		{
			MethodName: "ExportTags",
			Handler:    _TagMgmtReaderService_ExportTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notificationmgmt/v1/tags.proto",
}
