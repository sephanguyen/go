// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package npb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// NotificationReaderServiceClient is the client API for NotificationReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationReaderServiceClient interface {
	RetrieveNotificationDetail(ctx context.Context, in *RetrieveNotificationDetailRequest, opts ...grpc.CallOption) (*RetrieveNotificationDetailResponse, error)
	RetrieveNotifications(ctx context.Context, in *RetrieveNotificationsRequest, opts ...grpc.CallOption) (*RetrieveNotificationsResponse, error)
	CountUserNotification(ctx context.Context, in *CountUserNotificationRequest, opts ...grpc.CallOption) (*CountUserNotificationResponse, error)
	GetAnswersByFilter(ctx context.Context, in *GetAnswersByFilterRequest, opts ...grpc.CallOption) (*GetAnswersByFilterResponse, error)
	GetNotificationsByFilter(ctx context.Context, in *GetNotificationsByFilterRequest, opts ...grpc.CallOption) (*GetNotificationsByFilterResponse, error)
	RetrieveGroupAudience(ctx context.Context, in *RetrieveGroupAudienceRequest, opts ...grpc.CallOption) (*RetrieveGroupAudienceResponse, error)
	GetQuestionnaireAnswersCSV(ctx context.Context, in *GetQuestionnaireAnswersCSVRequest, opts ...grpc.CallOption) (*GetQuestionnaireAnswersCSVResponse, error)
	RetrieveDraftAudience(ctx context.Context, in *RetrieveDraftAudienceRequest, opts ...grpc.CallOption) (*RetrieveDraftAudienceResponse, error)
}

type notificationReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationReaderServiceClient(cc grpc.ClientConnInterface) NotificationReaderServiceClient {
	return &notificationReaderServiceClient{cc}
}

func (c *notificationReaderServiceClient) RetrieveNotificationDetail(ctx context.Context, in *RetrieveNotificationDetailRequest, opts ...grpc.CallOption) (*RetrieveNotificationDetailResponse, error) {
	out := new(RetrieveNotificationDetailResponse)
	err := c.cc.Invoke(ctx, "/notificationmgmt.v1.NotificationReaderService/RetrieveNotificationDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationReaderServiceClient) RetrieveNotifications(ctx context.Context, in *RetrieveNotificationsRequest, opts ...grpc.CallOption) (*RetrieveNotificationsResponse, error) {
	out := new(RetrieveNotificationsResponse)
	err := c.cc.Invoke(ctx, "/notificationmgmt.v1.NotificationReaderService/RetrieveNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationReaderServiceClient) CountUserNotification(ctx context.Context, in *CountUserNotificationRequest, opts ...grpc.CallOption) (*CountUserNotificationResponse, error) {
	out := new(CountUserNotificationResponse)
	err := c.cc.Invoke(ctx, "/notificationmgmt.v1.NotificationReaderService/CountUserNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationReaderServiceClient) GetAnswersByFilter(ctx context.Context, in *GetAnswersByFilterRequest, opts ...grpc.CallOption) (*GetAnswersByFilterResponse, error) {
	out := new(GetAnswersByFilterResponse)
	err := c.cc.Invoke(ctx, "/notificationmgmt.v1.NotificationReaderService/GetAnswersByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationReaderServiceClient) GetNotificationsByFilter(ctx context.Context, in *GetNotificationsByFilterRequest, opts ...grpc.CallOption) (*GetNotificationsByFilterResponse, error) {
	out := new(GetNotificationsByFilterResponse)
	err := c.cc.Invoke(ctx, "/notificationmgmt.v1.NotificationReaderService/GetNotificationsByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationReaderServiceClient) RetrieveGroupAudience(ctx context.Context, in *RetrieveGroupAudienceRequest, opts ...grpc.CallOption) (*RetrieveGroupAudienceResponse, error) {
	out := new(RetrieveGroupAudienceResponse)
	err := c.cc.Invoke(ctx, "/notificationmgmt.v1.NotificationReaderService/RetrieveGroupAudience", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationReaderServiceClient) GetQuestionnaireAnswersCSV(ctx context.Context, in *GetQuestionnaireAnswersCSVRequest, opts ...grpc.CallOption) (*GetQuestionnaireAnswersCSVResponse, error) {
	out := new(GetQuestionnaireAnswersCSVResponse)
	err := c.cc.Invoke(ctx, "/notificationmgmt.v1.NotificationReaderService/GetQuestionnaireAnswersCSV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationReaderServiceClient) RetrieveDraftAudience(ctx context.Context, in *RetrieveDraftAudienceRequest, opts ...grpc.CallOption) (*RetrieveDraftAudienceResponse, error) {
	out := new(RetrieveDraftAudienceResponse)
	err := c.cc.Invoke(ctx, "/notificationmgmt.v1.NotificationReaderService/RetrieveDraftAudience", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationReaderServiceServer is the server API for NotificationReaderService service.
// All implementations should embed UnimplementedNotificationReaderServiceServer
// for forward compatibility
type NotificationReaderServiceServer interface {
	RetrieveNotificationDetail(context.Context, *RetrieveNotificationDetailRequest) (*RetrieveNotificationDetailResponse, error)
	RetrieveNotifications(context.Context, *RetrieveNotificationsRequest) (*RetrieveNotificationsResponse, error)
	CountUserNotification(context.Context, *CountUserNotificationRequest) (*CountUserNotificationResponse, error)
	GetAnswersByFilter(context.Context, *GetAnswersByFilterRequest) (*GetAnswersByFilterResponse, error)
	GetNotificationsByFilter(context.Context, *GetNotificationsByFilterRequest) (*GetNotificationsByFilterResponse, error)
	RetrieveGroupAudience(context.Context, *RetrieveGroupAudienceRequest) (*RetrieveGroupAudienceResponse, error)
	GetQuestionnaireAnswersCSV(context.Context, *GetQuestionnaireAnswersCSVRequest) (*GetQuestionnaireAnswersCSVResponse, error)
	RetrieveDraftAudience(context.Context, *RetrieveDraftAudienceRequest) (*RetrieveDraftAudienceResponse, error)
}

// UnimplementedNotificationReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNotificationReaderServiceServer struct {
}

func (UnimplementedNotificationReaderServiceServer) RetrieveNotificationDetail(context.Context, *RetrieveNotificationDetailRequest) (*RetrieveNotificationDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveNotificationDetail not implemented")
}
func (UnimplementedNotificationReaderServiceServer) RetrieveNotifications(context.Context, *RetrieveNotificationsRequest) (*RetrieveNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveNotifications not implemented")
}
func (UnimplementedNotificationReaderServiceServer) CountUserNotification(context.Context, *CountUserNotificationRequest) (*CountUserNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountUserNotification not implemented")
}
func (UnimplementedNotificationReaderServiceServer) GetAnswersByFilter(context.Context, *GetAnswersByFilterRequest) (*GetAnswersByFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnswersByFilter not implemented")
}
func (UnimplementedNotificationReaderServiceServer) GetNotificationsByFilter(context.Context, *GetNotificationsByFilterRequest) (*GetNotificationsByFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationsByFilter not implemented")
}
func (UnimplementedNotificationReaderServiceServer) RetrieveGroupAudience(context.Context, *RetrieveGroupAudienceRequest) (*RetrieveGroupAudienceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveGroupAudience not implemented")
}
func (UnimplementedNotificationReaderServiceServer) GetQuestionnaireAnswersCSV(context.Context, *GetQuestionnaireAnswersCSVRequest) (*GetQuestionnaireAnswersCSVResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionnaireAnswersCSV not implemented")
}
func (UnimplementedNotificationReaderServiceServer) RetrieveDraftAudience(context.Context, *RetrieveDraftAudienceRequest) (*RetrieveDraftAudienceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveDraftAudience not implemented")
}

// UnsafeNotificationReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationReaderServiceServer will
// result in compilation errors.
type UnsafeNotificationReaderServiceServer interface {
	mustEmbedUnimplementedNotificationReaderServiceServer()
}

func RegisterNotificationReaderServiceServer(s grpc.ServiceRegistrar, srv NotificationReaderServiceServer) {
	s.RegisterService(&_NotificationReaderService_serviceDesc, srv)
}

func _NotificationReaderService_RetrieveNotificationDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveNotificationDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationReaderServiceServer).RetrieveNotificationDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmgmt.v1.NotificationReaderService/RetrieveNotificationDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationReaderServiceServer).RetrieveNotificationDetail(ctx, req.(*RetrieveNotificationDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationReaderService_RetrieveNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationReaderServiceServer).RetrieveNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmgmt.v1.NotificationReaderService/RetrieveNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationReaderServiceServer).RetrieveNotifications(ctx, req.(*RetrieveNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationReaderService_CountUserNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountUserNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationReaderServiceServer).CountUserNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmgmt.v1.NotificationReaderService/CountUserNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationReaderServiceServer).CountUserNotification(ctx, req.(*CountUserNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationReaderService_GetAnswersByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnswersByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationReaderServiceServer).GetAnswersByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmgmt.v1.NotificationReaderService/GetAnswersByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationReaderServiceServer).GetAnswersByFilter(ctx, req.(*GetAnswersByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationReaderService_GetNotificationsByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationsByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationReaderServiceServer).GetNotificationsByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmgmt.v1.NotificationReaderService/GetNotificationsByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationReaderServiceServer).GetNotificationsByFilter(ctx, req.(*GetNotificationsByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationReaderService_RetrieveGroupAudience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveGroupAudienceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationReaderServiceServer).RetrieveGroupAudience(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmgmt.v1.NotificationReaderService/RetrieveGroupAudience",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationReaderServiceServer).RetrieveGroupAudience(ctx, req.(*RetrieveGroupAudienceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationReaderService_GetQuestionnaireAnswersCSV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionnaireAnswersCSVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationReaderServiceServer).GetQuestionnaireAnswersCSV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmgmt.v1.NotificationReaderService/GetQuestionnaireAnswersCSV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationReaderServiceServer).GetQuestionnaireAnswersCSV(ctx, req.(*GetQuestionnaireAnswersCSVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationReaderService_RetrieveDraftAudience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveDraftAudienceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationReaderServiceServer).RetrieveDraftAudience(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmgmt.v1.NotificationReaderService/RetrieveDraftAudience",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationReaderServiceServer).RetrieveDraftAudience(ctx, req.(*RetrieveDraftAudienceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotificationReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "notificationmgmt.v1.NotificationReaderService",
	HandlerType: (*NotificationReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveNotificationDetail",
			Handler:    _NotificationReaderService_RetrieveNotificationDetail_Handler,
		},
		{
			MethodName: "RetrieveNotifications",
			Handler:    _NotificationReaderService_RetrieveNotifications_Handler,
		},
		{
			MethodName: "CountUserNotification",
			Handler:    _NotificationReaderService_CountUserNotification_Handler,
		},
		{
			MethodName: "GetAnswersByFilter",
			Handler:    _NotificationReaderService_GetAnswersByFilter_Handler,
		},
		{
			MethodName: "GetNotificationsByFilter",
			Handler:    _NotificationReaderService_GetNotificationsByFilter_Handler,
		},
		{
			MethodName: "RetrieveGroupAudience",
			Handler:    _NotificationReaderService_RetrieveGroupAudience_Handler,
		},
		{
			MethodName: "GetQuestionnaireAnswersCSV",
			Handler:    _NotificationReaderService_GetQuestionnaireAnswersCSV_Handler,
		},
		{
			MethodName: "RetrieveDraftAudience",
			Handler:    _NotificationReaderService_RetrieveDraftAudience_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notificationmgmt/v1/notifications.proto",
}

// NotificationModifierServiceClient is the client API for NotificationModifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationModifierServiceClient interface {
	UpsertNotification(ctx context.Context, in *UpsertNotificationRequest, opts ...grpc.CallOption) (*UpsertNotificationResponse, error)
	SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*SendNotificationResponse, error)
	DiscardNotification(ctx context.Context, in *DiscardNotificationRequest, opts ...grpc.CallOption) (*DiscardNotificationResponse, error)
	NotifyUnreadUser(ctx context.Context, in *NotifyUnreadUserRequest, opts ...grpc.CallOption) (*NotifyUnreadUserResponse, error)
	SendScheduledNotification(ctx context.Context, in *SendScheduledNotificationRequest, opts ...grpc.CallOption) (*SendScheduledNotificationResponse, error)
	SubmitQuestionnaire(ctx context.Context, in *SubmitQuestionnaireRequest, opts ...grpc.CallOption) (*SubmitQuestionnaireResponse, error)
	UpsertQuestionnaireTemplate(ctx context.Context, in *UpsertQuestionnaireTemplateRequest, opts ...grpc.CallOption) (*UpsertQuestionnaireTemplateResponse, error)
	SetStatusForUserNotifications(ctx context.Context, in *SetStatusForUserNotificationsRequest, opts ...grpc.CallOption) (*SetStatusForUserNotificationsResponse, error)
	UpdateUserDeviceToken(ctx context.Context, in *UpdateUserDeviceTokenRequest, opts ...grpc.CallOption) (*UpdateUserDeviceTokenResponse, error)
	DeleteNotification(ctx context.Context, in *DeleteNotificationRequest, opts ...grpc.CallOption) (*DeleteNotificationResponse, error)
}

type notificationModifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationModifierServiceClient(cc grpc.ClientConnInterface) NotificationModifierServiceClient {
	return &notificationModifierServiceClient{cc}
}

func (c *notificationModifierServiceClient) UpsertNotification(ctx context.Context, in *UpsertNotificationRequest, opts ...grpc.CallOption) (*UpsertNotificationResponse, error) {
	out := new(UpsertNotificationResponse)
	err := c.cc.Invoke(ctx, "/notificationmgmt.v1.NotificationModifierService/UpsertNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationModifierServiceClient) SendNotification(ctx context.Context, in *SendNotificationRequest, opts ...grpc.CallOption) (*SendNotificationResponse, error) {
	out := new(SendNotificationResponse)
	err := c.cc.Invoke(ctx, "/notificationmgmt.v1.NotificationModifierService/SendNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationModifierServiceClient) DiscardNotification(ctx context.Context, in *DiscardNotificationRequest, opts ...grpc.CallOption) (*DiscardNotificationResponse, error) {
	out := new(DiscardNotificationResponse)
	err := c.cc.Invoke(ctx, "/notificationmgmt.v1.NotificationModifierService/DiscardNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationModifierServiceClient) NotifyUnreadUser(ctx context.Context, in *NotifyUnreadUserRequest, opts ...grpc.CallOption) (*NotifyUnreadUserResponse, error) {
	out := new(NotifyUnreadUserResponse)
	err := c.cc.Invoke(ctx, "/notificationmgmt.v1.NotificationModifierService/NotifyUnreadUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationModifierServiceClient) SendScheduledNotification(ctx context.Context, in *SendScheduledNotificationRequest, opts ...grpc.CallOption) (*SendScheduledNotificationResponse, error) {
	out := new(SendScheduledNotificationResponse)
	err := c.cc.Invoke(ctx, "/notificationmgmt.v1.NotificationModifierService/SendScheduledNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationModifierServiceClient) SubmitQuestionnaire(ctx context.Context, in *SubmitQuestionnaireRequest, opts ...grpc.CallOption) (*SubmitQuestionnaireResponse, error) {
	out := new(SubmitQuestionnaireResponse)
	err := c.cc.Invoke(ctx, "/notificationmgmt.v1.NotificationModifierService/SubmitQuestionnaire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationModifierServiceClient) UpsertQuestionnaireTemplate(ctx context.Context, in *UpsertQuestionnaireTemplateRequest, opts ...grpc.CallOption) (*UpsertQuestionnaireTemplateResponse, error) {
	out := new(UpsertQuestionnaireTemplateResponse)
	err := c.cc.Invoke(ctx, "/notificationmgmt.v1.NotificationModifierService/UpsertQuestionnaireTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationModifierServiceClient) SetStatusForUserNotifications(ctx context.Context, in *SetStatusForUserNotificationsRequest, opts ...grpc.CallOption) (*SetStatusForUserNotificationsResponse, error) {
	out := new(SetStatusForUserNotificationsResponse)
	err := c.cc.Invoke(ctx, "/notificationmgmt.v1.NotificationModifierService/SetStatusForUserNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationModifierServiceClient) UpdateUserDeviceToken(ctx context.Context, in *UpdateUserDeviceTokenRequest, opts ...grpc.CallOption) (*UpdateUserDeviceTokenResponse, error) {
	out := new(UpdateUserDeviceTokenResponse)
	err := c.cc.Invoke(ctx, "/notificationmgmt.v1.NotificationModifierService/UpdateUserDeviceToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationModifierServiceClient) DeleteNotification(ctx context.Context, in *DeleteNotificationRequest, opts ...grpc.CallOption) (*DeleteNotificationResponse, error) {
	out := new(DeleteNotificationResponse)
	err := c.cc.Invoke(ctx, "/notificationmgmt.v1.NotificationModifierService/DeleteNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationModifierServiceServer is the server API for NotificationModifierService service.
// All implementations should embed UnimplementedNotificationModifierServiceServer
// for forward compatibility
type NotificationModifierServiceServer interface {
	UpsertNotification(context.Context, *UpsertNotificationRequest) (*UpsertNotificationResponse, error)
	SendNotification(context.Context, *SendNotificationRequest) (*SendNotificationResponse, error)
	DiscardNotification(context.Context, *DiscardNotificationRequest) (*DiscardNotificationResponse, error)
	NotifyUnreadUser(context.Context, *NotifyUnreadUserRequest) (*NotifyUnreadUserResponse, error)
	SendScheduledNotification(context.Context, *SendScheduledNotificationRequest) (*SendScheduledNotificationResponse, error)
	SubmitQuestionnaire(context.Context, *SubmitQuestionnaireRequest) (*SubmitQuestionnaireResponse, error)
	UpsertQuestionnaireTemplate(context.Context, *UpsertQuestionnaireTemplateRequest) (*UpsertQuestionnaireTemplateResponse, error)
	SetStatusForUserNotifications(context.Context, *SetStatusForUserNotificationsRequest) (*SetStatusForUserNotificationsResponse, error)
	UpdateUserDeviceToken(context.Context, *UpdateUserDeviceTokenRequest) (*UpdateUserDeviceTokenResponse, error)
	DeleteNotification(context.Context, *DeleteNotificationRequest) (*DeleteNotificationResponse, error)
}

// UnimplementedNotificationModifierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNotificationModifierServiceServer struct {
}

func (UnimplementedNotificationModifierServiceServer) UpsertNotification(context.Context, *UpsertNotificationRequest) (*UpsertNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertNotification not implemented")
}
func (UnimplementedNotificationModifierServiceServer) SendNotification(context.Context, *SendNotificationRequest) (*SendNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendNotification not implemented")
}
func (UnimplementedNotificationModifierServiceServer) DiscardNotification(context.Context, *DiscardNotificationRequest) (*DiscardNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscardNotification not implemented")
}
func (UnimplementedNotificationModifierServiceServer) NotifyUnreadUser(context.Context, *NotifyUnreadUserRequest) (*NotifyUnreadUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyUnreadUser not implemented")
}
func (UnimplementedNotificationModifierServiceServer) SendScheduledNotification(context.Context, *SendScheduledNotificationRequest) (*SendScheduledNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendScheduledNotification not implemented")
}
func (UnimplementedNotificationModifierServiceServer) SubmitQuestionnaire(context.Context, *SubmitQuestionnaireRequest) (*SubmitQuestionnaireResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitQuestionnaire not implemented")
}
func (UnimplementedNotificationModifierServiceServer) UpsertQuestionnaireTemplate(context.Context, *UpsertQuestionnaireTemplateRequest) (*UpsertQuestionnaireTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertQuestionnaireTemplate not implemented")
}
func (UnimplementedNotificationModifierServiceServer) SetStatusForUserNotifications(context.Context, *SetStatusForUserNotificationsRequest) (*SetStatusForUserNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStatusForUserNotifications not implemented")
}
func (UnimplementedNotificationModifierServiceServer) UpdateUserDeviceToken(context.Context, *UpdateUserDeviceTokenRequest) (*UpdateUserDeviceTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserDeviceToken not implemented")
}
func (UnimplementedNotificationModifierServiceServer) DeleteNotification(context.Context, *DeleteNotificationRequest) (*DeleteNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotification not implemented")
}

// UnsafeNotificationModifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationModifierServiceServer will
// result in compilation errors.
type UnsafeNotificationModifierServiceServer interface {
	mustEmbedUnimplementedNotificationModifierServiceServer()
}

func RegisterNotificationModifierServiceServer(s grpc.ServiceRegistrar, srv NotificationModifierServiceServer) {
	s.RegisterService(&_NotificationModifierService_serviceDesc, srv)
}

func _NotificationModifierService_UpsertNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationModifierServiceServer).UpsertNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmgmt.v1.NotificationModifierService/UpsertNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationModifierServiceServer).UpsertNotification(ctx, req.(*UpsertNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationModifierService_SendNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationModifierServiceServer).SendNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmgmt.v1.NotificationModifierService/SendNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationModifierServiceServer).SendNotification(ctx, req.(*SendNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationModifierService_DiscardNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscardNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationModifierServiceServer).DiscardNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmgmt.v1.NotificationModifierService/DiscardNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationModifierServiceServer).DiscardNotification(ctx, req.(*DiscardNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationModifierService_NotifyUnreadUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyUnreadUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationModifierServiceServer).NotifyUnreadUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmgmt.v1.NotificationModifierService/NotifyUnreadUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationModifierServiceServer).NotifyUnreadUser(ctx, req.(*NotifyUnreadUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationModifierService_SendScheduledNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendScheduledNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationModifierServiceServer).SendScheduledNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmgmt.v1.NotificationModifierService/SendScheduledNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationModifierServiceServer).SendScheduledNotification(ctx, req.(*SendScheduledNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationModifierService_SubmitQuestionnaire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitQuestionnaireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationModifierServiceServer).SubmitQuestionnaire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmgmt.v1.NotificationModifierService/SubmitQuestionnaire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationModifierServiceServer).SubmitQuestionnaire(ctx, req.(*SubmitQuestionnaireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationModifierService_UpsertQuestionnaireTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertQuestionnaireTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationModifierServiceServer).UpsertQuestionnaireTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmgmt.v1.NotificationModifierService/UpsertQuestionnaireTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationModifierServiceServer).UpsertQuestionnaireTemplate(ctx, req.(*UpsertQuestionnaireTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationModifierService_SetStatusForUserNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStatusForUserNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationModifierServiceServer).SetStatusForUserNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmgmt.v1.NotificationModifierService/SetStatusForUserNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationModifierServiceServer).SetStatusForUserNotifications(ctx, req.(*SetStatusForUserNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationModifierService_UpdateUserDeviceToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserDeviceTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationModifierServiceServer).UpdateUserDeviceToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmgmt.v1.NotificationModifierService/UpdateUserDeviceToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationModifierServiceServer).UpdateUserDeviceToken(ctx, req.(*UpdateUserDeviceTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationModifierService_DeleteNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationModifierServiceServer).DeleteNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmgmt.v1.NotificationModifierService/DeleteNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationModifierServiceServer).DeleteNotification(ctx, req.(*DeleteNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotificationModifierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "notificationmgmt.v1.NotificationModifierService",
	HandlerType: (*NotificationModifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertNotification",
			Handler:    _NotificationModifierService_UpsertNotification_Handler,
		},
		{
			MethodName: "SendNotification",
			Handler:    _NotificationModifierService_SendNotification_Handler,
		},
		{
			MethodName: "DiscardNotification",
			Handler:    _NotificationModifierService_DiscardNotification_Handler,
		},
		{
			MethodName: "NotifyUnreadUser",
			Handler:    _NotificationModifierService_NotifyUnreadUser_Handler,
		},
		{
			MethodName: "SendScheduledNotification",
			Handler:    _NotificationModifierService_SendScheduledNotification_Handler,
		},
		{
			MethodName: "SubmitQuestionnaire",
			Handler:    _NotificationModifierService_SubmitQuestionnaire_Handler,
		},
		{
			MethodName: "UpsertQuestionnaireTemplate",
			Handler:    _NotificationModifierService_UpsertQuestionnaireTemplate_Handler,
		},
		{
			MethodName: "SetStatusForUserNotifications",
			Handler:    _NotificationModifierService_SetStatusForUserNotifications_Handler,
		},
		{
			MethodName: "UpdateUserDeviceToken",
			Handler:    _NotificationModifierService_UpdateUserDeviceToken_Handler,
		},
		{
			MethodName: "DeleteNotification",
			Handler:    _NotificationModifierService_DeleteNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notificationmgmt/v1/notifications.proto",
}
