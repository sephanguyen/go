// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package npb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SystemNotificationReaderServiceClient is the client API for SystemNotificationReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemNotificationReaderServiceClient interface {
	RetrieveSystemNotifications(ctx context.Context, in *RetrieveSystemNotificationsRequest, opts ...grpc.CallOption) (*RetrieveSystemNotificationsResponse, error)
}

type systemNotificationReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemNotificationReaderServiceClient(cc grpc.ClientConnInterface) SystemNotificationReaderServiceClient {
	return &systemNotificationReaderServiceClient{cc}
}

func (c *systemNotificationReaderServiceClient) RetrieveSystemNotifications(ctx context.Context, in *RetrieveSystemNotificationsRequest, opts ...grpc.CallOption) (*RetrieveSystemNotificationsResponse, error) {
	out := new(RetrieveSystemNotificationsResponse)
	err := c.cc.Invoke(ctx, "/notificationmgmt.v1.SystemNotificationReaderService/RetrieveSystemNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemNotificationReaderServiceServer is the server API for SystemNotificationReaderService service.
// All implementations should embed UnimplementedSystemNotificationReaderServiceServer
// for forward compatibility
type SystemNotificationReaderServiceServer interface {
	RetrieveSystemNotifications(context.Context, *RetrieveSystemNotificationsRequest) (*RetrieveSystemNotificationsResponse, error)
}

// UnimplementedSystemNotificationReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSystemNotificationReaderServiceServer struct {
}

func (UnimplementedSystemNotificationReaderServiceServer) RetrieveSystemNotifications(context.Context, *RetrieveSystemNotificationsRequest) (*RetrieveSystemNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveSystemNotifications not implemented")
}

// UnsafeSystemNotificationReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemNotificationReaderServiceServer will
// result in compilation errors.
type UnsafeSystemNotificationReaderServiceServer interface {
	mustEmbedUnimplementedSystemNotificationReaderServiceServer()
}

func RegisterSystemNotificationReaderServiceServer(s grpc.ServiceRegistrar, srv SystemNotificationReaderServiceServer) {
	s.RegisterService(&_SystemNotificationReaderService_serviceDesc, srv)
}

func _SystemNotificationReaderService_RetrieveSystemNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveSystemNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemNotificationReaderServiceServer).RetrieveSystemNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmgmt.v1.SystemNotificationReaderService/RetrieveSystemNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemNotificationReaderServiceServer).RetrieveSystemNotifications(ctx, req.(*RetrieveSystemNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SystemNotificationReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "notificationmgmt.v1.SystemNotificationReaderService",
	HandlerType: (*SystemNotificationReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveSystemNotifications",
			Handler:    _SystemNotificationReaderService_RetrieveSystemNotifications_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notificationmgmt/v1/system_notifications.proto",
}

// SystemNotificationModifierServiceClient is the client API for SystemNotificationModifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SystemNotificationModifierServiceClient interface {
	SetSystemNotificationStatus(ctx context.Context, in *SetSystemNotificationStatusRequest, opts ...grpc.CallOption) (*SetSystemNotificationStatusResponse, error)
}

type systemNotificationModifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSystemNotificationModifierServiceClient(cc grpc.ClientConnInterface) SystemNotificationModifierServiceClient {
	return &systemNotificationModifierServiceClient{cc}
}

func (c *systemNotificationModifierServiceClient) SetSystemNotificationStatus(ctx context.Context, in *SetSystemNotificationStatusRequest, opts ...grpc.CallOption) (*SetSystemNotificationStatusResponse, error) {
	out := new(SetSystemNotificationStatusResponse)
	err := c.cc.Invoke(ctx, "/notificationmgmt.v1.SystemNotificationModifierService/SetSystemNotificationStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemNotificationModifierServiceServer is the server API for SystemNotificationModifierService service.
// All implementations should embed UnimplementedSystemNotificationModifierServiceServer
// for forward compatibility
type SystemNotificationModifierServiceServer interface {
	SetSystemNotificationStatus(context.Context, *SetSystemNotificationStatusRequest) (*SetSystemNotificationStatusResponse, error)
}

// UnimplementedSystemNotificationModifierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSystemNotificationModifierServiceServer struct {
}

func (UnimplementedSystemNotificationModifierServiceServer) SetSystemNotificationStatus(context.Context, *SetSystemNotificationStatusRequest) (*SetSystemNotificationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSystemNotificationStatus not implemented")
}

// UnsafeSystemNotificationModifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SystemNotificationModifierServiceServer will
// result in compilation errors.
type UnsafeSystemNotificationModifierServiceServer interface {
	mustEmbedUnimplementedSystemNotificationModifierServiceServer()
}

func RegisterSystemNotificationModifierServiceServer(s grpc.ServiceRegistrar, srv SystemNotificationModifierServiceServer) {
	s.RegisterService(&_SystemNotificationModifierService_serviceDesc, srv)
}

func _SystemNotificationModifierService_SetSystemNotificationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSystemNotificationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemNotificationModifierServiceServer).SetSystemNotificationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmgmt.v1.SystemNotificationModifierService/SetSystemNotificationStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemNotificationModifierServiceServer).SetSystemNotificationStatus(ctx, req.(*SetSystemNotificationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SystemNotificationModifierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "notificationmgmt.v1.SystemNotificationModifierService",
	HandlerType: (*SystemNotificationModifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetSystemNotificationStatus",
			Handler:    _SystemNotificationModifierService_SetSystemNotificationStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notificationmgmt/v1/system_notifications.proto",
}
