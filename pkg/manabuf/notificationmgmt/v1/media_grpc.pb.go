// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package npb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MediaModifierServiceClient is the client API for MediaModifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediaModifierServiceClient interface {
	UpsertMedia(ctx context.Context, in *UpsertMediaRequest, opts ...grpc.CallOption) (*UpsertMediaResponse, error)
}

type mediaModifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaModifierServiceClient(cc grpc.ClientConnInterface) MediaModifierServiceClient {
	return &mediaModifierServiceClient{cc}
}

func (c *mediaModifierServiceClient) UpsertMedia(ctx context.Context, in *UpsertMediaRequest, opts ...grpc.CallOption) (*UpsertMediaResponse, error) {
	out := new(UpsertMediaResponse)
	err := c.cc.Invoke(ctx, "/notificationmgmt.v1.MediaModifierService/UpsertMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediaModifierServiceServer is the server API for MediaModifierService service.
// All implementations should embed UnimplementedMediaModifierServiceServer
// for forward compatibility
type MediaModifierServiceServer interface {
	UpsertMedia(context.Context, *UpsertMediaRequest) (*UpsertMediaResponse, error)
}

// UnimplementedMediaModifierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMediaModifierServiceServer struct {
}

func (UnimplementedMediaModifierServiceServer) UpsertMedia(context.Context, *UpsertMediaRequest) (*UpsertMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertMedia not implemented")
}

// UnsafeMediaModifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaModifierServiceServer will
// result in compilation errors.
type UnsafeMediaModifierServiceServer interface {
	mustEmbedUnimplementedMediaModifierServiceServer()
}

func RegisterMediaModifierServiceServer(s grpc.ServiceRegistrar, srv MediaModifierServiceServer) {
	s.RegisterService(&_MediaModifierService_serviceDesc, srv)
}

func _MediaModifierService_UpsertMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaModifierServiceServer).UpsertMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmgmt.v1.MediaModifierService/UpsertMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaModifierServiceServer).UpsertMedia(ctx, req.(*UpsertMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MediaModifierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "notificationmgmt.v1.MediaModifierService",
	HandlerType: (*MediaModifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertMedia",
			Handler:    _MediaModifierService_UpsertMedia_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notificationmgmt/v1/media.proto",
}
