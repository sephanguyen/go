// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package npbv2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// NotificationReaderServiceClient is the client API for NotificationReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationReaderServiceClient interface {
	RetrieveNotificationDetail(ctx context.Context, in *RetrieveNotificationDetailRequest, opts ...grpc.CallOption) (*RetrieveNotificationDetailResponse, error)
}

type notificationReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationReaderServiceClient(cc grpc.ClientConnInterface) NotificationReaderServiceClient {
	return &notificationReaderServiceClient{cc}
}

func (c *notificationReaderServiceClient) RetrieveNotificationDetail(ctx context.Context, in *RetrieveNotificationDetailRequest, opts ...grpc.CallOption) (*RetrieveNotificationDetailResponse, error) {
	out := new(RetrieveNotificationDetailResponse)
	err := c.cc.Invoke(ctx, "/notificationmgmt.v2.NotificationReaderService/RetrieveNotificationDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationReaderServiceServer is the server API for NotificationReaderService service.
// All implementations should embed UnimplementedNotificationReaderServiceServer
// for forward compatibility
type NotificationReaderServiceServer interface {
	RetrieveNotificationDetail(context.Context, *RetrieveNotificationDetailRequest) (*RetrieveNotificationDetailResponse, error)
}

// UnimplementedNotificationReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNotificationReaderServiceServer struct {
}

func (UnimplementedNotificationReaderServiceServer) RetrieveNotificationDetail(context.Context, *RetrieveNotificationDetailRequest) (*RetrieveNotificationDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveNotificationDetail not implemented")
}

// UnsafeNotificationReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationReaderServiceServer will
// result in compilation errors.
type UnsafeNotificationReaderServiceServer interface {
	mustEmbedUnimplementedNotificationReaderServiceServer()
}

func RegisterNotificationReaderServiceServer(s grpc.ServiceRegistrar, srv NotificationReaderServiceServer) {
	s.RegisterService(&_NotificationReaderService_serviceDesc, srv)
}

func _NotificationReaderService_RetrieveNotificationDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveNotificationDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationReaderServiceServer).RetrieveNotificationDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notificationmgmt.v2.NotificationReaderService/RetrieveNotificationDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationReaderServiceServer).RetrieveNotificationDetail(ctx, req.(*RetrieveNotificationDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotificationReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "notificationmgmt.v2.NotificationReaderService",
	HandlerType: (*NotificationReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveNotificationDetail",
			Handler:    _NotificationReaderService_RetrieveNotificationDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notificationmgmt/v2/notifications.proto",
}
