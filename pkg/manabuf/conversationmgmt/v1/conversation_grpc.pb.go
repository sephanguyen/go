// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ConversationModifierServiceClient is the client API for ConversationModifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConversationModifierServiceClient interface {
	// Internal gRPC
	CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...grpc.CallOption) (*CreateConversationResponse, error)
	// Internal gRPC
	AddConversationMembers(ctx context.Context, in *AddConversationMembersRequest, opts ...grpc.CallOption) (*AddConversationMembersResponse, error)
	// Internal gRPC
	UpdateConversationInfo(ctx context.Context, in *UpdateConversationInfoRequest, opts ...grpc.CallOption) (*UpdateConversationInfoResponse, error)
	// Internal gRPC
	RemoveConversationMembers(ctx context.Context, in *RemoveConversationMembersRequest, opts ...grpc.CallOption) (*RemoveConversationMembersResponse, error)
	// External gRPC
	DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error)
}

type conversationModifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConversationModifierServiceClient(cc grpc.ClientConnInterface) ConversationModifierServiceClient {
	return &conversationModifierServiceClient{cc}
}

func (c *conversationModifierServiceClient) CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...grpc.CallOption) (*CreateConversationResponse, error) {
	out := new(CreateConversationResponse)
	err := c.cc.Invoke(ctx, "/conversationmgmt.v1.ConversationModifierService/CreateConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationModifierServiceClient) AddConversationMembers(ctx context.Context, in *AddConversationMembersRequest, opts ...grpc.CallOption) (*AddConversationMembersResponse, error) {
	out := new(AddConversationMembersResponse)
	err := c.cc.Invoke(ctx, "/conversationmgmt.v1.ConversationModifierService/AddConversationMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationModifierServiceClient) UpdateConversationInfo(ctx context.Context, in *UpdateConversationInfoRequest, opts ...grpc.CallOption) (*UpdateConversationInfoResponse, error) {
	out := new(UpdateConversationInfoResponse)
	err := c.cc.Invoke(ctx, "/conversationmgmt.v1.ConversationModifierService/UpdateConversationInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationModifierServiceClient) RemoveConversationMembers(ctx context.Context, in *RemoveConversationMembersRequest, opts ...grpc.CallOption) (*RemoveConversationMembersResponse, error) {
	out := new(RemoveConversationMembersResponse)
	err := c.cc.Invoke(ctx, "/conversationmgmt.v1.ConversationModifierService/RemoveConversationMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationModifierServiceClient) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error) {
	out := new(DeleteMessageResponse)
	err := c.cc.Invoke(ctx, "/conversationmgmt.v1.ConversationModifierService/DeleteMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConversationModifierServiceServer is the server API for ConversationModifierService service.
// All implementations should embed UnimplementedConversationModifierServiceServer
// for forward compatibility
type ConversationModifierServiceServer interface {
	// Internal gRPC
	CreateConversation(context.Context, *CreateConversationRequest) (*CreateConversationResponse, error)
	// Internal gRPC
	AddConversationMembers(context.Context, *AddConversationMembersRequest) (*AddConversationMembersResponse, error)
	// Internal gRPC
	UpdateConversationInfo(context.Context, *UpdateConversationInfoRequest) (*UpdateConversationInfoResponse, error)
	// Internal gRPC
	RemoveConversationMembers(context.Context, *RemoveConversationMembersRequest) (*RemoveConversationMembersResponse, error)
	// External gRPC
	DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error)
}

// UnimplementedConversationModifierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConversationModifierServiceServer struct {
}

func (UnimplementedConversationModifierServiceServer) CreateConversation(context.Context, *CreateConversationRequest) (*CreateConversationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConversation not implemented")
}
func (UnimplementedConversationModifierServiceServer) AddConversationMembers(context.Context, *AddConversationMembersRequest) (*AddConversationMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddConversationMembers not implemented")
}
func (UnimplementedConversationModifierServiceServer) UpdateConversationInfo(context.Context, *UpdateConversationInfoRequest) (*UpdateConversationInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConversationInfo not implemented")
}
func (UnimplementedConversationModifierServiceServer) RemoveConversationMembers(context.Context, *RemoveConversationMembersRequest) (*RemoveConversationMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveConversationMembers not implemented")
}
func (UnimplementedConversationModifierServiceServer) DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}

// UnsafeConversationModifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConversationModifierServiceServer will
// result in compilation errors.
type UnsafeConversationModifierServiceServer interface {
	mustEmbedUnimplementedConversationModifierServiceServer()
}

func RegisterConversationModifierServiceServer(s grpc.ServiceRegistrar, srv ConversationModifierServiceServer) {
	s.RegisterService(&_ConversationModifierService_serviceDesc, srv)
}

func _ConversationModifierService_CreateConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationModifierServiceServer).CreateConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/conversationmgmt.v1.ConversationModifierService/CreateConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationModifierServiceServer).CreateConversation(ctx, req.(*CreateConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationModifierService_AddConversationMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddConversationMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationModifierServiceServer).AddConversationMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/conversationmgmt.v1.ConversationModifierService/AddConversationMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationModifierServiceServer).AddConversationMembers(ctx, req.(*AddConversationMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationModifierService_UpdateConversationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConversationInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationModifierServiceServer).UpdateConversationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/conversationmgmt.v1.ConversationModifierService/UpdateConversationInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationModifierServiceServer).UpdateConversationInfo(ctx, req.(*UpdateConversationInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationModifierService_RemoveConversationMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveConversationMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationModifierServiceServer).RemoveConversationMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/conversationmgmt.v1.ConversationModifierService/RemoveConversationMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationModifierServiceServer).RemoveConversationMembers(ctx, req.(*RemoveConversationMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationModifierService_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationModifierServiceServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/conversationmgmt.v1.ConversationModifierService/DeleteMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationModifierServiceServer).DeleteMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConversationModifierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "conversationmgmt.v1.ConversationModifierService",
	HandlerType: (*ConversationModifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConversation",
			Handler:    _ConversationModifierService_CreateConversation_Handler,
		},
		{
			MethodName: "AddConversationMembers",
			Handler:    _ConversationModifierService_AddConversationMembers_Handler,
		},
		{
			MethodName: "UpdateConversationInfo",
			Handler:    _ConversationModifierService_UpdateConversationInfo_Handler,
		},
		{
			MethodName: "RemoveConversationMembers",
			Handler:    _ConversationModifierService_RemoveConversationMembers_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _ConversationModifierService_DeleteMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "conversationmgmt/v1/conversation.proto",
}

// ConversationReaderServiceClient is the client API for ConversationReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConversationReaderServiceClient interface {
	// External gRPC
	GetConversationsDetail(ctx context.Context, in *GetConversationsDetailRequest, opts ...grpc.CallOption) (*GetConversationsDetailResponse, error)
}

type conversationReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConversationReaderServiceClient(cc grpc.ClientConnInterface) ConversationReaderServiceClient {
	return &conversationReaderServiceClient{cc}
}

func (c *conversationReaderServiceClient) GetConversationsDetail(ctx context.Context, in *GetConversationsDetailRequest, opts ...grpc.CallOption) (*GetConversationsDetailResponse, error) {
	out := new(GetConversationsDetailResponse)
	err := c.cc.Invoke(ctx, "/conversationmgmt.v1.ConversationReaderService/GetConversationsDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConversationReaderServiceServer is the server API for ConversationReaderService service.
// All implementations should embed UnimplementedConversationReaderServiceServer
// for forward compatibility
type ConversationReaderServiceServer interface {
	// External gRPC
	GetConversationsDetail(context.Context, *GetConversationsDetailRequest) (*GetConversationsDetailResponse, error)
}

// UnimplementedConversationReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedConversationReaderServiceServer struct {
}

func (UnimplementedConversationReaderServiceServer) GetConversationsDetail(context.Context, *GetConversationsDetailRequest) (*GetConversationsDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversationsDetail not implemented")
}

// UnsafeConversationReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConversationReaderServiceServer will
// result in compilation errors.
type UnsafeConversationReaderServiceServer interface {
	mustEmbedUnimplementedConversationReaderServiceServer()
}

func RegisterConversationReaderServiceServer(s grpc.ServiceRegistrar, srv ConversationReaderServiceServer) {
	s.RegisterService(&_ConversationReaderService_serviceDesc, srv)
}

func _ConversationReaderService_GetConversationsDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationsDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationReaderServiceServer).GetConversationsDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/conversationmgmt.v1.ConversationReaderService/GetConversationsDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationReaderServiceServer).GetConversationsDetail(ctx, req.(*GetConversationsDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConversationReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "conversationmgmt.v1.ConversationReaderService",
	HandlerType: (*ConversationReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConversationsDetail",
			Handler:    _ConversationReaderService_GetConversationsDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "conversationmgmt/v1/conversation.proto",
}
