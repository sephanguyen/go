// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AgoraUserMgmtServiceClient is the client API for AgoraUserMgmtService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgoraUserMgmtServiceClient interface {
	GetAppInfo(ctx context.Context, in *GetAppInfoRequest, opts ...grpc.CallOption) (*GetAppInfoResponse, error)
}

type agoraUserMgmtServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgoraUserMgmtServiceClient(cc grpc.ClientConnInterface) AgoraUserMgmtServiceClient {
	return &agoraUserMgmtServiceClient{cc}
}

func (c *agoraUserMgmtServiceClient) GetAppInfo(ctx context.Context, in *GetAppInfoRequest, opts ...grpc.CallOption) (*GetAppInfoResponse, error) {
	out := new(GetAppInfoResponse)
	err := c.cc.Invoke(ctx, "/conversationmgmt.v1.AgoraUserMgmtService/GetAppInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgoraUserMgmtServiceServer is the server API for AgoraUserMgmtService service.
// All implementations should embed UnimplementedAgoraUserMgmtServiceServer
// for forward compatibility
type AgoraUserMgmtServiceServer interface {
	GetAppInfo(context.Context, *GetAppInfoRequest) (*GetAppInfoResponse, error)
}

// UnimplementedAgoraUserMgmtServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAgoraUserMgmtServiceServer struct {
}

func (UnimplementedAgoraUserMgmtServiceServer) GetAppInfo(context.Context, *GetAppInfoRequest) (*GetAppInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppInfo not implemented")
}

// UnsafeAgoraUserMgmtServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgoraUserMgmtServiceServer will
// result in compilation errors.
type UnsafeAgoraUserMgmtServiceServer interface {
	mustEmbedUnimplementedAgoraUserMgmtServiceServer()
}

func RegisterAgoraUserMgmtServiceServer(s grpc.ServiceRegistrar, srv AgoraUserMgmtServiceServer) {
	s.RegisterService(&_AgoraUserMgmtService_serviceDesc, srv)
}

func _AgoraUserMgmtService_GetAppInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgoraUserMgmtServiceServer).GetAppInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/conversationmgmt.v1.AgoraUserMgmtService/GetAppInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgoraUserMgmtServiceServer).GetAppInfo(ctx, req.(*GetAppInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AgoraUserMgmtService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "conversationmgmt.v1.AgoraUserMgmtService",
	HandlerType: (*AgoraUserMgmtServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAppInfo",
			Handler:    _AgoraUserMgmtService_GetAppInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "conversationmgmt/v1/usermgmt.proto",
}
