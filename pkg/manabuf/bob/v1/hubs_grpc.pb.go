// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// HubReaderServiceClient is the client API for HubReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HubReaderServiceClient interface {
	RetrieveHubs(ctx context.Context, in *RetrieveHubsRequest, opts ...grpc.CallOption) (*RetrieveHubsResponse, error)
}

type hubReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHubReaderServiceClient(cc grpc.ClientConnInterface) HubReaderServiceClient {
	return &hubReaderServiceClient{cc}
}

func (c *hubReaderServiceClient) RetrieveHubs(ctx context.Context, in *RetrieveHubsRequest, opts ...grpc.CallOption) (*RetrieveHubsResponse, error) {
	out := new(RetrieveHubsResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.HubReaderService/RetrieveHubs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HubReaderServiceServer is the server API for HubReaderService service.
// All implementations should embed UnimplementedHubReaderServiceServer
// for forward compatibility
type HubReaderServiceServer interface {
	RetrieveHubs(context.Context, *RetrieveHubsRequest) (*RetrieveHubsResponse, error)
}

// UnimplementedHubReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHubReaderServiceServer struct {
}

func (UnimplementedHubReaderServiceServer) RetrieveHubs(context.Context, *RetrieveHubsRequest) (*RetrieveHubsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveHubs not implemented")
}

// UnsafeHubReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HubReaderServiceServer will
// result in compilation errors.
type UnsafeHubReaderServiceServer interface {
	mustEmbedUnimplementedHubReaderServiceServer()
}

func RegisterHubReaderServiceServer(s grpc.ServiceRegistrar, srv HubReaderServiceServer) {
	s.RegisterService(&_HubReaderService_serviceDesc, srv)
}

func _HubReaderService_RetrieveHubs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveHubsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubReaderServiceServer).RetrieveHubs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.HubReaderService/RetrieveHubs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubReaderServiceServer).RetrieveHubs(ctx, req.(*RetrieveHubsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HubReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bob.v1.HubReaderService",
	HandlerType: (*HubReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveHubs",
			Handler:    _HubReaderService_RetrieveHubs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bob/v1/hubs.proto",
}

// HubModifierServiceClient is the client API for HubModifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HubModifierServiceClient interface {
	RequestATour(ctx context.Context, in *RequestATourRequest, opts ...grpc.CallOption) (*RequestATourResponse, error)
}

type hubModifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHubModifierServiceClient(cc grpc.ClientConnInterface) HubModifierServiceClient {
	return &hubModifierServiceClient{cc}
}

func (c *hubModifierServiceClient) RequestATour(ctx context.Context, in *RequestATourRequest, opts ...grpc.CallOption) (*RequestATourResponse, error) {
	out := new(RequestATourResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.HubModifierService/RequestATour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HubModifierServiceServer is the server API for HubModifierService service.
// All implementations should embed UnimplementedHubModifierServiceServer
// for forward compatibility
type HubModifierServiceServer interface {
	RequestATour(context.Context, *RequestATourRequest) (*RequestATourResponse, error)
}

// UnimplementedHubModifierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHubModifierServiceServer struct {
}

func (UnimplementedHubModifierServiceServer) RequestATour(context.Context, *RequestATourRequest) (*RequestATourResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestATour not implemented")
}

// UnsafeHubModifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HubModifierServiceServer will
// result in compilation errors.
type UnsafeHubModifierServiceServer interface {
	mustEmbedUnimplementedHubModifierServiceServer()
}

func RegisterHubModifierServiceServer(s grpc.ServiceRegistrar, srv HubModifierServiceServer) {
	s.RegisterService(&_HubModifierService_serviceDesc, srv)
}

func _HubModifierService_RequestATour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestATourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HubModifierServiceServer).RequestATour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.HubModifierService/RequestATour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HubModifierServiceServer).RequestATour(ctx, req.(*RequestATourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HubModifierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bob.v1.HubModifierService",
	HandlerType: (*HubModifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestATour",
			Handler:    _HubModifierService_RequestATour_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bob/v1/hubs.proto",
}
