// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TutorModifierServiceClient is the client API for TutorModifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TutorModifierServiceClient interface {
	CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*CreateQuestionResponse, error)
	AllocateStudentQuestion(ctx context.Context, in *AllocateStudentQuestionRequest, opts ...grpc.CallOption) (*AllocateStudentQuestionResponse, error)
	TransitionStudentQuestion(ctx context.Context, in *TransitionStudentQuestionRequest, opts ...grpc.CallOption) (*TransitionStudentQuestionResponse, error)
	UpdateTutorStatus(ctx context.Context, in *UpdateTutorStatusRequest, opts ...grpc.CallOption) (*UpdateTutorStatusResponse, error)
}

type tutorModifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTutorModifierServiceClient(cc grpc.ClientConnInterface) TutorModifierServiceClient {
	return &tutorModifierServiceClient{cc}
}

func (c *tutorModifierServiceClient) CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*CreateQuestionResponse, error) {
	out := new(CreateQuestionResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.TutorModifierService/CreateQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tutorModifierServiceClient) AllocateStudentQuestion(ctx context.Context, in *AllocateStudentQuestionRequest, opts ...grpc.CallOption) (*AllocateStudentQuestionResponse, error) {
	out := new(AllocateStudentQuestionResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.TutorModifierService/AllocateStudentQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tutorModifierServiceClient) TransitionStudentQuestion(ctx context.Context, in *TransitionStudentQuestionRequest, opts ...grpc.CallOption) (*TransitionStudentQuestionResponse, error) {
	out := new(TransitionStudentQuestionResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.TutorModifierService/TransitionStudentQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tutorModifierServiceClient) UpdateTutorStatus(ctx context.Context, in *UpdateTutorStatusRequest, opts ...grpc.CallOption) (*UpdateTutorStatusResponse, error) {
	out := new(UpdateTutorStatusResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.TutorModifierService/UpdateTutorStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TutorModifierServiceServer is the server API for TutorModifierService service.
// All implementations should embed UnimplementedTutorModifierServiceServer
// for forward compatibility
type TutorModifierServiceServer interface {
	CreateQuestion(context.Context, *CreateQuestionRequest) (*CreateQuestionResponse, error)
	AllocateStudentQuestion(context.Context, *AllocateStudentQuestionRequest) (*AllocateStudentQuestionResponse, error)
	TransitionStudentQuestion(context.Context, *TransitionStudentQuestionRequest) (*TransitionStudentQuestionResponse, error)
	UpdateTutorStatus(context.Context, *UpdateTutorStatusRequest) (*UpdateTutorStatusResponse, error)
}

// UnimplementedTutorModifierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTutorModifierServiceServer struct {
}

func (UnimplementedTutorModifierServiceServer) CreateQuestion(context.Context, *CreateQuestionRequest) (*CreateQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestion not implemented")
}
func (UnimplementedTutorModifierServiceServer) AllocateStudentQuestion(context.Context, *AllocateStudentQuestionRequest) (*AllocateStudentQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocateStudentQuestion not implemented")
}
func (UnimplementedTutorModifierServiceServer) TransitionStudentQuestion(context.Context, *TransitionStudentQuestionRequest) (*TransitionStudentQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransitionStudentQuestion not implemented")
}
func (UnimplementedTutorModifierServiceServer) UpdateTutorStatus(context.Context, *UpdateTutorStatusRequest) (*UpdateTutorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTutorStatus not implemented")
}

// UnsafeTutorModifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TutorModifierServiceServer will
// result in compilation errors.
type UnsafeTutorModifierServiceServer interface {
	mustEmbedUnimplementedTutorModifierServiceServer()
}

func RegisterTutorModifierServiceServer(s grpc.ServiceRegistrar, srv TutorModifierServiceServer) {
	s.RegisterService(&_TutorModifierService_serviceDesc, srv)
}

func _TutorModifierService_CreateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TutorModifierServiceServer).CreateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.TutorModifierService/CreateQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TutorModifierServiceServer).CreateQuestion(ctx, req.(*CreateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TutorModifierService_AllocateStudentQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateStudentQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TutorModifierServiceServer).AllocateStudentQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.TutorModifierService/AllocateStudentQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TutorModifierServiceServer).AllocateStudentQuestion(ctx, req.(*AllocateStudentQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TutorModifierService_TransitionStudentQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransitionStudentQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TutorModifierServiceServer).TransitionStudentQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.TutorModifierService/TransitionStudentQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TutorModifierServiceServer).TransitionStudentQuestion(ctx, req.(*TransitionStudentQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TutorModifierService_UpdateTutorStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTutorStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TutorModifierServiceServer).UpdateTutorStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.TutorModifierService/UpdateTutorStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TutorModifierServiceServer).UpdateTutorStatus(ctx, req.(*UpdateTutorStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TutorModifierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bob.v1.TutorModifierService",
	HandlerType: (*TutorModifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQuestion",
			Handler:    _TutorModifierService_CreateQuestion_Handler,
		},
		{
			MethodName: "AllocateStudentQuestion",
			Handler:    _TutorModifierService_AllocateStudentQuestion_Handler,
		},
		{
			MethodName: "TransitionStudentQuestion",
			Handler:    _TutorModifierService_TransitionStudentQuestion_Handler,
		},
		{
			MethodName: "UpdateTutorStatus",
			Handler:    _TutorModifierService_UpdateTutorStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bob/v1/tutors.proto",
}

// TutorReaderServiceClient is the client API for TutorReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TutorReaderServiceClient interface {
	// Deprecated: Do not use.
	QuestionRemain(ctx context.Context, in *QuestionRemainRequest, opts ...grpc.CallOption) (*QuestionRemainResponse, error)
	// Deprecated: Do not use.
	GetStudentQuestions(ctx context.Context, in *GetStudentQuestionsRequest, opts ...grpc.CallOption) (*GetStudentQuestionsResponse, error)
	// Deprecated: Do not use.
	GetArchivedStudentQuestions(ctx context.Context, in *GetArchivedStudentQuestionsRequest, opts ...grpc.CallOption) (*GetArchivedStudentQuestionsResponse, error)
	// Deprecated: Do not use.
	GetOpenStudentQuestions(ctx context.Context, in *GetOpenStudentQuestionsRequest, opts ...grpc.CallOption) (*GetOpenStudentQuestionsResponse, error)
	// Deprecated: Do not use.
	GetTutorProfile(ctx context.Context, in *GetTutorProfileRequest, opts ...grpc.CallOption) (*GetTutorProfileResponse, error)
}

type tutorReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTutorReaderServiceClient(cc grpc.ClientConnInterface) TutorReaderServiceClient {
	return &tutorReaderServiceClient{cc}
}

// Deprecated: Do not use.
func (c *tutorReaderServiceClient) QuestionRemain(ctx context.Context, in *QuestionRemainRequest, opts ...grpc.CallOption) (*QuestionRemainResponse, error) {
	out := new(QuestionRemainResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.TutorReaderService/QuestionRemain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *tutorReaderServiceClient) GetStudentQuestions(ctx context.Context, in *GetStudentQuestionsRequest, opts ...grpc.CallOption) (*GetStudentQuestionsResponse, error) {
	out := new(GetStudentQuestionsResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.TutorReaderService/GetStudentQuestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *tutorReaderServiceClient) GetArchivedStudentQuestions(ctx context.Context, in *GetArchivedStudentQuestionsRequest, opts ...grpc.CallOption) (*GetArchivedStudentQuestionsResponse, error) {
	out := new(GetArchivedStudentQuestionsResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.TutorReaderService/GetArchivedStudentQuestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *tutorReaderServiceClient) GetOpenStudentQuestions(ctx context.Context, in *GetOpenStudentQuestionsRequest, opts ...grpc.CallOption) (*GetOpenStudentQuestionsResponse, error) {
	out := new(GetOpenStudentQuestionsResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.TutorReaderService/GetOpenStudentQuestions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *tutorReaderServiceClient) GetTutorProfile(ctx context.Context, in *GetTutorProfileRequest, opts ...grpc.CallOption) (*GetTutorProfileResponse, error) {
	out := new(GetTutorProfileResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.TutorReaderService/GetTutorProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TutorReaderServiceServer is the server API for TutorReaderService service.
// All implementations should embed UnimplementedTutorReaderServiceServer
// for forward compatibility
type TutorReaderServiceServer interface {
	// Deprecated: Do not use.
	QuestionRemain(context.Context, *QuestionRemainRequest) (*QuestionRemainResponse, error)
	// Deprecated: Do not use.
	GetStudentQuestions(context.Context, *GetStudentQuestionsRequest) (*GetStudentQuestionsResponse, error)
	// Deprecated: Do not use.
	GetArchivedStudentQuestions(context.Context, *GetArchivedStudentQuestionsRequest) (*GetArchivedStudentQuestionsResponse, error)
	// Deprecated: Do not use.
	GetOpenStudentQuestions(context.Context, *GetOpenStudentQuestionsRequest) (*GetOpenStudentQuestionsResponse, error)
	// Deprecated: Do not use.
	GetTutorProfile(context.Context, *GetTutorProfileRequest) (*GetTutorProfileResponse, error)
}

// UnimplementedTutorReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTutorReaderServiceServer struct {
}

func (UnimplementedTutorReaderServiceServer) QuestionRemain(context.Context, *QuestionRemainRequest) (*QuestionRemainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuestionRemain not implemented")
}
func (UnimplementedTutorReaderServiceServer) GetStudentQuestions(context.Context, *GetStudentQuestionsRequest) (*GetStudentQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentQuestions not implemented")
}
func (UnimplementedTutorReaderServiceServer) GetArchivedStudentQuestions(context.Context, *GetArchivedStudentQuestionsRequest) (*GetArchivedStudentQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArchivedStudentQuestions not implemented")
}
func (UnimplementedTutorReaderServiceServer) GetOpenStudentQuestions(context.Context, *GetOpenStudentQuestionsRequest) (*GetOpenStudentQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpenStudentQuestions not implemented")
}
func (UnimplementedTutorReaderServiceServer) GetTutorProfile(context.Context, *GetTutorProfileRequest) (*GetTutorProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTutorProfile not implemented")
}

// UnsafeTutorReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TutorReaderServiceServer will
// result in compilation errors.
type UnsafeTutorReaderServiceServer interface {
	mustEmbedUnimplementedTutorReaderServiceServer()
}

func RegisterTutorReaderServiceServer(s grpc.ServiceRegistrar, srv TutorReaderServiceServer) {
	s.RegisterService(&_TutorReaderService_serviceDesc, srv)
}

func _TutorReaderService_QuestionRemain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionRemainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TutorReaderServiceServer).QuestionRemain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.TutorReaderService/QuestionRemain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TutorReaderServiceServer).QuestionRemain(ctx, req.(*QuestionRemainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TutorReaderService_GetStudentQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TutorReaderServiceServer).GetStudentQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.TutorReaderService/GetStudentQuestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TutorReaderServiceServer).GetStudentQuestions(ctx, req.(*GetStudentQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TutorReaderService_GetArchivedStudentQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArchivedStudentQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TutorReaderServiceServer).GetArchivedStudentQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.TutorReaderService/GetArchivedStudentQuestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TutorReaderServiceServer).GetArchivedStudentQuestions(ctx, req.(*GetArchivedStudentQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TutorReaderService_GetOpenStudentQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpenStudentQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TutorReaderServiceServer).GetOpenStudentQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.TutorReaderService/GetOpenStudentQuestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TutorReaderServiceServer).GetOpenStudentQuestions(ctx, req.(*GetOpenStudentQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TutorReaderService_GetTutorProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTutorProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TutorReaderServiceServer).GetTutorProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.TutorReaderService/GetTutorProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TutorReaderServiceServer).GetTutorProfile(ctx, req.(*GetTutorProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TutorReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bob.v1.TutorReaderService",
	HandlerType: (*TutorReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QuestionRemain",
			Handler:    _TutorReaderService_QuestionRemain_Handler,
		},
		{
			MethodName: "GetStudentQuestions",
			Handler:    _TutorReaderService_GetStudentQuestions_Handler,
		},
		{
			MethodName: "GetArchivedStudentQuestions",
			Handler:    _TutorReaderService_GetArchivedStudentQuestions_Handler,
		},
		{
			MethodName: "GetOpenStudentQuestions",
			Handler:    _TutorReaderService_GetOpenStudentQuestions_Handler,
		},
		{
			MethodName: "GetTutorProfile",
			Handler:    _TutorReaderService_GetTutorProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bob/v1/tutors.proto",
}
