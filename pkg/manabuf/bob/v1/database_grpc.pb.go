// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PostgresUserServiceClient is the client API for PostgresUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostgresUserServiceClient interface {
	GetPostgresUserPermission(ctx context.Context, in *GetPostgresUserPermissionRequest, opts ...grpc.CallOption) (*GetPostgresUserPermissionResponse, error)
}

type postgresUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostgresUserServiceClient(cc grpc.ClientConnInterface) PostgresUserServiceClient {
	return &postgresUserServiceClient{cc}
}

func (c *postgresUserServiceClient) GetPostgresUserPermission(ctx context.Context, in *GetPostgresUserPermissionRequest, opts ...grpc.CallOption) (*GetPostgresUserPermissionResponse, error) {
	out := new(GetPostgresUserPermissionResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.PostgresUserService/GetPostgresUserPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostgresUserServiceServer is the server API for PostgresUserService service.
// All implementations should embed UnimplementedPostgresUserServiceServer
// for forward compatibility
type PostgresUserServiceServer interface {
	GetPostgresUserPermission(context.Context, *GetPostgresUserPermissionRequest) (*GetPostgresUserPermissionResponse, error)
}

// UnimplementedPostgresUserServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPostgresUserServiceServer struct {
}

func (UnimplementedPostgresUserServiceServer) GetPostgresUserPermission(context.Context, *GetPostgresUserPermissionRequest) (*GetPostgresUserPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostgresUserPermission not implemented")
}

// UnsafePostgresUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostgresUserServiceServer will
// result in compilation errors.
type UnsafePostgresUserServiceServer interface {
	mustEmbedUnimplementedPostgresUserServiceServer()
}

func RegisterPostgresUserServiceServer(s grpc.ServiceRegistrar, srv PostgresUserServiceServer) {
	s.RegisterService(&_PostgresUserService_serviceDesc, srv)
}

func _PostgresUserService_GetPostgresUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostgresUserPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresUserServiceServer).GetPostgresUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.PostgresUserService/GetPostgresUserPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresUserServiceServer).GetPostgresUserPermission(ctx, req.(*GetPostgresUserPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PostgresUserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bob.v1.PostgresUserService",
	HandlerType: (*PostgresUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPostgresUserPermission",
			Handler:    _PostgresUserService_GetPostgresUserPermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bob/v1/database.proto",
}

// PostgresNamespaceServiceClient is the client API for PostgresNamespaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostgresNamespaceServiceClient interface {
	GetPostgresNamespace(ctx context.Context, in *GetPostgresNamespaceRequest, opts ...grpc.CallOption) (*GetPostgresNamespaceResponse, error)
}

type postgresNamespaceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostgresNamespaceServiceClient(cc grpc.ClientConnInterface) PostgresNamespaceServiceClient {
	return &postgresNamespaceServiceClient{cc}
}

func (c *postgresNamespaceServiceClient) GetPostgresNamespace(ctx context.Context, in *GetPostgresNamespaceRequest, opts ...grpc.CallOption) (*GetPostgresNamespaceResponse, error) {
	out := new(GetPostgresNamespaceResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.PostgresNamespaceService/GetPostgresNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostgresNamespaceServiceServer is the server API for PostgresNamespaceService service.
// All implementations should embed UnimplementedPostgresNamespaceServiceServer
// for forward compatibility
type PostgresNamespaceServiceServer interface {
	GetPostgresNamespace(context.Context, *GetPostgresNamespaceRequest) (*GetPostgresNamespaceResponse, error)
}

// UnimplementedPostgresNamespaceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPostgresNamespaceServiceServer struct {
}

func (UnimplementedPostgresNamespaceServiceServer) GetPostgresNamespace(context.Context, *GetPostgresNamespaceRequest) (*GetPostgresNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostgresNamespace not implemented")
}

// UnsafePostgresNamespaceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostgresNamespaceServiceServer will
// result in compilation errors.
type UnsafePostgresNamespaceServiceServer interface {
	mustEmbedUnimplementedPostgresNamespaceServiceServer()
}

func RegisterPostgresNamespaceServiceServer(s grpc.ServiceRegistrar, srv PostgresNamespaceServiceServer) {
	s.RegisterService(&_PostgresNamespaceService_serviceDesc, srv)
}

func _PostgresNamespaceService_GetPostgresNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostgresNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostgresNamespaceServiceServer).GetPostgresNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.PostgresNamespaceService/GetPostgresNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostgresNamespaceServiceServer).GetPostgresNamespace(ctx, req.(*GetPostgresNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PostgresNamespaceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bob.v1.PostgresNamespaceService",
	HandlerType: (*PostgresNamespaceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPostgresNamespace",
			Handler:    _PostgresNamespaceService_GetPostgresNamespace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bob/v1/database.proto",
}
