// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ClassReaderServiceClient is the client API for ClassReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClassReaderServiceClient interface {
	ListClass(ctx context.Context, in *ListClassRequest, opts ...grpc.CallOption) (*ListClassResponse, error)
	RetrieveClassMembers(ctx context.Context, in *RetrieveClassMembersRequest, opts ...grpc.CallOption) (*RetrieveClassMembersResponse, error)
	RetrieveClassLearningStatistics(ctx context.Context, in *RetrieveClassLearningStatisticsRequest, opts ...grpc.CallOption) (*RetrieveClassLearningStatisticsResponse, error)
	RetrieveStudentLearningStatistics(ctx context.Context, in *RetrieveStudentLearningStatisticsRequest, opts ...grpc.CallOption) (*RetrieveStudentLearningStatisticsResponse, error)
	RetrieveClassByIDs(ctx context.Context, in *RetrieveClassByIDsRequest, opts ...grpc.CallOption) (*RetrieveClassByIDsResponse, error)
	ListStudentsByLesson(ctx context.Context, in *ListStudentsByLessonRequest, opts ...grpc.CallOption) (*ListStudentsByLessonResponse, error)
	RetrieveClassMembersWithFilters(ctx context.Context, in *RetrieveClassMembersWithFiltersRequest, opts ...grpc.CallOption) (*RetrieveClassMembersWithFiltersResponse, error)
}

type classReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClassReaderServiceClient(cc grpc.ClientConnInterface) ClassReaderServiceClient {
	return &classReaderServiceClient{cc}
}

func (c *classReaderServiceClient) ListClass(ctx context.Context, in *ListClassRequest, opts ...grpc.CallOption) (*ListClassResponse, error) {
	out := new(ListClassResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.ClassReaderService/ListClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classReaderServiceClient) RetrieveClassMembers(ctx context.Context, in *RetrieveClassMembersRequest, opts ...grpc.CallOption) (*RetrieveClassMembersResponse, error) {
	out := new(RetrieveClassMembersResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.ClassReaderService/RetrieveClassMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classReaderServiceClient) RetrieveClassLearningStatistics(ctx context.Context, in *RetrieveClassLearningStatisticsRequest, opts ...grpc.CallOption) (*RetrieveClassLearningStatisticsResponse, error) {
	out := new(RetrieveClassLearningStatisticsResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.ClassReaderService/RetrieveClassLearningStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classReaderServiceClient) RetrieveStudentLearningStatistics(ctx context.Context, in *RetrieveStudentLearningStatisticsRequest, opts ...grpc.CallOption) (*RetrieveStudentLearningStatisticsResponse, error) {
	out := new(RetrieveStudentLearningStatisticsResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.ClassReaderService/RetrieveStudentLearningStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classReaderServiceClient) RetrieveClassByIDs(ctx context.Context, in *RetrieveClassByIDsRequest, opts ...grpc.CallOption) (*RetrieveClassByIDsResponse, error) {
	out := new(RetrieveClassByIDsResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.ClassReaderService/RetrieveClassByIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classReaderServiceClient) ListStudentsByLesson(ctx context.Context, in *ListStudentsByLessonRequest, opts ...grpc.CallOption) (*ListStudentsByLessonResponse, error) {
	out := new(ListStudentsByLessonResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.ClassReaderService/ListStudentsByLesson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classReaderServiceClient) RetrieveClassMembersWithFilters(ctx context.Context, in *RetrieveClassMembersWithFiltersRequest, opts ...grpc.CallOption) (*RetrieveClassMembersWithFiltersResponse, error) {
	out := new(RetrieveClassMembersWithFiltersResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.ClassReaderService/RetrieveClassMembersWithFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClassReaderServiceServer is the server API for ClassReaderService service.
// All implementations should embed UnimplementedClassReaderServiceServer
// for forward compatibility
type ClassReaderServiceServer interface {
	ListClass(context.Context, *ListClassRequest) (*ListClassResponse, error)
	RetrieveClassMembers(context.Context, *RetrieveClassMembersRequest) (*RetrieveClassMembersResponse, error)
	RetrieveClassLearningStatistics(context.Context, *RetrieveClassLearningStatisticsRequest) (*RetrieveClassLearningStatisticsResponse, error)
	RetrieveStudentLearningStatistics(context.Context, *RetrieveStudentLearningStatisticsRequest) (*RetrieveStudentLearningStatisticsResponse, error)
	RetrieveClassByIDs(context.Context, *RetrieveClassByIDsRequest) (*RetrieveClassByIDsResponse, error)
	ListStudentsByLesson(context.Context, *ListStudentsByLessonRequest) (*ListStudentsByLessonResponse, error)
	RetrieveClassMembersWithFilters(context.Context, *RetrieveClassMembersWithFiltersRequest) (*RetrieveClassMembersWithFiltersResponse, error)
}

// UnimplementedClassReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedClassReaderServiceServer struct {
}

func (UnimplementedClassReaderServiceServer) ListClass(context.Context, *ListClassRequest) (*ListClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClass not implemented")
}
func (UnimplementedClassReaderServiceServer) RetrieveClassMembers(context.Context, *RetrieveClassMembersRequest) (*RetrieveClassMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveClassMembers not implemented")
}
func (UnimplementedClassReaderServiceServer) RetrieveClassLearningStatistics(context.Context, *RetrieveClassLearningStatisticsRequest) (*RetrieveClassLearningStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveClassLearningStatistics not implemented")
}
func (UnimplementedClassReaderServiceServer) RetrieveStudentLearningStatistics(context.Context, *RetrieveStudentLearningStatisticsRequest) (*RetrieveStudentLearningStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveStudentLearningStatistics not implemented")
}
func (UnimplementedClassReaderServiceServer) RetrieveClassByIDs(context.Context, *RetrieveClassByIDsRequest) (*RetrieveClassByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveClassByIDs not implemented")
}
func (UnimplementedClassReaderServiceServer) ListStudentsByLesson(context.Context, *ListStudentsByLessonRequest) (*ListStudentsByLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStudentsByLesson not implemented")
}
func (UnimplementedClassReaderServiceServer) RetrieveClassMembersWithFilters(context.Context, *RetrieveClassMembersWithFiltersRequest) (*RetrieveClassMembersWithFiltersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveClassMembersWithFilters not implemented")
}

// UnsafeClassReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClassReaderServiceServer will
// result in compilation errors.
type UnsafeClassReaderServiceServer interface {
	mustEmbedUnimplementedClassReaderServiceServer()
}

func RegisterClassReaderServiceServer(s grpc.ServiceRegistrar, srv ClassReaderServiceServer) {
	s.RegisterService(&_ClassReaderService_serviceDesc, srv)
}

func _ClassReaderService_ListClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassReaderServiceServer).ListClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.ClassReaderService/ListClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassReaderServiceServer).ListClass(ctx, req.(*ListClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassReaderService_RetrieveClassMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveClassMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassReaderServiceServer).RetrieveClassMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.ClassReaderService/RetrieveClassMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassReaderServiceServer).RetrieveClassMembers(ctx, req.(*RetrieveClassMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassReaderService_RetrieveClassLearningStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveClassLearningStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassReaderServiceServer).RetrieveClassLearningStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.ClassReaderService/RetrieveClassLearningStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassReaderServiceServer).RetrieveClassLearningStatistics(ctx, req.(*RetrieveClassLearningStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassReaderService_RetrieveStudentLearningStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveStudentLearningStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassReaderServiceServer).RetrieveStudentLearningStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.ClassReaderService/RetrieveStudentLearningStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassReaderServiceServer).RetrieveStudentLearningStatistics(ctx, req.(*RetrieveStudentLearningStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassReaderService_RetrieveClassByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveClassByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassReaderServiceServer).RetrieveClassByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.ClassReaderService/RetrieveClassByIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassReaderServiceServer).RetrieveClassByIDs(ctx, req.(*RetrieveClassByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassReaderService_ListStudentsByLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStudentsByLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassReaderServiceServer).ListStudentsByLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.ClassReaderService/ListStudentsByLesson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassReaderServiceServer).ListStudentsByLesson(ctx, req.(*ListStudentsByLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassReaderService_RetrieveClassMembersWithFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveClassMembersWithFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassReaderServiceServer).RetrieveClassMembersWithFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.ClassReaderService/RetrieveClassMembersWithFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassReaderServiceServer).RetrieveClassMembersWithFilters(ctx, req.(*RetrieveClassMembersWithFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClassReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bob.v1.ClassReaderService",
	HandlerType: (*ClassReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListClass",
			Handler:    _ClassReaderService_ListClass_Handler,
		},
		{
			MethodName: "RetrieveClassMembers",
			Handler:    _ClassReaderService_RetrieveClassMembers_Handler,
		},
		{
			MethodName: "RetrieveClassLearningStatistics",
			Handler:    _ClassReaderService_RetrieveClassLearningStatistics_Handler,
		},
		{
			MethodName: "RetrieveStudentLearningStatistics",
			Handler:    _ClassReaderService_RetrieveStudentLearningStatistics_Handler,
		},
		{
			MethodName: "RetrieveClassByIDs",
			Handler:    _ClassReaderService_RetrieveClassByIDs_Handler,
		},
		{
			MethodName: "ListStudentsByLesson",
			Handler:    _ClassReaderService_ListStudentsByLesson_Handler,
		},
		{
			MethodName: "RetrieveClassMembersWithFilters",
			Handler:    _ClassReaderService_RetrieveClassMembersWithFilters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bob/v1/classes.proto",
}

// ClassModifierServiceClient is the client API for ClassModifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClassModifierServiceClient interface {
	CreateClass(ctx context.Context, in *CreateClassRequest, opts ...grpc.CallOption) (*CreateClassResponse, error)
	UpdateClassCode(ctx context.Context, in *UpdateClassCodeRequest, opts ...grpc.CallOption) (*UpdateClassCodeResponse, error)
	JoinClass(ctx context.Context, in *JoinClassRequest, opts ...grpc.CallOption) (*JoinClassResponse, error)
	LeaveClass(ctx context.Context, in *LeaveClassRequest, opts ...grpc.CallOption) (*LeaveClassResponse, error)
	AddClassOwner(ctx context.Context, in *AddClassOwnerRequest, opts ...grpc.CallOption) (*AddClassOwnerResponse, error)
	AddClassMember(ctx context.Context, in *AddClassMemberRequest, opts ...grpc.CallOption) (*AddClassMemberResponse, error)
	RemoveClassMember(ctx context.Context, in *RemoveClassMemberRequest, opts ...grpc.CallOption) (*RemoveClassMemberResponse, error)
	EndLiveLesson(ctx context.Context, in *EndLiveLessonRequest, opts ...grpc.CallOption) (*EndLiveLessonResponse, error)
	JoinLesson(ctx context.Context, in *JoinLessonRequest, opts ...grpc.CallOption) (*JoinLessonResponse, error)
	LeaveLesson(ctx context.Context, in *LeaveLessonRequest, opts ...grpc.CallOption) (*LeaveLessonResponse, error)
	ConvertMedia(ctx context.Context, in *ConvertMediaRequest, opts ...grpc.CallOption) (*ConvertMediaResponse, error)
	RetrieveWhiteboardToken(ctx context.Context, in *RetrieveWhiteboardTokenRequest, opts ...grpc.CallOption) (*RetrieveWhiteboardTokenResponse, error)
}

type classModifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClassModifierServiceClient(cc grpc.ClientConnInterface) ClassModifierServiceClient {
	return &classModifierServiceClient{cc}
}

func (c *classModifierServiceClient) CreateClass(ctx context.Context, in *CreateClassRequest, opts ...grpc.CallOption) (*CreateClassResponse, error) {
	out := new(CreateClassResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.ClassModifierService/CreateClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classModifierServiceClient) UpdateClassCode(ctx context.Context, in *UpdateClassCodeRequest, opts ...grpc.CallOption) (*UpdateClassCodeResponse, error) {
	out := new(UpdateClassCodeResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.ClassModifierService/UpdateClassCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classModifierServiceClient) JoinClass(ctx context.Context, in *JoinClassRequest, opts ...grpc.CallOption) (*JoinClassResponse, error) {
	out := new(JoinClassResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.ClassModifierService/JoinClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classModifierServiceClient) LeaveClass(ctx context.Context, in *LeaveClassRequest, opts ...grpc.CallOption) (*LeaveClassResponse, error) {
	out := new(LeaveClassResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.ClassModifierService/LeaveClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classModifierServiceClient) AddClassOwner(ctx context.Context, in *AddClassOwnerRequest, opts ...grpc.CallOption) (*AddClassOwnerResponse, error) {
	out := new(AddClassOwnerResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.ClassModifierService/AddClassOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classModifierServiceClient) AddClassMember(ctx context.Context, in *AddClassMemberRequest, opts ...grpc.CallOption) (*AddClassMemberResponse, error) {
	out := new(AddClassMemberResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.ClassModifierService/AddClassMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classModifierServiceClient) RemoveClassMember(ctx context.Context, in *RemoveClassMemberRequest, opts ...grpc.CallOption) (*RemoveClassMemberResponse, error) {
	out := new(RemoveClassMemberResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.ClassModifierService/RemoveClassMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classModifierServiceClient) EndLiveLesson(ctx context.Context, in *EndLiveLessonRequest, opts ...grpc.CallOption) (*EndLiveLessonResponse, error) {
	out := new(EndLiveLessonResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.ClassModifierService/EndLiveLesson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classModifierServiceClient) JoinLesson(ctx context.Context, in *JoinLessonRequest, opts ...grpc.CallOption) (*JoinLessonResponse, error) {
	out := new(JoinLessonResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.ClassModifierService/JoinLesson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classModifierServiceClient) LeaveLesson(ctx context.Context, in *LeaveLessonRequest, opts ...grpc.CallOption) (*LeaveLessonResponse, error) {
	out := new(LeaveLessonResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.ClassModifierService/LeaveLesson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classModifierServiceClient) ConvertMedia(ctx context.Context, in *ConvertMediaRequest, opts ...grpc.CallOption) (*ConvertMediaResponse, error) {
	out := new(ConvertMediaResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.ClassModifierService/ConvertMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classModifierServiceClient) RetrieveWhiteboardToken(ctx context.Context, in *RetrieveWhiteboardTokenRequest, opts ...grpc.CallOption) (*RetrieveWhiteboardTokenResponse, error) {
	out := new(RetrieveWhiteboardTokenResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.ClassModifierService/RetrieveWhiteboardToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClassModifierServiceServer is the server API for ClassModifierService service.
// All implementations should embed UnimplementedClassModifierServiceServer
// for forward compatibility
type ClassModifierServiceServer interface {
	CreateClass(context.Context, *CreateClassRequest) (*CreateClassResponse, error)
	UpdateClassCode(context.Context, *UpdateClassCodeRequest) (*UpdateClassCodeResponse, error)
	JoinClass(context.Context, *JoinClassRequest) (*JoinClassResponse, error)
	LeaveClass(context.Context, *LeaveClassRequest) (*LeaveClassResponse, error)
	AddClassOwner(context.Context, *AddClassOwnerRequest) (*AddClassOwnerResponse, error)
	AddClassMember(context.Context, *AddClassMemberRequest) (*AddClassMemberResponse, error)
	RemoveClassMember(context.Context, *RemoveClassMemberRequest) (*RemoveClassMemberResponse, error)
	EndLiveLesson(context.Context, *EndLiveLessonRequest) (*EndLiveLessonResponse, error)
	JoinLesson(context.Context, *JoinLessonRequest) (*JoinLessonResponse, error)
	LeaveLesson(context.Context, *LeaveLessonRequest) (*LeaveLessonResponse, error)
	ConvertMedia(context.Context, *ConvertMediaRequest) (*ConvertMediaResponse, error)
	RetrieveWhiteboardToken(context.Context, *RetrieveWhiteboardTokenRequest) (*RetrieveWhiteboardTokenResponse, error)
}

// UnimplementedClassModifierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedClassModifierServiceServer struct {
}

func (UnimplementedClassModifierServiceServer) CreateClass(context.Context, *CreateClassRequest) (*CreateClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClass not implemented")
}
func (UnimplementedClassModifierServiceServer) UpdateClassCode(context.Context, *UpdateClassCodeRequest) (*UpdateClassCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClassCode not implemented")
}
func (UnimplementedClassModifierServiceServer) JoinClass(context.Context, *JoinClassRequest) (*JoinClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinClass not implemented")
}
func (UnimplementedClassModifierServiceServer) LeaveClass(context.Context, *LeaveClassRequest) (*LeaveClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveClass not implemented")
}
func (UnimplementedClassModifierServiceServer) AddClassOwner(context.Context, *AddClassOwnerRequest) (*AddClassOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddClassOwner not implemented")
}
func (UnimplementedClassModifierServiceServer) AddClassMember(context.Context, *AddClassMemberRequest) (*AddClassMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddClassMember not implemented")
}
func (UnimplementedClassModifierServiceServer) RemoveClassMember(context.Context, *RemoveClassMemberRequest) (*RemoveClassMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveClassMember not implemented")
}
func (UnimplementedClassModifierServiceServer) EndLiveLesson(context.Context, *EndLiveLessonRequest) (*EndLiveLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndLiveLesson not implemented")
}
func (UnimplementedClassModifierServiceServer) JoinLesson(context.Context, *JoinLessonRequest) (*JoinLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinLesson not implemented")
}
func (UnimplementedClassModifierServiceServer) LeaveLesson(context.Context, *LeaveLessonRequest) (*LeaveLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveLesson not implemented")
}
func (UnimplementedClassModifierServiceServer) ConvertMedia(context.Context, *ConvertMediaRequest) (*ConvertMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertMedia not implemented")
}
func (UnimplementedClassModifierServiceServer) RetrieveWhiteboardToken(context.Context, *RetrieveWhiteboardTokenRequest) (*RetrieveWhiteboardTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveWhiteboardToken not implemented")
}

// UnsafeClassModifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClassModifierServiceServer will
// result in compilation errors.
type UnsafeClassModifierServiceServer interface {
	mustEmbedUnimplementedClassModifierServiceServer()
}

func RegisterClassModifierServiceServer(s grpc.ServiceRegistrar, srv ClassModifierServiceServer) {
	s.RegisterService(&_ClassModifierService_serviceDesc, srv)
}

func _ClassModifierService_CreateClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassModifierServiceServer).CreateClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.ClassModifierService/CreateClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassModifierServiceServer).CreateClass(ctx, req.(*CreateClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassModifierService_UpdateClassCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClassCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassModifierServiceServer).UpdateClassCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.ClassModifierService/UpdateClassCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassModifierServiceServer).UpdateClassCode(ctx, req.(*UpdateClassCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassModifierService_JoinClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassModifierServiceServer).JoinClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.ClassModifierService/JoinClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassModifierServiceServer).JoinClass(ctx, req.(*JoinClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassModifierService_LeaveClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassModifierServiceServer).LeaveClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.ClassModifierService/LeaveClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassModifierServiceServer).LeaveClass(ctx, req.(*LeaveClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassModifierService_AddClassOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddClassOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassModifierServiceServer).AddClassOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.ClassModifierService/AddClassOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassModifierServiceServer).AddClassOwner(ctx, req.(*AddClassOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassModifierService_AddClassMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddClassMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassModifierServiceServer).AddClassMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.ClassModifierService/AddClassMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassModifierServiceServer).AddClassMember(ctx, req.(*AddClassMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassModifierService_RemoveClassMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveClassMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassModifierServiceServer).RemoveClassMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.ClassModifierService/RemoveClassMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassModifierServiceServer).RemoveClassMember(ctx, req.(*RemoveClassMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassModifierService_EndLiveLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndLiveLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassModifierServiceServer).EndLiveLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.ClassModifierService/EndLiveLesson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassModifierServiceServer).EndLiveLesson(ctx, req.(*EndLiveLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassModifierService_JoinLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassModifierServiceServer).JoinLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.ClassModifierService/JoinLesson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassModifierServiceServer).JoinLesson(ctx, req.(*JoinLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassModifierService_LeaveLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassModifierServiceServer).LeaveLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.ClassModifierService/LeaveLesson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassModifierServiceServer).LeaveLesson(ctx, req.(*LeaveLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassModifierService_ConvertMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassModifierServiceServer).ConvertMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.ClassModifierService/ConvertMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassModifierServiceServer).ConvertMedia(ctx, req.(*ConvertMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassModifierService_RetrieveWhiteboardToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveWhiteboardTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassModifierServiceServer).RetrieveWhiteboardToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.ClassModifierService/RetrieveWhiteboardToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassModifierServiceServer).RetrieveWhiteboardToken(ctx, req.(*RetrieveWhiteboardTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClassModifierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bob.v1.ClassModifierService",
	HandlerType: (*ClassModifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClass",
			Handler:    _ClassModifierService_CreateClass_Handler,
		},
		{
			MethodName: "UpdateClassCode",
			Handler:    _ClassModifierService_UpdateClassCode_Handler,
		},
		{
			MethodName: "JoinClass",
			Handler:    _ClassModifierService_JoinClass_Handler,
		},
		{
			MethodName: "LeaveClass",
			Handler:    _ClassModifierService_LeaveClass_Handler,
		},
		{
			MethodName: "AddClassOwner",
			Handler:    _ClassModifierService_AddClassOwner_Handler,
		},
		{
			MethodName: "AddClassMember",
			Handler:    _ClassModifierService_AddClassMember_Handler,
		},
		{
			MethodName: "RemoveClassMember",
			Handler:    _ClassModifierService_RemoveClassMember_Handler,
		},
		{
			MethodName: "EndLiveLesson",
			Handler:    _ClassModifierService_EndLiveLesson_Handler,
		},
		{
			MethodName: "JoinLesson",
			Handler:    _ClassModifierService_JoinLesson_Handler,
		},
		{
			MethodName: "LeaveLesson",
			Handler:    _ClassModifierService_LeaveLesson_Handler,
		},
		{
			MethodName: "ConvertMedia",
			Handler:    _ClassModifierService_ConvertMedia_Handler,
		},
		{
			MethodName: "RetrieveWhiteboardToken",
			Handler:    _ClassModifierService_RetrieveWhiteboardToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bob/v1/classes.proto",
}
