// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MasterDataImporterServiceClient is the client API for MasterDataImporterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterDataImporterServiceClient interface {
	ImportLocation(ctx context.Context, in *ImportLocationRequest, opts ...grpc.CallOption) (*ImportLocationResponse, error)
	ImportLocationType(ctx context.Context, in *ImportLocationTypeRequest, opts ...grpc.CallOption) (*ImportLocationTypeResponse, error)
}

type masterDataImporterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterDataImporterServiceClient(cc grpc.ClientConnInterface) MasterDataImporterServiceClient {
	return &masterDataImporterServiceClient{cc}
}

func (c *masterDataImporterServiceClient) ImportLocation(ctx context.Context, in *ImportLocationRequest, opts ...grpc.CallOption) (*ImportLocationResponse, error) {
	out := new(ImportLocationResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.MasterDataImporterService/ImportLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDataImporterServiceClient) ImportLocationType(ctx context.Context, in *ImportLocationTypeRequest, opts ...grpc.CallOption) (*ImportLocationTypeResponse, error) {
	out := new(ImportLocationTypeResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.MasterDataImporterService/ImportLocationType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterDataImporterServiceServer is the server API for MasterDataImporterService service.
// All implementations should embed UnimplementedMasterDataImporterServiceServer
// for forward compatibility
type MasterDataImporterServiceServer interface {
	ImportLocation(context.Context, *ImportLocationRequest) (*ImportLocationResponse, error)
	ImportLocationType(context.Context, *ImportLocationTypeRequest) (*ImportLocationTypeResponse, error)
}

// UnimplementedMasterDataImporterServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMasterDataImporterServiceServer struct {
}

func (UnimplementedMasterDataImporterServiceServer) ImportLocation(context.Context, *ImportLocationRequest) (*ImportLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportLocation not implemented")
}
func (UnimplementedMasterDataImporterServiceServer) ImportLocationType(context.Context, *ImportLocationTypeRequest) (*ImportLocationTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportLocationType not implemented")
}

// UnsafeMasterDataImporterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterDataImporterServiceServer will
// result in compilation errors.
type UnsafeMasterDataImporterServiceServer interface {
	mustEmbedUnimplementedMasterDataImporterServiceServer()
}

func RegisterMasterDataImporterServiceServer(s grpc.ServiceRegistrar, srv MasterDataImporterServiceServer) {
	s.RegisterService(&_MasterDataImporterService_serviceDesc, srv)
}

func _MasterDataImporterService_ImportLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDataImporterServiceServer).ImportLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.MasterDataImporterService/ImportLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDataImporterServiceServer).ImportLocation(ctx, req.(*ImportLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDataImporterService_ImportLocationType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportLocationTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDataImporterServiceServer).ImportLocationType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.MasterDataImporterService/ImportLocationType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDataImporterServiceServer).ImportLocationType(ctx, req.(*ImportLocationTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MasterDataImporterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bob.v1.MasterDataImporterService",
	HandlerType: (*MasterDataImporterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportLocation",
			Handler:    _MasterDataImporterService_ImportLocation_Handler,
		},
		{
			MethodName: "ImportLocationType",
			Handler:    _MasterDataImporterService_ImportLocationType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bob/v1/masterdata.proto",
}

// MasterDataReaderServiceClient is the client API for MasterDataReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterDataReaderServiceClient interface {
	RetrieveLocations(ctx context.Context, in *RetrieveLocationsRequest, opts ...grpc.CallOption) (*RetrieveLocationsResponse, error)
	RetrieveLocationTypes(ctx context.Context, in *RetrieveLocationTypesRequest, opts ...grpc.CallOption) (*RetrieveLocationTypesResponse, error)
	RetrieveLowestLevelLocations(ctx context.Context, in *RetrieveLowestLevelLocationsRequest, opts ...grpc.CallOption) (*RetrieveLowestLevelLocationsResponse, error)
}

type masterDataReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterDataReaderServiceClient(cc grpc.ClientConnInterface) MasterDataReaderServiceClient {
	return &masterDataReaderServiceClient{cc}
}

func (c *masterDataReaderServiceClient) RetrieveLocations(ctx context.Context, in *RetrieveLocationsRequest, opts ...grpc.CallOption) (*RetrieveLocationsResponse, error) {
	out := new(RetrieveLocationsResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.MasterDataReaderService/RetrieveLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDataReaderServiceClient) RetrieveLocationTypes(ctx context.Context, in *RetrieveLocationTypesRequest, opts ...grpc.CallOption) (*RetrieveLocationTypesResponse, error) {
	out := new(RetrieveLocationTypesResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.MasterDataReaderService/RetrieveLocationTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDataReaderServiceClient) RetrieveLowestLevelLocations(ctx context.Context, in *RetrieveLowestLevelLocationsRequest, opts ...grpc.CallOption) (*RetrieveLowestLevelLocationsResponse, error) {
	out := new(RetrieveLowestLevelLocationsResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.MasterDataReaderService/RetrieveLowestLevelLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterDataReaderServiceServer is the server API for MasterDataReaderService service.
// All implementations should embed UnimplementedMasterDataReaderServiceServer
// for forward compatibility
type MasterDataReaderServiceServer interface {
	RetrieveLocations(context.Context, *RetrieveLocationsRequest) (*RetrieveLocationsResponse, error)
	RetrieveLocationTypes(context.Context, *RetrieveLocationTypesRequest) (*RetrieveLocationTypesResponse, error)
	RetrieveLowestLevelLocations(context.Context, *RetrieveLowestLevelLocationsRequest) (*RetrieveLowestLevelLocationsResponse, error)
}

// UnimplementedMasterDataReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMasterDataReaderServiceServer struct {
}

func (UnimplementedMasterDataReaderServiceServer) RetrieveLocations(context.Context, *RetrieveLocationsRequest) (*RetrieveLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveLocations not implemented")
}
func (UnimplementedMasterDataReaderServiceServer) RetrieveLocationTypes(context.Context, *RetrieveLocationTypesRequest) (*RetrieveLocationTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveLocationTypes not implemented")
}
func (UnimplementedMasterDataReaderServiceServer) RetrieveLowestLevelLocations(context.Context, *RetrieveLowestLevelLocationsRequest) (*RetrieveLowestLevelLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveLowestLevelLocations not implemented")
}

// UnsafeMasterDataReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterDataReaderServiceServer will
// result in compilation errors.
type UnsafeMasterDataReaderServiceServer interface {
	mustEmbedUnimplementedMasterDataReaderServiceServer()
}

func RegisterMasterDataReaderServiceServer(s grpc.ServiceRegistrar, srv MasterDataReaderServiceServer) {
	s.RegisterService(&_MasterDataReaderService_serviceDesc, srv)
}

func _MasterDataReaderService_RetrieveLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDataReaderServiceServer).RetrieveLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.MasterDataReaderService/RetrieveLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDataReaderServiceServer).RetrieveLocations(ctx, req.(*RetrieveLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDataReaderService_RetrieveLocationTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveLocationTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDataReaderServiceServer).RetrieveLocationTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.MasterDataReaderService/RetrieveLocationTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDataReaderServiceServer).RetrieveLocationTypes(ctx, req.(*RetrieveLocationTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDataReaderService_RetrieveLowestLevelLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveLowestLevelLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDataReaderServiceServer).RetrieveLowestLevelLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.MasterDataReaderService/RetrieveLowestLevelLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDataReaderServiceServer).RetrieveLowestLevelLocations(ctx, req.(*RetrieveLowestLevelLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MasterDataReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bob.v1.MasterDataReaderService",
	HandlerType: (*MasterDataReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveLocations",
			Handler:    _MasterDataReaderService_RetrieveLocations_Handler,
		},
		{
			MethodName: "RetrieveLocationTypes",
			Handler:    _MasterDataReaderService_RetrieveLocationTypes_Handler,
		},
		{
			MethodName: "RetrieveLowestLevelLocations",
			Handler:    _MasterDataReaderService_RetrieveLowestLevelLocations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bob/v1/masterdata.proto",
}
