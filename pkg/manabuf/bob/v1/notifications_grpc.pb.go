// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// NotificationReaderServiceClient is the client API for NotificationReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationReaderServiceClient interface {
	RetrieveNotificationDetail(ctx context.Context, in *RetrieveNotificationDetailRequest, opts ...grpc.CallOption) (*RetrieveNotificationDetailResponse, error)
	RetrieveNotifications(ctx context.Context, in *RetrieveNotificationsRequest, opts ...grpc.CallOption) (*RetrieveNotificationsResponse, error)
	CountUserNotification(ctx context.Context, in *CountUserNotificationRequest, opts ...grpc.CallOption) (*CountUserNotificationResponse, error)
	GetAnswersByFilter(ctx context.Context, in *GetAnswersByFilterRequest, opts ...grpc.CallOption) (*GetAnswersByFilterResponse, error)
}

type notificationReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationReaderServiceClient(cc grpc.ClientConnInterface) NotificationReaderServiceClient {
	return &notificationReaderServiceClient{cc}
}

func (c *notificationReaderServiceClient) RetrieveNotificationDetail(ctx context.Context, in *RetrieveNotificationDetailRequest, opts ...grpc.CallOption) (*RetrieveNotificationDetailResponse, error) {
	out := new(RetrieveNotificationDetailResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.NotificationReaderService/RetrieveNotificationDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationReaderServiceClient) RetrieveNotifications(ctx context.Context, in *RetrieveNotificationsRequest, opts ...grpc.CallOption) (*RetrieveNotificationsResponse, error) {
	out := new(RetrieveNotificationsResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.NotificationReaderService/RetrieveNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationReaderServiceClient) CountUserNotification(ctx context.Context, in *CountUserNotificationRequest, opts ...grpc.CallOption) (*CountUserNotificationResponse, error) {
	out := new(CountUserNotificationResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.NotificationReaderService/CountUserNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationReaderServiceClient) GetAnswersByFilter(ctx context.Context, in *GetAnswersByFilterRequest, opts ...grpc.CallOption) (*GetAnswersByFilterResponse, error) {
	out := new(GetAnswersByFilterResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.NotificationReaderService/GetAnswersByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationReaderServiceServer is the server API for NotificationReaderService service.
// All implementations should embed UnimplementedNotificationReaderServiceServer
// for forward compatibility
type NotificationReaderServiceServer interface {
	RetrieveNotificationDetail(context.Context, *RetrieveNotificationDetailRequest) (*RetrieveNotificationDetailResponse, error)
	RetrieveNotifications(context.Context, *RetrieveNotificationsRequest) (*RetrieveNotificationsResponse, error)
	CountUserNotification(context.Context, *CountUserNotificationRequest) (*CountUserNotificationResponse, error)
	GetAnswersByFilter(context.Context, *GetAnswersByFilterRequest) (*GetAnswersByFilterResponse, error)
}

// UnimplementedNotificationReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNotificationReaderServiceServer struct {
}

func (UnimplementedNotificationReaderServiceServer) RetrieveNotificationDetail(context.Context, *RetrieveNotificationDetailRequest) (*RetrieveNotificationDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveNotificationDetail not implemented")
}
func (UnimplementedNotificationReaderServiceServer) RetrieveNotifications(context.Context, *RetrieveNotificationsRequest) (*RetrieveNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveNotifications not implemented")
}
func (UnimplementedNotificationReaderServiceServer) CountUserNotification(context.Context, *CountUserNotificationRequest) (*CountUserNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountUserNotification not implemented")
}
func (UnimplementedNotificationReaderServiceServer) GetAnswersByFilter(context.Context, *GetAnswersByFilterRequest) (*GetAnswersByFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnswersByFilter not implemented")
}

// UnsafeNotificationReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationReaderServiceServer will
// result in compilation errors.
type UnsafeNotificationReaderServiceServer interface {
	mustEmbedUnimplementedNotificationReaderServiceServer()
}

func RegisterNotificationReaderServiceServer(s grpc.ServiceRegistrar, srv NotificationReaderServiceServer) {
	s.RegisterService(&_NotificationReaderService_serviceDesc, srv)
}

func _NotificationReaderService_RetrieveNotificationDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveNotificationDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationReaderServiceServer).RetrieveNotificationDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.NotificationReaderService/RetrieveNotificationDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationReaderServiceServer).RetrieveNotificationDetail(ctx, req.(*RetrieveNotificationDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationReaderService_RetrieveNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationReaderServiceServer).RetrieveNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.NotificationReaderService/RetrieveNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationReaderServiceServer).RetrieveNotifications(ctx, req.(*RetrieveNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationReaderService_CountUserNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountUserNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationReaderServiceServer).CountUserNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.NotificationReaderService/CountUserNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationReaderServiceServer).CountUserNotification(ctx, req.(*CountUserNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationReaderService_GetAnswersByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnswersByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationReaderServiceServer).GetAnswersByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.NotificationReaderService/GetAnswersByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationReaderServiceServer).GetAnswersByFilter(ctx, req.(*GetAnswersByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotificationReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bob.v1.NotificationReaderService",
	HandlerType: (*NotificationReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveNotificationDetail",
			Handler:    _NotificationReaderService_RetrieveNotificationDetail_Handler,
		},
		{
			MethodName: "RetrieveNotifications",
			Handler:    _NotificationReaderService_RetrieveNotifications_Handler,
		},
		{
			MethodName: "CountUserNotification",
			Handler:    _NotificationReaderService_CountUserNotification_Handler,
		},
		{
			MethodName: "GetAnswersByFilter",
			Handler:    _NotificationReaderService_GetAnswersByFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bob/v1/notifications.proto",
}

// NotificationModifierServiceClient is the client API for NotificationModifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationModifierServiceClient interface {
	SetUserNotificationStatus(ctx context.Context, in *SetUserNotificationStatusRequest, opts ...grpc.CallOption) (*SetUserNotificationStatusResponse, error)
}

type notificationModifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationModifierServiceClient(cc grpc.ClientConnInterface) NotificationModifierServiceClient {
	return &notificationModifierServiceClient{cc}
}

func (c *notificationModifierServiceClient) SetUserNotificationStatus(ctx context.Context, in *SetUserNotificationStatusRequest, opts ...grpc.CallOption) (*SetUserNotificationStatusResponse, error) {
	out := new(SetUserNotificationStatusResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.NotificationModifierService/SetUserNotificationStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationModifierServiceServer is the server API for NotificationModifierService service.
// All implementations should embed UnimplementedNotificationModifierServiceServer
// for forward compatibility
type NotificationModifierServiceServer interface {
	SetUserNotificationStatus(context.Context, *SetUserNotificationStatusRequest) (*SetUserNotificationStatusResponse, error)
}

// UnimplementedNotificationModifierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNotificationModifierServiceServer struct {
}

func (UnimplementedNotificationModifierServiceServer) SetUserNotificationStatus(context.Context, *SetUserNotificationStatusRequest) (*SetUserNotificationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserNotificationStatus not implemented")
}

// UnsafeNotificationModifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationModifierServiceServer will
// result in compilation errors.
type UnsafeNotificationModifierServiceServer interface {
	mustEmbedUnimplementedNotificationModifierServiceServer()
}

func RegisterNotificationModifierServiceServer(s grpc.ServiceRegistrar, srv NotificationModifierServiceServer) {
	s.RegisterService(&_NotificationModifierService_serviceDesc, srv)
}

func _NotificationModifierService_SetUserNotificationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserNotificationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationModifierServiceServer).SetUserNotificationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.NotificationModifierService/SetUserNotificationStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationModifierServiceServer).SetUserNotificationStatus(ctx, req.(*SetUserNotificationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotificationModifierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bob.v1.NotificationModifierService",
	HandlerType: (*NotificationModifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetUserNotificationStatus",
			Handler:    _NotificationModifierService_SetUserNotificationStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bob/v1/notifications.proto",
}
