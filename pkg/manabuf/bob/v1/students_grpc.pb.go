// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// StudentReaderServiceClient is the client API for StudentReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentReaderServiceClient interface {
	FindStudent(ctx context.Context, in *FindStudentRequest, opts ...grpc.CallOption) (*FindStudentResponse, error)
	RetrieveStudentProfile(ctx context.Context, in *RetrieveStudentProfileRequest, opts ...grpc.CallOption) (*RetrieveStudentProfileResponse, error)
	RetrieveLearningProgress(ctx context.Context, in *RetrieveLearningProgressRequest, opts ...grpc.CallOption) (*RetrieveLearningProgressResponse, error)
	RetrieveStat(ctx context.Context, in *RetrieveStatRequest, opts ...grpc.CallOption) (*RetrieveStatResponse, error)
	RetrieveStudentAssociatedToParentAccount(ctx context.Context, in *RetrieveStudentAssociatedToParentAccountRequest, opts ...grpc.CallOption) (*RetrieveStudentAssociatedToParentAccountResponse, error)
	GetListSchoolIDsByStudentIDs(ctx context.Context, in *GetListSchoolIDsByStudentIDsRequest, opts ...grpc.CallOption) (*GetListSchoolIDsByStudentIDsResponse, error)
	RetrieveStudentSchoolHistory(ctx context.Context, in *RetrieveStudentSchoolHistoryRequest, opts ...grpc.CallOption) (*RetrieveStudentSchoolHistoryResponse, error)
}

type studentReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentReaderServiceClient(cc grpc.ClientConnInterface) StudentReaderServiceClient {
	return &studentReaderServiceClient{cc}
}

func (c *studentReaderServiceClient) FindStudent(ctx context.Context, in *FindStudentRequest, opts ...grpc.CallOption) (*FindStudentResponse, error) {
	out := new(FindStudentResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.StudentReaderService/FindStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentReaderServiceClient) RetrieveStudentProfile(ctx context.Context, in *RetrieveStudentProfileRequest, opts ...grpc.CallOption) (*RetrieveStudentProfileResponse, error) {
	out := new(RetrieveStudentProfileResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.StudentReaderService/RetrieveStudentProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentReaderServiceClient) RetrieveLearningProgress(ctx context.Context, in *RetrieveLearningProgressRequest, opts ...grpc.CallOption) (*RetrieveLearningProgressResponse, error) {
	out := new(RetrieveLearningProgressResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.StudentReaderService/RetrieveLearningProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentReaderServiceClient) RetrieveStat(ctx context.Context, in *RetrieveStatRequest, opts ...grpc.CallOption) (*RetrieveStatResponse, error) {
	out := new(RetrieveStatResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.StudentReaderService/RetrieveStat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentReaderServiceClient) RetrieveStudentAssociatedToParentAccount(ctx context.Context, in *RetrieveStudentAssociatedToParentAccountRequest, opts ...grpc.CallOption) (*RetrieveStudentAssociatedToParentAccountResponse, error) {
	out := new(RetrieveStudentAssociatedToParentAccountResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.StudentReaderService/RetrieveStudentAssociatedToParentAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentReaderServiceClient) GetListSchoolIDsByStudentIDs(ctx context.Context, in *GetListSchoolIDsByStudentIDsRequest, opts ...grpc.CallOption) (*GetListSchoolIDsByStudentIDsResponse, error) {
	out := new(GetListSchoolIDsByStudentIDsResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.StudentReaderService/GetListSchoolIDsByStudentIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentReaderServiceClient) RetrieveStudentSchoolHistory(ctx context.Context, in *RetrieveStudentSchoolHistoryRequest, opts ...grpc.CallOption) (*RetrieveStudentSchoolHistoryResponse, error) {
	out := new(RetrieveStudentSchoolHistoryResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.StudentReaderService/RetrieveStudentSchoolHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentReaderServiceServer is the server API for StudentReaderService service.
// All implementations should embed UnimplementedStudentReaderServiceServer
// for forward compatibility
type StudentReaderServiceServer interface {
	FindStudent(context.Context, *FindStudentRequest) (*FindStudentResponse, error)
	RetrieveStudentProfile(context.Context, *RetrieveStudentProfileRequest) (*RetrieveStudentProfileResponse, error)
	RetrieveLearningProgress(context.Context, *RetrieveLearningProgressRequest) (*RetrieveLearningProgressResponse, error)
	RetrieveStat(context.Context, *RetrieveStatRequest) (*RetrieveStatResponse, error)
	RetrieveStudentAssociatedToParentAccount(context.Context, *RetrieveStudentAssociatedToParentAccountRequest) (*RetrieveStudentAssociatedToParentAccountResponse, error)
	GetListSchoolIDsByStudentIDs(context.Context, *GetListSchoolIDsByStudentIDsRequest) (*GetListSchoolIDsByStudentIDsResponse, error)
	RetrieveStudentSchoolHistory(context.Context, *RetrieveStudentSchoolHistoryRequest) (*RetrieveStudentSchoolHistoryResponse, error)
}

// UnimplementedStudentReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStudentReaderServiceServer struct {
}

func (UnimplementedStudentReaderServiceServer) FindStudent(context.Context, *FindStudentRequest) (*FindStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindStudent not implemented")
}
func (UnimplementedStudentReaderServiceServer) RetrieveStudentProfile(context.Context, *RetrieveStudentProfileRequest) (*RetrieveStudentProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveStudentProfile not implemented")
}
func (UnimplementedStudentReaderServiceServer) RetrieveLearningProgress(context.Context, *RetrieveLearningProgressRequest) (*RetrieveLearningProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveLearningProgress not implemented")
}
func (UnimplementedStudentReaderServiceServer) RetrieveStat(context.Context, *RetrieveStatRequest) (*RetrieveStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveStat not implemented")
}
func (UnimplementedStudentReaderServiceServer) RetrieveStudentAssociatedToParentAccount(context.Context, *RetrieveStudentAssociatedToParentAccountRequest) (*RetrieveStudentAssociatedToParentAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveStudentAssociatedToParentAccount not implemented")
}
func (UnimplementedStudentReaderServiceServer) GetListSchoolIDsByStudentIDs(context.Context, *GetListSchoolIDsByStudentIDsRequest) (*GetListSchoolIDsByStudentIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListSchoolIDsByStudentIDs not implemented")
}
func (UnimplementedStudentReaderServiceServer) RetrieveStudentSchoolHistory(context.Context, *RetrieveStudentSchoolHistoryRequest) (*RetrieveStudentSchoolHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveStudentSchoolHistory not implemented")
}

// UnsafeStudentReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentReaderServiceServer will
// result in compilation errors.
type UnsafeStudentReaderServiceServer interface {
	mustEmbedUnimplementedStudentReaderServiceServer()
}

func RegisterStudentReaderServiceServer(s grpc.ServiceRegistrar, srv StudentReaderServiceServer) {
	s.RegisterService(&_StudentReaderService_serviceDesc, srv)
}

func _StudentReaderService_FindStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentReaderServiceServer).FindStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.StudentReaderService/FindStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentReaderServiceServer).FindStudent(ctx, req.(*FindStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentReaderService_RetrieveStudentProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveStudentProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentReaderServiceServer).RetrieveStudentProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.StudentReaderService/RetrieveStudentProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentReaderServiceServer).RetrieveStudentProfile(ctx, req.(*RetrieveStudentProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentReaderService_RetrieveLearningProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveLearningProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentReaderServiceServer).RetrieveLearningProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.StudentReaderService/RetrieveLearningProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentReaderServiceServer).RetrieveLearningProgress(ctx, req.(*RetrieveLearningProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentReaderService_RetrieveStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentReaderServiceServer).RetrieveStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.StudentReaderService/RetrieveStat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentReaderServiceServer).RetrieveStat(ctx, req.(*RetrieveStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentReaderService_RetrieveStudentAssociatedToParentAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveStudentAssociatedToParentAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentReaderServiceServer).RetrieveStudentAssociatedToParentAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.StudentReaderService/RetrieveStudentAssociatedToParentAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentReaderServiceServer).RetrieveStudentAssociatedToParentAccount(ctx, req.(*RetrieveStudentAssociatedToParentAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentReaderService_GetListSchoolIDsByStudentIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListSchoolIDsByStudentIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentReaderServiceServer).GetListSchoolIDsByStudentIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.StudentReaderService/GetListSchoolIDsByStudentIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentReaderServiceServer).GetListSchoolIDsByStudentIDs(ctx, req.(*GetListSchoolIDsByStudentIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentReaderService_RetrieveStudentSchoolHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveStudentSchoolHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentReaderServiceServer).RetrieveStudentSchoolHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.StudentReaderService/RetrieveStudentSchoolHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentReaderServiceServer).RetrieveStudentSchoolHistory(ctx, req.(*RetrieveStudentSchoolHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StudentReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bob.v1.StudentReaderService",
	HandlerType: (*StudentReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindStudent",
			Handler:    _StudentReaderService_FindStudent_Handler,
		},
		{
			MethodName: "RetrieveStudentProfile",
			Handler:    _StudentReaderService_RetrieveStudentProfile_Handler,
		},
		{
			MethodName: "RetrieveLearningProgress",
			Handler:    _StudentReaderService_RetrieveLearningProgress_Handler,
		},
		{
			MethodName: "RetrieveStat",
			Handler:    _StudentReaderService_RetrieveStat_Handler,
		},
		{
			MethodName: "RetrieveStudentAssociatedToParentAccount",
			Handler:    _StudentReaderService_RetrieveStudentAssociatedToParentAccount_Handler,
		},
		{
			MethodName: "GetListSchoolIDsByStudentIDs",
			Handler:    _StudentReaderService_GetListSchoolIDsByStudentIDs_Handler,
		},
		{
			MethodName: "RetrieveStudentSchoolHistory",
			Handler:    _StudentReaderService_RetrieveStudentSchoolHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bob/v1/students.proto",
}

// StudentModifierServiceClient is the client API for StudentModifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentModifierServiceClient interface {
	UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error)
	DeleteStudentComments(ctx context.Context, in *DeleteStudentCommentsRequest, opts ...grpc.CallOption) (*DeleteStudentCommentsResponse, error)
}

type studentModifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentModifierServiceClient(cc grpc.ClientConnInterface) StudentModifierServiceClient {
	return &studentModifierServiceClient{cc}
}

func (c *studentModifierServiceClient) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error) {
	out := new(UpdateProfileResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.StudentModifierService/UpdateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentModifierServiceClient) DeleteStudentComments(ctx context.Context, in *DeleteStudentCommentsRequest, opts ...grpc.CallOption) (*DeleteStudentCommentsResponse, error) {
	out := new(DeleteStudentCommentsResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.StudentModifierService/DeleteStudentComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentModifierServiceServer is the server API for StudentModifierService service.
// All implementations should embed UnimplementedStudentModifierServiceServer
// for forward compatibility
type StudentModifierServiceServer interface {
	UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error)
	DeleteStudentComments(context.Context, *DeleteStudentCommentsRequest) (*DeleteStudentCommentsResponse, error)
}

// UnimplementedStudentModifierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStudentModifierServiceServer struct {
}

func (UnimplementedStudentModifierServiceServer) UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedStudentModifierServiceServer) DeleteStudentComments(context.Context, *DeleteStudentCommentsRequest) (*DeleteStudentCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudentComments not implemented")
}

// UnsafeStudentModifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentModifierServiceServer will
// result in compilation errors.
type UnsafeStudentModifierServiceServer interface {
	mustEmbedUnimplementedStudentModifierServiceServer()
}

func RegisterStudentModifierServiceServer(s grpc.ServiceRegistrar, srv StudentModifierServiceServer) {
	s.RegisterService(&_StudentModifierService_serviceDesc, srv)
}

func _StudentModifierService_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentModifierServiceServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.StudentModifierService/UpdateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentModifierServiceServer).UpdateProfile(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentModifierService_DeleteStudentComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStudentCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentModifierServiceServer).DeleteStudentComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.StudentModifierService/DeleteStudentComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentModifierServiceServer).DeleteStudentComments(ctx, req.(*DeleteStudentCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StudentModifierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bob.v1.StudentModifierService",
	HandlerType: (*StudentModifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateProfile",
			Handler:    _StudentModifierService_UpdateProfile_Handler,
		},
		{
			MethodName: "DeleteStudentComments",
			Handler:    _StudentModifierService_DeleteStudentComments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bob/v1/students.proto",
}
