// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UserModifierServiceClient is the client API for UserModifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserModifierServiceClient interface {
	UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error)
	UpdateUserDeviceToken(ctx context.Context, in *UpdateUserDeviceTokenRequest, opts ...grpc.CallOption) (*UpdateUserDeviceTokenResponse, error)
	ExchangeToken(ctx context.Context, in *ExchangeTokenRequest, opts ...grpc.CallOption) (*ExchangeTokenResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	ExchangeCustomToken(ctx context.Context, in *ExchangeCustomTokenRequest, opts ...grpc.CallOption) (*ExchangeCustomTokenResponse, error)
	UpdateUserLastLoginDate(ctx context.Context, in *UpdateUserLastLoginDateRequest, opts ...grpc.CallOption) (*UpdateUserLastLoginDateResponse, error)
}

type userModifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserModifierServiceClient(cc grpc.ClientConnInterface) UserModifierServiceClient {
	return &userModifierServiceClient{cc}
}

func (c *userModifierServiceClient) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error) {
	out := new(UpdateUserProfileResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.UserModifierService/UpdateUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userModifierServiceClient) UpdateUserDeviceToken(ctx context.Context, in *UpdateUserDeviceTokenRequest, opts ...grpc.CallOption) (*UpdateUserDeviceTokenResponse, error) {
	out := new(UpdateUserDeviceTokenResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.UserModifierService/UpdateUserDeviceToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userModifierServiceClient) ExchangeToken(ctx context.Context, in *ExchangeTokenRequest, opts ...grpc.CallOption) (*ExchangeTokenResponse, error) {
	out := new(ExchangeTokenResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.UserModifierService/ExchangeToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userModifierServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.UserModifierService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userModifierServiceClient) ExchangeCustomToken(ctx context.Context, in *ExchangeCustomTokenRequest, opts ...grpc.CallOption) (*ExchangeCustomTokenResponse, error) {
	out := new(ExchangeCustomTokenResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.UserModifierService/ExchangeCustomToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userModifierServiceClient) UpdateUserLastLoginDate(ctx context.Context, in *UpdateUserLastLoginDateRequest, opts ...grpc.CallOption) (*UpdateUserLastLoginDateResponse, error) {
	out := new(UpdateUserLastLoginDateResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.UserModifierService/UpdateUserLastLoginDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserModifierServiceServer is the server API for UserModifierService service.
// All implementations should embed UnimplementedUserModifierServiceServer
// for forward compatibility
type UserModifierServiceServer interface {
	UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error)
	UpdateUserDeviceToken(context.Context, *UpdateUserDeviceTokenRequest) (*UpdateUserDeviceTokenResponse, error)
	ExchangeToken(context.Context, *ExchangeTokenRequest) (*ExchangeTokenResponse, error)
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	ExchangeCustomToken(context.Context, *ExchangeCustomTokenRequest) (*ExchangeCustomTokenResponse, error)
	UpdateUserLastLoginDate(context.Context, *UpdateUserLastLoginDateRequest) (*UpdateUserLastLoginDateResponse, error)
}

// UnimplementedUserModifierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUserModifierServiceServer struct {
}

func (UnimplementedUserModifierServiceServer) UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (UnimplementedUserModifierServiceServer) UpdateUserDeviceToken(context.Context, *UpdateUserDeviceTokenRequest) (*UpdateUserDeviceTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserDeviceToken not implemented")
}
func (UnimplementedUserModifierServiceServer) ExchangeToken(context.Context, *ExchangeTokenRequest) (*ExchangeTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeToken not implemented")
}
func (UnimplementedUserModifierServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedUserModifierServiceServer) ExchangeCustomToken(context.Context, *ExchangeCustomTokenRequest) (*ExchangeCustomTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeCustomToken not implemented")
}
func (UnimplementedUserModifierServiceServer) UpdateUserLastLoginDate(context.Context, *UpdateUserLastLoginDateRequest) (*UpdateUserLastLoginDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserLastLoginDate not implemented")
}

// UnsafeUserModifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserModifierServiceServer will
// result in compilation errors.
type UnsafeUserModifierServiceServer interface {
	mustEmbedUnimplementedUserModifierServiceServer()
}

func RegisterUserModifierServiceServer(s grpc.ServiceRegistrar, srv UserModifierServiceServer) {
	s.RegisterService(&_UserModifierService_serviceDesc, srv)
}

func _UserModifierService_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserModifierServiceServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.UserModifierService/UpdateUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserModifierServiceServer).UpdateUserProfile(ctx, req.(*UpdateUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserModifierService_UpdateUserDeviceToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserDeviceTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserModifierServiceServer).UpdateUserDeviceToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.UserModifierService/UpdateUserDeviceToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserModifierServiceServer).UpdateUserDeviceToken(ctx, req.(*UpdateUserDeviceTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserModifierService_ExchangeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserModifierServiceServer).ExchangeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.UserModifierService/ExchangeToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserModifierServiceServer).ExchangeToken(ctx, req.(*ExchangeTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserModifierService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserModifierServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.UserModifierService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserModifierServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserModifierService_ExchangeCustomToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeCustomTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserModifierServiceServer).ExchangeCustomToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.UserModifierService/ExchangeCustomToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserModifierServiceServer).ExchangeCustomToken(ctx, req.(*ExchangeCustomTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserModifierService_UpdateUserLastLoginDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserLastLoginDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserModifierServiceServer).UpdateUserLastLoginDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.UserModifierService/UpdateUserLastLoginDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserModifierServiceServer).UpdateUserLastLoginDate(ctx, req.(*UpdateUserLastLoginDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserModifierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bob.v1.UserModifierService",
	HandlerType: (*UserModifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUserProfile",
			Handler:    _UserModifierService_UpdateUserProfile_Handler,
		},
		{
			MethodName: "UpdateUserDeviceToken",
			Handler:    _UserModifierService_UpdateUserDeviceToken_Handler,
		},
		{
			MethodName: "ExchangeToken",
			Handler:    _UserModifierService_ExchangeToken_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _UserModifierService_Register_Handler,
		},
		{
			MethodName: "ExchangeCustomToken",
			Handler:    _UserModifierService_ExchangeCustomToken_Handler,
		},
		{
			MethodName: "UpdateUserLastLoginDate",
			Handler:    _UserModifierService_UpdateUserLastLoginDate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bob/v1/users.proto",
}

// UserReaderServiceClient is the client API for UserReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserReaderServiceClient interface {
	GetCurrentUserProfile(ctx context.Context, in *GetCurrentUserProfileRequest, opts ...grpc.CallOption) (*GetCurrentUserProfileResponse, error)
	RetrieveTeacherProfiles(ctx context.Context, in *RetrieveTeacherProfilesRequest, opts ...grpc.CallOption) (*RetrieveTeacherProfilesResponse, error)
	RetrieveBasicProfile(ctx context.Context, in *RetrieveBasicProfileRequest, opts ...grpc.CallOption) (*RetrieveBasicProfileResponse, error)
	SearchBasicProfile(ctx context.Context, in *SearchBasicProfileRequest, opts ...grpc.CallOption) (*SearchBasicProfileResponse, error)
	CheckProfile(ctx context.Context, in *CheckProfileRequest, opts ...grpc.CallOption) (*CheckProfileResponse, error)
}

type userReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserReaderServiceClient(cc grpc.ClientConnInterface) UserReaderServiceClient {
	return &userReaderServiceClient{cc}
}

func (c *userReaderServiceClient) GetCurrentUserProfile(ctx context.Context, in *GetCurrentUserProfileRequest, opts ...grpc.CallOption) (*GetCurrentUserProfileResponse, error) {
	out := new(GetCurrentUserProfileResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.UserReaderService/GetCurrentUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userReaderServiceClient) RetrieveTeacherProfiles(ctx context.Context, in *RetrieveTeacherProfilesRequest, opts ...grpc.CallOption) (*RetrieveTeacherProfilesResponse, error) {
	out := new(RetrieveTeacherProfilesResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.UserReaderService/RetrieveTeacherProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userReaderServiceClient) RetrieveBasicProfile(ctx context.Context, in *RetrieveBasicProfileRequest, opts ...grpc.CallOption) (*RetrieveBasicProfileResponse, error) {
	out := new(RetrieveBasicProfileResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.UserReaderService/RetrieveBasicProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userReaderServiceClient) SearchBasicProfile(ctx context.Context, in *SearchBasicProfileRequest, opts ...grpc.CallOption) (*SearchBasicProfileResponse, error) {
	out := new(SearchBasicProfileResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.UserReaderService/SearchBasicProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userReaderServiceClient) CheckProfile(ctx context.Context, in *CheckProfileRequest, opts ...grpc.CallOption) (*CheckProfileResponse, error) {
	out := new(CheckProfileResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.UserReaderService/CheckProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserReaderServiceServer is the server API for UserReaderService service.
// All implementations should embed UnimplementedUserReaderServiceServer
// for forward compatibility
type UserReaderServiceServer interface {
	GetCurrentUserProfile(context.Context, *GetCurrentUserProfileRequest) (*GetCurrentUserProfileResponse, error)
	RetrieveTeacherProfiles(context.Context, *RetrieveTeacherProfilesRequest) (*RetrieveTeacherProfilesResponse, error)
	RetrieveBasicProfile(context.Context, *RetrieveBasicProfileRequest) (*RetrieveBasicProfileResponse, error)
	SearchBasicProfile(context.Context, *SearchBasicProfileRequest) (*SearchBasicProfileResponse, error)
	CheckProfile(context.Context, *CheckProfileRequest) (*CheckProfileResponse, error)
}

// UnimplementedUserReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUserReaderServiceServer struct {
}

func (UnimplementedUserReaderServiceServer) GetCurrentUserProfile(context.Context, *GetCurrentUserProfileRequest) (*GetCurrentUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentUserProfile not implemented")
}
func (UnimplementedUserReaderServiceServer) RetrieveTeacherProfiles(context.Context, *RetrieveTeacherProfilesRequest) (*RetrieveTeacherProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveTeacherProfiles not implemented")
}
func (UnimplementedUserReaderServiceServer) RetrieveBasicProfile(context.Context, *RetrieveBasicProfileRequest) (*RetrieveBasicProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveBasicProfile not implemented")
}
func (UnimplementedUserReaderServiceServer) SearchBasicProfile(context.Context, *SearchBasicProfileRequest) (*SearchBasicProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBasicProfile not implemented")
}
func (UnimplementedUserReaderServiceServer) CheckProfile(context.Context, *CheckProfileRequest) (*CheckProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckProfile not implemented")
}

// UnsafeUserReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserReaderServiceServer will
// result in compilation errors.
type UnsafeUserReaderServiceServer interface {
	mustEmbedUnimplementedUserReaderServiceServer()
}

func RegisterUserReaderServiceServer(s grpc.ServiceRegistrar, srv UserReaderServiceServer) {
	s.RegisterService(&_UserReaderService_serviceDesc, srv)
}

func _UserReaderService_GetCurrentUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserReaderServiceServer).GetCurrentUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.UserReaderService/GetCurrentUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserReaderServiceServer).GetCurrentUserProfile(ctx, req.(*GetCurrentUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserReaderService_RetrieveTeacherProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveTeacherProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserReaderServiceServer).RetrieveTeacherProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.UserReaderService/RetrieveTeacherProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserReaderServiceServer).RetrieveTeacherProfiles(ctx, req.(*RetrieveTeacherProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserReaderService_RetrieveBasicProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveBasicProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserReaderServiceServer).RetrieveBasicProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.UserReaderService/RetrieveBasicProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserReaderServiceServer).RetrieveBasicProfile(ctx, req.(*RetrieveBasicProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserReaderService_SearchBasicProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBasicProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserReaderServiceServer).SearchBasicProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.UserReaderService/SearchBasicProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserReaderServiceServer).SearchBasicProfile(ctx, req.(*SearchBasicProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserReaderService_CheckProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserReaderServiceServer).CheckProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.UserReaderService/CheckProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserReaderServiceServer).CheckProfile(ctx, req.(*CheckProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bob.v1.UserReaderService",
	HandlerType: (*UserReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrentUserProfile",
			Handler:    _UserReaderService_GetCurrentUserProfile_Handler,
		},
		{
			MethodName: "RetrieveTeacherProfiles",
			Handler:    _UserReaderService_RetrieveTeacherProfiles_Handler,
		},
		{
			MethodName: "RetrieveBasicProfile",
			Handler:    _UserReaderService_RetrieveBasicProfile_Handler,
		},
		{
			MethodName: "SearchBasicProfile",
			Handler:    _UserReaderService_SearchBasicProfile_Handler,
		},
		{
			MethodName: "CheckProfile",
			Handler:    _UserReaderService_CheckProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bob/v1/users.proto",
}
