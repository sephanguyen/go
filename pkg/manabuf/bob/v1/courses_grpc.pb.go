// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CourseReaderServiceClient is the client API for CourseReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourseReaderServiceClient interface {
	ListCourses(ctx context.Context, in *ListCoursesRequest, opts ...grpc.CallOption) (*ListCoursesResponse, error)
	ListCoursesByLocations(ctx context.Context, in *ListCoursesByLocationsRequest, opts ...grpc.CallOption) (*ListCoursesByLocationsResponse, error)
	ListLessons(ctx context.Context, in *ListLessonsRequest, opts ...grpc.CallOption) (*ListLessonsResponse, error)
	ListTopics(ctx context.Context, in *ListTopicsRequest, opts ...grpc.CallOption) (*ListTopicsResponse, error)
	ListLessonMedias(ctx context.Context, in *ListLessonMediasRequest, opts ...grpc.CallOption) (*ListLessonMediasResponse, error)
	RetrieveFlashCardStudyProgress(ctx context.Context, in *RetrieveFlashCardStudyProgressRequest, opts ...grpc.CallOption) (*RetrieveFlashCardStudyProgressResponse, error)
	RetrieveBookTreeByTopicIDs(ctx context.Context, in *RetrieveBookTreeByTopicIDsRequest, opts ...grpc.CallOption) (*RetrieveBookTreeByTopicIDsResponse, error)
}

type courseReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseReaderServiceClient(cc grpc.ClientConnInterface) CourseReaderServiceClient {
	return &courseReaderServiceClient{cc}
}

func (c *courseReaderServiceClient) ListCourses(ctx context.Context, in *ListCoursesRequest, opts ...grpc.CallOption) (*ListCoursesResponse, error) {
	out := new(ListCoursesResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.CourseReaderService/ListCourses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseReaderServiceClient) ListCoursesByLocations(ctx context.Context, in *ListCoursesByLocationsRequest, opts ...grpc.CallOption) (*ListCoursesByLocationsResponse, error) {
	out := new(ListCoursesByLocationsResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.CourseReaderService/ListCoursesByLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseReaderServiceClient) ListLessons(ctx context.Context, in *ListLessonsRequest, opts ...grpc.CallOption) (*ListLessonsResponse, error) {
	out := new(ListLessonsResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.CourseReaderService/ListLessons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseReaderServiceClient) ListTopics(ctx context.Context, in *ListTopicsRequest, opts ...grpc.CallOption) (*ListTopicsResponse, error) {
	out := new(ListTopicsResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.CourseReaderService/ListTopics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseReaderServiceClient) ListLessonMedias(ctx context.Context, in *ListLessonMediasRequest, opts ...grpc.CallOption) (*ListLessonMediasResponse, error) {
	out := new(ListLessonMediasResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.CourseReaderService/ListLessonMedias", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseReaderServiceClient) RetrieveFlashCardStudyProgress(ctx context.Context, in *RetrieveFlashCardStudyProgressRequest, opts ...grpc.CallOption) (*RetrieveFlashCardStudyProgressResponse, error) {
	out := new(RetrieveFlashCardStudyProgressResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.CourseReaderService/RetrieveFlashCardStudyProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courseReaderServiceClient) RetrieveBookTreeByTopicIDs(ctx context.Context, in *RetrieveBookTreeByTopicIDsRequest, opts ...grpc.CallOption) (*RetrieveBookTreeByTopicIDsResponse, error) {
	out := new(RetrieveBookTreeByTopicIDsResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.CourseReaderService/RetrieveBookTreeByTopicIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseReaderServiceServer is the server API for CourseReaderService service.
// All implementations should embed UnimplementedCourseReaderServiceServer
// for forward compatibility
type CourseReaderServiceServer interface {
	ListCourses(context.Context, *ListCoursesRequest) (*ListCoursesResponse, error)
	ListCoursesByLocations(context.Context, *ListCoursesByLocationsRequest) (*ListCoursesByLocationsResponse, error)
	ListLessons(context.Context, *ListLessonsRequest) (*ListLessonsResponse, error)
	ListTopics(context.Context, *ListTopicsRequest) (*ListTopicsResponse, error)
	ListLessonMedias(context.Context, *ListLessonMediasRequest) (*ListLessonMediasResponse, error)
	RetrieveFlashCardStudyProgress(context.Context, *RetrieveFlashCardStudyProgressRequest) (*RetrieveFlashCardStudyProgressResponse, error)
	RetrieveBookTreeByTopicIDs(context.Context, *RetrieveBookTreeByTopicIDsRequest) (*RetrieveBookTreeByTopicIDsResponse, error)
}

// UnimplementedCourseReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCourseReaderServiceServer struct {
}

func (UnimplementedCourseReaderServiceServer) ListCourses(context.Context, *ListCoursesRequest) (*ListCoursesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCourses not implemented")
}
func (UnimplementedCourseReaderServiceServer) ListCoursesByLocations(context.Context, *ListCoursesByLocationsRequest) (*ListCoursesByLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCoursesByLocations not implemented")
}
func (UnimplementedCourseReaderServiceServer) ListLessons(context.Context, *ListLessonsRequest) (*ListLessonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLessons not implemented")
}
func (UnimplementedCourseReaderServiceServer) ListTopics(context.Context, *ListTopicsRequest) (*ListTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTopics not implemented")
}
func (UnimplementedCourseReaderServiceServer) ListLessonMedias(context.Context, *ListLessonMediasRequest) (*ListLessonMediasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLessonMedias not implemented")
}
func (UnimplementedCourseReaderServiceServer) RetrieveFlashCardStudyProgress(context.Context, *RetrieveFlashCardStudyProgressRequest) (*RetrieveFlashCardStudyProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveFlashCardStudyProgress not implemented")
}
func (UnimplementedCourseReaderServiceServer) RetrieveBookTreeByTopicIDs(context.Context, *RetrieveBookTreeByTopicIDsRequest) (*RetrieveBookTreeByTopicIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveBookTreeByTopicIDs not implemented")
}

// UnsafeCourseReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseReaderServiceServer will
// result in compilation errors.
type UnsafeCourseReaderServiceServer interface {
	mustEmbedUnimplementedCourseReaderServiceServer()
}

func RegisterCourseReaderServiceServer(s grpc.ServiceRegistrar, srv CourseReaderServiceServer) {
	s.RegisterService(&_CourseReaderService_serviceDesc, srv)
}

func _CourseReaderService_ListCourses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCoursesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseReaderServiceServer).ListCourses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.CourseReaderService/ListCourses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseReaderServiceServer).ListCourses(ctx, req.(*ListCoursesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseReaderService_ListCoursesByLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCoursesByLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseReaderServiceServer).ListCoursesByLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.CourseReaderService/ListCoursesByLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseReaderServiceServer).ListCoursesByLocations(ctx, req.(*ListCoursesByLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseReaderService_ListLessons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLessonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseReaderServiceServer).ListLessons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.CourseReaderService/ListLessons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseReaderServiceServer).ListLessons(ctx, req.(*ListLessonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseReaderService_ListTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseReaderServiceServer).ListTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.CourseReaderService/ListTopics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseReaderServiceServer).ListTopics(ctx, req.(*ListTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseReaderService_ListLessonMedias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLessonMediasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseReaderServiceServer).ListLessonMedias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.CourseReaderService/ListLessonMedias",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseReaderServiceServer).ListLessonMedias(ctx, req.(*ListLessonMediasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseReaderService_RetrieveFlashCardStudyProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveFlashCardStudyProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseReaderServiceServer).RetrieveFlashCardStudyProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.CourseReaderService/RetrieveFlashCardStudyProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseReaderServiceServer).RetrieveFlashCardStudyProgress(ctx, req.(*RetrieveFlashCardStudyProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourseReaderService_RetrieveBookTreeByTopicIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveBookTreeByTopicIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseReaderServiceServer).RetrieveBookTreeByTopicIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.CourseReaderService/RetrieveBookTreeByTopicIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseReaderServiceServer).RetrieveBookTreeByTopicIDs(ctx, req.(*RetrieveBookTreeByTopicIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CourseReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bob.v1.CourseReaderService",
	HandlerType: (*CourseReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCourses",
			Handler:    _CourseReaderService_ListCourses_Handler,
		},
		{
			MethodName: "ListCoursesByLocations",
			Handler:    _CourseReaderService_ListCoursesByLocations_Handler,
		},
		{
			MethodName: "ListLessons",
			Handler:    _CourseReaderService_ListLessons_Handler,
		},
		{
			MethodName: "ListTopics",
			Handler:    _CourseReaderService_ListTopics_Handler,
		},
		{
			MethodName: "ListLessonMedias",
			Handler:    _CourseReaderService_ListLessonMedias_Handler,
		},
		{
			MethodName: "RetrieveFlashCardStudyProgress",
			Handler:    _CourseReaderService_RetrieveFlashCardStudyProgress_Handler,
		},
		{
			MethodName: "RetrieveBookTreeByTopicIDs",
			Handler:    _CourseReaderService_RetrieveBookTreeByTopicIDs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bob/v1/courses.proto",
}

// CourseModifierServiceClient is the client API for CourseModifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourseModifierServiceClient interface {
	RetrieveSubmissionHistory(ctx context.Context, in *RetrieveSubmissionHistoryRequest, opts ...grpc.CallOption) (*RetrieveSubmissionHistoryResponse, error)
}

type courseModifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseModifierServiceClient(cc grpc.ClientConnInterface) CourseModifierServiceClient {
	return &courseModifierServiceClient{cc}
}

func (c *courseModifierServiceClient) RetrieveSubmissionHistory(ctx context.Context, in *RetrieveSubmissionHistoryRequest, opts ...grpc.CallOption) (*RetrieveSubmissionHistoryResponse, error) {
	out := new(RetrieveSubmissionHistoryResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.CourseModifierService/RetrieveSubmissionHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseModifierServiceServer is the server API for CourseModifierService service.
// All implementations should embed UnimplementedCourseModifierServiceServer
// for forward compatibility
type CourseModifierServiceServer interface {
	RetrieveSubmissionHistory(context.Context, *RetrieveSubmissionHistoryRequest) (*RetrieveSubmissionHistoryResponse, error)
}

// UnimplementedCourseModifierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCourseModifierServiceServer struct {
}

func (UnimplementedCourseModifierServiceServer) RetrieveSubmissionHistory(context.Context, *RetrieveSubmissionHistoryRequest) (*RetrieveSubmissionHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveSubmissionHistory not implemented")
}

// UnsafeCourseModifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseModifierServiceServer will
// result in compilation errors.
type UnsafeCourseModifierServiceServer interface {
	mustEmbedUnimplementedCourseModifierServiceServer()
}

func RegisterCourseModifierServiceServer(s grpc.ServiceRegistrar, srv CourseModifierServiceServer) {
	s.RegisterService(&_CourseModifierService_serviceDesc, srv)
}

func _CourseModifierService_RetrieveSubmissionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveSubmissionHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseModifierServiceServer).RetrieveSubmissionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.CourseModifierService/RetrieveSubmissionHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseModifierServiceServer).RetrieveSubmissionHistory(ctx, req.(*RetrieveSubmissionHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CourseModifierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bob.v1.CourseModifierService",
	HandlerType: (*CourseModifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveSubmissionHistory",
			Handler:    _CourseModifierService_RetrieveSubmissionHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bob/v1/courses.proto",
}
