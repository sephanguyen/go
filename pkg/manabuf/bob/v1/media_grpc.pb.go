// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MediaModifierServiceClient is the client API for MediaModifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediaModifierServiceClient interface {
	// UploadAsset uploads images, pdf ... to cloud storage
	UploadAsset(ctx context.Context, opts ...grpc.CallOption) (MediaModifierService_UploadAssetClient, error)
	// creates dynamic upload URL
	CreateBrightCoveUploadUrl(ctx context.Context, in *CreateBrightCoveUploadUrlRequest, opts ...grpc.CallOption) (*CreateBrightCoveUploadUrlResponse, error)
	// indicate that upload finished
	FinishUploadBrightCove(ctx context.Context, in *FinishUploadBrightCoveRequest, opts ...grpc.CallOption) (*FinishUploadBrightCoveResponse, error)
	// work with media object in DB
	UpsertMedia(ctx context.Context, in *UpsertMediaRequest, opts ...grpc.CallOption) (*UpsertMediaResponse, error)
	GenerateAudioFile(ctx context.Context, in *GenerateAudioFileRequest, opts ...grpc.CallOption) (*GenerateAudioFileResponse, error)
}

type mediaModifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaModifierServiceClient(cc grpc.ClientConnInterface) MediaModifierServiceClient {
	return &mediaModifierServiceClient{cc}
}

func (c *mediaModifierServiceClient) UploadAsset(ctx context.Context, opts ...grpc.CallOption) (MediaModifierService_UploadAssetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MediaModifierService_serviceDesc.Streams[0], "/bob.v1.MediaModifierService/UploadAsset", opts...)
	if err != nil {
		return nil, err
	}
	x := &mediaModifierServiceUploadAssetClient{stream}
	return x, nil
}

type MediaModifierService_UploadAssetClient interface {
	Send(*UploadAssetRequest) error
	CloseAndRecv() (*UploadAssetResponse, error)
	grpc.ClientStream
}

type mediaModifierServiceUploadAssetClient struct {
	grpc.ClientStream
}

func (x *mediaModifierServiceUploadAssetClient) Send(m *UploadAssetRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mediaModifierServiceUploadAssetClient) CloseAndRecv() (*UploadAssetResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadAssetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mediaModifierServiceClient) CreateBrightCoveUploadUrl(ctx context.Context, in *CreateBrightCoveUploadUrlRequest, opts ...grpc.CallOption) (*CreateBrightCoveUploadUrlResponse, error) {
	out := new(CreateBrightCoveUploadUrlResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.MediaModifierService/CreateBrightCoveUploadUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaModifierServiceClient) FinishUploadBrightCove(ctx context.Context, in *FinishUploadBrightCoveRequest, opts ...grpc.CallOption) (*FinishUploadBrightCoveResponse, error) {
	out := new(FinishUploadBrightCoveResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.MediaModifierService/FinishUploadBrightCove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaModifierServiceClient) UpsertMedia(ctx context.Context, in *UpsertMediaRequest, opts ...grpc.CallOption) (*UpsertMediaResponse, error) {
	out := new(UpsertMediaResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.MediaModifierService/UpsertMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaModifierServiceClient) GenerateAudioFile(ctx context.Context, in *GenerateAudioFileRequest, opts ...grpc.CallOption) (*GenerateAudioFileResponse, error) {
	out := new(GenerateAudioFileResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.MediaModifierService/GenerateAudioFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediaModifierServiceServer is the server API for MediaModifierService service.
// All implementations should embed UnimplementedMediaModifierServiceServer
// for forward compatibility
type MediaModifierServiceServer interface {
	// UploadAsset uploads images, pdf ... to cloud storage
	UploadAsset(MediaModifierService_UploadAssetServer) error
	// creates dynamic upload URL
	CreateBrightCoveUploadUrl(context.Context, *CreateBrightCoveUploadUrlRequest) (*CreateBrightCoveUploadUrlResponse, error)
	// indicate that upload finished
	FinishUploadBrightCove(context.Context, *FinishUploadBrightCoveRequest) (*FinishUploadBrightCoveResponse, error)
	// work with media object in DB
	UpsertMedia(context.Context, *UpsertMediaRequest) (*UpsertMediaResponse, error)
	GenerateAudioFile(context.Context, *GenerateAudioFileRequest) (*GenerateAudioFileResponse, error)
}

// UnimplementedMediaModifierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMediaModifierServiceServer struct {
}

func (UnimplementedMediaModifierServiceServer) UploadAsset(MediaModifierService_UploadAssetServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadAsset not implemented")
}
func (UnimplementedMediaModifierServiceServer) CreateBrightCoveUploadUrl(context.Context, *CreateBrightCoveUploadUrlRequest) (*CreateBrightCoveUploadUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBrightCoveUploadUrl not implemented")
}
func (UnimplementedMediaModifierServiceServer) FinishUploadBrightCove(context.Context, *FinishUploadBrightCoveRequest) (*FinishUploadBrightCoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishUploadBrightCove not implemented")
}
func (UnimplementedMediaModifierServiceServer) UpsertMedia(context.Context, *UpsertMediaRequest) (*UpsertMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertMedia not implemented")
}
func (UnimplementedMediaModifierServiceServer) GenerateAudioFile(context.Context, *GenerateAudioFileRequest) (*GenerateAudioFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAudioFile not implemented")
}

// UnsafeMediaModifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaModifierServiceServer will
// result in compilation errors.
type UnsafeMediaModifierServiceServer interface {
	mustEmbedUnimplementedMediaModifierServiceServer()
}

func RegisterMediaModifierServiceServer(s grpc.ServiceRegistrar, srv MediaModifierServiceServer) {
	s.RegisterService(&_MediaModifierService_serviceDesc, srv)
}

func _MediaModifierService_UploadAsset_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MediaModifierServiceServer).UploadAsset(&mediaModifierServiceUploadAssetServer{stream})
}

type MediaModifierService_UploadAssetServer interface {
	SendAndClose(*UploadAssetResponse) error
	Recv() (*UploadAssetRequest, error)
	grpc.ServerStream
}

type mediaModifierServiceUploadAssetServer struct {
	grpc.ServerStream
}

func (x *mediaModifierServiceUploadAssetServer) SendAndClose(m *UploadAssetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mediaModifierServiceUploadAssetServer) Recv() (*UploadAssetRequest, error) {
	m := new(UploadAssetRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MediaModifierService_CreateBrightCoveUploadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBrightCoveUploadUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaModifierServiceServer).CreateBrightCoveUploadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.MediaModifierService/CreateBrightCoveUploadUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaModifierServiceServer).CreateBrightCoveUploadUrl(ctx, req.(*CreateBrightCoveUploadUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaModifierService_FinishUploadBrightCove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishUploadBrightCoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaModifierServiceServer).FinishUploadBrightCove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.MediaModifierService/FinishUploadBrightCove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaModifierServiceServer).FinishUploadBrightCove(ctx, req.(*FinishUploadBrightCoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaModifierService_UpsertMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaModifierServiceServer).UpsertMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.MediaModifierService/UpsertMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaModifierServiceServer).UpsertMedia(ctx, req.(*UpsertMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaModifierService_GenerateAudioFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateAudioFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaModifierServiceServer).GenerateAudioFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.MediaModifierService/GenerateAudioFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaModifierServiceServer).GenerateAudioFile(ctx, req.(*GenerateAudioFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MediaModifierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bob.v1.MediaModifierService",
	HandlerType: (*MediaModifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBrightCoveUploadUrl",
			Handler:    _MediaModifierService_CreateBrightCoveUploadUrl_Handler,
		},
		{
			MethodName: "FinishUploadBrightCove",
			Handler:    _MediaModifierService_FinishUploadBrightCove_Handler,
		},
		{
			MethodName: "UpsertMedia",
			Handler:    _MediaModifierService_UpsertMedia_Handler,
		},
		{
			MethodName: "GenerateAudioFile",
			Handler:    _MediaModifierService_GenerateAudioFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadAsset",
			Handler:       _MediaModifierService_UploadAsset_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "bob/v1/media.proto",
}

// MediaReaderServiceClient is the client API for MediaReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediaReaderServiceClient interface {
	RetrieveMedia(ctx context.Context, in *RetrieveMediaRequest, opts ...grpc.CallOption) (*RetrieveMediaResponse, error)
}

type mediaReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaReaderServiceClient(cc grpc.ClientConnInterface) MediaReaderServiceClient {
	return &mediaReaderServiceClient{cc}
}

func (c *mediaReaderServiceClient) RetrieveMedia(ctx context.Context, in *RetrieveMediaRequest, opts ...grpc.CallOption) (*RetrieveMediaResponse, error) {
	out := new(RetrieveMediaResponse)
	err := c.cc.Invoke(ctx, "/bob.v1.MediaReaderService/RetrieveMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediaReaderServiceServer is the server API for MediaReaderService service.
// All implementations should embed UnimplementedMediaReaderServiceServer
// for forward compatibility
type MediaReaderServiceServer interface {
	RetrieveMedia(context.Context, *RetrieveMediaRequest) (*RetrieveMediaResponse, error)
}

// UnimplementedMediaReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMediaReaderServiceServer struct {
}

func (UnimplementedMediaReaderServiceServer) RetrieveMedia(context.Context, *RetrieveMediaRequest) (*RetrieveMediaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveMedia not implemented")
}

// UnsafeMediaReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaReaderServiceServer will
// result in compilation errors.
type UnsafeMediaReaderServiceServer interface {
	mustEmbedUnimplementedMediaReaderServiceServer()
}

func RegisterMediaReaderServiceServer(s grpc.ServiceRegistrar, srv MediaReaderServiceServer) {
	s.RegisterService(&_MediaReaderService_serviceDesc, srv)
}

func _MediaReaderService_RetrieveMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaReaderServiceServer).RetrieveMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bob.v1.MediaReaderService/RetrieveMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaReaderServiceServer).RetrieveMedia(ctx, req.(*RetrieveMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MediaReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bob.v1.MediaReaderService",
	HandlerType: (*MediaReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveMedia",
			Handler:    _MediaReaderService_RetrieveMedia_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bob/v1/media.proto",
}
