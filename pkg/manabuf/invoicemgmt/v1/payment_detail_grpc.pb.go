// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package invoice_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// EditPaymentDetailServiceClient is the client API for EditPaymentDetailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EditPaymentDetailServiceClient interface {
	UpsertStudentPaymentInfo(ctx context.Context, in *UpsertStudentPaymentInfoRequest, opts ...grpc.CallOption) (*UpsertStudentPaymentInfoResponse, error)
	UpdateStudentPaymentMethod(ctx context.Context, in *UpdateStudentPaymentMethodRequest, opts ...grpc.CallOption) (*UpdateStudentPaymentMethodResponse, error)
}

type editPaymentDetailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEditPaymentDetailServiceClient(cc grpc.ClientConnInterface) EditPaymentDetailServiceClient {
	return &editPaymentDetailServiceClient{cc}
}

func (c *editPaymentDetailServiceClient) UpsertStudentPaymentInfo(ctx context.Context, in *UpsertStudentPaymentInfoRequest, opts ...grpc.CallOption) (*UpsertStudentPaymentInfoResponse, error) {
	out := new(UpsertStudentPaymentInfoResponse)
	err := c.cc.Invoke(ctx, "/invoicemgmt.v1.EditPaymentDetailService/UpsertStudentPaymentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *editPaymentDetailServiceClient) UpdateStudentPaymentMethod(ctx context.Context, in *UpdateStudentPaymentMethodRequest, opts ...grpc.CallOption) (*UpdateStudentPaymentMethodResponse, error) {
	out := new(UpdateStudentPaymentMethodResponse)
	err := c.cc.Invoke(ctx, "/invoicemgmt.v1.EditPaymentDetailService/UpdateStudentPaymentMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EditPaymentDetailServiceServer is the server API for EditPaymentDetailService service.
// All implementations should embed UnimplementedEditPaymentDetailServiceServer
// for forward compatibility
type EditPaymentDetailServiceServer interface {
	UpsertStudentPaymentInfo(context.Context, *UpsertStudentPaymentInfoRequest) (*UpsertStudentPaymentInfoResponse, error)
	UpdateStudentPaymentMethod(context.Context, *UpdateStudentPaymentMethodRequest) (*UpdateStudentPaymentMethodResponse, error)
}

// UnimplementedEditPaymentDetailServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEditPaymentDetailServiceServer struct {
}

func (UnimplementedEditPaymentDetailServiceServer) UpsertStudentPaymentInfo(context.Context, *UpsertStudentPaymentInfoRequest) (*UpsertStudentPaymentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertStudentPaymentInfo not implemented")
}
func (UnimplementedEditPaymentDetailServiceServer) UpdateStudentPaymentMethod(context.Context, *UpdateStudentPaymentMethodRequest) (*UpdateStudentPaymentMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudentPaymentMethod not implemented")
}

// UnsafeEditPaymentDetailServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EditPaymentDetailServiceServer will
// result in compilation errors.
type UnsafeEditPaymentDetailServiceServer interface {
	mustEmbedUnimplementedEditPaymentDetailServiceServer()
}

func RegisterEditPaymentDetailServiceServer(s grpc.ServiceRegistrar, srv EditPaymentDetailServiceServer) {
	s.RegisterService(&_EditPaymentDetailService_serviceDesc, srv)
}

func _EditPaymentDetailService_UpsertStudentPaymentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertStudentPaymentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditPaymentDetailServiceServer).UpsertStudentPaymentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoicemgmt.v1.EditPaymentDetailService/UpsertStudentPaymentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditPaymentDetailServiceServer).UpsertStudentPaymentInfo(ctx, req.(*UpsertStudentPaymentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EditPaymentDetailService_UpdateStudentPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudentPaymentMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EditPaymentDetailServiceServer).UpdateStudentPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoicemgmt.v1.EditPaymentDetailService/UpdateStudentPaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EditPaymentDetailServiceServer).UpdateStudentPaymentMethod(ctx, req.(*UpdateStudentPaymentMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EditPaymentDetailService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "invoicemgmt.v1.EditPaymentDetailService",
	HandlerType: (*EditPaymentDetailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertStudentPaymentInfo",
			Handler:    _EditPaymentDetailService_UpsertStudentPaymentInfo_Handler,
		},
		{
			MethodName: "UpdateStudentPaymentMethod",
			Handler:    _EditPaymentDetailService_UpdateStudentPaymentMethod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "invoicemgmt/v1/payment_detail.proto",
}
