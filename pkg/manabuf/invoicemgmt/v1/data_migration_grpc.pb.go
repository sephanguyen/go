// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package invoice_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DataMigrationServiceClient is the client API for DataMigrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataMigrationServiceClient interface {
	ImportDataMigration(ctx context.Context, in *ImportDataMigrationRequest, opts ...grpc.CallOption) (*ImportDataMigrationResponse, error)
}

type dataMigrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataMigrationServiceClient(cc grpc.ClientConnInterface) DataMigrationServiceClient {
	return &dataMigrationServiceClient{cc}
}

func (c *dataMigrationServiceClient) ImportDataMigration(ctx context.Context, in *ImportDataMigrationRequest, opts ...grpc.CallOption) (*ImportDataMigrationResponse, error) {
	out := new(ImportDataMigrationResponse)
	err := c.cc.Invoke(ctx, "/invoicemgmt.v1.DataMigrationService/ImportDataMigration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataMigrationServiceServer is the server API for DataMigrationService service.
// All implementations should embed UnimplementedDataMigrationServiceServer
// for forward compatibility
type DataMigrationServiceServer interface {
	ImportDataMigration(context.Context, *ImportDataMigrationRequest) (*ImportDataMigrationResponse, error)
}

// UnimplementedDataMigrationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDataMigrationServiceServer struct {
}

func (UnimplementedDataMigrationServiceServer) ImportDataMigration(context.Context, *ImportDataMigrationRequest) (*ImportDataMigrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportDataMigration not implemented")
}

// UnsafeDataMigrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataMigrationServiceServer will
// result in compilation errors.
type UnsafeDataMigrationServiceServer interface {
	mustEmbedUnimplementedDataMigrationServiceServer()
}

func RegisterDataMigrationServiceServer(s grpc.ServiceRegistrar, srv DataMigrationServiceServer) {
	s.RegisterService(&_DataMigrationService_serviceDesc, srv)
}

func _DataMigrationService_ImportDataMigration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportDataMigrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataMigrationServiceServer).ImportDataMigration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoicemgmt.v1.DataMigrationService/ImportDataMigration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataMigrationServiceServer).ImportDataMigration(ctx, req.(*ImportDataMigrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataMigrationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "invoicemgmt.v1.DataMigrationService",
	HandlerType: (*DataMigrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportDataMigration",
			Handler:    _DataMigrationService_ImportDataMigration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "invoicemgmt/v1/data_migration.proto",
}
