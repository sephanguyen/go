// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package invoice_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// InvoiceServiceClient is the client API for InvoiceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvoiceServiceClient interface {
	IssueInvoice(ctx context.Context, in *IssueInvoiceRequest, opts ...grpc.CallOption) (*IssueInvoiceResponse, error)
	GenerateInvoices(ctx context.Context, in *GenerateInvoicesRequest, opts ...grpc.CallOption) (*GenerateInvoicesResponse, error)
	RetrieveInvoiceInfo(ctx context.Context, in *RetrieveInvoiceInfoRequest, opts ...grpc.CallOption) (*RetrieveInvoiceInfoResponse, error)
	RetrieveInvoiceRecords(ctx context.Context, in *RetrieveInvoiceRecordsRequest, opts ...grpc.CallOption) (*RetrieveInvoiceRecordsResponse, error)
	VoidInvoice(ctx context.Context, in *VoidInvoiceRequest, opts ...grpc.CallOption) (*VoidInvoiceResponse, error)
	ApproveInvoicePayment(ctx context.Context, in *ApproveInvoicePaymentRequest, opts ...grpc.CallOption) (*ApproveInvoicePaymentResponse, error)
	CancelInvoicePayment(ctx context.Context, in *CancelInvoicePaymentRequest, opts ...grpc.CallOption) (*CancelInvoicePaymentResponse, error)
	InvoiceScheduleChecker(ctx context.Context, in *InvoiceScheduleCheckerRequest, opts ...grpc.CallOption) (*InvoiceScheduleCheckerResponse, error)
	BulkIssueInvoice(ctx context.Context, in *BulkIssueInvoiceRequest, opts ...grpc.CallOption) (*BulkIssueInvoiceResponse, error)
	CreatePaymentRequest(ctx context.Context, in *CreatePaymentRequestRequest, opts ...grpc.CallOption) (*CreatePaymentRequestResponse, error)
	DownloadPaymentFile(ctx context.Context, in *DownloadPaymentFileRequest, opts ...grpc.CallOption) (*DownloadPaymentFileResponse, error)
	CreateBulkPaymentValidation(ctx context.Context, in *CreateBulkPaymentValidationRequest, opts ...grpc.CallOption) (*CreateBulkPaymentValidationResponse, error)
	DownloadBulkPaymentValidationsDetail(ctx context.Context, in *DownloadBulkPaymentValidationsDetailRequest, opts ...grpc.CallOption) (*DownloadBulkPaymentValidationsDetailResponse, error)
	CreateInvoiceFromOrder(ctx context.Context, in *CreateInvoiceFromOrderRequest, opts ...grpc.CallOption) (*CreateInvoiceFromOrderResponse, error)
	// Invoice Adjustment
	UpsertInvoiceAdjustments(ctx context.Context, in *UpsertInvoiceAdjustmentsRequest, opts ...grpc.CallOption) (*UpsertInvoiceAdjustmentsResponse, error)
	// version 2
	IssueInvoiceV2(ctx context.Context, in *IssueInvoiceRequestV2, opts ...grpc.CallOption) (*IssueInvoiceResponseV2, error)
	VoidInvoiceV2(ctx context.Context, in *VoidInvoiceRequestV2, opts ...grpc.CallOption) (*VoidInvoiceResponseV2, error)
	BulkIssueInvoiceV2(ctx context.Context, in *BulkIssueInvoiceRequestV2, opts ...grpc.CallOption) (*BulkIssueInvoiceResponseV2, error)
	RefundInvoice(ctx context.Context, in *RefundInvoiceRequest, opts ...grpc.CallOption) (*RefundInvoiceResponse, error)
	// Retrieve Invoice Data for Invoice List Page
	RetrieveInvoiceData(ctx context.Context, in *RetrieveInvoiceDataRequest, opts ...grpc.CallOption) (*RetrieveInvoiceDataResponse, error)
	RetrieveInvoiceStatusCount(ctx context.Context, in *RetrieveInvoiceStatusCountRequest, opts ...grpc.CallOption) (*RetrieveInvoiceStatusCountResponse, error)
}

type invoiceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInvoiceServiceClient(cc grpc.ClientConnInterface) InvoiceServiceClient {
	return &invoiceServiceClient{cc}
}

func (c *invoiceServiceClient) IssueInvoice(ctx context.Context, in *IssueInvoiceRequest, opts ...grpc.CallOption) (*IssueInvoiceResponse, error) {
	out := new(IssueInvoiceResponse)
	err := c.cc.Invoke(ctx, "/invoicemgmt.v1.InvoiceService/IssueInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) GenerateInvoices(ctx context.Context, in *GenerateInvoicesRequest, opts ...grpc.CallOption) (*GenerateInvoicesResponse, error) {
	out := new(GenerateInvoicesResponse)
	err := c.cc.Invoke(ctx, "/invoicemgmt.v1.InvoiceService/GenerateInvoices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) RetrieveInvoiceInfo(ctx context.Context, in *RetrieveInvoiceInfoRequest, opts ...grpc.CallOption) (*RetrieveInvoiceInfoResponse, error) {
	out := new(RetrieveInvoiceInfoResponse)
	err := c.cc.Invoke(ctx, "/invoicemgmt.v1.InvoiceService/RetrieveInvoiceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) RetrieveInvoiceRecords(ctx context.Context, in *RetrieveInvoiceRecordsRequest, opts ...grpc.CallOption) (*RetrieveInvoiceRecordsResponse, error) {
	out := new(RetrieveInvoiceRecordsResponse)
	err := c.cc.Invoke(ctx, "/invoicemgmt.v1.InvoiceService/RetrieveInvoiceRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) VoidInvoice(ctx context.Context, in *VoidInvoiceRequest, opts ...grpc.CallOption) (*VoidInvoiceResponse, error) {
	out := new(VoidInvoiceResponse)
	err := c.cc.Invoke(ctx, "/invoicemgmt.v1.InvoiceService/VoidInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) ApproveInvoicePayment(ctx context.Context, in *ApproveInvoicePaymentRequest, opts ...grpc.CallOption) (*ApproveInvoicePaymentResponse, error) {
	out := new(ApproveInvoicePaymentResponse)
	err := c.cc.Invoke(ctx, "/invoicemgmt.v1.InvoiceService/ApproveInvoicePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) CancelInvoicePayment(ctx context.Context, in *CancelInvoicePaymentRequest, opts ...grpc.CallOption) (*CancelInvoicePaymentResponse, error) {
	out := new(CancelInvoicePaymentResponse)
	err := c.cc.Invoke(ctx, "/invoicemgmt.v1.InvoiceService/CancelInvoicePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) InvoiceScheduleChecker(ctx context.Context, in *InvoiceScheduleCheckerRequest, opts ...grpc.CallOption) (*InvoiceScheduleCheckerResponse, error) {
	out := new(InvoiceScheduleCheckerResponse)
	err := c.cc.Invoke(ctx, "/invoicemgmt.v1.InvoiceService/InvoiceScheduleChecker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) BulkIssueInvoice(ctx context.Context, in *BulkIssueInvoiceRequest, opts ...grpc.CallOption) (*BulkIssueInvoiceResponse, error) {
	out := new(BulkIssueInvoiceResponse)
	err := c.cc.Invoke(ctx, "/invoicemgmt.v1.InvoiceService/BulkIssueInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) CreatePaymentRequest(ctx context.Context, in *CreatePaymentRequestRequest, opts ...grpc.CallOption) (*CreatePaymentRequestResponse, error) {
	out := new(CreatePaymentRequestResponse)
	err := c.cc.Invoke(ctx, "/invoicemgmt.v1.InvoiceService/CreatePaymentRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) DownloadPaymentFile(ctx context.Context, in *DownloadPaymentFileRequest, opts ...grpc.CallOption) (*DownloadPaymentFileResponse, error) {
	out := new(DownloadPaymentFileResponse)
	err := c.cc.Invoke(ctx, "/invoicemgmt.v1.InvoiceService/DownloadPaymentFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) CreateBulkPaymentValidation(ctx context.Context, in *CreateBulkPaymentValidationRequest, opts ...grpc.CallOption) (*CreateBulkPaymentValidationResponse, error) {
	out := new(CreateBulkPaymentValidationResponse)
	err := c.cc.Invoke(ctx, "/invoicemgmt.v1.InvoiceService/CreateBulkPaymentValidation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) DownloadBulkPaymentValidationsDetail(ctx context.Context, in *DownloadBulkPaymentValidationsDetailRequest, opts ...grpc.CallOption) (*DownloadBulkPaymentValidationsDetailResponse, error) {
	out := new(DownloadBulkPaymentValidationsDetailResponse)
	err := c.cc.Invoke(ctx, "/invoicemgmt.v1.InvoiceService/DownloadBulkPaymentValidationsDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) CreateInvoiceFromOrder(ctx context.Context, in *CreateInvoiceFromOrderRequest, opts ...grpc.CallOption) (*CreateInvoiceFromOrderResponse, error) {
	out := new(CreateInvoiceFromOrderResponse)
	err := c.cc.Invoke(ctx, "/invoicemgmt.v1.InvoiceService/CreateInvoiceFromOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) UpsertInvoiceAdjustments(ctx context.Context, in *UpsertInvoiceAdjustmentsRequest, opts ...grpc.CallOption) (*UpsertInvoiceAdjustmentsResponse, error) {
	out := new(UpsertInvoiceAdjustmentsResponse)
	err := c.cc.Invoke(ctx, "/invoicemgmt.v1.InvoiceService/UpsertInvoiceAdjustments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) IssueInvoiceV2(ctx context.Context, in *IssueInvoiceRequestV2, opts ...grpc.CallOption) (*IssueInvoiceResponseV2, error) {
	out := new(IssueInvoiceResponseV2)
	err := c.cc.Invoke(ctx, "/invoicemgmt.v1.InvoiceService/IssueInvoiceV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) VoidInvoiceV2(ctx context.Context, in *VoidInvoiceRequestV2, opts ...grpc.CallOption) (*VoidInvoiceResponseV2, error) {
	out := new(VoidInvoiceResponseV2)
	err := c.cc.Invoke(ctx, "/invoicemgmt.v1.InvoiceService/VoidInvoiceV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) BulkIssueInvoiceV2(ctx context.Context, in *BulkIssueInvoiceRequestV2, opts ...grpc.CallOption) (*BulkIssueInvoiceResponseV2, error) {
	out := new(BulkIssueInvoiceResponseV2)
	err := c.cc.Invoke(ctx, "/invoicemgmt.v1.InvoiceService/BulkIssueInvoiceV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) RefundInvoice(ctx context.Context, in *RefundInvoiceRequest, opts ...grpc.CallOption) (*RefundInvoiceResponse, error) {
	out := new(RefundInvoiceResponse)
	err := c.cc.Invoke(ctx, "/invoicemgmt.v1.InvoiceService/RefundInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) RetrieveInvoiceData(ctx context.Context, in *RetrieveInvoiceDataRequest, opts ...grpc.CallOption) (*RetrieveInvoiceDataResponse, error) {
	out := new(RetrieveInvoiceDataResponse)
	err := c.cc.Invoke(ctx, "/invoicemgmt.v1.InvoiceService/RetrieveInvoiceData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) RetrieveInvoiceStatusCount(ctx context.Context, in *RetrieveInvoiceStatusCountRequest, opts ...grpc.CallOption) (*RetrieveInvoiceStatusCountResponse, error) {
	out := new(RetrieveInvoiceStatusCountResponse)
	err := c.cc.Invoke(ctx, "/invoicemgmt.v1.InvoiceService/RetrieveInvoiceStatusCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvoiceServiceServer is the server API for InvoiceService service.
// All implementations should embed UnimplementedInvoiceServiceServer
// for forward compatibility
type InvoiceServiceServer interface {
	IssueInvoice(context.Context, *IssueInvoiceRequest) (*IssueInvoiceResponse, error)
	GenerateInvoices(context.Context, *GenerateInvoicesRequest) (*GenerateInvoicesResponse, error)
	RetrieveInvoiceInfo(context.Context, *RetrieveInvoiceInfoRequest) (*RetrieveInvoiceInfoResponse, error)
	RetrieveInvoiceRecords(context.Context, *RetrieveInvoiceRecordsRequest) (*RetrieveInvoiceRecordsResponse, error)
	VoidInvoice(context.Context, *VoidInvoiceRequest) (*VoidInvoiceResponse, error)
	ApproveInvoicePayment(context.Context, *ApproveInvoicePaymentRequest) (*ApproveInvoicePaymentResponse, error)
	CancelInvoicePayment(context.Context, *CancelInvoicePaymentRequest) (*CancelInvoicePaymentResponse, error)
	InvoiceScheduleChecker(context.Context, *InvoiceScheduleCheckerRequest) (*InvoiceScheduleCheckerResponse, error)
	BulkIssueInvoice(context.Context, *BulkIssueInvoiceRequest) (*BulkIssueInvoiceResponse, error)
	CreatePaymentRequest(context.Context, *CreatePaymentRequestRequest) (*CreatePaymentRequestResponse, error)
	DownloadPaymentFile(context.Context, *DownloadPaymentFileRequest) (*DownloadPaymentFileResponse, error)
	CreateBulkPaymentValidation(context.Context, *CreateBulkPaymentValidationRequest) (*CreateBulkPaymentValidationResponse, error)
	DownloadBulkPaymentValidationsDetail(context.Context, *DownloadBulkPaymentValidationsDetailRequest) (*DownloadBulkPaymentValidationsDetailResponse, error)
	CreateInvoiceFromOrder(context.Context, *CreateInvoiceFromOrderRequest) (*CreateInvoiceFromOrderResponse, error)
	// Invoice Adjustment
	UpsertInvoiceAdjustments(context.Context, *UpsertInvoiceAdjustmentsRequest) (*UpsertInvoiceAdjustmentsResponse, error)
	// version 2
	IssueInvoiceV2(context.Context, *IssueInvoiceRequestV2) (*IssueInvoiceResponseV2, error)
	VoidInvoiceV2(context.Context, *VoidInvoiceRequestV2) (*VoidInvoiceResponseV2, error)
	BulkIssueInvoiceV2(context.Context, *BulkIssueInvoiceRequestV2) (*BulkIssueInvoiceResponseV2, error)
	RefundInvoice(context.Context, *RefundInvoiceRequest) (*RefundInvoiceResponse, error)
	// Retrieve Invoice Data for Invoice List Page
	RetrieveInvoiceData(context.Context, *RetrieveInvoiceDataRequest) (*RetrieveInvoiceDataResponse, error)
	RetrieveInvoiceStatusCount(context.Context, *RetrieveInvoiceStatusCountRequest) (*RetrieveInvoiceStatusCountResponse, error)
}

// UnimplementedInvoiceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedInvoiceServiceServer struct {
}

func (UnimplementedInvoiceServiceServer) IssueInvoice(context.Context, *IssueInvoiceRequest) (*IssueInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueInvoice not implemented")
}
func (UnimplementedInvoiceServiceServer) GenerateInvoices(context.Context, *GenerateInvoicesRequest) (*GenerateInvoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateInvoices not implemented")
}
func (UnimplementedInvoiceServiceServer) RetrieveInvoiceInfo(context.Context, *RetrieveInvoiceInfoRequest) (*RetrieveInvoiceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveInvoiceInfo not implemented")
}
func (UnimplementedInvoiceServiceServer) RetrieveInvoiceRecords(context.Context, *RetrieveInvoiceRecordsRequest) (*RetrieveInvoiceRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveInvoiceRecords not implemented")
}
func (UnimplementedInvoiceServiceServer) VoidInvoice(context.Context, *VoidInvoiceRequest) (*VoidInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoidInvoice not implemented")
}
func (UnimplementedInvoiceServiceServer) ApproveInvoicePayment(context.Context, *ApproveInvoicePaymentRequest) (*ApproveInvoicePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveInvoicePayment not implemented")
}
func (UnimplementedInvoiceServiceServer) CancelInvoicePayment(context.Context, *CancelInvoicePaymentRequest) (*CancelInvoicePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelInvoicePayment not implemented")
}
func (UnimplementedInvoiceServiceServer) InvoiceScheduleChecker(context.Context, *InvoiceScheduleCheckerRequest) (*InvoiceScheduleCheckerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvoiceScheduleChecker not implemented")
}
func (UnimplementedInvoiceServiceServer) BulkIssueInvoice(context.Context, *BulkIssueInvoiceRequest) (*BulkIssueInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkIssueInvoice not implemented")
}
func (UnimplementedInvoiceServiceServer) CreatePaymentRequest(context.Context, *CreatePaymentRequestRequest) (*CreatePaymentRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePaymentRequest not implemented")
}
func (UnimplementedInvoiceServiceServer) DownloadPaymentFile(context.Context, *DownloadPaymentFileRequest) (*DownloadPaymentFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadPaymentFile not implemented")
}
func (UnimplementedInvoiceServiceServer) CreateBulkPaymentValidation(context.Context, *CreateBulkPaymentValidationRequest) (*CreateBulkPaymentValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBulkPaymentValidation not implemented")
}
func (UnimplementedInvoiceServiceServer) DownloadBulkPaymentValidationsDetail(context.Context, *DownloadBulkPaymentValidationsDetailRequest) (*DownloadBulkPaymentValidationsDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadBulkPaymentValidationsDetail not implemented")
}
func (UnimplementedInvoiceServiceServer) CreateInvoiceFromOrder(context.Context, *CreateInvoiceFromOrderRequest) (*CreateInvoiceFromOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvoiceFromOrder not implemented")
}
func (UnimplementedInvoiceServiceServer) UpsertInvoiceAdjustments(context.Context, *UpsertInvoiceAdjustmentsRequest) (*UpsertInvoiceAdjustmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertInvoiceAdjustments not implemented")
}
func (UnimplementedInvoiceServiceServer) IssueInvoiceV2(context.Context, *IssueInvoiceRequestV2) (*IssueInvoiceResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueInvoiceV2 not implemented")
}
func (UnimplementedInvoiceServiceServer) VoidInvoiceV2(context.Context, *VoidInvoiceRequestV2) (*VoidInvoiceResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoidInvoiceV2 not implemented")
}
func (UnimplementedInvoiceServiceServer) BulkIssueInvoiceV2(context.Context, *BulkIssueInvoiceRequestV2) (*BulkIssueInvoiceResponseV2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkIssueInvoiceV2 not implemented")
}
func (UnimplementedInvoiceServiceServer) RefundInvoice(context.Context, *RefundInvoiceRequest) (*RefundInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundInvoice not implemented")
}
func (UnimplementedInvoiceServiceServer) RetrieveInvoiceData(context.Context, *RetrieveInvoiceDataRequest) (*RetrieveInvoiceDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveInvoiceData not implemented")
}
func (UnimplementedInvoiceServiceServer) RetrieveInvoiceStatusCount(context.Context, *RetrieveInvoiceStatusCountRequest) (*RetrieveInvoiceStatusCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveInvoiceStatusCount not implemented")
}

// UnsafeInvoiceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvoiceServiceServer will
// result in compilation errors.
type UnsafeInvoiceServiceServer interface {
	mustEmbedUnimplementedInvoiceServiceServer()
}

func RegisterInvoiceServiceServer(s grpc.ServiceRegistrar, srv InvoiceServiceServer) {
	s.RegisterService(&_InvoiceService_serviceDesc, srv)
}

func _InvoiceService_IssueInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).IssueInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoicemgmt.v1.InvoiceService/IssueInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).IssueInvoice(ctx, req.(*IssueInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_GenerateInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateInvoicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).GenerateInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoicemgmt.v1.InvoiceService/GenerateInvoices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).GenerateInvoices(ctx, req.(*GenerateInvoicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_RetrieveInvoiceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveInvoiceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).RetrieveInvoiceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoicemgmt.v1.InvoiceService/RetrieveInvoiceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).RetrieveInvoiceInfo(ctx, req.(*RetrieveInvoiceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_RetrieveInvoiceRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveInvoiceRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).RetrieveInvoiceRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoicemgmt.v1.InvoiceService/RetrieveInvoiceRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).RetrieveInvoiceRecords(ctx, req.(*RetrieveInvoiceRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_VoidInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoidInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).VoidInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoicemgmt.v1.InvoiceService/VoidInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).VoidInvoice(ctx, req.(*VoidInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_ApproveInvoicePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveInvoicePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).ApproveInvoicePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoicemgmt.v1.InvoiceService/ApproveInvoicePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).ApproveInvoicePayment(ctx, req.(*ApproveInvoicePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_CancelInvoicePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelInvoicePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).CancelInvoicePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoicemgmt.v1.InvoiceService/CancelInvoicePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).CancelInvoicePayment(ctx, req.(*CancelInvoicePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_InvoiceScheduleChecker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvoiceScheduleCheckerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).InvoiceScheduleChecker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoicemgmt.v1.InvoiceService/InvoiceScheduleChecker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).InvoiceScheduleChecker(ctx, req.(*InvoiceScheduleCheckerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_BulkIssueInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkIssueInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).BulkIssueInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoicemgmt.v1.InvoiceService/BulkIssueInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).BulkIssueInvoice(ctx, req.(*BulkIssueInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_CreatePaymentRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).CreatePaymentRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoicemgmt.v1.InvoiceService/CreatePaymentRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).CreatePaymentRequest(ctx, req.(*CreatePaymentRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_DownloadPaymentFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadPaymentFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).DownloadPaymentFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoicemgmt.v1.InvoiceService/DownloadPaymentFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).DownloadPaymentFile(ctx, req.(*DownloadPaymentFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_CreateBulkPaymentValidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBulkPaymentValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).CreateBulkPaymentValidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoicemgmt.v1.InvoiceService/CreateBulkPaymentValidation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).CreateBulkPaymentValidation(ctx, req.(*CreateBulkPaymentValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_DownloadBulkPaymentValidationsDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadBulkPaymentValidationsDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).DownloadBulkPaymentValidationsDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoicemgmt.v1.InvoiceService/DownloadBulkPaymentValidationsDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).DownloadBulkPaymentValidationsDetail(ctx, req.(*DownloadBulkPaymentValidationsDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_CreateInvoiceFromOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvoiceFromOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).CreateInvoiceFromOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoicemgmt.v1.InvoiceService/CreateInvoiceFromOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).CreateInvoiceFromOrder(ctx, req.(*CreateInvoiceFromOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_UpsertInvoiceAdjustments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertInvoiceAdjustmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).UpsertInvoiceAdjustments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoicemgmt.v1.InvoiceService/UpsertInvoiceAdjustments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).UpsertInvoiceAdjustments(ctx, req.(*UpsertInvoiceAdjustmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_IssueInvoiceV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueInvoiceRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).IssueInvoiceV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoicemgmt.v1.InvoiceService/IssueInvoiceV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).IssueInvoiceV2(ctx, req.(*IssueInvoiceRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_VoidInvoiceV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoidInvoiceRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).VoidInvoiceV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoicemgmt.v1.InvoiceService/VoidInvoiceV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).VoidInvoiceV2(ctx, req.(*VoidInvoiceRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_BulkIssueInvoiceV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkIssueInvoiceRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).BulkIssueInvoiceV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoicemgmt.v1.InvoiceService/BulkIssueInvoiceV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).BulkIssueInvoiceV2(ctx, req.(*BulkIssueInvoiceRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_RefundInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).RefundInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoicemgmt.v1.InvoiceService/RefundInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).RefundInvoice(ctx, req.(*RefundInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_RetrieveInvoiceData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveInvoiceDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).RetrieveInvoiceData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoicemgmt.v1.InvoiceService/RetrieveInvoiceData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).RetrieveInvoiceData(ctx, req.(*RetrieveInvoiceDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_RetrieveInvoiceStatusCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveInvoiceStatusCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).RetrieveInvoiceStatusCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoicemgmt.v1.InvoiceService/RetrieveInvoiceStatusCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).RetrieveInvoiceStatusCount(ctx, req.(*RetrieveInvoiceStatusCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InvoiceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "invoicemgmt.v1.InvoiceService",
	HandlerType: (*InvoiceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IssueInvoice",
			Handler:    _InvoiceService_IssueInvoice_Handler,
		},
		{
			MethodName: "GenerateInvoices",
			Handler:    _InvoiceService_GenerateInvoices_Handler,
		},
		{
			MethodName: "RetrieveInvoiceInfo",
			Handler:    _InvoiceService_RetrieveInvoiceInfo_Handler,
		},
		{
			MethodName: "RetrieveInvoiceRecords",
			Handler:    _InvoiceService_RetrieveInvoiceRecords_Handler,
		},
		{
			MethodName: "VoidInvoice",
			Handler:    _InvoiceService_VoidInvoice_Handler,
		},
		{
			MethodName: "ApproveInvoicePayment",
			Handler:    _InvoiceService_ApproveInvoicePayment_Handler,
		},
		{
			MethodName: "CancelInvoicePayment",
			Handler:    _InvoiceService_CancelInvoicePayment_Handler,
		},
		{
			MethodName: "InvoiceScheduleChecker",
			Handler:    _InvoiceService_InvoiceScheduleChecker_Handler,
		},
		{
			MethodName: "BulkIssueInvoice",
			Handler:    _InvoiceService_BulkIssueInvoice_Handler,
		},
		{
			MethodName: "CreatePaymentRequest",
			Handler:    _InvoiceService_CreatePaymentRequest_Handler,
		},
		{
			MethodName: "DownloadPaymentFile",
			Handler:    _InvoiceService_DownloadPaymentFile_Handler,
		},
		{
			MethodName: "CreateBulkPaymentValidation",
			Handler:    _InvoiceService_CreateBulkPaymentValidation_Handler,
		},
		{
			MethodName: "DownloadBulkPaymentValidationsDetail",
			Handler:    _InvoiceService_DownloadBulkPaymentValidationsDetail_Handler,
		},
		{
			MethodName: "CreateInvoiceFromOrder",
			Handler:    _InvoiceService_CreateInvoiceFromOrder_Handler,
		},
		{
			MethodName: "UpsertInvoiceAdjustments",
			Handler:    _InvoiceService_UpsertInvoiceAdjustments_Handler,
		},
		{
			MethodName: "IssueInvoiceV2",
			Handler:    _InvoiceService_IssueInvoiceV2_Handler,
		},
		{
			MethodName: "VoidInvoiceV2",
			Handler:    _InvoiceService_VoidInvoiceV2_Handler,
		},
		{
			MethodName: "BulkIssueInvoiceV2",
			Handler:    _InvoiceService_BulkIssueInvoiceV2_Handler,
		},
		{
			MethodName: "RefundInvoice",
			Handler:    _InvoiceService_RefundInvoice_Handler,
		},
		{
			MethodName: "RetrieveInvoiceData",
			Handler:    _InvoiceService_RetrieveInvoiceData_Handler,
		},
		{
			MethodName: "RetrieveInvoiceStatusCount",
			Handler:    _InvoiceService_RetrieveInvoiceStatusCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "invoicemgmt/v1/invoice.proto",
}
