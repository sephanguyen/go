// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package invoice_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentServiceClient interface {
	CancelInvoicePaymentV2(ctx context.Context, in *CancelInvoicePaymentV2Request, opts ...grpc.CallOption) (*CancelInvoicePaymentV2Response, error)
	AddInvoicePayment(ctx context.Context, in *AddInvoicePaymentRequest, opts ...grpc.CallOption) (*AddInvoicePaymentResponse, error)
	ApproveInvoicePaymentV2(ctx context.Context, in *ApproveInvoicePaymentV2Request, opts ...grpc.CallOption) (*ApproveInvoicePaymentV2Response, error)
	RetrieveStudentPaymentMethod(ctx context.Context, in *RetrieveStudentPaymentMethodRequest, opts ...grpc.CallOption) (*RetrieveStudentPaymentMethodResponse, error)
	RetrieveBulkStudentPaymentMethod(ctx context.Context, in *RetrieveBulkStudentPaymentMethodRequest, opts ...grpc.CallOption) (*RetrieveBulkStudentPaymentMethodResponse, error)
	BulkAddPayment(ctx context.Context, in *BulkAddPaymentRequest, opts ...grpc.CallOption) (*BulkAddPaymentResponse, error)
	BulkCancelPayment(ctx context.Context, in *BulkCancelPaymentRequest, opts ...grpc.CallOption) (*BulkCancelPaymentResponse, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) CancelInvoicePaymentV2(ctx context.Context, in *CancelInvoicePaymentV2Request, opts ...grpc.CallOption) (*CancelInvoicePaymentV2Response, error) {
	out := new(CancelInvoicePaymentV2Response)
	err := c.cc.Invoke(ctx, "/invoicemgmt.v1.PaymentService/CancelInvoicePaymentV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) AddInvoicePayment(ctx context.Context, in *AddInvoicePaymentRequest, opts ...grpc.CallOption) (*AddInvoicePaymentResponse, error) {
	out := new(AddInvoicePaymentResponse)
	err := c.cc.Invoke(ctx, "/invoicemgmt.v1.PaymentService/AddInvoicePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) ApproveInvoicePaymentV2(ctx context.Context, in *ApproveInvoicePaymentV2Request, opts ...grpc.CallOption) (*ApproveInvoicePaymentV2Response, error) {
	out := new(ApproveInvoicePaymentV2Response)
	err := c.cc.Invoke(ctx, "/invoicemgmt.v1.PaymentService/ApproveInvoicePaymentV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) RetrieveStudentPaymentMethod(ctx context.Context, in *RetrieveStudentPaymentMethodRequest, opts ...grpc.CallOption) (*RetrieveStudentPaymentMethodResponse, error) {
	out := new(RetrieveStudentPaymentMethodResponse)
	err := c.cc.Invoke(ctx, "/invoicemgmt.v1.PaymentService/RetrieveStudentPaymentMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) RetrieveBulkStudentPaymentMethod(ctx context.Context, in *RetrieveBulkStudentPaymentMethodRequest, opts ...grpc.CallOption) (*RetrieveBulkStudentPaymentMethodResponse, error) {
	out := new(RetrieveBulkStudentPaymentMethodResponse)
	err := c.cc.Invoke(ctx, "/invoicemgmt.v1.PaymentService/RetrieveBulkStudentPaymentMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) BulkAddPayment(ctx context.Context, in *BulkAddPaymentRequest, opts ...grpc.CallOption) (*BulkAddPaymentResponse, error) {
	out := new(BulkAddPaymentResponse)
	err := c.cc.Invoke(ctx, "/invoicemgmt.v1.PaymentService/BulkAddPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) BulkCancelPayment(ctx context.Context, in *BulkCancelPaymentRequest, opts ...grpc.CallOption) (*BulkCancelPaymentResponse, error) {
	out := new(BulkCancelPaymentResponse)
	err := c.cc.Invoke(ctx, "/invoicemgmt.v1.PaymentService/BulkCancelPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
// All implementations should embed UnimplementedPaymentServiceServer
// for forward compatibility
type PaymentServiceServer interface {
	CancelInvoicePaymentV2(context.Context, *CancelInvoicePaymentV2Request) (*CancelInvoicePaymentV2Response, error)
	AddInvoicePayment(context.Context, *AddInvoicePaymentRequest) (*AddInvoicePaymentResponse, error)
	ApproveInvoicePaymentV2(context.Context, *ApproveInvoicePaymentV2Request) (*ApproveInvoicePaymentV2Response, error)
	RetrieveStudentPaymentMethod(context.Context, *RetrieveStudentPaymentMethodRequest) (*RetrieveStudentPaymentMethodResponse, error)
	RetrieveBulkStudentPaymentMethod(context.Context, *RetrieveBulkStudentPaymentMethodRequest) (*RetrieveBulkStudentPaymentMethodResponse, error)
	BulkAddPayment(context.Context, *BulkAddPaymentRequest) (*BulkAddPaymentResponse, error)
	BulkCancelPayment(context.Context, *BulkCancelPaymentRequest) (*BulkCancelPaymentResponse, error)
}

// UnimplementedPaymentServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPaymentServiceServer struct {
}

func (UnimplementedPaymentServiceServer) CancelInvoicePaymentV2(context.Context, *CancelInvoicePaymentV2Request) (*CancelInvoicePaymentV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelInvoicePaymentV2 not implemented")
}
func (UnimplementedPaymentServiceServer) AddInvoicePayment(context.Context, *AddInvoicePaymentRequest) (*AddInvoicePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInvoicePayment not implemented")
}
func (UnimplementedPaymentServiceServer) ApproveInvoicePaymentV2(context.Context, *ApproveInvoicePaymentV2Request) (*ApproveInvoicePaymentV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveInvoicePaymentV2 not implemented")
}
func (UnimplementedPaymentServiceServer) RetrieveStudentPaymentMethod(context.Context, *RetrieveStudentPaymentMethodRequest) (*RetrieveStudentPaymentMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveStudentPaymentMethod not implemented")
}
func (UnimplementedPaymentServiceServer) RetrieveBulkStudentPaymentMethod(context.Context, *RetrieveBulkStudentPaymentMethodRequest) (*RetrieveBulkStudentPaymentMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveBulkStudentPaymentMethod not implemented")
}
func (UnimplementedPaymentServiceServer) BulkAddPayment(context.Context, *BulkAddPaymentRequest) (*BulkAddPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkAddPayment not implemented")
}
func (UnimplementedPaymentServiceServer) BulkCancelPayment(context.Context, *BulkCancelPaymentRequest) (*BulkCancelPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BulkCancelPayment not implemented")
}

// UnsafePaymentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentServiceServer will
// result in compilation errors.
type UnsafePaymentServiceServer interface {
	mustEmbedUnimplementedPaymentServiceServer()
}

func RegisterPaymentServiceServer(s grpc.ServiceRegistrar, srv PaymentServiceServer) {
	s.RegisterService(&_PaymentService_serviceDesc, srv)
}

func _PaymentService_CancelInvoicePaymentV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelInvoicePaymentV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).CancelInvoicePaymentV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoicemgmt.v1.PaymentService/CancelInvoicePaymentV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).CancelInvoicePaymentV2(ctx, req.(*CancelInvoicePaymentV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_AddInvoicePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInvoicePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).AddInvoicePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoicemgmt.v1.PaymentService/AddInvoicePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).AddInvoicePayment(ctx, req.(*AddInvoicePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_ApproveInvoicePaymentV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveInvoicePaymentV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).ApproveInvoicePaymentV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoicemgmt.v1.PaymentService/ApproveInvoicePaymentV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).ApproveInvoicePaymentV2(ctx, req.(*ApproveInvoicePaymentV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_RetrieveStudentPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveStudentPaymentMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).RetrieveStudentPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoicemgmt.v1.PaymentService/RetrieveStudentPaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).RetrieveStudentPaymentMethod(ctx, req.(*RetrieveStudentPaymentMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_RetrieveBulkStudentPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveBulkStudentPaymentMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).RetrieveBulkStudentPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoicemgmt.v1.PaymentService/RetrieveBulkStudentPaymentMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).RetrieveBulkStudentPaymentMethod(ctx, req.(*RetrieveBulkStudentPaymentMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_BulkAddPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkAddPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).BulkAddPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoicemgmt.v1.PaymentService/BulkAddPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).BulkAddPayment(ctx, req.(*BulkAddPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_BulkCancelPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkCancelPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).BulkCancelPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/invoicemgmt.v1.PaymentService/BulkCancelPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).BulkCancelPayment(ctx, req.(*BulkCancelPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PaymentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "invoicemgmt.v1.PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CancelInvoicePaymentV2",
			Handler:    _PaymentService_CancelInvoicePaymentV2_Handler,
		},
		{
			MethodName: "AddInvoicePayment",
			Handler:    _PaymentService_AddInvoicePayment_Handler,
		},
		{
			MethodName: "ApproveInvoicePaymentV2",
			Handler:    _PaymentService_ApproveInvoicePaymentV2_Handler,
		},
		{
			MethodName: "RetrieveStudentPaymentMethod",
			Handler:    _PaymentService_RetrieveStudentPaymentMethod_Handler,
		},
		{
			MethodName: "RetrieveBulkStudentPaymentMethod",
			Handler:    _PaymentService_RetrieveBulkStudentPaymentMethod_Handler,
		},
		{
			MethodName: "BulkAddPayment",
			Handler:    _PaymentService_BulkAddPayment_Handler,
		},
		{
			MethodName: "BulkCancelPayment",
			Handler:    _PaymentService_BulkCancelPayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "invoicemgmt/v1/payment.proto",
}
