// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package zpb

import (
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CentralizeLogsServiceClient is the client API for CentralizeLogsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CentralizeLogsServiceClient interface {
}

type centralizeLogsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCentralizeLogsServiceClient(cc grpc.ClientConnInterface) CentralizeLogsServiceClient {
	return &centralizeLogsServiceClient{cc}
}

// CentralizeLogsServiceServer is the server API for CentralizeLogsService service.
// All implementations should embed UnimplementedCentralizeLogsServiceServer
// for forward compatibility
type CentralizeLogsServiceServer interface {
}

// UnimplementedCentralizeLogsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCentralizeLogsServiceServer struct {
}

// UnsafeCentralizeLogsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CentralizeLogsServiceServer will
// result in compilation errors.
type UnsafeCentralizeLogsServiceServer interface {
	mustEmbedUnimplementedCentralizeLogsServiceServer()
}

func RegisterCentralizeLogsServiceServer(s grpc.ServiceRegistrar, srv CentralizeLogsServiceServer) {
	s.RegisterService(&_CentralizeLogsService_serviceDesc, srv)
}

var _CentralizeLogsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zeus.v1.CentralizeLogsService",
	HandlerType: (*CentralizeLogsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "zeus/v1/zeus.proto",
}
