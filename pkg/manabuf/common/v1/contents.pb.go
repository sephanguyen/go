// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: common/v1/contents.proto

package cpb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type QuizConfig int32

const (
	QuizConfig_QUIZ_CONFIG_OPTIONS_PLAIN_LIST QuizConfig = 0
)

// Enum value maps for QuizConfig.
var (
	QuizConfig_name = map[int32]string{
		0: "QUIZ_CONFIG_OPTIONS_PLAIN_LIST",
	}
	QuizConfig_value = map[string]int32{
		"QUIZ_CONFIG_OPTIONS_PLAIN_LIST": 0,
	}
)

func (x QuizConfig) Enum() *QuizConfig {
	p := new(QuizConfig)
	*p = x
	return p
}

func (x QuizConfig) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuizConfig) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_contents_proto_enumTypes[0].Descriptor()
}

func (QuizConfig) Type() protoreflect.EnumType {
	return &file_common_v1_contents_proto_enumTypes[0]
}

func (x QuizConfig) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuizConfig.Descriptor instead.
func (QuizConfig) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_contents_proto_rawDescGZIP(), []int{0}
}

// this enum for setting configs for any quiz
type QuizItemAttributeConfig int32

const (
	// language configs for flashcard
	QuizItemAttributeConfig_FLASHCARD_LANGUAGE_CONFIG_NONE QuizItemAttributeConfig = 0
	QuizItemAttributeConfig_FLASHCARD_LANGUAGE_CONFIG_ENG  QuizItemAttributeConfig = 1
	QuizItemAttributeConfig_FLASHCARD_LANGUAGE_CONFIG_JP   QuizItemAttributeConfig = 2
	// new configs stay here...
	QuizItemAttributeConfig_LANGUAGE_CONFIG_JP  QuizItemAttributeConfig = 3
	QuizItemAttributeConfig_LANGUAGE_CONFIG_ENG QuizItemAttributeConfig = 4
	QuizItemAttributeConfig_MATH_CONFIG         QuizItemAttributeConfig = 5
)

// Enum value maps for QuizItemAttributeConfig.
var (
	QuizItemAttributeConfig_name = map[int32]string{
		0: "FLASHCARD_LANGUAGE_CONFIG_NONE",
		1: "FLASHCARD_LANGUAGE_CONFIG_ENG",
		2: "FLASHCARD_LANGUAGE_CONFIG_JP",
		3: "LANGUAGE_CONFIG_JP",
		4: "LANGUAGE_CONFIG_ENG",
		5: "MATH_CONFIG",
	}
	QuizItemAttributeConfig_value = map[string]int32{
		"FLASHCARD_LANGUAGE_CONFIG_NONE": 0,
		"FLASHCARD_LANGUAGE_CONFIG_ENG":  1,
		"FLASHCARD_LANGUAGE_CONFIG_JP":   2,
		"LANGUAGE_CONFIG_JP":             3,
		"LANGUAGE_CONFIG_ENG":            4,
		"MATH_CONFIG":                    5,
	}
)

func (x QuizItemAttributeConfig) Enum() *QuizItemAttributeConfig {
	p := new(QuizItemAttributeConfig)
	*p = x
	return p
}

func (x QuizItemAttributeConfig) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuizItemAttributeConfig) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_contents_proto_enumTypes[1].Descriptor()
}

func (QuizItemAttributeConfig) Type() protoreflect.EnumType {
	return &file_common_v1_contents_proto_enumTypes[1]
}

func (x QuizItemAttributeConfig) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuizItemAttributeConfig.Descriptor instead.
func (QuizItemAttributeConfig) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_contents_proto_rawDescGZIP(), []int{1}
}

type QuizType int32

const (
	// Multiple Choice Quiz
	QuizType_QUIZ_TYPE_MCQ QuizType = 0
	// Fill In The Blank Quiz
	QuizType_QUIZ_TYPE_FIB QuizType = 1
	// Pair Of Word Quiz
	QuizType_QUIZ_TYPE_POW QuizType = 2
	// Term And Definition Quiz
	QuizType_QUIZ_TYPE_TAD QuizType = 3
	// Manual Input Quiz
	QuizType_QUIZ_TYPE_MIQ QuizType = 4
	// Multi Answer Quiz
	QuizType_QUIZ_TYPE_MAQ QuizType = 5
	// Ordering Quiz
	QuizType_QUIZ_TYPE_ORD QuizType = 6
	// Essay Quiz
	QuizType_QUIZ_TYPE_ESQ QuizType = 7
)

// Enum value maps for QuizType.
var (
	QuizType_name = map[int32]string{
		0: "QUIZ_TYPE_MCQ",
		1: "QUIZ_TYPE_FIB",
		2: "QUIZ_TYPE_POW",
		3: "QUIZ_TYPE_TAD",
		4: "QUIZ_TYPE_MIQ",
		5: "QUIZ_TYPE_MAQ",
		6: "QUIZ_TYPE_ORD",
		7: "QUIZ_TYPE_ESQ",
	}
	QuizType_value = map[string]int32{
		"QUIZ_TYPE_MCQ": 0,
		"QUIZ_TYPE_FIB": 1,
		"QUIZ_TYPE_POW": 2,
		"QUIZ_TYPE_TAD": 3,
		"QUIZ_TYPE_MIQ": 4,
		"QUIZ_TYPE_MAQ": 5,
		"QUIZ_TYPE_ORD": 6,
		"QUIZ_TYPE_ESQ": 7,
	}
)

func (x QuizType) Enum() *QuizType {
	p := new(QuizType)
	*p = x
	return p
}

func (x QuizType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuizType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_contents_proto_enumTypes[2].Descriptor()
}

func (QuizType) Type() protoreflect.EnumType {
	return &file_common_v1_contents_proto_enumTypes[2]
}

func (x QuizType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuizType.Descriptor instead.
func (QuizType) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_contents_proto_rawDescGZIP(), []int{2}
}

type QuizStatus int32

const (
	QuizStatus_QUIZ_STATUS_NEW      QuizStatus = 0
	QuizStatus_QUIZ_STATUS_APPROVED QuizStatus = 1
	QuizStatus_QUIZ_STATUS_DELETED  QuizStatus = 2
)

// Enum value maps for QuizStatus.
var (
	QuizStatus_name = map[int32]string{
		0: "QUIZ_STATUS_NEW",
		1: "QUIZ_STATUS_APPROVED",
		2: "QUIZ_STATUS_DELETED",
	}
	QuizStatus_value = map[string]int32{
		"QUIZ_STATUS_NEW":      0,
		"QUIZ_STATUS_APPROVED": 1,
		"QUIZ_STATUS_DELETED":  2,
	}
)

func (x QuizStatus) Enum() *QuizStatus {
	p := new(QuizStatus)
	*p = x
	return p
}

func (x QuizStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuizStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_contents_proto_enumTypes[3].Descriptor()
}

func (QuizStatus) Type() protoreflect.EnumType {
	return &file_common_v1_contents_proto_enumTypes[3]
}

func (x QuizStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuizStatus.Descriptor instead.
func (QuizStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_contents_proto_rawDescGZIP(), []int{3}
}

type QuizOptionConfig int32

const (
	QuizOptionConfig_QUIZ_OPTION_CONFIG_CASE_SENSITIVE QuizOptionConfig = 0
	QuizOptionConfig_QUIZ_OPTION_CONFIG_PARTIAL_CREDIT QuizOptionConfig = 1
	QuizOptionConfig_QUIZ_OPTION_CONFIG_PLAN_LIST      QuizOptionConfig = 2
)

// Enum value maps for QuizOptionConfig.
var (
	QuizOptionConfig_name = map[int32]string{
		0: "QUIZ_OPTION_CONFIG_CASE_SENSITIVE",
		1: "QUIZ_OPTION_CONFIG_PARTIAL_CREDIT",
		2: "QUIZ_OPTION_CONFIG_PLAN_LIST",
	}
	QuizOptionConfig_value = map[string]int32{
		"QUIZ_OPTION_CONFIG_CASE_SENSITIVE": 0,
		"QUIZ_OPTION_CONFIG_PARTIAL_CREDIT": 1,
		"QUIZ_OPTION_CONFIG_PLAN_LIST":      2,
	}
)

func (x QuizOptionConfig) Enum() *QuizOptionConfig {
	p := new(QuizOptionConfig)
	*p = x
	return p
}

func (x QuizOptionConfig) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuizOptionConfig) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_contents_proto_enumTypes[4].Descriptor()
}

func (QuizOptionConfig) Type() protoreflect.EnumType {
	return &file_common_v1_contents_proto_enumTypes[4]
}

func (x QuizOptionConfig) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuizOptionConfig.Descriptor instead.
func (QuizOptionConfig) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_contents_proto_rawDescGZIP(), []int{4}
}

type CourseStatus int32

const (
	CourseStatus_COURSE_STATUS_NONE      CourseStatus = 0
	CourseStatus_COURSE_STATUS_ACTIVE    CourseStatus = 1
	CourseStatus_COURSE_STATUS_COMPLETED CourseStatus = 2
	CourseStatus_COURSE_STATUS_ON_GOING  CourseStatus = 3
	CourseStatus_COURSE_STATUS_INACTIVE  CourseStatus = 4
)

// Enum value maps for CourseStatus.
var (
	CourseStatus_name = map[int32]string{
		0: "COURSE_STATUS_NONE",
		1: "COURSE_STATUS_ACTIVE",
		2: "COURSE_STATUS_COMPLETED",
		3: "COURSE_STATUS_ON_GOING",
		4: "COURSE_STATUS_INACTIVE",
	}
	CourseStatus_value = map[string]int32{
		"COURSE_STATUS_NONE":      0,
		"COURSE_STATUS_ACTIVE":    1,
		"COURSE_STATUS_COMPLETED": 2,
		"COURSE_STATUS_ON_GOING":  3,
		"COURSE_STATUS_INACTIVE":  4,
	}
)

func (x CourseStatus) Enum() *CourseStatus {
	p := new(CourseStatus)
	*p = x
	return p
}

func (x CourseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CourseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_contents_proto_enumTypes[5].Descriptor()
}

func (CourseStatus) Type() protoreflect.EnumType {
	return &file_common_v1_contents_proto_enumTypes[5]
}

func (x CourseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CourseStatus.Descriptor instead.
func (CourseStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_contents_proto_rawDescGZIP(), []int{5}
}

type LessonStatus int32

const (
	LessonStatus_LESSON_STATUS_NONE        LessonStatus = 0
	LessonStatus_LESSON_STATUS_COMPLETED   LessonStatus = 1
	LessonStatus_LESSON_STATUS_IN_PROGRESS LessonStatus = 2
	LessonStatus_LESSON_STATUS_NOT_STARTED LessonStatus = 3
	LessonStatus_LESSON_STATUS_DRAFT       LessonStatus = 4
)

// Enum value maps for LessonStatus.
var (
	LessonStatus_name = map[int32]string{
		0: "LESSON_STATUS_NONE",
		1: "LESSON_STATUS_COMPLETED",
		2: "LESSON_STATUS_IN_PROGRESS",
		3: "LESSON_STATUS_NOT_STARTED",
		4: "LESSON_STATUS_DRAFT",
	}
	LessonStatus_value = map[string]int32{
		"LESSON_STATUS_NONE":        0,
		"LESSON_STATUS_COMPLETED":   1,
		"LESSON_STATUS_IN_PROGRESS": 2,
		"LESSON_STATUS_NOT_STARTED": 3,
		"LESSON_STATUS_DRAFT":       4,
	}
)

func (x LessonStatus) Enum() *LessonStatus {
	p := new(LessonStatus)
	*p = x
	return p
}

func (x LessonStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LessonStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_contents_proto_enumTypes[6].Descriptor()
}

func (LessonStatus) Type() protoreflect.EnumType {
	return &file_common_v1_contents_proto_enumTypes[6]
}

func (x LessonStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LessonStatus.Descriptor instead.
func (LessonStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_contents_proto_rawDescGZIP(), []int{6}
}

type LiveLessonView int32

const (
	LiveLessonView_LIVE_LESSON_VIEW_NONE    LiveLessonView = 0
	LiveLessonView_LIVE_LESSON_VIEW_GALLERY LiveLessonView = 1
	LiveLessonView_LIVE_LESSON_VIEW_SPEAKER LiveLessonView = 2
)

// Enum value maps for LiveLessonView.
var (
	LiveLessonView_name = map[int32]string{
		0: "LIVE_LESSON_VIEW_NONE",
		1: "LIVE_LESSON_VIEW_GALLERY",
		2: "LIVE_LESSON_VIEW_SPEAKER",
	}
	LiveLessonView_value = map[string]int32{
		"LIVE_LESSON_VIEW_NONE":    0,
		"LIVE_LESSON_VIEW_GALLERY": 1,
		"LIVE_LESSON_VIEW_SPEAKER": 2,
	}
)

func (x LiveLessonView) Enum() *LiveLessonView {
	p := new(LiveLessonView)
	*p = x
	return p
}

func (x LiveLessonView) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LiveLessonView) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_contents_proto_enumTypes[7].Descriptor()
}

func (LiveLessonView) Type() protoreflect.EnumType {
	return &file_common_v1_contents_proto_enumTypes[7]
}

func (x LiveLessonView) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LiveLessonView.Descriptor instead.
func (LiveLessonView) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_contents_proto_rawDescGZIP(), []int{7}
}

type TopicType int32

const (
	TopicType_TOPIC_TYPE_NONE        TopicType = 0
	TopicType_TOPIC_TYPE_LEARNING    TopicType = 1
	TopicType_TOPIC_TYPE_PRACTICAL   TopicType = 2
	TopicType_TOPIC_TYPE_EXAM        TopicType = 3
	TopicType_TOPIC_TYPE_ASSIGNMENT  TopicType = 4
	TopicType_TOPIC_TYPE_LIVE_LESSON TopicType = 5
)

// Enum value maps for TopicType.
var (
	TopicType_name = map[int32]string{
		0: "TOPIC_TYPE_NONE",
		1: "TOPIC_TYPE_LEARNING",
		2: "TOPIC_TYPE_PRACTICAL",
		3: "TOPIC_TYPE_EXAM",
		4: "TOPIC_TYPE_ASSIGNMENT",
		5: "TOPIC_TYPE_LIVE_LESSON",
	}
	TopicType_value = map[string]int32{
		"TOPIC_TYPE_NONE":        0,
		"TOPIC_TYPE_LEARNING":    1,
		"TOPIC_TYPE_PRACTICAL":   2,
		"TOPIC_TYPE_EXAM":        3,
		"TOPIC_TYPE_ASSIGNMENT":  4,
		"TOPIC_TYPE_LIVE_LESSON": 5,
	}
)

func (x TopicType) Enum() *TopicType {
	p := new(TopicType)
	*p = x
	return p
}

func (x TopicType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TopicType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_contents_proto_enumTypes[8].Descriptor()
}

func (TopicType) Type() protoreflect.EnumType {
	return &file_common_v1_contents_proto_enumTypes[8]
}

func (x TopicType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TopicType.Descriptor instead.
func (TopicType) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_contents_proto_rawDescGZIP(), []int{8}
}

type TopicStatus int32

const (
	TopicStatus_TOPIC_STATUS_NONE      TopicStatus = 0
	TopicStatus_TOPIC_STATUS_DRAFT     TopicStatus = 1
	TopicStatus_TOPIC_STATUS_PUBLISHED TopicStatus = 2
)

// Enum value maps for TopicStatus.
var (
	TopicStatus_name = map[int32]string{
		0: "TOPIC_STATUS_NONE",
		1: "TOPIC_STATUS_DRAFT",
		2: "TOPIC_STATUS_PUBLISHED",
	}
	TopicStatus_value = map[string]int32{
		"TOPIC_STATUS_NONE":      0,
		"TOPIC_STATUS_DRAFT":     1,
		"TOPIC_STATUS_PUBLISHED": 2,
	}
)

func (x TopicStatus) Enum() *TopicStatus {
	p := new(TopicStatus)
	*p = x
	return p
}

func (x TopicStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TopicStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_contents_proto_enumTypes[9].Descriptor()
}

func (TopicStatus) Type() protoreflect.EnumType {
	return &file_common_v1_contents_proto_enumTypes[9]
}

func (x TopicStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TopicStatus.Descriptor instead.
func (TopicStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_contents_proto_rawDescGZIP(), []int{9}
}

type BookType int32

const (
	BookType_BOOK_TYPE_NONE    BookType = 0
	BookType_BOOK_TYPE_GENERAL BookType = 1
	BookType_BOOK_TYPE_ADHOC   BookType = 2
)

// Enum value maps for BookType.
var (
	BookType_name = map[int32]string{
		0: "BOOK_TYPE_NONE",
		1: "BOOK_TYPE_GENERAL",
		2: "BOOK_TYPE_ADHOC",
	}
	BookType_value = map[string]int32{
		"BOOK_TYPE_NONE":    0,
		"BOOK_TYPE_GENERAL": 1,
		"BOOK_TYPE_ADHOC":   2,
	}
)

func (x BookType) Enum() *BookType {
	p := new(BookType)
	*p = x
	return p
}

func (x BookType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BookType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_contents_proto_enumTypes[10].Descriptor()
}

func (BookType) Type() protoreflect.EnumType {
	return &file_common_v1_contents_proto_enumTypes[10]
}

func (x BookType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BookType.Descriptor instead.
func (BookType) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_contents_proto_rawDescGZIP(), []int{10}
}

type EssayLimitType int32

const (
	EssayLimitType_ESSAY_LIMIT_TYPE_WORD EssayLimitType = 0
	EssayLimitType_ESSAY_LIMIT_TYPE_CHAR EssayLimitType = 1
)

// Enum value maps for EssayLimitType.
var (
	EssayLimitType_name = map[int32]string{
		0: "ESSAY_LIMIT_TYPE_WORD",
		1: "ESSAY_LIMIT_TYPE_CHAR",
	}
	EssayLimitType_value = map[string]int32{
		"ESSAY_LIMIT_TYPE_WORD": 0,
		"ESSAY_LIMIT_TYPE_CHAR": 1,
	}
)

func (x EssayLimitType) Enum() *EssayLimitType {
	p := new(EssayLimitType)
	*p = x
	return p
}

func (x EssayLimitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EssayLimitType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_v1_contents_proto_enumTypes[11].Descriptor()
}

func (EssayLimitType) Type() protoreflect.EnumType {
	return &file_common_v1_contents_proto_enumTypes[11]
}

func (x EssayLimitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EssayLimitType.Descriptor instead.
func (EssayLimitType) EnumDescriptor() ([]byte, []int) {
	return file_common_v1_contents_proto_rawDescGZIP(), []int{11}
}

type ContentBasicInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Country      Country                `protobuf:"varint,3,opt,name=country,proto3,enum=common.v1.Country" json:"country,omitempty"`
	Subject      Subject                `protobuf:"varint,4,opt,name=subject,proto3,enum=common.v1.Subject" json:"subject,omitempty"`
	Grade        int32                  `protobuf:"varint,5,opt,name=grade,proto3" json:"grade,omitempty"`
	SchoolId     int32                  `protobuf:"varint,6,opt,name=school_id,json=schoolId,proto3" json:"school_id,omitempty"`
	DisplayOrder int32                  `protobuf:"varint,7,opt,name=display_order,json=displayOrder,proto3" json:"display_order,omitempty"`
	MasterId     string                 `protobuf:"bytes,8,opt,name=master_id,json=masterId,proto3" json:"master_id,omitempty"`
	IconUrl      string                 `protobuf:"bytes,9,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	UpdatedAt    *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	DeletedAt    *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (x *ContentBasicInfo) Reset() {
	*x = ContentBasicInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_contents_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentBasicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentBasicInfo) ProtoMessage() {}

func (x *ContentBasicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_contents_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentBasicInfo.ProtoReflect.Descriptor instead.
func (*ContentBasicInfo) Descriptor() ([]byte, []int) {
	return file_common_v1_contents_proto_rawDescGZIP(), []int{0}
}

func (x *ContentBasicInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ContentBasicInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContentBasicInfo) GetCountry() Country {
	if x != nil {
		return x.Country
	}
	return Country_COUNTRY_NONE
}

func (x *ContentBasicInfo) GetSubject() Subject {
	if x != nil {
		return x.Subject
	}
	return Subject_SUBJECT_NONE
}

func (x *ContentBasicInfo) GetGrade() int32 {
	if x != nil {
		return x.Grade
	}
	return 0
}

func (x *ContentBasicInfo) GetSchoolId() int32 {
	if x != nil {
		return x.SchoolId
	}
	return 0
}

func (x *ContentBasicInfo) GetDisplayOrder() int32 {
	if x != nil {
		return x.DisplayOrder
	}
	return 0
}

func (x *ContentBasicInfo) GetMasterId() string {
	if x != nil {
		return x.MasterId
	}
	return ""
}

func (x *ContentBasicInfo) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *ContentBasicInfo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ContentBasicInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ContentBasicInfo) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

type Course struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info         *ContentBasicInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	CourseStatus CourseStatus      `protobuf:"varint,2,opt,name=course_status,json=courseStatus,proto3,enum=common.v1.CourseStatus" json:"course_status,omitempty"`
	LessonIds    []string          `protobuf:"bytes,3,rep,name=lesson_ids,json=lessonIds,proto3" json:"lesson_ids,omitempty"`
	BookIds      []string          `protobuf:"bytes,4,rep,name=book_ids,json=bookIds,proto3" json:"book_ids,omitempty"`
	ClassIds     []string          `protobuf:"bytes,5,rep,name=class_ids,json=classIds,proto3" json:"class_ids,omitempty"`
	Teachers     []*BasicProfile   `protobuf:"bytes,6,rep,name=teachers,proto3" json:"teachers,omitempty"`
}

func (x *Course) Reset() {
	*x = Course{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_contents_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Course) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Course) ProtoMessage() {}

func (x *Course) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_contents_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Course.ProtoReflect.Descriptor instead.
func (*Course) Descriptor() ([]byte, []int) {
	return file_common_v1_contents_proto_rawDescGZIP(), []int{1}
}

func (x *Course) GetInfo() *ContentBasicInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Course) GetCourseStatus() CourseStatus {
	if x != nil {
		return x.CourseStatus
	}
	return CourseStatus_COURSE_STATUS_NONE
}

func (x *Course) GetLessonIds() []string {
	if x != nil {
		return x.LessonIds
	}
	return nil
}

func (x *Course) GetBookIds() []string {
	if x != nil {
		return x.BookIds
	}
	return nil
}

func (x *Course) GetClassIds() []string {
	if x != nil {
		return x.ClassIds
	}
	return nil
}

func (x *Course) GetTeachers() []*BasicProfile {
	if x != nil {
		return x.Teachers
	}
	return nil
}

type Lesson struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info          *ContentBasicInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	CourseId      string            `protobuf:"bytes,2,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	Status        LessonStatus      `protobuf:"varint,3,opt,name=status,proto3,enum=common.v1.LessonStatus" json:"status,omitempty"`
	Topic         *Topic            `protobuf:"bytes,4,opt,name=topic,proto3" json:"topic,omitempty"`
	TotalLearner  int32             `protobuf:"varint,5,opt,name=total_learner,json=totalLearner,proto3" json:"total_learner,omitempty"`
	Teachers      []*BasicProfile   `protobuf:"bytes,6,rep,name=teachers,proto3" json:"teachers,omitempty"`
	UsersClassIds []string          `protobuf:"bytes,7,rep,name=users_class_ids,json=usersClassIds,proto3" json:"users_class_ids,omitempty"`
}

func (x *Lesson) Reset() {
	*x = Lesson{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_contents_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lesson) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lesson) ProtoMessage() {}

func (x *Lesson) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_contents_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lesson.ProtoReflect.Descriptor instead.
func (*Lesson) Descriptor() ([]byte, []int) {
	return file_common_v1_contents_proto_rawDescGZIP(), []int{2}
}

func (x *Lesson) GetInfo() *ContentBasicInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Lesson) GetCourseId() string {
	if x != nil {
		return x.CourseId
	}
	return ""
}

func (x *Lesson) GetStatus() LessonStatus {
	if x != nil {
		return x.Status
	}
	return LessonStatus_LESSON_STATUS_NONE
}

func (x *Lesson) GetTopic() *Topic {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *Lesson) GetTotalLearner() int32 {
	if x != nil {
		return x.TotalLearner
	}
	return 0
}

func (x *Lesson) GetTeachers() []*BasicProfile {
	if x != nil {
		return x.Teachers
	}
	return nil
}

func (x *Lesson) GetUsersClassIds() []string {
	if x != nil {
		return x.UsersClassIds
	}
	return nil
}

type Book struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *ContentBasicInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *Book) Reset() {
	*x = Book{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_contents_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Book) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Book) ProtoMessage() {}

func (x *Book) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_contents_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Book.ProtoReflect.Descriptor instead.
func (*Book) Descriptor() ([]byte, []int) {
	return file_common_v1_contents_proto_rawDescGZIP(), []int{3}
}

func (x *Book) GetInfo() *ContentBasicInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type Chapter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info     *ContentBasicInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	BookId   string            `protobuf:"bytes,2,opt,name=book_id,json=bookId,proto3" json:"book_id,omitempty"`
	TopicIds []string          `protobuf:"bytes,3,rep,name=topic_ids,json=topicIds,proto3" json:"topic_ids,omitempty"`
}

func (x *Chapter) Reset() {
	*x = Chapter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_contents_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chapter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chapter) ProtoMessage() {}

func (x *Chapter) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_contents_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chapter.ProtoReflect.Descriptor instead.
func (*Chapter) Descriptor() ([]byte, []int) {
	return file_common_v1_contents_proto_rawDescGZIP(), []int{4}
}

func (x *Chapter) GetInfo() *ContentBasicInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Chapter) GetBookId() string {
	if x != nil {
		return x.BookId
	}
	return ""
}

func (x *Chapter) GetTopicIds() []string {
	if x != nil {
		return x.TopicIds
	}
	return nil
}

type Topic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info        *ContentBasicInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	ChapterId   string            `protobuf:"bytes,2,opt,name=chapter_id,json=chapterId,proto3" json:"chapter_id,omitempty"`
	Type        TopicType         `protobuf:"varint,3,opt,name=type,proto3,enum=common.v1.TopicType" json:"type,omitempty"`
	Status      TopicStatus       `protobuf:"varint,4,opt,name=status,proto3,enum=common.v1.TopicStatus" json:"status,omitempty"`
	Instruction string            `protobuf:"bytes,5,opt,name=instruction,proto3" json:"instruction,omitempty"`
	LoIds       []string          `protobuf:"bytes,6,rep,name=lo_ids,json=loIds,proto3" json:"lo_ids,omitempty"`
	Attachments []*Attachment     `protobuf:"bytes,7,rep,name=attachments,proto3" json:"attachments,omitempty"`
}

func (x *Topic) Reset() {
	*x = Topic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_contents_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Topic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topic) ProtoMessage() {}

func (x *Topic) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_contents_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topic.ProtoReflect.Descriptor instead.
func (*Topic) Descriptor() ([]byte, []int) {
	return file_common_v1_contents_proto_rawDescGZIP(), []int{5}
}

func (x *Topic) GetInfo() *ContentBasicInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Topic) GetChapterId() string {
	if x != nil {
		return x.ChapterId
	}
	return ""
}

func (x *Topic) GetType() TopicType {
	if x != nil {
		return x.Type
	}
	return TopicType_TOPIC_TYPE_NONE
}

func (x *Topic) GetStatus() TopicStatus {
	if x != nil {
		return x.Status
	}
	return TopicStatus_TOPIC_STATUS_NONE
}

func (x *Topic) GetInstruction() string {
	if x != nil {
		return x.Instruction
	}
	return ""
}

func (x *Topic) GetLoIds() []string {
	if x != nil {
		return x.LoIds
	}
	return nil
}

func (x *Topic) GetAttachments() []*Attachment {
	if x != nil {
		return x.Attachments
	}
	return nil
}

type LearningObjective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info           *ContentBasicInfo          `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	TopicId        string                     `protobuf:"bytes,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	Video          string                     `protobuf:"bytes,3,opt,name=video,proto3" json:"video,omitempty"`
	StudyGuide     string                     `protobuf:"bytes,4,opt,name=study_guide,json=studyGuide,proto3" json:"study_guide,omitempty"`
	QuizIds        []string                   `protobuf:"bytes,5,rep,name=quiz_ids,json=quizIds,proto3" json:"quiz_ids,omitempty"`
	Prerequisites  []string                   `protobuf:"bytes,6,rep,name=prerequisites,proto3" json:"prerequisites,omitempty"`
	Type           LearningObjectiveType      `protobuf:"varint,7,opt,name=type,proto3,enum=common.v1.LearningObjectiveType" json:"type,omitempty"`
	Instruction    string                     `protobuf:"bytes,8,opt,name=instruction,proto3" json:"instruction,omitempty"`
	GradeToPass    *wrapperspb.Int32Value     `protobuf:"bytes,9,opt,name=grade_to_pass,json=gradeToPass,proto3" json:"grade_to_pass,omitempty"`
	ManualGrading  bool                       `protobuf:"varint,10,opt,name=manual_grading,json=manualGrading,proto3" json:"manual_grading,omitempty"`
	TimeLimit      *wrapperspb.Int32Value     `protobuf:"bytes,11,opt,name=time_limit,json=timeLimit,proto3" json:"time_limit,omitempty"`
	MaximumAttempt *wrapperspb.Int32Value     `protobuf:"bytes,12,opt,name=maximum_attempt,json=maximumAttempt,proto3" json:"maximum_attempt,omitempty"`
	ApproveGrading bool                       `protobuf:"varint,13,opt,name=approve_grading,json=approveGrading,proto3" json:"approve_grading,omitempty"`
	GradeCapping   bool                       `protobuf:"varint,14,opt,name=grade_capping,json=gradeCapping,proto3" json:"grade_capping,omitempty"`
	ReviewOption   ExamLOReviewOption         `protobuf:"varint,15,opt,name=review_option,json=reviewOption,proto3,enum=common.v1.ExamLOReviewOption" json:"review_option,omitempty"`
	VendorType     LearningMaterialVendorType `protobuf:"varint,16,opt,name=vendor_type,json=vendorType,proto3,enum=common.v1.LearningMaterialVendorType" json:"vendor_type,omitempty"`
}

func (x *LearningObjective) Reset() {
	*x = LearningObjective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_contents_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LearningObjective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LearningObjective) ProtoMessage() {}

func (x *LearningObjective) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_contents_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LearningObjective.ProtoReflect.Descriptor instead.
func (*LearningObjective) Descriptor() ([]byte, []int) {
	return file_common_v1_contents_proto_rawDescGZIP(), []int{6}
}

func (x *LearningObjective) GetInfo() *ContentBasicInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *LearningObjective) GetTopicId() string {
	if x != nil {
		return x.TopicId
	}
	return ""
}

func (x *LearningObjective) GetVideo() string {
	if x != nil {
		return x.Video
	}
	return ""
}

func (x *LearningObjective) GetStudyGuide() string {
	if x != nil {
		return x.StudyGuide
	}
	return ""
}

func (x *LearningObjective) GetQuizIds() []string {
	if x != nil {
		return x.QuizIds
	}
	return nil
}

func (x *LearningObjective) GetPrerequisites() []string {
	if x != nil {
		return x.Prerequisites
	}
	return nil
}

func (x *LearningObjective) GetType() LearningObjectiveType {
	if x != nil {
		return x.Type
	}
	return LearningObjectiveType_LEARNING_OBJECTIVE_TYPE_NONE
}

func (x *LearningObjective) GetInstruction() string {
	if x != nil {
		return x.Instruction
	}
	return ""
}

func (x *LearningObjective) GetGradeToPass() *wrapperspb.Int32Value {
	if x != nil {
		return x.GradeToPass
	}
	return nil
}

func (x *LearningObjective) GetManualGrading() bool {
	if x != nil {
		return x.ManualGrading
	}
	return false
}

func (x *LearningObjective) GetTimeLimit() *wrapperspb.Int32Value {
	if x != nil {
		return x.TimeLimit
	}
	return nil
}

func (x *LearningObjective) GetMaximumAttempt() *wrapperspb.Int32Value {
	if x != nil {
		return x.MaximumAttempt
	}
	return nil
}

func (x *LearningObjective) GetApproveGrading() bool {
	if x != nil {
		return x.ApproveGrading
	}
	return false
}

func (x *LearningObjective) GetGradeCapping() bool {
	if x != nil {
		return x.GradeCapping
	}
	return false
}

func (x *LearningObjective) GetReviewOption() ExamLOReviewOption {
	if x != nil {
		return x.ReviewOption
	}
	return ExamLOReviewOption_EXAM_LO_REVIEW_OPTION_IMMEDIATELY
}

func (x *LearningObjective) GetVendorType() LearningMaterialVendorType {
	if x != nil {
		return x.VendorType
	}
	return LearningMaterialVendorType_LM_VENDOR_TYPE_NONE
}

type TopicLearningObjective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicId      string                 `protobuf:"bytes,1,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	LoId         string                 `protobuf:"bytes,2,opt,name=lo_id,json=loId,proto3" json:"lo_id,omitempty"`
	DisplayOrder int32                  `protobuf:"varint,3,opt,name=display_order,json=displayOrder,proto3" json:"display_order,omitempty"`
	UpdatedAt    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *TopicLearningObjective) Reset() {
	*x = TopicLearningObjective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_contents_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicLearningObjective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicLearningObjective) ProtoMessage() {}

func (x *TopicLearningObjective) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_contents_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicLearningObjective.ProtoReflect.Descriptor instead.
func (*TopicLearningObjective) Descriptor() ([]byte, []int) {
	return file_common_v1_contents_proto_rawDescGZIP(), []int{7}
}

func (x *TopicLearningObjective) GetTopicId() string {
	if x != nil {
		return x.TopicId
	}
	return ""
}

func (x *TopicLearningObjective) GetLoId() string {
	if x != nil {
		return x.LoId
	}
	return ""
}

func (x *TopicLearningObjective) GetDisplayOrder() int32 {
	if x != nil {
		return x.DisplayOrder
	}
	return 0
}

func (x *TopicLearningObjective) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *TopicLearningObjective) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type QuizItemAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImgLink   string                    `protobuf:"bytes,1,opt,name=img_link,json=imgLink,proto3" json:"img_link,omitempty"`
	AudioLink string                    `protobuf:"bytes,2,opt,name=audio_link,json=audioLink,proto3" json:"audio_link,omitempty"`
	Configs   []QuizItemAttributeConfig `protobuf:"varint,3,rep,packed,name=configs,proto3,enum=common.v1.QuizItemAttributeConfig" json:"configs,omitempty"`
}

func (x *QuizItemAttribute) Reset() {
	*x = QuizItemAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_contents_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuizItemAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuizItemAttribute) ProtoMessage() {}

func (x *QuizItemAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_contents_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuizItemAttribute.ProtoReflect.Descriptor instead.
func (*QuizItemAttribute) Descriptor() ([]byte, []int) {
	return file_common_v1_contents_proto_rawDescGZIP(), []int{8}
}

func (x *QuizItemAttribute) GetImgLink() string {
	if x != nil {
		return x.ImgLink
	}
	return ""
}

func (x *QuizItemAttribute) GetAudioLink() string {
	if x != nil {
		return x.AudioLink
	}
	return ""
}

func (x *QuizItemAttribute) GetConfigs() []QuizItemAttributeConfig {
	if x != nil {
		return x.Configs
	}
	return nil
}

type QuizCore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info            *ContentBasicInfo       `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	ExternalId      string                  `protobuf:"bytes,2,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	Kind            QuizType                `protobuf:"varint,3,opt,name=kind,proto3,enum=common.v1.QuizType" json:"kind,omitempty"`
	Question        *RichText               `protobuf:"bytes,4,opt,name=question,proto3" json:"question,omitempty"`
	Explanation     *RichText               `protobuf:"bytes,5,opt,name=explanation,proto3" json:"explanation,omitempty"`
	DifficultyLevel int32                   `protobuf:"varint,6,opt,name=difficulty_level,json=difficultyLevel,proto3" json:"difficulty_level,omitempty"`
	TaggedLos       []string                `protobuf:"bytes,7,rep,name=tagged_los,json=taggedLos,proto3" json:"tagged_los,omitempty"`
	Options         []*QuizOption           `protobuf:"bytes,8,rep,name=options,proto3" json:"options,omitempty"`
	Config          []QuizConfig            `protobuf:"varint,9,rep,packed,name=config,proto3,enum=common.v1.QuizConfig" json:"config,omitempty"`
	Attribute       *QuizItemAttribute      `protobuf:"bytes,10,opt,name=attribute,proto3" json:"attribute,omitempty"`
	Point           *wrapperspb.Int32Value  `protobuf:"bytes,11,opt,name=point,proto3" json:"point,omitempty"`
	QuestionGroupId *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=question_group_id,json=questionGroupId,proto3" json:"question_group_id,omitempty"`
	QuestionTagIds  []string                `protobuf:"bytes,13,rep,name=question_tag_ids,json=questionTagIds,proto3" json:"question_tag_ids,omitempty"`
	// Types that are assignable to AnswerConfig:
	//
	//	*QuizCore_Essay
	AnswerConfig isQuizCore_AnswerConfig `protobuf_oneof:"answer_config"`
	TagNames     []string                `protobuf:"bytes,15,rep,name=tag_names,json=tagNames,proto3" json:"tag_names,omitempty"`
	LabelType    QuizLabelType           `protobuf:"varint,16,opt,name=label_type,json=labelType,proto3,enum=common.v1.QuizLabelType" json:"label_type,omitempty"`
}

func (x *QuizCore) Reset() {
	*x = QuizCore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_contents_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuizCore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuizCore) ProtoMessage() {}

func (x *QuizCore) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_contents_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuizCore.ProtoReflect.Descriptor instead.
func (*QuizCore) Descriptor() ([]byte, []int) {
	return file_common_v1_contents_proto_rawDescGZIP(), []int{9}
}

func (x *QuizCore) GetInfo() *ContentBasicInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *QuizCore) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *QuizCore) GetKind() QuizType {
	if x != nil {
		return x.Kind
	}
	return QuizType_QUIZ_TYPE_MCQ
}

func (x *QuizCore) GetQuestion() *RichText {
	if x != nil {
		return x.Question
	}
	return nil
}

func (x *QuizCore) GetExplanation() *RichText {
	if x != nil {
		return x.Explanation
	}
	return nil
}

func (x *QuizCore) GetDifficultyLevel() int32 {
	if x != nil {
		return x.DifficultyLevel
	}
	return 0
}

func (x *QuizCore) GetTaggedLos() []string {
	if x != nil {
		return x.TaggedLos
	}
	return nil
}

func (x *QuizCore) GetOptions() []*QuizOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *QuizCore) GetConfig() []QuizConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *QuizCore) GetAttribute() *QuizItemAttribute {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *QuizCore) GetPoint() *wrapperspb.Int32Value {
	if x != nil {
		return x.Point
	}
	return nil
}

func (x *QuizCore) GetQuestionGroupId() *wrapperspb.StringValue {
	if x != nil {
		return x.QuestionGroupId
	}
	return nil
}

func (x *QuizCore) GetQuestionTagIds() []string {
	if x != nil {
		return x.QuestionTagIds
	}
	return nil
}

func (m *QuizCore) GetAnswerConfig() isQuizCore_AnswerConfig {
	if m != nil {
		return m.AnswerConfig
	}
	return nil
}

func (x *QuizCore) GetEssay() *EssayConfig {
	if x, ok := x.GetAnswerConfig().(*QuizCore_Essay); ok {
		return x.Essay
	}
	return nil
}

func (x *QuizCore) GetTagNames() []string {
	if x != nil {
		return x.TagNames
	}
	return nil
}

func (x *QuizCore) GetLabelType() QuizLabelType {
	if x != nil {
		return x.LabelType
	}
	return QuizLabelType_QUIZ_LABEL_TYPE_NONE
}

type isQuizCore_AnswerConfig interface {
	isQuizCore_AnswerConfig()
}

type QuizCore_Essay struct {
	Essay *EssayConfig `protobuf:"bytes,14,opt,name=essay,proto3,oneof"`
}

func (*QuizCore_Essay) isQuizCore_AnswerConfig() {}

type Quiz struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Core           *QuizCore  `protobuf:"bytes,1,opt,name=core,proto3" json:"core,omitempty"`
	LoId           string     `protobuf:"bytes,2,opt,name=lo_id,json=loId,proto3" json:"lo_id,omitempty"`
	QuestionUrl    string     `protobuf:"bytes,3,opt,name=question_url,json=questionUrl,proto3" json:"question_url,omitempty"`
	AnswersUrl     []string   `protobuf:"bytes,4,rep,name=answers_url,json=answersUrl,proto3" json:"answers_url,omitempty"`
	ExplanationUrl string     `protobuf:"bytes,5,opt,name=explanation_url,json=explanationUrl,proto3" json:"explanation_url,omitempty"`
	Status         QuizStatus `protobuf:"varint,6,opt,name=status,proto3,enum=common.v1.QuizStatus" json:"status,omitempty"`
}

func (x *Quiz) Reset() {
	*x = Quiz{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_contents_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quiz) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quiz) ProtoMessage() {}

func (x *Quiz) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_contents_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quiz.ProtoReflect.Descriptor instead.
func (*Quiz) Descriptor() ([]byte, []int) {
	return file_common_v1_contents_proto_rawDescGZIP(), []int{10}
}

func (x *Quiz) GetCore() *QuizCore {
	if x != nil {
		return x.Core
	}
	return nil
}

func (x *Quiz) GetLoId() string {
	if x != nil {
		return x.LoId
	}
	return ""
}

func (x *Quiz) GetQuestionUrl() string {
	if x != nil {
		return x.QuestionUrl
	}
	return ""
}

func (x *Quiz) GetAnswersUrl() []string {
	if x != nil {
		return x.AnswersUrl
	}
	return nil
}

func (x *Quiz) GetExplanationUrl() string {
	if x != nil {
		return x.ExplanationUrl
	}
	return ""
}

func (x *Quiz) GetStatus() QuizStatus {
	if x != nil {
		return x.Status
	}
	return QuizStatus_QUIZ_STATUS_NEW
}

type RichText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Raw      string `protobuf:"bytes,1,opt,name=raw,proto3" json:"raw,omitempty"`
	Rendered string `protobuf:"bytes,2,opt,name=rendered,proto3" json:"rendered,omitempty"`
}

func (x *RichText) Reset() {
	*x = RichText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_contents_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RichText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RichText) ProtoMessage() {}

func (x *RichText) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_contents_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RichText.ProtoReflect.Descriptor instead.
func (*RichText) Descriptor() ([]byte, []int) {
	return file_common_v1_contents_proto_rawDescGZIP(), []int{11}
}

func (x *RichText) GetRaw() string {
	if x != nil {
		return x.Raw
	}
	return ""
}

func (x *RichText) GetRendered() string {
	if x != nil {
		return x.Rendered
	}
	return ""
}

type QuizOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content     *RichText          `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Correctness bool               `protobuf:"varint,2,opt,name=correctness,proto3" json:"correctness,omitempty"`
	Configs     []QuizOptionConfig `protobuf:"varint,3,rep,packed,name=configs,proto3,enum=common.v1.QuizOptionConfig" json:"configs,omitempty"`
	Label       string             `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
	Key         string             `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	Attribute   *QuizItemAttribute `protobuf:"bytes,6,opt,name=attribute,proto3" json:"attribute,omitempty"`
}

func (x *QuizOption) Reset() {
	*x = QuizOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_contents_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuizOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuizOption) ProtoMessage() {}

func (x *QuizOption) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_contents_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuizOption.ProtoReflect.Descriptor instead.
func (*QuizOption) Descriptor() ([]byte, []int) {
	return file_common_v1_contents_proto_rawDescGZIP(), []int{12}
}

func (x *QuizOption) GetContent() *RichText {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *QuizOption) GetCorrectness() bool {
	if x != nil {
		return x.Correctness
	}
	return false
}

func (x *QuizOption) GetConfigs() []QuizOptionConfig {
	if x != nil {
		return x.Configs
	}
	return nil
}

func (x *QuizOption) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *QuizOption) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *QuizOption) GetAttribute() *QuizItemAttribute {
	if x != nil {
		return x.Attribute
	}
	return nil
}

type OrderingResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubmittedKeys []string `protobuf:"bytes,1,rep,name=submitted_keys,json=submittedKeys,proto3" json:"submitted_keys,omitempty"`
	CorrectKeys   []string `protobuf:"bytes,2,rep,name=correct_keys,json=correctKeys,proto3" json:"correct_keys,omitempty"`
}

func (x *OrderingResult) Reset() {
	*x = OrderingResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_contents_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderingResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderingResult) ProtoMessage() {}

func (x *OrderingResult) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_contents_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderingResult.ProtoReflect.Descriptor instead.
func (*OrderingResult) Descriptor() ([]byte, []int) {
	return file_common_v1_contents_proto_rawDescGZIP(), []int{13}
}

func (x *OrderingResult) GetSubmittedKeys() []string {
	if x != nil {
		return x.SubmittedKeys
	}
	return nil
}

func (x *OrderingResult) GetCorrectKeys() []string {
	if x != nil {
		return x.CorrectKeys
	}
	return nil
}

type AnswerLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuizId        string                 `protobuf:"bytes,1,opt,name=quiz_id,json=quizId,proto3" json:"quiz_id,omitempty"`
	QuizType      QuizType               `protobuf:"varint,2,opt,name=quiz_type,json=quizType,proto3,enum=common.v1.QuizType" json:"quiz_type,omitempty"`
	SelectedIndex []uint32               `protobuf:"varint,3,rep,packed,name=selected_index,json=selectedIndex,proto3" json:"selected_index,omitempty"`
	CorrectIndex  []uint32               `protobuf:"varint,4,rep,packed,name=correct_index,json=correctIndex,proto3" json:"correct_index,omitempty"`
	FilledText    []string               `protobuf:"bytes,5,rep,name=filled_text,json=filledText,proto3" json:"filled_text,omitempty"`
	CorrectText   []string               `protobuf:"bytes,6,rep,name=correct_text,json=correctText,proto3" json:"correct_text,omitempty"`
	Correctness   []bool                 `protobuf:"varint,7,rep,packed,name=correctness,proto3" json:"correctness,omitempty"`
	IsAccepted    bool                   `protobuf:"varint,8,opt,name=is_accepted,json=isAccepted,proto3" json:"is_accepted,omitempty"`
	Core          *QuizCore              `protobuf:"bytes,9,opt,name=core,proto3" json:"core,omitempty"`
	SubmittedAt   *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=submitted_at,json=submittedAt,proto3" json:"submitted_at,omitempty"`
	// Types that are assignable to Result:
	//
	//	*AnswerLog_OrderingResult
	Result isAnswerLog_Result `protobuf_oneof:"result"`
}

func (x *AnswerLog) Reset() {
	*x = AnswerLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_contents_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnswerLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerLog) ProtoMessage() {}

func (x *AnswerLog) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_contents_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerLog.ProtoReflect.Descriptor instead.
func (*AnswerLog) Descriptor() ([]byte, []int) {
	return file_common_v1_contents_proto_rawDescGZIP(), []int{14}
}

func (x *AnswerLog) GetQuizId() string {
	if x != nil {
		return x.QuizId
	}
	return ""
}

func (x *AnswerLog) GetQuizType() QuizType {
	if x != nil {
		return x.QuizType
	}
	return QuizType_QUIZ_TYPE_MCQ
}

func (x *AnswerLog) GetSelectedIndex() []uint32 {
	if x != nil {
		return x.SelectedIndex
	}
	return nil
}

func (x *AnswerLog) GetCorrectIndex() []uint32 {
	if x != nil {
		return x.CorrectIndex
	}
	return nil
}

func (x *AnswerLog) GetFilledText() []string {
	if x != nil {
		return x.FilledText
	}
	return nil
}

func (x *AnswerLog) GetCorrectText() []string {
	if x != nil {
		return x.CorrectText
	}
	return nil
}

func (x *AnswerLog) GetCorrectness() []bool {
	if x != nil {
		return x.Correctness
	}
	return nil
}

func (x *AnswerLog) GetIsAccepted() bool {
	if x != nil {
		return x.IsAccepted
	}
	return false
}

func (x *AnswerLog) GetCore() *QuizCore {
	if x != nil {
		return x.Core
	}
	return nil
}

func (x *AnswerLog) GetSubmittedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SubmittedAt
	}
	return nil
}

func (m *AnswerLog) GetResult() isAnswerLog_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *AnswerLog) GetOrderingResult() *OrderingResult {
	if x, ok := x.GetResult().(*AnswerLog_OrderingResult); ok {
		return x.OrderingResult
	}
	return nil
}

type isAnswerLog_Result interface {
	isAnswerLog_Result()
}

type AnswerLog_OrderingResult struct {
	OrderingResult *OrderingResult `protobuf:"bytes,11,opt,name=ordering_result,json=orderingResult,proto3,oneof"`
}

func (*AnswerLog_OrderingResult) isAnswerLog_Result() {}

type QuizTestInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SetId             string                 `protobuf:"bytes,1,opt,name=set_id,json=setId,proto3" json:"set_id,omitempty"`
	TotalCorrectness  int32                  `protobuf:"varint,2,opt,name=total_correctness,json=totalCorrectness,proto3" json:"total_correctness,omitempty"`
	TotalQuiz         int32                  `protobuf:"varint,3,opt,name=total_quiz,json=totalQuiz,proto3" json:"total_quiz,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	CompletedAt       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`
	TotalLearningTime int64                  `protobuf:"varint,6,opt,name=totalLearningTime,proto3" json:"totalLearningTime,omitempty"`
	IsRetry           bool                   `protobuf:"varint,7,opt,name=is_retry,json=isRetry,proto3" json:"is_retry,omitempty"`
}

func (x *QuizTestInfo) Reset() {
	*x = QuizTestInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_contents_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuizTestInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuizTestInfo) ProtoMessage() {}

func (x *QuizTestInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_contents_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuizTestInfo.ProtoReflect.Descriptor instead.
func (*QuizTestInfo) Descriptor() ([]byte, []int) {
	return file_common_v1_contents_proto_rawDescGZIP(), []int{15}
}

func (x *QuizTestInfo) GetSetId() string {
	if x != nil {
		return x.SetId
	}
	return ""
}

func (x *QuizTestInfo) GetTotalCorrectness() int32 {
	if x != nil {
		return x.TotalCorrectness
	}
	return 0
}

func (x *QuizTestInfo) GetTotalQuiz() int32 {
	if x != nil {
		return x.TotalQuiz
	}
	return 0
}

func (x *QuizTestInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *QuizTestInfo) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

func (x *QuizTestInfo) GetTotalLearningTime() int64 {
	if x != nil {
		return x.TotalLearningTime
	}
	return 0
}

func (x *QuizTestInfo) GetIsRetry() bool {
	if x != nil {
		return x.IsRetry
	}
	return false
}

type HighestQuizScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CorrectQuestion int32 `protobuf:"varint,1,opt,name=correct_question,json=correctQuestion,proto3" json:"correct_question,omitempty"`
	TotalQuestion   int32 `protobuf:"varint,2,opt,name=total_question,json=totalQuestion,proto3" json:"total_question,omitempty"`
}

func (x *HighestQuizScore) Reset() {
	*x = HighestQuizScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_contents_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HighestQuizScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HighestQuizScore) ProtoMessage() {}

func (x *HighestQuizScore) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_contents_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HighestQuizScore.ProtoReflect.Descriptor instead.
func (*HighestQuizScore) Descriptor() ([]byte, []int) {
	return file_common_v1_contents_proto_rawDescGZIP(), []int{16}
}

func (x *HighestQuizScore) GetCorrectQuestion() int32 {
	if x != nil {
		return x.CorrectQuestion
	}
	return 0
}

func (x *HighestQuizScore) GetTotalQuestion() int32 {
	if x != nil {
		return x.TotalQuestion
	}
	return 0
}

type QuizTests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*QuizTestInfo `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *QuizTests) Reset() {
	*x = QuizTests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_contents_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuizTests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuizTests) ProtoMessage() {}

func (x *QuizTests) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_contents_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuizTests.ProtoReflect.Descriptor instead.
func (*QuizTests) Descriptor() ([]byte, []int) {
	return file_common_v1_contents_proto_rawDescGZIP(), []int{17}
}

func (x *QuizTests) GetItems() []*QuizTestInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

type Attachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Url  string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Attachment) Reset() {
	*x = Attachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_contents_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attachment) ProtoMessage() {}

func (x *Attachment) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_contents_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attachment.ProtoReflect.Descriptor instead.
func (*Attachment) Descriptor() ([]byte, []int) {
	return file_common_v1_contents_proto_rawDescGZIP(), []int{18}
}

func (x *Attachment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Attachment) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type Completenes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuizFinished         bool    `protobuf:"varint,1,opt,name=quiz_finished,json=quizFinished,proto3" json:"quiz_finished,omitempty"`
	VideoFinished        bool    `protobuf:"varint,2,opt,name=video_finished,json=videoFinished,proto3" json:"video_finished,omitempty"`
	StudyGuideFinished   bool    `protobuf:"varint,3,opt,name=study_guide_finished,json=studyGuideFinished,proto3" json:"study_guide_finished,omitempty"`
	FirstQuizCorrectness float32 `protobuf:"fixed32,4,opt,name=first_quiz_correctness,json=firstQuizCorrectness,proto3" json:"first_quiz_correctness,omitempty"`
}

func (x *Completenes) Reset() {
	*x = Completenes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_contents_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Completenes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Completenes) ProtoMessage() {}

func (x *Completenes) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_contents_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Completenes.ProtoReflect.Descriptor instead.
func (*Completenes) Descriptor() ([]byte, []int) {
	return file_common_v1_contents_proto_rawDescGZIP(), []int{19}
}

func (x *Completenes) GetQuizFinished() bool {
	if x != nil {
		return x.QuizFinished
	}
	return false
}

func (x *Completenes) GetVideoFinished() bool {
	if x != nil {
		return x.VideoFinished
	}
	return false
}

func (x *Completenes) GetStudyGuideFinished() bool {
	if x != nil {
		return x.StudyGuideFinished
	}
	return false
}

func (x *Completenes) GetFirstQuizCorrectness() float32 {
	if x != nil {
		return x.FirstQuizCorrectness
	}
	return 0
}

type CourseAccessibility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CanWatchVideo     bool `protobuf:"varint,1,opt,name=can_watch_video,json=canWatchVideo,proto3" json:"can_watch_video,omitempty"`
	CanViewStudyGuide bool `protobuf:"varint,2,opt,name=can_view_study_guide,json=canViewStudyGuide,proto3" json:"can_view_study_guide,omitempty"`
	CanDoQuiz         bool `protobuf:"varint,3,opt,name=can_do_quiz,json=canDoQuiz,proto3" json:"can_do_quiz,omitempty"`
}

func (x *CourseAccessibility) Reset() {
	*x = CourseAccessibility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_contents_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CourseAccessibility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CourseAccessibility) ProtoMessage() {}

func (x *CourseAccessibility) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_contents_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CourseAccessibility.ProtoReflect.Descriptor instead.
func (*CourseAccessibility) Descriptor() ([]byte, []int) {
	return file_common_v1_contents_proto_rawDescGZIP(), []int{20}
}

func (x *CourseAccessibility) GetCanWatchVideo() bool {
	if x != nil {
		return x.CanWatchVideo
	}
	return false
}

func (x *CourseAccessibility) GetCanViewStudyGuide() bool {
	if x != nil {
		return x.CanViewStudyGuide
	}
	return false
}

func (x *CourseAccessibility) GetCanDoQuiz() bool {
	if x != nil {
		return x.CanDoQuiz
	}
	return false
}

type EssayConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LimitEnabled bool           `protobuf:"varint,1,opt,name=limit_enabled,json=limitEnabled,proto3" json:"limit_enabled,omitempty"`
	LimitType    EssayLimitType `protobuf:"varint,2,opt,name=limit_type,json=limitType,proto3,enum=common.v1.EssayLimitType" json:"limit_type,omitempty"`
	Limit        int32          `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *EssayConfig) Reset() {
	*x = EssayConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_v1_contents_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EssayConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EssayConfig) ProtoMessage() {}

func (x *EssayConfig) ProtoReflect() protoreflect.Message {
	mi := &file_common_v1_contents_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EssayConfig.ProtoReflect.Descriptor instead.
func (*EssayConfig) Descriptor() ([]byte, []int) {
	return file_common_v1_contents_proto_rawDescGZIP(), []int{21}
}

func (x *EssayConfig) GetLimitEnabled() bool {
	if x != nil {
		return x.LimitEnabled
	}
	return false
}

func (x *EssayConfig) GetLimitType() EssayLimitType {
	if x != nil {
		return x.LimitType
	}
	return EssayLimitType_ESSAY_LIMIT_TYPE_WORD
}

func (x *EssayConfig) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

var File_common_v1_contents_proto protoreflect.FileDescriptor

var file_common_v1_contents_proto_rawDesc = []byte{
	0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd3, 0x03, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2c,
	0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x63, 0x68, 0x6f, 0x6f, 0x6c, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x63, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x83, 0x02,
	0x0a, 0x06, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x0d, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x73, 0x73, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x73,
	0x73, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6b, 0x49, 0x64,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x73, 0x12, 0x33,
	0x0a, 0x08, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x74, 0x65, 0x61, 0x63, 0x68,
	0x65, 0x72, 0x73, 0x22, 0xb1, 0x02, 0x0a, 0x06, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x12, 0x2f,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c,
	0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x08, 0x74, 0x65,
	0x61, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x74, 0x65, 0x61, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x73, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x73, 0x22, 0x37, 0x0a, 0x04, 0x42, 0x6f, 0x6f, 0x6b, 0x12,
	0x2f, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x22, 0x70, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07,
	0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62,
	0x6f, 0x6f, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49,
	0x64, 0x73, 0x22, 0xa3, 0x02, 0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x2f, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x70, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x49, 0x64, 0x73, 0x12,
	0x37, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xf3, 0x05, 0x0a, 0x11, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2f,
	0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x75, 0x64, 0x79, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x69, 0x7a, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x70, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74,
	0x65, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x47, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x44,
	0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x41, 0x74, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x5f,
	0x67, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x47, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a,
	0x0d, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x67, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x12, 0x42, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x4c, 0x4f, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe3,
	0x01, 0x0a, 0x16, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x6c, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x39,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x11, 0x51, 0x75, 0x69, 0x7a, 0x49, 0x74, 0x65,
	0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6d,
	0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d,
	0x67, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x6c,
	0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x3c, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x22, 0x91, 0x06, 0x0a, 0x08, 0x51, 0x75, 0x69, 0x7a, 0x43, 0x6f, 0x72, 0x65, 0x12,
	0x2f, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x42, 0x61, 0x73, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x69, 0x7a,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78,
	0x74, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0b, 0x65,
	0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x69, 0x63,
	0x68, 0x54, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x4c, 0x6f, 0x73, 0x12, 0x2f, 0x0a, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x09,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x69, 0x7a,
	0x49, 0x74, 0x65, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x09, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x67, 0x49, 0x64, 0x73, 0x12,
	0x2e, 0x0a, 0x05, 0x65, 0x73, 0x73, 0x61, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x73, 0x73, 0x61, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x05, 0x65, 0x73, 0x73, 0x61, 0x79, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x61, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0a,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x69,
	0x7a, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xe0, 0x01, 0x0a, 0x04, 0x51, 0x75, 0x69, 0x7a, 0x12,
	0x27, 0x0a, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x43, 0x6f,
	0x72, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x6c, 0x6f, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x55, 0x72,
	0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x6c,
	0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x38, 0x0a, 0x08, 0x52, 0x69, 0x63,
	0x68, 0x54, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x72, 0x61, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x65, 0x64, 0x22, 0xf8, 0x01, 0x0a, 0x0a, 0x51, 0x75, 0x69, 0x7a, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x69, 0x7a, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x3a, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x52, 0x09, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x22, 0x5a,
	0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x22, 0xe1, 0x03, 0x0a, 0x09, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x71, 0x75, 0x69, 0x7a,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x75, 0x69, 0x7a, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x09, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x71, 0x75, 0x69, 0x7a, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x51, 0x75, 0x69, 0x7a, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x3d, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x44,
	0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb4,
	0x02, 0x0a, 0x0c, 0x51, 0x75, 0x69, 0x7a, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x15, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x71, 0x75, 0x69,
	0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x51, 0x75,
	0x69, 0x7a, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3d, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x11,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x22, 0x64, 0x0a, 0x10, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74,
	0x51, 0x75, 0x69, 0x7a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x0a, 0x09, 0x51,
	0x75, 0x69, 0x7a, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x69, 0x7a, 0x54, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x32, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0xc1, 0x01, 0x0a, 0x0b,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x71,
	0x75, 0x69, 0x7a, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x71, 0x75, 0x69, 0x7a, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x74, 0x75, 0x64, 0x79, 0x47, 0x75, 0x69, 0x64,
	0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x51, 0x75, 0x69, 0x7a, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x22,
	0x8e, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x5f, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x63, 0x61, 0x6e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12,
	0x2f, 0x0a, 0x14, 0x63, 0x61, 0x6e, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63,
	0x61, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x75, 0x64, 0x79, 0x47, 0x75, 0x69, 0x64, 0x65,
	0x12, 0x1e, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x5f, 0x64, 0x6f, 0x5f, 0x71, 0x75, 0x69, 0x7a, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x44, 0x6f, 0x51, 0x75, 0x69, 0x7a,
	0x22, 0x82, 0x01, 0x0a, 0x0b, 0x45, 0x73, 0x73, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x73, 0x73, 0x61, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2a, 0x30, 0x0a, 0x0a, 0x51, 0x75, 0x69, 0x7a, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x1e, 0x51, 0x55, 0x49, 0x5a, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x50, 0x4c, 0x41, 0x49, 0x4e,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x00, 0x2a, 0xc4, 0x01, 0x0a, 0x17, 0x51, 0x75, 0x69, 0x7a,
	0x49, 0x74, 0x65, 0x6d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x4c, 0x41, 0x53, 0x48, 0x43, 0x41, 0x52, 0x44,
	0x5f, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x4c, 0x41, 0x53, 0x48,
	0x43, 0x41, 0x52, 0x44, 0x5f, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x45, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x4c,
	0x41, 0x53, 0x48, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x4a, 0x50, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x4a, 0x50, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x45, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0f, 0x0a,
	0x0b, 0x4d, 0x41, 0x54, 0x48, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x05, 0x2a, 0xa2,
	0x01, 0x0a, 0x08, 0x51, 0x75, 0x69, 0x7a, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x51,
	0x55, 0x49, 0x5a, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x43, 0x51, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x51, 0x55, 0x49, 0x5a, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x42, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x51, 0x55, 0x49, 0x5a, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x4f, 0x57, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x51, 0x55, 0x49, 0x5a, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x54, 0x41, 0x44, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x51, 0x55, 0x49, 0x5a, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x49, 0x51, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x51, 0x55,
	0x49, 0x5a, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x51, 0x10, 0x05, 0x12, 0x11, 0x0a,
	0x0d, 0x51, 0x55, 0x49, 0x5a, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x10, 0x06,
	0x12, 0x11, 0x0a, 0x0d, 0x51, 0x55, 0x49, 0x5a, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x53,
	0x51, 0x10, 0x07, 0x2a, 0x54, 0x0a, 0x0a, 0x51, 0x75, 0x69, 0x7a, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x13, 0x0a, 0x0f, 0x51, 0x55, 0x49, 0x5a, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4e, 0x45, 0x57, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x51, 0x55, 0x49, 0x5a, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x51, 0x55, 0x49, 0x5a, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x82, 0x01, 0x0a, 0x10, 0x51, 0x75,
	0x69, 0x7a, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25,
	0x0a, 0x21, 0x51, 0x55, 0x49, 0x5a, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x43, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x49, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x51, 0x55, 0x49, 0x5a, 0x5f, 0x4f, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x49, 0x41, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c,
	0x51, 0x55, 0x49, 0x5a, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x02, 0x2a, 0x95,
	0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x12, 0x43, 0x4f, 0x55, 0x52, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x55, 0x52, 0x53,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x55, 0x52, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1a,
	0x0a, 0x16, 0x43, 0x4f, 0x55, 0x52, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4f, 0x4e, 0x5f, 0x47, 0x4f, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f,
	0x55, 0x52, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x04, 0x2a, 0x9a, 0x01, 0x0a, 0x0c, 0x4c, 0x65, 0x73, 0x73, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x45, 0x53, 0x53, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x1b, 0x0a, 0x17, 0x4c, 0x45, 0x53, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19,
	0x4c, 0x45, 0x53, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4c,
	0x45, 0x53, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x45,
	0x53, 0x53, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x52, 0x41, 0x46,
	0x54, 0x10, 0x04, 0x2a, 0x67, 0x0a, 0x0e, 0x4c, 0x69, 0x76, 0x65, 0x4c, 0x65, 0x73, 0x73, 0x6f,
	0x6e, 0x56, 0x69, 0x65, 0x77, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x4c, 0x45,
	0x53, 0x53, 0x4f, 0x4e, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x4f, 0x4e, 0x5f,
	0x56, 0x49, 0x45, 0x57, 0x5f, 0x47, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x59, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x4f, 0x4e, 0x5f, 0x56, 0x49,
	0x45, 0x57, 0x5f, 0x53, 0x50, 0x45, 0x41, 0x4b, 0x45, 0x52, 0x10, 0x02, 0x2a, 0x9f, 0x01, 0x0a,
	0x09, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x4f,
	0x50, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45,
	0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x4f, 0x50, 0x49,
	0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x41, 0x43, 0x54, 0x49, 0x43, 0x41, 0x4c,
	0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x58, 0x41, 0x4d, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x4f, 0x50, 0x49, 0x43,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x49, 0x56, 0x45, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x4f, 0x4e, 0x10, 0x05, 0x2a, 0x58,
	0x0a, 0x0b, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x15, 0x0a,
	0x11, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x4f, 0x50, 0x49, 0x43, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16,
	0x54, 0x4f, 0x50, 0x49, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x4a, 0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4f, 0x4f, 0x4b,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x42, 0x4f, 0x4f, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x48,
	0x4f, 0x43, 0x10, 0x02, 0x2a, 0x46, 0x0a, 0x0e, 0x45, 0x73, 0x73, 0x61, 0x79, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x53, 0x53, 0x41, 0x59, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x44, 0x10,
	0x00, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x53, 0x53, 0x41, 0x59, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x10, 0x01, 0x42, 0x3a, 0x5a, 0x38,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x62,
	0x69, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_v1_contents_proto_rawDescOnce sync.Once
	file_common_v1_contents_proto_rawDescData = file_common_v1_contents_proto_rawDesc
)

func file_common_v1_contents_proto_rawDescGZIP() []byte {
	file_common_v1_contents_proto_rawDescOnce.Do(func() {
		file_common_v1_contents_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_v1_contents_proto_rawDescData)
	})
	return file_common_v1_contents_proto_rawDescData
}

var file_common_v1_contents_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_common_v1_contents_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_common_v1_contents_proto_goTypes = []interface{}{
	(QuizConfig)(0),                 // 0: common.v1.QuizConfig
	(QuizItemAttributeConfig)(0),    // 1: common.v1.QuizItemAttributeConfig
	(QuizType)(0),                   // 2: common.v1.QuizType
	(QuizStatus)(0),                 // 3: common.v1.QuizStatus
	(QuizOptionConfig)(0),           // 4: common.v1.QuizOptionConfig
	(CourseStatus)(0),               // 5: common.v1.CourseStatus
	(LessonStatus)(0),               // 6: common.v1.LessonStatus
	(LiveLessonView)(0),             // 7: common.v1.LiveLessonView
	(TopicType)(0),                  // 8: common.v1.TopicType
	(TopicStatus)(0),                // 9: common.v1.TopicStatus
	(BookType)(0),                   // 10: common.v1.BookType
	(EssayLimitType)(0),             // 11: common.v1.EssayLimitType
	(*ContentBasicInfo)(nil),        // 12: common.v1.ContentBasicInfo
	(*Course)(nil),                  // 13: common.v1.Course
	(*Lesson)(nil),                  // 14: common.v1.Lesson
	(*Book)(nil),                    // 15: common.v1.Book
	(*Chapter)(nil),                 // 16: common.v1.Chapter
	(*Topic)(nil),                   // 17: common.v1.Topic
	(*LearningObjective)(nil),       // 18: common.v1.LearningObjective
	(*TopicLearningObjective)(nil),  // 19: common.v1.TopicLearningObjective
	(*QuizItemAttribute)(nil),       // 20: common.v1.QuizItemAttribute
	(*QuizCore)(nil),                // 21: common.v1.QuizCore
	(*Quiz)(nil),                    // 22: common.v1.Quiz
	(*RichText)(nil),                // 23: common.v1.RichText
	(*QuizOption)(nil),              // 24: common.v1.QuizOption
	(*OrderingResult)(nil),          // 25: common.v1.OrderingResult
	(*AnswerLog)(nil),               // 26: common.v1.AnswerLog
	(*QuizTestInfo)(nil),            // 27: common.v1.QuizTestInfo
	(*HighestQuizScore)(nil),        // 28: common.v1.HighestQuizScore
	(*QuizTests)(nil),               // 29: common.v1.QuizTests
	(*Attachment)(nil),              // 30: common.v1.Attachment
	(*Completenes)(nil),             // 31: common.v1.Completenes
	(*CourseAccessibility)(nil),     // 32: common.v1.CourseAccessibility
	(*EssayConfig)(nil),             // 33: common.v1.EssayConfig
	(Country)(0),                    // 34: common.v1.Country
	(Subject)(0),                    // 35: common.v1.Subject
	(*timestamppb.Timestamp)(nil),   // 36: google.protobuf.Timestamp
	(*BasicProfile)(nil),            // 37: common.v1.BasicProfile
	(LearningObjectiveType)(0),      // 38: common.v1.LearningObjectiveType
	(*wrapperspb.Int32Value)(nil),   // 39: google.protobuf.Int32Value
	(ExamLOReviewOption)(0),         // 40: common.v1.ExamLOReviewOption
	(LearningMaterialVendorType)(0), // 41: common.v1.LearningMaterialVendorType
	(*wrapperspb.StringValue)(nil),  // 42: google.protobuf.StringValue
	(QuizLabelType)(0),              // 43: common.v1.QuizLabelType
}
var file_common_v1_contents_proto_depIdxs = []int32{
	34, // 0: common.v1.ContentBasicInfo.country:type_name -> common.v1.Country
	35, // 1: common.v1.ContentBasicInfo.subject:type_name -> common.v1.Subject
	36, // 2: common.v1.ContentBasicInfo.updated_at:type_name -> google.protobuf.Timestamp
	36, // 3: common.v1.ContentBasicInfo.created_at:type_name -> google.protobuf.Timestamp
	36, // 4: common.v1.ContentBasicInfo.deleted_at:type_name -> google.protobuf.Timestamp
	12, // 5: common.v1.Course.info:type_name -> common.v1.ContentBasicInfo
	5,  // 6: common.v1.Course.course_status:type_name -> common.v1.CourseStatus
	37, // 7: common.v1.Course.teachers:type_name -> common.v1.BasicProfile
	12, // 8: common.v1.Lesson.info:type_name -> common.v1.ContentBasicInfo
	6,  // 9: common.v1.Lesson.status:type_name -> common.v1.LessonStatus
	17, // 10: common.v1.Lesson.topic:type_name -> common.v1.Topic
	37, // 11: common.v1.Lesson.teachers:type_name -> common.v1.BasicProfile
	12, // 12: common.v1.Book.info:type_name -> common.v1.ContentBasicInfo
	12, // 13: common.v1.Chapter.info:type_name -> common.v1.ContentBasicInfo
	12, // 14: common.v1.Topic.info:type_name -> common.v1.ContentBasicInfo
	8,  // 15: common.v1.Topic.type:type_name -> common.v1.TopicType
	9,  // 16: common.v1.Topic.status:type_name -> common.v1.TopicStatus
	30, // 17: common.v1.Topic.attachments:type_name -> common.v1.Attachment
	12, // 18: common.v1.LearningObjective.info:type_name -> common.v1.ContentBasicInfo
	38, // 19: common.v1.LearningObjective.type:type_name -> common.v1.LearningObjectiveType
	39, // 20: common.v1.LearningObjective.grade_to_pass:type_name -> google.protobuf.Int32Value
	39, // 21: common.v1.LearningObjective.time_limit:type_name -> google.protobuf.Int32Value
	39, // 22: common.v1.LearningObjective.maximum_attempt:type_name -> google.protobuf.Int32Value
	40, // 23: common.v1.LearningObjective.review_option:type_name -> common.v1.ExamLOReviewOption
	41, // 24: common.v1.LearningObjective.vendor_type:type_name -> common.v1.LearningMaterialVendorType
	36, // 25: common.v1.TopicLearningObjective.updated_at:type_name -> google.protobuf.Timestamp
	36, // 26: common.v1.TopicLearningObjective.created_at:type_name -> google.protobuf.Timestamp
	1,  // 27: common.v1.QuizItemAttribute.configs:type_name -> common.v1.QuizItemAttributeConfig
	12, // 28: common.v1.QuizCore.info:type_name -> common.v1.ContentBasicInfo
	2,  // 29: common.v1.QuizCore.kind:type_name -> common.v1.QuizType
	23, // 30: common.v1.QuizCore.question:type_name -> common.v1.RichText
	23, // 31: common.v1.QuizCore.explanation:type_name -> common.v1.RichText
	24, // 32: common.v1.QuizCore.options:type_name -> common.v1.QuizOption
	0,  // 33: common.v1.QuizCore.config:type_name -> common.v1.QuizConfig
	20, // 34: common.v1.QuizCore.attribute:type_name -> common.v1.QuizItemAttribute
	39, // 35: common.v1.QuizCore.point:type_name -> google.protobuf.Int32Value
	42, // 36: common.v1.QuizCore.question_group_id:type_name -> google.protobuf.StringValue
	33, // 37: common.v1.QuizCore.essay:type_name -> common.v1.EssayConfig
	43, // 38: common.v1.QuizCore.label_type:type_name -> common.v1.QuizLabelType
	21, // 39: common.v1.Quiz.core:type_name -> common.v1.QuizCore
	3,  // 40: common.v1.Quiz.status:type_name -> common.v1.QuizStatus
	23, // 41: common.v1.QuizOption.content:type_name -> common.v1.RichText
	4,  // 42: common.v1.QuizOption.configs:type_name -> common.v1.QuizOptionConfig
	20, // 43: common.v1.QuizOption.attribute:type_name -> common.v1.QuizItemAttribute
	2,  // 44: common.v1.AnswerLog.quiz_type:type_name -> common.v1.QuizType
	21, // 45: common.v1.AnswerLog.core:type_name -> common.v1.QuizCore
	36, // 46: common.v1.AnswerLog.submitted_at:type_name -> google.protobuf.Timestamp
	25, // 47: common.v1.AnswerLog.ordering_result:type_name -> common.v1.OrderingResult
	36, // 48: common.v1.QuizTestInfo.created_at:type_name -> google.protobuf.Timestamp
	36, // 49: common.v1.QuizTestInfo.completed_at:type_name -> google.protobuf.Timestamp
	27, // 50: common.v1.QuizTests.items:type_name -> common.v1.QuizTestInfo
	11, // 51: common.v1.EssayConfig.limit_type:type_name -> common.v1.EssayLimitType
	52, // [52:52] is the sub-list for method output_type
	52, // [52:52] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_common_v1_contents_proto_init() }
func file_common_v1_contents_proto_init() {
	if File_common_v1_contents_proto != nil {
		return
	}
	file_common_v1_enums_proto_init()
	file_common_v1_profiles_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_common_v1_contents_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentBasicInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_contents_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Course); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_contents_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lesson); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_contents_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Book); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_contents_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chapter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_contents_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Topic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_contents_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LearningObjective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_contents_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicLearningObjective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_contents_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuizItemAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_contents_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuizCore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_contents_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quiz); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_contents_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RichText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_contents_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuizOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_contents_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderingResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_contents_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnswerLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_contents_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuizTestInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_contents_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HighestQuizScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_contents_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuizTests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_contents_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_contents_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Completenes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_contents_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CourseAccessibility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_v1_contents_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EssayConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_common_v1_contents_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*QuizCore_Essay)(nil),
	}
	file_common_v1_contents_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*AnswerLog_OrderingResult)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_v1_contents_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_v1_contents_proto_goTypes,
		DependencyIndexes: file_common_v1_contents_proto_depIdxs,
		EnumInfos:         file_common_v1_contents_proto_enumTypes,
		MessageInfos:      file_common_v1_contents_proto_msgTypes,
	}.Build()
	File_common_v1_contents_proto = out.File
	file_common_v1_contents_proto_rawDesc = nil
	file_common_v1_contents_proto_goTypes = nil
	file_common_v1_contents_proto_depIdxs = nil
}
