// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UserReaderServiceClient is the client API for UserReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserReaderServiceClient interface {
	GetStaffsByLocationIDsAndNameOrEmail(ctx context.Context, in *GetStaffsByLocationIDsAndNameOrEmailRequest, opts ...grpc.CallOption) (*GetStaffsByLocationIDsAndNameOrEmailResponse, error)
	GetStaffsByLocation(ctx context.Context, in *GetStaffsByLocationRequest, opts ...grpc.CallOption) (*GetStaffsByLocationResponse, error)
}

type userReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserReaderServiceClient(cc grpc.ClientConnInterface) UserReaderServiceClient {
	return &userReaderServiceClient{cc}
}

func (c *userReaderServiceClient) GetStaffsByLocationIDsAndNameOrEmail(ctx context.Context, in *GetStaffsByLocationIDsAndNameOrEmailRequest, opts ...grpc.CallOption) (*GetStaffsByLocationIDsAndNameOrEmailResponse, error) {
	out := new(GetStaffsByLocationIDsAndNameOrEmailResponse)
	err := c.cc.Invoke(ctx, "/calendar.v1.UserReaderService/GetStaffsByLocationIDsAndNameOrEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userReaderServiceClient) GetStaffsByLocation(ctx context.Context, in *GetStaffsByLocationRequest, opts ...grpc.CallOption) (*GetStaffsByLocationResponse, error) {
	out := new(GetStaffsByLocationResponse)
	err := c.cc.Invoke(ctx, "/calendar.v1.UserReaderService/GetStaffsByLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserReaderServiceServer is the server API for UserReaderService service.
// All implementations should embed UnimplementedUserReaderServiceServer
// for forward compatibility
type UserReaderServiceServer interface {
	GetStaffsByLocationIDsAndNameOrEmail(context.Context, *GetStaffsByLocationIDsAndNameOrEmailRequest) (*GetStaffsByLocationIDsAndNameOrEmailResponse, error)
	GetStaffsByLocation(context.Context, *GetStaffsByLocationRequest) (*GetStaffsByLocationResponse, error)
}

// UnimplementedUserReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUserReaderServiceServer struct {
}

func (UnimplementedUserReaderServiceServer) GetStaffsByLocationIDsAndNameOrEmail(context.Context, *GetStaffsByLocationIDsAndNameOrEmailRequest) (*GetStaffsByLocationIDsAndNameOrEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStaffsByLocationIDsAndNameOrEmail not implemented")
}
func (UnimplementedUserReaderServiceServer) GetStaffsByLocation(context.Context, *GetStaffsByLocationRequest) (*GetStaffsByLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStaffsByLocation not implemented")
}

// UnsafeUserReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserReaderServiceServer will
// result in compilation errors.
type UnsafeUserReaderServiceServer interface {
	mustEmbedUnimplementedUserReaderServiceServer()
}

func RegisterUserReaderServiceServer(s grpc.ServiceRegistrar, srv UserReaderServiceServer) {
	s.RegisterService(&_UserReaderService_serviceDesc, srv)
}

func _UserReaderService_GetStaffsByLocationIDsAndNameOrEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStaffsByLocationIDsAndNameOrEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserReaderServiceServer).GetStaffsByLocationIDsAndNameOrEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.v1.UserReaderService/GetStaffsByLocationIDsAndNameOrEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserReaderServiceServer).GetStaffsByLocationIDsAndNameOrEmail(ctx, req.(*GetStaffsByLocationIDsAndNameOrEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserReaderService_GetStaffsByLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStaffsByLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserReaderServiceServer).GetStaffsByLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.v1.UserReaderService/GetStaffsByLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserReaderServiceServer).GetStaffsByLocation(ctx, req.(*GetStaffsByLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calendar.v1.UserReaderService",
	HandlerType: (*UserReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStaffsByLocationIDsAndNameOrEmail",
			Handler:    _UserReaderService_GetStaffsByLocationIDsAndNameOrEmail_Handler,
		},
		{
			MethodName: "GetStaffsByLocation",
			Handler:    _UserReaderService_GetStaffsByLocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calendar/v1/user.proto",
}
