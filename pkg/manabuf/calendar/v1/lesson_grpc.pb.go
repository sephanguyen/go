// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LessonReaderServiceClient is the client API for LessonReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LessonReaderServiceClient interface {
	GetLessonDetailOnCalendar(ctx context.Context, in *GetLessonDetailOnCalendarRequest, opts ...grpc.CallOption) (*GetLessonDetailOnCalendarResponse, error)
	GetLessonIDsForBulkStatusUpdate(ctx context.Context, in *GetLessonIDsForBulkStatusUpdateRequest, opts ...grpc.CallOption) (*GetLessonIDsForBulkStatusUpdateResponse, error)
}

type lessonReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLessonReaderServiceClient(cc grpc.ClientConnInterface) LessonReaderServiceClient {
	return &lessonReaderServiceClient{cc}
}

func (c *lessonReaderServiceClient) GetLessonDetailOnCalendar(ctx context.Context, in *GetLessonDetailOnCalendarRequest, opts ...grpc.CallOption) (*GetLessonDetailOnCalendarResponse, error) {
	out := new(GetLessonDetailOnCalendarResponse)
	err := c.cc.Invoke(ctx, "/calendar.v1.LessonReaderService/GetLessonDetailOnCalendar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonReaderServiceClient) GetLessonIDsForBulkStatusUpdate(ctx context.Context, in *GetLessonIDsForBulkStatusUpdateRequest, opts ...grpc.CallOption) (*GetLessonIDsForBulkStatusUpdateResponse, error) {
	out := new(GetLessonIDsForBulkStatusUpdateResponse)
	err := c.cc.Invoke(ctx, "/calendar.v1.LessonReaderService/GetLessonIDsForBulkStatusUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LessonReaderServiceServer is the server API for LessonReaderService service.
// All implementations should embed UnimplementedLessonReaderServiceServer
// for forward compatibility
type LessonReaderServiceServer interface {
	GetLessonDetailOnCalendar(context.Context, *GetLessonDetailOnCalendarRequest) (*GetLessonDetailOnCalendarResponse, error)
	GetLessonIDsForBulkStatusUpdate(context.Context, *GetLessonIDsForBulkStatusUpdateRequest) (*GetLessonIDsForBulkStatusUpdateResponse, error)
}

// UnimplementedLessonReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLessonReaderServiceServer struct {
}

func (UnimplementedLessonReaderServiceServer) GetLessonDetailOnCalendar(context.Context, *GetLessonDetailOnCalendarRequest) (*GetLessonDetailOnCalendarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLessonDetailOnCalendar not implemented")
}
func (UnimplementedLessonReaderServiceServer) GetLessonIDsForBulkStatusUpdate(context.Context, *GetLessonIDsForBulkStatusUpdateRequest) (*GetLessonIDsForBulkStatusUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLessonIDsForBulkStatusUpdate not implemented")
}

// UnsafeLessonReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LessonReaderServiceServer will
// result in compilation errors.
type UnsafeLessonReaderServiceServer interface {
	mustEmbedUnimplementedLessonReaderServiceServer()
}

func RegisterLessonReaderServiceServer(s grpc.ServiceRegistrar, srv LessonReaderServiceServer) {
	s.RegisterService(&_LessonReaderService_serviceDesc, srv)
}

func _LessonReaderService_GetLessonDetailOnCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLessonDetailOnCalendarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonReaderServiceServer).GetLessonDetailOnCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.v1.LessonReaderService/GetLessonDetailOnCalendar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonReaderServiceServer).GetLessonDetailOnCalendar(ctx, req.(*GetLessonDetailOnCalendarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LessonReaderService_GetLessonIDsForBulkStatusUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLessonIDsForBulkStatusUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonReaderServiceServer).GetLessonIDsForBulkStatusUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.v1.LessonReaderService/GetLessonIDsForBulkStatusUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonReaderServiceServer).GetLessonIDsForBulkStatusUpdate(ctx, req.(*GetLessonIDsForBulkStatusUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LessonReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calendar.v1.LessonReaderService",
	HandlerType: (*LessonReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLessonDetailOnCalendar",
			Handler:    _LessonReaderService_GetLessonDetailOnCalendar_Handler,
		},
		{
			MethodName: "GetLessonIDsForBulkStatusUpdate",
			Handler:    _LessonReaderService_GetLessonIDsForBulkStatusUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calendar/v1/lesson.proto",
}
