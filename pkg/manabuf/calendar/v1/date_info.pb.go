// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: calendar/v1/date_info.proto

package v1

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	LocationId   string                 `protobuf:"bytes,2,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	LocationName string                 `protobuf:"bytes,3,opt,name=location_name,json=locationName,proto3" json:"location_name,omitempty"`
	DateTypeId   string                 `protobuf:"bytes,4,opt,name=date_type_id,json=dateTypeId,proto3" json:"date_type_id,omitempty"`
	OpeningTime  string                 `protobuf:"bytes,5,opt,name=opening_time,json=openingTime,proto3" json:"opening_time,omitempty"`
	Status       string                 `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Timezone     string                 `protobuf:"bytes,7,opt,name=timezone,proto3" json:"timezone,omitempty"`
}

func (x *DateInfo) Reset() {
	*x = DateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendar_v1_date_info_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateInfo) ProtoMessage() {}

func (x *DateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_v1_date_info_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateInfo.ProtoReflect.Descriptor instead.
func (*DateInfo) Descriptor() ([]byte, []int) {
	return file_calendar_v1_date_info_proto_rawDescGZIP(), []int{0}
}

func (x *DateInfo) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *DateInfo) GetLocationId() string {
	if x != nil {
		return x.LocationId
	}
	return ""
}

func (x *DateInfo) GetLocationName() string {
	if x != nil {
		return x.LocationName
	}
	return ""
}

func (x *DateInfo) GetDateTypeId() string {
	if x != nil {
		return x.DateTypeId
	}
	return ""
}

func (x *DateInfo) GetOpeningTime() string {
	if x != nil {
		return x.OpeningTime
	}
	return ""
}

func (x *DateInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DateInfo) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

type DateInfoDetailed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateInfo            *DateInfo `protobuf:"bytes,1,opt,name=date_info,json=dateInfo,proto3" json:"date_info,omitempty"`
	DateTypeDisplayName string    `protobuf:"bytes,2,opt,name=date_type_display_name,json=dateTypeDisplayName,proto3" json:"date_type_display_name,omitempty"`
}

func (x *DateInfoDetailed) Reset() {
	*x = DateInfoDetailed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendar_v1_date_info_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateInfoDetailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateInfoDetailed) ProtoMessage() {}

func (x *DateInfoDetailed) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_v1_date_info_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateInfoDetailed.ProtoReflect.Descriptor instead.
func (*DateInfoDetailed) Descriptor() ([]byte, []int) {
	return file_calendar_v1_date_info_proto_rawDescGZIP(), []int{1}
}

func (x *DateInfoDetailed) GetDateInfo() *DateInfo {
	if x != nil {
		return x.DateInfo
	}
	return nil
}

func (x *DateInfoDetailed) GetDateTypeDisplayName() string {
	if x != nil {
		return x.DateTypeDisplayName
	}
	return ""
}

type RepeatInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartDate *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Condition string                 `protobuf:"bytes,3,opt,name=condition,proto3" json:"condition,omitempty"` // "daily", "weekly"
}

func (x *RepeatInfo) Reset() {
	*x = RepeatInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendar_v1_date_info_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatInfo) ProtoMessage() {}

func (x *RepeatInfo) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_v1_date_info_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatInfo.ProtoReflect.Descriptor instead.
func (*RepeatInfo) Descriptor() ([]byte, []int) {
	return file_calendar_v1_date_info_proto_rawDescGZIP(), []int{2}
}

func (x *RepeatInfo) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *RepeatInfo) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *RepeatInfo) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

type FetchDateInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartDate  *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	LocationId string                 `protobuf:"bytes,3,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	Timezone   string                 `protobuf:"bytes,4,opt,name=timezone,proto3" json:"timezone,omitempty"`
}

func (x *FetchDateInfoRequest) Reset() {
	*x = FetchDateInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendar_v1_date_info_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchDateInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDateInfoRequest) ProtoMessage() {}

func (x *FetchDateInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_v1_date_info_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDateInfoRequest.ProtoReflect.Descriptor instead.
func (*FetchDateInfoRequest) Descriptor() ([]byte, []int) {
	return file_calendar_v1_date_info_proto_rawDescGZIP(), []int{3}
}

func (x *FetchDateInfoRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *FetchDateInfoRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *FetchDateInfoRequest) GetLocationId() string {
	if x != nil {
		return x.LocationId
	}
	return ""
}

func (x *FetchDateInfoRequest) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

type FetchDateInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Successful bool   `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
	Message    string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Deprecated: Do not use.
	DateInfo  []*DateInfo         `protobuf:"bytes,3,rep,name=date_info,json=dateInfo,proto3" json:"date_info,omitempty"`
	DateInfos []*DateInfoDetailed `protobuf:"bytes,4,rep,name=date_infos,json=dateInfos,proto3" json:"date_infos,omitempty"`
}

func (x *FetchDateInfoResponse) Reset() {
	*x = FetchDateInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendar_v1_date_info_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchDateInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDateInfoResponse) ProtoMessage() {}

func (x *FetchDateInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_v1_date_info_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDateInfoResponse.ProtoReflect.Descriptor instead.
func (*FetchDateInfoResponse) Descriptor() ([]byte, []int) {
	return file_calendar_v1_date_info_proto_rawDescGZIP(), []int{4}
}

func (x *FetchDateInfoResponse) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

func (x *FetchDateInfoResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Deprecated: Do not use.
func (x *FetchDateInfoResponse) GetDateInfo() []*DateInfo {
	if x != nil {
		return x.DateInfo
	}
	return nil
}

func (x *FetchDateInfoResponse) GetDateInfos() []*DateInfoDetailed {
	if x != nil {
		return x.DateInfos
	}
	return nil
}

type UpsertDateInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateInfo *DateInfo `protobuf:"bytes,1,opt,name=date_info,json=dateInfo,proto3" json:"date_info,omitempty"`
}

func (x *UpsertDateInfoRequest) Reset() {
	*x = UpsertDateInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendar_v1_date_info_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertDateInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertDateInfoRequest) ProtoMessage() {}

func (x *UpsertDateInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_v1_date_info_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertDateInfoRequest.ProtoReflect.Descriptor instead.
func (*UpsertDateInfoRequest) Descriptor() ([]byte, []int) {
	return file_calendar_v1_date_info_proto_rawDescGZIP(), []int{5}
}

func (x *UpsertDateInfoRequest) GetDateInfo() *DateInfo {
	if x != nil {
		return x.DateInfo
	}
	return nil
}

type UpsertDateInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Successful bool   `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
	Message    string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpsertDateInfoResponse) Reset() {
	*x = UpsertDateInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendar_v1_date_info_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertDateInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertDateInfoResponse) ProtoMessage() {}

func (x *UpsertDateInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_v1_date_info_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertDateInfoResponse.ProtoReflect.Descriptor instead.
func (*UpsertDateInfoResponse) Descriptor() ([]byte, []int) {
	return file_calendar_v1_date_info_proto_rawDescGZIP(), []int{6}
}

func (x *UpsertDateInfoResponse) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

func (x *UpsertDateInfoResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DuplicateDateInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DateInfo   *DateInfo   `protobuf:"bytes,1,opt,name=date_info,json=dateInfo,proto3" json:"date_info,omitempty"`
	RepeatInfo *RepeatInfo `protobuf:"bytes,2,opt,name=repeat_info,json=repeatInfo,proto3" json:"repeat_info,omitempty"`
}

func (x *DuplicateDateInfoRequest) Reset() {
	*x = DuplicateDateInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendar_v1_date_info_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DuplicateDateInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DuplicateDateInfoRequest) ProtoMessage() {}

func (x *DuplicateDateInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_v1_date_info_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DuplicateDateInfoRequest.ProtoReflect.Descriptor instead.
func (*DuplicateDateInfoRequest) Descriptor() ([]byte, []int) {
	return file_calendar_v1_date_info_proto_rawDescGZIP(), []int{7}
}

func (x *DuplicateDateInfoRequest) GetDateInfo() *DateInfo {
	if x != nil {
		return x.DateInfo
	}
	return nil
}

func (x *DuplicateDateInfoRequest) GetRepeatInfo() *RepeatInfo {
	if x != nil {
		return x.RepeatInfo
	}
	return nil
}

type DuplicateDateInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Successful bool   `protobuf:"varint,1,opt,name=successful,proto3" json:"successful,omitempty"`
	Message    string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DuplicateDateInfoResponse) Reset() {
	*x = DuplicateDateInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendar_v1_date_info_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DuplicateDateInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DuplicateDateInfoResponse) ProtoMessage() {}

func (x *DuplicateDateInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_v1_date_info_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DuplicateDateInfoResponse.ProtoReflect.Descriptor instead.
func (*DuplicateDateInfoResponse) Descriptor() ([]byte, []int) {
	return file_calendar_v1_date_info_proto_rawDescGZIP(), []int{8}
}

func (x *DuplicateDateInfoResponse) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

func (x *DuplicateDateInfoResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ExportDayInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExportDayInfoRequest) Reset() {
	*x = ExportDayInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendar_v1_date_info_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportDayInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportDayInfoRequest) ProtoMessage() {}

func (x *ExportDayInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_v1_date_info_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportDayInfoRequest.ProtoReflect.Descriptor instead.
func (*ExportDayInfoRequest) Descriptor() ([]byte, []int) {
	return file_calendar_v1_date_info_proto_rawDescGZIP(), []int{9}
}

type ExportDayInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ExportDayInfoResponse) Reset() {
	*x = ExportDayInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calendar_v1_date_info_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportDayInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportDayInfoResponse) ProtoMessage() {}

func (x *ExportDayInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_calendar_v1_date_info_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportDayInfoResponse.ProtoReflect.Descriptor instead.
func (*ExportDayInfoResponse) Descriptor() ([]byte, []int) {
	return file_calendar_v1_date_info_proto_rawDescGZIP(), []int{10}
}

func (x *ExportDayInfoResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_calendar_v1_date_info_proto protoreflect.FileDescriptor

var file_calendar_v1_date_info_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x63,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf9, 0x01, 0x0a, 0x08,
	0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0x7b, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x33, 0x0a, 0x16, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xc5, 0x01, 0x0a, 0x14, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x15,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x66, 0x75, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x36, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x4b, 0x0a, 0x15, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x52, 0x0a, 0x16, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x18, 0x44, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x55, 0x0a, 0x19, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x44, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x2b, 0x0a, 0x15, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xc7, 0x01,
	0x0a, 0x15, 0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x56, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x21, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xd8, 0x01, 0x0a, 0x17, 0x44, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x62, 0x0a, 0x11, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x2e, 0x63, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x62, 0x69, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x62, 0x75, 0x66,
	0x2f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_calendar_v1_date_info_proto_rawDescOnce sync.Once
	file_calendar_v1_date_info_proto_rawDescData = file_calendar_v1_date_info_proto_rawDesc
)

func file_calendar_v1_date_info_proto_rawDescGZIP() []byte {
	file_calendar_v1_date_info_proto_rawDescOnce.Do(func() {
		file_calendar_v1_date_info_proto_rawDescData = protoimpl.X.CompressGZIP(file_calendar_v1_date_info_proto_rawDescData)
	})
	return file_calendar_v1_date_info_proto_rawDescData
}

var file_calendar_v1_date_info_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_calendar_v1_date_info_proto_goTypes = []interface{}{
	(*DateInfo)(nil),                  // 0: calendar.v1.DateInfo
	(*DateInfoDetailed)(nil),          // 1: calendar.v1.DateInfoDetailed
	(*RepeatInfo)(nil),                // 2: calendar.v1.RepeatInfo
	(*FetchDateInfoRequest)(nil),      // 3: calendar.v1.FetchDateInfoRequest
	(*FetchDateInfoResponse)(nil),     // 4: calendar.v1.FetchDateInfoResponse
	(*UpsertDateInfoRequest)(nil),     // 5: calendar.v1.UpsertDateInfoRequest
	(*UpsertDateInfoResponse)(nil),    // 6: calendar.v1.UpsertDateInfoResponse
	(*DuplicateDateInfoRequest)(nil),  // 7: calendar.v1.DuplicateDateInfoRequest
	(*DuplicateDateInfoResponse)(nil), // 8: calendar.v1.DuplicateDateInfoResponse
	(*ExportDayInfoRequest)(nil),      // 9: calendar.v1.ExportDayInfoRequest
	(*ExportDayInfoResponse)(nil),     // 10: calendar.v1.ExportDayInfoResponse
	(*timestamppb.Timestamp)(nil),     // 11: google.protobuf.Timestamp
}
var file_calendar_v1_date_info_proto_depIdxs = []int32{
	11, // 0: calendar.v1.DateInfo.date:type_name -> google.protobuf.Timestamp
	0,  // 1: calendar.v1.DateInfoDetailed.date_info:type_name -> calendar.v1.DateInfo
	11, // 2: calendar.v1.RepeatInfo.start_date:type_name -> google.protobuf.Timestamp
	11, // 3: calendar.v1.RepeatInfo.end_date:type_name -> google.protobuf.Timestamp
	11, // 4: calendar.v1.FetchDateInfoRequest.start_date:type_name -> google.protobuf.Timestamp
	11, // 5: calendar.v1.FetchDateInfoRequest.end_date:type_name -> google.protobuf.Timestamp
	0,  // 6: calendar.v1.FetchDateInfoResponse.date_info:type_name -> calendar.v1.DateInfo
	1,  // 7: calendar.v1.FetchDateInfoResponse.date_infos:type_name -> calendar.v1.DateInfoDetailed
	0,  // 8: calendar.v1.UpsertDateInfoRequest.date_info:type_name -> calendar.v1.DateInfo
	0,  // 9: calendar.v1.DuplicateDateInfoRequest.date_info:type_name -> calendar.v1.DateInfo
	2,  // 10: calendar.v1.DuplicateDateInfoRequest.repeat_info:type_name -> calendar.v1.RepeatInfo
	3,  // 11: calendar.v1.DateInfoReaderService.FetchDateInfo:input_type -> calendar.v1.FetchDateInfoRequest
	9,  // 12: calendar.v1.DateInfoReaderService.ExportDayInfo:input_type -> calendar.v1.ExportDayInfoRequest
	7,  // 13: calendar.v1.DateInfoModifierService.DuplicateDateInfo:input_type -> calendar.v1.DuplicateDateInfoRequest
	5,  // 14: calendar.v1.DateInfoModifierService.UpsertDateInfo:input_type -> calendar.v1.UpsertDateInfoRequest
	4,  // 15: calendar.v1.DateInfoReaderService.FetchDateInfo:output_type -> calendar.v1.FetchDateInfoResponse
	10, // 16: calendar.v1.DateInfoReaderService.ExportDayInfo:output_type -> calendar.v1.ExportDayInfoResponse
	8,  // 17: calendar.v1.DateInfoModifierService.DuplicateDateInfo:output_type -> calendar.v1.DuplicateDateInfoResponse
	6,  // 18: calendar.v1.DateInfoModifierService.UpsertDateInfo:output_type -> calendar.v1.UpsertDateInfoResponse
	15, // [15:19] is the sub-list for method output_type
	11, // [11:15] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_calendar_v1_date_info_proto_init() }
func file_calendar_v1_date_info_proto_init() {
	if File_calendar_v1_date_info_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_calendar_v1_date_info_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendar_v1_date_info_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateInfoDetailed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendar_v1_date_info_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendar_v1_date_info_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchDateInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendar_v1_date_info_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchDateInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendar_v1_date_info_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertDateInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendar_v1_date_info_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertDateInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendar_v1_date_info_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DuplicateDateInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendar_v1_date_info_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DuplicateDateInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendar_v1_date_info_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportDayInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calendar_v1_date_info_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportDayInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_calendar_v1_date_info_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_calendar_v1_date_info_proto_goTypes,
		DependencyIndexes: file_calendar_v1_date_info_proto_depIdxs,
		MessageInfos:      file_calendar_v1_date_info_proto_msgTypes,
	}.Build()
	File_calendar_v1_date_info_proto = out.File
	file_calendar_v1_date_info_proto_rawDesc = nil
	file_calendar_v1_date_info_proto_goTypes = nil
	file_calendar_v1_date_info_proto_depIdxs = nil
}
