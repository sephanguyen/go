// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DateInfoReaderServiceClient is the client API for DateInfoReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DateInfoReaderServiceClient interface {
	FetchDateInfo(ctx context.Context, in *FetchDateInfoRequest, opts ...grpc.CallOption) (*FetchDateInfoResponse, error)
	ExportDayInfo(ctx context.Context, in *ExportDayInfoRequest, opts ...grpc.CallOption) (*ExportDayInfoResponse, error)
}

type dateInfoReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDateInfoReaderServiceClient(cc grpc.ClientConnInterface) DateInfoReaderServiceClient {
	return &dateInfoReaderServiceClient{cc}
}

func (c *dateInfoReaderServiceClient) FetchDateInfo(ctx context.Context, in *FetchDateInfoRequest, opts ...grpc.CallOption) (*FetchDateInfoResponse, error) {
	out := new(FetchDateInfoResponse)
	err := c.cc.Invoke(ctx, "/calendar.v1.DateInfoReaderService/FetchDateInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dateInfoReaderServiceClient) ExportDayInfo(ctx context.Context, in *ExportDayInfoRequest, opts ...grpc.CallOption) (*ExportDayInfoResponse, error) {
	out := new(ExportDayInfoResponse)
	err := c.cc.Invoke(ctx, "/calendar.v1.DateInfoReaderService/ExportDayInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DateInfoReaderServiceServer is the server API for DateInfoReaderService service.
// All implementations should embed UnimplementedDateInfoReaderServiceServer
// for forward compatibility
type DateInfoReaderServiceServer interface {
	FetchDateInfo(context.Context, *FetchDateInfoRequest) (*FetchDateInfoResponse, error)
	ExportDayInfo(context.Context, *ExportDayInfoRequest) (*ExportDayInfoResponse, error)
}

// UnimplementedDateInfoReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDateInfoReaderServiceServer struct {
}

func (UnimplementedDateInfoReaderServiceServer) FetchDateInfo(context.Context, *FetchDateInfoRequest) (*FetchDateInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchDateInfo not implemented")
}
func (UnimplementedDateInfoReaderServiceServer) ExportDayInfo(context.Context, *ExportDayInfoRequest) (*ExportDayInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportDayInfo not implemented")
}

// UnsafeDateInfoReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DateInfoReaderServiceServer will
// result in compilation errors.
type UnsafeDateInfoReaderServiceServer interface {
	mustEmbedUnimplementedDateInfoReaderServiceServer()
}

func RegisterDateInfoReaderServiceServer(s grpc.ServiceRegistrar, srv DateInfoReaderServiceServer) {
	s.RegisterService(&_DateInfoReaderService_serviceDesc, srv)
}

func _DateInfoReaderService_FetchDateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchDateInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DateInfoReaderServiceServer).FetchDateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.v1.DateInfoReaderService/FetchDateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DateInfoReaderServiceServer).FetchDateInfo(ctx, req.(*FetchDateInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DateInfoReaderService_ExportDayInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportDayInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DateInfoReaderServiceServer).ExportDayInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.v1.DateInfoReaderService/ExportDayInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DateInfoReaderServiceServer).ExportDayInfo(ctx, req.(*ExportDayInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DateInfoReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calendar.v1.DateInfoReaderService",
	HandlerType: (*DateInfoReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchDateInfo",
			Handler:    _DateInfoReaderService_FetchDateInfo_Handler,
		},
		{
			MethodName: "ExportDayInfo",
			Handler:    _DateInfoReaderService_ExportDayInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calendar/v1/date_info.proto",
}

// DateInfoModifierServiceClient is the client API for DateInfoModifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DateInfoModifierServiceClient interface {
	DuplicateDateInfo(ctx context.Context, in *DuplicateDateInfoRequest, opts ...grpc.CallOption) (*DuplicateDateInfoResponse, error)
	UpsertDateInfo(ctx context.Context, in *UpsertDateInfoRequest, opts ...grpc.CallOption) (*UpsertDateInfoResponse, error)
}

type dateInfoModifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDateInfoModifierServiceClient(cc grpc.ClientConnInterface) DateInfoModifierServiceClient {
	return &dateInfoModifierServiceClient{cc}
}

func (c *dateInfoModifierServiceClient) DuplicateDateInfo(ctx context.Context, in *DuplicateDateInfoRequest, opts ...grpc.CallOption) (*DuplicateDateInfoResponse, error) {
	out := new(DuplicateDateInfoResponse)
	err := c.cc.Invoke(ctx, "/calendar.v1.DateInfoModifierService/DuplicateDateInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dateInfoModifierServiceClient) UpsertDateInfo(ctx context.Context, in *UpsertDateInfoRequest, opts ...grpc.CallOption) (*UpsertDateInfoResponse, error) {
	out := new(UpsertDateInfoResponse)
	err := c.cc.Invoke(ctx, "/calendar.v1.DateInfoModifierService/UpsertDateInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DateInfoModifierServiceServer is the server API for DateInfoModifierService service.
// All implementations should embed UnimplementedDateInfoModifierServiceServer
// for forward compatibility
type DateInfoModifierServiceServer interface {
	DuplicateDateInfo(context.Context, *DuplicateDateInfoRequest) (*DuplicateDateInfoResponse, error)
	UpsertDateInfo(context.Context, *UpsertDateInfoRequest) (*UpsertDateInfoResponse, error)
}

// UnimplementedDateInfoModifierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDateInfoModifierServiceServer struct {
}

func (UnimplementedDateInfoModifierServiceServer) DuplicateDateInfo(context.Context, *DuplicateDateInfoRequest) (*DuplicateDateInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DuplicateDateInfo not implemented")
}
func (UnimplementedDateInfoModifierServiceServer) UpsertDateInfo(context.Context, *UpsertDateInfoRequest) (*UpsertDateInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertDateInfo not implemented")
}

// UnsafeDateInfoModifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DateInfoModifierServiceServer will
// result in compilation errors.
type UnsafeDateInfoModifierServiceServer interface {
	mustEmbedUnimplementedDateInfoModifierServiceServer()
}

func RegisterDateInfoModifierServiceServer(s grpc.ServiceRegistrar, srv DateInfoModifierServiceServer) {
	s.RegisterService(&_DateInfoModifierService_serviceDesc, srv)
}

func _DateInfoModifierService_DuplicateDateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DuplicateDateInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DateInfoModifierServiceServer).DuplicateDateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.v1.DateInfoModifierService/DuplicateDateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DateInfoModifierServiceServer).DuplicateDateInfo(ctx, req.(*DuplicateDateInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DateInfoModifierService_UpsertDateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertDateInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DateInfoModifierServiceServer).UpsertDateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calendar.v1.DateInfoModifierService/UpsertDateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DateInfoModifierServiceServer).UpsertDateInfo(ctx, req.(*UpsertDateInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DateInfoModifierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calendar.v1.DateInfoModifierService",
	HandlerType: (*DateInfoModifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DuplicateDateInfo",
			Handler:    _DateInfoModifierService_DuplicateDateInfo_Handler,
		},
		{
			MethodName: "UpsertDateInfo",
			Handler:    _DateInfoModifierService_UpsertDateInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calendar/v1/date_info.proto",
}
