// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package fpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AccessibilityReadServiceClient is the client API for AccessibilityReadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccessibilityReadServiceClient interface {
	RetrieveAccessibility(ctx context.Context, in *RetrieveAccessibilityRequest, opts ...grpc.CallOption) (*RetrieveAccessibilityResponse, error)
	RetrieveStudentAccessibility(ctx context.Context, in *RetrieveStudentAccessibilityRequest, opts ...grpc.CallOption) (*RetrieveStudentAccessibilityResponse, error)
}

type accessibilityReadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessibilityReadServiceClient(cc grpc.ClientConnInterface) AccessibilityReadServiceClient {
	return &accessibilityReadServiceClient{cc}
}

func (c *accessibilityReadServiceClient) RetrieveAccessibility(ctx context.Context, in *RetrieveAccessibilityRequest, opts ...grpc.CallOption) (*RetrieveAccessibilityResponse, error) {
	out := new(RetrieveAccessibilityResponse)
	err := c.cc.Invoke(ctx, "/fatima.v1.AccessibilityReadService/RetrieveAccessibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessibilityReadServiceClient) RetrieveStudentAccessibility(ctx context.Context, in *RetrieveStudentAccessibilityRequest, opts ...grpc.CallOption) (*RetrieveStudentAccessibilityResponse, error) {
	out := new(RetrieveStudentAccessibilityResponse)
	err := c.cc.Invoke(ctx, "/fatima.v1.AccessibilityReadService/RetrieveStudentAccessibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessibilityReadServiceServer is the server API for AccessibilityReadService service.
// All implementations should embed UnimplementedAccessibilityReadServiceServer
// for forward compatibility
type AccessibilityReadServiceServer interface {
	RetrieveAccessibility(context.Context, *RetrieveAccessibilityRequest) (*RetrieveAccessibilityResponse, error)
	RetrieveStudentAccessibility(context.Context, *RetrieveStudentAccessibilityRequest) (*RetrieveStudentAccessibilityResponse, error)
}

// UnimplementedAccessibilityReadServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAccessibilityReadServiceServer struct {
}

func (UnimplementedAccessibilityReadServiceServer) RetrieveAccessibility(context.Context, *RetrieveAccessibilityRequest) (*RetrieveAccessibilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveAccessibility not implemented")
}
func (UnimplementedAccessibilityReadServiceServer) RetrieveStudentAccessibility(context.Context, *RetrieveStudentAccessibilityRequest) (*RetrieveStudentAccessibilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveStudentAccessibility not implemented")
}

// UnsafeAccessibilityReadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessibilityReadServiceServer will
// result in compilation errors.
type UnsafeAccessibilityReadServiceServer interface {
	mustEmbedUnimplementedAccessibilityReadServiceServer()
}

func RegisterAccessibilityReadServiceServer(s grpc.ServiceRegistrar, srv AccessibilityReadServiceServer) {
	s.RegisterService(&_AccessibilityReadService_serviceDesc, srv)
}

func _AccessibilityReadService_RetrieveAccessibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveAccessibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessibilityReadServiceServer).RetrieveAccessibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fatima.v1.AccessibilityReadService/RetrieveAccessibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessibilityReadServiceServer).RetrieveAccessibility(ctx, req.(*RetrieveAccessibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessibilityReadService_RetrieveStudentAccessibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveStudentAccessibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessibilityReadServiceServer).RetrieveStudentAccessibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fatima.v1.AccessibilityReadService/RetrieveStudentAccessibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessibilityReadServiceServer).RetrieveStudentAccessibility(ctx, req.(*RetrieveStudentAccessibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccessibilityReadService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fatima.v1.AccessibilityReadService",
	HandlerType: (*AccessibilityReadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveAccessibility",
			Handler:    _AccessibilityReadService_RetrieveAccessibility_Handler,
		},
		{
			MethodName: "RetrieveStudentAccessibility",
			Handler:    _AccessibilityReadService_RetrieveStudentAccessibility_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fatima/v1/access.proto",
}
