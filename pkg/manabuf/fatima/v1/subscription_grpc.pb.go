// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package fpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SubscriptionModifierServiceClient is the client API for SubscriptionModifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriptionModifierServiceClient interface {
	CreatePackage(ctx context.Context, in *CreatePackageRequest, opts ...grpc.CallOption) (*CreatePackageResponse, error)
	ToggleActivePackage(ctx context.Context, in *ToggleActivePackageRequest, opts ...grpc.CallOption) (*ToggleActivePackageResponse, error)
	AddStudentPackage(ctx context.Context, in *AddStudentPackageRequest, opts ...grpc.CallOption) (*AddStudentPackageResponse, error)
	ToggleActiveStudentPackage(ctx context.Context, in *ToggleActiveStudentPackageRequest, opts ...grpc.CallOption) (*ToggleActiveStudentPackageResponse, error)
	AddStudentPackageCourse(ctx context.Context, in *AddStudentPackageCourseRequest, opts ...grpc.CallOption) (*AddStudentPackageCourseResponse, error)
	EditTimeStudentPackage(ctx context.Context, in *EditTimeStudentPackageRequest, opts ...grpc.CallOption) (*EditTimeStudentPackageResponse, error)
	RegisterStudentClass(ctx context.Context, in *RegisterStudentClassRequest, opts ...grpc.CallOption) (*RegisterStudentClassResponse, error)
	ListStudentPackage(ctx context.Context, in *ListStudentPackageRequest, opts ...grpc.CallOption) (*ListStudentPackageResponse, error)
	ListStudentPackageV2(ctx context.Context, in *ListStudentPackageV2Request, opts ...grpc.CallOption) (SubscriptionModifierService_ListStudentPackageV2Client, error)
	WrapperRegisterStudentClass(ctx context.Context, in *WrapperRegisterStudentClassRequest, opts ...grpc.CallOption) (*WrapperRegisterStudentClassResponse, error)
	RetrieveStudentPackagesUnderCourse(ctx context.Context, in *RetrieveStudentPackagesUnderCourseRequest, opts ...grpc.CallOption) (*RetrieveStudentPackagesUnderCourseResponse, error)
}

type subscriptionModifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionModifierServiceClient(cc grpc.ClientConnInterface) SubscriptionModifierServiceClient {
	return &subscriptionModifierServiceClient{cc}
}

func (c *subscriptionModifierServiceClient) CreatePackage(ctx context.Context, in *CreatePackageRequest, opts ...grpc.CallOption) (*CreatePackageResponse, error) {
	out := new(CreatePackageResponse)
	err := c.cc.Invoke(ctx, "/fatima.v1.SubscriptionModifierService/CreatePackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionModifierServiceClient) ToggleActivePackage(ctx context.Context, in *ToggleActivePackageRequest, opts ...grpc.CallOption) (*ToggleActivePackageResponse, error) {
	out := new(ToggleActivePackageResponse)
	err := c.cc.Invoke(ctx, "/fatima.v1.SubscriptionModifierService/ToggleActivePackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionModifierServiceClient) AddStudentPackage(ctx context.Context, in *AddStudentPackageRequest, opts ...grpc.CallOption) (*AddStudentPackageResponse, error) {
	out := new(AddStudentPackageResponse)
	err := c.cc.Invoke(ctx, "/fatima.v1.SubscriptionModifierService/AddStudentPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionModifierServiceClient) ToggleActiveStudentPackage(ctx context.Context, in *ToggleActiveStudentPackageRequest, opts ...grpc.CallOption) (*ToggleActiveStudentPackageResponse, error) {
	out := new(ToggleActiveStudentPackageResponse)
	err := c.cc.Invoke(ctx, "/fatima.v1.SubscriptionModifierService/ToggleActiveStudentPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionModifierServiceClient) AddStudentPackageCourse(ctx context.Context, in *AddStudentPackageCourseRequest, opts ...grpc.CallOption) (*AddStudentPackageCourseResponse, error) {
	out := new(AddStudentPackageCourseResponse)
	err := c.cc.Invoke(ctx, "/fatima.v1.SubscriptionModifierService/AddStudentPackageCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionModifierServiceClient) EditTimeStudentPackage(ctx context.Context, in *EditTimeStudentPackageRequest, opts ...grpc.CallOption) (*EditTimeStudentPackageResponse, error) {
	out := new(EditTimeStudentPackageResponse)
	err := c.cc.Invoke(ctx, "/fatima.v1.SubscriptionModifierService/EditTimeStudentPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionModifierServiceClient) RegisterStudentClass(ctx context.Context, in *RegisterStudentClassRequest, opts ...grpc.CallOption) (*RegisterStudentClassResponse, error) {
	out := new(RegisterStudentClassResponse)
	err := c.cc.Invoke(ctx, "/fatima.v1.SubscriptionModifierService/RegisterStudentClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionModifierServiceClient) ListStudentPackage(ctx context.Context, in *ListStudentPackageRequest, opts ...grpc.CallOption) (*ListStudentPackageResponse, error) {
	out := new(ListStudentPackageResponse)
	err := c.cc.Invoke(ctx, "/fatima.v1.SubscriptionModifierService/ListStudentPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionModifierServiceClient) ListStudentPackageV2(ctx context.Context, in *ListStudentPackageV2Request, opts ...grpc.CallOption) (SubscriptionModifierService_ListStudentPackageV2Client, error) {
	stream, err := c.cc.NewStream(ctx, &_SubscriptionModifierService_serviceDesc.Streams[0], "/fatima.v1.SubscriptionModifierService/ListStudentPackageV2", opts...)
	if err != nil {
		return nil, err
	}
	x := &subscriptionModifierServiceListStudentPackageV2Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SubscriptionModifierService_ListStudentPackageV2Client interface {
	Recv() (*ListStudentPackageV2Response, error)
	grpc.ClientStream
}

type subscriptionModifierServiceListStudentPackageV2Client struct {
	grpc.ClientStream
}

func (x *subscriptionModifierServiceListStudentPackageV2Client) Recv() (*ListStudentPackageV2Response, error) {
	m := new(ListStudentPackageV2Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *subscriptionModifierServiceClient) WrapperRegisterStudentClass(ctx context.Context, in *WrapperRegisterStudentClassRequest, opts ...grpc.CallOption) (*WrapperRegisterStudentClassResponse, error) {
	out := new(WrapperRegisterStudentClassResponse)
	err := c.cc.Invoke(ctx, "/fatima.v1.SubscriptionModifierService/WrapperRegisterStudentClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionModifierServiceClient) RetrieveStudentPackagesUnderCourse(ctx context.Context, in *RetrieveStudentPackagesUnderCourseRequest, opts ...grpc.CallOption) (*RetrieveStudentPackagesUnderCourseResponse, error) {
	out := new(RetrieveStudentPackagesUnderCourseResponse)
	err := c.cc.Invoke(ctx, "/fatima.v1.SubscriptionModifierService/RetrieveStudentPackagesUnderCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriptionModifierServiceServer is the server API for SubscriptionModifierService service.
// All implementations should embed UnimplementedSubscriptionModifierServiceServer
// for forward compatibility
type SubscriptionModifierServiceServer interface {
	CreatePackage(context.Context, *CreatePackageRequest) (*CreatePackageResponse, error)
	ToggleActivePackage(context.Context, *ToggleActivePackageRequest) (*ToggleActivePackageResponse, error)
	AddStudentPackage(context.Context, *AddStudentPackageRequest) (*AddStudentPackageResponse, error)
	ToggleActiveStudentPackage(context.Context, *ToggleActiveStudentPackageRequest) (*ToggleActiveStudentPackageResponse, error)
	AddStudentPackageCourse(context.Context, *AddStudentPackageCourseRequest) (*AddStudentPackageCourseResponse, error)
	EditTimeStudentPackage(context.Context, *EditTimeStudentPackageRequest) (*EditTimeStudentPackageResponse, error)
	RegisterStudentClass(context.Context, *RegisterStudentClassRequest) (*RegisterStudentClassResponse, error)
	ListStudentPackage(context.Context, *ListStudentPackageRequest) (*ListStudentPackageResponse, error)
	ListStudentPackageV2(*ListStudentPackageV2Request, SubscriptionModifierService_ListStudentPackageV2Server) error
	WrapperRegisterStudentClass(context.Context, *WrapperRegisterStudentClassRequest) (*WrapperRegisterStudentClassResponse, error)
	RetrieveStudentPackagesUnderCourse(context.Context, *RetrieveStudentPackagesUnderCourseRequest) (*RetrieveStudentPackagesUnderCourseResponse, error)
}

// UnimplementedSubscriptionModifierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSubscriptionModifierServiceServer struct {
}

func (UnimplementedSubscriptionModifierServiceServer) CreatePackage(context.Context, *CreatePackageRequest) (*CreatePackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePackage not implemented")
}
func (UnimplementedSubscriptionModifierServiceServer) ToggleActivePackage(context.Context, *ToggleActivePackageRequest) (*ToggleActivePackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleActivePackage not implemented")
}
func (UnimplementedSubscriptionModifierServiceServer) AddStudentPackage(context.Context, *AddStudentPackageRequest) (*AddStudentPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStudentPackage not implemented")
}
func (UnimplementedSubscriptionModifierServiceServer) ToggleActiveStudentPackage(context.Context, *ToggleActiveStudentPackageRequest) (*ToggleActiveStudentPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleActiveStudentPackage not implemented")
}
func (UnimplementedSubscriptionModifierServiceServer) AddStudentPackageCourse(context.Context, *AddStudentPackageCourseRequest) (*AddStudentPackageCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStudentPackageCourse not implemented")
}
func (UnimplementedSubscriptionModifierServiceServer) EditTimeStudentPackage(context.Context, *EditTimeStudentPackageRequest) (*EditTimeStudentPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditTimeStudentPackage not implemented")
}
func (UnimplementedSubscriptionModifierServiceServer) RegisterStudentClass(context.Context, *RegisterStudentClassRequest) (*RegisterStudentClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterStudentClass not implemented")
}
func (UnimplementedSubscriptionModifierServiceServer) ListStudentPackage(context.Context, *ListStudentPackageRequest) (*ListStudentPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStudentPackage not implemented")
}
func (UnimplementedSubscriptionModifierServiceServer) ListStudentPackageV2(*ListStudentPackageV2Request, SubscriptionModifierService_ListStudentPackageV2Server) error {
	return status.Errorf(codes.Unimplemented, "method ListStudentPackageV2 not implemented")
}
func (UnimplementedSubscriptionModifierServiceServer) WrapperRegisterStudentClass(context.Context, *WrapperRegisterStudentClassRequest) (*WrapperRegisterStudentClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapperRegisterStudentClass not implemented")
}
func (UnimplementedSubscriptionModifierServiceServer) RetrieveStudentPackagesUnderCourse(context.Context, *RetrieveStudentPackagesUnderCourseRequest) (*RetrieveStudentPackagesUnderCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveStudentPackagesUnderCourse not implemented")
}

// UnsafeSubscriptionModifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionModifierServiceServer will
// result in compilation errors.
type UnsafeSubscriptionModifierServiceServer interface {
	mustEmbedUnimplementedSubscriptionModifierServiceServer()
}

func RegisterSubscriptionModifierServiceServer(s grpc.ServiceRegistrar, srv SubscriptionModifierServiceServer) {
	s.RegisterService(&_SubscriptionModifierService_serviceDesc, srv)
}

func _SubscriptionModifierService_CreatePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionModifierServiceServer).CreatePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fatima.v1.SubscriptionModifierService/CreatePackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionModifierServiceServer).CreatePackage(ctx, req.(*CreatePackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionModifierService_ToggleActivePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleActivePackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionModifierServiceServer).ToggleActivePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fatima.v1.SubscriptionModifierService/ToggleActivePackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionModifierServiceServer).ToggleActivePackage(ctx, req.(*ToggleActivePackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionModifierService_AddStudentPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStudentPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionModifierServiceServer).AddStudentPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fatima.v1.SubscriptionModifierService/AddStudentPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionModifierServiceServer).AddStudentPackage(ctx, req.(*AddStudentPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionModifierService_ToggleActiveStudentPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleActiveStudentPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionModifierServiceServer).ToggleActiveStudentPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fatima.v1.SubscriptionModifierService/ToggleActiveStudentPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionModifierServiceServer).ToggleActiveStudentPackage(ctx, req.(*ToggleActiveStudentPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionModifierService_AddStudentPackageCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStudentPackageCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionModifierServiceServer).AddStudentPackageCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fatima.v1.SubscriptionModifierService/AddStudentPackageCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionModifierServiceServer).AddStudentPackageCourse(ctx, req.(*AddStudentPackageCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionModifierService_EditTimeStudentPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditTimeStudentPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionModifierServiceServer).EditTimeStudentPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fatima.v1.SubscriptionModifierService/EditTimeStudentPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionModifierServiceServer).EditTimeStudentPackage(ctx, req.(*EditTimeStudentPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionModifierService_RegisterStudentClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterStudentClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionModifierServiceServer).RegisterStudentClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fatima.v1.SubscriptionModifierService/RegisterStudentClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionModifierServiceServer).RegisterStudentClass(ctx, req.(*RegisterStudentClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionModifierService_ListStudentPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStudentPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionModifierServiceServer).ListStudentPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fatima.v1.SubscriptionModifierService/ListStudentPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionModifierServiceServer).ListStudentPackage(ctx, req.(*ListStudentPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionModifierService_ListStudentPackageV2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListStudentPackageV2Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscriptionModifierServiceServer).ListStudentPackageV2(m, &subscriptionModifierServiceListStudentPackageV2Server{stream})
}

type SubscriptionModifierService_ListStudentPackageV2Server interface {
	Send(*ListStudentPackageV2Response) error
	grpc.ServerStream
}

type subscriptionModifierServiceListStudentPackageV2Server struct {
	grpc.ServerStream
}

func (x *subscriptionModifierServiceListStudentPackageV2Server) Send(m *ListStudentPackageV2Response) error {
	return x.ServerStream.SendMsg(m)
}

func _SubscriptionModifierService_WrapperRegisterStudentClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WrapperRegisterStudentClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionModifierServiceServer).WrapperRegisterStudentClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fatima.v1.SubscriptionModifierService/WrapperRegisterStudentClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionModifierServiceServer).WrapperRegisterStudentClass(ctx, req.(*WrapperRegisterStudentClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionModifierService_RetrieveStudentPackagesUnderCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveStudentPackagesUnderCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionModifierServiceServer).RetrieveStudentPackagesUnderCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fatima.v1.SubscriptionModifierService/RetrieveStudentPackagesUnderCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionModifierServiceServer).RetrieveStudentPackagesUnderCourse(ctx, req.(*RetrieveStudentPackagesUnderCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubscriptionModifierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fatima.v1.SubscriptionModifierService",
	HandlerType: (*SubscriptionModifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePackage",
			Handler:    _SubscriptionModifierService_CreatePackage_Handler,
		},
		{
			MethodName: "ToggleActivePackage",
			Handler:    _SubscriptionModifierService_ToggleActivePackage_Handler,
		},
		{
			MethodName: "AddStudentPackage",
			Handler:    _SubscriptionModifierService_AddStudentPackage_Handler,
		},
		{
			MethodName: "ToggleActiveStudentPackage",
			Handler:    _SubscriptionModifierService_ToggleActiveStudentPackage_Handler,
		},
		{
			MethodName: "AddStudentPackageCourse",
			Handler:    _SubscriptionModifierService_AddStudentPackageCourse_Handler,
		},
		{
			MethodName: "EditTimeStudentPackage",
			Handler:    _SubscriptionModifierService_EditTimeStudentPackage_Handler,
		},
		{
			MethodName: "RegisterStudentClass",
			Handler:    _SubscriptionModifierService_RegisterStudentClass_Handler,
		},
		{
			MethodName: "ListStudentPackage",
			Handler:    _SubscriptionModifierService_ListStudentPackage_Handler,
		},
		{
			MethodName: "WrapperRegisterStudentClass",
			Handler:    _SubscriptionModifierService_WrapperRegisterStudentClass_Handler,
		},
		{
			MethodName: "RetrieveStudentPackagesUnderCourse",
			Handler:    _SubscriptionModifierService_RetrieveStudentPackagesUnderCourse_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListStudentPackageV2",
			Handler:       _SubscriptionModifierService_ListStudentPackageV2_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fatima/v1/subscription.proto",
}
