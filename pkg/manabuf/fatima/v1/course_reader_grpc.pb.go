// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package fpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CourseReaderServiceClient is the client API for CourseReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourseReaderServiceClient interface {
	ListStudentByCourse(ctx context.Context, in *ListStudentByCourseRequest, opts ...grpc.CallOption) (*ListStudentByCourseResponse, error)
}

type courseReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourseReaderServiceClient(cc grpc.ClientConnInterface) CourseReaderServiceClient {
	return &courseReaderServiceClient{cc}
}

func (c *courseReaderServiceClient) ListStudentByCourse(ctx context.Context, in *ListStudentByCourseRequest, opts ...grpc.CallOption) (*ListStudentByCourseResponse, error) {
	out := new(ListStudentByCourseResponse)
	err := c.cc.Invoke(ctx, "/fatima.v1.CourseReaderService/ListStudentByCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourseReaderServiceServer is the server API for CourseReaderService service.
// All implementations should embed UnimplementedCourseReaderServiceServer
// for forward compatibility
type CourseReaderServiceServer interface {
	ListStudentByCourse(context.Context, *ListStudentByCourseRequest) (*ListStudentByCourseResponse, error)
}

// UnimplementedCourseReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCourseReaderServiceServer struct {
}

func (UnimplementedCourseReaderServiceServer) ListStudentByCourse(context.Context, *ListStudentByCourseRequest) (*ListStudentByCourseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStudentByCourse not implemented")
}

// UnsafeCourseReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourseReaderServiceServer will
// result in compilation errors.
type UnsafeCourseReaderServiceServer interface {
	mustEmbedUnimplementedCourseReaderServiceServer()
}

func RegisterCourseReaderServiceServer(s grpc.ServiceRegistrar, srv CourseReaderServiceServer) {
	s.RegisterService(&_CourseReaderService_serviceDesc, srv)
}

func _CourseReaderService_ListStudentByCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStudentByCourseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourseReaderServiceServer).ListStudentByCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fatima.v1.CourseReaderService/ListStudentByCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourseReaderServiceServer).ListStudentByCourse(ctx, req.(*ListStudentByCourseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CourseReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fatima.v1.CourseReaderService",
	HandlerType: (*CourseReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListStudentByCourse",
			Handler:    _CourseReaderService_ListStudentByCourse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fatima/v1/course_reader.proto",
}
