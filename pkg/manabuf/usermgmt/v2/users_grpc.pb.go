// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package upb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UserModifierServiceClient is the client API for UserModifierService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserModifierServiceClient interface {
	// Deprecated: Do not use.
	CreateStudent(ctx context.Context, in *CreateStudentRequest, opts ...grpc.CallOption) (*CreateStudentResponse, error)
	CreateParentsAndAssignToStudent(ctx context.Context, in *CreateParentsAndAssignToStudentRequest, opts ...grpc.CallOption) (*CreateParentsAndAssignToStudentResponse, error)
	ImportParentsAndAssignToStudent(ctx context.Context, in *ImportParentsAndAssignToStudentRequest, opts ...grpc.CallOption) (*ImportParentsAndAssignToStudentResponse, error)
	// Deprecated: Do not use.
	UpdateStudent(ctx context.Context, in *UpdateStudentRequest, opts ...grpc.CallOption) (*UpdateStudentResponse, error)
	UpdateParentsAndFamilyRelationship(ctx context.Context, in *UpdateParentsAndFamilyRelationshipRequest, opts ...grpc.CallOption) (*UpdateParentsAndFamilyRelationshipResponse, error)
	ReissueUserPassword(ctx context.Context, in *ReissueUserPasswordRequest, opts ...grpc.CallOption) (*ReissueUserPasswordResponse, error)
	UpsertStudentCoursePackage(ctx context.Context, in *UpsertStudentCoursePackageRequest, opts ...grpc.CallOption) (*UpsertStudentCoursePackageResponse, error)
	RemoveParentFromStudent(ctx context.Context, in *RemoveParentFromStudentRequest, opts ...grpc.CallOption) (*RemoveParentFromStudentResponse, error)
	UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error)
	UpdateUserDeviceToken(ctx context.Context, in *UpdateUserDeviceTokenRequest, opts ...grpc.CallOption) (*UpdateUserDeviceTokenResponse, error)
	UpdateUserLastLoginDate(ctx context.Context, in *UpdateUserLastLoginDateRequest, opts ...grpc.CallOption) (*UpdateUserLastLoginDateResponse, error)
	GenerateImportParentsAndAssignToStudentTemplate(ctx context.Context, in *GenerateImportParentsAndAssignToStudentTemplateRequest, opts ...grpc.CallOption) (*GenerateImportParentsAndAssignToStudentTemplateResponse, error)
}

type userModifierServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserModifierServiceClient(cc grpc.ClientConnInterface) UserModifierServiceClient {
	return &userModifierServiceClient{cc}
}

// Deprecated: Do not use.
func (c *userModifierServiceClient) CreateStudent(ctx context.Context, in *CreateStudentRequest, opts ...grpc.CallOption) (*CreateStudentResponse, error) {
	out := new(CreateStudentResponse)
	err := c.cc.Invoke(ctx, "/usermgmt.v2.UserModifierService/CreateStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userModifierServiceClient) CreateParentsAndAssignToStudent(ctx context.Context, in *CreateParentsAndAssignToStudentRequest, opts ...grpc.CallOption) (*CreateParentsAndAssignToStudentResponse, error) {
	out := new(CreateParentsAndAssignToStudentResponse)
	err := c.cc.Invoke(ctx, "/usermgmt.v2.UserModifierService/CreateParentsAndAssignToStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userModifierServiceClient) ImportParentsAndAssignToStudent(ctx context.Context, in *ImportParentsAndAssignToStudentRequest, opts ...grpc.CallOption) (*ImportParentsAndAssignToStudentResponse, error) {
	out := new(ImportParentsAndAssignToStudentResponse)
	err := c.cc.Invoke(ctx, "/usermgmt.v2.UserModifierService/ImportParentsAndAssignToStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *userModifierServiceClient) UpdateStudent(ctx context.Context, in *UpdateStudentRequest, opts ...grpc.CallOption) (*UpdateStudentResponse, error) {
	out := new(UpdateStudentResponse)
	err := c.cc.Invoke(ctx, "/usermgmt.v2.UserModifierService/UpdateStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userModifierServiceClient) UpdateParentsAndFamilyRelationship(ctx context.Context, in *UpdateParentsAndFamilyRelationshipRequest, opts ...grpc.CallOption) (*UpdateParentsAndFamilyRelationshipResponse, error) {
	out := new(UpdateParentsAndFamilyRelationshipResponse)
	err := c.cc.Invoke(ctx, "/usermgmt.v2.UserModifierService/UpdateParentsAndFamilyRelationship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userModifierServiceClient) ReissueUserPassword(ctx context.Context, in *ReissueUserPasswordRequest, opts ...grpc.CallOption) (*ReissueUserPasswordResponse, error) {
	out := new(ReissueUserPasswordResponse)
	err := c.cc.Invoke(ctx, "/usermgmt.v2.UserModifierService/ReissueUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userModifierServiceClient) UpsertStudentCoursePackage(ctx context.Context, in *UpsertStudentCoursePackageRequest, opts ...grpc.CallOption) (*UpsertStudentCoursePackageResponse, error) {
	out := new(UpsertStudentCoursePackageResponse)
	err := c.cc.Invoke(ctx, "/usermgmt.v2.UserModifierService/UpsertStudentCoursePackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userModifierServiceClient) RemoveParentFromStudent(ctx context.Context, in *RemoveParentFromStudentRequest, opts ...grpc.CallOption) (*RemoveParentFromStudentResponse, error) {
	out := new(RemoveParentFromStudentResponse)
	err := c.cc.Invoke(ctx, "/usermgmt.v2.UserModifierService/RemoveParentFromStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userModifierServiceClient) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error) {
	out := new(UpdateUserProfileResponse)
	err := c.cc.Invoke(ctx, "/usermgmt.v2.UserModifierService/UpdateUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userModifierServiceClient) UpdateUserDeviceToken(ctx context.Context, in *UpdateUserDeviceTokenRequest, opts ...grpc.CallOption) (*UpdateUserDeviceTokenResponse, error) {
	out := new(UpdateUserDeviceTokenResponse)
	err := c.cc.Invoke(ctx, "/usermgmt.v2.UserModifierService/UpdateUserDeviceToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userModifierServiceClient) UpdateUserLastLoginDate(ctx context.Context, in *UpdateUserLastLoginDateRequest, opts ...grpc.CallOption) (*UpdateUserLastLoginDateResponse, error) {
	out := new(UpdateUserLastLoginDateResponse)
	err := c.cc.Invoke(ctx, "/usermgmt.v2.UserModifierService/UpdateUserLastLoginDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userModifierServiceClient) GenerateImportParentsAndAssignToStudentTemplate(ctx context.Context, in *GenerateImportParentsAndAssignToStudentTemplateRequest, opts ...grpc.CallOption) (*GenerateImportParentsAndAssignToStudentTemplateResponse, error) {
	out := new(GenerateImportParentsAndAssignToStudentTemplateResponse)
	err := c.cc.Invoke(ctx, "/usermgmt.v2.UserModifierService/GenerateImportParentsAndAssignToStudentTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserModifierServiceServer is the server API for UserModifierService service.
// All implementations should embed UnimplementedUserModifierServiceServer
// for forward compatibility
type UserModifierServiceServer interface {
	// Deprecated: Do not use.
	CreateStudent(context.Context, *CreateStudentRequest) (*CreateStudentResponse, error)
	CreateParentsAndAssignToStudent(context.Context, *CreateParentsAndAssignToStudentRequest) (*CreateParentsAndAssignToStudentResponse, error)
	ImportParentsAndAssignToStudent(context.Context, *ImportParentsAndAssignToStudentRequest) (*ImportParentsAndAssignToStudentResponse, error)
	// Deprecated: Do not use.
	UpdateStudent(context.Context, *UpdateStudentRequest) (*UpdateStudentResponse, error)
	UpdateParentsAndFamilyRelationship(context.Context, *UpdateParentsAndFamilyRelationshipRequest) (*UpdateParentsAndFamilyRelationshipResponse, error)
	ReissueUserPassword(context.Context, *ReissueUserPasswordRequest) (*ReissueUserPasswordResponse, error)
	UpsertStudentCoursePackage(context.Context, *UpsertStudentCoursePackageRequest) (*UpsertStudentCoursePackageResponse, error)
	RemoveParentFromStudent(context.Context, *RemoveParentFromStudentRequest) (*RemoveParentFromStudentResponse, error)
	UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error)
	UpdateUserDeviceToken(context.Context, *UpdateUserDeviceTokenRequest) (*UpdateUserDeviceTokenResponse, error)
	UpdateUserLastLoginDate(context.Context, *UpdateUserLastLoginDateRequest) (*UpdateUserLastLoginDateResponse, error)
	GenerateImportParentsAndAssignToStudentTemplate(context.Context, *GenerateImportParentsAndAssignToStudentTemplateRequest) (*GenerateImportParentsAndAssignToStudentTemplateResponse, error)
}

// UnimplementedUserModifierServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUserModifierServiceServer struct {
}

func (UnimplementedUserModifierServiceServer) CreateStudent(context.Context, *CreateStudentRequest) (*CreateStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudent not implemented")
}
func (UnimplementedUserModifierServiceServer) CreateParentsAndAssignToStudent(context.Context, *CreateParentsAndAssignToStudentRequest) (*CreateParentsAndAssignToStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateParentsAndAssignToStudent not implemented")
}
func (UnimplementedUserModifierServiceServer) ImportParentsAndAssignToStudent(context.Context, *ImportParentsAndAssignToStudentRequest) (*ImportParentsAndAssignToStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportParentsAndAssignToStudent not implemented")
}
func (UnimplementedUserModifierServiceServer) UpdateStudent(context.Context, *UpdateStudentRequest) (*UpdateStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudent not implemented")
}
func (UnimplementedUserModifierServiceServer) UpdateParentsAndFamilyRelationship(context.Context, *UpdateParentsAndFamilyRelationshipRequest) (*UpdateParentsAndFamilyRelationshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParentsAndFamilyRelationship not implemented")
}
func (UnimplementedUserModifierServiceServer) ReissueUserPassword(context.Context, *ReissueUserPasswordRequest) (*ReissueUserPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReissueUserPassword not implemented")
}
func (UnimplementedUserModifierServiceServer) UpsertStudentCoursePackage(context.Context, *UpsertStudentCoursePackageRequest) (*UpsertStudentCoursePackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertStudentCoursePackage not implemented")
}
func (UnimplementedUserModifierServiceServer) RemoveParentFromStudent(context.Context, *RemoveParentFromStudentRequest) (*RemoveParentFromStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveParentFromStudent not implemented")
}
func (UnimplementedUserModifierServiceServer) UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (UnimplementedUserModifierServiceServer) UpdateUserDeviceToken(context.Context, *UpdateUserDeviceTokenRequest) (*UpdateUserDeviceTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserDeviceToken not implemented")
}
func (UnimplementedUserModifierServiceServer) UpdateUserLastLoginDate(context.Context, *UpdateUserLastLoginDateRequest) (*UpdateUserLastLoginDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserLastLoginDate not implemented")
}
func (UnimplementedUserModifierServiceServer) GenerateImportParentsAndAssignToStudentTemplate(context.Context, *GenerateImportParentsAndAssignToStudentTemplateRequest) (*GenerateImportParentsAndAssignToStudentTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateImportParentsAndAssignToStudentTemplate not implemented")
}

// UnsafeUserModifierServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserModifierServiceServer will
// result in compilation errors.
type UnsafeUserModifierServiceServer interface {
	mustEmbedUnimplementedUserModifierServiceServer()
}

func RegisterUserModifierServiceServer(s grpc.ServiceRegistrar, srv UserModifierServiceServer) {
	s.RegisterService(&_UserModifierService_serviceDesc, srv)
}

func _UserModifierService_CreateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserModifierServiceServer).CreateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.v2.UserModifierService/CreateStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserModifierServiceServer).CreateStudent(ctx, req.(*CreateStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserModifierService_CreateParentsAndAssignToStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateParentsAndAssignToStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserModifierServiceServer).CreateParentsAndAssignToStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.v2.UserModifierService/CreateParentsAndAssignToStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserModifierServiceServer).CreateParentsAndAssignToStudent(ctx, req.(*CreateParentsAndAssignToStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserModifierService_ImportParentsAndAssignToStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportParentsAndAssignToStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserModifierServiceServer).ImportParentsAndAssignToStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.v2.UserModifierService/ImportParentsAndAssignToStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserModifierServiceServer).ImportParentsAndAssignToStudent(ctx, req.(*ImportParentsAndAssignToStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserModifierService_UpdateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserModifierServiceServer).UpdateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.v2.UserModifierService/UpdateStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserModifierServiceServer).UpdateStudent(ctx, req.(*UpdateStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserModifierService_UpdateParentsAndFamilyRelationship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateParentsAndFamilyRelationshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserModifierServiceServer).UpdateParentsAndFamilyRelationship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.v2.UserModifierService/UpdateParentsAndFamilyRelationship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserModifierServiceServer).UpdateParentsAndFamilyRelationship(ctx, req.(*UpdateParentsAndFamilyRelationshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserModifierService_ReissueUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReissueUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserModifierServiceServer).ReissueUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.v2.UserModifierService/ReissueUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserModifierServiceServer).ReissueUserPassword(ctx, req.(*ReissueUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserModifierService_UpsertStudentCoursePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertStudentCoursePackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserModifierServiceServer).UpsertStudentCoursePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.v2.UserModifierService/UpsertStudentCoursePackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserModifierServiceServer).UpsertStudentCoursePackage(ctx, req.(*UpsertStudentCoursePackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserModifierService_RemoveParentFromStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveParentFromStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserModifierServiceServer).RemoveParentFromStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.v2.UserModifierService/RemoveParentFromStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserModifierServiceServer).RemoveParentFromStudent(ctx, req.(*RemoveParentFromStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserModifierService_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserModifierServiceServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.v2.UserModifierService/UpdateUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserModifierServiceServer).UpdateUserProfile(ctx, req.(*UpdateUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserModifierService_UpdateUserDeviceToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserDeviceTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserModifierServiceServer).UpdateUserDeviceToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.v2.UserModifierService/UpdateUserDeviceToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserModifierServiceServer).UpdateUserDeviceToken(ctx, req.(*UpdateUserDeviceTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserModifierService_UpdateUserLastLoginDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserLastLoginDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserModifierServiceServer).UpdateUserLastLoginDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.v2.UserModifierService/UpdateUserLastLoginDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserModifierServiceServer).UpdateUserLastLoginDate(ctx, req.(*UpdateUserLastLoginDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserModifierService_GenerateImportParentsAndAssignToStudentTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateImportParentsAndAssignToStudentTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserModifierServiceServer).GenerateImportParentsAndAssignToStudentTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.v2.UserModifierService/GenerateImportParentsAndAssignToStudentTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserModifierServiceServer).GenerateImportParentsAndAssignToStudentTemplate(ctx, req.(*GenerateImportParentsAndAssignToStudentTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserModifierService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "usermgmt.v2.UserModifierService",
	HandlerType: (*UserModifierServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStudent",
			Handler:    _UserModifierService_CreateStudent_Handler,
		},
		{
			MethodName: "CreateParentsAndAssignToStudent",
			Handler:    _UserModifierService_CreateParentsAndAssignToStudent_Handler,
		},
		{
			MethodName: "ImportParentsAndAssignToStudent",
			Handler:    _UserModifierService_ImportParentsAndAssignToStudent_Handler,
		},
		{
			MethodName: "UpdateStudent",
			Handler:    _UserModifierService_UpdateStudent_Handler,
		},
		{
			MethodName: "UpdateParentsAndFamilyRelationship",
			Handler:    _UserModifierService_UpdateParentsAndFamilyRelationship_Handler,
		},
		{
			MethodName: "ReissueUserPassword",
			Handler:    _UserModifierService_ReissueUserPassword_Handler,
		},
		{
			MethodName: "UpsertStudentCoursePackage",
			Handler:    _UserModifierService_UpsertStudentCoursePackage_Handler,
		},
		{
			MethodName: "RemoveParentFromStudent",
			Handler:    _UserModifierService_RemoveParentFromStudent_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _UserModifierService_UpdateUserProfile_Handler,
		},
		{
			MethodName: "UpdateUserDeviceToken",
			Handler:    _UserModifierService_UpdateUserDeviceToken_Handler,
		},
		{
			MethodName: "UpdateUserLastLoginDate",
			Handler:    _UserModifierService_UpdateUserLastLoginDate_Handler,
		},
		{
			MethodName: "GenerateImportParentsAndAssignToStudentTemplate",
			Handler:    _UserModifierService_GenerateImportParentsAndAssignToStudentTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "usermgmt/v2/users.proto",
}

// UserReaderServiceClient is the client API for UserReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserReaderServiceClient interface {
	SearchBasicProfile(ctx context.Context, in *SearchBasicProfileRequest, opts ...grpc.CallOption) (*SearchBasicProfileResponse, error)
	RetrieveStudentAssociatedToParentAccount(ctx context.Context, in *RetrieveStudentAssociatedToParentAccountRequest, opts ...grpc.CallOption) (*RetrieveStudentAssociatedToParentAccountResponse, error)
	GetBasicProfile(ctx context.Context, in *GetBasicProfileRequest, opts ...grpc.CallOption) (*GetBasicProfileResponse, error)
}

type userReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserReaderServiceClient(cc grpc.ClientConnInterface) UserReaderServiceClient {
	return &userReaderServiceClient{cc}
}

func (c *userReaderServiceClient) SearchBasicProfile(ctx context.Context, in *SearchBasicProfileRequest, opts ...grpc.CallOption) (*SearchBasicProfileResponse, error) {
	out := new(SearchBasicProfileResponse)
	err := c.cc.Invoke(ctx, "/usermgmt.v2.UserReaderService/SearchBasicProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userReaderServiceClient) RetrieveStudentAssociatedToParentAccount(ctx context.Context, in *RetrieveStudentAssociatedToParentAccountRequest, opts ...grpc.CallOption) (*RetrieveStudentAssociatedToParentAccountResponse, error) {
	out := new(RetrieveStudentAssociatedToParentAccountResponse)
	err := c.cc.Invoke(ctx, "/usermgmt.v2.UserReaderService/RetrieveStudentAssociatedToParentAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userReaderServiceClient) GetBasicProfile(ctx context.Context, in *GetBasicProfileRequest, opts ...grpc.CallOption) (*GetBasicProfileResponse, error) {
	out := new(GetBasicProfileResponse)
	err := c.cc.Invoke(ctx, "/usermgmt.v2.UserReaderService/GetBasicProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserReaderServiceServer is the server API for UserReaderService service.
// All implementations should embed UnimplementedUserReaderServiceServer
// for forward compatibility
type UserReaderServiceServer interface {
	SearchBasicProfile(context.Context, *SearchBasicProfileRequest) (*SearchBasicProfileResponse, error)
	RetrieveStudentAssociatedToParentAccount(context.Context, *RetrieveStudentAssociatedToParentAccountRequest) (*RetrieveStudentAssociatedToParentAccountResponse, error)
	GetBasicProfile(context.Context, *GetBasicProfileRequest) (*GetBasicProfileResponse, error)
}

// UnimplementedUserReaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUserReaderServiceServer struct {
}

func (UnimplementedUserReaderServiceServer) SearchBasicProfile(context.Context, *SearchBasicProfileRequest) (*SearchBasicProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBasicProfile not implemented")
}
func (UnimplementedUserReaderServiceServer) RetrieveStudentAssociatedToParentAccount(context.Context, *RetrieveStudentAssociatedToParentAccountRequest) (*RetrieveStudentAssociatedToParentAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveStudentAssociatedToParentAccount not implemented")
}
func (UnimplementedUserReaderServiceServer) GetBasicProfile(context.Context, *GetBasicProfileRequest) (*GetBasicProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasicProfile not implemented")
}

// UnsafeUserReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserReaderServiceServer will
// result in compilation errors.
type UnsafeUserReaderServiceServer interface {
	mustEmbedUnimplementedUserReaderServiceServer()
}

func RegisterUserReaderServiceServer(s grpc.ServiceRegistrar, srv UserReaderServiceServer) {
	s.RegisterService(&_UserReaderService_serviceDesc, srv)
}

func _UserReaderService_SearchBasicProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBasicProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserReaderServiceServer).SearchBasicProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.v2.UserReaderService/SearchBasicProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserReaderServiceServer).SearchBasicProfile(ctx, req.(*SearchBasicProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserReaderService_RetrieveStudentAssociatedToParentAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveStudentAssociatedToParentAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserReaderServiceServer).RetrieveStudentAssociatedToParentAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.v2.UserReaderService/RetrieveStudentAssociatedToParentAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserReaderServiceServer).RetrieveStudentAssociatedToParentAccount(ctx, req.(*RetrieveStudentAssociatedToParentAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserReaderService_GetBasicProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBasicProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserReaderServiceServer).GetBasicProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.v2.UserReaderService/GetBasicProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserReaderServiceServer).GetBasicProfile(ctx, req.(*GetBasicProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserReaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "usermgmt.v2.UserReaderService",
	HandlerType: (*UserReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchBasicProfile",
			Handler:    _UserReaderService_SearchBasicProfile_Handler,
		},
		{
			MethodName: "RetrieveStudentAssociatedToParentAccount",
			Handler:    _UserReaderService_RetrieveStudentAssociatedToParentAccount_Handler,
		},
		{
			MethodName: "GetBasicProfile",
			Handler:    _UserReaderService_GetBasicProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "usermgmt/v2/users.proto",
}

// StaffServiceClient is the client API for StaffService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StaffServiceClient interface {
	CreateStaff(ctx context.Context, in *CreateStaffRequest, opts ...grpc.CallOption) (*CreateStaffResponse, error)
	UpdateStaff(ctx context.Context, in *UpdateStaffRequest, opts ...grpc.CallOption) (*UpdateStaffResponse, error)
	UpdateStaffSetting(ctx context.Context, in *UpdateStaffSettingRequest, opts ...grpc.CallOption) (*UpdateStaffSettingResponse, error)
}

type staffServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStaffServiceClient(cc grpc.ClientConnInterface) StaffServiceClient {
	return &staffServiceClient{cc}
}

func (c *staffServiceClient) CreateStaff(ctx context.Context, in *CreateStaffRequest, opts ...grpc.CallOption) (*CreateStaffResponse, error) {
	out := new(CreateStaffResponse)
	err := c.cc.Invoke(ctx, "/usermgmt.v2.StaffService/CreateStaff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) UpdateStaff(ctx context.Context, in *UpdateStaffRequest, opts ...grpc.CallOption) (*UpdateStaffResponse, error) {
	out := new(UpdateStaffResponse)
	err := c.cc.Invoke(ctx, "/usermgmt.v2.StaffService/UpdateStaff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) UpdateStaffSetting(ctx context.Context, in *UpdateStaffSettingRequest, opts ...grpc.CallOption) (*UpdateStaffSettingResponse, error) {
	out := new(UpdateStaffSettingResponse)
	err := c.cc.Invoke(ctx, "/usermgmt.v2.StaffService/UpdateStaffSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StaffServiceServer is the server API for StaffService service.
// All implementations should embed UnimplementedStaffServiceServer
// for forward compatibility
type StaffServiceServer interface {
	CreateStaff(context.Context, *CreateStaffRequest) (*CreateStaffResponse, error)
	UpdateStaff(context.Context, *UpdateStaffRequest) (*UpdateStaffResponse, error)
	UpdateStaffSetting(context.Context, *UpdateStaffSettingRequest) (*UpdateStaffSettingResponse, error)
}

// UnimplementedStaffServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStaffServiceServer struct {
}

func (UnimplementedStaffServiceServer) CreateStaff(context.Context, *CreateStaffRequest) (*CreateStaffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStaff not implemented")
}
func (UnimplementedStaffServiceServer) UpdateStaff(context.Context, *UpdateStaffRequest) (*UpdateStaffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStaff not implemented")
}
func (UnimplementedStaffServiceServer) UpdateStaffSetting(context.Context, *UpdateStaffSettingRequest) (*UpdateStaffSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStaffSetting not implemented")
}

// UnsafeStaffServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StaffServiceServer will
// result in compilation errors.
type UnsafeStaffServiceServer interface {
	mustEmbedUnimplementedStaffServiceServer()
}

func RegisterStaffServiceServer(s grpc.ServiceRegistrar, srv StaffServiceServer) {
	s.RegisterService(&_StaffService_serviceDesc, srv)
}

func _StaffService_CreateStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).CreateStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.v2.StaffService/CreateStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).CreateStaff(ctx, req.(*CreateStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_UpdateStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).UpdateStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.v2.StaffService/UpdateStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).UpdateStaff(ctx, req.(*UpdateStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_UpdateStaffSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStaffSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).UpdateStaffSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.v2.StaffService/UpdateStaffSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).UpdateStaffSetting(ctx, req.(*UpdateStaffSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StaffService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "usermgmt.v2.StaffService",
	HandlerType: (*StaffServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStaff",
			Handler:    _StaffService_CreateStaff_Handler,
		},
		{
			MethodName: "UpdateStaff",
			Handler:    _StaffService_UpdateStaff_Handler,
		},
		{
			MethodName: "UpdateStaffSetting",
			Handler:    _StaffService_UpdateStaffSetting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "usermgmt/v2/users.proto",
}
