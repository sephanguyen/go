// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package upb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// StudentServiceClient is the client API for StudentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentServiceClient interface {
	GetStudentProfile(ctx context.Context, in *GetStudentProfileRequest, opts ...grpc.CallOption) (*GetStudentProfileResponse, error)
	UpsertStudentComment(ctx context.Context, in *UpsertStudentCommentRequest, opts ...grpc.CallOption) (*UpsertStudentCommentResponse, error)
	DeleteStudentComments(ctx context.Context, in *DeleteStudentCommentsRequest, opts ...grpc.CallOption) (*DeleteStudentCommentsResponse, error)
	GenerateImportStudentTemplate(ctx context.Context, in *GenerateImportStudentTemplateRequest, opts ...grpc.CallOption) (*GenerateImportStudentTemplateResponse, error)
	// Deprecated: Do not use.
	ImportStudent(ctx context.Context, in *ImportStudentRequest, opts ...grpc.CallOption) (*ImportStudentResponse, error)
	ImportStudentV2(ctx context.Context, in *ImportStudentRequest, opts ...grpc.CallOption) (*UpsertStudentResponse, error)
	UpsertStudent(ctx context.Context, in *UpsertStudentRequest, opts ...grpc.CallOption) (*UpsertStudentResponse, error)
	RetrieveStudentComment(ctx context.Context, in *RetrieveStudentCommentRequest, opts ...grpc.CallOption) (*RetrieveStudentCommentResponse, error)
	RetrieveListOfStudents(ctx context.Context, in *RetrieveListOfStudentsRequest, opts ...grpc.CallOption) (*RetrieveListOfStudentsResponse, error)
}

type studentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentServiceClient(cc grpc.ClientConnInterface) StudentServiceClient {
	return &studentServiceClient{cc}
}

func (c *studentServiceClient) GetStudentProfile(ctx context.Context, in *GetStudentProfileRequest, opts ...grpc.CallOption) (*GetStudentProfileResponse, error) {
	out := new(GetStudentProfileResponse)
	err := c.cc.Invoke(ctx, "/usermgmt.v2.StudentService/GetStudentProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) UpsertStudentComment(ctx context.Context, in *UpsertStudentCommentRequest, opts ...grpc.CallOption) (*UpsertStudentCommentResponse, error) {
	out := new(UpsertStudentCommentResponse)
	err := c.cc.Invoke(ctx, "/usermgmt.v2.StudentService/UpsertStudentComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) DeleteStudentComments(ctx context.Context, in *DeleteStudentCommentsRequest, opts ...grpc.CallOption) (*DeleteStudentCommentsResponse, error) {
	out := new(DeleteStudentCommentsResponse)
	err := c.cc.Invoke(ctx, "/usermgmt.v2.StudentService/DeleteStudentComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) GenerateImportStudentTemplate(ctx context.Context, in *GenerateImportStudentTemplateRequest, opts ...grpc.CallOption) (*GenerateImportStudentTemplateResponse, error) {
	out := new(GenerateImportStudentTemplateResponse)
	err := c.cc.Invoke(ctx, "/usermgmt.v2.StudentService/GenerateImportStudentTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *studentServiceClient) ImportStudent(ctx context.Context, in *ImportStudentRequest, opts ...grpc.CallOption) (*ImportStudentResponse, error) {
	out := new(ImportStudentResponse)
	err := c.cc.Invoke(ctx, "/usermgmt.v2.StudentService/ImportStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) ImportStudentV2(ctx context.Context, in *ImportStudentRequest, opts ...grpc.CallOption) (*UpsertStudentResponse, error) {
	out := new(UpsertStudentResponse)
	err := c.cc.Invoke(ctx, "/usermgmt.v2.StudentService/ImportStudentV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) UpsertStudent(ctx context.Context, in *UpsertStudentRequest, opts ...grpc.CallOption) (*UpsertStudentResponse, error) {
	out := new(UpsertStudentResponse)
	err := c.cc.Invoke(ctx, "/usermgmt.v2.StudentService/UpsertStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) RetrieveStudentComment(ctx context.Context, in *RetrieveStudentCommentRequest, opts ...grpc.CallOption) (*RetrieveStudentCommentResponse, error) {
	out := new(RetrieveStudentCommentResponse)
	err := c.cc.Invoke(ctx, "/usermgmt.v2.StudentService/RetrieveStudentComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentServiceClient) RetrieveListOfStudents(ctx context.Context, in *RetrieveListOfStudentsRequest, opts ...grpc.CallOption) (*RetrieveListOfStudentsResponse, error) {
	out := new(RetrieveListOfStudentsResponse)
	err := c.cc.Invoke(ctx, "/usermgmt.v2.StudentService/RetrieveListOfStudents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentServiceServer is the server API for StudentService service.
// All implementations should embed UnimplementedStudentServiceServer
// for forward compatibility
type StudentServiceServer interface {
	GetStudentProfile(context.Context, *GetStudentProfileRequest) (*GetStudentProfileResponse, error)
	UpsertStudentComment(context.Context, *UpsertStudentCommentRequest) (*UpsertStudentCommentResponse, error)
	DeleteStudentComments(context.Context, *DeleteStudentCommentsRequest) (*DeleteStudentCommentsResponse, error)
	GenerateImportStudentTemplate(context.Context, *GenerateImportStudentTemplateRequest) (*GenerateImportStudentTemplateResponse, error)
	// Deprecated: Do not use.
	ImportStudent(context.Context, *ImportStudentRequest) (*ImportStudentResponse, error)
	ImportStudentV2(context.Context, *ImportStudentRequest) (*UpsertStudentResponse, error)
	UpsertStudent(context.Context, *UpsertStudentRequest) (*UpsertStudentResponse, error)
	RetrieveStudentComment(context.Context, *RetrieveStudentCommentRequest) (*RetrieveStudentCommentResponse, error)
	RetrieveListOfStudents(context.Context, *RetrieveListOfStudentsRequest) (*RetrieveListOfStudentsResponse, error)
}

// UnimplementedStudentServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStudentServiceServer struct {
}

func (UnimplementedStudentServiceServer) GetStudentProfile(context.Context, *GetStudentProfileRequest) (*GetStudentProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentProfile not implemented")
}
func (UnimplementedStudentServiceServer) UpsertStudentComment(context.Context, *UpsertStudentCommentRequest) (*UpsertStudentCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertStudentComment not implemented")
}
func (UnimplementedStudentServiceServer) DeleteStudentComments(context.Context, *DeleteStudentCommentsRequest) (*DeleteStudentCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudentComments not implemented")
}
func (UnimplementedStudentServiceServer) GenerateImportStudentTemplate(context.Context, *GenerateImportStudentTemplateRequest) (*GenerateImportStudentTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateImportStudentTemplate not implemented")
}
func (UnimplementedStudentServiceServer) ImportStudent(context.Context, *ImportStudentRequest) (*ImportStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportStudent not implemented")
}
func (UnimplementedStudentServiceServer) ImportStudentV2(context.Context, *ImportStudentRequest) (*UpsertStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportStudentV2 not implemented")
}
func (UnimplementedStudentServiceServer) UpsertStudent(context.Context, *UpsertStudentRequest) (*UpsertStudentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertStudent not implemented")
}
func (UnimplementedStudentServiceServer) RetrieveStudentComment(context.Context, *RetrieveStudentCommentRequest) (*RetrieveStudentCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveStudentComment not implemented")
}
func (UnimplementedStudentServiceServer) RetrieveListOfStudents(context.Context, *RetrieveListOfStudentsRequest) (*RetrieveListOfStudentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveListOfStudents not implemented")
}

// UnsafeStudentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentServiceServer will
// result in compilation errors.
type UnsafeStudentServiceServer interface {
	mustEmbedUnimplementedStudentServiceServer()
}

func RegisterStudentServiceServer(s grpc.ServiceRegistrar, srv StudentServiceServer) {
	s.RegisterService(&_StudentService_serviceDesc, srv)
}

func _StudentService_GetStudentProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).GetStudentProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.v2.StudentService/GetStudentProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).GetStudentProfile(ctx, req.(*GetStudentProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_UpsertStudentComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertStudentCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).UpsertStudentComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.v2.StudentService/UpsertStudentComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).UpsertStudentComment(ctx, req.(*UpsertStudentCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_DeleteStudentComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStudentCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).DeleteStudentComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.v2.StudentService/DeleteStudentComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).DeleteStudentComments(ctx, req.(*DeleteStudentCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_GenerateImportStudentTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateImportStudentTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).GenerateImportStudentTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.v2.StudentService/GenerateImportStudentTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).GenerateImportStudentTemplate(ctx, req.(*GenerateImportStudentTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_ImportStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).ImportStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.v2.StudentService/ImportStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).ImportStudent(ctx, req.(*ImportStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_ImportStudentV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).ImportStudentV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.v2.StudentService/ImportStudentV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).ImportStudentV2(ctx, req.(*ImportStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_UpsertStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).UpsertStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.v2.StudentService/UpsertStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).UpsertStudent(ctx, req.(*UpsertStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_RetrieveStudentComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveStudentCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).RetrieveStudentComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.v2.StudentService/RetrieveStudentComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).RetrieveStudentComment(ctx, req.(*RetrieveStudentCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentService_RetrieveListOfStudents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveListOfStudentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentServiceServer).RetrieveListOfStudents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.v2.StudentService/RetrieveListOfStudents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentServiceServer).RetrieveListOfStudents(ctx, req.(*RetrieveListOfStudentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StudentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "usermgmt.v2.StudentService",
	HandlerType: (*StudentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStudentProfile",
			Handler:    _StudentService_GetStudentProfile_Handler,
		},
		{
			MethodName: "UpsertStudentComment",
			Handler:    _StudentService_UpsertStudentComment_Handler,
		},
		{
			MethodName: "DeleteStudentComments",
			Handler:    _StudentService_DeleteStudentComments_Handler,
		},
		{
			MethodName: "GenerateImportStudentTemplate",
			Handler:    _StudentService_GenerateImportStudentTemplate_Handler,
		},
		{
			MethodName: "ImportStudent",
			Handler:    _StudentService_ImportStudent_Handler,
		},
		{
			MethodName: "ImportStudentV2",
			Handler:    _StudentService_ImportStudentV2_Handler,
		},
		{
			MethodName: "UpsertStudent",
			Handler:    _StudentService_UpsertStudent_Handler,
		},
		{
			MethodName: "RetrieveStudentComment",
			Handler:    _StudentService_RetrieveStudentComment_Handler,
		},
		{
			MethodName: "RetrieveListOfStudents",
			Handler:    _StudentService_RetrieveListOfStudents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "usermgmt/v2/student.proto",
}

// WithusStudentServiceClient is the client API for WithusStudentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WithusStudentServiceClient interface {
	ImportWithusManagaraBaseCSV(ctx context.Context, in *ImportWithusManagaraBaseCSVRequest, opts ...grpc.CallOption) (*ImportWithusManagaraBaseCSVResponse, error)
}

type withusStudentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWithusStudentServiceClient(cc grpc.ClientConnInterface) WithusStudentServiceClient {
	return &withusStudentServiceClient{cc}
}

func (c *withusStudentServiceClient) ImportWithusManagaraBaseCSV(ctx context.Context, in *ImportWithusManagaraBaseCSVRequest, opts ...grpc.CallOption) (*ImportWithusManagaraBaseCSVResponse, error) {
	out := new(ImportWithusManagaraBaseCSVResponse)
	err := c.cc.Invoke(ctx, "/usermgmt.v2.WithusStudentService/ImportWithusManagaraBaseCSV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WithusStudentServiceServer is the server API for WithusStudentService service.
// All implementations should embed UnimplementedWithusStudentServiceServer
// for forward compatibility
type WithusStudentServiceServer interface {
	ImportWithusManagaraBaseCSV(context.Context, *ImportWithusManagaraBaseCSVRequest) (*ImportWithusManagaraBaseCSVResponse, error)
}

// UnimplementedWithusStudentServiceServer should be embedded to have forward compatible implementations.
type UnimplementedWithusStudentServiceServer struct {
}

func (UnimplementedWithusStudentServiceServer) ImportWithusManagaraBaseCSV(context.Context, *ImportWithusManagaraBaseCSVRequest) (*ImportWithusManagaraBaseCSVResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportWithusManagaraBaseCSV not implemented")
}

// UnsafeWithusStudentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WithusStudentServiceServer will
// result in compilation errors.
type UnsafeWithusStudentServiceServer interface {
	mustEmbedUnimplementedWithusStudentServiceServer()
}

func RegisterWithusStudentServiceServer(s grpc.ServiceRegistrar, srv WithusStudentServiceServer) {
	s.RegisterService(&_WithusStudentService_serviceDesc, srv)
}

func _WithusStudentService_ImportWithusManagaraBaseCSV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportWithusManagaraBaseCSVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithusStudentServiceServer).ImportWithusManagaraBaseCSV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.v2.WithusStudentService/ImportWithusManagaraBaseCSV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithusStudentServiceServer).ImportWithusManagaraBaseCSV(ctx, req.(*ImportWithusManagaraBaseCSVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WithusStudentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "usermgmt.v2.WithusStudentService",
	HandlerType: (*WithusStudentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportWithusManagaraBaseCSV",
			Handler:    _WithusStudentService_ImportWithusManagaraBaseCSV_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "usermgmt/v2/student.proto",
}
