// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package upb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SchoolInfoServiceClient is the client API for SchoolInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchoolInfoServiceClient interface {
	ImportSchoolInfo(ctx context.Context, in *ImportSchoolInfoRequest, opts ...grpc.CallOption) (*ImportSchoolInfoResponse, error)
}

type schoolInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchoolInfoServiceClient(cc grpc.ClientConnInterface) SchoolInfoServiceClient {
	return &schoolInfoServiceClient{cc}
}

func (c *schoolInfoServiceClient) ImportSchoolInfo(ctx context.Context, in *ImportSchoolInfoRequest, opts ...grpc.CallOption) (*ImportSchoolInfoResponse, error) {
	out := new(ImportSchoolInfoResponse)
	err := c.cc.Invoke(ctx, "/usermgmt.v2.SchoolInfoService/ImportSchoolInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchoolInfoServiceServer is the server API for SchoolInfoService service.
// All implementations should embed UnimplementedSchoolInfoServiceServer
// for forward compatibility
type SchoolInfoServiceServer interface {
	ImportSchoolInfo(context.Context, *ImportSchoolInfoRequest) (*ImportSchoolInfoResponse, error)
}

// UnimplementedSchoolInfoServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSchoolInfoServiceServer struct {
}

func (UnimplementedSchoolInfoServiceServer) ImportSchoolInfo(context.Context, *ImportSchoolInfoRequest) (*ImportSchoolInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportSchoolInfo not implemented")
}

// UnsafeSchoolInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchoolInfoServiceServer will
// result in compilation errors.
type UnsafeSchoolInfoServiceServer interface {
	mustEmbedUnimplementedSchoolInfoServiceServer()
}

func RegisterSchoolInfoServiceServer(s grpc.ServiceRegistrar, srv SchoolInfoServiceServer) {
	s.RegisterService(&_SchoolInfoService_serviceDesc, srv)
}

func _SchoolInfoService_ImportSchoolInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportSchoolInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchoolInfoServiceServer).ImportSchoolInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.v2.SchoolInfoService/ImportSchoolInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchoolInfoServiceServer).ImportSchoolInfo(ctx, req.(*ImportSchoolInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SchoolInfoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "usermgmt.v2.SchoolInfoService",
	HandlerType: (*SchoolInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportSchoolInfo",
			Handler:    _SchoolInfoService_ImportSchoolInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "usermgmt/v2/school_info.proto",
}
