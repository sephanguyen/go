// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package upb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DomainParentServiceClient is the client API for DomainParentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DomainParentServiceClient interface {
	UpsertParent(ctx context.Context, in *UpsertParentRequest, opts ...grpc.CallOption) (*UpsertParentResponse, error)
}

type domainParentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDomainParentServiceClient(cc grpc.ClientConnInterface) DomainParentServiceClient {
	return &domainParentServiceClient{cc}
}

func (c *domainParentServiceClient) UpsertParent(ctx context.Context, in *UpsertParentRequest, opts ...grpc.CallOption) (*UpsertParentResponse, error) {
	out := new(UpsertParentResponse)
	err := c.cc.Invoke(ctx, "/usermgmt.v2.DomainParentService/UpsertParent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DomainParentServiceServer is the server API for DomainParentService service.
// All implementations should embed UnimplementedDomainParentServiceServer
// for forward compatibility
type DomainParentServiceServer interface {
	UpsertParent(context.Context, *UpsertParentRequest) (*UpsertParentResponse, error)
}

// UnimplementedDomainParentServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDomainParentServiceServer struct {
}

func (UnimplementedDomainParentServiceServer) UpsertParent(context.Context, *UpsertParentRequest) (*UpsertParentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertParent not implemented")
}

// UnsafeDomainParentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DomainParentServiceServer will
// result in compilation errors.
type UnsafeDomainParentServiceServer interface {
	mustEmbedUnimplementedDomainParentServiceServer()
}

func RegisterDomainParentServiceServer(s grpc.ServiceRegistrar, srv DomainParentServiceServer) {
	s.RegisterService(&_DomainParentService_serviceDesc, srv)
}

func _DomainParentService_UpsertParent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertParentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainParentServiceServer).UpsertParent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/usermgmt.v2.DomainParentService/UpsertParent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainParentServiceServer).UpsertParent(ctx, req.(*UpsertParentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DomainParentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "usermgmt.v2.DomainParentService",
	HandlerType: (*DomainParentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertParent",
			Handler:    _DomainParentService_UpsertParent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "usermgmt/v2/parents.proto",
}
