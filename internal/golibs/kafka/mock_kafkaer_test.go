// Code generated by mockery v2.25.1. DO NOT EDIT.

package kafka

import (
        kafka_go "github.com/segmentio/kafka-go"

        mock "github.com/stretchr/testify/mock"
)

// MockKafkaer is an autogenerated mock type for the Kafkaer type
type MockKafkaer struct {
        mock.Mock
}

// DialConn provides a mock function with given fields: network, address
func (_m *MockKafkaer) DialConn(network string, address string) (Conn, error) {
        ret := _m.Called(network, address)

        var r0 Conn
        var r1 error
        if rf, ok := ret.Get(0).(func(string, string) (Conn, error)); ok {
                return rf(network, address)
        }
        if rf, ok := ret.Get(0).(func(string, string) Conn); ok {
                r0 = rf(network, address)
        } else {
                if ret.Get(0) != nil {
                        r0 = ret.Get(0).(Conn)
                }
        }

        if rf, ok := ret.Get(1).(func(string, string) error); ok {
                r1 = rf(network, address)
        } else {
                r1 = ret.Error(1)
        }

        return r0, r1
}

// NewReader provides a mock function with given fields: config
func (_m *MockKafkaer) NewReader(config kafka_go.ReaderConfig) Reader {
        ret := _m.Called(config)

        var r0 Reader
        if rf, ok := ret.Get(0).(func(kafka_go.ReaderConfig) Reader); ok {
                r0 = rf(config)
        } else {
                if ret.Get(0) != nil {
                        r0 = ret.Get(0).(Reader)
                }
        }

        return r0
}

// NewWriter provides a mock function with given fields: config
func (_m *MockKafkaer) NewWriter(config kafka_go.WriterConfig) Writer {
        ret := _m.Called(config)

        var r0 Writer
        if rf, ok := ret.Get(0).(func(kafka_go.WriterConfig) Writer); ok {
                r0 = rf(config)
        } else {
                if ret.Get(0) != nil {
                        r0 = ret.Get(0).(Writer)
                }
        }

        return r0
}

type mockConstructorTestingTNewMockKafkaer interface {
        mock.TestingT
        Cleanup(func())
}

// NewMockKafkaer creates a new instance of MockKafkaer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockKafkaer(t mockConstructorTestingTNewMockKafkaer) *MockKafkaer {
        mock := &MockKafkaer{}
        mock.Mock.Test(t)

        t.Cleanup(func() { mock.AssertExpectations(t) })

        return mock
}
