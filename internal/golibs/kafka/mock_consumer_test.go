// Code generated by mockery v2.25.1. DO NOT EDIT.
package kafka


import (
        context "context"

        kafka "github.com/segmentio/kafka-go"

        mock "github.com/stretchr/testify/mock"
)

// consumer is an autogenerated mock type for the consumer type
type mockConsumer struct {
        mock.Mock
}

// completeMessage provides a mock function with given fields: msg
func (_m *mockConsumer) completeMessage(msg *kafka.Message) error {
        ret := _m.Called(msg)

        var r0 error
        if rf, ok := ret.Get(0).(func(*kafka.Message) error); ok {
                r0 = rf(msg)
        } else {
                r0 = ret.Error(0)
        }

        return r0
}

// getContextWithCancel provides a mock function with given fields:
func (_m *mockConsumer) getContextWithCancel() (context.Context, context.CancelFunc) {
        ret := _m.Called()

        var r0 context.Context
        var r1 context.CancelFunc
        if rf, ok := ret.Get(0).(func() (context.Context, context.CancelFunc)); ok {
                return rf()
        }
        if rf, ok := ret.Get(0).(func() context.Context); ok {
                r0 = rf()
        } else {
                if ret.Get(0) != nil {
                        r0 = ret.Get(0).(context.Context)
                }
        }

        if rf, ok := ret.Get(1).(func() context.CancelFunc); ok {
                r1 = rf()
        } else {
                if ret.Get(1) != nil {
                        r1 = ret.Get(1).(context.CancelFunc)
                }
        }

        return r0, r1
}

// getReader provides a mock function with given fields:
func (_m *mockConsumer) getReader() Reader {
        ret := _m.Called()

        var r0 Reader
        if rf, ok := ret.Get(0).(func() Reader); ok {
                r0 = rf()
        } else {
                if ret.Get(0) != nil {
                        r0 = ret.Get(0).(Reader)
                }
        }

        return r0
}

// getRunning provides a mock function with given fields:
func (_m *mockConsumer) getRunning() bool {
        ret := _m.Called()

        var r0 bool
        if rf, ok := ret.Get(0).(func() bool); ok {
                r0 = rf()
        } else {
                r0 = ret.Get(0).(bool)
        }

        return r0
}

// handleMessage provides a mock function with given fields: spanName, handleMsg, msg
func (_m *mockConsumer) handleMessage(spanName string, handleMsg MsgHandler, msg *kafka.Message) (bool, error) {
        ret := _m.Called(spanName, handleMsg, msg)

        var r0 bool
        var r1 error
        if rf, ok := ret.Get(0).(func(string, MsgHandler, *kafka.Message) (bool, error)); ok {
                return rf(spanName, handleMsg, msg)
        }
        if rf, ok := ret.Get(0).(func(string, MsgHandler, *kafka.Message) bool); ok {
                r0 = rf(spanName, handleMsg, msg)
        } else {
                r0 = ret.Get(0).(bool)
        }

        if rf, ok := ret.Get(1).(func(string, MsgHandler, *kafka.Message) error); ok {
                r1 = rf(spanName, handleMsg, msg)
        } else {
                r1 = ret.Error(1)
        }

        return r0, r1
}

// readMessage provides a mock function with given fields: msg
func (_m *mockConsumer) readMessage(msg *kafka.Message) error {
        ret := _m.Called(msg)

        var r0 error
        if rf, ok := ret.Get(0).(func(*kafka.Message) error); ok {
                r0 = rf(msg)
        } else {
                r0 = ret.Error(0)
        }

        return r0
}

// setRunning provides a mock function with given fields: isRunning
func (_m *mockConsumer) setRunning(isRunning bool) {
        _m.Called(isRunning)
}

type mockConstructorTestingTnewConsumer interface {
        mock.TestingT
        Cleanup(func())
}

// newConsumer creates a new instance of consumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockConsumer(t mockConstructorTestingTnewConsumer) *mockConsumer {
        mock := &mockConsumer{}
        mock.Mock.Test(t)

        t.Cleanup(func() { mock.AssertExpectations(t) })

        return mock
}
