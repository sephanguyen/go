// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package interceptors

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	jwt "github.com/square/go-jose/v3/jwt"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9cda7fa0DecodeGithubComManabieComBackendInternalGolibsInterceptors(in *jlexer.Lexer, out *TokenInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Applicant":
			out.Applicant = string(in.String())
		case "UserID":
			out.UserID = string(in.String())
		case "SchoolIds":
			if in.IsNull() {
				in.Skip()
				out.SchoolIds = nil
			} else {
				in.Delim('[')
				if out.SchoolIds == nil {
					if !in.IsDelim(']') {
						out.SchoolIds = make([]int64, 0, 8)
					} else {
						out.SchoolIds = []int64{}
					}
				} else {
					out.SchoolIds = (out.SchoolIds)[:0]
				}
				for !in.IsDelim(']') {
					var v1 int64
					v1 = int64(in.Int64())
					out.SchoolIds = append(out.SchoolIds, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "DefaultRole":
			out.DefaultRole = string(in.String())
		case "AllowedRoles":
			if in.IsNull() {
				in.Skip()
				out.AllowedRoles = nil
			} else {
				in.Delim('[')
				if out.AllowedRoles == nil {
					if !in.IsDelim(']') {
						out.AllowedRoles = make([]string, 0, 4)
					} else {
						out.AllowedRoles = []string{}
					}
				} else {
					out.AllowedRoles = (out.AllowedRoles)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.AllowedRoles = append(out.AllowedRoles, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "UserGroup":
			out.UserGroup = string(in.String())
		case "ResourcePath":
			out.ResourcePath = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cda7fa0EncodeGithubComManabieComBackendInternalGolibsInterceptors(out *jwriter.Writer, in TokenInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Applicant\":"
		out.RawString(prefix[1:])
		out.String(string(in.Applicant))
	}
	{
		const prefix string = ",\"UserID\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"SchoolIds\":"
		out.RawString(prefix)
		if in.SchoolIds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.SchoolIds {
				if v3 > 0 {
					out.RawByte(',')
				}
				out.Int64(int64(v4))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"DefaultRole\":"
		out.RawString(prefix)
		out.String(string(in.DefaultRole))
	}
	{
		const prefix string = ",\"AllowedRoles\":"
		out.RawString(prefix)
		if in.AllowedRoles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.AllowedRoles {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"UserGroup\":"
		out.RawString(prefix)
		out.String(string(in.UserGroup))
	}
	{
		const prefix string = ",\"ResourcePath\":"
		out.RawString(prefix)
		out.String(string(in.ResourcePath))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TokenInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cda7fa0EncodeGithubComManabieComBackendInternalGolibsInterceptors(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TokenInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cda7fa0EncodeGithubComManabieComBackendInternalGolibsInterceptors(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TokenInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cda7fa0DecodeGithubComManabieComBackendInternalGolibsInterceptors(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TokenInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cda7fa0DecodeGithubComManabieComBackendInternalGolibsInterceptors(l, v)
}
func easyjson9cda7fa0DecodeGithubComManabieComBackendInternalGolibsInterceptors1(in *jlexer.Lexer, out *ManabieClaims) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "allowed_roles":
			if in.IsNull() {
				in.Skip()
				out.AllowedRoles = nil
			} else {
				in.Delim('[')
				if out.AllowedRoles == nil {
					if !in.IsDelim(']') {
						out.AllowedRoles = make([]string, 0, 4)
					} else {
						out.AllowedRoles = []string{}
					}
				} else {
					out.AllowedRoles = (out.AllowedRoles)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.AllowedRoles = append(out.AllowedRoles, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "default_role":
			out.DefaultRole = string(in.String())
		case "user_id":
			out.UserID = string(in.String())
		case "school_ids":
			if in.IsNull() {
				in.Skip()
				out.SchoolIDs = nil
			} else {
				in.Delim('[')
				if out.SchoolIDs == nil {
					if !in.IsDelim(']') {
						out.SchoolIDs = make([]string, 0, 4)
					} else {
						out.SchoolIDs = []string{}
					}
				} else {
					out.SchoolIDs = (out.SchoolIDs)[:0]
				}
				for !in.IsDelim(']') {
					var v8 string
					v8 = string(in.String())
					out.SchoolIDs = append(out.SchoolIDs, v8)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "user_group":
			out.UserGroup = string(in.String())
		case "resource_path":
			out.ResourcePath = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cda7fa0EncodeGithubComManabieComBackendInternalGolibsInterceptors1(out *jwriter.Writer, in ManabieClaims) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.AllowedRoles) != 0 {
		const prefix string = ",\"allowed_roles\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v9, v10 := range in.AllowedRoles {
				if v9 > 0 {
					out.RawByte(',')
				}
				out.String(string(v10))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"default_role\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DefaultRole))
	}
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix)
		out.String(string(in.UserID))
	}
	if len(in.SchoolIDs) != 0 {
		const prefix string = ",\"school_ids\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v11, v12 := range in.SchoolIDs {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	if in.UserGroup != "" {
		const prefix string = ",\"user_group\":"
		out.RawString(prefix)
		out.String(string(in.UserGroup))
	}
	if in.ResourcePath != "" {
		const prefix string = ",\"resource_path\":"
		out.RawString(prefix)
		out.String(string(in.ResourcePath))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ManabieClaims) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cda7fa0EncodeGithubComManabieComBackendInternalGolibsInterceptors1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ManabieClaims) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cda7fa0EncodeGithubComManabieComBackendInternalGolibsInterceptors1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ManabieClaims) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cda7fa0DecodeGithubComManabieComBackendInternalGolibsInterceptors1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ManabieClaims) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cda7fa0DecodeGithubComManabieComBackendInternalGolibsInterceptors1(l, v)
}
func easyjson9cda7fa0DecodeGithubComManabieComBackendInternalGolibsInterceptors2(in *jlexer.Lexer, out *JPREPClaims) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "student_division":
			out.StudentDivision = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cda7fa0EncodeGithubComManabieComBackendInternalGolibsInterceptors2(out *jwriter.Writer, in JPREPClaims) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"student_division\":"
		out.RawString(prefix[1:])
		out.String(string(in.StudentDivision))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v JPREPClaims) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cda7fa0EncodeGithubComManabieComBackendInternalGolibsInterceptors2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JPREPClaims) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cda7fa0EncodeGithubComManabieComBackendInternalGolibsInterceptors2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JPREPClaims) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cda7fa0DecodeGithubComManabieComBackendInternalGolibsInterceptors2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JPREPClaims) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cda7fa0DecodeGithubComManabieComBackendInternalGolibsInterceptors2(l, v)
}
func easyjson9cda7fa0DecodeGithubComManabieComBackendInternalGolibsInterceptors3(in *jlexer.Lexer, out *HasuraClaims) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "x-hasura-allowed-roles":
			if in.IsNull() {
				in.Skip()
				out.AllowedRoles = nil
			} else {
				in.Delim('[')
				if out.AllowedRoles == nil {
					if !in.IsDelim(']') {
						out.AllowedRoles = make([]string, 0, 4)
					} else {
						out.AllowedRoles = []string{}
					}
				} else {
					out.AllowedRoles = (out.AllowedRoles)[:0]
				}
				for !in.IsDelim(']') {
					var v13 string
					v13 = string(in.String())
					out.AllowedRoles = append(out.AllowedRoles, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "x-hasura-default-role":
			out.DefaultRole = string(in.String())
		case "x-hasura-user-id":
			out.UserID = string(in.String())
		case "x-hasura-school-ids":
			out.SchoolIDs = string(in.String())
		case "x-hasura-user-group":
			out.UserGroup = string(in.String())
		case "x-hasura-resource-path":
			out.ResourcePath = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cda7fa0EncodeGithubComManabieComBackendInternalGolibsInterceptors3(out *jwriter.Writer, in HasuraClaims) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.AllowedRoles) != 0 {
		const prefix string = ",\"x-hasura-allowed-roles\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v14, v15 := range in.AllowedRoles {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	if in.DefaultRole != "" {
		const prefix string = ",\"x-hasura-default-role\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.DefaultRole))
	}
	if in.UserID != "" {
		const prefix string = ",\"x-hasura-user-id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserID))
	}
	if in.SchoolIDs != "" {
		const prefix string = ",\"x-hasura-school-ids\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SchoolIDs))
	}
	if in.UserGroup != "" {
		const prefix string = ",\"x-hasura-user-group\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserGroup))
	}
	if in.ResourcePath != "" {
		const prefix string = ",\"x-hasura-resource-path\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ResourcePath))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HasuraClaims) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cda7fa0EncodeGithubComManabieComBackendInternalGolibsInterceptors3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HasuraClaims) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cda7fa0EncodeGithubComManabieComBackendInternalGolibsInterceptors3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HasuraClaims) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cda7fa0DecodeGithubComManabieComBackendInternalGolibsInterceptors3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HasuraClaims) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cda7fa0DecodeGithubComManabieComBackendInternalGolibsInterceptors3(l, v)
}
func easyjson9cda7fa0DecodeGithubComManabieComBackendInternalGolibsInterceptors4(in *jlexer.Lexer, out *FirebaseIdentity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sign_in_provider":
			out.SignInProvider = string(in.String())
		case "identities":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Identities = make(map[string][]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v16 []string
					if in.IsNull() {
						in.Skip()
						v16 = nil
					} else {
						in.Delim('[')
						if v16 == nil {
							if !in.IsDelim(']') {
								v16 = make([]string, 0, 4)
							} else {
								v16 = []string{}
							}
						} else {
							v16 = (v16)[:0]
						}
						for !in.IsDelim(']') {
							var v17 string
							v17 = string(in.String())
							v16 = append(v16, v17)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Identities)[key] = v16
					in.WantComma()
				}
				in.Delim('}')
			}
		case "tenant":
			out.Tenant = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cda7fa0EncodeGithubComManabieComBackendInternalGolibsInterceptors4(out *jwriter.Writer, in FirebaseIdentity) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sign_in_provider\":"
		out.RawString(prefix[1:])
		out.String(string(in.SignInProvider))
	}
	{
		const prefix string = ",\"identities\":"
		out.RawString(prefix)
		if in.Identities == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v18First := true
			for v18Name, v18Value := range in.Identities {
				if v18First {
					v18First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v18Name))
				out.RawByte(':')
				if v18Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v19, v20 := range v18Value {
						if v19 > 0 {
							out.RawByte(',')
						}
						out.String(string(v20))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	if in.Tenant != "" {
		const prefix string = ",\"tenant\":"
		out.RawString(prefix)
		out.String(string(in.Tenant))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FirebaseIdentity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cda7fa0EncodeGithubComManabieComBackendInternalGolibsInterceptors4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FirebaseIdentity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cda7fa0EncodeGithubComManabieComBackendInternalGolibsInterceptors4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FirebaseIdentity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cda7fa0DecodeGithubComManabieComBackendInternalGolibsInterceptors4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FirebaseIdentity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cda7fa0DecodeGithubComManabieComBackendInternalGolibsInterceptors4(l, v)
}
func easyjson9cda7fa0DecodeGithubComManabieComBackendInternalGolibsInterceptors5(in *jlexer.Lexer, out *FirebaseClaims) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "email_verified":
			out.EmailVerified = bool(in.Bool())
		case "firebase":
			(out.Identity).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cda7fa0EncodeGithubComManabieComBackendInternalGolibsInterceptors5(out *jwriter.Writer, in FirebaseClaims) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Email != "" {
		const prefix string = ",\"email\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"email_verified\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Bool(bool(in.EmailVerified))
	}
	{
		const prefix string = ",\"firebase\":"
		out.RawString(prefix)
		(in.Identity).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FirebaseClaims) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cda7fa0EncodeGithubComManabieComBackendInternalGolibsInterceptors5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FirebaseClaims) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cda7fa0EncodeGithubComManabieComBackendInternalGolibsInterceptors5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FirebaseClaims) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cda7fa0DecodeGithubComManabieComBackendInternalGolibsInterceptors5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FirebaseClaims) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cda7fa0DecodeGithubComManabieComBackendInternalGolibsInterceptors5(l, v)
}
func easyjson9cda7fa0DecodeGithubComManabieComBackendInternalGolibsInterceptors6(in *jlexer.Lexer, out *CustomClaims) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.FirebaseClaims = new(FirebaseClaims)
	out.JPREPClaims = new(JPREPClaims)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "https://hasura.io/jwt/claims":
			if in.IsNull() {
				in.Skip()
				out.Hasura = nil
			} else {
				if out.Hasura == nil {
					out.Hasura = new(HasuraClaims)
				}
				(*out.Hasura).UnmarshalEasyJSON(in)
			}
		case "manabie":
			if in.IsNull() {
				in.Skip()
				out.Manabie = nil
			} else {
				if out.Manabie == nil {
					out.Manabie = new(ManabieClaims)
				}
				(*out.Manabie).UnmarshalEasyJSON(in)
			}
		case "student_division":
			out.StudentDivision = string(in.String())
		case "email":
			out.Email = string(in.String())
		case "email_verified":
			out.EmailVerified = bool(in.Bool())
		case "firebase":
			(out.Identity).UnmarshalEasyJSON(in)
		case "iss":
			out.Issuer = string(in.String())
		case "sub":
			out.Subject = string(in.String())
		case "aud":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Audience).UnmarshalJSON(data))
			}
		case "exp":
			if in.IsNull() {
				in.Skip()
				out.Expiry = nil
			} else {
				if out.Expiry == nil {
					out.Expiry = new(jwt.NumericDate)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Expiry).UnmarshalJSON(data))
				}
			}
		case "nbf":
			if in.IsNull() {
				in.Skip()
				out.NotBefore = nil
			} else {
				if out.NotBefore == nil {
					out.NotBefore = new(jwt.NumericDate)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.NotBefore).UnmarshalJSON(data))
				}
			}
		case "iat":
			if in.IsNull() {
				in.Skip()
				out.IssuedAt = nil
			} else {
				if out.IssuedAt == nil {
					out.IssuedAt = new(jwt.NumericDate)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.IssuedAt).UnmarshalJSON(data))
				}
			}
		case "jti":
			out.ID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9cda7fa0EncodeGithubComManabieComBackendInternalGolibsInterceptors6(out *jwriter.Writer, in CustomClaims) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Hasura != nil {
		const prefix string = ",\"https://hasura.io/jwt/claims\":"
		first = false
		out.RawString(prefix[1:])
		(*in.Hasura).MarshalEasyJSON(out)
	}
	if in.Manabie != nil {
		const prefix string = ",\"manabie\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Manabie).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"student_division\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StudentDivision))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"email_verified\":"
		out.RawString(prefix)
		out.Bool(bool(in.EmailVerified))
	}
	{
		const prefix string = ",\"firebase\":"
		out.RawString(prefix)
		(in.Identity).MarshalEasyJSON(out)
	}
	if in.Issuer != "" {
		const prefix string = ",\"iss\":"
		out.RawString(prefix)
		out.String(string(in.Issuer))
	}
	if in.Subject != "" {
		const prefix string = ",\"sub\":"
		out.RawString(prefix)
		out.String(string(in.Subject))
	}
	if len(in.Audience) != 0 {
		const prefix string = ",\"aud\":"
		out.RawString(prefix)
		out.Raw((in.Audience).MarshalJSON())
	}
	if in.Expiry != nil {
		const prefix string = ",\"exp\":"
		out.RawString(prefix)
		out.Raw((*in.Expiry).MarshalJSON())
	}
	if in.NotBefore != nil {
		const prefix string = ",\"nbf\":"
		out.RawString(prefix)
		out.Raw((*in.NotBefore).MarshalJSON())
	}
	if in.IssuedAt != nil {
		const prefix string = ",\"iat\":"
		out.RawString(prefix)
		out.Raw((*in.IssuedAt).MarshalJSON())
	}
	if in.ID != "" {
		const prefix string = ",\"jti\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CustomClaims) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9cda7fa0EncodeGithubComManabieComBackendInternalGolibsInterceptors6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CustomClaims) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9cda7fa0EncodeGithubComManabieComBackendInternalGolibsInterceptors6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CustomClaims) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9cda7fa0DecodeGithubComManabieComBackendInternalGolibsInterceptors6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CustomClaims) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9cda7fa0DecodeGithubComManabieComBackendInternalGolibsInterceptors6(l, v)
}
