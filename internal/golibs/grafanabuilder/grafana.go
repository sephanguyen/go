package grafanabuilder

import (
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"strings"

	fileio "github.com/manabie-com/backend/internal/golibs/io"

	"github.com/docker/docker/daemon/graphdriver/copy"
	"github.com/google/go-jsonnet"
)

const (
	configName            = "main.jsonnet"
	grafonnetRelativePath = "/internal/golibs/grafanabuilder/grafonnet"
)

type Builder struct {
	dbConfigFile   io.Reader            // dashboard config file (jsonnet), which is main file will is executed
	extensionFiles map[string]io.Reader // jsonnet files, optional.

	// destination json file,
	//which is complete The JSON Model is data structure that defines the dashboard.
	//Including settings, panel settings & layout, queries etc.
	dstPath string

	// config for Grafana, include dashboardProviders, dashboard...
	// it will is used import new dashboard, required is a yaml file, optional.
	grafanaCfg        string
	grafanaDstCfg     string
	dashboardProvider string
	relatePath        string
}

// AddDashboardConfigFiles need input is jsonnet files
// which can import Grafonnet library at:
// https://github.com/grafana/grafonnet-lib/tree/master/grafonnet
func (b *Builder) AddDashboardConfigFiles(dbConfigFile io.Reader, extensionFiles map[string]io.Reader) *Builder {
	b.extensionFiles = extensionFiles
	b.dbConfigFile = dbConfigFile
	return b
}

// AddDestinationFilePath will receive a dstPath which is a result dashboard config file.
func (b *Builder) AddDestinationFilePath(dstFile string) *Builder {
	b.dstPath = dstFile
	return b
}

// AddGrafanaConfig will receive a file which config Grafana (dashboardProviders, dashboard...),
//and it is used to import new dashboard which be generated by this tool,
//grafanaCfg is required a yaml file. Optional.
//Warning: this feature is still unstable.
func (b *Builder) AddGrafanaConfig(grafanaCfg, grafanaDstCfg, dashboardProvider, relatePath string) *Builder {
	b.grafanaCfg = grafanaCfg
	b.grafanaDstCfg = grafanaDstCfg
	b.dashboardProvider = dashboardProvider
	b.relatePath = relatePath
	return b
}

func (b *Builder) isValid() error {
	if b.dbConfigFile == nil {
		return fmt.Errorf("miss dashboard config file, call func AddDashboardConfigFiles()")
	}

	if len(b.dstPath) == 0 {
		return fmt.Errorf("miss destination for result dashboard config file, call func AddDestinationFilePath()")
	}

	return nil
}

func (b *Builder) Build() error {
	if err := b.isValid(); err != nil {
		return err
	}
	tmpFolder, err := b.cloneAllFilesToTempFolder()
	if err != nil {
		return fmt.Errorf("could not clone needed files to temporary folder: %w", err)
	}
	defer os.RemoveAll(tmpFolder)

	vm := jsonnet.MakeVM()
	jsonData, err := vm.EvaluateFile(tmpFolder + "/" + configName)
	if err != nil {
		return fmt.Errorf("jsonnet EvaluateFile: %w", err)
	}

	// create result dashboard config json file
	wf, err := fileio.NewFileByPath(b.dstPath)
	if err != nil {
		return fmt.Errorf("could not create destination json file: %w", err)
	}
	defer wf.Close()
	_, err = wf.Write([]byte(jsonData))
	if err != nil {
		return fmt.Errorf("could not write data to destination json file: %w", err)
	}

	// import new dashboard config to grafana config
	err = b.importDashboardConfigToGrafanaConfig()
	if err != nil {
		return fmt.Errorf("could not import dashboard to grafan config: %w", err)
	}

	return nil
}

// cloneAllFilesToTempFolder will make a temporary folder,
//and then clone all files grafonnet lib, dashboard config file and extension files to it
//will return a temporary folder path.
func (b *Builder) cloneAllFilesToTempFolder() (string, error) {
	tmpFolder, err := b.makeTempFolder()
	if err != nil {
		return "", fmt.Errorf("could not make temporary folder: %w", err)
	}

	grafonnetLibPath, err := fileio.GetAbsolutePathFromRepoRoot(grafonnetRelativePath)
	if err != nil {
		return "", fmt.Errorf("fileio.GetAbsolutePathFromRepoRoot: %w", err)
	}

	err = copy.DirCopy(grafonnetLibPath, tmpFolder+"/grafonnet", copy.Content, false)
	if err != nil {
		return "", fmt.Errorf("could not copy needed files to temporary folder")
	}

	if err = fileio.WriteFileByIOReader(b.dbConfigFile, tmpFolder+"/"+configName); err != nil {
		return "", fmt.Errorf("could not create dashboard config temporary file: %w", err)
	}
	for name, file := range b.extensionFiles {
		if err = fileio.WriteFileByIOReader(file, tmpFolder+"/"+name); err != nil {
			return "", fmt.Errorf("could not create dashboard extension temporary file %s: %w", tmpFolder+"/"+name, err)
		}
	}

	return tmpFolder, nil
}

func (b *Builder) makeTempFolder() (string, error) {
	srcDir, err := os.MkdirTemp("", "grafana_builder")
	if err != nil {
		return "", err
	}

	return srcDir, nil
}

func (b *Builder) importDashboardConfigToGrafanaConfig() error {
	if len(b.grafanaCfg) == 0 {
		return nil
	}

	newData := make([]byte, 0)
	t := 0
	err := fileio.VisitFileLine(b.grafanaCfg, func(line []byte) bool {
		newData = append(newData, line...)
		newData = append(newData, []byte("\n")...)
		s := string(line)
		switch t {
		case 0:
			if strings.HasPrefix(s, "dashboards:") {
				t = 1
			}
		case 1:
			if strings.HasPrefix(strings.TrimSpace(s), "backend:") {
				t = 2
				// insert new line
				newLine := fmt.Sprintf("    %s:\n      file: %s\n", b.dashboardProvider, b.relatePath)
				newData = append(newData, []byte(newLine)...)
			}
		}
		return true
	})
	if err != nil {
		return fmt.Errorf("fileio.VisitFileLine: %w", err)
	}

	err = ioutil.WriteFile(b.grafanaDstCfg, newData, 0600)
	if err != nil {
		return fmt.Errorf("could not save grafan config file %s: %w", b.grafanaDstCfg, err)
	}

	return nil
}
