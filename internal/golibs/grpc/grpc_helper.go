package grpc

import (
	"fmt"

	"github.com/manabie-com/backend/internal/golibs/stringutil"
)

type Helper struct {
	srv           Services
	ExceptionList []string
}

func (hp *Helper) AddItems(srv Services) {
	if hp.srv == nil {
		hp.srv = make(Services)
	}
	for k := range srv {
		hp.srv[k] = srv[k]
	}
}

func (hp *Helper) GRPCMethods() Services {
	_ = hp.srv.RemoveByFullMethodNames(hp.ExceptionList)
	return hp.srv
}

func (hp *Helper) ParseFromProtoFiles(files []string) error {
	res, err := hp.parseFromProtoFiles(files)
	if err != nil {
		return err
	}
	hp.AddItems(res)
	return nil
}

func (hp *Helper) parseFromProtoFiles(files []string) (Services, error) {
	res, err := ServicesFromProtoFile(files)
	if err != nil {
		return nil, fmt.Errorf("ServicesFromProtoFile: %w", err)
	}
	return res, nil
}

func (hp *Helper) AddFullMethods(methods []string) error {
	res, err := ServicesFromFullMethods(methods)
	if err != nil {
		return fmt.Errorf("ServicesFromFullMethods: %w", err)
	}
	hp.AddItems(res)
	return nil
}

// ValidateByProtoFiles will validate list grpc are defined in files or not
func (hp *Helper) ValidateByProtoFiles(files []string) error {
	if len(files) == 0 {
		return fmt.Errorf("need at least one input file")
	}
	srv, err := hp.parseFromProtoFiles(files)
	if err != nil {
		return fmt.Errorf("parseFromProtoFiles: %w", err)
	}

	s := stringutil.SliceElementsDiff(hp.srv.GRPCMethods(), srv.GRPCMethods())
	if len(s) != 0 {
		return fmt.Errorf("(%v) methods is not in input files", s)
	}

	return nil
}

// ValidateByGeneratedProtoDir will validate list grpc are defined in Go files
//  which are generated by protoc-gen-go
func (hp *Helper) ValidateByGeneratedProtoDir(dir string) error {
	// TODO: do later
	return nil
}
