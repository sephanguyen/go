// Code generated by mockery. DO NOT EDIT.

// This file can be generated by running: make gen-mock-repo

package bootstrap
import (
	context "context"

	gin "github.com/gin-gonic/gin"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	prometheus "github.com/prometheus/client_golang/prometheus"

	view "go.opencensus.io/stats/view"
)

// MockAllService is an autogenerated mock type for the AllServicer type
type MockAllService[T interface{}] struct {
	mock.Mock
}

// GracefulShutdown provides a mock function with given fields: _a0
func (_m *MockAllService[T]) GracefulShutdown(_a0 context.Context) {
	_m.Called(_a0)
}

// InitDependencies provides a mock function with given fields: _a0, _a1
func (_m *MockAllService[T]) InitDependencies(_a0 T, _a1 *Resources) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(T, *Resources) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitKafkaConsumers provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockAllService[T]) InitKafkaConsumers(_a0 context.Context, _a1 T, _a2 *Resources) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, T, *Resources) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterNatsSubscribers provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockAllService[T]) RegisterNatsSubscribers(_a0 context.Context, _a1 T, _a2 *Resources) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, T, *Resources) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServerName provides a mock function with given fields:
func (_m *MockAllService[T]) ServerName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SetupGRPC provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockAllService[T]) SetupGRPC(_a0 context.Context, _a1 *grpc.Server, _a2 T, _a3 *Resources) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *grpc.Server, T, *Resources) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetupHTTP provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockAllService[T]) SetupHTTP(_a0 T, _a1 *gin.Engine, _a2 *Resources) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(T, *gin.Engine, *Resources) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithOpencensusViews provides a mock function with given fields:
func (_m *MockAllService[T]) WithOpencensusViews() []*view.View {
	ret := _m.Called()

	var r0 []*view.View
	if rf, ok := ret.Get(0).(func() []*view.View); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*view.View)
		}
	}

	return r0
}

// WithPrometheusCollectors provides a mock function with given fields: _a0
func (_m *MockAllService[T]) WithPrometheusCollectors(_a0 *Resources) []prometheus.Collector {
	ret := _m.Called(_a0)

	var r0 []prometheus.Collector
	if rf, ok := ret.Get(0).(func(*Resources) []prometheus.Collector); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]prometheus.Collector)
		}
	}

	return r0
}

// InitMetricsValue provides a mock function with given fields:
func (_m *MockAllService[T]) InitMetricsValue() {
	_m.Called()
}

// WithServerOptions provides a mock function with given fields:
func (_m *MockAllService[T]) WithServerOptions() []grpc.ServerOption {
	ret := _m.Called()

	var r0 []grpc.ServerOption
	if rf, ok := ret.Get(0).(func() []grpc.ServerOption); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]grpc.ServerOption)
		}
	}

	return r0
}

// WithStreamServerInterceptors provides a mock function with given fields: _a0, _a1
func (_m *MockAllService[T]) WithStreamServerInterceptors(_a0 T, _a1 *Resources) []grpc.StreamServerInterceptor {
	ret := _m.Called(_a0, _a1)

	var r0 []grpc.StreamServerInterceptor
	if rf, ok := ret.Get(0).(func(T, *Resources) []grpc.StreamServerInterceptor); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]grpc.StreamServerInterceptor)
		}
	}

	return r0
}

// WithUnaryServerInterceptors provides a mock function with given fields: _a0, _a1
func (_m *MockAllService[T]) WithUnaryServerInterceptors(_a0 T, _a1 *Resources) []grpc.UnaryServerInterceptor {
	ret := _m.Called(_a0, _a1)

	var r0 []grpc.UnaryServerInterceptor
	if rf, ok := ret.Get(0).(func(T, *Resources) []grpc.UnaryServerInterceptor); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]grpc.UnaryServerInterceptor)
		}
	}

	return r0
}

type mockConstructorTestingTNewMockAllService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockAllService creates a new instance of MockAllService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockAllService[T interface{}](t mockConstructorTestingTNewMockAllService) *MockAllService[T] {
	mock := &MockAllService[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
