// Code generated by mockery. DO NOT EDIT.

// This file can be generated by running: make gen-mock-repo

package firebase

import (
	context "context"

	messaging "firebase.google.com/go/v4/messaging"

	mock "github.com/stretchr/testify/mock"
)

// FCMClientV4 is an autogenerated mock type for the FCMClientV4 type
type MockFCMClientV4 struct {
	mock.Mock
}

// Send provides a mock function with given fields: _a0, _a1
func (_m *MockFCMClientV4) Send(_a0 context.Context, _a1 *messaging.Message) (string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *messaging.Message) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *messaging.Message) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMulticast provides a mock function with given fields: _a0, _a1
func (_m *MockFCMClientV4) SendMulticast(_a0 context.Context, _a1 *messaging.MulticastMessage) (*messaging.BatchResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *messaging.BatchResponse
	if rf, ok := ret.Get(0).(func(context.Context, *messaging.MulticastMessage) *messaging.BatchResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*messaging.BatchResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *messaging.MulticastMessage) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFCMClientV4 interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockFCMClientV4 creates a new instance of MockFCMClientV4. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockFCMClientV4(t mockConstructorTestingTNewFCMClientV4) *MockFCMClientV4 {
	mock := &MockFCMClientV4{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
