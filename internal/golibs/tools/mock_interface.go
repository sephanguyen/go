package tools

import (
	"fmt"
	"path/filepath"
	"runtime"
	"strings"

	mockerycmd "github.com/vektra/mockery/v2/cmd"
	mockeryconfig "github.com/vektra/mockery/v2/pkg/config"
)

var (
	baseDir string
	mockDir string
)

func init() {
	_, fp, _, ok := runtime.Caller(0)
	if !ok {
		panic("failed to get file location: runtime.Caller(0) failed")
	}
	baseDir = filepath.Join(filepath.Dir(fp), "../../../")
	mockDir = filepath.Join(baseDir, "mock")
}

// GenMockInterfaces generates mock struct for interfaces using mockery.
// interfaces is a map containing path and names of interfaces to be mocked.
func GenMockInterfaces(interfaces map[string][]string) error {
	for path, inames := range interfaces {
		for _, iname := range inames {
			if err := genMockInterface(path, iname); err != nil {
				return err
			}
		}
	}
	return nil
}

func genMockInterface(path, interfaceName string) error {
	if !strings.HasPrefix(path, "internal/") {
		return fmt.Errorf("only paths starting with \"internal/\" is allowed (got %q)", path)
	}

	app := getRootMockeyApp(path, interfaceName)
	return app.Run()
}

func getRootMockeyApp(path, interfaceName string) *mockerycmd.RootApp {
	return &mockerycmd.RootApp{
		Config: mockeryconfig.Config{
			Case:                 "underscore",
			DisableVersionString: true,
			Exported:             false,
			LogLevel:             "info",
			Name:                 interfaceName,
			Note:                 "This file can be generated by running: make gen-mock-repo",
			Packageprefix:        "mock_",
			Output:               mockPathFrom(path),
			SrcPkg:               getSourcePackage(path),
			UnrollVariadic:       true,
		},
	}
}

func getSourcePackage(path string) string {
	return "github.com/manabie-com/backend/" + path
}
