package repo

import (
	"testing"
	"time"

	"github.com/manabie-com/backend/internal/golibs/database"
	"github.com/manabie-com/backend/internal/lessonmgmt/modules/lesson/domain"

	"github.com/jackc/pgtype"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestNewLessonFromEntity_TeachingMethodIndividual(t *testing.T) {
	t.Parallel()
	now := time.Time{}
	tcs := []struct {
		name   string
		lesson *domain.Lesson
		dto    *Lesson
	}{
		{
			name: "full fields",
			lesson: &domain.Lesson{
				LessonID:         "lesson-id-1",
				Name:             "name 1",
				LocationID:       "center-id-1",
				CreatedAt:        now,
				UpdatedAt:        now,
				StartTime:        now.Add(2 * time.Minute),
				EndTime:          now.Add(20 * time.Minute),
				SchedulingStatus: domain.LessonSchedulingStatusPublished,
				TeachingMedium:   domain.LessonTeachingMediumOnline,
				TeachingMethod:   domain.LessonTeachingMethodIndividual,
				Learners: domain.LessonLearners{
					{
						LearnerID:    "learner-id-1",
						CourseID:     "course-id-1",
						AttendStatus: domain.StudentAttendStatusAbsent,
					},
					{
						LearnerID:    "learner-id-2",
						CourseID:     "course-id-1",
						AttendStatus: domain.StudentAttendStatusInformedAbsent,
					},
					{
						LearnerID:    "learner-id-3",
						CourseID:     "course-id-3",
						AttendStatus: domain.StudentAttendStatusEmpty,
					},
				},
				Teachers: domain.LessonTeachers{
					{
						TeacherID: "teacher-id-1",
					},
					{
						TeacherID: "teacher-id-2",
					},
				},
				Material: &domain.LessonMaterial{
					MediaIDs: []string{"media-id-1", "media-id-2"},
				},
				SchedulerID:      "scheduler-id",
				ZoomLink:         "zoom-link",
				ZoomOwnerID:      "zoom-owner-id",
				ZoomID:           "zoom-id",
				ZoomOccurrenceID: "zoom-occurrence-id",
				ClassDoOwnerID:   "classDo-owner-id",
				ClassDoLink:      "classDo-link",
				ClassDoRoomID:    "classDo-room-id",
				LessonCapacity:   10,
				PreparationTime:  110,
				BreakTime:        15,
			},
			dto: &Lesson{
				LessonID:             database.Text("lesson-id-1"),
				Name:                 database.Text("name 1"),
				TeacherID:            database.Text("teacher-id-1"),
				CourseID:             database.Text("course-id-1"),
				ControlSettings:      pgtype.JSONB{Status: pgtype.Null},
				CreatedAt:            database.Timestamptz(now),
				UpdatedAt:            database.Timestamptz(now),
				DeletedAt:            pgtype.Timestamptz{Status: pgtype.Null},
				EndAt:                pgtype.Timestamptz{Status: pgtype.Null},
				StartTime:            database.Timestamptz(now.Add(2 * time.Minute)),
				EndTime:              database.Timestamptz(now.Add(20 * time.Minute)),
				LessonGroupID:        pgtype.Text{Status: pgtype.Null},
				RoomID:               pgtype.Text{Status: pgtype.Null},
				LessonType:           pgtype.Text{Status: pgtype.Null},
				Status:               pgtype.Text{Status: pgtype.Null},
				StreamLearnerCounter: pgtype.Int4{Status: pgtype.Null},
				LearnerIds:           pgtype.TextArray{Status: pgtype.Null},
				RoomState:            pgtype.JSONB{Status: pgtype.Null},
				TeachingModel:        pgtype.Text{Status: pgtype.Null},
				ClassID:              pgtype.Text{Status: pgtype.Null},
				CenterID:             database.Text("center-id-1"),
				TeachingMedium:       database.Text(string(domain.LessonTeachingMediumOnline)),
				TeachingMethod:       database.Text(string(domain.LessonTeachingMethodIndividual)),
				SchedulingStatus:     database.Text(string(domain.LessonSchedulingStatusPublished)),
				SchedulerID:          database.Text("scheduler-id"),
				IsLocked:             database.Bool(false),
				ZoomLink:             database.Text("zoom-link"),
				ZoomOwnerID:          database.Text("zoom-owner-id"),
				ZoomID:               database.Text("zoom-id"),
				ZoomOccurrenceID:     database.Text("zoom-occurrence-id"),
				ClassDoOwnerID:       database.Text("classDo-owner-id"),
				ClassDoLink:          database.Text("classDo-link"),
				ClassDoRoomID:        database.Text("classDo-room-id"),
				LessonCapacity:       database.Int4(10),
				PreparationTime:      database.Int4(110),
				BreakTime:            database.Int4(15),
			},
		},
		{
			name: "missing teacher field",
			lesson: &domain.Lesson{
				LessonID:         "lesson-id-1",
				Name:             "name 1",
				LocationID:       "center-id-1",
				CreatedAt:        now,
				UpdatedAt:        now,
				StartTime:        now.Add(2 * time.Minute),
				EndTime:          now.Add(20 * time.Minute),
				SchedulingStatus: domain.LessonSchedulingStatusPublished,
				TeachingMedium:   domain.LessonTeachingMediumOnline,
				TeachingMethod:   domain.LessonTeachingMethodIndividual,
				Learners: domain.LessonLearners{
					{
						LearnerID:    "learner-id-1",
						CourseID:     "course-id-1",
						AttendStatus: domain.StudentAttendStatusAbsent,
					},
					{
						LearnerID:    "learner-id-2",
						CourseID:     "course-id-1",
						AttendStatus: domain.StudentAttendStatusInformedAbsent,
					},
					{
						LearnerID:    "learner-id-3",
						CourseID:     "course-id-3",
						AttendStatus: domain.StudentAttendStatusEmpty,
					},
				},
				Material: &domain.LessonMaterial{
					MediaIDs: []string{"media-id-1", "media-id-2"},
				},
				SchedulerID:     "scheduler-id",
				LessonCapacity:  20,
				PreparationTime: 110,
				BreakTime:       15,
			},
			dto: &Lesson{
				LessonID:             database.Text("lesson-id-1"),
				Name:                 database.Text("name 1"),
				TeacherID:            pgtype.Text{Status: pgtype.Null},
				CourseID:             database.Text("course-id-1"),
				ControlSettings:      pgtype.JSONB{Status: pgtype.Null},
				CreatedAt:            database.Timestamptz(now),
				UpdatedAt:            database.Timestamptz(now),
				DeletedAt:            pgtype.Timestamptz{Status: pgtype.Null},
				EndAt:                pgtype.Timestamptz{Status: pgtype.Null},
				StartTime:            database.Timestamptz(now.Add(2 * time.Minute)),
				EndTime:              database.Timestamptz(now.Add(20 * time.Minute)),
				LessonGroupID:        pgtype.Text{Status: pgtype.Null},
				RoomID:               pgtype.Text{Status: pgtype.Null},
				LessonType:           pgtype.Text{Status: pgtype.Null},
				Status:               pgtype.Text{Status: pgtype.Null},
				StreamLearnerCounter: pgtype.Int4{Status: pgtype.Null},
				LearnerIds:           pgtype.TextArray{Status: pgtype.Null},
				RoomState:            pgtype.JSONB{Status: pgtype.Null},
				TeachingModel:        pgtype.Text{Status: pgtype.Null},
				ClassID:              pgtype.Text{Status: pgtype.Null},
				CenterID:             database.Text("center-id-1"),
				TeachingMedium:       database.Text(string(domain.LessonTeachingMediumOnline)),
				TeachingMethod:       database.Text(string(domain.LessonTeachingMethodIndividual)),
				SchedulingStatus:     database.Text(string(domain.LessonSchedulingStatusPublished)),
				SchedulerID:          database.Text("scheduler-id"),
				IsLocked:             database.Bool(false),
				ZoomLink:             pgtype.Text{Status: pgtype.Present},
				ZoomOwnerID:          pgtype.Text{Status: pgtype.Present},
				ZoomID:               pgtype.Text{Status: pgtype.Present},
				ZoomOccurrenceID:     pgtype.Text{Status: pgtype.Present},
				ClassDoOwnerID:       pgtype.Text{Status: pgtype.Present},
				ClassDoLink:          pgtype.Text{Status: pgtype.Present},
				ClassDoRoomID:        pgtype.Text{Status: pgtype.Present},
				LessonCapacity:       database.Int4(20),
				PreparationTime:      database.Int4(110),
				BreakTime:            database.Int4(15),
			},
		},
		{
			name: "missing learner field",
			lesson: &domain.Lesson{
				LessonID:         "lesson-id-1",
				Name:             "name 1",
				LocationID:       "center-id-1",
				CreatedAt:        now,
				UpdatedAt:        now,
				StartTime:        now.Add(2 * time.Minute),
				EndTime:          now.Add(20 * time.Minute),
				SchedulingStatus: domain.LessonSchedulingStatusPublished,
				TeachingMedium:   domain.LessonTeachingMediumOnline,
				TeachingMethod:   domain.LessonTeachingMethodIndividual,
				Teachers: domain.LessonTeachers{
					{
						TeacherID: "teacher-id-1",
					},
					{
						TeacherID: "teacher-id-2",
					},
				},
				Material: &domain.LessonMaterial{
					MediaIDs: []string{"media-id-1", "media-id-2"},
				},
				SchedulerID:     "scheduler-id",
				LessonCapacity:  30,
				PreparationTime: -1,
				BreakTime:       -1,
			},
			dto: &Lesson{
				LessonID:             database.Text("lesson-id-1"),
				Name:                 database.Text("name 1"),
				TeacherID:            database.Text("teacher-id-1"),
				CourseID:             pgtype.Text{Status: pgtype.Null},
				ControlSettings:      pgtype.JSONB{Status: pgtype.Null},
				CreatedAt:            database.Timestamptz(now),
				UpdatedAt:            database.Timestamptz(now),
				DeletedAt:            pgtype.Timestamptz{Status: pgtype.Null},
				EndAt:                pgtype.Timestamptz{Status: pgtype.Null},
				StartTime:            database.Timestamptz(now.Add(2 * time.Minute)),
				EndTime:              database.Timestamptz(now.Add(20 * time.Minute)),
				LessonGroupID:        pgtype.Text{Status: pgtype.Null},
				RoomID:               pgtype.Text{Status: pgtype.Null},
				LessonType:           pgtype.Text{Status: pgtype.Null},
				Status:               pgtype.Text{Status: pgtype.Null},
				StreamLearnerCounter: pgtype.Int4{Status: pgtype.Null},
				LearnerIds:           pgtype.TextArray{Status: pgtype.Null},
				RoomState:            pgtype.JSONB{Status: pgtype.Null},
				TeachingModel:        pgtype.Text{Status: pgtype.Null},
				ClassID:              pgtype.Text{Status: pgtype.Null},
				CenterID:             database.Text("center-id-1"),
				TeachingMedium:       database.Text(string(domain.LessonTeachingMediumOnline)),
				TeachingMethod:       database.Text(string(domain.LessonTeachingMethodIndividual)),
				SchedulingStatus:     database.Text(string(domain.LessonSchedulingStatusPublished)),
				SchedulerID:          database.Text("scheduler-id"),
				IsLocked:             database.Bool(false),
				ZoomLink:             pgtype.Text{Status: pgtype.Present},
				ZoomOwnerID:          pgtype.Text{Status: pgtype.Present},
				ZoomID:               pgtype.Text{Status: pgtype.Present},
				ZoomOccurrenceID:     pgtype.Text{Status: pgtype.Present},
				ClassDoOwnerID:       pgtype.Text{Status: pgtype.Present},
				ClassDoLink:          pgtype.Text{Status: pgtype.Present},
				ClassDoRoomID:        pgtype.Text{Status: pgtype.Present},
				LessonCapacity:       database.Int4(30),
				PreparationTime:      pgtype.Int4{Status: pgtype.Null},
				BreakTime:            pgtype.Int4{Status: pgtype.Null},
			},
		},
	}

	for _, tc := range tcs {
		t.Run(tc.name, func(t *testing.T) {
			actual, err := NewLessonFromEntity(tc.lesson)
			require.NoError(t, err)
			assert.EqualValues(t, tc.dto, actual)
		})
	}
}
func TestNewLessonFromEntity_TeachingMethodGroup(t *testing.T) {
	t.Parallel()
	now := time.Time{}
	tcs := []struct {
		name     string
		lesson   *domain.Lesson
		dto      *Lesson
		hasError bool
	}{
		{
			name: "full fields",
			lesson: &domain.Lesson{
				LessonID:         "lesson-id-1",
				Name:             "name 1",
				LocationID:       "center-id-1",
				CreatedAt:        now,
				UpdatedAt:        now,
				StartTime:        now.Add(2 * time.Minute),
				EndTime:          now.Add(20 * time.Minute),
				SchedulingStatus: domain.LessonSchedulingStatusPublished,
				TeachingMedium:   domain.LessonTeachingMediumOnline,
				TeachingMethod:   domain.LessonTeachingMethodGroup,
				CourseID:         "test-group-course-id-1",
				ClassID:          "test-group-class-id-1",
				Learners: domain.LessonLearners{
					{
						LearnerID:    "learner-id-1",
						CourseID:     "course-id-1",
						AttendStatus: domain.StudentAttendStatusAbsent,
					},
					{
						LearnerID:    "learner-id-2",
						CourseID:     "course-id-1",
						AttendStatus: domain.StudentAttendStatusInformedAbsent,
					},
					{
						LearnerID:    "learner-id-3",
						CourseID:     "course-id-3",
						AttendStatus: domain.StudentAttendStatusEmpty,
					},
				},
				Teachers: domain.LessonTeachers{
					{
						TeacherID: "teacher-id-1",
					},
					{
						TeacherID: "teacher-id-2",
					},
				},
				Material: &domain.LessonMaterial{
					MediaIDs: []string{"media-id-1", "media-id-2"},
				},
				SchedulerID:     "scheduler-id",
				LessonCapacity:  10,
				PreparationTime: 200,
				BreakTime:       15,
			},
			dto: &Lesson{
				LessonID:             database.Text("lesson-id-1"),
				Name:                 database.Text("name 1"),
				TeacherID:            database.Text("teacher-id-1"),
				CourseID:             database.Text("test-group-course-id-1"),
				ControlSettings:      pgtype.JSONB{Status: pgtype.Null},
				CreatedAt:            database.Timestamptz(now),
				UpdatedAt:            database.Timestamptz(now),
				DeletedAt:            pgtype.Timestamptz{Status: pgtype.Null},
				EndAt:                pgtype.Timestamptz{Status: pgtype.Null},
				StartTime:            database.Timestamptz(now.Add(2 * time.Minute)),
				EndTime:              database.Timestamptz(now.Add(20 * time.Minute)),
				LessonGroupID:        pgtype.Text{Status: pgtype.Null},
				RoomID:               pgtype.Text{Status: pgtype.Null},
				LessonType:           pgtype.Text{Status: pgtype.Null},
				Status:               pgtype.Text{Status: pgtype.Null},
				StreamLearnerCounter: pgtype.Int4{Status: pgtype.Null},
				LearnerIds:           pgtype.TextArray{Status: pgtype.Null},
				RoomState:            pgtype.JSONB{Status: pgtype.Null},
				TeachingModel:        pgtype.Text{Status: pgtype.Null},
				ClassID:              database.Text("test-group-class-id-1"),
				CenterID:             database.Text("center-id-1"),
				TeachingMedium:       database.Text(string(domain.LessonTeachingMediumOnline)),
				TeachingMethod:       database.Text(string(domain.LessonTeachingMethodGroup)),
				SchedulingStatus:     database.Text(string(domain.LessonSchedulingStatusPublished)),
				SchedulerID:          database.Text("scheduler-id"),
				IsLocked:             database.Bool(false),
				ZoomLink:             pgtype.Text{Status: pgtype.Present},
				ZoomOwnerID:          pgtype.Text{Status: pgtype.Present},
				ZoomID:               pgtype.Text{Status: pgtype.Present},
				ZoomOccurrenceID:     pgtype.Text{Status: pgtype.Present},
				ClassDoOwnerID:       pgtype.Text{Status: pgtype.Present},
				ClassDoLink:          pgtype.Text{Status: pgtype.Present},
				ClassDoRoomID:        pgtype.Text{Status: pgtype.Present},
				LessonCapacity:       database.Int4(10),
				PreparationTime:      database.Int4(200),
				BreakTime:            database.Int4(15),
			},
			hasError: false,
		},
		{
			name: "missing teacher field",
			lesson: &domain.Lesson{
				LessonID:         "lesson-id-1",
				Name:             "name 1",
				LocationID:       "center-id-1",
				CourseID:         "test-group-course-id-1",
				ClassID:          "test-group-class-id-1",
				CreatedAt:        now,
				UpdatedAt:        now,
				StartTime:        now.Add(2 * time.Minute),
				EndTime:          now.Add(20 * time.Minute),
				SchedulingStatus: domain.LessonSchedulingStatusPublished,
				TeachingMedium:   domain.LessonTeachingMediumOnline,
				TeachingMethod:   domain.LessonTeachingMethodGroup,
				Learners: domain.LessonLearners{
					{
						LearnerID:    "learner-id-1",
						CourseID:     "course-id-1",
						AttendStatus: domain.StudentAttendStatusAbsent,
					},
					{
						LearnerID:    "learner-id-2",
						CourseID:     "course-id-1",
						AttendStatus: domain.StudentAttendStatusInformedAbsent,
					},
					{
						LearnerID:    "learner-id-3",
						CourseID:     "course-id-3",
						AttendStatus: domain.StudentAttendStatusEmpty,
					},
				},
				Material: &domain.LessonMaterial{
					MediaIDs: []string{"media-id-1", "media-id-2"},
				},
				SchedulerID:     "scheduler-id",
				LessonCapacity:  20,
				PreparationTime: 200,
				BreakTime:       15,
			},
			dto: &Lesson{
				LessonID:             database.Text("lesson-id-1"),
				Name:                 database.Text("name 1"),
				TeacherID:            pgtype.Text{Status: pgtype.Null},
				CourseID:             database.Text("test-group-course-id-1"),
				ControlSettings:      pgtype.JSONB{Status: pgtype.Null},
				CreatedAt:            database.Timestamptz(now),
				UpdatedAt:            database.Timestamptz(now),
				DeletedAt:            pgtype.Timestamptz{Status: pgtype.Null},
				EndAt:                pgtype.Timestamptz{Status: pgtype.Null},
				StartTime:            database.Timestamptz(now.Add(2 * time.Minute)),
				EndTime:              database.Timestamptz(now.Add(20 * time.Minute)),
				LessonGroupID:        pgtype.Text{Status: pgtype.Null},
				RoomID:               pgtype.Text{Status: pgtype.Null},
				LessonType:           pgtype.Text{Status: pgtype.Null},
				Status:               pgtype.Text{Status: pgtype.Null},
				StreamLearnerCounter: pgtype.Int4{Status: pgtype.Null},
				LearnerIds:           pgtype.TextArray{Status: pgtype.Null},
				RoomState:            pgtype.JSONB{Status: pgtype.Null},
				TeachingModel:        pgtype.Text{Status: pgtype.Null},
				ClassID:              database.Text("test-group-class-id-1"),
				CenterID:             database.Text("center-id-1"),
				TeachingMedium:       database.Text(string(domain.LessonTeachingMediumOnline)),
				TeachingMethod:       database.Text(string(domain.LessonTeachingMethodGroup)),
				SchedulingStatus:     database.Text(string(domain.LessonSchedulingStatusPublished)),
				SchedulerID:          database.Text("scheduler-id"),
				IsLocked:             database.Bool(false),
				ZoomLink:             pgtype.Text{Status: pgtype.Present},
				ZoomOwnerID:          pgtype.Text{Status: pgtype.Present},
				ZoomID:               pgtype.Text{Status: pgtype.Present},
				ZoomOccurrenceID:     pgtype.Text{Status: pgtype.Present},
				ClassDoOwnerID:       pgtype.Text{Status: pgtype.Present},
				ClassDoLink:          pgtype.Text{Status: pgtype.Present},
				ClassDoRoomID:        pgtype.Text{Status: pgtype.Present},
				LessonCapacity:       database.Int4(20),
				PreparationTime:      database.Int4(200),
				BreakTime:            database.Int4(15),
			},
			hasError: false,
		},
		{
			name: "missing learner field",
			lesson: &domain.Lesson{
				LessonID:         "lesson-id-1",
				Name:             "name 1",
				LocationID:       "center-id-1",
				CreatedAt:        now,
				UpdatedAt:        now,
				StartTime:        now.Add(2 * time.Minute),
				EndTime:          now.Add(20 * time.Minute),
				SchedulingStatus: domain.LessonSchedulingStatusPublished,
				TeachingMedium:   domain.LessonTeachingMediumOnline,
				TeachingMethod:   domain.LessonTeachingMethodGroup,
				CourseID:         "test-group-course-id-1",
				ClassID:          "test-group-class-id-1",
				Teachers: domain.LessonTeachers{
					{
						TeacherID: "teacher-id-1",
					},
					{
						TeacherID: "teacher-id-2",
					},
				},
				Material: &domain.LessonMaterial{
					MediaIDs: []string{"media-id-1", "media-id-2"},
				},
				SchedulerID:     "scheduler-id",
				LessonCapacity:  30,
				PreparationTime: 120,
				BreakTime:       30,
			},
			dto: &Lesson{
				LessonID:             database.Text("lesson-id-1"),
				Name:                 database.Text("name 1"),
				TeacherID:            database.Text("teacher-id-1"),
				CourseID:             database.Text("test-group-course-id-1"),
				ControlSettings:      pgtype.JSONB{Status: pgtype.Null},
				CreatedAt:            database.Timestamptz(now),
				UpdatedAt:            database.Timestamptz(now),
				DeletedAt:            pgtype.Timestamptz{Status: pgtype.Null},
				EndAt:                pgtype.Timestamptz{Status: pgtype.Null},
				StartTime:            database.Timestamptz(now.Add(2 * time.Minute)),
				EndTime:              database.Timestamptz(now.Add(20 * time.Minute)),
				LessonGroupID:        pgtype.Text{Status: pgtype.Null},
				RoomID:               pgtype.Text{Status: pgtype.Null},
				LessonType:           pgtype.Text{Status: pgtype.Null},
				Status:               pgtype.Text{Status: pgtype.Null},
				StreamLearnerCounter: pgtype.Int4{Status: pgtype.Null},
				LearnerIds:           pgtype.TextArray{Status: pgtype.Null},
				RoomState:            pgtype.JSONB{Status: pgtype.Null},
				TeachingModel:        pgtype.Text{Status: pgtype.Null},
				ClassID:              database.Text("test-group-class-id-1"),
				CenterID:             database.Text("center-id-1"),
				TeachingMedium:       database.Text(string(domain.LessonTeachingMediumOnline)),
				TeachingMethod:       database.Text(string(domain.LessonTeachingMethodGroup)),
				SchedulingStatus:     database.Text(string(domain.LessonSchedulingStatusPublished)),
				SchedulerID:          database.Text("scheduler-id"),
				IsLocked:             database.Bool(false),
				ZoomLink:             pgtype.Text{Status: pgtype.Present},
				ZoomOwnerID:          pgtype.Text{Status: pgtype.Present},
				ZoomID:               pgtype.Text{Status: pgtype.Present},
				ZoomOccurrenceID:     pgtype.Text{Status: pgtype.Present},
				ClassDoOwnerID:       pgtype.Text{Status: pgtype.Present},
				ClassDoLink:          pgtype.Text{Status: pgtype.Present},
				ClassDoRoomID:        pgtype.Text{Status: pgtype.Present},
				LessonCapacity:       database.Int4(30),
				PreparationTime:      database.Int4(120),
				BreakTime:            database.Int4(30),
			},
			hasError: false,
		},
		{
			name: "missing course_id field",
			lesson: &domain.Lesson{
				LessonID:         "lesson-id-1",
				Name:             "name 1",
				LocationID:       "center-id-1",
				CreatedAt:        now,
				UpdatedAt:        now,
				StartTime:        now.Add(2 * time.Minute),
				EndTime:          now.Add(20 * time.Minute),
				SchedulingStatus: domain.LessonSchedulingStatusPublished,
				TeachingMedium:   domain.LessonTeachingMediumOnline,
				TeachingMethod:   domain.LessonTeachingMethodGroup,
				ClassID:          "test-group-class-id-1",
				Teachers: domain.LessonTeachers{
					{
						TeacherID: "teacher-id-1",
					},
					{
						TeacherID: "teacher-id-2",
					},
				},
				Material: &domain.LessonMaterial{
					MediaIDs: []string{"media-id-1", "media-id-2"},
				},
				SchedulerID:     "scheduler-id",
				LessonCapacity:  40,
				PreparationTime: -1,
				BreakTime:       -1,
			},
			dto: &Lesson{
				LessonID:             database.Text("lesson-id-1"),
				Name:                 database.Text("name 1"),
				TeacherID:            database.Text("teacher-id-1"),
				CourseID:             pgtype.Text{Status: pgtype.Null},
				ControlSettings:      pgtype.JSONB{Status: pgtype.Null},
				CreatedAt:            database.Timestamptz(now),
				UpdatedAt:            database.Timestamptz(now),
				DeletedAt:            pgtype.Timestamptz{Status: pgtype.Null},
				EndAt:                pgtype.Timestamptz{Status: pgtype.Null},
				StartTime:            database.Timestamptz(now.Add(2 * time.Minute)),
				EndTime:              database.Timestamptz(now.Add(20 * time.Minute)),
				LessonGroupID:        pgtype.Text{Status: pgtype.Null},
				RoomID:               pgtype.Text{Status: pgtype.Null},
				LessonType:           pgtype.Text{Status: pgtype.Null},
				Status:               pgtype.Text{Status: pgtype.Null},
				StreamLearnerCounter: pgtype.Int4{Status: pgtype.Null},
				LearnerIds:           pgtype.TextArray{Status: pgtype.Null},
				RoomState:            pgtype.JSONB{Status: pgtype.Null},
				TeachingModel:        pgtype.Text{Status: pgtype.Null},
				ClassID:              database.Text("test-group-class-id-1"),
				CenterID:             database.Text("center-id-1"),
				TeachingMedium:       database.Text(string(domain.LessonTeachingMediumOnline)),
				TeachingMethod:       database.Text(string(domain.LessonTeachingMethodGroup)),
				SchedulingStatus:     database.Text(string(domain.LessonSchedulingStatusPublished)),
				SchedulerID:          database.Text("scheduler-id"),
				IsLocked:             database.Bool(false),
				ZoomLink:             pgtype.Text{Status: pgtype.Present},
				ZoomOwnerID:          pgtype.Text{Status: pgtype.Present},
				ZoomID:               pgtype.Text{Status: pgtype.Present},
				ZoomOccurrenceID:     pgtype.Text{Status: pgtype.Present},
				ClassDoOwnerID:       pgtype.Text{Status: pgtype.Present},
				ClassDoLink:          pgtype.Text{Status: pgtype.Present},
				ClassDoRoomID:        pgtype.Text{Status: pgtype.Present},
				LessonCapacity:       database.Int4(40),
				PreparationTime:      pgtype.Int4{Status: pgtype.Null},
				BreakTime:            pgtype.Int4{Status: pgtype.Null},
			},
			hasError: false,
		},
	}

	for _, tc := range tcs {
		t.Run(tc.name, func(t *testing.T) {
			actual, err := NewLessonFromEntity(tc.lesson)
			if tc.hasError {
				require.Error(t, err)
			} else {
				require.NoError(t, err)
			}
			assert.EqualValues(t, tc.dto, actual)
		})
	}
}

func TestLesson_Normalize(t *testing.T) {
	t.Parallel()
	now := time.Time{}

	tcs := []struct {
		name     string
		lesson   *Lesson
		expected *Lesson
	}{
		{
			name: "missing Status, LessonType, TeachingModel, StreamLearnerCounter, LearnerIds field",
			lesson: &Lesson{
				LessonID:             database.Text("lesson-id-1"),
				Name:                 database.Text("name 1"),
				TeacherID:            database.Text("teacher-id-1"),
				CourseID:             database.Text("course-id-1"),
				ControlSettings:      pgtype.JSONB{Status: pgtype.Null},
				CreatedAt:            database.Timestamptz(now),
				UpdatedAt:            database.Timestamptz(now),
				DeletedAt:            pgtype.Timestamptz{Status: pgtype.Null},
				EndAt:                pgtype.Timestamptz{Status: pgtype.Null},
				StartTime:            database.Timestamptz(now.Add(2 * time.Minute)),
				EndTime:              database.Timestamptz(now.Add(20 * time.Minute)),
				LessonGroupID:        database.Text("lesson-gr-id-1"),
				RoomID:               database.Text("room-id-2"),
				LessonType:           pgtype.Text{Status: pgtype.Null},
				Status:               pgtype.Text{Status: pgtype.Null},
				StreamLearnerCounter: pgtype.Int4{Status: pgtype.Null},
				LearnerIds:           pgtype.TextArray{Status: pgtype.Null},
				RoomState:            pgtype.JSONB{Status: pgtype.Null},
				TeachingModel:        pgtype.Text{Status: pgtype.Null},
				ClassID:              database.Text("class-id-2"),
				CenterID:             database.Text("center-id-1"),
				TeachingMedium:       database.Text(string(domain.LessonTeachingMediumOnline)),
				TeachingMethod:       database.Text(string(domain.LessonTeachingMethodIndividual)),
				SchedulingStatus:     database.Text(string(domain.LessonSchedulingStatusPublished)),
				IsLocked:             database.Bool(false),
				ZoomLink:             pgtype.Text{Status: pgtype.Null},
				ZoomOwnerID:          pgtype.Text{Status: pgtype.Null},
				ZoomID:               pgtype.Text{Status: pgtype.Null},
				ZoomOccurrenceID:     pgtype.Text{Status: pgtype.Null},
			},
			expected: &Lesson{
				LessonID:             database.Text("lesson-id-1"),
				Name:                 database.Text("name 1"),
				TeacherID:            database.Text("teacher-id-1"),
				CourseID:             database.Text("course-id-1"),
				ControlSettings:      pgtype.JSONB{Status: pgtype.Null},
				CreatedAt:            database.Timestamptz(now),
				UpdatedAt:            database.Timestamptz(now),
				DeletedAt:            pgtype.Timestamptz{Status: pgtype.Null},
				EndAt:                pgtype.Timestamptz{Status: pgtype.Null},
				StartTime:            database.Timestamptz(now.Add(2 * time.Minute)),
				EndTime:              database.Timestamptz(now.Add(20 * time.Minute)),
				LessonGroupID:        database.Text("lesson-gr-id-1"),
				RoomID:               database.Text("room-id-2"),
				LessonType:           database.Text(string(LessonTypeOnline)),
				Status:               database.Text(string(LessonStatusDraft)),
				StreamLearnerCounter: database.Int4(0),
				LearnerIds:           database.TextArray([]string{}),
				RoomState:            pgtype.JSONB{Status: pgtype.Null},
				TeachingModel:        database.Text(string(LessonTeachingModelIndividual)),
				ClassID:              database.Text("class-id-2"),
				CenterID:             database.Text("center-id-1"),
				TeachingMedium:       database.Text(string(domain.LessonTeachingMediumOnline)),
				TeachingMethod:       database.Text(string(domain.LessonTeachingMethodIndividual)),
				SchedulingStatus:     database.Text(string(domain.LessonSchedulingStatusPublished)),
				IsLocked:             database.Bool(false),
				ZoomLink:             pgtype.Text{Status: pgtype.Null},
				ZoomOwnerID:          pgtype.Text{Status: pgtype.Null},
				ZoomID:               pgtype.Text{Status: pgtype.Null},
				ZoomOccurrenceID:     pgtype.Text{Status: pgtype.Null},
			},
		},
		{
			name: "full fields",
			lesson: &Lesson{
				LessonID:             database.Text("lesson-id-1"),
				Name:                 database.Text("name 1"),
				TeacherID:            database.Text("teacher-id-1"),
				CourseID:             database.Text("course-id-1"),
				ControlSettings:      pgtype.JSONB{Status: pgtype.Null},
				CreatedAt:            database.Timestamptz(now),
				UpdatedAt:            database.Timestamptz(now),
				DeletedAt:            pgtype.Timestamptz{Status: pgtype.Null},
				EndAt:                pgtype.Timestamptz{Status: pgtype.Null},
				StartTime:            database.Timestamptz(now.Add(2 * time.Minute)),
				EndTime:              database.Timestamptz(now.Add(20 * time.Minute)),
				LessonGroupID:        database.Text("lesson-gr-id-1"),
				RoomID:               database.Text("room-id-2"),
				LessonType:           database.Text(string(LessonTypeOffline)),
				Status:               database.Text(string(LessonStatusDraft)),
				StreamLearnerCounter: database.Int4(2),
				LearnerIds:           database.TextArray([]string{"2", "3"}),
				RoomState:            pgtype.JSONB{Status: pgtype.Null},
				TeachingModel:        database.Text(string(LessonTeachingModelGroup)),
				ClassID:              database.Text("class-id-2"),
				CenterID:             database.Text("center-id-1"),
				TeachingMedium:       database.Text(string(domain.LessonTeachingMediumOnline)),
				TeachingMethod:       database.Text(string(domain.LessonTeachingMethodIndividual)),
				SchedulingStatus:     database.Text(string(domain.LessonSchedulingStatusPublished)),
				IsLocked:             database.Bool(false),
				ZoomLink:             pgtype.Text{Status: pgtype.Null},
				ZoomOwnerID:          pgtype.Text{Status: pgtype.Null},
				ZoomID:               pgtype.Text{Status: pgtype.Null},
				ZoomOccurrenceID:     pgtype.Text{Status: pgtype.Null},
			},
			expected: &Lesson{
				LessonID:             database.Text("lesson-id-1"),
				Name:                 database.Text("name 1"),
				TeacherID:            database.Text("teacher-id-1"),
				CourseID:             database.Text("course-id-1"),
				ControlSettings:      pgtype.JSONB{Status: pgtype.Null},
				CreatedAt:            database.Timestamptz(now),
				UpdatedAt:            database.Timestamptz(now),
				DeletedAt:            pgtype.Timestamptz{Status: pgtype.Null},
				EndAt:                pgtype.Timestamptz{Status: pgtype.Null},
				StartTime:            database.Timestamptz(now.Add(2 * time.Minute)),
				EndTime:              database.Timestamptz(now.Add(20 * time.Minute)),
				LessonGroupID:        database.Text("lesson-gr-id-1"),
				RoomID:               database.Text("room-id-2"),
				LessonType:           database.Text(string(LessonTypeOffline)),
				Status:               database.Text(string(LessonStatusDraft)),
				StreamLearnerCounter: database.Int4(2),
				LearnerIds:           database.TextArray([]string{"2", "3"}),
				RoomState:            pgtype.JSONB{Status: pgtype.Null},
				TeachingModel:        database.Text(string(LessonTeachingModelGroup)),
				ClassID:              database.Text("class-id-2"),
				CenterID:             database.Text("center-id-1"),
				TeachingMedium:       database.Text(string(domain.LessonTeachingMediumOnline)),
				TeachingMethod:       database.Text(string(domain.LessonTeachingMethodIndividual)),
				SchedulingStatus:     database.Text(string(domain.LessonSchedulingStatusPublished)),
				IsLocked:             database.Bool(false),
				ZoomLink:             pgtype.Text{Status: pgtype.Null},
				ZoomOwnerID:          pgtype.Text{Status: pgtype.Null},
				ZoomID:               pgtype.Text{Status: pgtype.Null},
				ZoomOccurrenceID:     pgtype.Text{Status: pgtype.Null},
			},
		},
	}

	for _, tc := range tcs {
		t.Run(tc.name, func(t *testing.T) {
			err := tc.lesson.Normalize()
			require.NoError(t, err)
			assert.EqualValues(t, tc.expected, tc.lesson)
		})
	}
}
