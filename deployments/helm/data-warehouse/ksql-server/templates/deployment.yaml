{{- if .Capabilities.APIVersions.Has "apps/v1" }}
apiVersion: apps/v1
{{- else }}
apiVersion: apps/v1beta2
{{- end }}
kind: Deployment
metadata:
  name: {{ template "cp-ksql-server.fullname" . }}
  labels:
    app: {{ template "cp-ksql-server.name" . }}
    chart: {{ template "cp-ksql-server.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    app.kubernetes.io/name: {{ template "cp-ksql-server.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: {{ template "cp-ksql-server.name" . }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "cp-ksql-server.name" . }}
      release: {{ .Release.Name }}
      app.kubernetes.io/name: {{ template "cp-ksql-server.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: {{ template "cp-ksql-server.name" . }}
  template:
    metadata:
      labels:
        app: {{ template "cp-ksql-server.name" . }}
        release: {{ .Release.Name }}
        app.kubernetes.io/name: {{ template "cp-ksql-server.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: {{ template "cp-ksql-server.name" . }}
      {{- if or .Values.podAnnotations .Values.prometheus.jmx.enabled }}
      annotations:
      {{- range $key, $value := .Values.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      {{- if .Values.prometheus.jmx.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ .Values.prometheus.jmx.port | quote }}
      {{- end }}
      {{- end }}
    spec:
      serviceAccountName: {{ include "util.serviceAccountName" . }}
      initContainers:
{{- if .Values.enableAC }}
      - name: decrypt-secret
        image: "{{ .Values.decryptorImage.repository }}:{{ .Values.decryptorImage.tag }}"
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: decrypted-secret
          mountPath: /decrypted
        - name: {{ template "cp-ksql-server.fullname" . }}
          mountPath: /secrets/kafka_client_jaas.encrypted.conf
          subPath: kafka_client_jaas.encrypted.conf
        {{- if eq "local" .Values.global.environment }}
        - name: service-credential
          mountPath: /configs/service_credential.json
          subPath: service_credential.json
          readOnly: true
        {{- end }}
        env:
        {{- if eq "local" .Values.global.environment }}
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: "/configs/service_credential.json"
        {{- end }}
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        command:
          - /bin/bash
          - -c
          - |

            set -e
            echo "====="
            
            sops -d --output /decrypted/kafka_client_jaas.conf /secrets/kafka_client_jaas.encrypted.conf
{{- end }}
      containers:
        {{- if .Values.prometheus.jmx.enabled }}
        - name: prometheus-jmx-exporter
          image: "{{ .Values.prometheus.jmx.image }}:{{ .Values.prometheus.jmx.imageTag }}"
          imagePullPolicy: "{{ .Values.prometheus.jmx.imagePullPolicy }}"
          command:
          - java
          - -XX:+UnlockExperimentalVMOptions
          - -XX:+UseCGroupMemoryLimitForHeap
          - -XX:MaxRAMFraction=15
          - -XshowSettings:vm
          - -jar
          - jmx_prometheus_httpserver.jar
          - {{ .Values.prometheus.jmx.port | quote }}
          - /etc/jmx-ksql-server/jmx-ksql-server-prometheus.yml
          ports:
          - containerPort: {{ .Values.prometheus.jmx.port }}
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: {{ .Values.servicePort}}
            initialDelaySeconds: 90
            periodSeconds: 90
            timeoutSeconds: 15
          resources:
{{ toYaml .Values.prometheus.jmx.resources | indent 12 }}
          volumeMounts:
          - name: jmx-config
            mountPath: /etc/jmx-ksql-server
        {{- end }}
        - name: {{ template "cp-ksql-server.name" . }}
          image: "{{ .Values.image }}:{{ .Values.imageTag }}"
          imagePullPolicy: "{{ .Values.imagePullPolicy }}"
          ports:
            - name: server
              containerPort: {{ .Values.servicePort}}
              protocol: TCP
            {{- if .Values.prometheus.jmx.enabled }}
            - containerPort: {{ .Values.jmx.port }}
              name: jmx
            {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          volumeMounts:
          {{- if .Values.ksql.headless }}
          - name: ksql-queries
            mountPath: /etc/ksql/queries
          {{- end }}
          - name: decrypted-secret
            mountPath: /decrypted
{{- if .Values.enableAC }}
          command:
            - /bin/bash
            - -c
            - |
              set -e
              . /decrypted/kafka_client_jaas.conf
              export KSQL_SASL_JAAS_CONFIG=$SASL_JAAS_CONFIG
              /usr/bin/docker/run
{{- end }}
          env:
          - name: KSQL_BOOTSTRAP_SERVERS
            value: {{ template "cp-ksql-server.kafka.bootstrapServers" . }}
          - name: KSQL_KSQL_SERVICE_ID
            value: {{ template "cp-ksql-server.serviceId" . }}
          - name: KSQL_KSQL_SCHEMA_REGISTRY_URL
            value: {{ template "cp-ksql-server.cp-schema-registry.service-name" . }}
          - name: KSQL_HEAP_OPTS
            value: "{{ .Values.heapOptions }}"
          - name: KSQL_OPTS
            value: "-Dksql.connect.url=http://dwh-kafka-connect:8083"
{{- if .Values.enableAC }}
          - name: KSQL_SECURITY_PROTOCOL
            value: "SASL_PLAINTEXT"
          - name: KSQL_SASL_MECHANISM
            value: "PLAIN"
          - name: KSQL_KSQL_LOGGING_PROCESSING_TOPIC_NAME
            value: "manabie"
          - name: KSQL_KSQL_OUTPUT_TOPIC_NAME_PREFIX
            value: "output-{{ .Values.global.environment }}-kec-"
{{- end }}
          {{- if .Values.ksql.headless }}
          - name: KSQL_KSQL_QUERIES_FILE
            value: /etc/ksql/queries/queries.sql
          {{- else }}
          - name: KSQL_LISTENERS
            value: http://0.0.0.0:8088
          {{- end }}
          {{- range $key, $value := .Values.configurationOverrides }}
          - name: {{ printf "KSQL_%s" $key | replace "." "_" | upper | quote }}
            value: {{ $value | quote }}
          {{- end }}
          - name: KSQL_KSQL_QUERY_PULL_METRICS_ENABLED
            value: "true"
          - name: KSQL_JMX_OPTS
            value: >
              -Djava.rmi.server.hostname=localhost
              -Dcom.sun.management.jmxremote
              -Dcom.sun.management.jmxremote.port={{ .Values.jmx.port }}
              -Dcom.sun.management.jmxremote.authenticate=false
              -Dcom.sun.management.jmxremote.ssl=false
              -Dcom.sun.management.jmxremote.rmi.port={{ .Values.jmx.port }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      {{- if .Values.prometheus.jmx.enabled }}
      - name: jmx-config
        configMap:
          name: {{ template "cp-ksql-server.fullname" . }}-jmx-configmap
      {{- end }}
      - name: {{ include "cp-ksql-server.fullname" . }}
        secret:
          secretName: {{ include "cp-ksql-server.fullname" . }}
          items:
          - key: kafka_client_jaas.encrypted.conf
            path: kafka_client_jaas.encrypted.conf
      - name: decrypted-secret
        emptyDir: {}
{{- if eq "local" .Values.global.environment }}
      - name: service-credential
        secret:
          secretName: {{ include "cp-ksql-server.fullname" . }}
          items:
          - key: service_credential.json
            path: service_credential.json
{{- end }}
      {{- if .Values.ksql.headless }}
      - name: ksql-queries
        configMap:
          name: {{ template "cp-ksql-server.fullname" . }}-ksql-queries-configmap
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
      {{- with .Values }}
      {{- $context := (mustMerge (deepCopy .) $) }}
      affinity: {{- include "util.affinityNew" $context | nindent 8 }}
      tolerations: {{- include "util.tolerations" $context | nindent 8 }}
      {{- end }}
