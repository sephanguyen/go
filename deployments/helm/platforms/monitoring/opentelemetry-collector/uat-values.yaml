podAnnotations:
  prometheus.io/scheme: "http"
  prometheus.io/port: "8889"
  prometheus.io/scrape: "true"

config:
  receivers:
    jaeger:
      protocols:
        thrift_http:
          endpoint: 0.0.0.0:14268

    zipkin:
      endpoint: 0.0.0.0:9411

    otlp:
      protocols:
        grpc:
          endpoint: 0.0.0.0:4317

    # Dummy receiver that's never used, because a pipeline is required to have one.
    otlp/spanmetrics:
      protocols:
        grpc:
          endpoint: localhost:12345

  processors:
    tail_sampling:
      policies:
        [
          {
            name: ignore-http-requests,
            type: string_attribute,
            string_attribute: { key: upstream_cluster, values: [hasura, sorry-cypress, grafana], enabled_regex_matching: true, invert_match: true }
          },
          {
            name: ignore-grpc-stream-requests,
            type: string_attribute,
            string_attribute: { key: grpc.path, values: [\/Subscribe*], enabled_regex_matching: true, invert_match: true }
          },
          {
            name: slow-requests,
            type: latency,
            latency: { threshold_ms: 800 }
          },
          {
            name: grpc-timeout-requests,
            type: string_attribute,
            string_attribute: { key: x-timed-out, values: ["true"] }
          },
          {
            name: http-error-requests,
            type: string_attribute,
            string_attribute: { key: http.status_code, values: ["500", "501", "502", "503", "504"] }
          },
          {
            name: grpc-error-requests,
            type: string_attribute,
            string_attribute: { key: grpc.status_code, values: ["2", "4", "8", "10", "11", "12", "13", "14", "15"] }
          },
          {
            name: error-requests,
            type: status_code,
            status_code: { status_codes: [ERROR] }
          },
        ]

    spanmetrics:
      metrics_exporter: otlp/spanmetrics
      latency_histogram_buckets: [1s, 3s, 6s, 10s, 20s, 60s]
      # dimensions:
      #   - name: http.method
      #     default: GET
      #   - name: http.status_code
      # dimensions_cache_size: 1000
      # aggregation_temporality: "AGGREGATION_TEMPORALITY_CUMULATIVE"

  exporters:
    jaeger:
      endpoint: jaeger-all-in-one.monitoring.svc.cluster.local:14250
      tls:
        insecure: true

    otlp/spanmetrics:
      endpoint: 0.0.0.0:4317
      tls:
        insecure: true

    prometheus:
      endpoint: 0.0.0.0:8889

  extensions:
    health_check: {}

  service:
    extensions:
      - health_check
    pipelines:
      traces:
        receivers:
          - jaeger
          - zipkin
          - otlp
        processors:
          - spanmetrics
          - tail_sampling
        exporters:
          - jaeger

      # This pipeline acts as a proxy to the 'metrics' pipeline below,
      # allowing for further metrics processing if required.
      metrics/spanmetrics:
        # This receiver is just a dummy and never used.
        # Added to pass validation requiring at least one receiver in a pipeline.
        receivers:
          - otlp/spanmetrics
        exporters:
          - otlp/spanmetrics

      metrics:
        receivers: [otlp]
        exporters: [prometheus]

resources:
  requests:
    cpu: 200m
    memory: 256Mi

ports:
  metrics:
    enabled: true
    containerPort: 8889
    servicePort: 8889
    hostPort: 8889
    protocol: TCP
