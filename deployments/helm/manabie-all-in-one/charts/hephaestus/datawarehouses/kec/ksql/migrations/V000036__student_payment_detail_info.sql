SET 'auto.offset.reset' = 'earliest';
CREATE STREAM IF NOT EXISTS STUDENT_PAYMENT_DETAIL_STREAM_ORIGIN_V1 WITH (kafka_topic='{{ .Values.global.environment }}.kec.datalake.invoicemgmt.student_payment_detail', value_format='AVRO');


CREATE STREAM IF NOT EXISTS STUDENT_PAYMENT_DETAIL_STREAM_FORMATTED_V1
    AS SELECT
        STUDENT_PAYMENT_DETAIL_STREAM_ORIGIN_V1.AFTER->STUDENT_PAYMENT_DETAIL_ID AS KEY,
        AS_VALUE(STUDENT_PAYMENT_DETAIL_STREAM_ORIGIN_V1.AFTER->STUDENT_PAYMENT_DETAIL_ID) AS STUDENT_PAYMENT_DETAIL_ID,
        STUDENT_PAYMENT_DETAIL_STREAM_ORIGIN_V1.AFTER->STUDENT_ID AS STUDENT_ID,
        STUDENT_PAYMENT_DETAIL_STREAM_ORIGIN_V1.AFTER->PAYMENT_METHOD AS PAYMENT_METHOD,
        STUDENT_PAYMENT_DETAIL_STREAM_ORIGIN_V1.AFTER->CREATED_AT AS STUDENT_PAYMENT_DETAIL_CREATED_AT,
        STUDENT_PAYMENT_DETAIL_STREAM_ORIGIN_V1.AFTER->UPDATED_AT AS STUDENT_PAYMENT_DETAIL_UPDATED_AT,
        STUDENT_PAYMENT_DETAIL_STREAM_ORIGIN_V1.AFTER->DELETED_AT AS STUDENT_PAYMENT_DETAIL_DELETED_AT
    FROM STUDENT_PAYMENT_DETAIL_STREAM_ORIGIN_V1
    WHERE STUDENT_PAYMENT_DETAIL_STREAM_ORIGIN_V1.AFTER->RESOURCE_PATH = '{{ .Values.kecResourcePath }}'
    PARTITION BY AFTER->STUDENT_PAYMENT_DETAIL_ID
    EMIT CHANGES;

CREATE TABLE IF NOT EXISTS STUDENT_PAYMENT_DETAIL_TABLE_FORMATTED_V1 (KEY VARCHAR PRIMARY KEY) with (kafka_topic='{{ .Values.topicPrefix }}STUDENT_PAYMENT_DETAIL_STREAM_FORMATTED_V1', value_format='AVRO');


CREATE STREAM IF NOT EXISTS STUDENT_PAYMENT_DETAIL_ACTION_LOG_STREAM_ORIGIN_V1 WITH (kafka_topic='{{ .Values.global.environment }}.kec.datalake.invoicemgmt.student_payment_detail_action_log', value_format='AVRO');

CREATE STREAM IF NOT EXISTS STUDENT_PAYMENT_DETAIL_ACTION_LOG_STREAM_FORMATTED_V1
    AS SELECT
        STUDENT_PAYMENT_DETAIL_ACTION_LOG_STREAM_ORIGIN_V1.AFTER->STUDENT_PAYMENT_DETAIL_ACTION_ID AS KEY,
        AS_VALUE(STUDENT_PAYMENT_DETAIL_ACTION_LOG_STREAM_ORIGIN_V1.AFTER->STUDENT_PAYMENT_DETAIL_ACTION_ID) AS STUDENT_PAYMENT_DETAIL_ACTION_ID,
        STUDENT_PAYMENT_DETAIL_ACTION_LOG_STREAM_ORIGIN_V1.AFTER->STUDENT_PAYMENT_DETAIL_ID AS STUDENT_PAYMENT_DETAIL_ID,
        STUDENT_PAYMENT_DETAIL_ACTION_LOG_STREAM_ORIGIN_V1.AFTER->USER_ID AS STAFF_ID,
        STUDENT_PAYMENT_DETAIL_ACTION_LOG_STREAM_ORIGIN_V1.AFTER->ACTION AS ACTION_TYPE,
        STUDENT_PAYMENT_DETAIL_ACTION_LOG_STREAM_ORIGIN_V1.AFTER->CREATED_AT AS CREATED_AT,
        STUDENT_PAYMENT_DETAIL_ACTION_LOG_STREAM_ORIGIN_V1.AFTER->UPDATED_AT AS UPDATED_AT
    FROM STUDENT_PAYMENT_DETAIL_ACTION_LOG_STREAM_ORIGIN_V1
    WHERE STUDENT_PAYMENT_DETAIL_ACTION_LOG_STREAM_ORIGIN_V1.AFTER->RESOURCE_PATH = '{{ .Values.kecResourcePath }}'
    PARTITION BY AFTER->STUDENT_PAYMENT_DETAIL_ACTION_ID
    EMIT CHANGES;

CREATE TABLE IF NOT EXISTS STUDENT_PAYMENT_DETAIL_ACTION_LOG_TABLE_FORMATTED_V1 (KEY VARCHAR PRIMARY KEY) with (kafka_topic='{{ .Values.topicPrefix }}STUDENT_PAYMENT_DETAIL_ACTION_LOG_STREAM_FORMATTED_V1', value_format='AVRO');


CREATE TABLE IF NOT EXISTS STUDENT_PAYMENT_DETAIL_HISTORY_PUBLIC_INFO_V1
AS SELECT
    STUDENT_PAYMENT_DETAIL_ACTION_LOG_TABLE_FORMATTED_V1.KEY AS STUDENT_PAYMENT_DETAIL_ACTION_ID,
    AS_VALUE(STUDENT_PAYMENT_DETAIL_TABLE_FORMATTED_V1.KEY) AS STUDENT_PAYMENT_DETAIL_ID,
    STUDENT_PAYMENT_DETAIL_TABLE_FORMATTED_V1.STUDENT_ID AS STUDENT_ID,
    STUDENT_PAYMENT_DETAIL_TABLE_FORMATTED_V1.PAYMENT_METHOD AS PAYMENT_METHOD,
    STUDENT_PAYMENT_DETAIL_ACTION_LOG_TABLE_FORMATTED_V1.STAFF_ID AS STAFF_ID,
    STUDENT_PAYMENT_DETAIL_ACTION_LOG_TABLE_FORMATTED_V1.ACTION_TYPE AS ACTION_TYPE,
    STUDENT_PAYMENT_DETAIL_ACTION_LOG_TABLE_FORMATTED_V1.CREATED_AT AS CREATED_AT,
    STUDENT_PAYMENT_DETAIL_ACTION_LOG_TABLE_FORMATTED_V1.UPDATED_AT AS UPDATED_AT
FROM STUDENT_PAYMENT_DETAIL_ACTION_LOG_TABLE_FORMATTED_V1
JOIN STUDENT_PAYMENT_DETAIL_TABLE_FORMATTED_V1
ON STUDENT_PAYMENT_DETAIL_ACTION_LOG_TABLE_FORMATTED_V1.STUDENT_PAYMENT_DETAIL_ID = STUDENT_PAYMENT_DETAIL_TABLE_FORMATTED_V1.KEY;

CREATE SINK CONNECTOR IF NOT EXISTS SINK_STUDENT_PAYMENT_DETAIL_HISTORY_PUBLIC_INFO_V1 WITH (
      'connector.class'='io.confluent.connect.jdbc.JdbcSinkConnector',
      'transforms.unwrap.delete.handling.mode'='drop',
      'tasks.max'='1',
      'topics'='{{ .Values.topicPrefix }}STUDENT_PAYMENT_DETAIL_HISTORY_PUBLIC_INFO_V1',
      'fields.whitelist'='student_payment_detail_action_id,student_payment_detail_id,student_id,payment_method,staff_id,action_type,created_at,updated_at',
      'key.converter'='org.apache.kafka.connect.storage.StringConverter',
      'value.converter'='io.confluent.connect.avro.AvroConverter',
      'value.converter.schema.registry.url'='{{ .Values.cpRegistryHost }}',
      'delete.enabled'='false',
      'transforms.unwrap.drop.tombstones'='true',
      'auto.create'='true',
      'connection.url'='${file:/decrypted/kafka-connect.secrets.properties:kec_url}',
      'insert.mode'='upsert',
      'table.name.format'='invoicemgmt.student_payment_detail_history_info',
      'pk.mode'='record_key',
      'transforms'='RenameField',
      'transforms.RenameField.type'= 'org.apache.kafka.connect.transforms.ReplaceField$Value',
      'transforms.RenameField.renames'='KEY:student_payment_detail_action_id,STUDENT_PAYMENT_DETAIL_ID:student_payment_detail_id,STUDENT_ID:student_id,PAYMENT_METHOD:payment_method,STAFF_ID:staff_id,ACTION_TYPE:action_type,CREATED_AT:created_at, UPDATED_AT:updated_at',
      'pk.fields'='student_payment_detail_action_id'
);
