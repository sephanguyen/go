SET 'auto.offset.reset' = 'earliest';


DROP TABLE IF EXISTS TS_OTHER_WORKING DELETE TOPIC;
DROP TABLE IF EXISTS TIMESHEET_JOIN_OWH DELETE TOPIC;
DROP STREAM IF EXISTS TS_LESSON DELETE TOPIC;
DROP TABLE IF EXISTS TS_TRANSPORTATION DELETE TOPIC;
DROP TABLE IF EXISTS TIMESHEET_TIMESHEET_TABLE;
DROP STREAM IF EXISTS TIMESHEET_TIMESHEET_FORMATTED DELETE TOPIC;

DROP TABLE IF EXISTS TIMESHEET_OTHER_WORKING_HOURS_TABLE;
DROP STREAM IF EXISTS TIMESHEET_OTHER_WORKING_HOURS_FORMATTED DELETE TOPIC;

DROP TABLE IF EXISTS TIMESHEET_TRANSPORTATION_EXPENSE_TABLE;
DROP STREAM IF EXISTS TIMESHEET_TRANSPORTATION_EXPENSE_FORMATTED DELETE TOPIC;

DROP TABLE IF EXISTS STAFF_TRANSPORTATION_EXPENSE DELETE TOPIC;
DROP TABLE IF EXISTS TIMESHEET_STAFF_TRANSPORTATION_EXPENSE_TABLE;
DROP STREAM IF EXISTS TIMESHEET_STAFF_TRANSPORTATION_EXPENSE_FORMATTED DELETE TOPIC;

DROP TABLE IF EXISTS TIMESHEET_LESSONS_TABLE;
DROP STREAM IF EXISTS TIMESHEET_LESSONS_FORMATTED DELETE TOPIC;

DROP STREAM IF EXISTS TIMESHEET_TIMESHEET_LESSON_HOURS_FORMATTED DELETE TOPIC;

DROP TABLE IF EXISTS AUTO_CREATE_FLAG_ACTIVITY_LOG DELETE TOPIC;
DROP TABLE IF EXISTS TIMESHEET_AUTO_CREATE_FLAG_ACTIVITY_LOG_TABLE;
DROP STREAM IF EXISTS TIMESHEET_AUTO_CREATE_FLAG_ACTIVITY_LOG_FORMATTED DELETE TOPIC;

DROP TABLE IF EXISTS AUTO_CREATE_TIMESHEET_FLAG DELETE TOPIC;
DROP TABLE IF EXISTS TIMESHEET_AUTO_CREATE_TIMESHEET_FLAG_TABLE;
DROP STREAM IF EXISTS TIMESHEET_AUTO_CREATE_TIMESHEET_FLAG_FORMATTED DELETE TOPIC;

DROP TABLE IF EXISTS TIMESHEET_CONFIRMATION_CUT_OFF_DATE DELETE TOPIC;
DROP TABLE IF EXISTS TIMESHEET_TIMESHEET_CONFIRMATION_CUT_OFF_DATE_TABLE;
DROP STREAM IF EXISTS TIMESHEET_TIMESHEET_CONFIRMATION_CUT_OFF_DATE_FORMATTED DELETE TOPIC;

DROP TABLE IF EXISTS TIMESHEET_CONFIRMATION_INFO DELETE TOPIC;
DROP TABLE IF EXISTS TIMESHEET_TIMESHEET_CONFIRMATION_INFO_TABLE;
DROP STREAM IF EXISTS TIMESHEET_TIMESHEET_CONFIRMATION_INFO_FORMATTED DELETE TOPIC;

DROP TABLE IF EXISTS TIMESHEET_CONFIRMATION_PERIOD DELETE TOPIC;
DROP TABLE IF EXISTS TIMESHEET_TIMESHEET_CONFIRMATION_PERIOD_TABLE;
DROP STREAM IF EXISTS TIMESHEET_TIMESHEET_CONFIRMATION_PERIOD_FORMATTED DELETE TOPIC;

DROP TABLE IF EXISTS TIMESHEET_TIMESHEET_CONFIG_TABLE;
DROP STREAM IF EXISTS TIMESHEET_TIMESHEET_CONFIG_FORMATTED DELETE TOPIC;

SET 'auto.offset.reset' = 'earliest';


DROP TABLE IF EXISTS TS_OTHER_WORKING DELETE TOPIC;
DROP TABLE IF EXISTS TIMESHEET_JOIN_OWH DELETE TOPIC;
DROP STREAM IF EXISTS TS_LESSON DELETE TOPIC;
DROP TABLE IF EXISTS TS_TRANSPORTATION DELETE TOPIC;
DROP TABLE IF EXISTS TIMESHEET_TIMESHEET_TABLE;
DROP STREAM IF EXISTS TIMESHEET_TIMESHEET_FORMATTED DELETE TOPIC;

DROP TABLE IF EXISTS TIMESHEET_OTHER_WORKING_HOURS_TABLE;
DROP STREAM IF EXISTS TIMESHEET_OTHER_WORKING_HOURS_FORMATTED DELETE TOPIC;

DROP TABLE IF EXISTS TIMESHEET_TRANSPORTATION_EXPENSE_TABLE;
DROP STREAM IF EXISTS TIMESHEET_TRANSPORTATION_EXPENSE_FORMATTED DELETE TOPIC;

DROP TABLE IF EXISTS STAFF_TRANSPORTATION_EXPENSE DELETE TOPIC;
DROP TABLE IF EXISTS TIMESHEET_STAFF_TRANSPORTATION_EXPENSE_TABLE;
DROP STREAM IF EXISTS TIMESHEET_STAFF_TRANSPORTATION_EXPENSE_FORMATTED DELETE TOPIC;

DROP TABLE IF EXISTS TIMESHEET_LESSONS_TABLE;
DROP STREAM IF EXISTS TIMESHEET_LESSONS_FORMATTED DELETE TOPIC;

DROP STREAM IF EXISTS TIMESHEET_TIMESHEET_LESSON_HOURS_FORMATTED DELETE TOPIC;

DROP TABLE IF EXISTS AUTO_CREATE_FLAG_ACTIVITY_LOG DELETE TOPIC;
DROP TABLE IF EXISTS TIMESHEET_AUTO_CREATE_FLAG_ACTIVITY_LOG_TABLE;
DROP STREAM IF EXISTS TIMESHEET_AUTO_CREATE_FLAG_ACTIVITY_LOG_FORMATTED DELETE TOPIC;

DROP TABLE IF EXISTS AUTO_CREATE_TIMESHEET_FLAG DELETE TOPIC;
DROP TABLE IF EXISTS TIMESHEET_AUTO_CREATE_TIMESHEET_FLAG_TABLE;
DROP STREAM IF EXISTS TIMESHEET_AUTO_CREATE_TIMESHEET_FLAG_FORMATTED DELETE TOPIC;

DROP TABLE IF EXISTS TIMESHEET_CONFIRMATION_CUT_OFF_DATE DELETE TOPIC;
DROP TABLE IF EXISTS TIMESHEET_TIMESHEET_CONFIRMATION_CUT_OFF_DATE_TABLE;
DROP STREAM IF EXISTS TIMESHEET_TIMESHEET_CONFIRMATION_CUT_OFF_DATE_FORMATTED DELETE TOPIC;

DROP TABLE IF EXISTS TIMESHEET_CONFIRMATION_INFO DELETE TOPIC;
DROP TABLE IF EXISTS TIMESHEET_TIMESHEET_CONFIRMATION_INFO_TABLE;
DROP STREAM IF EXISTS TIMESHEET_TIMESHEET_CONFIRMATION_INFO_FORMATTED DELETE TOPIC;

DROP TABLE IF EXISTS TIMESHEET_CONFIRMATION_PERIOD DELETE TOPIC;
DROP TABLE IF EXISTS TIMESHEET_TIMESHEET_CONFIRMATION_PERIOD_TABLE;
DROP STREAM IF EXISTS TIMESHEET_TIMESHEET_CONFIRMATION_PERIOD_FORMATTED DELETE TOPIC;

DROP TABLE IF EXISTS TIMESHEET_TIMESHEET_CONFIG_TABLE;
DROP STREAM IF EXISTS TIMESHEET_TIMESHEET_CONFIG_FORMATTED DELETE TOPIC;


CREATE STREAM IF NOT EXISTS TIMESHEET_TIMESHEET_FORMATTED_V1
AS SELECT
    AFTER->TIMESHEET_ID AS KEY,
    AS_VALUE(AFTER->TIMESHEET_ID) AS TIMESHEET_ID,
    AFTER->STAFF_ID AS STAFF_ID,
    AFTER->LOCATION_ID AS LOCATION_ID,
    AFTER->TIMESHEET_STATUS AS TIMESHEET_STATUS,
    AFTER->TIMESHEET_DATE AS TIMESHEET_DATE,
    AFTER->REMARK AS REMARK,
    AFTER->CREATED_AT AS CREATED_AT,
    AFTER->UPDATED_AT AS UPDATED_AT,
    AFTER->DELETED_AT AS DELETED_AT
FROM TIMESHEET_TIMESHEET_ORIGINAL
WHERE TIMESHEET_TIMESHEET_ORIGINAL.AFTER->RESOURCE_PATH = '{{ .Values.kecResourcePath }}'
PARTITION BY AFTER->TIMESHEET_ID
EMIT CHANGES;

CREATE TABLE IF NOT EXISTS TIMESHEET_TIMESHEET_TABLE_V1 (KEY VARCHAR(STRING) PRIMARY KEY)
WITH(kafka_topic='{{ .Values.topicPrefix }}TIMESHEET_TIMESHEET_FORMATTED_V1', value_format='AVRO');


CREATE STREAM IF NOT EXISTS TIMESHEET_OTHER_WORKING_HOURS_FORMATTED_V1
AS SELECT
    AFTER->OTHER_WORKING_HOURS_ID AS KEY,
    AS_VALUE(AFTER->OTHER_WORKING_HOURS_ID) AS OTHER_WORKING_HOURS_ID,
    AFTER->TIMESHEET_ID AS TIMESHEET_ID,
    AFTER->TIMESHEET_CONFIG_ID AS TIMESHEET_CONFIG_ID,
    AFTER->START_TIME AS START_TIME,
    AFTER->END_TIME AS END_TIME,
    AFTER->TOTAL_HOUR AS TOTAL_HOUR,
    AFTER->REMARKS AS REMARKS,
    AFTER->CREATED_AT AS CREATED_AT,
    AFTER->UPDATED_AT AS UPDATED_AT,
    AFTER->DELETED_AT AS DELETED_AT
FROM TIMESHEET_OTHER_WORKING_HOURS_ORIGINAL
WHERE TIMESHEET_OTHER_WORKING_HOURS_ORIGINAL.AFTER->RESOURCE_PATH = '{{ .Values.kecResourcePath }}'
PARTITION BY AFTER->OTHER_WORKING_HOURS_ID
EMIT CHANGES;

CREATE TABLE IF NOT EXISTS TIMESHEET_OTHER_WORKING_HOURS_TABLE_V1 (KEY VARCHAR(STRING) PRIMARY KEY)
WITH(kafka_topic='{{ .Values.topicPrefix }}TIMESHEET_OTHER_WORKING_HOURS_FORMATTED_V1', value_format='AVRO');


CREATE STREAM IF NOT EXISTS TIMESHEET_TRANSPORTATION_EXPENSE_FORMATTED_V1
AS SELECT
    AFTER->TRANSPORTATION_EXPENSE_ID AS KEY,
    AS_VALUE(AFTER->TRANSPORTATION_EXPENSE_ID) AS TRANSPORTATION_EXPENSE_ID,
    AFTER->TIMESHEET_ID AS TIMESHEET_ID,
    AFTER->TRANSPORTATION_TYPE AS TRANSPORTATION_TYPE,
    AFTER->TRANSPORTATION_FROM AS TRANSPORTATION_FROM,
    AFTER->TRANSPORTATION_TO AS TRANSPORTATION_TO,
    AFTER->COST_AMOUNT AS COST_AMOUNT,
    AFTER->ROUND_TRIP AS ROUND_TRIP,
    AFTER->REMARKS AS REMARKS,
    AFTER->CREATED_AT AS CREATED_AT,
    AFTER->UPDATED_AT AS UPDATED_AT,
    AFTER->DELETED_AT AS DELETED_AT
FROM TIMESHEET_TRANSPORTATION_EXPENSE_ORIGINAL
WHERE TIMESHEET_TRANSPORTATION_EXPENSE_ORIGINAL.AFTER->RESOURCE_PATH = '{{ .Values.kecResourcePath }}'
PARTITION BY AFTER->TRANSPORTATION_EXPENSE_ID
EMIT CHANGES;

CREATE TABLE IF NOT EXISTS TIMESHEET_TRANSPORTATION_EXPENSE_TABLE_V1 (KEY VARCHAR(STRING) PRIMARY KEY)
WITH(kafka_topic='{{ .Values.topicPrefix }}TIMESHEET_TRANSPORTATION_EXPENSE_FORMATTED_V1', value_format='AVRO');


CREATE STREAM IF NOT EXISTS TIMESHEET_STAFF_TRANSPORTATION_EXPENSE_FORMATTED_V1
AS SELECT
    AFTER->ID AS KEY,
    AS_VALUE(AFTER->ID) AS ID,
    AFTER->STAFF_ID AS STAFF_ID,
    AFTER->LOCATION_ID AS LOCATION_ID,
    AFTER->TRANSPORTATION_TYPE AS TRANSPORTATION_TYPE,
    AFTER->TRANSPORTATION_FROM AS TRANSPORTATION_FROM,
    AFTER->TRANSPORTATION_TO AS TRANSPORTATION_TO,
    AFTER->COST_AMOUNT AS COST_AMOUNT,
    AFTER->ROUND_TRIP AS ROUND_TRIP,
    AFTER->REMARKS AS REMARKS,
    AFTER->CREATED_AT AS CREATED_AT,
    AFTER->UPDATED_AT AS UPDATED_AT,
    AFTER->DELETED_AT AS DELETED_AT
FROM TIMESHEET_STAFF_TRANSPORTATION_EXPENSE_ORIGINAL
WHERE TIMESHEET_STAFF_TRANSPORTATION_EXPENSE_ORIGINAL.AFTER->RESOURCE_PATH = '{{ .Values.kecResourcePath }}'
PARTITION BY AFTER->ID
EMIT CHANGES;

CREATE TABLE IF NOT EXISTS TIMESHEET_STAFF_TRANSPORTATION_EXPENSE_TABLE_V1 (KEY VARCHAR(STRING) PRIMARY KEY)
WITH(kafka_topic='{{ .Values.topicPrefix }}TIMESHEET_STAFF_TRANSPORTATION_EXPENSE_FORMATTED_V1', value_format='AVRO');


CREATE STREAM IF NOT EXISTS TIMESHEET_LESSONS_FORMATTED_V1
AS SELECT
    AFTER->LESSON_ID AS KEY,
    AS_VALUE(AFTER->LESSON_ID) AS LESSON_ID,
    AFTER->TEACHER_ID AS TEACHER_ID,
    AFTER->COURSE_ID AS COURSE_ID,
    AFTER->END_AT AS END_AT,
    AFTER->CONTROL_SETTINGS AS CONTROL_SETTINGS,
    AFTER->LESSON_GROUP_ID AS LESSON_GROUP_ID,
    AFTER->ROOM_ID AS ROOM_ID,
    AFTER->LESSON_TYPE,
    AFTER->STATUS AS STATUS,
    AFTER->STREAM_LEARNER_COUNTER AS STREAM_LEARNER_COUNTER,
    AFTER->LEARNER_IDS AS LEARNER_IDS,
    AFTER->NAME AS NAME,
    AFTER->START_TIME AS START_TIME,
    AFTER->END_TIME AS END_TIME,
    AFTER->ROOM_STATE AS ROOM_STATE,
    AFTER->TEACHING_MODEL AS TEACHING_MODEL,
    AFTER->CLASS_ID AS CLASS_ID,
    AFTER->CENTER_ID AS CENTER_ID,
    AFTER->TEACHING_METHOD AS TEACHING_METHOD,
    AFTER->TEACHING_MEDIUM AS TEACHING_MEDIUM,
    AFTER->SCHEDULING_STATUS AS SCHEDULING_STATUS,
    AFTER->IS_LOCKED AS IS_LOCKED,
    AFTER->SCHEDULER_ID AS SCHEDULER_ID,
    AFTER->CREATED_AT AS CREATED_AT,
    AFTER->UPDATED_AT AS UPDATED_AT,
    AFTER->DELETED_AT AS DELETED_AT
FROM TIMESHEET_LESSONS_ORIGINAL
WHERE TIMESHEET_LESSONS_ORIGINAL.AFTER->RESOURCE_PATH = '{{ .Values.kecResourcePath }}'
PARTITION BY AFTER->LESSON_ID
EMIT CHANGES;

CREATE TABLE IF NOT EXISTS TIMESHEET_LESSONS_TABLE_V1 (KEY VARCHAR(STRING) PRIMARY KEY)
WITH(kafka_topic='{{ .Values.topicPrefix }}TIMESHEET_LESSONS_FORMATTED_V1', value_format='AVRO');


CREATE STREAM IF NOT EXISTS TIMESHEET_TIMESHEET_LESSON_HOURS_FORMATTED_V1
AS SELECT
    AFTER->TIMESHEET_ID AS TIMESHEET_ID,
    AFTER->LESSON_ID AS LESSON_ID,
    AFTER->FLAG_ON AS FLAG_ON,
    AFTER->CREATED_AT AS CREATED_AT,
    AFTER->UPDATED_AT AS UPDATED_AT,
    AFTER->DELETED_AT AS DELETED_AT
FROM TIMESHEET_TIMESHEET_LESSON_HOURS_ORIGINAL
WHERE TIMESHEET_TIMESHEET_LESSON_HOURS_ORIGINAL.AFTER->RESOURCE_PATH = '{{ .Values.kecResourcePath }}'
EMIT CHANGES;


CREATE STREAM IF NOT EXISTS TIMESHEET_AUTO_CREATE_FLAG_ACTIVITY_LOG_FORMATTED_V1
AS SELECT
    AFTER->ID AS KEY,
    AS_VALUE(AFTER->ID) AS ID,
    AFTER->STAFF_ID AS STAFF_ID,
    AFTER->CHANGE_TIME AS CHANGE_TIME,
    AFTER->FLAG_ON AS FLAG_ON,
    AFTER->CREATED_AT AS CREATED_AT,
    AFTER->UPDATED_AT AS UPDATED_AT,
    AFTER->DELETED_AT AS DELETED_AT
FROM TIMESHEET_AUTO_CREATE_FLAG_ACTIVITY_LOG_ORIGINAL
WHERE TIMESHEET_AUTO_CREATE_FLAG_ACTIVITY_LOG_ORIGINAL.AFTER->RESOURCE_PATH = '{{ .Values.kecResourcePath }}'
PARTITION BY AFTER->ID
EMIT CHANGES;

CREATE TABLE IF NOT EXISTS TIMESHEET_AUTO_CREATE_FLAG_ACTIVITY_LOG_TABLE_V1 (KEY VARCHAR(STRING) PRIMARY KEY)
WITH(kafka_topic='{{ .Values.topicPrefix }}TIMESHEET_AUTO_CREATE_FLAG_ACTIVITY_LOG_FORMATTED_V1', value_format='AVRO');

CREATE STREAM IF NOT EXISTS TIMESHEET_AUTO_CREATE_TIMESHEET_FLAG_FORMATTED_V1
AS SELECT
    AFTER->STAFF_ID AS KEY,
    AS_VALUE(AFTER->STAFF_ID) AS STAFF_ID,
    AFTER->FLAG_ON AS FLAG_ON,
    AFTER->CREATED_AT AS CREATED_AT,
    AFTER->UPDATED_AT AS UPDATED_AT,
    AFTER->DELETED_AT AS DELETED_AT
FROM TIMESHEET_AUTO_CREATE_TIMESHEET_FLAG_ORIGINAL
WHERE TIMESHEET_AUTO_CREATE_TIMESHEET_FLAG_ORIGINAL.AFTER->RESOURCE_PATH = '{{ .Values.kecResourcePath }}'
PARTITION BY AFTER->STAFF_ID
EMIT CHANGES;

CREATE TABLE IF NOT EXISTS TIMESHEET_AUTO_CREATE_TIMESHEET_FLAG_TABLE_V1 (KEY VARCHAR(STRING) PRIMARY KEY)
WITH(kafka_topic='{{ .Values.topicPrefix }}TIMESHEET_AUTO_CREATE_TIMESHEET_FLAG_FORMATTED_V1', value_format='AVRO');

CREATE STREAM IF NOT EXISTS TIMESHEET_TIMESHEET_CONFIRMATION_CUT_OFF_DATE_FORMATTED_V1
AS SELECT
    AFTER->ID AS KEY,
    AS_VALUE(AFTER->ID) AS ID,
    AFTER->CUT_OFF_DATE AS CUT_OFF_DATE,
    AFTER->START_DATE AS START_DATE,
    AFTER->END_DATE AS END_DATE,
    AFTER->CREATED_AT AS CREATED_AT,
    AFTER->UPDATED_AT AS UPDATED_AT,
    AFTER->DELETED_AT AS DELETED_AT
FROM TIMESHEET_TIMESHEET_CONFIRMATION_CUT_OFF_DATE_ORIGINAL
WHERE TIMESHEET_TIMESHEET_CONFIRMATION_CUT_OFF_DATE_ORIGINAL.AFTER->RESOURCE_PATH = '{{ .Values.kecResourcePath }}'
PARTITION BY AFTER->ID
EMIT CHANGES;

CREATE TABLE IF NOT EXISTS TIMESHEET_TIMESHEET_CONFIRMATION_CUT_OFF_DATE_TABLE_V1 (KEY VARCHAR(STRING) PRIMARY KEY)
WITH(kafka_topic='{{ .Values.topicPrefix }}TIMESHEET_TIMESHEET_CONFIRMATION_CUT_OFF_DATE_FORMATTED_V1', value_format='AVRO');

CREATE STREAM IF NOT EXISTS TIMESHEET_TIMESHEET_CONFIRMATION_INFO_FORMATTED_V1
AS SELECT
    AFTER->ID AS KEY,
    AS_VALUE(AFTER->ID) AS ID,
    AFTER->PERIOD_ID AS PERIOD_ID,
    AFTER->LOCATION_ID AS LOCATION_ID,
    AFTER->CREATED_AT AS CREATED_AT,
    AFTER->UPDATED_AT AS UPDATED_AT,
    AFTER->DELETED_AT AS DELETED_AT
FROM TIMESHEET_TIMESHEET_CONFIRMATION_INFO_ORIGINAL
WHERE TIMESHEET_TIMESHEET_CONFIRMATION_INFO_ORIGINAL.AFTER->RESOURCE_PATH = '{{ .Values.kecResourcePath }}'
PARTITION BY AFTER->ID
EMIT CHANGES;

CREATE TABLE IF NOT EXISTS TIMESHEET_TIMESHEET_CONFIRMATION_INFO_TABLE_V1 (KEY VARCHAR(STRING) PRIMARY KEY)
WITH(kafka_topic='{{ .Values.topicPrefix }}TIMESHEET_TIMESHEET_CONFIRMATION_INFO_FORMATTED_V1', value_format='AVRO');


CREATE STREAM IF NOT EXISTS TIMESHEET_TIMESHEET_CONFIRMATION_PERIOD_FORMATTED_V1
AS SELECT
    AFTER->ID AS KEY,
    AS_VALUE(AFTER->ID) AS ID,
    AFTER->START_DATE AS START_DATE,
    AFTER->END_DATE AS END_DATE,
    AFTER->CREATED_AT AS CREATED_AT,
    AFTER->UPDATED_AT AS UPDATED_AT,
    AFTER->DELETED_AT AS DELETED_AT
FROM TIMESHEET_TIMESHEET_CONFIRMATION_PERIOD_ORIGINAL
WHERE TIMESHEET_TIMESHEET_CONFIRMATION_PERIOD_ORIGINAL.AFTER->RESOURCE_PATH = '{{ .Values.kecResourcePath }}'
PARTITION BY AFTER-> ID
EMIT CHANGES;

CREATE TABLE IF NOT EXISTS TIMESHEET_TIMESHEET_CONFIRMATION_PERIOD_TABLE_V1 (KEY VARCHAR(STRING) PRIMARY KEY)
WITH(kafka_topic='{{ .Values.topicPrefix }}TIMESHEET_TIMESHEET_CONFIRMATION_PERIOD_FORMATTED_V1', value_format='AVRO');


CREATE STREAM IF NOT EXISTS TIMESHEET_TIMESHEET_CONFIG_FORMATTED_V1
AS SELECT
    AFTER->TIMESHEET_CONFIG_ID AS KEY,
    AS_VALUE(AFTER->TIMESHEET_CONFIG_ID) AS TIMESHEET_CONFIG_ID,
    AFTER->CONFIG_TYPE AS CONFIG_TYPE,
    AFTER->CONFIG_VALUE AS CONFIG_VALUE,
    AFTER->IS_ARCHIVED AS IS_ARCHIVED,
    AFTER->CREATED_AT AS CREATED_AT,
    AFTER->UPDATED_AT AS UPDATED_AT,
    AFTER->DELETED_AT AS DELETED_AT
FROM TIMESHEET_TIMESHEET_CONFIG_ORIGINAL
WHERE TIMESHEET_TIMESHEET_CONFIG_ORIGINAL.AFTER->RESOURCE_PATH = '{{ .Values.kecResourcePath }}'
PARTITION BY AFTER->TIMESHEET_CONFIG_ID
EMIT CHANGES;

CREATE TABLE IF NOT EXISTS TIMESHEET_TIMESHEET_CONFIG_TABLE_V1 (KEY VARCHAR(STRING) PRIMARY KEY)
WITH(kafka_topic='{{ .Values.topicPrefix }}TIMESHEET_TIMESHEET_CONFIG_FORMATTED_V1', value_format='AVRO');


CREATE TABLE IF NOT EXISTS TS_TRANSPORTATION_V1
AS SELECT
    TIMESHEET_TRANSPORTATION_EXPENSE_TABLE_V1.KEY AS TRANSPORTATION_EXPENSE_ID,
    TIMESHEET_TIMESHEET_TABLE_V1.KEY AS TIMESHEET_ID,
    TIMESHEET_TRANSPORTATION_EXPENSE_TABLE_V1.TRANSPORTATION_TYPE AS TRANSPORTATION_TYPE,
    TIMESHEET_TRANSPORTATION_EXPENSE_TABLE_V1.TRANSPORTATION_FROM AS TRANSPORTATION_FROM,
    TIMESHEET_TRANSPORTATION_EXPENSE_TABLE_V1.TRANSPORTATION_TO AS TRANSPORTATION_TO,
    TIMESHEET_TRANSPORTATION_EXPENSE_TABLE_V1.COST_AMOUNT AS COST_AMOUNT,
    TIMESHEET_TRANSPORTATION_EXPENSE_TABLE_V1.ROUND_TRIP AS ROUND_TRIP,
    TIMESHEET_TRANSPORTATION_EXPENSE_TABLE_V1.REMARKS AS TRANSPORTATION_EXPENSE_REMARKS,
    TIMESHEET_TRANSPORTATION_EXPENSE_TABLE_V1.CREATED_AT AS TRANSPORTATION_EXPENSE_CREATED_AT,
    TIMESHEET_TRANSPORTATION_EXPENSE_TABLE_V1.UPDATED_AT AS TRANSPORTATION_EXPENSE_UPDATED_AT,
    TIMESHEET_TRANSPORTATION_EXPENSE_TABLE_V1.DELETED_AT AS TRANSPORTATION_EXPENSE_DELETED_AT,
    TIMESHEET_TIMESHEET_TABLE_V1.TIMESHEET_STATUS AS TIMESHEET_STATUS,
    TIMESHEET_TIMESHEET_TABLE_V1.TIMESHEET_DATE AS TIMESHEET_DATE,
    TIMESHEET_TIMESHEET_TABLE_V1.REMARK AS TIMESHEET_REMARK,
    TIMESHEET_TIMESHEET_TABLE_V1.CREATED_AT AS TIMESHEET_CREATED_AT,
    TIMESHEET_TIMESHEET_TABLE_V1.UPDATED_AT AS TIMESHEET_UPDATED_AT,
    TIMESHEET_TIMESHEET_TABLE_V1.DELETED_AT AS TIMESHEET_DELETED_AT,
    TIMESHEET_TIMESHEET_TABLE_V1.STAFF_ID AS STAFF_ID
FROM TIMESHEET_TRANSPORTATION_EXPENSE_TABLE_V1
JOIN TIMESHEET_TIMESHEET_TABLE_V1 
ON TIMESHEET_TRANSPORTATION_EXPENSE_TABLE_V1.TIMESHEET_ID = TIMESHEET_TIMESHEET_TABLE_V1.KEY;

CREATE TABLE IF NOT EXISTS STAFF_TRANSPORTATION_EXPENSE_V1
AS SELECT
    TIMESHEET_STAFF_TRANSPORTATION_EXPENSE_TABLE_V1.KEY AS STAFF_TRANSPORTATION_EXPENSE_ID,
    TIMESHEET_STAFF_TRANSPORTATION_EXPENSE_TABLE_V1.STAFF_ID AS STAFF_ID,
    TIMESHEET_STAFF_TRANSPORTATION_EXPENSE_TABLE_V1.LOCATION_ID AS LOCATION_ID,
    TIMESHEET_STAFF_TRANSPORTATION_EXPENSE_TABLE_V1.TRANSPORTATION_TYPE AS TRANSPORT_TYPE,
    TIMESHEET_STAFF_TRANSPORTATION_EXPENSE_TABLE_V1.TRANSPORTATION_FROM AS TRANSPORTATION_FROM,
    TIMESHEET_STAFF_TRANSPORTATION_EXPENSE_TABLE_V1.TRANSPORTATION_TO AS TRANSPORTATION_TO,
    TIMESHEET_STAFF_TRANSPORTATION_EXPENSE_TABLE_V1.COST_AMOUNT AS COST_AMOUNT,
    TIMESHEET_STAFF_TRANSPORTATION_EXPENSE_TABLE_V1.ROUND_TRIP AS ROUND_TRIP,
    TIMESHEET_STAFF_TRANSPORTATION_EXPENSE_TABLE_V1.REMARKS AS REMARKS,
    TIMESHEET_STAFF_TRANSPORTATION_EXPENSE_TABLE_V1.CREATED_AT AS CREATED_AT,
    TIMESHEET_STAFF_TRANSPORTATION_EXPENSE_TABLE_V1.UPDATED_AT AS UPDATED_AT,
    TIMESHEET_STAFF_TRANSPORTATION_EXPENSE_TABLE_V1.DELETED_AT AS DELETED_AT
FROM TIMESHEET_STAFF_TRANSPORTATION_EXPENSE_TABLE_V1;


CREATE STREAM IF NOT EXISTS TS_LESSON_V1
AS SELECT
    TIMESHEET_TIMESHEET_LESSON_HOURS_FORMATTED_V1.LESSON_ID AS KEY,
    AS_VALUE(TIMESHEET_TIMESHEET_LESSON_HOURS_FORMATTED_V1.LESSON_ID) AS LESSON_ID,
    TIMESHEET_TIMESHEET_TABLE_V1.KEY AS TS_KEY,
    AS_VALUE(TIMESHEET_TIMESHEET_TABLE_V1.KEY) AS TIMESHEET_ID,
    TIMESHEET_TIMESHEET_LESSON_HOURS_FORMATTED_V1.FLAG_ON AS FLAG_ON,
    TIMESHEET_TIMESHEET_LESSON_HOURS_FORMATTED_V1.CREATED_AT AS TIMESHEET_LESSON_HOUR_CREATED_AT,
    TIMESHEET_TIMESHEET_LESSON_HOURS_FORMATTED_V1.UPDATED_AT AS TIMESHEET_LESSON_HOUR_UPDATED_AT,
    TIMESHEET_TIMESHEET_LESSON_HOURS_FORMATTED_V1.DELETED_AT AS TIMESHEET_LESSON_HOUR_DELETED_AT,
    TIMESHEET_TIMESHEET_TABLE_V1.STAFF_ID AS STAFF_ID,
    TIMESHEET_TIMESHEET_TABLE_V1.TIMESHEET_STATUS AS TIMESHEET_STATUS,
    TIMESHEET_TIMESHEET_TABLE_V1.TIMESHEET_DATE AS TIMESHEET_DATE,
    TIMESHEET_TIMESHEET_TABLE_V1.REMARK AS TIMESHEET_REMARK,
    TIMESHEET_TIMESHEET_TABLE_V1.LOCATION_ID AS LOCATION_ID,
    TIMESHEET_TIMESHEET_TABLE_V1.CREATED_AT AS TIMESHEET_CREATED_AT,
    TIMESHEET_TIMESHEET_TABLE_V1.UPDATED_AT AS TIMESHEET_UPDATED_AT,
    TIMESHEET_TIMESHEET_TABLE_V1.DELETED_AT AS TIMESHEET_DELETED_AT
FROM TIMESHEET_TIMESHEET_LESSON_HOURS_FORMATTED_V1
JOIN TIMESHEET_TIMESHEET_TABLE_V1
ON TIMESHEET_TIMESHEET_LESSON_HOURS_FORMATTED_V1.TIMESHEET_ID = TIMESHEET_TIMESHEET_TABLE_V1.KEY;


CREATE TABLE IF NOT EXISTS TIMESHEET_JOIN_OWH_V1
AS SELECT
    TIMESHEET_OTHER_WORKING_HOURS_TABLE_V1.KEY AS KEY,
    TIMESHEET_OTHER_WORKING_HOURS_TABLE_V1.OTHER_WORKING_HOURS_ID AS OTHER_WORKING_HOURS_ID,
    TIMESHEET_TIMESHEET_TABLE_V1.KEY AS TIMESHEET_ID,
    TIMESHEET_OTHER_WORKING_HOURS_TABLE_V1.TIMESHEET_CONFIG_ID AS TIMESHEET_CONFIG_ID,
    TIMESHEET_OTHER_WORKING_HOURS_TABLE_V1.START_TIME AS START_TIME,
    TIMESHEET_OTHER_WORKING_HOURS_TABLE_V1.END_TIME AS END_TIME,
    TIMESHEET_OTHER_WORKING_HOURS_TABLE_V1.TOTAL_HOUR AS TOTAL_HOUR,
    TIMESHEET_OTHER_WORKING_HOURS_TABLE_V1.REMARKS AS OTHER_WORKING_HOUR_REMARKS,
    TIMESHEET_OTHER_WORKING_HOURS_TABLE_V1.CREATED_AT AS OTHER_WORKING_HOUR_CREATED_AT,
    TIMESHEET_OTHER_WORKING_HOURS_TABLE_V1.UPDATED_AT AS OTHER_WORKING_HOUR_UPDATED_AT,
    TIMESHEET_OTHER_WORKING_HOURS_TABLE_V1.DELETED_AT AS OTHER_WORKING_HOUR_DELETED_AT,
    TIMESHEET_TIMESHEET_TABLE_V1.STAFF_ID AS STAFF_ID,
    TIMESHEET_TIMESHEET_TABLE_V1.TIMESHEET_STATUS AS TIMESHEET_STATUS,
    TIMESHEET_TIMESHEET_TABLE_V1.TIMESHEET_DATE AS TIMESHEET_DATE,
    TIMESHEET_TIMESHEET_TABLE_V1.REMARK AS TIMESHEET_REMARK,
    TIMESHEET_TIMESHEET_TABLE_V1.LOCATION_ID AS LOCATION_ID,
    TIMESHEET_TIMESHEET_TABLE_V1.CREATED_AT AS TIMESHEET_CREATED_AT,
    TIMESHEET_TIMESHEET_TABLE_V1.UPDATED_AT AS TIMESHEET_UPDATED_AT,
    TIMESHEET_TIMESHEET_TABLE_V1.DELETED_AT AS TIMESHEET_DELETED_AT
FROM TIMESHEET_OTHER_WORKING_HOURS_TABLE_V1
JOIN TIMESHEET_TIMESHEET_TABLE_V1
ON TIMESHEET_OTHER_WORKING_HOURS_TABLE_V1.TIMESHEET_ID = TIMESHEET_TIMESHEET_TABLE_V1.KEY;


CREATE TABLE IF NOT EXISTS TS_OTHER_WORKING_V1
AS SELECT
    TIMESHEET_JOIN_OWH_V1.KEY AS ROWKEY,
    AS_VALUE(TIMESHEET_JOIN_OWH_V1.KEY) AS OTHER_WORKING_HOURS_ID,
    TIMESHEET_JOIN_OWH_V1.TIMESHEET_ID AS TIMESHEET_ID,
    TIMESHEET_TIMESHEET_CONFIG_TABLE_V1.KEY AS TIMESHEET_CONFIG_ID,
    TIMESHEET_JOIN_OWH_V1.START_TIME AS START_TIME,
    TIMESHEET_JOIN_OWH_V1.END_TIME AS END_TIME,
    TIMESHEET_JOIN_OWH_V1.TOTAL_HOUR AS TOTAL_HOUR,
    TIMESHEET_JOIN_OWH_V1.OTHER_WORKING_HOUR_REMARKS AS OTHER_WORKING_HOUR_REMARKS,
    TIMESHEET_JOIN_OWH_V1.OTHER_WORKING_HOUR_CREATED_AT AS OTHER_WORKING_HOUR_CREATED_AT,
    TIMESHEET_JOIN_OWH_V1.OTHER_WORKING_HOUR_UPDATED_AT AS OTHER_WORKING_HOUR_UPDATED_AT,
    TIMESHEET_JOIN_OWH_V1.OTHER_WORKING_HOUR_DELETED_AT AS OTHER_WORKING_HOUR_DELETED_AT,
    TIMESHEET_TIMESHEET_CONFIG_TABLE_V1.CONFIG_TYPE AS CONFIG_TYPE,
    TIMESHEET_TIMESHEET_CONFIG_TABLE_V1.CONFIG_VALUE AS CONFIG_VALUE,
    TIMESHEET_TIMESHEET_CONFIG_TABLE_V1.CREATED_AT AS TIMESHEET_CONFIG_CREATED_AT,
    TIMESHEET_TIMESHEET_CONFIG_TABLE_V1.UPDATED_AT AS TIMESHEET_CONFIG_UPDATED_AT,
    TIMESHEET_TIMESHEET_CONFIG_TABLE_V1.DELETED_AT AS TIMESHEET_CONFIG_DELETED_AT,
    TIMESHEET_JOIN_OWH_V1.STAFF_ID AS STAFF_ID,
    TIMESHEET_JOIN_OWH_V1.TIMESHEET_STATUS AS TIMESHEET_STATUS,
    TIMESHEET_JOIN_OWH_V1.TIMESHEET_DATE AS TIMESHEET_DATE,
    TIMESHEET_JOIN_OWH_V1.timesheet_remark AS TIMESHEET_REMARK,
    TIMESHEET_JOIN_OWH_V1.LOCATION_ID AS LOCATION_ID,
    TIMESHEET_JOIN_OWH_V1.TIMESHEET_CREATED_AT AS TIMESHEET_CREATED_AT,
    TIMESHEET_JOIN_OWH_V1.TIMESHEET_UPDATED_AT AS TIMESHEET_UPDATED_AT,
    TIMESHEET_JOIN_OWH_V1.TIMESHEET_DELETED_AT AS TIMESHEET_DELETED_AT
FROM TIMESHEET_JOIN_OWH_V1
JOIN TIMESHEET_TIMESHEET_CONFIG_TABLE_V1 
ON TIMESHEET_JOIN_OWH_V1.TIMESHEET_CONFIG_ID = TIMESHEET_TIMESHEET_CONFIG_TABLE_V1.KEY;

CREATE TABLE IF NOT EXISTS AUTO_CREATE_FLAG_ACTIVITY_LOG_V1
AS SELECT
    TIMESHEET_AUTO_CREATE_FLAG_ACTIVITY_LOG_TABLE_V1.KEY AS AUTO_CREATE_FLAG_ACTIVITY_LOG_ID,
    TIMESHEET_AUTO_CREATE_FLAG_ACTIVITY_LOG_TABLE_V1.STAFF_ID AS STAFF_ID,
    TIMESHEET_AUTO_CREATE_FLAG_ACTIVITY_LOG_TABLE_V1.CHANGE_TIME AS CHANGE_TIME,
    TIMESHEET_AUTO_CREATE_FLAG_ACTIVITY_LOG_TABLE_V1.FLAG_ON AS FLAG_ON,
    TIMESHEET_AUTO_CREATE_FLAG_ACTIVITY_LOG_TABLE_V1.CREATED_AT AS CREATED_AT,
    TIMESHEET_AUTO_CREATE_FLAG_ACTIVITY_LOG_TABLE_V1.UPDATED_AT AS UPDATED_AT,
    TIMESHEET_AUTO_CREATE_FLAG_ACTIVITY_LOG_TABLE_V1.DELETED_AT AS DELETED_AT
FROM TIMESHEET_AUTO_CREATE_FLAG_ACTIVITY_LOG_TABLE_V1;


CREATE TABLE IF NOT EXISTS AUTO_CREATE_TIMESHEET_FLAG_V1
AS SELECT
    TIMESHEET_AUTO_CREATE_TIMESHEET_FLAG_TABLE_V1.KEY AS STAFF_ID,
    TIMESHEET_AUTO_CREATE_TIMESHEET_FLAG_TABLE_V1.FLAG_ON AS FLAG_ON,
    TIMESHEET_AUTO_CREATE_TIMESHEET_FLAG_TABLE_V1.CREATED_AT AS CREATED_AT,
    TIMESHEET_AUTO_CREATE_TIMESHEET_FLAG_TABLE_V1.UPDATED_AT AS UPDATED_AT,
    TIMESHEET_AUTO_CREATE_TIMESHEET_FLAG_TABLE_V1.DELETED_AT AS DELETED_AT
FROM TIMESHEET_AUTO_CREATE_TIMESHEET_FLAG_TABLE_V1;

CREATE TABLE IF NOT EXISTS TIMESHEET_CONFIRMATION_CUT_OFF_DATE_V1
AS SELECT
    TIMESHEET_TIMESHEET_CONFIRMATION_CUT_OFF_DATE_TABLE_V1.KEY AS TIMESHEET_CONFIRMATION_CUT_OFF_DATE_ID,
    TIMESHEET_TIMESHEET_CONFIRMATION_CUT_OFF_DATE_TABLE_V1.CUT_OFF_DATE AS CUT_OFF_DATE,
    TIMESHEET_TIMESHEET_CONFIRMATION_CUT_OFF_DATE_TABLE_V1.START_DATE AS START_DATE,
    TIMESHEET_TIMESHEET_CONFIRMATION_CUT_OFF_DATE_TABLE_V1.END_DATE AS END_DATE,
    TIMESHEET_TIMESHEET_CONFIRMATION_CUT_OFF_DATE_TABLE_V1.CREATED_AT AS CREATED_AT,
    TIMESHEET_TIMESHEET_CONFIRMATION_CUT_OFF_DATE_TABLE_V1.UPDATED_AT AS UPDATED_AT,
    TIMESHEET_TIMESHEET_CONFIRMATION_CUT_OFF_DATE_TABLE_V1.DELETED_AT AS DELETED_AT
FROM TIMESHEET_TIMESHEET_CONFIRMATION_CUT_OFF_DATE_TABLE_V1;

CREATE TABLE IF NOT EXISTS TIMESHEET_CONFIRMATION_INFO_V1
AS SELECT
    TIMESHEET_TIMESHEET_CONFIRMATION_INFO_TABLE_V1.KEY AS TIMESHEET_CONFIRMATION_INFO_ID,
    TIMESHEET_TIMESHEET_CONFIRMATION_INFO_TABLE_V1.PERIOD_ID AS PERIOD_ID,
    TIMESHEET_TIMESHEET_CONFIRMATION_INFO_TABLE_V1.LOCATION_ID AS LOCATION_ID,
    TIMESHEET_TIMESHEET_CONFIRMATION_INFO_TABLE_V1.CREATED_AT AS CREATED_AT,
    TIMESHEET_TIMESHEET_CONFIRMATION_INFO_TABLE_V1.UPDATED_AT AS UPDATED_AT,
    TIMESHEET_TIMESHEET_CONFIRMATION_INFO_TABLE_V1.DELETED_AT AS DELETED_AT
FROM TIMESHEET_TIMESHEET_CONFIRMATION_INFO_TABLE_V1;

CREATE TABLE IF NOT EXISTS TIMESHEET_CONFIRMATION_PERIOD_V1
AS SELECT
    TIMESHEET_TIMESHEET_CONFIRMATION_PERIOD_TABLE_V1.KEY AS TIMESHEET_CONFIRMATION_PERIOD_ID,
    TIMESHEET_TIMESHEET_CONFIRMATION_PERIOD_TABLE_V1.START_DATE AS START_DATE,
    TIMESHEET_TIMESHEET_CONFIRMATION_PERIOD_TABLE_V1.END_DATE AS END_DATE,
    TIMESHEET_TIMESHEET_CONFIRMATION_PERIOD_TABLE_V1.CREATED_AT AS CREATED_AT,
    TIMESHEET_TIMESHEET_CONFIRMATION_PERIOD_TABLE_V1.UPDATED_AT AS UPDATED_AT,
    TIMESHEET_TIMESHEET_CONFIRMATION_PERIOD_TABLE_V1.DELETED_AT AS DELETED_AT
FROM TIMESHEET_TIMESHEET_CONFIRMATION_PERIOD_TABLE_V1;


DROP CONNECTOR IF EXISTS TS_TRANSPORTATION_V1;
CREATE SINK CONNECTOR TS_TRANSPORTATION_V2 WITH (
      'connector.class'='io.confluent.connect.jdbc.JdbcSinkConnector',
      'transforms.unwrap.delete.handling.mode'='drop',
      'tasks.max'='1',
      'topics'='{{ .Values.topicPrefix }}TS_TRANSPORTATION_V1',
      'fields.whitelist'='transportation_expense_id,timesheet_id,transportation_type,transportation_from,transportation_to,cost_amount,round_trip,transportation_expense_remarks,transportation_expense_created_at,transportation_expense_updated_at,transportation_expense_deleted_at,timesheet_status,timesheet_date,timesheet_remark,timesheet_created_at,timesheet_updated_at,timesheet_deleted_at,staff_id',
      'key.converter'='org.apache.kafka.connect.storage.StringConverter',
      'value.converter'='io.confluent.connect.avro.AvroConverter',
      'value.converter.schema.registry.url'='{{ .Values.cpRegistryHost }}',
      'delete.enabled'='false',
      'transforms.unwrap.drop.tombstones'='true',
      'auto.create'='true',
      'connection.url'='${file:/decrypted/kafka-connect.secrets.properties:kec_url}',
      'insert.mode'='upsert',
      'table.name.format'='public.ts_transportation',
      'pk.mode'='record_key',
      'transforms'='RenameField',
      'transforms.RenameField.type'= 'org.apache.kafka.connect.transforms.ReplaceField$Value',
      'transforms.RenameField.renames'='TRANSPORTATION_EXPENSE_ID:transportation_expense_id,TIMESHEET_ID:timesheet_id,TRANSPORTATION_TYPE:transportation_type,TRANSPORTATION_FROM:transportation_from,TRANSPORTATION_TO:transportation_to,COST_AMOUNT:cost_amount,ROUND_TRIP:round_trip,TRANSPORTATION_EXPENSE_REMARKS:transportation_expense_remarks,TRANSPORTATION_EXPENSE_CREATED_AT:transportation_expense_created_at,TRANSPORTATION_EXPENSE_UPDATED_AT:transportation_expense_updated_at,TRANSPORTATION_EXPENSE_DELETED_AT:transportation_expense_deleted_at,TIMESHEET_STATUS:timesheet_status,TIMESHEET_DATE:timesheet_date,TIMESHEET_REMARK:timesheet_remark,TIMESHEET_CREATED_AT:timesheet_created_at,TIMESHEET_UPDATED_AT:timesheet_updated_at,TIMESHEET_DELETED_AT:timesheet_deleted_at,STAFF_ID:staff_id',
      'pk.fields'='transportation_expense_id'
); 


DROP CONNECTOR IF EXISTS STAFF_TRANSPORTATION_EXPENSE_V1;
CREATE SINK CONNECTOR STAFF_TRANSPORTATION_EXPENSE_V2 WITH (
      'connector.class'='io.confluent.connect.jdbc.JdbcSinkConnector',
      'transforms.unwrap.delete.handling.mode'='drop',
      'tasks.max'='1',
      'topics'='{{ .Values.topicPrefix }}STAFF_TRANSPORTATION_EXPENSE_V1',
      'fields.whitelist'='staff_transportation_expense_id,staff_id,location_id,transport_type,transportation_from,transportation_to,cost_amount,round_trip,remarks,created_at,updated_at,deleted_at',
      'key.converter'='org.apache.kafka.connect.storage.StringConverter',
      'value.converter'='io.confluent.connect.avro.AvroConverter',
      'value.converter.schema.registry.url'='{{ .Values.cpRegistryHost }}',
      'delete.enabled'='false',
      'transforms.unwrap.drop.tombstones'='true',
      'auto.create'='true',
      'connection.url'='${file:/decrypted/kafka-connect.secrets.properties:kec_url}',
      'insert.mode'='upsert',
      'table.name.format'='public.staff_transportation_expense',
      'pk.mode'='record_key',
      'transforms'='RenameField',
      'transforms.RenameField.type'= 'org.apache.kafka.connect.transforms.ReplaceField$Value',
      'transforms.RenameField.renames'='STAFF_TRANSPORTATION_EXPENSE_ID:staff_transportation_expense_id,STAFF_ID:staff_id,LOCATION_ID:location_id,TRANSPORT_TYPE:transport_type,TRANSPORTATION_FROM:transportation_from,TRANSPORTATION_TO:transportation_to,COST_AMOUNT:cost_amount,ROUND_TRIP:round_trip,REMARKS:remarks,CREATED_AT:created_at,UPDATED_AT:updated_at,DELETED_AT:deleted_at',
      'pk.fields'='staff_transportation_expense_id'
);


DROP CONNECTOR IF EXISTS TS_LESSON_V1;
CREATE SINK CONNECTOR TS_LESSON_V2 WITH (
      'connector.class'='io.confluent.connect.jdbc.JdbcSinkConnector',
      'transforms.unwrap.delete.handling.mode'='drop',
      'tasks.max'='1',
      'topics'='{{ .Values.topicPrefix }}TS_LESSON_V1',
      'fields.whitelist'='lesson_id,timesheet_id,flag_on,timesheet_lesson_hour_created_at,timesheet_lesson_hour_updated_at,timesheet_lesson_hour_deleted_at,staff_id,timesheet_status,timesheet_date,timesheet_remark,location_id,timesheet_created_at,timesheet_updated_at,timesheet_deleted_at',
      'key.converter'='org.apache.kafka.connect.storage.StringConverter',
      'value.converter'='io.confluent.connect.avro.AvroConverter',
      'value.converter.schema.registry.url'='{{ .Values.cpRegistryHost }}',
      'delete.enabled'='false',
      'transforms.unwrap.drop.tombstones'='true',
      'auto.create'='true',
      'connection.url'='${file:/decrypted/kafka-connect.secrets.properties:kec_url}',
      'insert.mode'='upsert',
      'table.name.format'='public.ts_lesson',
      'pk.mode'='record_key',
      'transforms'='RenameField',
      'transforms.RenameField.type'= 'org.apache.kafka.connect.transforms.ReplaceField$Value',
      'transforms.RenameField.renames'='LESSON_ID:lesson_id,TIMESHEET_ID:timesheet_id,FLAG_ON:flag_on,TIMESHEET_LESSON_HOUR_CREATED_AT:timesheet_lesson_hour_created_at,TIMESHEET_LESSON_HOUR_UPDATED_AT:timesheet_lesson_hour_updated_at,TIMESHEET_LESSON_HOUR_DELETED_AT:timesheet_lesson_hour_deleted_at,STAFF_ID:staff_id,TIMESHEET_STATUS:timesheet_status,TIMESHEET_DATE:timesheet_date,TIMESHEET_REMARK:timesheet_remark,LOCATION_ID:location_id,TIMESHEET_CREATED_AT:timesheet_created_at,TIMESHEET_UPDATED_AT:timesheet_updated_at,TIMESHEET_DELETED_AT:timesheet_deleted_at',
      'pk.fields'='lesson_id'
);


DROP CONNECTOR IF EXISTS TS_OTHER_WORKING_V1;
CREATE SINK CONNECTOR TS_OTHER_WORKING_V2 WITH (
      'connector.class'='io.confluent.connect.jdbc.JdbcSinkConnector',
      'transforms.unwrap.delete.handling.mode'='drop',
      'tasks.max'='1',
      'topics'='{{ .Values.topicPrefix }}TS_OTHER_WORKING_V1',
      'fields.whitelist'='other_working_hours_id,timesheet_id,timesheet_config_id,start_time,end_time,total_hour,other_working_hour_remarks,other_working_hour_created_at,other_working_hour_updated_at,other_working_hour_deleted_at,config_type,config_value,timesheet_config_created_at,timesheet_config_updated_at,timesheet_config_deleted_at,staff_id,timesheet_status,timesheet_date,timesheet_remark,location_id,timesheet_created_at,timesheet_updated_at,timesheet_deleted_at',
      'key.converter'='org.apache.kafka.connect.storage.StringConverter',
      'value.converter'='io.confluent.connect.avro.AvroConverter',
      'value.converter.schema.registry.url'='{{ .Values.cpRegistryHost }}',
      'delete.enabled'='false',
      'transforms.unwrap.drop.tombstones'='true',
      'auto.create'='true',
      'connection.url'='${file:/decrypted/kafka-connect.secrets.properties:kec_url}',
      'insert.mode'='upsert',
      'table.name.format'='public.ts_other_working',
      'pk.mode'='record_key',
      'transforms'='RenameField',
      'transforms.RenameField.type'= 'org.apache.kafka.connect.transforms.ReplaceField$Value',
      'transforms.RenameField.renames'='OTHER_WORKING_HOURS_ID:other_working_hours_id,TIMESHEET_ID:timesheet_id,TIMESHEET_CONFIG_ID:timesheet_config_id,START_TIME:start_time,END_TIME:end_time,TOTAL_HOUR:total_hour,OTHER_WORKING_HOUR_REMARKS:other_working_hour_remarks,OTHER_WORKING_HOUR_CREATED_AT:other_working_hour_created_at,OTHER_WORKING_HOUR_UPDATED_AT:other_working_hour_updated_at,OTHER_WORKING_HOUR_DELETED_AT:other_working_hour_deleted_at,CONFIG_TYPE:config_type,CONFIG_VALUE:config_value,TIMESHEET_CONFIG_CREATED_AT:timesheet_config_created_at,TIMESHEET_CONFIG_UPDATED_AT:timesheet_config_updated_at,TIMESHEET_CONFIG_DELETED_AT:timesheet_config_deleted_at,STAFF_ID:staff_id,TIMESHEET_STATUS:timesheet_status,TIMESHEET_DATE:timesheet_date,TIMESHEET_REMARK:timesheet_remark,LOCATION_ID:location_id,TIMESHEET_CREATED_AT:timesheet_created_at,TIMESHEET_UPDATED_AT:timesheet_updated_at,TIMESHEET_DELETED_AT:timesheet_deleted_at',
      'pk.fields'='other_working_hours_id'
);


DROP CONNECTOR IF EXISTS AUTO_CREATE_FLAG_ACTIVITY_LOG_V1;
CREATE SINK CONNECTOR AUTO_CREATE_FLAG_ACTIVITY_LOG_V2 WITH (
      'connector.class'='io.confluent.connect.jdbc.JdbcSinkConnector',
      'transforms.unwrap.delete.handling.mode'='drop',
      'tasks.max'='1',
      'topics'='{{ .Values.topicPrefix }}AUTO_CREATE_FLAG_ACTIVITY_LOG_V1',
      'fields.whitelist'='auto_create_flag_activity_log_id,staff_id,change_time,flag_on,created_at,updated_at,deleted_at',
      'key.converter'='org.apache.kafka.connect.storage.StringConverter',
      'value.converter'='io.confluent.connect.avro.AvroConverter',
      'value.converter.schema.registry.url'='{{ .Values.cpRegistryHost }}',
      'delete.enabled'='false',
      'transforms.unwrap.drop.tombstones'='true',
      'auto.create'='true',
      'connection.url'='${file:/decrypted/kafka-connect.secrets.properties:kec_url}',
      'insert.mode'='upsert',
      'table.name.format'='public.auto_create_flag_activity_log',
      'pk.mode'='record_key',
      'transforms'='RenameField',
      'transforms.RenameField.type'= 'org.apache.kafka.connect.transforms.ReplaceField$Value',
      'transforms.RenameField.renames'='AUTO_CREATE_FLAG_ACTIVITY_LOG_ID:auto_create_flag_activity_log_id,STAFF_ID:staff_id,CHANGE_TIME:change_time,FLAG_ON:flag_on,CREATED_AT:created_at,UPDATED_AT:updated_at,DELETED_AT:deleted_at',
      'pk.fields'='auto_create_flag_activity_log_id'
);


DROP CONNECTOR IF EXISTS AUTO_CREATE_TIMESHEET_FLAG_V1;
CREATE SINK CONNECTOR AUTO_CREATE_TIMESHEET_FLAG_V2 WITH (
      'connector.class'='io.confluent.connect.jdbc.JdbcSinkConnector',
      'transforms.unwrap.delete.handling.mode'='drop',
      'tasks.max'='1',
      'topics'='{{ .Values.topicPrefix }}AUTO_CREATE_TIMESHEET_FLAG_V1',
      'fields.whitelist'='staff_id,flag_on,created_at,updated_at,deleted_at',
      'key.converter'='org.apache.kafka.connect.storage.StringConverter',
      'value.converter'='io.confluent.connect.avro.AvroConverter',
      'value.converter.schema.registry.url'='{{ .Values.cpRegistryHost }}',
      'delete.enabled'='false',
      'transforms.unwrap.drop.tombstones'='true',
      'auto.create'='true',
      'connection.url'='${file:/decrypted/kafka-connect.secrets.properties:kec_url}',
      'insert.mode'='upsert',
      'table.name.format'='public.auto_create_timesheet_flag',
      'pk.mode'='record_key',
      'transforms'='RenameField',
      'transforms.RenameField.type'= 'org.apache.kafka.connect.transforms.ReplaceField$Value',
      'transforms.RenameField.renames'='STAFF_ID:staff_id,FLAG_ON:flag_on,CREATED_AT:created_at,UPDATED_AT:updated_at,DELETED_AT:deleted_at',
      'pk.fields'='staff_id'
);


DROP CONNECTOR IF EXISTS TIMESHEET_CONFIRMATION_CUT_OFF_DATE_V1;
CREATE SINK CONNECTOR TIMESHEET_CONFIRMATION_CUT_OFF_DATE_V2 WITH (
      'connector.class'='io.confluent.connect.jdbc.JdbcSinkConnector',
      'transforms.unwrap.delete.handling.mode'='drop',
      'tasks.max'='1',
      'topics'='{{ .Values.topicPrefix }}TIMESHEET_CONFIRMATION_CUT_OFF_DATE_V1',
      'fields.whitelist'='timesheet_confirmation_cut_off_date_id,cut_off_date,start_date,end_date,created_at,updated_at,deleted_at',
      'key.converter'='org.apache.kafka.connect.storage.StringConverter',
      'value.converter'='io.confluent.connect.avro.AvroConverter',
      'value.converter.schema.registry.url'='{{ .Values.cpRegistryHost }}',
      'delete.enabled'='false',
      'transforms.unwrap.drop.tombstones'='true',
      'auto.create'='true',
      'connection.url'='${file:/decrypted/kafka-connect.secrets.properties:kec_url}',
      'insert.mode'='upsert',
      'table.name.format'='public.timesheet_confirmation_cut_off_date',
      'pk.mode'='record_key',
      'transforms'='RenameField',
      'transforms.RenameField.type'= 'org.apache.kafka.connect.transforms.ReplaceField$Value',
      'transforms.RenameField.renames'='TIMESHEET_CONFIRMATION_CUT_OFF_DATE_ID:timesheet_confirmation_cut_off_date_id,CUT_OFF_DATE:cut_off_date,START_DATE:start_date,END_DATE:end_date,CREATED_AT:created_at,UPDATED_AT:updated_at,DELETED_AT:deleted_at',
      'pk.fields'='timesheet_confirmation_cut_off_date_id'
);


DROP CONNECTOR IF EXISTS TIMESHEET_CONFIRMATION_INFO_V1;
CREATE SINK CONNECTOR TIMESHEET_CONFIRMATION_INFO_V2 WITH (
      'connector.class'='io.confluent.connect.jdbc.JdbcSinkConnector',
      'transforms.unwrap.delete.handling.mode'='drop',
      'tasks.max'='1',
      'topics'='{{ .Values.topicPrefix }}TIMESHEET_CONFIRMATION_INFO_V1',
      'fields.whitelist'='timesheet_confirmation_info_id,period_id,location_id,created_at,updated_at,deleted_at',
      'key.converter'='org.apache.kafka.connect.storage.StringConverter',
      'value.converter'='io.confluent.connect.avro.AvroConverter',
      'value.converter.schema.registry.url'='{{ .Values.cpRegistryHost }}',
      'delete.enabled'='false',
      'transforms.unwrap.drop.tombstones'='true',
      'auto.create'='true',
      'connection.url'='${file:/decrypted/kafka-connect.secrets.properties:kec_url}',
      'insert.mode'='upsert',
      'table.name.format'='public.timesheet_confirmation_info',
      'pk.mode'='record_key',
      'transforms'='RenameField',
      'transforms.RenameField.type'= 'org.apache.kafka.connect.transforms.ReplaceField$Value',
      'transforms.RenameField.renames'='TIMESHEET_CONFIRMATION_INFO_ID:timesheet_confirmation_info_id,PERIOD_ID:period_id,LOCATION_ID:location_id,CREATED_AT:created_at,UPDATED_AT:updated_at,DELETED_AT:deleted_at',
      'pk.fields'='timesheet_confirmation_info_id'
);


DROP CONNECTOR IF EXISTS TIMESHEET_CONFIRMATION_PERIOD_V1;
CREATE SINK CONNECTOR TIMESHEET_CONFIRMATION_PERIOD_V2 WITH (
      'connector.class'='io.confluent.connect.jdbc.JdbcSinkConnector',
      'transforms.unwrap.delete.handling.mode'='drop',
      'tasks.max'='1',
      'topics'='{{ .Values.topicPrefix }}TIMESHEET_CONFIRMATION_PERIOD_V1',
      'fields.whitelist'='timesheet_confirmation_period_id,start_date,end_date,created_at,updated_at,deleted_at',
      'key.converter'='org.apache.kafka.connect.storage.StringConverter',
      'value.converter'='io.confluent.connect.avro.AvroConverter',
      'value.converter.schema.registry.url'='{{ .Values.cpRegistryHost }}',
      'delete.enabled'='false',
      'transforms.unwrap.drop.tombstones'='true',
      'auto.create'='true',
      'connection.url'='${file:/decrypted/kafka-connect.secrets.properties:kec_url}',
      'insert.mode'='upsert',
      'table.name.format'='public.timesheet_confirmation_period',
      'pk.mode'='record_key',
      'transforms'='RenameField',
      'transforms.RenameField.type'= 'org.apache.kafka.connect.transforms.ReplaceField$Value',
      'transforms.RenameField.renames'='TIMESHEET_CONFIRMATION_PERIOD_ID:timesheet_confirmation_period_id,START_DATE:start_date,END_DATE:end_date,CREATED_AT:created_at,UPDATED_AT:updated_at,DELETED_AT:deleted_at',
      'pk.fields'='timesheet_confirmation_period_id'
);
