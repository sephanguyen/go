{{- if .Values.enabled -}}
{{- if .Values.postHookSyncDataWarehouse }}
{{- range $.Values.dataWarehousePartners }}
# These source kafka connectors contain no secret
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
{{ include "util.labels" $ | indent 4 }}
  name: {{ . }}-source-connector
data:
{{- (tpl ($.Files.Glob (printf "datalake/connectors/source/**.json")).AsConfig $ )| nindent 2 }}
---
# Add configmap for source kafka connectors
# These source kafka connectors contain no secret
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
{{ include "util.labels" $ | indent 4 }}
  name: {{ . }}-ksql-migration-config
data:
{{- tpl ($.Files.Glob (printf "datawarehouses/%s/ksql/ksql-migrations.properties" . )).AsConfig $ | nindent 2 }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
{{ include "util.labels" $ | indent 4 }}
  name: {{ . }}-ksql-migrations
data:
{{- if eq "local" $.Values.global.environment }}
{{- $fileFilter := $.Values.fileFilter }}
{{- range $path, $_ := $.Files.Glob (printf "datawarehouses/%s/ksql/migrations/**.sql" . ) }}
{{- if regexMatch $fileFilter $path }}
{{ tpl ($.Files.Glob $path).AsConfig $ | indent 2 }}
{{- end }}
{{- end }}
{{- else }}
{{- (tpl ($.Files.Glob (printf "datawarehouses/%s/ksql/migrations/**.sql" . )).AsConfig $ )| nindent 2 }}
{{- end }}
---
# Add configmap for partner (kec, etc...) common config
# inlcuded information
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
{{- include "util.labels" $ | nindent 4 }}
  name: {{ . }}-common-config
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
data:
  {{ . }}.common.config.yaml: |
{{- tpl (printf "configs/%s.kec.common.config.yaml" $.Chart.Name | $.Files.Get) $ | nindent 4 }}
  {{ . }}.config.yaml: |
{{ tpl (printf "configs/%s/%s/%s.kec.config.yaml" $.Values.global.vendor $.Values.global.environment $.Chart.Name | $.Files.Get) $ | indent 4 }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ . }}-secret
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
type: Opaque
data:
  {{ $.Chart.Name }}.{{ . }}.secrets.encrypted.yaml: |-
{{ printf "secrets/%s/%s/%s.%s.secrets.encrypted.yaml" $.Values.global.vendor $.Values.global.environment $.Chart.Name . | $.Files.Get | b64enc | indent 4 }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "util.fullname" $ }}-migrate-{{ . }}-ksql
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "6"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: {{ include "util.chart" $ }}
    app.kubernetes.io/name: {{ include "util.name" $ }}-migrate-{{ . }}-ksql
    app.kubernetes.io/instance: {{ $.Release.Name }}
    {{- if $.Chart.AppVersion }}
    app.kubernetes.io/version: {{ $.Chart.AppVersion | quote }}
    {{- end }}
    app.kubernetes.io/managed-by: {{ $.Release.Service }}
spec:
  backoffLimit: 12
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "util.name" $ }}-migrate-{{ . }}-ksql
        app.kubernetes.io/instance: {{ $.Release.Name }}
        sidecar.istio.io/inject: "false"
    spec:
      restartPolicy: Never
      serviceAccountName: {{ include "util.serviceAccountName" $ }}
      {{- with (default $.Values.global.imagePullSecrets $.Values.imagePullSecrets) }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      # partner config map
      - name: ksql-migration-config
        configMap:
          name: {{ . }}-ksql-migration-config
          defaultMode: 0777
      - name: ksql-migrations
        configMap:
          name: {{ . }}-ksql-migrations
          defaultMode: 0777
      - name: {{ . }}-common-config
        configMap:
          name: {{ . }}-common-config
          items:
          - key: {{ . }}.common.config.yaml
            path: {{ . }}.common.config.yaml
          - key: {{ . }}.config.yaml
            path: {{ . }}.config.yaml
      - name: {{ . }}-source-connector
        configMap:
          name: {{ . }}-source-connector
          defaultMode: 0777
{{- if eq "local" $.Values.global.environment }}
      - name: service-credential
        secret:
          secretName: {{ include "util.fullname" $ }}
          items:
          - key: service_credential.json
            path: service_credential.json
{{- end }}
      # hephaestus secret volume
      - name: {{ . }}-secret
        secret:
          secretName: {{ . }}-secret
          items:
          - key: {{ $.Chart.Name }}.{{ . }}.secrets.encrypted.yaml
            path: {{ $.Chart.Name }}.{{ . }}.secrets.encrypted.yaml
      initContainers:
      - name: {{ . }}-init-migration-topics
        image: {{ include "util.image" $ }}
        imagePullPolicy: IfNotPresent
        command:
          - /bin/sh
          - -c
          - |
             /server gjob hephaestus_migrate_ksql \
             --commonConfigPath=/configs/{{ . }}.common.config.yaml \
             --configPath=/configs/{{ . }}.config.yaml \
             --secretsPath=/configs/{{ $.Chart.Name }}.{{ . }}.secrets.encrypted.yaml \
        volumeMounts:
        # hephaestus config volumes
        - name: {{ . }}-common-config
          mountPath: /configs/{{ . }}.common.config.yaml
          subPath: {{ . }}.common.config.yaml
          readOnly: true
        - name: {{ . }}-common-config
          mountPath: /configs/{{ . }}.config.yaml
          subPath: {{ . }}.config.yaml
          readOnly: true
        # hephaestus secret volume
        - name: {{ . }}-secret
          mountPath: /configs/{{ $.Chart.Name }}.{{ . }}.secrets.encrypted.yaml
          subPath: {{ $.Chart.Name }}.{{ . }}.secrets.encrypted.yaml
          readOnly: true
        - name: {{ . }}-source-connector
          mountPath: /configs/kafka-connect/source_connectors
{{- if eq "local" $.Values.global.environment }}
        - name: service-credential
          mountPath: /configs/service_credential.json
          subPath: service_credential.json
          readOnly: true
        env:
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: "/configs/service_credential.json"
{{- end }}
      - name: {{ . }}-validate-ksql
        image: "{{ $.Values.ksqldb.migrate.image.repository }}:{{ $.Values.ksqldb.migrate.image.tag }}"
        imagePullPolicy: IfNotPresent
        command:
          - /bin/bash
          - -c
          - |
            code=$(ksql-migrations validate -c /ksql/ksql-migrations.properties)
            echo "code = ${code}"
        volumeMounts:
        - name: ksql-migration-config
          mountPath: /ksql/ksql-migrations.properties
          subPath: ksql-migrations.properties
        - name: ksql-migrations
          mountPath: /ksql/migrations
      - name: {{ $.Chart.Name }}-update-{{ . }}-datawarehouse-connectors
        image: {{ include "util.image" $ }}
        imagePullPolicy: IfNotPresent
        command:
          - /bin/sh
          - -c
          - |
            /server gjob hephaestus_upsert_kafka_connect \
              --deployCustomSinkConnector \
              --commonConfigPath=/configs/{{ . }}.common.config.yaml \
              --configPath=/configs/{{ . }}.config.yaml \
              --secretsPath=/configs/{{ $.Chart.Name }}.{{ . }}.secrets.encrypted.yaml
        volumeMounts:
        # partner config volumes
        - name: {{ . }}-common-config
          mountPath: /configs/{{ . }}.common.config.yaml
          subPath: {{ . }}.common.config.yaml
          readOnly: true
        - name: {{ . }}-common-config
          mountPath: /configs/{{ . }}.config.yaml
          subPath: {{ . }}.config.yaml
          readOnly: true
        # hephaestus secret volume
        - name: {{ . }}-secret
          mountPath: /configs/{{ $.Chart.Name }}.{{ . }}.secrets.encrypted.yaml
          subPath: {{ $.Chart.Name }}.{{ . }}.secrets.encrypted.yaml
          readOnly: true
        - name: {{ . }}-source-connector
          mountPath: /configs/kafka-connect/source_connectors
{{- if eq "local" $.Values.global.environment }}
        - name: service-credential
          mountPath: /configs/service_credential.json
          subPath: service_credential.json
          readOnly: true
        env:
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: "/configs/service_credential.json"
{{- end }}
      containers:
      - name: {{ . }}-migrate-ksql
        image: "{{ $.Values.ksqldb.migrate.image.repository }}:{{ $.Values.ksqldb.migrate.image.tag }}"
        imagePullPolicy: IfNotPresent
        command:
          - ksql-migrations
          - apply
          - -a
          - -c
          - /ksql/ksql-migrations.properties
        volumeMounts:
        - name: ksql-migration-config
          mountPath: /ksql/ksql-migrations.properties
          subPath: ksql-migrations.properties
        - name: ksql-migrations
          mountPath: /ksql/migrations
        resources:
          {{- toYaml $.Values.resources | nindent 12 }}
      {{- with $.Values.nodeSelector }}
      nodeSelector:
        {{- toYaml $ | nindent 8 }}
      {{- end }}
    {{- with $.Values.affinity }}
      affinity:
        {{- toYaml $ | nindent 8 }}
    {{- end }}
    {{- with $.Values.tolerations }}
      tolerations:
        {{- toYaml $ | nindent 8 }}
    {{- end }}
{{- end }}
{{- end }}
{{- end -}}
